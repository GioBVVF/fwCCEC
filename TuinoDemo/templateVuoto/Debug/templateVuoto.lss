
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000008e0  00800100  0000868c  00008720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000868c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000348  008009e0  008009e0  00009000  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00009000  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009030  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000012f8  00000000  00000000  00009070  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003cebf  00000000  00000000  0000a368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000768e  00000000  00000000  00047227  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c425  00000000  00000000  0004e8b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004314  00000000  00000000  0005acdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008980  00000000  00000000  0005eff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000199f3  00000000  00000000  00067970  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001388  00000000  00000000  00081363  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	61 c1       	rjmp	.+706    	; 0x2c4 <__dtors_end>
       2:	00 00       	nop
       4:	89 c1       	rjmp	.+786    	; 0x318 <__bad_interrupt>
       6:	00 00       	nop
       8:	87 c1       	rjmp	.+782    	; 0x318 <__bad_interrupt>
       a:	00 00       	nop
       c:	85 c1       	rjmp	.+778    	; 0x318 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__vector_4>
      14:	81 c1       	rjmp	.+770    	; 0x318 <__bad_interrupt>
      16:	00 00       	nop
      18:	7f c1       	rjmp	.+766    	; 0x318 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__vector_7>
      20:	7b c1       	rjmp	.+758    	; 0x318 <__bad_interrupt>
      22:	00 00       	nop
      24:	79 c1       	rjmp	.+754    	; 0x318 <__bad_interrupt>
      26:	00 00       	nop
      28:	77 c1       	rjmp	.+750    	; 0x318 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	75 c1       	rjmp	.+746    	; 0x318 <__bad_interrupt>
      2e:	00 00       	nop
      30:	73 c1       	rjmp	.+742    	; 0x318 <__bad_interrupt>
      32:	00 00       	nop
      34:	71 c1       	rjmp	.+738    	; 0x318 <__bad_interrupt>
      36:	00 00       	nop
      38:	6f c1       	rjmp	.+734    	; 0x318 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6d c1       	rjmp	.+730    	; 0x318 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 65 37 	jmp	0x6eca	; 0x6eca <__vector_16>
      44:	69 c1       	rjmp	.+722    	; 0x318 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 53 35 	jmp	0x6aa6	; 0x6aa6 <__vector_18>
      4c:	0c 94 85 35 	jmp	0x6b0a	; 0x6b0a <__vector_19>
      50:	63 c1       	rjmp	.+710    	; 0x318 <__bad_interrupt>
      52:	00 00       	nop
      54:	61 c1       	rjmp	.+706    	; 0x318 <__bad_interrupt>
      56:	00 00       	nop
      58:	5f c1       	rjmp	.+702    	; 0x318 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5d c1       	rjmp	.+698    	; 0x318 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5b c1       	rjmp	.+694    	; 0x318 <__bad_interrupt>
      62:	00 00       	nop
      64:	59 c1       	rjmp	.+690    	; 0x318 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 6f 31 	jmp	0x62de	; 0x62de <__vector_26>
      6c:	55 c1       	rjmp	.+682    	; 0x318 <__bad_interrupt>
      6e:	00 00       	nop
      70:	53 c1       	rjmp	.+678    	; 0x318 <__bad_interrupt>
      72:	00 00       	nop
      74:	51 c1       	rjmp	.+674    	; 0x318 <__bad_interrupt>
      76:	00 00       	nop
      78:	4f c1       	rjmp	.+670    	; 0x318 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4d c1       	rjmp	.+666    	; 0x318 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4b c1       	rjmp	.+662    	; 0x318 <__bad_interrupt>
      82:	00 00       	nop
      84:	49 c1       	rjmp	.+658    	; 0x318 <__bad_interrupt>
      86:	00 00       	nop
      88:	47 c1       	rjmp	.+654    	; 0x318 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	45 0e       	add	r4, r21
      8e:	d7 0e       	add	r13, r23
      90:	fe 0e       	add	r15, r30
      92:	3a 0f       	add	r19, r26
      94:	a1 0f       	add	r26, r17
      96:	2d 10       	cpse	r2, r13
      98:	23 11       	cpse	r18, r3
      9a:	83 11       	cpse	r24, r3
      9c:	13 12       	cpse	r1, r19
      9e:	fe 12       	cpse	r15, r30
      a0:	6f 13       	cpse	r22, r31
      a2:	06 20       	and	r0, r6
      a4:	1d 20       	and	r1, r13
      a6:	1d 20       	and	r1, r13
      a8:	1a 20       	and	r1, r10
      aa:	1d 20       	and	r1, r13
      ac:	04 20       	and	r0, r4
      ae:	1d 20       	and	r1, r13
      b0:	1d 20       	and	r1, r13
      b2:	1d 20       	and	r1, r13
      b4:	f8 1f       	adc	r31, r24
      b6:	1d 20       	and	r1, r13
      b8:	1d 20       	and	r1, r13
      ba:	0d 20       	and	r0, r13
      bc:	18 20       	and	r1, r8
      be:	16 20       	and	r1, r6
      c0:	1d 20       	and	r1, r13
      c2:	1d 20       	and	r1, r13
      c4:	1d 20       	and	r1, r13
      c6:	14 20       	and	r1, r4

000000c8 <__trampolines_end>:
      c8:	00 40       	sbci	r16, 0x00	; 0
      ca:	7a 10       	cpse	r7, r10
      cc:	f3 5a       	subi	r31, 0xA3	; 163
      ce:	00 a0       	ldd	r0, Z+32	; 0x20
      d0:	72 4e       	sbci	r23, 0xE2	; 226
      d2:	18 09       	sbc	r17, r8
      d4:	00 10       	cpse	r0, r0
      d6:	a5 d4       	rcall	.+2378   	; 0xa22 <_ZN20ParametriCCEC_structC1ERKS_+0x22>
      d8:	e8 00       	.word	0x00e8	; ????
      da:	00 e8       	ldi	r16, 0x80	; 128
      dc:	76 48       	sbci	r23, 0x86	; 134
      de:	17 00       	.word	0x0017	; ????
      e0:	00 e4       	ldi	r16, 0x40	; 64
      e2:	0b 54       	subi	r16, 0x4B	; 75
      e4:	02 00       	.word	0x0002	; ????
      e6:	00 ca       	rjmp	.-3072   	; 0xfffff4e8 <__eeprom_end+0xff7ef4e8>
      e8:	9a 3b       	cpi	r25, 0xBA	; 186
      ea:	00 00       	nop
      ec:	00 e1       	ldi	r16, 0x10	; 16
      ee:	f5 05       	cpc	r31, r5
      f0:	00 00       	nop
      f2:	80 96       	adiw	r24, 0x20	; 32
      f4:	98 00       	.word	0x0098	; ????
      f6:	00 00       	nop
      f8:	40 42       	sbci	r20, 0x20	; 32
      fa:	0f 00       	.word	0x000f	; ????
      fc:	00 00       	nop
      fe:	a0 86       	std	Z+8, r10	; 0x08
     100:	01 00       	.word	0x0001	; ????
     102:	00 00       	nop
     104:	10 27       	eor	r17, r16
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	e8 03       	fmulsu	r22, r16
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	64 00       	.word	0x0064	; ????
     112:	00 00       	nop
     114:	00 00       	nop
     116:	0a 00       	.word	0x000a	; ????
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	01 00       	.word	0x0001	; ????
     11e:	00 00       	nop
     120:	00 00       	nop
     122:	2c 76       	andi	r18, 0x6C	; 108
     124:	d8 88       	ldd	r13, Y+16	; 0x10
     126:	dc 67       	ori	r29, 0x7C	; 124
     128:	4f 08       	sbc	r4, r15
     12a:	23 df       	rcall	.-442    	; 0xffffff72 <__eeprom_end+0xff7eff72>
     12c:	c1 df       	rcall	.-126    	; 0xb0 <__SREG__+0x71>
     12e:	ae 59       	subi	r26, 0x9E	; 158
     130:	e1 b1       	in	r30, 0x01	; 1
     132:	b7 96       	adiw	r30, 0x27	; 39
     134:	e5 e3       	ldi	r30, 0x35	; 53
     136:	e4 53       	subi	r30, 0x34	; 52
     138:	c6 3a       	cpi	r28, 0xA6	; 166
     13a:	e6 51       	subi	r30, 0x16	; 22
     13c:	99 76       	andi	r25, 0x69	; 105
     13e:	96 e8       	ldi	r25, 0x86	; 134
     140:	e6 c2       	rjmp	.+1484   	; 0x70e <_Z11clearEEPROMii+0x40>
     142:	84 26       	eor	r8, r20
     144:	eb 89       	ldd	r30, Y+19	; 0x13
     146:	8c 9b       	sbis	0x11, 4	; 17
     148:	62 ed       	ldi	r22, 0xD2	; 210
     14a:	40 7c       	andi	r20, 0xC0	; 192
     14c:	6f fc       	.word	0xfc6f	; ????
     14e:	ef bc       	out	0x2f, r14	; 47
     150:	9c 9f       	mul	r25, r28
     152:	40 f2       	brcs	.-112    	; 0xe4 <__trampolines_end+0x1c>
     154:	ba a5       	ldd	r27, Y+42	; 0x2a
     156:	6f a5       	ldd	r22, Y+47	; 0x2f
     158:	f4 90       	lpm	r15, Z
     15a:	05 5a       	subi	r16, 0xA5	; 165
     15c:	2a f7       	brpl	.-54     	; 0x128 <__trampolines_end+0x60>
     15e:	5c 93       	st	X, r21
     160:	6b 6c       	ori	r22, 0xCB	; 203
     162:	f9 67       	ori	r31, 0x79	; 121
     164:	6d c1       	rjmp	.+730    	; 0x440 <_Z8printTabh+0xa>
     166:	1b fc       	.word	0xfc1b	; ????
     168:	e0 e4       	ldi	r30, 0x40	; 64
     16a:	0d 47       	sbci	r16, 0x7D	; 125
     16c:	fe f5       	brtc	.+126    	; 0x1ec <_ZZ5setupE3__c+0xc>
     16e:	20 e6       	ldi	r18, 0x60	; 96
     170:	b5 00       	.word	0x00b5	; ????
     172:	d0 ed       	ldi	r29, 0xD0	; 208
     174:	90 2e       	mov	r9, r16
     176:	03 00       	.word	0x0003	; ????
     178:	94 35       	cpi	r25, 0x54	; 84
     17a:	77 05       	cpc	r23, r7
     17c:	00 80       	ld	r0, Z
     17e:	84 1e       	adc	r8, r20
     180:	08 00       	.word	0x0008	; ????
     182:	00 20       	and	r0, r0
     184:	4e 0a       	sbc	r4, r30
     186:	00 00       	nop
     188:	00 c8       	rjmp	.-4096   	; 0xfffff18a <__eeprom_end+0xff7ef18a>
     18a:	0c 33       	cpi	r16, 0x3C	; 60
     18c:	33 33       	cpi	r19, 0x33	; 51
     18e:	33 0f       	add	r19, r19
     190:	98 6e       	ori	r25, 0xE8	; 232
     192:	12 83       	std	Z+2, r17	; 0x02
     194:	11 41       	sbci	r17, 0x11	; 17
     196:	ef 8d       	ldd	r30, Y+31	; 0x1f
     198:	21 14       	cp	r2, r1
     19a:	89 3b       	cpi	r24, 0xB9	; 185
     19c:	e6 55       	subi	r30, 0x56	; 86
     19e:	16 cf       	rjmp	.-468    	; 0xffffffcc <__eeprom_end+0xff7effcc>
     1a0:	fe e6       	ldi	r31, 0x6E	; 110
     1a2:	db 18       	sub	r13, r11
     1a4:	d1 84       	ldd	r13, Z+9	; 0x09
     1a6:	4b 38       	cpi	r20, 0x8B	; 139
     1a8:	1b f7       	brvc	.-58     	; 0x170 <__trampolines_end+0xa8>
     1aa:	7c 1d       	adc	r23, r12
     1ac:	90 1d       	adc	r25, r0
     1ae:	a4 bb       	out	0x14, r26	; 20
     1b0:	e4 24       	eor	r14, r4
     1b2:	20 32       	cpi	r18, 0x20	; 32
     1b4:	84 72       	andi	r24, 0x24	; 36
     1b6:	5e 22       	and	r5, r30
     1b8:	81 00       	.word	0x0081	; ????
     1ba:	c9 f1       	breq	.+114    	; 0x22e <_ZL11daysInMonth+0xa>
     1bc:	24 ec       	ldi	r18, 0xC4	; 196
     1be:	a1 e5       	ldi	r26, 0x51	; 81
     1c0:	3d 27       	eor	r19, r29

000001c2 <_ZZ5setupE3__c_0>:
     1c2:	52 54 43 20 63 68 69 70 20 44 53 33 32 33 31 4d     RTC chip DS3231M
     1d2:	20 69 6e 69 74 69 61 6c 69 7a 65 64 2e 00            initialized..

000001e0 <_ZZ5setupE3__c>:
     1e0:	6e 6f 6e 20 74 72 6f 76 6f 20 6d 6f 64 75 6c 6f     non trovo modulo
     1f0:	20 52 54 43 20 44 53 33 32 33 31 4d 4d 2e 20 52      RTC DS3231MM. R
     200:	69 70 72 6f 76 6f 20 74 72 61 20 33 73 2e 00        iprovo tra 3s..

0000020f <_ZZN13DS3231M_Class6adjustEvE3__c>:
     20f:	4a 75 6e 20 20 33 20 32 30 32 31 00                 Jun  3 2021.

0000021b <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     21b:	31 32 3a 33 36 3a 33 38 00                          12:36:38.

00000224 <_ZL11daysInMonth>:
     224:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000230 <digital_pin_to_timer_PGM>:
     230:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     24c:	00 00 00 01                                         ....

00000250 <digital_pin_to_bit_mask_PGM>:
     250:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     260:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

00000270 <digital_pin_to_port_PGM>:
     270:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     280:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

00000290 <port_to_input_PGM>:
     290:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000029a <port_to_output_PGM>:
     29a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002a4 <port_to_mode_PGM>:
     2a4:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002ae <__ctors_start>:
     2ae:	54 17       	cp	r21, r20
     2b0:	8c 22       	and	r8, r28
     2b2:	e4 22       	and	r14, r20
     2b4:	dc 25       	eor	r29, r12
     2b6:	c3 27       	eor	r28, r19
     2b8:	ce 27       	eor	r28, r30
     2ba:	a0 29       	or	r26, r0
     2bc:	70 2d       	mov	r23, r0
     2be:	ff 33       	cpi	r31, 0x3F	; 63
     2c0:	b3 35       	cpi	r27, 0x53	; 83

000002c2 <__ctors_end>:
     2c2:	72 18       	sub	r7, r2

000002c4 <__dtors_end>:
     2c4:	11 24       	eor	r1, r1
     2c6:	1f be       	out	0x3f, r1	; 63
     2c8:	cf ef       	ldi	r28, 0xFF	; 255
     2ca:	d0 e4       	ldi	r29, 0x40	; 64
     2cc:	de bf       	out	0x3e, r29	; 62
     2ce:	cd bf       	out	0x3d, r28	; 61

000002d0 <__do_copy_data>:
     2d0:	19 e0       	ldi	r17, 0x09	; 9
     2d2:	a0 e0       	ldi	r26, 0x00	; 0
     2d4:	b1 e0       	ldi	r27, 0x01	; 1
     2d6:	ec e8       	ldi	r30, 0x8C	; 140
     2d8:	f6 e8       	ldi	r31, 0x86	; 134
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0b bf       	out	0x3b, r16	; 59
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <__do_copy_data+0x14>
     2e0:	07 90       	elpm	r0, Z+
     2e2:	0d 92       	st	X+, r0
     2e4:	a0 3e       	cpi	r26, 0xE0	; 224
     2e6:	b1 07       	cpc	r27, r17
     2e8:	d9 f7       	brne	.-10     	; 0x2e0 <__do_copy_data+0x10>

000002ea <__do_clear_bss>:
     2ea:	2d e0       	ldi	r18, 0x0D	; 13
     2ec:	a0 ee       	ldi	r26, 0xE0	; 224
     2ee:	b9 e0       	ldi	r27, 0x09	; 9
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <.do_clear_bss_start>

000002f2 <.do_clear_bss_loop>:
     2f2:	1d 92       	st	X+, r1

000002f4 <.do_clear_bss_start>:
     2f4:	a8 32       	cpi	r26, 0x28	; 40
     2f6:	b2 07       	cpc	r27, r18
     2f8:	e1 f7       	brne	.-8      	; 0x2f2 <.do_clear_bss_loop>

000002fa <__do_global_ctors>:
     2fa:	11 e0       	ldi	r17, 0x01	; 1
     2fc:	c1 e6       	ldi	r28, 0x61	; 97
     2fe:	d1 e0       	ldi	r29, 0x01	; 1
     300:	04 c0       	rjmp	.+8      	; 0x30a <__do_global_ctors+0x10>
     302:	21 97       	sbiw	r28, 0x01	; 1
     304:	fe 01       	movw	r30, r28
     306:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <__tablejump2__>
     30a:	c7 35       	cpi	r28, 0x57	; 87
     30c:	d1 07       	cpc	r29, r17
     30e:	c9 f7       	brne	.-14     	; 0x302 <__do_global_ctors+0x8>
     310:	0e 94 3f 36 	call	0x6c7e	; 0x6c7e <main>
     314:	0c 94 3a 43 	jmp	0x8674	; 0x8674 <__do_global_dtors>

00000318 <__bad_interrupt>:
     318:	73 ce       	rjmp	.-794    	; 0x0 <__vectors>

0000031a <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	08 95       	ret

00000320 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     320:	08 95       	ret

00000322 <_ZL10enable_ETHv>:

void ContaImpulsi()
{  
  {
    impulsi++;   
    my_delay_ms(debounceDelay);
     322:	44 98       	cbi	0x08, 4	; 8
     324:	08 95       	ret

00000326 <_ZL11disable_ETHv>:
     326:	44 9a       	sbi	0x08, 4	; 8
     328:	08 95       	ret

0000032a <_Z19InizializzaEthernetv>:
     32a:	ef 92       	push	r14
     32c:	ff 92       	push	r15
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	68 97       	sbiw	r28, 0x18	; 24
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	de bf       	out	0x3e, r29	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	cd bf       	out	0x3d, r28	; 61
     346:	80 ec       	ldi	r24, 0xC0	; 192
     348:	99 e0       	ldi	r25, 0x09	; 9
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	40 91 29 0a 	lds	r20, 0x0A29	; 0x800a29 <subnet+0x2>
     352:	50 91 2a 0a 	lds	r21, 0x0A2A	; 0x800a2a <subnet+0x3>
     356:	60 91 2b 0a 	lds	r22, 0x0A2B	; 0x800a2b <subnet+0x4>
     35a:	70 91 2c 0a 	lds	r23, 0x0A2C	; 0x800a2c <subnet+0x5>
     35e:	4b 83       	std	Y+3, r20	; 0x03
     360:	5c 83       	std	Y+4, r21	; 0x04
     362:	6d 83       	std	Y+5, r22	; 0x05
     364:	7e 83       	std	Y+6, r23	; 0x06
     366:	98 87       	std	Y+8, r25	; 0x08
     368:	8f 83       	std	Y+7, r24	; 0x07
     36a:	40 91 2f 0a 	lds	r20, 0x0A2F	; 0x800a2f <gateway+0x2>
     36e:	50 91 30 0a 	lds	r21, 0x0A30	; 0x800a30 <gateway+0x3>
     372:	60 91 31 0a 	lds	r22, 0x0A31	; 0x800a31 <gateway+0x4>
     376:	70 91 32 0a 	lds	r23, 0x0A32	; 0x800a32 <gateway+0x5>
     37a:	49 87       	std	Y+9, r20	; 0x09
     37c:	5a 87       	std	Y+10, r21	; 0x0a
     37e:	6b 87       	std	Y+11, r22	; 0x0b
     380:	7c 87       	std	Y+12, r23	; 0x0c
     382:	9e 87       	std	Y+14, r25	; 0x0e
     384:	8d 87       	std	Y+13, r24	; 0x0d
     386:	40 91 35 0a 	lds	r20, 0x0A35	; 0x800a35 <myDns+0x2>
     38a:	50 91 36 0a 	lds	r21, 0x0A36	; 0x800a36 <myDns+0x3>
     38e:	60 91 37 0a 	lds	r22, 0x0A37	; 0x800a37 <myDns+0x4>
     392:	70 91 38 0a 	lds	r23, 0x0A38	; 0x800a38 <myDns+0x5>
     396:	4f 87       	std	Y+15, r20	; 0x0f
     398:	58 8b       	std	Y+16, r21	; 0x10
     39a:	69 8b       	std	Y+17, r22	; 0x11
     39c:	7a 8b       	std	Y+18, r23	; 0x12
     39e:	9c 8b       	std	Y+20, r25	; 0x14
     3a0:	8b 8b       	std	Y+19, r24	; 0x13
     3a2:	80 91 3b 0a 	lds	r24, 0x0A3B	; 0x800a3b <ipCCEC+0x2>
     3a6:	90 91 3c 0a 	lds	r25, 0x0A3C	; 0x800a3c <ipCCEC+0x3>
     3aa:	a0 91 3d 0a 	lds	r26, 0x0A3D	; 0x800a3d <ipCCEC+0x4>
     3ae:	b0 91 3e 0a 	lds	r27, 0x0A3E	; 0x800a3e <ipCCEC+0x5>
     3b2:	8d 8b       	std	Y+21, r24	; 0x15
     3b4:	9e 8b       	std	Y+22, r25	; 0x16
     3b6:	af 8b       	std	Y+23, r26	; 0x17
     3b8:	b8 8f       	std	Y+24, r27	; 0x18
     3ba:	ce 01       	movw	r24, r28
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	7c 01       	movw	r14, r24
     3c0:	8e 01       	movw	r16, r28
     3c2:	09 5f       	subi	r16, 0xF9	; 249
     3c4:	1f 4f       	sbci	r17, 0xFF	; 255
     3c6:	9e 01       	movw	r18, r28
     3c8:	23 5f       	subi	r18, 0xF3	; 243
     3ca:	3f 4f       	sbci	r19, 0xFF	; 255
     3cc:	ae 01       	movw	r20, r28
     3ce:	4d 5e       	subi	r20, 0xED	; 237
     3d0:	5f 4f       	sbci	r21, 0xFF	; 255
     3d2:	6a e2       	ldi	r22, 0x2A	; 42
     3d4:	71 e0       	ldi	r23, 0x01	; 1
     3d6:	8b e7       	ldi	r24, 0x7B	; 123
     3d8:	9b e0       	ldi	r25, 0x0B	; 11
     3da:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
     3de:	68 96       	adiw	r28, 0x18	; 24
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	f8 94       	cli
     3e4:	de bf       	out	0x3e, r29	; 62
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	cd bf       	out	0x3d, r28	; 61
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	08 95       	ret

000003f8 <_Z11my_delay_msi>:
     3f8:	18 16       	cp	r1, r24
     3fa:	19 06       	cpc	r1, r25
     3fc:	44 f4       	brge	.+16     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3fe:	ef e9       	ldi	r30, 0x9F	; 159
     400:	ff e0       	ldi	r31, 0x0F	; 15
     402:	31 97       	sbiw	r30, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     408:	00 00       	nop
     40a:	01 97       	sbiw	r24, 0x01	; 1
     40c:	f5 cf       	rjmp	.-22     	; 0x3f8 <_Z11my_delay_msi>
     40e:	08 95       	ret

00000410 <_Z9printLinev>:
     410:	cf 93       	push	r28
     412:	8e e7       	ldi	r24, 0x7E	; 126
     414:	9c e0       	ldi	r25, 0x0C	; 12
     416:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <_ZN5Print7printlnEv>
     41a:	cd e7       	ldi	r28, 0x7D	; 125
     41c:	65 ed       	ldi	r22, 0xD5	; 213
     41e:	71 e0       	ldi	r23, 0x01	; 1
     420:	8e e7       	ldi	r24, 0x7E	; 126
     422:	9c e0       	ldi	r25, 0x0C	; 12
     424:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
     428:	c1 50       	subi	r28, 0x01	; 1
     42a:	c1 f7       	brne	.-16     	; 0x41c <_Z9printLinev+0xc>
     42c:	8e e7       	ldi	r24, 0x7E	; 126
     42e:	9c e0       	ldi	r25, 0x0C	; 12
     430:	cf 91       	pop	r28
     432:	0c 94 c4 36 	jmp	0x6d88	; 0x6d88 <_ZN5Print7printlnEv>

00000436 <_Z8printTabh>:
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	d8 2f       	mov	r29, r24
     43c:	c0 e0       	ldi	r28, 0x00	; 0
     43e:	cd 17       	cp	r28, r29
     440:	41 f0       	breq	.+16     	; 0x452 <_Z8printTabh+0x1c>
     442:	67 ed       	ldi	r22, 0xD7	; 215
     444:	71 e0       	ldi	r23, 0x01	; 1
     446:	8e e7       	ldi	r24, 0x7E	; 126
     448:	9c e0       	ldi	r25, 0x0C	; 12
     44a:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
     44e:	cf 5f       	subi	r28, 0xFF	; 255
     450:	f6 cf       	rjmp	.-20     	; 0x43e <_Z8printTabh+0x8>
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <_Z4passb>:
     458:	cf 93       	push	r28
     45a:	c8 2f       	mov	r28, r24
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	eb df       	rcall	.-42     	; 0x436 <_Z8printTabh>
     460:	69 ed       	ldi	r22, 0xD9	; 217
     462:	71 e0       	ldi	r23, 0x01	; 1
     464:	8e e7       	ldi	r24, 0x7E	; 126
     466:	9c e0       	ldi	r25, 0x0C	; 12
     468:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
     46c:	cc 23       	and	r28, r28
     46e:	19 f0       	breq	.+6      	; 0x476 <_Z4passb+0x1e>
     470:	6d ed       	ldi	r22, 0xDD	; 221
     472:	71 e0       	ldi	r23, 0x01	; 1
     474:	02 c0       	rjmp	.+4      	; 0x47a <_Z4passb+0x22>
     476:	62 ee       	ldi	r22, 0xE2	; 226
     478:	71 e0       	ldi	r23, 0x01	; 1
     47a:	8e e7       	ldi	r24, 0x7E	; 126
     47c:	9c e0       	ldi	r25, 0x0C	; 12
     47e:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	cf 91       	pop	r28
     486:	d7 cf       	rjmp	.-82     	; 0x436 <_Z8printTabh>

00000488 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>:
     488:	4f 92       	push	r4
     48a:	5f 92       	push	r5
     48c:	6f 92       	push	r6
     48e:	7f 92       	push	r7
     490:	8f 92       	push	r8
     492:	9f 92       	push	r9
     494:	af 92       	push	r10
     496:	bf 92       	push	r11
     498:	cf 92       	push	r12
     49a:	df 92       	push	r13
     49c:	ef 92       	push	r14
     49e:	ff 92       	push	r15
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x22>
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x24>
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x26>
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	7c 01       	movw	r14, r24
     4b4:	5b 01       	movw	r10, r22
     4b6:	4d b6       	in	r4, 0x3d	; 61
     4b8:	5e b6       	in	r5, 0x3e	; 62
     4ba:	6f e0       	ldi	r22, 0x0F	; 15
     4bc:	77 e0       	ldi	r23, 0x07	; 7
     4be:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
     4c2:	f5 01       	movw	r30, r10
     4c4:	c2 84       	ldd	r12, Z+10	; 0x0a
     4c6:	d3 84       	ldd	r13, Z+11	; 0x0b
     4c8:	8d b7       	in	r24, 0x3d	; 61
     4ca:	9e b7       	in	r25, 0x3e	; 62
     4cc:	8c 19       	sub	r24, r12
     4ce:	9d 09       	sbc	r25, r13
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	9e bf       	out	0x3e, r25	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	8d bf       	out	0x3d, r24	; 61
     4da:	ed b7       	in	r30, 0x3d	; 61
     4dc:	fe b7       	in	r31, 0x3e	; 62
     4de:	31 96       	adiw	r30, 0x01	; 1
     4e0:	4f 01       	movw	r8, r30
     4e2:	3f 01       	movw	r6, r30
     4e4:	f5 01       	movw	r30, r10
     4e6:	04 85       	ldd	r16, Z+12	; 0x0c
     4e8:	15 85       	ldd	r17, Z+13	; 0x0d
     4ea:	c0 0e       	add	r12, r16
     4ec:	d1 1e       	adc	r13, r17
     4ee:	0c 15       	cp	r16, r12
     4f0:	1d 05       	cpc	r17, r13
     4f2:	4c f4       	brge	.+18     	; 0x506 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x7e>
     4f4:	c8 01       	movw	r24, r16
     4f6:	0e 94 24 43 	call	0x8648	; 0x8648 <eeprom_read_byte>
     4fa:	f3 01       	movw	r30, r6
     4fc:	81 93       	st	Z+, r24
     4fe:	3f 01       	movw	r6, r30
     500:	0f 5f       	subi	r16, 0xFF	; 255
     502:	1f 4f       	sbci	r17, 0xFF	; 255
     504:	f4 cf       	rjmp	.-24     	; 0x4ee <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x66>
     506:	6b ed       	ldi	r22, 0xDB	; 219
     508:	71 e0       	ldi	r23, 0x01	; 1
     50a:	8e e7       	ldi	r24, 0x7E	; 126
     50c:	9c e0       	ldi	r25, 0x0C	; 12
     50e:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     512:	6b ed       	ldi	r22, 0xDB	; 219
     514:	71 e0       	ldi	r23, 0x01	; 1
     516:	8e e7       	ldi	r24, 0x7E	; 126
     518:	9c e0       	ldi	r25, 0x0C	; 12
     51a:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     51e:	b4 01       	movw	r22, r8
     520:	ce 01       	movw	r24, r28
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
     528:	be 01       	movw	r22, r28
     52a:	6f 5f       	subi	r22, 0xFF	; 255
     52c:	7f 4f       	sbci	r23, 0xFF	; 255
     52e:	c7 01       	movw	r24, r14
     530:	0e 94 f6 39 	call	0x73ec	; 0x73ec <_ZN6StringaSEOS_>
     534:	ce 01       	movw	r24, r28
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
     53c:	b5 01       	movw	r22, r10
     53e:	ce 01       	movw	r24, r28
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	0e 94 ee 39 	call	0x73dc	; 0x73dc <_ZN6StringC1ERKS_>
     546:	68 e8       	ldi	r22, 0x88	; 136
     548:	77 e0       	ldi	r23, 0x07	; 7
     54a:	ce 01       	movw	r24, r28
     54c:	01 96       	adiw	r24, 0x01	; 1
     54e:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <_ZplRK15StringSumHelperPKc>
     552:	bc 01       	movw	r22, r24
     554:	8e e7       	ldi	r24, 0x7E	; 126
     556:	9c e0       	ldi	r25, 0x0C	; 12
     558:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN5Print5printERK6String>
     55c:	ce 01       	movw	r24, r28
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
     564:	b7 01       	movw	r22, r14
     566:	8e e7       	ldi	r24, 0x7E	; 126
     568:	9c e0       	ldi	r25, 0x0C	; 12
     56a:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
     56e:	c7 01       	movw	r24, r14
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	5e be       	out	0x3e, r5	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	4d be       	out	0x3d, r4	; 61
     57a:	26 96       	adiw	r28, 0x06	; 6
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	cf 90       	pop	r12
     596:	bf 90       	pop	r11
     598:	af 90       	pop	r10
     59a:	9f 90       	pop	r9
     59c:	8f 90       	pop	r8
     59e:	7f 90       	pop	r7
     5a0:	6f 90       	pop	r6
     5a2:	5f 90       	pop	r5
     5a4:	4f 90       	pop	r4
     5a6:	08 95       	ret

000005a8 <_Z26write_eeprom_string_struct20ParametriCCEC_struct>:
     5a8:	8f 92       	push	r8
     5aa:	9f 92       	push	r9
     5ac:	af 92       	push	r10
     5ae:	bf 92       	push	r11
     5b0:	cf 92       	push	r12
     5b2:	df 92       	push	r13
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	2c 97       	sbiw	r28, 0x0c	; 12
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	5c 01       	movw	r10, r24
     5d2:	8d b6       	in	r8, 0x3d	; 61
     5d4:	9e b6       	in	r9, 0x3e	; 62
     5d6:	fc 01       	movw	r30, r24
     5d8:	c2 84       	ldd	r12, Z+10	; 0x0a
     5da:	d3 84       	ldd	r13, Z+11	; 0x0b
     5dc:	8d b7       	in	r24, 0x3d	; 61
     5de:	9e b7       	in	r25, 0x3e	; 62
     5e0:	8c 19       	sub	r24, r12
     5e2:	9d 09       	sbc	r25, r13
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	9e bf       	out	0x3e, r25	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	8d bf       	out	0x3d, r24	; 61
     5ee:	0d b7       	in	r16, 0x3d	; 61
     5f0:	1e b7       	in	r17, 0x3e	; 62
     5f2:	0f 5f       	subi	r16, 0xFF	; 255
     5f4:	1f 4f       	sbci	r17, 0xFF	; 255
     5f6:	a6 01       	movw	r20, r12
     5f8:	4f 5f       	subi	r20, 0xFF	; 255
     5fa:	5f 4f       	sbci	r21, 0xFF	; 255
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	b8 01       	movw	r22, r16
     602:	c5 01       	movw	r24, r10
     604:	06 96       	adiw	r24, 0x06	; 6
     606:	0e 94 a9 3b 	call	0x7752	; 0x7752 <_ZNK6String8getBytesEPhjj>
     60a:	4a e0       	ldi	r20, 0x0A	; 10
     60c:	b6 01       	movw	r22, r12
     60e:	ce 01       	movw	r24, r28
     610:	07 96       	adiw	r24, 0x07	; 7
     612:	0e 94 58 3a 	call	0x74b0	; 0x74b0 <_ZN6StringC1Eih>
     616:	67 ee       	ldi	r22, 0xE7	; 231
     618:	71 e0       	ldi	r23, 0x01	; 1
     61a:	ce 01       	movw	r24, r28
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
     622:	be 01       	movw	r22, r28
     624:	69 5f       	subi	r22, 0xF9	; 249
     626:	7f 4f       	sbci	r23, 0xFF	; 255
     628:	ce 01       	movw	r24, r28
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
     630:	bc 01       	movw	r22, r24
     632:	8e e7       	ldi	r24, 0x7E	; 126
     634:	9c e0       	ldi	r25, 0x0C	; 12
     636:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
     63a:	ce 01       	movw	r24, r28
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
     642:	ce 01       	movw	r24, r28
     644:	07 96       	adiw	r24, 0x07	; 7
     646:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
     64a:	6e ee       	ldi	r22, 0xEE	; 238
     64c:	71 e0       	ldi	r23, 0x01	; 1
     64e:	8e e7       	ldi	r24, 0x7E	; 126
     650:	9c e0       	ldi	r25, 0x0C	; 12
     652:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     656:	6b ed       	ldi	r22, 0xDB	; 219
     658:	71 e0       	ldi	r23, 0x01	; 1
     65a:	8e e7       	ldi	r24, 0x7E	; 126
     65c:	9c e0       	ldi	r25, 0x0C	; 12
     65e:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     662:	f5 01       	movw	r30, r10
     664:	e4 84       	ldd	r14, Z+12	; 0x0c
     666:	f5 84       	ldd	r15, Z+13	; 0x0d
     668:	f5 01       	movw	r30, r10
     66a:	84 85       	ldd	r24, Z+12	; 0x0c
     66c:	95 85       	ldd	r25, Z+13	; 0x0d
     66e:	8c 0d       	add	r24, r12
     670:	9d 1d       	adc	r25, r13
     672:	e8 16       	cp	r14, r24
     674:	f9 06       	cpc	r15, r25
     676:	64 f4       	brge	.+24     	; 0x690 <_Z26write_eeprom_string_struct20ParametriCCEC_struct+0xe8>
     678:	f8 01       	movw	r30, r16
     67a:	61 91       	ld	r22, Z+
     67c:	8f 01       	movw	r16, r30
     67e:	66 23       	and	r22, r22
     680:	19 f0       	breq	.+6      	; 0x688 <_Z26write_eeprom_string_struct20ParametriCCEC_struct+0xe0>
     682:	c7 01       	movw	r24, r14
     684:	0e 94 2c 43 	call	0x8658	; 0x8658 <eeprom_write_byte>
     688:	ff ef       	ldi	r31, 0xFF	; 255
     68a:	ef 1a       	sub	r14, r31
     68c:	ff 0a       	sbc	r15, r31
     68e:	ec cf       	rjmp	.-40     	; 0x668 <_Z26write_eeprom_string_struct20ParametriCCEC_struct+0xc0>
     690:	6b ed       	ldi	r22, 0xDB	; 219
     692:	71 e0       	ldi	r23, 0x01	; 1
     694:	8e e7       	ldi	r24, 0x7E	; 126
     696:	9c e0       	ldi	r25, 0x0C	; 12
     698:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	9e be       	out	0x3e, r9	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	8d be       	out	0x3d, r8	; 61
     6a8:	2c 96       	adiw	r28, 0x0c	; 12
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	df 90       	pop	r13
     6c2:	cf 90       	pop	r12
     6c4:	bf 90       	pop	r11
     6c6:	af 90       	pop	r10
     6c8:	9f 90       	pop	r9
     6ca:	8f 90       	pop	r8
     6cc:	08 95       	ret

000006ce <_Z11clearEEPROMii>:
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	ec 01       	movw	r28, r24
     6d8:	8b 01       	movw	r16, r22
     6da:	6b ed       	ldi	r22, 0xDB	; 219
     6dc:	71 e0       	ldi	r23, 0x01	; 1
     6de:	8e e7       	ldi	r24, 0x7E	; 126
     6e0:	9c e0       	ldi	r25, 0x0C	; 12
     6e2:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     6e6:	6b ed       	ldi	r22, 0xDB	; 219
     6e8:	71 e0       	ldi	r23, 0x01	; 1
     6ea:	8e e7       	ldi	r24, 0x7E	; 126
     6ec:	9c e0       	ldi	r25, 0x0C	; 12
     6ee:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     6f2:	6c e0       	ldi	r22, 0x0C	; 12
     6f4:	72 e0       	ldi	r23, 0x02	; 2
     6f6:	8e e7       	ldi	r24, 0x7E	; 126
     6f8:	9c e0       	ldi	r25, 0x0C	; 12
     6fa:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     6fe:	c0 17       	cp	r28, r16
     700:	d1 07       	cpc	r29, r17
     702:	34 f4       	brge	.+12     	; 0x710 <_Z11clearEEPROMii+0x42>
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	ce 01       	movw	r24, r28
     708:	0e 94 2c 43 	call	0x8658	; 0x8658 <eeprom_write_byte>
     70c:	21 96       	adiw	r28, 0x01	; 1
     70e:	f7 cf       	rjmp	.-18     	; 0x6fe <_Z11clearEEPROMii+0x30>
     710:	69 e2       	ldi	r22, 0x29	; 41
     712:	72 e0       	ldi	r23, 0x02	; 2
     714:	8e e7       	ldi	r24, 0x7E	; 126
     716:	9c e0       	ldi	r25, 0x0C	; 12
     718:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     71c:	6b ed       	ldi	r22, 0xDB	; 219
     71e:	71 e0       	ldi	r23, 0x01	; 1
     720:	8e e7       	ldi	r24, 0x7E	; 126
     722:	9c e0       	ldi	r25, 0x0C	; 12
     724:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     728:	6b ed       	ldi	r22, 0xDB	; 219
     72a:	71 e0       	ldi	r23, 0x01	; 1
     72c:	8e e7       	ldi	r24, 0x7E	; 126
     72e:	9c e0       	ldi	r25, 0x0C	; 12
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	0c 94 e7 36 	jmp	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>

0000073c <_Z18read_eeprom_stringii>:
     73c:	4f 92       	push	r4
     73e:	5f 92       	push	r5
     740:	6f 92       	push	r6
     742:	7f 92       	push	r7
     744:	8f 92       	push	r8
     746:	9f 92       	push	r9
     748:	af 92       	push	r10
     74a:	bf 92       	push	r11
     74c:	cf 92       	push	r12
     74e:	df 92       	push	r13
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	2c 97       	sbiw	r28, 0x0c	; 12
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	de bf       	out	0x3e, r29	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	cd bf       	out	0x3d, r28	; 61
     76c:	7c 01       	movw	r14, r24
     76e:	6b 01       	movw	r12, r22
     770:	2a 01       	movw	r4, r20
     772:	6d b6       	in	r6, 0x3d	; 61
     774:	7e b6       	in	r7, 0x3e	; 62
     776:	6f e0       	ldi	r22, 0x0F	; 15
     778:	77 e0       	ldi	r23, 0x07	; 7
     77a:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
     77e:	8d b7       	in	r24, 0x3d	; 61
     780:	9e b7       	in	r25, 0x3e	; 62
     782:	8c 19       	sub	r24, r12
     784:	9d 09       	sbc	r25, r13
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	9e bf       	out	0x3e, r25	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	8d bf       	out	0x3d, r24	; 61
     790:	ed b7       	in	r30, 0x3d	; 61
     792:	fe b7       	in	r31, 0x3e	; 62
     794:	31 96       	adiw	r30, 0x01	; 1
     796:	5f 01       	movw	r10, r30
     798:	6b ed       	ldi	r22, 0xDB	; 219
     79a:	71 e0       	ldi	r23, 0x01	; 1
     79c:	8e e7       	ldi	r24, 0x7E	; 126
     79e:	9c e0       	ldi	r25, 0x0C	; 12
     7a0:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     7a4:	6a e3       	ldi	r22, 0x3A	; 58
     7a6:	72 e0       	ldi	r23, 0x02	; 2
     7a8:	8e e7       	ldi	r24, 0x7E	; 126
     7aa:	9c e0       	ldi	r25, 0x0C	; 12
     7ac:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     7b0:	6b ed       	ldi	r22, 0xDB	; 219
     7b2:	71 e0       	ldi	r23, 0x01	; 1
     7b4:	8e e7       	ldi	r24, 0x7E	; 126
     7b6:	9c e0       	ldi	r25, 0x0C	; 12
     7b8:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     7bc:	45 01       	movw	r8, r10
     7be:	82 01       	movw	r16, r4
     7c0:	c4 0c       	add	r12, r4
     7c2:	d5 1c       	adc	r13, r5
     7c4:	0c 15       	cp	r16, r12
     7c6:	1d 05       	cpc	r17, r13
     7c8:	5c f5       	brge	.+86     	; 0x820 <_Z18read_eeprom_stringii+0xe4>
     7ca:	c8 01       	movw	r24, r16
     7cc:	0e 94 24 43 	call	0x8648	; 0x8648 <eeprom_read_byte>
     7d0:	f4 01       	movw	r30, r8
     7d2:	81 93       	st	Z+, r24
     7d4:	4f 01       	movw	r8, r30
     7d6:	88 23       	and	r24, r24
     7d8:	01 f1       	breq	.+64     	; 0x81a <_Z18read_eeprom_stringii+0xde>
     7da:	4a e0       	ldi	r20, 0x0A	; 10
     7dc:	68 2f       	mov	r22, r24
     7de:	ce 01       	movw	r24, r28
     7e0:	07 96       	adiw	r24, 0x07	; 7
     7e2:	0e 94 2d 3a 	call	0x745a	; 0x745a <_ZN6StringC1Ehh>
     7e6:	6b ed       	ldi	r22, 0xDB	; 219
     7e8:	71 e0       	ldi	r23, 0x01	; 1
     7ea:	ce 01       	movw	r24, r28
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
     7f2:	be 01       	movw	r22, r28
     7f4:	69 5f       	subi	r22, 0xF9	; 249
     7f6:	7f 4f       	sbci	r23, 0xFF	; 255
     7f8:	ce 01       	movw	r24, r28
     7fa:	01 96       	adiw	r24, 0x01	; 1
     7fc:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
     800:	bc 01       	movw	r22, r24
     802:	8e e7       	ldi	r24, 0x7E	; 126
     804:	9c e0       	ldi	r25, 0x0C	; 12
     806:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN5Print5printERK6String>
     80a:	ce 01       	movw	r24, r28
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
     812:	ce 01       	movw	r24, r28
     814:	07 96       	adiw	r24, 0x07	; 7
     816:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
     81a:	0f 5f       	subi	r16, 0xFF	; 255
     81c:	1f 4f       	sbci	r17, 0xFF	; 255
     81e:	d2 cf       	rjmp	.-92     	; 0x7c4 <_Z18read_eeprom_stringii+0x88>
     820:	6b ed       	ldi	r22, 0xDB	; 219
     822:	71 e0       	ldi	r23, 0x01	; 1
     824:	8e e7       	ldi	r24, 0x7E	; 126
     826:	9c e0       	ldi	r25, 0x0C	; 12
     828:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     82c:	6b ed       	ldi	r22, 0xDB	; 219
     82e:	71 e0       	ldi	r23, 0x01	; 1
     830:	8e e7       	ldi	r24, 0x7E	; 126
     832:	9c e0       	ldi	r25, 0x0C	; 12
     834:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     838:	b5 01       	movw	r22, r10
     83a:	ce 01       	movw	r24, r28
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
     842:	be 01       	movw	r22, r28
     844:	6f 5f       	subi	r22, 0xFF	; 255
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	c7 01       	movw	r24, r14
     84a:	0e 94 f6 39 	call	0x73ec	; 0x73ec <_ZN6StringaSEOS_>
     84e:	ce 01       	movw	r24, r28
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
     856:	6d e4       	ldi	r22, 0x4D	; 77
     858:	72 e0       	ldi	r23, 0x02	; 2
     85a:	8e e7       	ldi	r24, 0x7E	; 126
     85c:	9c e0       	ldi	r25, 0x0C	; 12
     85e:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
     862:	b7 01       	movw	r22, r14
     864:	8e e7       	ldi	r24, 0x7E	; 126
     866:	9c e0       	ldi	r25, 0x0C	; 12
     868:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
     86c:	c7 01       	movw	r24, r14
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	f8 94       	cli
     872:	7e be       	out	0x3e, r7	; 62
     874:	0f be       	out	0x3f, r0	; 63
     876:	6d be       	out	0x3d, r6	; 61
     878:	2c 96       	adiw	r28, 0x0c	; 12
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	f8 94       	cli
     87e:	de bf       	out	0x3e, r29	; 62
     880:	0f be       	out	0x3f, r0	; 63
     882:	cd bf       	out	0x3d, r28	; 61
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	df 90       	pop	r13
     892:	cf 90       	pop	r12
     894:	bf 90       	pop	r11
     896:	af 90       	pop	r10
     898:	9f 90       	pop	r9
     89a:	8f 90       	pop	r8
     89c:	7f 90       	pop	r7
     89e:	6f 90       	pop	r6
     8a0:	5f 90       	pop	r5
     8a2:	4f 90       	pop	r4
     8a4:	08 95       	ret

000008a6 <_Z19write_eeprom_string6Stringii>:
     8a6:	8f 92       	push	r8
     8a8:	9f 92       	push	r9
     8aa:	af 92       	push	r10
     8ac:	bf 92       	push	r11
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	2c 97       	sbiw	r28, 0x0c	; 12
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	cd bf       	out	0x3d, r28	; 61
     8ce:	6b 01       	movw	r12, r22
     8d0:	4a 01       	movw	r8, r20
     8d2:	ad b6       	in	r10, 0x3d	; 61
     8d4:	be b6       	in	r11, 0x3e	; 62
     8d6:	2d b7       	in	r18, 0x3d	; 61
     8d8:	3e b7       	in	r19, 0x3e	; 62
     8da:	26 1b       	sub	r18, r22
     8dc:	37 0b       	sbc	r19, r23
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	3e bf       	out	0x3e, r19	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	2d bf       	out	0x3d, r18	; 61
     8e8:	ed b7       	in	r30, 0x3d	; 61
     8ea:	fe b7       	in	r31, 0x3e	; 62
     8ec:	31 96       	adiw	r30, 0x01	; 1
     8ee:	7f 01       	movw	r14, r30
     8f0:	fc 01       	movw	r30, r24
     8f2:	44 81       	ldd	r20, Z+4	; 0x04
     8f4:	55 81       	ldd	r21, Z+5	; 0x05
     8f6:	4f 5f       	subi	r20, 0xFF	; 255
     8f8:	5f 4f       	sbci	r21, 0xFF	; 255
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	b7 01       	movw	r22, r14
     900:	0e 94 a9 3b 	call	0x7752	; 0x7752 <_ZNK6String8getBytesEPhjj>
     904:	4a e0       	ldi	r20, 0x0A	; 10
     906:	b6 01       	movw	r22, r12
     908:	ce 01       	movw	r24, r28
     90a:	07 96       	adiw	r24, 0x07	; 7
     90c:	0e 94 58 3a 	call	0x74b0	; 0x74b0 <_ZN6StringC1Eih>
     910:	67 ee       	ldi	r22, 0xE7	; 231
     912:	71 e0       	ldi	r23, 0x01	; 1
     914:	ce 01       	movw	r24, r28
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
     91c:	be 01       	movw	r22, r28
     91e:	69 5f       	subi	r22, 0xF9	; 249
     920:	7f 4f       	sbci	r23, 0xFF	; 255
     922:	ce 01       	movw	r24, r28
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
     92a:	bc 01       	movw	r22, r24
     92c:	8e e7       	ldi	r24, 0x7E	; 126
     92e:	9c e0       	ldi	r25, 0x0C	; 12
     930:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
     934:	ce 01       	movw	r24, r28
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
     93c:	ce 01       	movw	r24, r28
     93e:	07 96       	adiw	r24, 0x07	; 7
     940:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
     944:	6e ee       	ldi	r22, 0xEE	; 238
     946:	71 e0       	ldi	r23, 0x01	; 1
     948:	8e e7       	ldi	r24, 0x7E	; 126
     94a:	9c e0       	ldi	r25, 0x0C	; 12
     94c:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     950:	6b ed       	ldi	r22, 0xDB	; 219
     952:	71 e0       	ldi	r23, 0x01	; 1
     954:	8e e7       	ldi	r24, 0x7E	; 126
     956:	9c e0       	ldi	r25, 0x0C	; 12
     958:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     95c:	84 01       	movw	r16, r8
     95e:	c8 0c       	add	r12, r8
     960:	d9 1c       	adc	r13, r9
     962:	0c 15       	cp	r16, r12
     964:	1d 05       	cpc	r17, r13
     966:	6c f5       	brge	.+90     	; 0x9c2 <_Z19write_eeprom_string6Stringii+0x11c>
     968:	f7 01       	movw	r30, r14
     96a:	60 81       	ld	r22, Z
     96c:	66 23       	and	r22, r22
     96e:	19 f1       	breq	.+70     	; 0x9b6 <_Z19write_eeprom_string6Stringii+0x110>
     970:	c8 01       	movw	r24, r16
     972:	0e 94 2c 43 	call	0x8658	; 0x8658 <eeprom_write_byte>
     976:	f7 01       	movw	r30, r14
     978:	60 81       	ld	r22, Z
     97a:	ce 01       	movw	r24, r28
     97c:	07 96       	adiw	r24, 0x07	; 7
     97e:	0e 94 16 3a 	call	0x742c	; 0x742c <_ZN6StringC1Ec>
     982:	6b ed       	ldi	r22, 0xDB	; 219
     984:	71 e0       	ldi	r23, 0x01	; 1
     986:	ce 01       	movw	r24, r28
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
     98e:	be 01       	movw	r22, r28
     990:	69 5f       	subi	r22, 0xF9	; 249
     992:	7f 4f       	sbci	r23, 0xFF	; 255
     994:	ce 01       	movw	r24, r28
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
     99c:	bc 01       	movw	r22, r24
     99e:	8e e7       	ldi	r24, 0x7E	; 126
     9a0:	9c e0       	ldi	r25, 0x0C	; 12
     9a2:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN5Print5printERK6String>
     9a6:	ce 01       	movw	r24, r28
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
     9ae:	ce 01       	movw	r24, r28
     9b0:	07 96       	adiw	r24, 0x07	; 7
     9b2:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
     9b6:	0f 5f       	subi	r16, 0xFF	; 255
     9b8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ba:	ff ef       	ldi	r31, 0xFF	; 255
     9bc:	ef 1a       	sub	r14, r31
     9be:	ff 0a       	sbc	r15, r31
     9c0:	d0 cf       	rjmp	.-96     	; 0x962 <_Z19write_eeprom_string6Stringii+0xbc>
     9c2:	6b ed       	ldi	r22, 0xDB	; 219
     9c4:	71 e0       	ldi	r23, 0x01	; 1
     9c6:	8e e7       	ldi	r24, 0x7E	; 126
     9c8:	9c e0       	ldi	r25, 0x0C	; 12
     9ca:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	be be       	out	0x3e, r11	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	ad be       	out	0x3d, r10	; 61
     9da:	2c 96       	adiw	r28, 0x0c	; 12
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	f8 94       	cli
     9e0:	de bf       	out	0x3e, r29	; 62
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	cd bf       	out	0x3d, r28	; 61
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	df 90       	pop	r13
     9f4:	cf 90       	pop	r12
     9f6:	bf 90       	pop	r11
     9f8:	af 90       	pop	r10
     9fa:	9f 90       	pop	r9
     9fc:	8f 90       	pop	r8
     9fe:	08 95       	ret

00000a00 <_ZN20ParametriCCEC_structC1ERKS_>:
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	ec 01       	movw	r28, r24
     a0a:	8b 01       	movw	r16, r22
     a0c:	0e 94 ee 39 	call	0x73dc	; 0x73dc <_ZN6StringC1ERKS_>
     a10:	b8 01       	movw	r22, r16
     a12:	6a 5f       	subi	r22, 0xFA	; 250
     a14:	7f 4f       	sbci	r23, 0xFF	; 255
     a16:	ce 01       	movw	r24, r28
     a18:	06 96       	adiw	r24, 0x06	; 6
     a1a:	0e 94 ee 39 	call	0x73dc	; 0x73dc <_ZN6StringC1ERKS_>
     a1e:	f8 01       	movw	r30, r16
     a20:	84 85       	ldd	r24, Z+12	; 0x0c
     a22:	95 85       	ldd	r25, Z+13	; 0x0d
     a24:	9d 87       	std	Y+13, r25	; 0x0d
     a26:	8c 87       	std	Y+12, r24	; 0x0c
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	08 95       	ret

00000a32 <_ZN20ParametriCCEC_structD1Ev>:
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	ec 01       	movw	r28, r24
     a38:	06 96       	adiw	r24, 0x06	; 6
     a3a:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
     a3e:	ce 01       	movw	r24, r28
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	0c 94 1b 39 	jmp	0x7236	; 0x7236 <_ZN6StringD1Ev>

00000a48 <_Z6Buzzerhm>:
     a48:	cf 92       	push	r12
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	6a 01       	movw	r12, r20
     a5a:	7b 01       	movw	r14, r22
     a5c:	c0 e0       	ldi	r28, 0x00	; 0
     a5e:	d0 e0       	ldi	r29, 0x00	; 0
     a60:	08 2f       	mov	r16, r24
     a62:	10 e0       	ldi	r17, 0x00	; 0
     a64:	c0 17       	cp	r28, r16
     a66:	d1 07       	cpc	r29, r17
     a68:	24 f4       	brge	.+8      	; 0xa72 <_Z6Buzzerhm+0x2a>
     a6a:	c6 01       	movw	r24, r12
     a6c:	c5 dc       	rcall	.-1654   	; 0x3f8 <_Z11my_delay_msi>
     a6e:	21 96       	adiw	r28, 0x01	; 1
     a70:	f9 cf       	rjmp	.-14     	; 0xa64 <_Z6Buzzerhm+0x1c>
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	df 90       	pop	r13
     a80:	cf 90       	pop	r12
     a82:	08 95       	ret

00000a84 <_Z13getCharKeypadi>:
     a84:	82 32       	cpi	r24, 0x22	; 34
     a86:	91 05       	cpc	r25, r1
     a88:	09 f4       	brne	.+2      	; 0xa8c <_Z13getCharKeypadi+0x8>
     a8a:	9a c0       	rjmp	.+308    	; 0xbc0 <_Z13getCharKeypadi+0x13c>
     a8c:	6c f5       	brge	.+90     	; 0xae8 <_Z13getCharKeypadi+0x64>
     a8e:	8a 30       	cpi	r24, 0x0A	; 10
     a90:	91 05       	cpc	r25, r1
     a92:	09 f4       	brne	.+2      	; 0xa96 <_Z13getCharKeypadi+0x12>
     a94:	83 c0       	rjmp	.+262    	; 0xb9c <_Z13getCharKeypadi+0x118>
     a96:	a4 f4       	brge	.+40     	; 0xac0 <_Z13getCharKeypadi+0x3c>
     a98:	86 30       	cpi	r24, 0x06	; 6
     a9a:	91 05       	cpc	r25, r1
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <_Z13getCharKeypadi+0x1c>
     a9e:	75 c0       	rjmp	.+234    	; 0xb8a <_Z13getCharKeypadi+0x106>
     aa0:	89 30       	cpi	r24, 0x09	; 9
     aa2:	91 05       	cpc	r25, r1
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <_Z13getCharKeypadi+0x24>
     aa6:	5d c0       	rjmp	.+186    	; 0xb62 <_Z13getCharKeypadi+0xde>
     aa8:	05 97       	sbiw	r24, 0x05	; 5
     aaa:	09 f0       	breq	.+2      	; 0xaae <_Z13getCharKeypadi+0x2a>
     aac:	cf c0       	rjmp	.+414    	; 0xc4c <_Z13getCharKeypadi+0x1c8>
     aae:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <MappaKeys>
     ab2:	8e e7       	ldi	r24, 0x7E	; 126
     ab4:	9c e0       	ldi	r25, 0x0C	; 12
     ab6:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	59 c0       	rjmp	.+178    	; 0xb72 <_Z13getCharKeypadi+0xee>
     ac0:	82 31       	cpi	r24, 0x12	; 18
     ac2:	91 05       	cpc	r25, r1
     ac4:	09 f4       	brne	.+2      	; 0xac8 <_Z13getCharKeypadi+0x44>
     ac6:	73 c0       	rjmp	.+230    	; 0xbae <_Z13getCharKeypadi+0x12a>
     ac8:	81 32       	cpi	r24, 0x21	; 33
     aca:	91 05       	cpc	r25, r1
     acc:	09 f4       	brne	.+2      	; 0xad0 <_Z13getCharKeypadi+0x4c>
     ace:	54 c0       	rjmp	.+168    	; 0xb78 <_Z13getCharKeypadi+0xf4>
     ad0:	41 97       	sbiw	r24, 0x11	; 17
     ad2:	09 f0       	breq	.+2      	; 0xad6 <_Z13getCharKeypadi+0x52>
     ad4:	bb c0       	rjmp	.+374    	; 0xc4c <_Z13getCharKeypadi+0x1c8>
     ad6:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <MappaKeys+0x2>
     ada:	8e e7       	ldi	r24, 0x7E	; 126
     adc:	9c e0       	ldi	r25, 0x0C	; 12
     ade:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     ae2:	22 e0       	ldi	r18, 0x02	; 2
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	45 c0       	rjmp	.+138    	; 0xb72 <_Z13getCharKeypadi+0xee>
     ae8:	80 36       	cpi	r24, 0x60	; 96
     aea:	91 05       	cpc	r25, r1
     aec:	09 f4       	brne	.+2      	; 0xaf0 <_Z13getCharKeypadi+0x6c>
     aee:	99 c0       	rjmp	.+306    	; 0xc22 <_Z13getCharKeypadi+0x19e>
     af0:	ac f4       	brge	.+42     	; 0xb1c <_Z13getCharKeypadi+0x98>
     af2:	88 34       	cpi	r24, 0x48	; 72
     af4:	91 05       	cpc	r25, r1
     af6:	09 f4       	brne	.+2      	; 0xafa <_Z13getCharKeypadi+0x76>
     af8:	82 c0       	rjmp	.+260    	; 0xbfe <_Z13getCharKeypadi+0x17a>
     afa:	80 35       	cpi	r24, 0x50	; 80
     afc:	91 05       	cpc	r25, r1
     afe:	09 f4       	brne	.+2      	; 0xb02 <_Z13getCharKeypadi+0x7e>
     b00:	87 c0       	rjmp	.+270    	; 0xc10 <_Z13getCharKeypadi+0x18c>
     b02:	84 34       	cpi	r24, 0x44	; 68
     b04:	91 05       	cpc	r25, r1
     b06:	09 f0       	breq	.+2      	; 0xb0a <_Z13getCharKeypadi+0x86>
     b08:	a1 c0       	rjmp	.+322    	; 0xc4c <_Z13getCharKeypadi+0x1c8>
     b0a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MappaKeys+0xc>
     b0e:	8e e7       	ldi	r24, 0x7E	; 126
     b10:	9c e0       	ldi	r25, 0x0C	; 12
     b12:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	8b c0       	rjmp	.+278    	; 0xc32 <_Z13getCharKeypadi+0x1ae>
     b1c:	88 38       	cpi	r24, 0x88	; 136
     b1e:	91 05       	cpc	r25, r1
     b20:	09 f4       	brne	.+2      	; 0xb24 <_Z13getCharKeypadi+0xa0>
     b22:	59 c0       	rjmp	.+178    	; 0xbd6 <_Z13getCharKeypadi+0x152>
     b24:	6c f4       	brge	.+26     	; 0xb40 <_Z13getCharKeypadi+0xbc>
     b26:	84 38       	cpi	r24, 0x84	; 132
     b28:	91 05       	cpc	r25, r1
     b2a:	09 f0       	breq	.+2      	; 0xb2e <_Z13getCharKeypadi+0xaa>
     b2c:	8f c0       	rjmp	.+286    	; 0xc4c <_Z13getCharKeypadi+0x1c8>
     b2e:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MappaKeys+0x8>
     b32:	8e e7       	ldi	r24, 0x7E	; 126
     b34:	9c e0       	ldi	r25, 0x0C	; 12
     b36:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	5c c0       	rjmp	.+184    	; 0xbf8 <_Z13getCharKeypadi+0x174>
     b40:	80 39       	cpi	r24, 0x90	; 144
     b42:	91 05       	cpc	r25, r1
     b44:	09 f4       	brne	.+2      	; 0xb48 <_Z13getCharKeypadi+0xc4>
     b46:	50 c0       	rjmp	.+160    	; 0xbe8 <_Z13getCharKeypadi+0x164>
     b48:	80 3a       	cpi	r24, 0xA0	; 160
     b4a:	91 05       	cpc	r25, r1
     b4c:	09 f0       	breq	.+2      	; 0xb50 <_Z13getCharKeypadi+0xcc>
     b4e:	7e c0       	rjmp	.+252    	; 0xc4c <_Z13getCharKeypadi+0x1c8>
     b50:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <MappaKeys+0xb>
     b54:	8e e7       	ldi	r24, 0x7E	; 126
     b56:	9c e0       	ldi	r25, 0x0C	; 12
     b58:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     b5c:	23 e0       	ldi	r18, 0x03	; 3
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	4b c0       	rjmp	.+150    	; 0xbf8 <_Z13getCharKeypadi+0x174>
     b62:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <MappaKeys+0x1>
     b66:	8e e7       	ldi	r24, 0x7E	; 126
     b68:	9c e0       	ldi	r25, 0x0C	; 12
     b6a:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     b6e:	21 e0       	ldi	r18, 0x01	; 1
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	5f c0       	rjmp	.+190    	; 0xc36 <_Z13getCharKeypadi+0x1b2>
     b78:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <MappaKeys+0x3>
     b7c:	8e e7       	ldi	r24, 0x7E	; 126
     b7e:	9c e0       	ldi	r25, 0x0C	; 12
     b80:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     b84:	23 e0       	ldi	r18, 0x03	; 3
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	f4 cf       	rjmp	.-24     	; 0xb72 <_Z13getCharKeypadi+0xee>
     b8a:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MappaKeys+0x4>
     b8e:	8e e7       	ldi	r24, 0x7E	; 126
     b90:	9c e0       	ldi	r25, 0x0C	; 12
     b92:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	1a c0       	rjmp	.+52     	; 0xbd0 <_Z13getCharKeypadi+0x14c>
     b9c:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <MappaKeys+0x5>
     ba0:	8e e7       	ldi	r24, 0x7E	; 126
     ba2:	9c e0       	ldi	r25, 0x0C	; 12
     ba4:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     ba8:	21 e0       	ldi	r18, 0x01	; 1
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	11 c0       	rjmp	.+34     	; 0xbd0 <_Z13getCharKeypadi+0x14c>
     bae:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <MappaKeys+0x6>
     bb2:	8e e7       	ldi	r24, 0x7E	; 126
     bb4:	9c e0       	ldi	r25, 0x0C	; 12
     bb6:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     bba:	22 e0       	ldi	r18, 0x02	; 2
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	08 c0       	rjmp	.+16     	; 0xbd0 <_Z13getCharKeypadi+0x14c>
     bc0:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <MappaKeys+0x7>
     bc4:	8e e7       	ldi	r24, 0x7E	; 126
     bc6:	9c e0       	ldi	r25, 0x0C	; 12
     bc8:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     bcc:	23 e0       	ldi	r18, 0x03	; 3
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	30 c0       	rjmp	.+96     	; 0xc36 <_Z13getCharKeypadi+0x1b2>
     bd6:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <MappaKeys+0x9>
     bda:	8e e7       	ldi	r24, 0x7E	; 126
     bdc:	9c e0       	ldi	r25, 0x0C	; 12
     bde:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	08 c0       	rjmp	.+16     	; 0xbf8 <_Z13getCharKeypadi+0x174>
     be8:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <MappaKeys+0xa>
     bec:	8e e7       	ldi	r24, 0x7E	; 126
     bee:	9c e0       	ldi	r25, 0x0C	; 12
     bf0:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     bf4:	22 e0       	ldi	r18, 0x02	; 2
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	1c c0       	rjmp	.+56     	; 0xc36 <_Z13getCharKeypadi+0x1b2>
     bfe:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <MappaKeys+0xd>
     c02:	8e e7       	ldi	r24, 0x7E	; 126
     c04:	9c e0       	ldi	r25, 0x0C	; 12
     c06:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     c0a:	21 e0       	ldi	r18, 0x01	; 1
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	11 c0       	rjmp	.+34     	; 0xc32 <_Z13getCharKeypadi+0x1ae>
     c10:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <MappaKeys+0xe>
     c14:	8e e7       	ldi	r24, 0x7E	; 126
     c16:	9c e0       	ldi	r25, 0x0C	; 12
     c18:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     c1c:	22 e0       	ldi	r18, 0x02	; 2
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	08 c0       	rjmp	.+16     	; 0xc32 <_Z13getCharKeypadi+0x1ae>
     c22:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <MappaKeys+0xf>
     c26:	8e e7       	ldi	r24, 0x7E	; 126
     c28:	9c e0       	ldi	r25, 0x0C	; 12
     c2a:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     c2e:	23 e0       	ldi	r18, 0x03	; 3
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	83 e0       	ldi	r24, 0x03	; 3
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	8a 5f       	subi	r24, 0xFA	; 250
     c40:	9e 4f       	sbci	r25, 0xFE	; 254
     c42:	fc 01       	movw	r30, r24
     c44:	e2 0f       	add	r30, r18
     c46:	f3 1f       	adc	r31, r19
     c48:	80 81       	ld	r24, Z
     c4a:	08 95       	ret
     c4c:	8e e4       	ldi	r24, 0x4E	; 78
     c4e:	08 95       	ret

00000c50 <_Z10displayLCDP6Stringii>:
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	ec 01       	movw	r28, r24
     c56:	87 eb       	ldi	r24, 0xB7	; 183
     c58:	9a e0       	ldi	r25, 0x0A	; 10
     c5a:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <_ZN3LCD5clearEv>
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	87 eb       	ldi	r24, 0xB7	; 183
     c62:	9a e0       	ldi	r25, 0x0A	; 10
     c64:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
     c68:	41 e0       	ldi	r20, 0x01	; 1
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	87 eb       	ldi	r24, 0xB7	; 183
     c6e:	9a e0       	ldi	r25, 0x0A	; 10
     c70:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
     c74:	be 01       	movw	r22, r28
     c76:	6a 5f       	subi	r22, 0xFA	; 250
     c78:	7f 4f       	sbci	r23, 0xFF	; 255
     c7a:	87 eb       	ldi	r24, 0xB7	; 183
     c7c:	9a e0       	ldi	r25, 0x0A	; 10
     c7e:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN5Print5printERK6String>
     c82:	42 e0       	ldi	r20, 0x02	; 2
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	87 eb       	ldi	r24, 0xB7	; 183
     c88:	9a e0       	ldi	r25, 0x0A	; 10
     c8a:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
     c8e:	be 01       	movw	r22, r28
     c90:	64 5f       	subi	r22, 0xF4	; 244
     c92:	7f 4f       	sbci	r23, 0xFF	; 255
     c94:	87 eb       	ldi	r24, 0xB7	; 183
     c96:	9a e0       	ldi	r25, 0x0A	; 10
     c98:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN5Print5printERK6String>
     c9c:	43 e0       	ldi	r20, 0x03	; 3
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	87 eb       	ldi	r24, 0xB7	; 183
     ca2:	9a e0       	ldi	r25, 0x0A	; 10
     ca4:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
     ca8:	be 01       	movw	r22, r28
     caa:	6e 5e       	subi	r22, 0xEE	; 238
     cac:	7f 4f       	sbci	r23, 0xFF	; 255
     cae:	87 eb       	ldi	r24, 0xB7	; 183
     cb0:	9a e0       	ldi	r25, 0x0A	; 10
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	0c 94 ae 36 	jmp	0x6d5c	; 0x6d5c <_ZN5Print5printERK6String>

00000cba <_Z11avanzaStatom>:
     cba:	cf 92       	push	r12
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	6b 01       	movw	r12, r22
     cc4:	7c 01       	movw	r14, r24
     cc6:	87 eb       	ldi	r24, 0xB7	; 183
     cc8:	9a e0       	ldi	r25, 0x0A	; 10
     cca:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <_ZN3LCD5clearEv>
     cce:	60 91 90 0a 	lds	r22, 0x0A90	; 0x800a90 <stato_procedura>
     cd2:	70 91 91 0a 	lds	r23, 0x0A91	; 0x800a91 <stato_procedura+0x1>
     cd6:	4a e0       	ldi	r20, 0x0A	; 10
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	8f e3       	ldi	r24, 0x3F	; 63
     cdc:	9a e0       	ldi	r25, 0x0A	; 10
     cde:	b8 df       	rcall	.-144    	; 0xc50 <_Z10displayLCDP6Stringii>
     ce0:	c0 92 f5 09 	sts	0x09F5, r12	; 0x8009f5 <Timer>
     ce4:	d0 92 f6 09 	sts	0x09F6, r13	; 0x8009f6 <Timer+0x1>
     ce8:	e0 92 f7 09 	sts	0x09F7, r14	; 0x8009f7 <Timer+0x2>
     cec:	f0 92 f8 09 	sts	0x09F8, r15	; 0x8009f8 <Timer+0x3>
     cf0:	8f e1       	ldi	r24, 0x1F	; 31
     cf2:	9e e4       	ldi	r25, 0x4E	; 78
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <_Z11avanzaStatom+0x3a>
     cf8:	00 c0       	rjmp	.+0      	; 0xcfa <_Z11avanzaStatom+0x40>
     cfa:	00 00       	nop
     cfc:	8f ee       	ldi	r24, 0xEF	; 239
     cfe:	99 e0       	ldi	r25, 0x09	; 9
     d00:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZNK8DateTime11secondstimeEv>
     d04:	60 93 f9 09 	sts	0x09F9, r22	; 0x8009f9 <UltimoPassaggioStato>
     d08:	70 93 fa 09 	sts	0x09FA, r23	; 0x8009fa <UltimoPassaggioStato+0x1>
     d0c:	80 93 fb 09 	sts	0x09FB, r24	; 0x8009fb <UltimoPassaggioStato+0x2>
     d10:	90 93 fc 09 	sts	0x09FC, r25	; 0x8009fc <UltimoPassaggioStato+0x3>
     d14:	8f e1       	ldi	r24, 0x1F	; 31
     d16:	9e e4       	ldi	r25, 0x4E	; 78
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <_Z11avanzaStatom+0x5e>
     d1c:	00 c0       	rjmp	.+0      	; 0xd1e <_Z11avanzaStatom+0x64>
     d1e:	00 00       	nop
     d20:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <stato_procedura>
     d24:	90 91 91 0a 	lds	r25, 0x0A91	; 0x800a91 <stato_procedura+0x1>
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	90 93 91 0a 	sts	0x0A91, r25	; 0x800a91 <stato_procedura+0x1>
     d2e:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <stato_procedura>
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	df 90       	pop	r13
     d38:	cf 90       	pop	r12
     d3a:	08 95       	ret

00000d3c <_Z16scrivi_TAG_MezzoPc>:
     d3c:	8f 92       	push	r8
     d3e:	9f 92       	push	r9
     d40:	af 92       	push	r10
     d42:	bf 92       	push	r11
     d44:	cf 92       	push	r12
     d46:	df 92       	push	r13
     d48:	ef 92       	push	r14
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	a2 97       	sbiw	r28, 0x22	; 34
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	5c 01       	movw	r10, r24
     d64:	4b 01       	movw	r8, r22
     d66:	68 ed       	ldi	r22, 0xD8	; 216
     d68:	71 e0       	ldi	r23, 0x01	; 1
     d6a:	ce 01       	movw	r24, r28
     d6c:	4d 96       	adiw	r24, 0x1d	; 29
     d6e:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
     d72:	08 ec       	ldi	r16, 0xC8	; 200
     d74:	10 e0       	ldi	r17, 0x00	; 0
     d76:	27 ed       	ldi	r18, 0xD7	; 215
     d78:	3a e0       	ldi	r19, 0x0A	; 10
     d7a:	40 ed       	ldi	r20, 0xD0	; 208
     d7c:	5a e0       	ldi	r21, 0x0A	; 10
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	80 ea       	ldi	r24, 0xA0	; 160
     d82:	9a e0       	ldi	r25, 0x0A	; 10
     d84:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     d88:	80 93 d8 0a 	sts	0x0AD8, r24	; 0x800ad8 <success>
     d8c:	88 23       	and	r24, r24
     d8e:	09 f4       	brne	.+2      	; 0xd92 <_Z16scrivi_TAG_MezzoPc+0x56>
     d90:	a3 c0       	rjmp	.+326    	; 0xed8 <_Z16scrivi_TAG_MezzoPc+0x19c>
     d92:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <uidLength>
     d96:	84 30       	cpi	r24, 0x04	; 4
     d98:	09 f0       	breq	.+2      	; 0xd9c <_Z16scrivi_TAG_MezzoPc+0x60>
     d9a:	98 c0       	rjmp	.+304    	; 0xecc <_Z16scrivi_TAG_MezzoPc+0x190>
     d9c:	86 e0       	ldi	r24, 0x06	; 6
     d9e:	e7 e6       	ldi	r30, 0x67	; 103
     da0:	f1 e0       	ldi	r31, 0x01	; 1
     da2:	de 01       	movw	r26, r28
     da4:	57 96       	adiw	r26, 0x17	; 23
     da6:	01 90       	ld	r0, Z+
     da8:	0d 92       	st	X+, r0
     daa:	8a 95       	dec	r24
     dac:	e1 f7       	brne	.-8      	; 0xda6 <_Z16scrivi_TAG_MezzoPc+0x6a>
     dae:	ce 01       	movw	r24, r28
     db0:	47 96       	adiw	r24, 0x17	; 23
     db2:	6c 01       	movw	r12, r24
     db4:	e1 2c       	mov	r14, r1
     db6:	04 e0       	ldi	r16, 0x04	; 4
     db8:	10 e0       	ldi	r17, 0x00	; 0
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	44 e0       	ldi	r20, 0x04	; 4
     dc0:	60 ed       	ldi	r22, 0xD0	; 208
     dc2:	7a e0       	ldi	r23, 0x0A	; 10
     dc4:	80 ea       	ldi	r24, 0xA0	; 160
     dc6:	9a e0       	ldi	r25, 0x0A	; 10
     dc8:	0e 94 55 1e 	call	0x3caa	; 0x3caa <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     dcc:	80 93 d8 0a 	sts	0x0AD8, r24	; 0x800ad8 <success>
     dd0:	88 23       	and	r24, r24
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <_Z16scrivi_TAG_MezzoPc+0x9a>
     dd4:	6b c0       	rjmp	.+214    	; 0xeac <_Z16scrivi_TAG_MezzoPc+0x170>
     dd6:	80 e1       	ldi	r24, 0x10	; 16
     dd8:	f4 01       	movw	r30, r8
     dda:	de 01       	movw	r26, r28
     ddc:	11 96       	adiw	r26, 0x01	; 1
     dde:	01 90       	ld	r0, Z+
     de0:	0d 92       	st	X+, r0
     de2:	8a 95       	dec	r24
     de4:	e1 f7       	brne	.-8      	; 0xdde <_Z16scrivi_TAG_MezzoPc+0xa2>
     de6:	ae 01       	movw	r20, r28
     de8:	4f 5f       	subi	r20, 0xFF	; 255
     dea:	5f 4f       	sbci	r21, 0xFF	; 255
     dec:	64 e0       	ldi	r22, 0x04	; 4
     dee:	80 ea       	ldi	r24, 0xA0	; 160
     df0:	9a e0       	ldi	r25, 0x0A	; 10
     df2:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     df6:	80 93 d8 0a 	sts	0x0AD8, r24	; 0x800ad8 <success>
     dfa:	9f ef       	ldi	r25, 0xFF	; 255
     dfc:	21 ee       	ldi	r18, 0xE1	; 225
     dfe:	84 e0       	ldi	r24, 0x04	; 4
     e00:	91 50       	subi	r25, 0x01	; 1
     e02:	20 40       	sbci	r18, 0x00	; 0
     e04:	80 40       	sbci	r24, 0x00	; 0
     e06:	e1 f7       	brne	.-8      	; 0xe00 <_Z16scrivi_TAG_MezzoPc+0xc4>
     e08:	00 c0       	rjmp	.+0      	; 0xe0a <_Z16scrivi_TAG_MezzoPc+0xce>
     e0a:	00 00       	nop
     e0c:	ae 01       	movw	r20, r28
     e0e:	4f 5f       	subi	r20, 0xFF	; 255
     e10:	5f 4f       	sbci	r21, 0xFF	; 255
     e12:	64 e0       	ldi	r22, 0x04	; 4
     e14:	80 ea       	ldi	r24, 0xA0	; 160
     e16:	9a e0       	ldi	r25, 0x0A	; 10
     e18:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     e1c:	80 93 d8 0a 	sts	0x0AD8, r24	; 0x800ad8 <success>
     e20:	64 e6       	ldi	r22, 0x64	; 100
     e22:	72 e0       	ldi	r23, 0x02	; 2
     e24:	8e e7       	ldi	r24, 0x7E	; 126
     e26:	9c e0       	ldi	r25, 0x0C	; 12
     e28:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     e2c:	be 01       	movw	r22, r28
     e2e:	6f 5f       	subi	r22, 0xFF	; 255
     e30:	7f 4f       	sbci	r23, 0xFF	; 255
     e32:	ce 01       	movw	r24, r28
     e34:	41 96       	adiw	r24, 0x11	; 17
     e36:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
     e3a:	80 91 d8 0a 	lds	r24, 0x0AD8	; 0x800ad8 <success>
     e3e:	88 23       	and	r24, r24
     e40:	01 f1       	breq	.+64     	; 0xe82 <_Z16scrivi_TAG_MezzoPc+0x146>
     e42:	be 01       	movw	r22, r28
     e44:	6f 5e       	subi	r22, 0xEF	; 239
     e46:	7f 4f       	sbci	r23, 0xFF	; 255
     e48:	8e e7       	ldi	r24, 0x7E	; 126
     e4a:	9c e0       	ldi	r25, 0x0C	; 12
     e4c:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
     e50:	8d 89       	ldd	r24, Y+21	; 0x15
     e52:	9e 89       	ldd	r25, Y+22	; 0x16
     e54:	06 97       	sbiw	r24, 0x06	; 6
     e56:	59 f4       	brne	.+22     	; 0xe6e <_Z16scrivi_TAG_MezzoPc+0x132>
     e58:	be 01       	movw	r22, r28
     e5a:	6f 5e       	subi	r22, 0xEF	; 239
     e5c:	7f 4f       	sbci	r23, 0xFF	; 255
     e5e:	c5 01       	movw	r24, r10
     e60:	0e 94 d1 39 	call	0x73a2	; 0x73a2 <_ZN6StringC1EOS_>
     e64:	ce 01       	movw	r24, r28
     e66:	41 96       	adiw	r24, 0x11	; 17
     e68:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
     e6c:	3b c0       	rjmp	.+118    	; 0xee4 <_Z16scrivi_TAG_MezzoPc+0x1a8>
     e6e:	9f ef       	ldi	r25, 0xFF	; 255
     e70:	21 ee       	ldi	r18, 0xE1	; 225
     e72:	84 e0       	ldi	r24, 0x04	; 4
     e74:	91 50       	subi	r25, 0x01	; 1
     e76:	20 40       	sbci	r18, 0x00	; 0
     e78:	80 40       	sbci	r24, 0x00	; 0
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <_Z16scrivi_TAG_MezzoPc+0x138>
     e7c:	00 c0       	rjmp	.+0      	; 0xe7e <_Z16scrivi_TAG_MezzoPc+0x142>
     e7e:	00 00       	nop
     e80:	10 c0       	rjmp	.+32     	; 0xea2 <_Z16scrivi_TAG_MezzoPc+0x166>
     e82:	87 eb       	ldi	r24, 0xB7	; 183
     e84:	9a e0       	ldi	r25, 0x0A	; 10
     e86:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <_ZN3LCD5clearEv>
     e8a:	41 e0       	ldi	r20, 0x01	; 1
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	87 eb       	ldi	r24, 0xB7	; 183
     e90:	9a e0       	ldi	r25, 0x0A	; 10
     e92:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
     e96:	62 e7       	ldi	r22, 0x72	; 114
     e98:	72 e0       	ldi	r23, 0x02	; 2
     e9a:	87 eb       	ldi	r24, 0xB7	; 183
     e9c:	9a e0       	ldi	r25, 0x0A	; 10
     e9e:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
     ea2:	ce 01       	movw	r24, r28
     ea4:	41 96       	adiw	r24, 0x11	; 17
     ea6:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
     eaa:	10 c0       	rjmp	.+32     	; 0xecc <_Z16scrivi_TAG_MezzoPc+0x190>
     eac:	87 eb       	ldi	r24, 0xB7	; 183
     eae:	9a e0       	ldi	r25, 0x0A	; 10
     eb0:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <_ZN3LCD5clearEv>
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	87 eb       	ldi	r24, 0xB7	; 183
     eba:	9a e0       	ldi	r25, 0x0A	; 10
     ebc:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
     ec0:	6c e7       	ldi	r22, 0x7C	; 124
     ec2:	72 e0       	ldi	r23, 0x02	; 2
     ec4:	87 eb       	ldi	r24, 0xB7	; 183
     ec6:	9a e0       	ldi	r25, 0x0A	; 10
     ec8:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
     ecc:	68 ed       	ldi	r22, 0xD8	; 216
     ece:	71 e0       	ldi	r23, 0x01	; 1
     ed0:	8e e7       	ldi	r24, 0x7E	; 126
     ed2:	9c e0       	ldi	r25, 0x0C	; 12
     ed4:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
     ed8:	be 01       	movw	r22, r28
     eda:	63 5e       	subi	r22, 0xE3	; 227
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	c5 01       	movw	r24, r10
     ee0:	0e 94 d1 39 	call	0x73a2	; 0x73a2 <_ZN6StringC1EOS_>
     ee4:	ce 01       	movw	r24, r28
     ee6:	4d 96       	adiw	r24, 0x1d	; 29
     ee8:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
     eec:	c5 01       	movw	r24, r10
     eee:	a2 96       	adiw	r28, 0x22	; 34
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ef 90       	pop	r14
     f04:	df 90       	pop	r13
     f06:	cf 90       	pop	r12
     f08:	bf 90       	pop	r11
     f0a:	af 90       	pop	r10
     f0c:	9f 90       	pop	r9
     f0e:	8f 90       	pop	r8
     f10:	08 95       	ret

00000f12 <_Z14leggiTAG_Mezzob>:
     f12:	af 92       	push	r10
     f14:	bf 92       	push	r11
     f16:	cf 92       	push	r12
     f18:	df 92       	push	r13
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	a2 97       	sbiw	r28, 0x22	; 34
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	5c 01       	movw	r10, r24
     f38:	f6 2e       	mov	r15, r22
     f3a:	68 ed       	ldi	r22, 0xD8	; 216
     f3c:	71 e0       	ldi	r23, 0x01	; 1
     f3e:	ce 01       	movw	r24, r28
     f40:	4d 96       	adiw	r24, 0x1d	; 29
     f42:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
     f46:	08 ec       	ldi	r16, 0xC8	; 200
     f48:	10 e0       	ldi	r17, 0x00	; 0
     f4a:	27 ed       	ldi	r18, 0xD7	; 215
     f4c:	3a e0       	ldi	r19, 0x0A	; 10
     f4e:	40 ed       	ldi	r20, 0xD0	; 208
     f50:	5a e0       	ldi	r21, 0x0A	; 10
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	80 ea       	ldi	r24, 0xA0	; 160
     f56:	9a e0       	ldi	r25, 0x0A	; 10
     f58:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     f5c:	80 93 d8 0a 	sts	0x0AD8, r24	; 0x800ad8 <success>
     f60:	88 23       	and	r24, r24
     f62:	09 f4       	brne	.+2      	; 0xf66 <_Z14leggiTAG_Mezzob+0x54>
     f64:	9d c0       	rjmp	.+314    	; 0x10a0 <_Z14leggiTAG_Mezzob+0x18e>
     f66:	4e e1       	ldi	r20, 0x1E	; 30
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	82 e0       	ldi	r24, 0x02	; 2
     f70:	6b dd       	rcall	.-1322   	; 0xa48 <_Z6Buzzerhm>
     f72:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <uidLength>
     f76:	84 30       	cpi	r24, 0x04	; 4
     f78:	09 f0       	breq	.+2      	; 0xf7c <_Z14leggiTAG_Mezzob+0x6a>
     f7a:	8c c0       	rjmp	.+280    	; 0x1094 <_Z14leggiTAG_Mezzob+0x182>
     f7c:	86 e0       	ldi	r24, 0x06	; 6
     f7e:	e7 e6       	ldi	r30, 0x67	; 103
     f80:	f1 e0       	ldi	r31, 0x01	; 1
     f82:	de 01       	movw	r26, r28
     f84:	57 96       	adiw	r26, 0x17	; 23
     f86:	01 90       	ld	r0, Z+
     f88:	0d 92       	st	X+, r0
     f8a:	8a 95       	dec	r24
     f8c:	e1 f7       	brne	.-8      	; 0xf86 <_Z14leggiTAG_Mezzob+0x74>
     f8e:	ce 01       	movw	r24, r28
     f90:	47 96       	adiw	r24, 0x17	; 23
     f92:	6c 01       	movw	r12, r24
     f94:	e1 2c       	mov	r14, r1
     f96:	04 e0       	ldi	r16, 0x04	; 4
     f98:	10 e0       	ldi	r17, 0x00	; 0
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	44 e0       	ldi	r20, 0x04	; 4
     fa0:	60 ed       	ldi	r22, 0xD0	; 208
     fa2:	7a e0       	ldi	r23, 0x0A	; 10
     fa4:	80 ea       	ldi	r24, 0xA0	; 160
     fa6:	9a e0       	ldi	r25, 0x0A	; 10
     fa8:	0e 94 55 1e 	call	0x3caa	; 0x3caa <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     fac:	80 93 d8 0a 	sts	0x0AD8, r24	; 0x800ad8 <success>
     fb0:	88 23       	and	r24, r24
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <_Z14leggiTAG_Mezzob+0xa4>
     fb4:	5f c0       	rjmp	.+190    	; 0x1074 <_Z14leggiTAG_Mezzob+0x162>
     fb6:	ff 20       	and	r15, r15
     fb8:	99 f0       	breq	.+38     	; 0xfe0 <_Z14leggiTAG_Mezzob+0xce>
     fba:	80 e1       	ldi	r24, 0x10	; 16
     fbc:	ef e1       	ldi	r30, 0x1F	; 31
     fbe:	f9 e0       	ldi	r31, 0x09	; 9
     fc0:	de 01       	movw	r26, r28
     fc2:	11 96       	adiw	r26, 0x01	; 1
     fc4:	01 90       	ld	r0, Z+
     fc6:	0d 92       	st	X+, r0
     fc8:	8a 95       	dec	r24
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <_Z14leggiTAG_Mezzob+0xb2>
     fcc:	ae 01       	movw	r20, r28
     fce:	4f 5f       	subi	r20, 0xFF	; 255
     fd0:	5f 4f       	sbci	r21, 0xFF	; 255
     fd2:	64 e0       	ldi	r22, 0x04	; 4
     fd4:	80 ea       	ldi	r24, 0xA0	; 160
     fd6:	9a e0       	ldi	r25, 0x0A	; 10
     fd8:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     fdc:	80 93 d8 0a 	sts	0x0AD8, r24	; 0x800ad8 <success>
     fe0:	ae 01       	movw	r20, r28
     fe2:	4f 5f       	subi	r20, 0xFF	; 255
     fe4:	5f 4f       	sbci	r21, 0xFF	; 255
     fe6:	64 e0       	ldi	r22, 0x04	; 4
     fe8:	80 ea       	ldi	r24, 0xA0	; 160
     fea:	9a e0       	ldi	r25, 0x0A	; 10
     fec:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     ff0:	80 93 d8 0a 	sts	0x0AD8, r24	; 0x800ad8 <success>
     ff4:	88 23       	and	r24, r24
     ff6:	89 f1       	breq	.+98     	; 0x105a <_Z14leggiTAG_Mezzob+0x148>
     ff8:	64 e6       	ldi	r22, 0x64	; 100
     ffa:	72 e0       	ldi	r23, 0x02	; 2
     ffc:	8e e7       	ldi	r24, 0x7E	; 126
     ffe:	9c e0       	ldi	r25, 0x0C	; 12
    1000:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
    1004:	be 01       	movw	r22, r28
    1006:	6f 5f       	subi	r22, 0xFF	; 255
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	ce 01       	movw	r24, r28
    100c:	41 96       	adiw	r24, 0x11	; 17
    100e:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    1012:	be 01       	movw	r22, r28
    1014:	6f 5e       	subi	r22, 0xEF	; 239
    1016:	7f 4f       	sbci	r23, 0xFF	; 255
    1018:	8e e7       	ldi	r24, 0x7E	; 126
    101a:	9c e0       	ldi	r25, 0x0C	; 12
    101c:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
    1020:	8d 89       	ldd	r24, Y+21	; 0x15
    1022:	9e 89       	ldd	r25, Y+22	; 0x16
    1024:	06 97       	sbiw	r24, 0x06	; 6
    1026:	59 f4       	brne	.+22     	; 0x103e <_Z14leggiTAG_Mezzob+0x12c>
    1028:	be 01       	movw	r22, r28
    102a:	6f 5e       	subi	r22, 0xEF	; 239
    102c:	7f 4f       	sbci	r23, 0xFF	; 255
    102e:	c5 01       	movw	r24, r10
    1030:	0e 94 d1 39 	call	0x73a2	; 0x73a2 <_ZN6StringC1EOS_>
    1034:	ce 01       	movw	r24, r28
    1036:	41 96       	adiw	r24, 0x11	; 17
    1038:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    103c:	37 c0       	rjmp	.+110    	; 0x10ac <_Z14leggiTAG_Mezzob+0x19a>
    103e:	9f ef       	ldi	r25, 0xFF	; 255
    1040:	21 ee       	ldi	r18, 0xE1	; 225
    1042:	84 e0       	ldi	r24, 0x04	; 4
    1044:	91 50       	subi	r25, 0x01	; 1
    1046:	20 40       	sbci	r18, 0x00	; 0
    1048:	80 40       	sbci	r24, 0x00	; 0
    104a:	e1 f7       	brne	.-8      	; 0x1044 <_Z14leggiTAG_Mezzob+0x132>
    104c:	00 c0       	rjmp	.+0      	; 0x104e <_Z14leggiTAG_Mezzob+0x13c>
    104e:	00 00       	nop
    1050:	ce 01       	movw	r24, r28
    1052:	41 96       	adiw	r24, 0x11	; 17
    1054:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    1058:	1d c0       	rjmp	.+58     	; 0x1094 <_Z14leggiTAG_Mezzob+0x182>
    105a:	87 eb       	ldi	r24, 0xB7	; 183
    105c:	9a e0       	ldi	r25, 0x0A	; 10
    105e:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <_ZN3LCD5clearEv>
    1062:	41 e0       	ldi	r20, 0x01	; 1
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	87 eb       	ldi	r24, 0xB7	; 183
    1068:	9a e0       	ldi	r25, 0x0A	; 10
    106a:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
    106e:	64 e8       	ldi	r22, 0x84	; 132
    1070:	72 e0       	ldi	r23, 0x02	; 2
    1072:	0c c0       	rjmp	.+24     	; 0x108c <_Z14leggiTAG_Mezzob+0x17a>
    1074:	87 eb       	ldi	r24, 0xB7	; 183
    1076:	9a e0       	ldi	r25, 0x0A	; 10
    1078:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <_ZN3LCD5clearEv>
    107c:	41 e0       	ldi	r20, 0x01	; 1
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	87 eb       	ldi	r24, 0xB7	; 183
    1082:	9a e0       	ldi	r25, 0x0A	; 10
    1084:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
    1088:	61 e9       	ldi	r22, 0x91	; 145
    108a:	72 e0       	ldi	r23, 0x02	; 2
    108c:	87 eb       	ldi	r24, 0xB7	; 183
    108e:	9a e0       	ldi	r25, 0x0A	; 10
    1090:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
    1094:	68 ed       	ldi	r22, 0xD8	; 216
    1096:	71 e0       	ldi	r23, 0x01	; 1
    1098:	8e e7       	ldi	r24, 0x7E	; 126
    109a:	9c e0       	ldi	r25, 0x0C	; 12
    109c:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
    10a0:	be 01       	movw	r22, r28
    10a2:	63 5e       	subi	r22, 0xE3	; 227
    10a4:	7f 4f       	sbci	r23, 0xFF	; 255
    10a6:	c5 01       	movw	r24, r10
    10a8:	0e 94 d1 39 	call	0x73a2	; 0x73a2 <_ZN6StringC1EOS_>
    10ac:	ce 01       	movw	r24, r28
    10ae:	4d 96       	adiw	r24, 0x1d	; 29
    10b0:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    10b4:	c5 01       	movw	r24, r10
    10b6:	a2 96       	adiw	r28, 0x22	; 34
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	df 90       	pop	r13
    10d0:	cf 90       	pop	r12
    10d2:	bf 90       	pop	r11
    10d4:	af 90       	pop	r10
    10d6:	08 95       	ret

000010d8 <_Z14GetCodeRfidATev>:
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	64 97       	sbiw	r28, 0x14	; 20
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	7c 01       	movw	r14, r24
    10fa:	ce 01       	movw	r24, r28
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	6c 01       	movw	r12, r24
    1100:	87 e0       	ldi	r24, 0x07	; 7
    1102:	f6 01       	movw	r30, r12
    1104:	11 92       	st	Z+, r1
    1106:	8a 95       	dec	r24
    1108:	e9 f7       	brne	.-6      	; 0x1104 <_Z14GetCodeRfidATev+0x2c>
    110a:	6f e9       	ldi	r22, 0x9F	; 159
    110c:	72 e0       	ldi	r23, 0x02	; 2
    110e:	c7 01       	movw	r24, r14
    1110:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    1114:	00 e0       	ldi	r16, 0x00	; 0
    1116:	10 e0       	ldi	r17, 0x00	; 0
    1118:	9e 01       	movw	r18, r28
    111a:	2c 5e       	subi	r18, 0xEC	; 236
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	a6 01       	movw	r20, r12
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	80 ea       	ldi	r24, 0xA0	; 160
    1124:	9a e0       	ldi	r25, 0x0A	; 10
    1126:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
    112a:	88 23       	and	r24, r24
    112c:	59 f1       	breq	.+86     	; 0x1184 <_Z14GetCodeRfidATev+0xac>
    112e:	0c 89       	ldd	r16, Y+20	; 0x14
    1130:	10 e0       	ldi	r17, 0x00	; 0
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	a6 01       	movw	r20, r12
    1138:	60 ea       	ldi	r22, 0xA0	; 160
    113a:	7a e0       	ldi	r23, 0x0A	; 10
    113c:	ce 01       	movw	r24, r28
    113e:	0e 96       	adiw	r24, 0x0e	; 14
    1140:	0e 94 00 1c 	call	0x3800	; 0x3800 <_ZN9NFC_PN53210GetHexCodeEPKhm>
    1144:	ce 01       	movw	r24, r28
    1146:	0e 96       	adiw	r24, 0x0e	; 14
    1148:	0e 94 1a 3c 	call	0x7834	; 0x7834 <_ZN6String4trimEv>
    114c:	28 e0       	ldi	r18, 0x08	; 8
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	be 01       	movw	r22, r28
    1156:	62 5f       	subi	r22, 0xF2	; 242
    1158:	7f 4f       	sbci	r23, 0xFF	; 255
    115a:	ce 01       	movw	r24, r28
    115c:	08 96       	adiw	r24, 0x08	; 8
    115e:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <_ZNK6String9substringEjj>
    1162:	be 01       	movw	r22, r28
    1164:	68 5f       	subi	r22, 0xF8	; 248
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	c7 01       	movw	r24, r14
    116a:	0e 94 f6 39 	call	0x73ec	; 0x73ec <_ZN6StringaSEOS_>
    116e:	ce 01       	movw	r24, r28
    1170:	08 96       	adiw	r24, 0x08	; 8
    1172:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	80 93 cf 0a 	sts	0x0ACF, r24	; 0x800acf <alreadyTimbrata>
    117c:	ce 01       	movw	r24, r28
    117e:	0e 96       	adiw	r24, 0x0e	; 14
    1180:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    1184:	c7 01       	movw	r24, r14
    1186:	64 96       	adiw	r28, 0x14	; 20
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	ff 90       	pop	r15
    119c:	ef 90       	pop	r14
    119e:	df 90       	pop	r13
    11a0:	cf 90       	pop	r12
    11a2:	08 95       	ret

000011a4 <_Z19GetHTTPResponseCode6String>:
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	62 97       	sbiw	r28, 0x12	; 18
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	8c 01       	movw	r16, r24
    11c2:	7b 01       	movw	r14, r22
    11c4:	66 ea       	ldi	r22, 0xA6	; 166
    11c6:	72 e0       	ldi	r23, 0x02	; 2
    11c8:	ce 01       	movw	r24, r28
    11ca:	0d 96       	adiw	r24, 0x0d	; 13
    11cc:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    11d0:	1f d9       	rcall	.-3522   	; 0x410 <_Z9printLinev>
    11d2:	6e ea       	ldi	r22, 0xAE	; 174
    11d4:	72 e0       	ldi	r23, 0x02	; 2
    11d6:	8e e7       	ldi	r24, 0x7E	; 126
    11d8:	9c e0       	ldi	r25, 0x0C	; 12
    11da:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
    11de:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <HTTP_len_response>
    11e2:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <HTTP_len_response+0x1>
    11e6:	f7 01       	movw	r30, r14
    11e8:	84 81       	ldd	r24, Z+4	; 0x04
    11ea:	95 81       	ldd	r25, Z+5	; 0x05
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	49 f5       	brne	.+82     	; 0x1244 <_Z19GetHTTPResponseCode6String+0xa0>
    11f2:	a9 01       	movw	r20, r18
    11f4:	43 50       	subi	r20, 0x03	; 3
    11f6:	51 09       	sbc	r21, r1
    11f8:	b7 01       	movw	r22, r14
    11fa:	ce 01       	movw	r24, r28
    11fc:	07 96       	adiw	r24, 0x07	; 7
    11fe:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <_ZNK6String9substringEjj>
    1202:	66 ec       	ldi	r22, 0xC6	; 198
    1204:	72 e0       	ldi	r23, 0x02	; 2
    1206:	ce 01       	movw	r24, r28
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    120e:	be 01       	movw	r22, r28
    1210:	69 5f       	subi	r22, 0xF9	; 249
    1212:	7f 4f       	sbci	r23, 0xFF	; 255
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    121c:	bc 01       	movw	r22, r24
    121e:	8e e7       	ldi	r24, 0x7E	; 126
    1220:	9c e0       	ldi	r25, 0x0C	; 12
    1222:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
    1226:	ce 01       	movw	r24, r28
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    122e:	be 01       	movw	r22, r28
    1230:	69 5f       	subi	r22, 0xF9	; 249
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	c8 01       	movw	r24, r16
    1236:	0e 94 d1 39 	call	0x73a2	; 0x73a2 <_ZN6StringC1EOS_>
    123a:	ce 01       	movw	r24, r28
    123c:	07 96       	adiw	r24, 0x07	; 7
    123e:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    1242:	09 c0       	rjmp	.+18     	; 0x1256 <_Z19GetHTTPResponseCode6String+0xb2>
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	08 d9       	rcall	.-3568   	; 0x458 <_Z4passb>
    1248:	e3 d8       	rcall	.-3642   	; 0x410 <_Z9printLinev>
    124a:	be 01       	movw	r22, r28
    124c:	63 5f       	subi	r22, 0xF3	; 243
    124e:	7f 4f       	sbci	r23, 0xFF	; 255
    1250:	c8 01       	movw	r24, r16
    1252:	0e 94 d1 39 	call	0x73a2	; 0x73a2 <_ZN6StringC1EOS_>
    1256:	ce 01       	movw	r24, r28
    1258:	0d 96       	adiw	r24, 0x0d	; 13
    125a:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    125e:	c8 01       	movw	r24, r16
    1260:	62 96       	adiw	r28, 0x12	; 18
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	ff 90       	pop	r15
    1276:	ef 90       	pop	r14
    1278:	08 95       	ret

0000127a <_Z17PostErogazioneGACiPc14EthernetClient6String>:
    127a:	af 92       	push	r10
    127c:	bf 92       	push	r11
    127e:	cf 92       	push	r12
    1280:	df 92       	push	r13
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	62 97       	sbiw	r28, 0x12	; 18
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	5c 01       	movw	r10, r24
    12a0:	6b 01       	movw	r12, r22
    12a2:	8a 01       	movw	r16, r20
    12a4:	79 01       	movw	r14, r18
    12a6:	b4 d8       	rcall	.-3736   	; 0x410 <_Z9printLinev>
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	c5 d8       	rcall	.-3702   	; 0x436 <_Z8printTabh>
    12ac:	6f e2       	ldi	r22, 0x2F	; 47
    12ae:	75 e0       	ldi	r23, 0x05	; 5
    12b0:	8e e7       	ldi	r24, 0x7E	; 126
    12b2:	9c e0       	ldi	r25, 0x0C	; 12
    12b4:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
    12b8:	a5 01       	movw	r20, r10
    12ba:	b6 01       	movw	r22, r12
    12bc:	c8 01       	movw	r24, r16
    12be:	0e 94 24 26 	call	0x4c48	; 0x4c48 <_ZN14EthernetClient7connectEPKcj>
    12c2:	89 2b       	or	r24, r25
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x4e>
    12c6:	b0 c0       	rjmp	.+352    	; 0x1428 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1ae>
    12c8:	2f ef       	ldi	r18, 0xFF	; 255
    12ca:	81 ee       	ldi	r24, 0xE1	; 225
    12cc:	94 e0       	ldi	r25, 0x04	; 4
    12ce:	21 50       	subi	r18, 0x01	; 1
    12d0:	80 40       	sbci	r24, 0x00	; 0
    12d2:	90 40       	sbci	r25, 0x00	; 0
    12d4:	e1 f7       	brne	.-8      	; 0x12ce <_Z17PostErogazioneGACiPc14EthernetClient6String+0x54>
    12d6:	00 c0       	rjmp	.+0      	; 0x12d8 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x5e>
    12d8:	00 00       	nop
    12da:	6f e6       	ldi	r22, 0x6F	; 111
    12dc:	75 e0       	ldi	r23, 0x05	; 5
    12de:	84 e9       	ldi	r24, 0x94	; 148
    12e0:	9a e0       	ldi	r25, 0x0A	; 10
    12e2:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
    12e6:	b6 01       	movw	r22, r12
    12e8:	ce 01       	movw	r24, r28
    12ea:	07 96       	adiw	r24, 0x07	; 7
    12ec:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    12f0:	6a e1       	ldi	r22, 0x1A	; 26
    12f2:	75 e0       	ldi	r23, 0x05	; 5
    12f4:	ce 01       	movw	r24, r28
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    12fc:	be 01       	movw	r22, r28
    12fe:	69 5f       	subi	r22, 0xF9	; 249
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	ce 01       	movw	r24, r28
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    130a:	bc 01       	movw	r22, r24
    130c:	84 e9       	ldi	r24, 0x94	; 148
    130e:	9a e0       	ldi	r25, 0x0A	; 10
    1310:	0e 94 31 3b 	call	0x7662	; 0x7662 <_ZN6String6concatERKS_>
    1314:	ce 01       	movw	r24, r28
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    131c:	ce 01       	movw	r24, r28
    131e:	07 96       	adiw	r24, 0x07	; 7
    1320:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    1324:	60 e3       	ldi	r22, 0x30	; 48
    1326:	73 e0       	ldi	r23, 0x03	; 3
    1328:	84 e9       	ldi	r24, 0x94	; 148
    132a:	9a e0       	ldi	r25, 0x0A	; 10
    132c:	0e 94 37 3b 	call	0x766e	; 0x766e <_ZN6String6concatEPKc>
    1330:	67 ea       	ldi	r22, 0xA7	; 167
    1332:	73 e0       	ldi	r23, 0x03	; 3
    1334:	84 e9       	ldi	r24, 0x94	; 148
    1336:	9a e0       	ldi	r25, 0x0A	; 10
    1338:	0e 94 37 3b 	call	0x766e	; 0x766e <_ZN6String6concatEPKc>
    133c:	60 e3       	ldi	r22, 0x30	; 48
    133e:	73 e0       	ldi	r23, 0x03	; 3
    1340:	84 e9       	ldi	r24, 0x94	; 148
    1342:	9a e0       	ldi	r25, 0x0A	; 10
    1344:	0e 94 37 3b 	call	0x766e	; 0x766e <_ZN6String6concatEPKc>
    1348:	61 e5       	ldi	r22, 0x51	; 81
    134a:	74 e0       	ldi	r23, 0x04	; 4
    134c:	84 e9       	ldi	r24, 0x94	; 148
    134e:	9a e0       	ldi	r25, 0x0A	; 10
    1350:	0e 94 37 3b 	call	0x766e	; 0x766e <_ZN6String6concatEPKc>
    1354:	60 e3       	ldi	r22, 0x30	; 48
    1356:	73 e0       	ldi	r23, 0x03	; 3
    1358:	84 e9       	ldi	r24, 0x94	; 148
    135a:	9a e0       	ldi	r25, 0x0A	; 10
    135c:	0e 94 37 3b 	call	0x766e	; 0x766e <_ZN6String6concatEPKc>
    1360:	61 e2       	ldi	r22, 0x21	; 33
    1362:	75 e0       	ldi	r23, 0x05	; 5
    1364:	84 e9       	ldi	r24, 0x94	; 148
    1366:	9a e0       	ldi	r25, 0x0A	; 10
    1368:	0e 94 37 3b 	call	0x766e	; 0x766e <_ZN6String6concatEPKc>
    136c:	60 e3       	ldi	r22, 0x30	; 48
    136e:	73 e0       	ldi	r23, 0x03	; 3
    1370:	84 e9       	ldi	r24, 0x94	; 148
    1372:	9a e0       	ldi	r25, 0x0A	; 10
    1374:	0e 94 37 3b 	call	0x766e	; 0x766e <_ZN6String6concatEPKc>
    1378:	f7 01       	movw	r30, r14
    137a:	64 81       	ldd	r22, Z+4	; 0x04
    137c:	75 81       	ldd	r23, Z+5	; 0x05
    137e:	6b 5e       	subi	r22, 0xEB	; 235
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	4a e0       	ldi	r20, 0x0A	; 10
    1384:	ce 01       	movw	r24, r28
    1386:	07 96       	adiw	r24, 0x07	; 7
    1388:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringC1Ejh>
    138c:	61 e9       	ldi	r22, 0x91	; 145
    138e:	75 e0       	ldi	r23, 0x05	; 5
    1390:	ce 01       	movw	r24, r28
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    1398:	be 01       	movw	r22, r28
    139a:	69 5f       	subi	r22, 0xF9	; 249
    139c:	7f 4f       	sbci	r23, 0xFF	; 255
    139e:	ce 01       	movw	r24, r28
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    13a6:	bc 01       	movw	r22, r24
    13a8:	84 e9       	ldi	r24, 0x94	; 148
    13aa:	9a e0       	ldi	r25, 0x0A	; 10
    13ac:	0e 94 31 3b 	call	0x7662	; 0x7662 <_ZN6String6concatERKS_>
    13b0:	ce 01       	movw	r24, r28
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    13b8:	ce 01       	movw	r24, r28
    13ba:	07 96       	adiw	r24, 0x07	; 7
    13bc:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    13c0:	60 e3       	ldi	r22, 0x30	; 48
    13c2:	73 e0       	ldi	r23, 0x03	; 3
    13c4:	84 e9       	ldi	r24, 0x94	; 148
    13c6:	9a e0       	ldi	r25, 0x0A	; 10
    13c8:	0e 94 37 3b 	call	0x766e	; 0x766e <_ZN6String6concatEPKc>
    13cc:	60 e3       	ldi	r22, 0x30	; 48
    13ce:	73 e0       	ldi	r23, 0x03	; 3
    13d0:	84 e9       	ldi	r24, 0x94	; 148
    13d2:	9a e0       	ldi	r25, 0x0A	; 10
    13d4:	0e 94 37 3b 	call	0x766e	; 0x766e <_ZN6String6concatEPKc>
    13d8:	b7 01       	movw	r22, r14
    13da:	84 e9       	ldi	r24, 0x94	; 148
    13dc:	9a e0       	ldi	r25, 0x0A	; 10
    13de:	0e 94 31 3b 	call	0x7662	; 0x7662 <_ZN6String6concatERKS_>
    13e2:	60 e3       	ldi	r22, 0x30	; 48
    13e4:	73 e0       	ldi	r23, 0x03	; 3
    13e6:	84 e9       	ldi	r24, 0x94	; 148
    13e8:	9a e0       	ldi	r25, 0x0A	; 10
    13ea:	0e 94 37 3b 	call	0x766e	; 0x766e <_ZN6String6concatEPKc>
    13ee:	64 e9       	ldi	r22, 0x94	; 148
    13f0:	7a e0       	ldi	r23, 0x0A	; 10
    13f2:	8e e7       	ldi	r24, 0x7E	; 126
    13f4:	9c e0       	ldi	r25, 0x0C	; 12
    13f6:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
    13fa:	64 e9       	ldi	r22, 0x94	; 148
    13fc:	7a e0       	ldi	r23, 0x0A	; 10
    13fe:	c8 01       	movw	r24, r16
    1400:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN5Print5printERK6String>
    1404:	ff ef       	ldi	r31, 0xFF	; 255
    1406:	23 ec       	ldi	r18, 0xC3	; 195
    1408:	89 e0       	ldi	r24, 0x09	; 9
    140a:	f1 50       	subi	r31, 0x01	; 1
    140c:	20 40       	sbci	r18, 0x00	; 0
    140e:	80 40       	sbci	r24, 0x00	; 0
    1410:	e1 f7       	brne	.-8      	; 0x140a <_Z17PostErogazioneGACiPc14EthernetClient6String+0x190>
    1412:	00 c0       	rjmp	.+0      	; 0x1414 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x19a>
    1414:	00 00       	nop
    1416:	60 e7       	ldi	r22, 0x70	; 112
    1418:	74 e0       	ldi	r23, 0x04	; 4
    141a:	c8 01       	movw	r24, r16
    141c:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
    1420:	c8 01       	movw	r24, r16
    1422:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <_ZN5Print7printlnEv>
    1426:	25 c0       	rjmp	.+74     	; 0x1472 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1f8>
    1428:	87 eb       	ldi	r24, 0xB7	; 183
    142a:	9a e0       	ldi	r25, 0x0A	; 10
    142c:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <_ZN3LCD5clearEv>
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	87 eb       	ldi	r24, 0xB7	; 183
    1436:	9a e0       	ldi	r25, 0x0A	; 10
    1438:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
    143c:	62 e8       	ldi	r22, 0x82	; 130
    143e:	74 e0       	ldi	r23, 0x04	; 4
    1440:	87 eb       	ldi	r24, 0xB7	; 183
    1442:	9a e0       	ldi	r25, 0x0A	; 10
    1444:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
    1448:	43 e0       	ldi	r20, 0x03	; 3
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	87 eb       	ldi	r24, 0xB7	; 183
    144e:	9a e0       	ldi	r25, 0x0A	; 10
    1450:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
    1454:	67 e9       	ldi	r22, 0x97	; 151
    1456:	74 e0       	ldi	r23, 0x04	; 4
    1458:	87 eb       	ldi	r24, 0xB7	; 183
    145a:	9a e0       	ldi	r25, 0x0A	; 10
    145c:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
    1460:	9f ef       	ldi	r25, 0xFF	; 255
    1462:	e3 ed       	ldi	r30, 0xD3	; 211
    1464:	f0 e3       	ldi	r31, 0x30	; 48
    1466:	91 50       	subi	r25, 0x01	; 1
    1468:	e0 40       	sbci	r30, 0x00	; 0
    146a:	f0 40       	sbci	r31, 0x00	; 0
    146c:	e1 f7       	brne	.-8      	; 0x1466 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1ec>
    146e:	00 c0       	rjmp	.+0      	; 0x1470 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1f6>
    1470:	00 00       	nop
    1472:	8f e3       	ldi	r24, 0x3F	; 63
    1474:	9c e9       	ldi	r25, 0x9C	; 156
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1fc>
    147a:	00 c0       	rjmp	.+0      	; 0x147c <_Z17PostErogazioneGACiPc14EthernetClient6String+0x202>
    147c:	00 00       	nop
    147e:	6d e2       	ldi	r22, 0x2D	; 45
    1480:	75 e0       	ldi	r23, 0x05	; 5
    1482:	ce 01       	movw	r24, r28
    1484:	0d 96       	adiw	r24, 0x0d	; 13
    1486:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    148a:	c8 01       	movw	r24, r16
    148c:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <_ZN14EthernetClient9availableEv>
    1490:	89 2b       	or	r24, r25
    1492:	21 f1       	breq	.+72     	; 0x14dc <_Z17PostErogazioneGACiPc14EthernetClient6String+0x262>
    1494:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <HTTP_len_response>
    1498:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <HTTP_len_response+0x1>
    149c:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <RispostaHTTP+0x4>
    14a0:	90 91 8c 0a 	lds	r25, 0x0A8C	; 0x800a8c <RispostaHTTP+0x5>
    14a4:	82 17       	cp	r24, r18
    14a6:	93 07       	cpc	r25, r19
    14a8:	c8 f4       	brcc	.+50     	; 0x14dc <_Z17PostErogazioneGACiPc14EthernetClient6String+0x262>
    14aa:	c8 01       	movw	r24, r16
    14ac:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <_ZN14EthernetClient4readEv>
    14b0:	f8 2e       	mov	r15, r24
    14b2:	67 e8       	ldi	r22, 0x87	; 135
    14b4:	7a e0       	ldi	r23, 0x0A	; 10
    14b6:	ce 01       	movw	r24, r28
    14b8:	01 96       	adiw	r24, 0x01	; 1
    14ba:	0e 94 ee 39 	call	0x73dc	; 0x73dc <_ZN6StringC1ERKS_>
    14be:	6f 2d       	mov	r22, r15
    14c0:	ce 01       	movw	r24, r28
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	0e 94 7f 3b 	call	0x76fe	; 0x76fe <_ZplRK15StringSumHelperc>
    14c8:	bc 01       	movw	r22, r24
    14ca:	87 e8       	ldi	r24, 0x87	; 135
    14cc:	9a e0       	ldi	r25, 0x0A	; 10
    14ce:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
    14d2:	ce 01       	movw	r24, r28
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    14da:	d7 cf       	rjmp	.-82     	; 0x148a <_Z17PostErogazioneGACiPc14EthernetClient6String+0x210>
    14dc:	67 e8       	ldi	r22, 0x87	; 135
    14de:	7a e0       	ldi	r23, 0x0A	; 10
    14e0:	ce 01       	movw	r24, r28
    14e2:	07 96       	adiw	r24, 0x07	; 7
    14e4:	0e 94 ee 39 	call	0x73dc	; 0x73dc <_ZN6StringC1ERKS_>
    14e8:	be 01       	movw	r22, r28
    14ea:	69 5f       	subi	r22, 0xF9	; 249
    14ec:	7f 4f       	sbci	r23, 0xFF	; 255
    14ee:	ce 01       	movw	r24, r28
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	58 de       	rcall	.-848    	; 0x11a4 <_Z19GetHTTPResponseCode6String>
    14f4:	be 01       	movw	r22, r28
    14f6:	6f 5f       	subi	r22, 0xFF	; 255
    14f8:	7f 4f       	sbci	r23, 0xFF	; 255
    14fa:	ce 01       	movw	r24, r28
    14fc:	0d 96       	adiw	r24, 0x0d	; 13
    14fe:	0e 94 f6 39 	call	0x73ec	; 0x73ec <_ZN6StringaSEOS_>
    1502:	ce 01       	movw	r24, r28
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    150a:	ce 01       	movw	r24, r28
    150c:	07 96       	adiw	r24, 0x07	; 7
    150e:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    1512:	9f ef       	ldi	r25, 0xFF	; 255
    1514:	e7 ee       	ldi	r30, 0xE7	; 231
    1516:	f3 e0       	ldi	r31, 0x03	; 3
    1518:	91 50       	subi	r25, 0x01	; 1
    151a:	e0 40       	sbci	r30, 0x00	; 0
    151c:	f0 40       	sbci	r31, 0x00	; 0
    151e:	e1 f7       	brne	.-8      	; 0x1518 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x29e>
    1520:	00 c0       	rjmp	.+0      	; 0x1522 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2a8>
    1522:	00 00       	nop
    1524:	6c ea       	ldi	r22, 0xAC	; 172
    1526:	74 e0       	ldi	r23, 0x04	; 4
    1528:	ce 01       	movw	r24, r28
    152a:	0d 96       	adiw	r24, 0x0d	; 13
    152c:	0e 94 8b 3b 	call	0x7716	; 0x7716 <_ZNK6String6equalsEPKc>
    1530:	88 23       	and	r24, r24
    1532:	39 f0       	breq	.+14     	; 0x1542 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2c8>
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	0e 94 2c 02 	call	0x458	; 0x458 <_Z4passb>
    153a:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
    153e:	11 e0       	ldi	r17, 0x01	; 1
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2ca>
    1542:	10 e0       	ldi	r17, 0x00	; 0
    1544:	ce 01       	movw	r24, r28
    1546:	0d 96       	adiw	r24, 0x0d	; 13
    1548:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    154c:	81 2f       	mov	r24, r17
    154e:	62 96       	adiw	r28, 0x12	; 18
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	0f 91       	pop	r16
    1562:	ff 90       	pop	r15
    1564:	ef 90       	pop	r14
    1566:	df 90       	pop	r13
    1568:	cf 90       	pop	r12
    156a:	bf 90       	pop	r11
    156c:	af 90       	pop	r10
    156e:	08 95       	ret

00001570 <_Z15abilitaPulsantiv>:
    1570:	57 98       	cbi	0x0a, 7	; 10
    1572:	56 98       	cbi	0x0a, 6	; 10
    1574:	88 e0       	ldi	r24, 0x08	; 8
    1576:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    157a:	80 ec       	ldi	r24, 0xC0	; 192
    157c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1580:	78 94       	sei
    1582:	08 95       	ret

00001584 <_Z22abilitaContattiPistolav>:
    1584:	09 98       	cbi	0x01, 1	; 1
    1586:	0a 98       	cbi	0x01, 2	; 1
    1588:	08 95       	ret

0000158a <_Z13abilitaPulserc>:
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    1590:	84 34       	cpi	r24, 0x44	; 68
    1592:	19 f4       	brne	.+6      	; 0x159a <_Z13abilitaPulserc+0x10>
    1594:	0d 98       	cbi	0x01, 5	; 1
    1596:	80 e2       	ldi	r24, 0x20	; 32
    1598:	02 c0       	rjmp	.+4      	; 0x159e <_Z13abilitaPulserc+0x14>
    159a:	0e 98       	cbi	0x01, 6	; 1
    159c:	80 e4       	ldi	r24, 0x40	; 64
    159e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    15a2:	78 94       	sei
    15a4:	08 95       	ret

000015a6 <_Z14impulsiToLitrii>:
  }
}

double impulsiToLitri(int P_impulsi)
{
    15a6:	cf 92       	push	r12
    15a8:	df 92       	push	r13
    15aa:	ef 92       	push	r14
    15ac:	ff 92       	push	r15
  //double imp = (double)(P_impulsi-1);
  double imp = (double)(P_impulsi);
    15ae:	bc 01       	movw	r22, r24
    15b0:	99 0f       	add	r25, r25
    15b2:	88 0b       	sbc	r24, r24
    15b4:	99 0b       	sbc	r25, r25
    15b6:	0e 94 a1 34 	call	0x6942	; 0x6942 <__floatsisf>
    15ba:	6b 01       	movw	r12, r22
    15bc:	7c 01       	movw	r14, r24
  if (imp < 0) {
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	a9 01       	movw	r20, r18
    15c4:	0e 94 02 34 	call	0x6804	; 0x6804 <__cmpsf2>
    15c8:	87 ff       	sbrs	r24, 7
    15ca:	03 c0       	rjmp	.+6      	; 0x15d2 <_Z14impulsiToLitrii+0x2c>
    imp = 0;
    15cc:	c1 2c       	mov	r12, r1
    15ce:	d1 2c       	mov	r13, r1
    15d0:	76 01       	movw	r14, r12
  }
  double lt = (imp/ImpulsiLitro);
  //double totale = lt;
  return lt;
    15d2:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <ImpulsiLitro>
    15d6:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <ImpulsiLitro+0x1>
    15da:	07 2e       	mov	r0, r23
    15dc:	00 0c       	add	r0, r0
    15de:	88 0b       	sbc	r24, r24
    15e0:	99 0b       	sbc	r25, r25
    15e2:	0e 94 a1 34 	call	0x6942	; 0x6942 <__floatsisf>
    15e6:	9b 01       	movw	r18, r22
    15e8:	ac 01       	movw	r20, r24
    15ea:	c7 01       	movw	r24, r14
    15ec:	b6 01       	movw	r22, r12
    15ee:	0e 94 06 34 	call	0x680c	; 0x680c <__divsf3>
}
    15f2:	ff 90       	pop	r15
    15f4:	ef 90       	pop	r14
    15f6:	df 90       	pop	r13
    15f8:	cf 90       	pop	r12
    15fa:	08 95       	ret

000015fc <_Z18Rele_Abilitazione1ii>:

void Rele_Abilitazione1(int p_azione, int p_bit) {

  DDRC |= (1 << PC7);  // Rele1
    15fc:	3f 9a       	sbi	0x07, 7	; 7

  switch (p_azione) {
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	91 05       	cpc	r25, r1
    1602:	71 f0       	breq	.+28     	; 0x1620 <_Z18Rele_Abilitazione1ii+0x24>
    1604:	82 30       	cpi	r24, 0x02	; 2
    1606:	91 05       	cpc	r25, r1
    1608:	e1 f0       	breq	.+56     	; 0x1642 <_Z18Rele_Abilitazione1ii+0x46>
    160a:	89 2b       	or	r24, r25
    160c:	89 f5       	brne	.+98     	; 0x1670 <_Z18Rele_Abilitazione1ii+0x74>
    case 0: // chiudi relè
      {
        CLEAR_BIT(PORTC, PC7); // Rele1*/
    160e:	47 98       	cbi	0x08, 7	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1610:	2f ef       	ldi	r18, 0xFF	; 255
    1612:	30 e7       	ldi	r19, 0x70	; 112
    1614:	42 e0       	ldi	r20, 0x02	; 2
    1616:	21 50       	subi	r18, 0x01	; 1
    1618:	30 40       	sbci	r19, 0x00	; 0
    161a:	40 40       	sbci	r20, 0x00	; 0
    161c:	e1 f7       	brne	.-8      	; 0x1616 <_Z18Rele_Abilitazione1ii+0x1a>
    161e:	0e c0       	rjmp	.+28     	; 0x163c <_Z18Rele_Abilitazione1ii+0x40>
        _delay_ms(50);
      }
      break;
    case 1: // apri relè
      {
        SET_BIT(PORTC, p_bit); // Rele1
    1620:	28 b1       	in	r18, 0x08	; 8
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <_Z18Rele_Abilitazione1ii+0x2a>
    1624:	88 0f       	add	r24, r24
    1626:	6a 95       	dec	r22
    1628:	ea f7       	brpl	.-6      	; 0x1624 <_Z18Rele_Abilitazione1ii+0x28>
    162a:	82 2b       	or	r24, r18
    162c:	88 b9       	out	0x08, r24	; 8
    162e:	8f ef       	ldi	r24, 0xFF	; 255
    1630:	90 e7       	ldi	r25, 0x70	; 112
    1632:	22 e0       	ldi	r18, 0x02	; 2
    1634:	81 50       	subi	r24, 0x01	; 1
    1636:	90 40       	sbci	r25, 0x00	; 0
    1638:	20 40       	sbci	r18, 0x00	; 0
    163a:	e1 f7       	brne	.-8      	; 0x1634 <_Z18Rele_Abilitazione1ii+0x38>
    163c:	00 c0       	rjmp	.+0      	; 0x163e <_Z18Rele_Abilitazione1ii+0x42>
    163e:	00 00       	nop
    1640:	08 95       	ret
        _delay_ms(50);
      }
      break;
    case 2: // chiudi e apri relè
      {
        CLEAR_BIT(PORTC, p_bit); // Rele1
    1642:	28 b1       	in	r18, 0x08	; 8
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	01 c0       	rjmp	.+2      	; 0x164c <_Z18Rele_Abilitazione1ii+0x50>
    164a:	88 0f       	add	r24, r24
    164c:	6a 95       	dec	r22
    164e:	ea f7       	brpl	.-6      	; 0x164a <_Z18Rele_Abilitazione1ii+0x4e>
    1650:	98 2f       	mov	r25, r24
    1652:	90 95       	com	r25
    1654:	92 23       	and	r25, r18
    1656:	98 b9       	out	0x08, r25	; 8
    1658:	3f ef       	ldi	r19, 0xFF	; 255
    165a:	45 ea       	ldi	r20, 0xA5	; 165
    165c:	2e e0       	ldi	r18, 0x0E	; 14
    165e:	31 50       	subi	r19, 0x01	; 1
    1660:	40 40       	sbci	r20, 0x00	; 0
    1662:	20 40       	sbci	r18, 0x00	; 0
    1664:	e1 f7       	brne	.-8      	; 0x165e <_Z18Rele_Abilitazione1ii+0x62>
    1666:	00 c0       	rjmp	.+0      	; 0x1668 <_Z18Rele_Abilitazione1ii+0x6c>
    1668:	00 00       	nop
        _delay_ms(300);
        SET_BIT(PORTC, p_bit); // Rele1
    166a:	98 b1       	in	r25, 0x08	; 8
    166c:	89 2b       	or	r24, r25
    166e:	88 b9       	out	0x08, r24	; 8
    1670:	08 95       	ret

00001672 <_Z18Rele_Abilitazione2ii>:
  }
}

void Rele_Abilitazione2(int p_azione, int p_bit) {

  DDRA |= (1 << PA7);  // Rele2
    1672:	0f 9a       	sbi	0x01, 7	; 1

  switch (p_azione) {
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	91 05       	cpc	r25, r1
    1678:	b9 f0       	breq	.+46     	; 0x16a8 <_Z18Rele_Abilitazione2ii+0x36>
    167a:	82 30       	cpi	r24, 0x02	; 2
    167c:	91 05       	cpc	r25, r1
    167e:	29 f1       	breq	.+74     	; 0x16ca <_Z18Rele_Abilitazione2ii+0x58>
    1680:	89 2b       	or	r24, r25
    1682:	d1 f5       	brne	.+116    	; 0x16f8 <_Z18Rele_Abilitazione2ii+0x86>
    case 0:
      {
        CLEAR_BIT(PORTA, p_bit); // Rele2
    1684:	22 b1       	in	r18, 0x02	; 2
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	01 c0       	rjmp	.+2      	; 0x168e <_Z18Rele_Abilitazione2ii+0x1c>
    168c:	88 0f       	add	r24, r24
    168e:	6a 95       	dec	r22
    1690:	ea f7       	brpl	.-6      	; 0x168c <_Z18Rele_Abilitazione2ii+0x1a>
    1692:	80 95       	com	r24
    1694:	82 23       	and	r24, r18
    1696:	82 b9       	out	0x02, r24	; 2
    1698:	2f ef       	ldi	r18, 0xFF	; 255
    169a:	30 e7       	ldi	r19, 0x70	; 112
    169c:	42 e0       	ldi	r20, 0x02	; 2
    169e:	21 50       	subi	r18, 0x01	; 1
    16a0:	30 40       	sbci	r19, 0x00	; 0
    16a2:	40 40       	sbci	r20, 0x00	; 0
    16a4:	e1 f7       	brne	.-8      	; 0x169e <_Z18Rele_Abilitazione2ii+0x2c>
    16a6:	0e c0       	rjmp	.+28     	; 0x16c4 <_Z18Rele_Abilitazione2ii+0x52>
        _delay_ms(50);
      }
      break;
    case 1:
      {
        SET_BIT(PORTA, p_bit); // Rele2
    16a8:	22 b1       	in	r18, 0x02	; 2
    16aa:	01 c0       	rjmp	.+2      	; 0x16ae <_Z18Rele_Abilitazione2ii+0x3c>
    16ac:	88 0f       	add	r24, r24
    16ae:	6a 95       	dec	r22
    16b0:	ea f7       	brpl	.-6      	; 0x16ac <_Z18Rele_Abilitazione2ii+0x3a>
    16b2:	82 2b       	or	r24, r18
    16b4:	82 b9       	out	0x02, r24	; 2
    16b6:	8f ef       	ldi	r24, 0xFF	; 255
    16b8:	90 e7       	ldi	r25, 0x70	; 112
    16ba:	22 e0       	ldi	r18, 0x02	; 2
    16bc:	81 50       	subi	r24, 0x01	; 1
    16be:	90 40       	sbci	r25, 0x00	; 0
    16c0:	20 40       	sbci	r18, 0x00	; 0
    16c2:	e1 f7       	brne	.-8      	; 0x16bc <_Z18Rele_Abilitazione2ii+0x4a>
    16c4:	00 c0       	rjmp	.+0      	; 0x16c6 <_Z18Rele_Abilitazione2ii+0x54>
    16c6:	00 00       	nop
    16c8:	08 95       	ret
        _delay_ms(50);
      }
      break;
    case 2:
      {
        CLEAR_BIT(PORTA, p_bit); // Rele2
    16ca:	22 b1       	in	r18, 0x02	; 2
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <_Z18Rele_Abilitazione2ii+0x62>
    16d2:	88 0f       	add	r24, r24
    16d4:	6a 95       	dec	r22
    16d6:	ea f7       	brpl	.-6      	; 0x16d2 <_Z18Rele_Abilitazione2ii+0x60>
    16d8:	98 2f       	mov	r25, r24
    16da:	90 95       	com	r25
    16dc:	92 23       	and	r25, r18
    16de:	92 b9       	out	0x02, r25	; 2
    16e0:	3f ef       	ldi	r19, 0xFF	; 255
    16e2:	45 ea       	ldi	r20, 0xA5	; 165
    16e4:	2e e0       	ldi	r18, 0x0E	; 14
    16e6:	31 50       	subi	r19, 0x01	; 1
    16e8:	40 40       	sbci	r20, 0x00	; 0
    16ea:	20 40       	sbci	r18, 0x00	; 0
    16ec:	e1 f7       	brne	.-8      	; 0x16e6 <_Z18Rele_Abilitazione2ii+0x74>
    16ee:	00 c0       	rjmp	.+0      	; 0x16f0 <_Z18Rele_Abilitazione2ii+0x7e>
    16f0:	00 00       	nop
        _delay_ms(300);
        SET_BIT(PORTA, p_bit); // Rele2
    16f2:	92 b1       	in	r25, 0x02	; 2
    16f4:	89 2b       	or	r24, r25
    16f6:	82 b9       	out	0x02, r24	; 2
    16f8:	08 95       	ret

000016fa <_Z12Control_WIFIi>:
      break;
  }
}

void Control_WIFI(int azione) {
  DDRB |= (1 << PB3);  // set DDRB bit 3,  sets PB3 for output
    16fa:	23 9a       	sbi	0x04, 3	; 4
    16fc:	2f ef       	ldi	r18, 0xFF	; 255
    16fe:	36 e7       	ldi	r19, 0x76	; 118
    1700:	41 e0       	ldi	r20, 0x01	; 1
    1702:	21 50       	subi	r18, 0x01	; 1
    1704:	30 40       	sbci	r19, 0x00	; 0
    1706:	40 40       	sbci	r20, 0x00	; 0
    1708:	e1 f7       	brne	.-8      	; 0x1702 <_Z12Control_WIFIi+0x8>
    170a:	00 c0       	rjmp	.+0      	; 0x170c <_Z12Control_WIFIi+0x12>
    170c:	00 00       	nop
  _delay_ms(30);
  if (azione == 1) {
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	91 05       	cpc	r25, r1
    1712:	11 f4       	brne	.+4      	; 0x1718 <_Z12Control_WIFIi+0x1e>
    SET_BIT(PORTB, 3);
    1714:	2b 9a       	sbi	0x05, 3	; 5
    1716:	08 95       	ret
  } else if (azione == 0) {
    1718:	89 2b       	or	r24, r25
    171a:	09 f4       	brne	.+2      	; 0x171e <_Z12Control_WIFIi+0x24>
    CLEAR_BIT(PORTB, 3);
    171c:	2b 98       	cbi	0x05, 3	; 5
    171e:	08 95       	ret

00001720 <_Z6Azzerav>:
  }
}

void Azzera()
{
  RispostaHTTP = "";
    1720:	68 ed       	ldi	r22, 0xD8	; 216
    1722:	71 e0       	ldi	r23, 0x01	; 1
    1724:	87 e8       	ldi	r24, 0x87	; 135
    1726:	9a e0       	ldi	r25, 0x0A	; 10
    1728:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
  impulsi = 0;
    172c:	10 92 8f 0a 	sts	0x0A8F, r1	; 0x800a8f <impulsi+0x1>
    1730:	10 92 8e 0a 	sts	0x0A8E, r1	; 0x800a8e <impulsi>
  alreadyTimbrata = false;
    1734:	10 92 cf 0a 	sts	0x0ACF, r1	; 0x800acf <alreadyTimbrata>
  //Carburante = "X";
  mezzo.Carb = "X";
    1738:	6d e2       	ldi	r22, 0x2D	; 45
    173a:	75 e0       	ldi	r23, 0x05	; 5
    173c:	89 ed       	ldi	r24, 0xD9	; 217
    173e:	9a e0       	ldi	r25, 0x0A	; 10
    1740:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
  mezzo.TARGA = "X";
    1744:	6d e2       	ldi	r22, 0x2D	; 45
    1746:	75 e0       	ldi	r23, 0x05	; 5
    1748:	8f ed       	ldi	r24, 0xDF	; 223
    174a:	9a e0       	ldi	r25, 0x0A	; 10
    174c:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
  mezzo.KM = "0";
    1750:	65 e5       	ldi	r22, 0x55	; 85
    1752:	76 e0       	ldi	r23, 0x06	; 6
    1754:	85 ee       	ldi	r24, 0xE5	; 229
    1756:	9a e0       	ldi	r25, 0x0A	; 10
    1758:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
  distr_selezionato = 0;
    175c:	10 92 8d 0a 	sts	0x0A8D, r1	; 0x800a8d <distr_selezionato>

  Rele_Abilitazione1(1, 7);
    1760:	67 e0       	ldi	r22, 0x07	; 7
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	49 df       	rcall	.-366    	; 0x15fc <_Z18Rele_Abilitazione1ii>
  Rele_Abilitazione2(1, 7);
    176a:	67 e0       	ldi	r22, 0x07	; 7
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	7f df       	rcall	.-258    	; 0x1672 <_Z18Rele_Abilitazione2ii>
  Control_WIFI(0);
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	c0 df       	rcall	.-128    	; 0x16fa <_Z12Control_WIFIi>
    177a:	8f e1       	ldi	r24, 0x1F	; 31
    177c:	9e e4       	ldi	r25, 0x4E	; 78
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <_Z6Azzerav+0x5e>
    1782:	00 c0       	rjmp	.+0      	; 0x1784 <_Z6Azzerav+0x64>
    1784:	00 00       	nop

  _delay_ms(5);
  clientATE.flush();
    1786:	8d e0       	ldi	r24, 0x0D	; 13
    1788:	9a e0       	ldi	r25, 0x0A	; 10
    178a:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <_ZN14EthernetClient5flushEv>
  clientATE.stop();
    178e:	8d e0       	ldi	r24, 0x0D	; 13
    1790:	9a e0       	ldi	r25, 0x0A	; 10
    1792:	0e 94 28 27 	call	0x4e50	; 0x4e50 <_ZN14EthernetClient4stopEv>
    1796:	8f e1       	ldi	r24, 0x1F	; 31
    1798:	9e e4       	ldi	r25, 0x4E	; 78
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	f1 f7       	brne	.-4      	; 0x179a <_Z6Azzerav+0x7a>
    179e:	00 c0       	rjmp	.+0      	; 0x17a0 <_Z6Azzerav+0x80>
    17a0:	00 00       	nop
  _delay_ms(5);
  clientLOCAL.flush();
    17a2:	8a e1       	ldi	r24, 0x1A	; 26
    17a4:	9a e0       	ldi	r25, 0x0A	; 10
    17a6:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <_ZN14EthernetClient5flushEv>
  clientLOCAL.stop();
    17aa:	8a e1       	ldi	r24, 0x1A	; 26
    17ac:	9a e0       	ldi	r25, 0x0A	; 10
    17ae:	0e 94 28 27 	call	0x4e50	; 0x4e50 <_ZN14EthernetClient4stopEv>
  Connected = false;
    17b2:	10 92 93 0a 	sts	0x0A93, r1	; 0x800a93 <Connected+0x1>
    17b6:	10 92 92 0a 	sts	0x0A92, r1	; 0x800a92 <Connected>
    17ba:	8f e1       	ldi	r24, 0x1F	; 31
    17bc:	9e e4       	ldi	r25, 0x4E	; 78
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <_Z6Azzerav+0x9e>
    17c2:	00 c0       	rjmp	.+0      	; 0x17c4 <_Z6Azzerav+0xa4>
    17c4:	00 00       	nop
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
    17c6:	2c 98       	cbi	0x05, 4	; 5
    17c8:	8f e1       	ldi	r24, 0x1F	; 31
    17ca:	9e e4       	ldi	r25, 0x4E	; 78
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <_Z6Azzerav+0xac>
    17d0:	00 c0       	rjmp	.+0      	; 0x17d2 <_Z6Azzerav+0xb2>
    17d2:	00 00       	nop
static inline void disable_ETH()   { PORTC |= (1 << PC4);  } // Set 1 Bit 4 PORTC Register
static inline void disable_FLASH() { PORTB |= (1 << PB4);  } // Set 1 Bit 4 PORTB Register
    17d4:	2c 9a       	sbi	0x05, 4	; 5
    17d6:	8f e1       	ldi	r24, 0x1F	; 31
    17d8:	9e e4       	ldi	r25, 0x4E	; 78
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <_Z6Azzerav+0xba>
    17de:	00 c0       	rjmp	.+0      	; 0x17e0 <_Z6Azzerav+0xc0>
    17e0:	00 00       	nop
  enable_FLASH();
  _delay_ms(5);
  disable_FLASH();
  _delay_ms(5);
  
  disable_ETH();
    17e2:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
    17e6:	8f e1       	ldi	r24, 0x1F	; 31
    17e8:	9e e4       	ldi	r25, 0x4E	; 78
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <_Z6Azzerav+0xca>
    17ee:	00 c0       	rjmp	.+0      	; 0x17f0 <_Z6Azzerav+0xd0>
    17f0:	00 00       	nop
  _delay_ms(5);
  enable_ETH();
    17f2:	0e 94 91 01 	call	0x322	; 0x322 <_ZL10enable_ETHv>

  SET_BIT(PORTA, A1);
    17f6:	82 b1       	in	r24, 0x02	; 2
    17f8:	82 b9       	out	0x02, r24	; 2
  SET_BIT(PORTA, A2);
    17fa:	82 b1       	in	r24, 0x02	; 2
    17fc:	82 b9       	out	0x02, r24	; 2

  righeDisplay[1] =  "";
    17fe:	68 ed       	ldi	r22, 0xD8	; 216
    1800:	71 e0       	ldi	r23, 0x01	; 1
    1802:	85 e4       	ldi	r24, 0x45	; 69
    1804:	9a e0       	ldi	r25, 0x0A	; 10
    1806:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
  righeDisplay[2] =  "";
    180a:	68 ed       	ldi	r22, 0xD8	; 216
    180c:	71 e0       	ldi	r23, 0x01	; 1
    180e:	8b e4       	ldi	r24, 0x4B	; 75
    1810:	9a e0       	ldi	r25, 0x0A	; 10
    1812:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
  righeDisplay[2] =  "";
    1816:	68 ed       	ldi	r22, 0xD8	; 216
    1818:	71 e0       	ldi	r23, 0x01	; 1
    181a:	8b e4       	ldi	r24, 0x4B	; 75
    181c:	9a e0       	ldi	r25, 0x0A	; 10
    181e:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>

  lcd.noBacklight();
    1822:	87 eb       	ldi	r24, 0xB7	; 183
    1824:	9a e0       	ldi	r25, 0x0A	; 10
    1826:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <_ZN3LCD11noBacklightEv>
  lcd.noDisplay();
    182a:	87 eb       	ldi	r24, 0xB7	; 183
    182c:	9a e0       	ldi	r25, 0x0A	; 10
    182e:	0e 94 43 2e 	call	0x5c86	; 0x5c86 <_ZN3LCD9noDisplayEv>
  secs = 0;
    1832:	10 92 fd 09 	sts	0x09FD, r1	; 0x8009fd <secs>
    1836:	10 92 fe 09 	sts	0x09FE, r1	; 0x8009fe <secs+0x1>
    183a:	10 92 ff 09 	sts	0x09FF, r1	; 0x8009ff <secs+0x2>
    183e:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <secs+0x3>
  UltimoPassaggioStato = 0;
    1842:	10 92 f9 09 	sts	0x09F9, r1	; 0x8009f9 <UltimoPassaggioStato>
    1846:	10 92 fa 09 	sts	0x09FA, r1	; 0x8009fa <UltimoPassaggioStato+0x1>
    184a:	10 92 fb 09 	sts	0x09FB, r1	; 0x8009fb <UltimoPassaggioStato+0x2>
    184e:	10 92 fc 09 	sts	0x09FC, r1	; 0x8009fc <UltimoPassaggioStato+0x3>

  printLine();
    1852:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  Serial.println("Azzera....... OK");
    1856:	62 ea       	ldi	r22, 0xA2	; 162
    1858:	75 e0       	ldi	r23, 0x05	; 5
    185a:	8e e7       	ldi	r24, 0x7E	; 126
    185c:	9c e0       	ldi	r25, 0x0C	; 12
    185e:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
  printLine();
    1862:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  TARGA = "";
    1866:	68 ed       	ldi	r22, 0xD8	; 216
    1868:	71 e0       	ldi	r23, 0x01	; 1
    186a:	89 ee       	ldi	r24, 0xE9	; 233
    186c:	99 e0       	ldi	r25, 0x09	; 9
    186e:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
  stato_procedura = -1;
    1872:	8f ef       	ldi	r24, 0xFF	; 255
    1874:	9f ef       	ldi	r25, 0xFF	; 255
    1876:	90 93 91 0a 	sts	0x0A91, r25	; 0x800a91 <stato_procedura+0x1>
    187a:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <stato_procedura>
    187e:	08 95       	ret

00001880 <_Z10inputTargac>:
}

void inputTarga(char T) {
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	62 97       	sbiw	r28, 0x12	; 18
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61

  switch (T) {
    1894:	81 34       	cpi	r24, 0x41	; 65
    1896:	21 f1       	breq	.+72     	; 0x18e0 <_Z10inputTargac+0x60>
    1898:	d8 f4       	brcc	.+54     	; 0x18d0 <_Z10inputTargac+0x50>
    189a:	83 32       	cpi	r24, 0x23	; 35
    189c:	09 f4       	brne	.+2      	; 0x18a0 <_Z10inputTargac+0x20>
    189e:	86 c0       	rjmp	.+268    	; 0x19ac <_Z10inputTargac+0x12c>
    18a0:	8a 32       	cpi	r24, 0x2A	; 42
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <_Z10inputTargac+0x26>
    18a4:	b2 c0       	rjmp	.+356    	; 0x1a0a <_Z10inputTargac+0x18a>
          _delay_ms(10);          
        }
      }
      break;
    case ('*'): {
        TARGA = "";
    18a6:	68 ed       	ldi	r22, 0xD8	; 216
    18a8:	71 e0       	ldi	r23, 0x01	; 1
    18aa:	89 ee       	ldi	r24, 0xE9	; 233
    18ac:	99 e0       	ldi	r25, 0x09	; 9
    18ae:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
        righeDisplay[1] =  "AVVICINA TAG MEZZO"; // Set display per stato successivo
    18b2:	67 eb       	ldi	r22, 0xB7	; 183
    18b4:	75 e0       	ldi	r23, 0x05	; 5
    18b6:	85 e4       	ldi	r24, 0x45	; 69
    18b8:	9a e0       	ldi	r25, 0x0A	; 10
    18ba:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
        righeDisplay[2] =  "";
    18be:	68 ed       	ldi	r22, 0xD8	; 216
    18c0:	71 e0       	ldi	r23, 0x01	; 1
    18c2:	8b e4       	ldi	r24, 0x4B	; 75
    18c4:	9a e0       	ldi	r25, 0x0A	; 10
    18c6:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
        righeDisplay[3] = "";        
    18ca:	68 ed       	ldi	r22, 0xD8	; 216
    18cc:	71 e0       	ldi	r23, 0x01	; 1
    18ce:	8f c0       	rjmp	.+286    	; 0x19ee <_Z10inputTargac+0x16e>
  stato_procedura = -1;
}

void inputTarga(char T) {

  switch (T) {
    18d0:	83 34       	cpi	r24, 0x43	; 67
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <_Z10inputTargac+0x56>
    18d4:	51 c0       	rjmp	.+162    	; 0x1978 <_Z10inputTargac+0xf8>
    18d6:	a0 f0       	brcs	.+40     	; 0x1900 <_Z10inputTargac+0x80>
    18d8:	8e 34       	cpi	r24, 0x4E	; 78
    18da:	09 f4       	brne	.+2      	; 0x18de <_Z10inputTargac+0x5e>
    18dc:	d0 c0       	rjmp	.+416    	; 0x1a7e <_Z10inputTargac+0x1fe>
    18de:	95 c0       	rjmp	.+298    	; 0x1a0a <_Z10inputTargac+0x18a>
    case ('N'): {
        // Serial.print("NIENTE");
      }
      break;
    case ('A'): {
        if (TARGA.length() == 5) {
    18e0:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <TARGA+0x4>
    18e4:	90 91 ee 09 	lds	r25, 0x09EE	; 0x8009ee <TARGA+0x5>
    18e8:	05 97       	sbiw	r24, 0x05	; 5
    18ea:	09 f0       	breq	.+2      	; 0x18ee <_Z10inputTargac+0x6e>
    18ec:	c8 c0       	rjmp	.+400    	; 0x1a7e <_Z10inputTargac+0x1fe>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    18ee:	69 ee       	ldi	r22, 0xE9	; 233
    18f0:	79 e0       	ldi	r23, 0x09	; 9
    18f2:	ce 01       	movw	r24, r28
    18f4:	01 96       	adiw	r24, 0x01	; 1
    18f6:	0e 94 ee 39 	call	0x73dc	; 0x73dc <_ZN6StringC1ERKS_>
          char buf[6];     
          String w_TARGA = TARGA + "D";   
    18fa:	63 eb       	ldi	r22, 0xB3	; 179
    18fc:	75 e0       	ldi	r23, 0x05	; 5
    18fe:	0f c0       	rjmp	.+30     	; 0x191e <_Z10inputTargac+0x9e>
          _delay_ms(10);          
        }       
      }
      break;
    case ('B'): {
        if (TARGA.length() == 5) {
    1900:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <TARGA+0x4>
    1904:	90 91 ee 09 	lds	r25, 0x09EE	; 0x8009ee <TARGA+0x5>
    1908:	05 97       	sbiw	r24, 0x05	; 5
    190a:	09 f0       	breq	.+2      	; 0x190e <_Z10inputTargac+0x8e>
    190c:	b8 c0       	rjmp	.+368    	; 0x1a7e <_Z10inputTargac+0x1fe>
    190e:	69 ee       	ldi	r22, 0xE9	; 233
    1910:	79 e0       	ldi	r23, 0x09	; 9
    1912:	ce 01       	movw	r24, r28
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	0e 94 ee 39 	call	0x73dc	; 0x73dc <_ZN6StringC1ERKS_>
          char buf[6];     
          String w_TARGA = TARGA + "B";   
    191a:	65 eb       	ldi	r22, 0xB5	; 181
    191c:	75 e0       	ldi	r23, 0x05	; 5
    191e:	ce 01       	movw	r24, r28
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <_ZplRK15StringSumHelperPKc>
    1926:	bc 01       	movw	r22, r24
    1928:	ce 01       	movw	r24, r28
    192a:	07 96       	adiw	r24, 0x07	; 7
    192c:	0e 94 ee 39 	call	0x73dc	; 0x73dc <_ZN6StringC1ERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1930:	ce 01       	movw	r24, r28
    1932:	01 96       	adiw	r24, 0x01	; 1
    1934:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	47 e0       	ldi	r20, 0x07	; 7
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	be 01       	movw	r22, r28
    1942:	63 5f       	subi	r22, 0xF3	; 243
    1944:	7f 4f       	sbci	r23, 0xFF	; 255
    1946:	ce 01       	movw	r24, r28
    1948:	07 96       	adiw	r24, 0x07	; 7
    194a:	0e 94 a9 3b 	call	0x7752	; 0x7752 <_ZNK6String8getBytesEPhjj>
          w_TARGA.toCharArray(buf, 7);
          String mezzoString = scrivi_TAG_Mezzo(buf);
    194e:	be 01       	movw	r22, r28
    1950:	63 5f       	subi	r22, 0xF3	; 243
    1952:	7f 4f       	sbci	r23, 0xFF	; 255
    1954:	ce 01       	movw	r24, r28
    1956:	01 96       	adiw	r24, 0x01	; 1
    1958:	f1 d9       	rcall	.-3102   	; 0xd3c <_Z16scrivi_TAG_MezzoPc>
    195a:	8f e3       	ldi	r24, 0x3F	; 63
    195c:	9c e9       	ldi	r25, 0x9C	; 156
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <_Z10inputTargac+0xde>
    1962:	00 c0       	rjmp	.+0      	; 0x1964 <_Z10inputTargac+0xe4>
    1964:	00 00       	nop
    1966:	ce 01       	movw	r24, r28
    1968:	01 96       	adiw	r24, 0x01	; 1
    196a:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
      }
      break;
    case ('B'): {
        if (TARGA.length() == 5) {
          char buf[6];     
          String w_TARGA = TARGA + "B";   
    196e:	ce 01       	movw	r24, r28
    1970:	07 96       	adiw	r24, 0x07	; 7
    1972:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    1976:	83 c0       	rjmp	.+262    	; 0x1a7e <_Z10inputTargac+0x1fe>
    1978:	20 91 ed 09 	lds	r18, 0x09ED	; 0x8009ed <TARGA+0x4>
    197c:	30 91 ee 09 	lds	r19, 0x09EE	; 0x8009ee <TARGA+0x5>
        righeDisplay[3] = "";        
        avanzaStato(TselDistributore);
      }
      break;
    case ('C'): {
        if (TARGA.length() > 0) {
    1980:	21 15       	cp	r18, r1
    1982:	31 05       	cpc	r19, r1
    1984:	09 f4       	brne	.+2      	; 0x1988 <_Z10inputTargac+0x108>
    1986:	7b c0       	rjmp	.+246    	; 0x1a7e <_Z10inputTargac+0x1fe>
          TARGA = TARGA.substring(0, TARGA.length() - 1);
    1988:	21 50       	subi	r18, 0x01	; 1
    198a:	31 09       	sbc	r19, r1
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	69 ee       	ldi	r22, 0xE9	; 233
    1992:	79 e0       	ldi	r23, 0x09	; 9
    1994:	ce 01       	movw	r24, r28
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <_ZNK6String9substringEjj>
    199c:	be 01       	movw	r22, r28
    199e:	6f 5f       	subi	r22, 0xFF	; 255
    19a0:	7f 4f       	sbci	r23, 0xFF	; 255
    19a2:	89 ee       	ldi	r24, 0xE9	; 233
    19a4:	99 e0       	ldi	r25, 0x09	; 9
    19a6:	0e 94 f6 39 	call	0x73ec	; 0x73ec <_ZN6StringaSEOS_>
    19aa:	3b c0       	rjmp	.+118    	; 0x1a22 <_Z10inputTargac+0x1a2>
          displayLCD(righeDisplay, stato_procedura, 10);
        }
      }
      break;
    case ('#'): {
        if (TARGA.length() == 5) {
    19ac:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <TARGA+0x4>
    19b0:	90 91 ee 09 	lds	r25, 0x09EE	; 0x8009ee <TARGA+0x5>
    19b4:	05 97       	sbiw	r24, 0x05	; 5
    19b6:	09 f0       	breq	.+2      	; 0x19ba <_Z10inputTargac+0x13a>
    19b8:	62 c0       	rjmp	.+196    	; 0x1a7e <_Z10inputTargac+0x1fe>
          mezzo.TARGA = TARGA;
    19ba:	69 ee       	ldi	r22, 0xE9	; 233
    19bc:	79 e0       	ldi	r23, 0x09	; 9
    19be:	8f ed       	ldi	r24, 0xDF	; 223
    19c0:	9a e0       	ldi	r25, 0x0A	; 10
    19c2:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
          RaccoltaDati[1] = mezzo.TARGA;
    19c6:	6f ed       	ldi	r22, 0xDF	; 223
    19c8:	7a e0       	ldi	r23, 0x0A	; 10
    19ca:	89 e6       	ldi	r24, 0x69	; 105
    19cc:	9a e0       	ldi	r25, 0x0A	; 10
    19ce:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
          righeDisplay[1] = "SCEGLI DISTRIBUTORE";
    19d2:	68 ef       	ldi	r22, 0xF8	; 248
    19d4:	75 e0       	ldi	r23, 0x05	; 5
    19d6:	85 e4       	ldi	r24, 0x45	; 69
    19d8:	9a e0       	ldi	r25, 0x0A	; 10
    19da:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          righeDisplay[2] = "NERO:  POMPA 1";
    19de:	6c e0       	ldi	r22, 0x0C	; 12
    19e0:	76 e0       	ldi	r23, 0x06	; 6
    19e2:	8b e4       	ldi	r24, 0x4B	; 75
    19e4:	9a e0       	ldi	r25, 0x0A	; 10
    19e6:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          righeDisplay[3] = "VERDE: POMPA 2";
    19ea:	6b e1       	ldi	r22, 0x1B	; 27
    19ec:	76 e0       	ldi	r23, 0x06	; 6
    19ee:	81 e5       	ldi	r24, 0x51	; 81
    19f0:	9a e0       	ldi	r25, 0x0A	; 10
    19f2:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          avanzaStato(TselDistributore);
    19f6:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    19fa:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    19fe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    1a02:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    1a06:	59 d9       	rcall	.-3406   	; 0xcba <_Z11avanzaStatom>
    1a08:	3a c0       	rjmp	.+116    	; 0x1a7e <_Z10inputTargac+0x1fe>
        }
      }
      break;
    default:  {
        TARGA += String(T);
    1a0a:	68 2f       	mov	r22, r24
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	0e 94 16 3a 	call	0x742c	; 0x742c <_ZN6StringC1Ec>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1a14:	be 01       	movw	r22, r28
    1a16:	6f 5f       	subi	r22, 0xFF	; 255
    1a18:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1a:	89 ee       	ldi	r24, 0xE9	; 233
    1a1c:	99 e0       	ldi	r25, 0x09	; 9
    1a1e:	0e 94 31 3b 	call	0x7662	; 0x7662 <_ZN6String6concatERKS_>
    1a22:	ce 01       	movw	r24, r28
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
        // _delay_ms(20);
        righeDisplay[1] =  "** TARGA MEZZO **";
    1a2a:	6a ec       	ldi	r22, 0xCA	; 202
    1a2c:	75 e0       	ldi	r23, 0x05	; 5
    1a2e:	85 e4       	ldi	r24, 0x45	; 69
    1a30:	9a e0       	ldi	r25, 0x0A	; 10
    1a32:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1a36:	6c ed       	ldi	r22, 0xDC	; 220
    1a38:	75 e0       	ldi	r23, 0x05	; 5
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
        righeDisplay[2] = "TARGA:" + TARGA;
    1a42:	69 ee       	ldi	r22, 0xE9	; 233
    1a44:	79 e0       	ldi	r23, 0x09	; 9
    1a46:	ce 01       	movw	r24, r28
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    1a4e:	bc 01       	movw	r22, r24
    1a50:	8b e4       	ldi	r24, 0x4B	; 75
    1a52:	9a e0       	ldi	r25, 0x0A	; 10
    1a54:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1a58:	ce 01       	movw	r24, r28
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
        righeDisplay[3] = "#:Conferma *:Usa TAG";
    1a60:	63 ee       	ldi	r22, 0xE3	; 227
    1a62:	75 e0       	ldi	r23, 0x05	; 5
    1a64:	81 e5       	ldi	r24, 0x51	; 81
    1a66:	9a e0       	ldi	r25, 0x0A	; 10
    1a68:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
        displayLCD(righeDisplay, stato_procedura, 10);
    1a6c:	60 91 90 0a 	lds	r22, 0x0A90	; 0x800a90 <stato_procedura>
    1a70:	70 91 91 0a 	lds	r23, 0x0A91	; 0x800a91 <stato_procedura+0x1>
    1a74:	4a e0       	ldi	r20, 0x0A	; 10
    1a76:	50 e0       	ldi	r21, 0x00	; 0
    1a78:	8f e3       	ldi	r24, 0x3F	; 63
    1a7a:	9a e0       	ldi	r25, 0x0A	; 10
    1a7c:	e9 d8       	rcall	.-3630   	; 0xc50 <_Z10displayLCDP6Stringii>
      }
      break;
  }
}
    1a7e:	62 96       	adiw	r28, 0x12	; 18
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	08 95       	ret

00001a90 <_Z7inputKMc>:

void inputKM(char KM_input) {
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	2c 97       	sbiw	r28, 0x0c	; 12
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61

  switch (KM_input) {
    1aa4:	83 34       	cpi	r24, 0x43	; 67
    1aa6:	60 f4       	brcc	.+24     	; 0x1ac0 <_Z7inputKMc+0x30>
    1aa8:	81 34       	cpi	r24, 0x41	; 65
    1aaa:	08 f0       	brcs	.+2      	; 0x1aae <_Z7inputKMc+0x1e>
    1aac:	c8 c0       	rjmp	.+400    	; 0x1c3e <_Z7inputKMc+0x1ae>
    1aae:	8a 32       	cpi	r24, 0x2A	; 42
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <_Z7inputKMc+0x24>
    1ab2:	c5 c0       	rjmp	.+394    	; 0x1c3e <_Z7inputKMc+0x1ae>
    1ab4:	8e 32       	cpi	r24, 0x2E	; 46
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <_Z7inputKMc+0x2a>
    1ab8:	c2 c0       	rjmp	.+388    	; 0x1c3e <_Z7inputKMc+0x1ae>
    1aba:	83 32       	cpi	r24, 0x23	; 35
    1abc:	09 f1       	breq	.+66     	; 0x1b00 <_Z7inputKMc+0x70>
    1abe:	85 c0       	rjmp	.+266    	; 0x1bca <_Z7inputKMc+0x13a>
    1ac0:	83 34       	cpi	r24, 0x43	; 67
    1ac2:	21 f0       	breq	.+8      	; 0x1acc <_Z7inputKMc+0x3c>
    1ac4:	8e 34       	cpi	r24, 0x4E	; 78
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <_Z7inputKMc+0x3a>
    1ac8:	80 c0       	rjmp	.+256    	; 0x1bca <_Z7inputKMc+0x13a>
    1aca:	b9 c0       	rjmp	.+370    	; 0x1c3e <_Z7inputKMc+0x1ae>
    1acc:	20 91 e7 09 	lds	r18, 0x09E7	; 0x8009e7 <KM+0x4>
    1ad0:	30 91 e8 09 	lds	r19, 0x09E8	; 0x8009e8 <KM+0x5>
        //  Serial.print("NIENTE");
      }
    break;

    case ('C'): {
        if (KM.length() > 0)
    1ad4:	21 15       	cp	r18, r1
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <_Z7inputKMc+0x4c>
    1ada:	87 c0       	rjmp	.+270    	; 0x1bea <_Z7inputKMc+0x15a>
          KM = KM.substring(0, KM.length() - 1);
    1adc:	21 50       	subi	r18, 0x01	; 1
    1ade:	31 09       	sbc	r19, r1
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	50 e0       	ldi	r21, 0x00	; 0
    1ae4:	63 ee       	ldi	r22, 0xE3	; 227
    1ae6:	79 e0       	ldi	r23, 0x09	; 9
    1ae8:	ce 01       	movw	r24, r28
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <_ZNK6String9substringEjj>
    1af0:	be 01       	movw	r22, r28
    1af2:	6f 5f       	subi	r22, 0xFF	; 255
    1af4:	7f 4f       	sbci	r23, 0xFF	; 255
    1af6:	83 ee       	ldi	r24, 0xE3	; 227
    1af8:	99 e0       	ldi	r25, 0x09	; 9
    1afa:	0e 94 f6 39 	call	0x73ec	; 0x73ec <_ZN6StringaSEOS_>
    1afe:	71 c0       	rjmp	.+226    	; 0x1be2 <_Z7inputKMc+0x152>
        righeDisplay[3] = "#:Conferma";
        displayLCD(righeDisplay, stato_procedura, 10);
      }
      break;
    case ('#'): {
        if (KM.length() == 4) {
    1b00:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <KM+0x4>
    1b04:	90 91 e8 09 	lds	r25, 0x09E8	; 0x8009e8 <KM+0x5>
    1b08:	04 97       	sbiw	r24, 0x04	; 4
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <_Z7inputKMc+0x7e>
    1b0c:	98 c0       	rjmp	.+304    	; 0x1c3e <_Z7inputKMc+0x1ae>
          mezzo.KM = KM;
    1b0e:	63 ee       	ldi	r22, 0xE3	; 227
    1b10:	79 e0       	ldi	r23, 0x09	; 9
    1b12:	85 ee       	ldi	r24, 0xE5	; 229
    1b14:	9a e0       	ldi	r25, 0x0A	; 10
    1b16:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
          RaccoltaDati[4] = mezzo.KM;
    1b1a:	65 ee       	ldi	r22, 0xE5	; 229
    1b1c:	7a e0       	ldi	r23, 0x0A	; 10
    1b1e:	8b e7       	ldi	r24, 0x7B	; 123
    1b20:	9a e0       	ldi	r25, 0x0A	; 10
    1b22:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
          righeDisplay[1] = "LITRI : 0.00";
    1b26:	6a e4       	ldi	r22, 0x4A	; 74
    1b28:	76 e0       	ldi	r23, 0x06	; 6
    1b2a:	85 e4       	ldi	r24, 0x45	; 69
    1b2c:	9a e0       	ldi	r25, 0x0A	; 10
    1b2e:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          righeDisplay[2] = "imp :" + String(impulsi);
    1b32:	60 91 8e 0a 	lds	r22, 0x0A8E	; 0x800a8e <impulsi>
    1b36:	70 91 8f 0a 	lds	r23, 0x0A8F	; 0x800a8f <impulsi+0x1>
    1b3a:	4a e0       	ldi	r20, 0x0A	; 10
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	07 96       	adiw	r24, 0x07	; 7
    1b40:	0e 94 58 3a 	call	0x74b0	; 0x74b0 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1b44:	67 e5       	ldi	r22, 0x57	; 87
    1b46:	76 e0       	ldi	r23, 0x06	; 6
    1b48:	ce 01       	movw	r24, r28
    1b4a:	01 96       	adiw	r24, 0x01	; 1
    1b4c:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    1b50:	be 01       	movw	r22, r28
    1b52:	69 5f       	subi	r22, 0xF9	; 249
    1b54:	7f 4f       	sbci	r23, 0xFF	; 255
    1b56:	ce 01       	movw	r24, r28
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    1b5e:	bc 01       	movw	r22, r24
    1b60:	8b e4       	ldi	r24, 0x4B	; 75
    1b62:	9a e0       	ldi	r25, 0x0A	; 10
    1b64:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1b68:	ce 01       	movw	r24, r28
    1b6a:	01 96       	adiw	r24, 0x01	; 1
    1b6c:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    1b70:	ce 01       	movw	r24, r28
    1b72:	07 96       	adiw	r24, 0x07	; 7
    1b74:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1b78:	6d e5       	ldi	r22, 0x5D	; 93
    1b7a:	76 e0       	ldi	r23, 0x06	; 6
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
          righeDisplay[3] = "Erogazione: " + StatoAttuale;
    1b84:	6a e9       	ldi	r22, 0x9A	; 154
    1b86:	7a e0       	ldi	r23, 0x0A	; 10
    1b88:	ce 01       	movw	r24, r28
    1b8a:	01 96       	adiw	r24, 0x01	; 1
    1b8c:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    1b90:	bc 01       	movw	r22, r24
    1b92:	81 e5       	ldi	r24, 0x51	; 81
    1b94:	9a e0       	ldi	r25, 0x0A	; 10
    1b96:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	01 96       	adiw	r24, 0x01	; 1
    1b9e:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
          /*****************************************************************/
          disable_ETH();
    1ba2:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
    1ba6:	8f e3       	ldi	r24, 0x3F	; 63
    1ba8:	9f e1       	ldi	r25, 0x1F	; 31
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <_Z7inputKMc+0x11a>
    1bae:	00 c0       	rjmp	.+0      	; 0x1bb0 <_Z7inputKMc+0x120>
    1bb0:	00 00       	nop
          _delay_ms(2);
          enable_ETH();
    1bb2:	0e 94 91 01 	call	0x322	; 0x322 <_ZL10enable_ETHv>
          /*****************************************************************/
          avanzaStato(TmaxErogazione);
    1bb6:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxErogazione>
    1bba:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxErogazione+0x1>
    1bbe:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxErogazione+0x2>
    1bc2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxErogazione+0x3>
    1bc6:	79 d8       	rcall	.-3854   	; 0xcba <_Z11avanzaStatom>
    1bc8:	3a c0       	rjmp	.+116    	; 0x1c3e <_Z7inputKMc+0x1ae>
        }
      }
      break;
    default:  {
        KM += String(KM_input);
    1bca:	68 2f       	mov	r22, r24
    1bcc:	ce 01       	movw	r24, r28
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	0e 94 16 3a 	call	0x742c	; 0x742c <_ZN6StringC1Ec>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1bd4:	be 01       	movw	r22, r28
    1bd6:	6f 5f       	subi	r22, 0xFF	; 255
    1bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bda:	83 ee       	ldi	r24, 0xE3	; 227
    1bdc:	99 e0       	ldi	r25, 0x09	; 9
    1bde:	0e 94 31 3b 	call	0x7662	; 0x7662 <_ZN6String6concatERKS_>
    1be2:	ce 01       	movw	r24, r28
    1be4:	01 96       	adiw	r24, 0x01	; 1
    1be6:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
        //_delay_ms(20);
        righeDisplay[1] =  "****** KM ******";
    1bea:	6a e2       	ldi	r22, 0x2A	; 42
    1bec:	76 e0       	ldi	r23, 0x06	; 6
    1bee:	85 e4       	ldi	r24, 0x45	; 69
    1bf0:	9a e0       	ldi	r25, 0x0A	; 10
    1bf2:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1bf6:	6b e3       	ldi	r22, 0x3B	; 59
    1bf8:	76 e0       	ldi	r23, 0x06	; 6
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	01 96       	adiw	r24, 0x01	; 1
    1bfe:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
        righeDisplay[2] = "KM:" + KM;
    1c02:	63 ee       	ldi	r22, 0xE3	; 227
    1c04:	79 e0       	ldi	r23, 0x09	; 9
    1c06:	ce 01       	movw	r24, r28
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    1c0e:	bc 01       	movw	r22, r24
    1c10:	8b e4       	ldi	r24, 0x4B	; 75
    1c12:	9a e0       	ldi	r25, 0x0A	; 10
    1c14:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1c18:	ce 01       	movw	r24, r28
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
        righeDisplay[3] = "#:Conferma";
    1c20:	6f e3       	ldi	r22, 0x3F	; 63
    1c22:	76 e0       	ldi	r23, 0x06	; 6
    1c24:	81 e5       	ldi	r24, 0x51	; 81
    1c26:	9a e0       	ldi	r25, 0x0A	; 10
    1c28:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
        displayLCD(righeDisplay, stato_procedura, 10);
    1c2c:	60 91 90 0a 	lds	r22, 0x0A90	; 0x800a90 <stato_procedura>
    1c30:	70 91 91 0a 	lds	r23, 0x0A91	; 0x800a91 <stato_procedura+0x1>
    1c34:	4a e0       	ldi	r20, 0x0A	; 10
    1c36:	50 e0       	ldi	r21, 0x00	; 0
    1c38:	8f e3       	ldi	r24, 0x3F	; 63
    1c3a:	9a e0       	ldi	r25, 0x0A	; 10
    1c3c:	09 d8       	rcall	.-4078   	; 0xc50 <_Z10displayLCDP6Stringii>
      }
      break;
  }
}
    1c3e:	2c 96       	adiw	r28, 0x0c	; 12
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	08 95       	ret

00001c50 <loop>:
/**************************LOOP PROCEDURA************************************/
void loop() {
    1c50:	cf 92       	push	r12
    1c52:	df 92       	push	r13
    1c54:	ef 92       	push	r14
    1c56:	ff 92       	push	r15
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	aa 97       	sbiw	r28, 0x2a	; 42
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61

  switch (stato_procedura) {
    1c70:	e0 91 90 0a 	lds	r30, 0x0A90	; 0x800a90 <stato_procedura>
    1c74:	f0 91 91 0a 	lds	r31, 0x0A91	; 0x800a91 <stato_procedura+0x1>
    1c78:	32 96       	adiw	r30, 0x02	; 2
    1c7a:	eb 30       	cpi	r30, 0x0B	; 11
    1c7c:	f1 05       	cpc	r31, r1
    1c7e:	08 f0       	brcs	.+2      	; 0x1c82 <loop+0x32>
    1c80:	6e c6       	rjmp	.+3292   	; 0x295e <loop+0xd0e>
    1c82:	ea 5b       	subi	r30, 0xBA	; 186
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	0c 94 99 3d 	jmp	0x7b32	; 0x7b32 <__tablejump2__>
    case -2:
      { //cli(); // disable interrupt
        
        printLine();
    1c8a:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
        Serial.print("Parametri CCEC da EEPROM");
    1c8e:	6a e6       	ldi	r22, 0x6A	; 106
    1c90:	76 e0       	ldi	r23, 0x06	; 6
    1c92:	8e e7       	ldi	r24, 0x7E	; 126
    1c94:	9c e0       	ldi	r25, 0x0C	; 12
    1c96:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
    1c9a:	60 91 27 0b 	lds	r22, 0x0B27	; 0x800b27 <ParametriCCEC>
    1c9e:	70 91 28 0b 	lds	r23, 0x0B28	; 0x800b28 <ParametriCCEC+0x1>
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	01 96       	adiw	r24, 0x01	; 1
    1ca6:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN20ParametriCCEC_structC1ERKS_>
    1caa:	be 01       	movw	r22, r28
    1cac:	6f 5f       	subi	r22, 0xFF	; 255
    1cae:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	85 96       	adiw	r24, 0x25	; 37
    1cb4:	0e 94 44 02 	call	0x488	; 0x488 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1cb8:	ce 01       	movw	r24, r28
    1cba:	01 96       	adiw	r24, 0x01	; 1
    1cbc:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN20ParametriCCEC_structD1Ev>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    1cc0:	49 a5       	ldd	r20, Y+41	; 0x29
    1cc2:	5a a5       	ldd	r21, Y+42	; 0x2a
    1cc4:	4f 5f       	subi	r20, 0xFF	; 255
    1cc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	60 e3       	ldi	r22, 0x30	; 48
    1cce:	71 e0       	ldi	r23, 0x01	; 1
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	85 96       	adiw	r24, 0x25	; 37
    1cd4:	0e 94 a9 3b 	call	0x7752	; 0x7752 <_ZNK6String8getBytesEPhjj>
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        printLine();
    1cd8:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
    1cdc:	60 91 27 0b 	lds	r22, 0x0B27	; 0x800b27 <ParametriCCEC>
    1ce0:	70 91 28 0b 	lds	r23, 0x0B28	; 0x800b28 <ParametriCCEC+0x1>
    1ce4:	62 5f       	subi	r22, 0xF2	; 242
    1ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce8:	ce 01       	movw	r24, r28
    1cea:	01 96       	adiw	r24, 0x01	; 1
    1cec:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN20ParametriCCEC_structC1ERKS_>
    1cf0:	be 01       	movw	r22, r28
    1cf2:	6f 5f       	subi	r22, 0xFF	; 255
    1cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	4f 96       	adiw	r24, 0x1f	; 31
    1cfa:	0e 94 44 02 	call	0x488	; 0x488 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1cfe:	ce 01       	movw	r24, r28
    1d00:	01 96       	adiw	r24, 0x01	; 1
    1d02:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN20ParametriCCEC_structD1Ev>
        printLine();
    1d06:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
        String CSEDE = read_eeprom_string_struct(ParametriCCEC[3]);        
    1d0a:	60 91 27 0b 	lds	r22, 0x0B27	; 0x800b27 <ParametriCCEC>
    1d0e:	70 91 28 0b 	lds	r23, 0x0B28	; 0x800b28 <ParametriCCEC+0x1>
    1d12:	66 5d       	subi	r22, 0xD6	; 214
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	ce 01       	movw	r24, r28
    1d18:	01 96       	adiw	r24, 0x01	; 1
    1d1a:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN20ParametriCCEC_structC1ERKS_>
    1d1e:	be 01       	movw	r22, r28
    1d20:	6f 5f       	subi	r22, 0xFF	; 255
    1d22:	7f 4f       	sbci	r23, 0xFF	; 255
    1d24:	ce 01       	movw	r24, r28
    1d26:	47 96       	adiw	r24, 0x17	; 23
    1d28:	0e 94 44 02 	call	0x488	; 0x488 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	01 96       	adiw	r24, 0x01	; 1
    1d30:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN20ParametriCCEC_structD1Ev>
    1d34:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1d36:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1d38:	4f 5f       	subi	r20, 0xFF	; 255
    1d3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	62 e4       	ldi	r22, 0x42	; 66
    1d42:	71 e0       	ldi	r23, 0x01	; 1
    1d44:	ce 01       	movw	r24, r28
    1d46:	47 96       	adiw	r24, 0x17	; 23
    1d48:	0e 94 a9 3b 	call	0x7752	; 0x7752 <_ZNK6String8getBytesEPhjj>
        CSEDE.toCharArray(CodSede,CSEDE.length()+1);
        printLine();
    1d4c:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
        String start_salva = read_eeprom_string_struct(ParametriCCEC[2]);
    1d50:	60 91 27 0b 	lds	r22, 0x0B27	; 0x800b27 <ParametriCCEC>
    1d54:	70 91 28 0b 	lds	r23, 0x0B28	; 0x800b28 <ParametriCCEC+0x1>
    1d58:	64 5e       	subi	r22, 0xE4	; 228
    1d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	01 96       	adiw	r24, 0x01	; 1
    1d60:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN20ParametriCCEC_structC1ERKS_>
    1d64:	be 01       	movw	r22, r28
    1d66:	6f 5f       	subi	r22, 0xFF	; 255
    1d68:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	0f 96       	adiw	r24, 0x0f	; 15
    1d6e:	0e 94 44 02 	call	0x488	; 0x488 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1d72:	ce 01       	movw	r24, r28
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN20ParametriCCEC_structD1Ev>
        printLine();
    1d7a:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
        stato_procedura++;
    1d7e:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <stato_procedura>
    1d82:	90 91 91 0a 	lds	r25, 0x0A91	; 0x800a91 <stato_procedura+0x1>
    1d86:	01 96       	adiw	r24, 0x01	; 1
    1d88:	90 93 91 0a 	sts	0x0A91, r25	; 0x800a91 <stato_procedura+0x1>
    1d8c:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <stato_procedura>
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
        printLine();
        String CSEDE = read_eeprom_string_struct(ParametriCCEC[3]);        
        CSEDE.toCharArray(CodSede,CSEDE.length()+1);
        printLine();
        String start_salva = read_eeprom_string_struct(ParametriCCEC[2]);
    1d90:	ce 01       	movw	r24, r28
    1d92:	0f 96       	adiw	r24, 0x0f	; 15
    1d94:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        printLine();
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
        printLine();
        String CSEDE = read_eeprom_string_struct(ParametriCCEC[3]);        
    1d98:	ce 01       	movw	r24, r28
    1d9a:	47 96       	adiw	r24, 0x17	; 23
    1d9c:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
        printLine();
        Serial.print("Parametri CCEC da EEPROM");
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        printLine();
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
    1da0:	ce 01       	movw	r24, r28
    1da2:	4f 96       	adiw	r24, 0x1f	; 31
    1da4:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    case -2:
      { //cli(); // disable interrupt
        
        printLine();
        Serial.print("Parametri CCEC da EEPROM");
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
    1da8:	ce 01       	movw	r24, r28
    1daa:	85 96       	adiw	r24, 0x25	; 37
    1dac:	d6 c5       	rjmp	.+2988   	; 0x295a <loop+0xd0a>
    1dae:	2f ef       	ldi	r18, 0xFF	; 255
    1db0:	39 ef       	ldi	r19, 0xF9	; 249
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	21 50       	subi	r18, 0x01	; 1
    1db6:	30 40       	sbci	r19, 0x00	; 0
    1db8:	80 40       	sbci	r24, 0x00	; 0
    1dba:	e1 f7       	brne	.-8      	; 0x1db4 <loop+0x164>
    1dbc:	00 c0       	rjmp	.+0      	; 0x1dbe <loop+0x16e>
    1dbe:	00 00       	nop
      }
      break;
    case -1:
      {       
        _delay_ms(20);
        abilitaPulsanti();
    1dc0:	d7 db       	rcall	.-2130   	; 0x1570 <_Z15abilitaPulsantiv>
    1dc2:	9f ef       	ldi	r25, 0xFF	; 255
    1dc4:	29 ef       	ldi	r18, 0xF9	; 249
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	91 50       	subi	r25, 0x01	; 1
    1dca:	20 40       	sbci	r18, 0x00	; 0
    1dcc:	30 40       	sbci	r19, 0x00	; 0
    1dce:	e1 f7       	brne	.-8      	; 0x1dc8 <loop+0x178>
    1dd0:	00 c0       	rjmp	.+0      	; 0x1dd2 <loop+0x182>
        _delay_ms(20);
        abilitaContattiPistola();
    1dd2:	00 00       	nop
    1dd4:	d7 db       	rcall	.-2130   	; 0x1584 <_Z22abilitaContattiPistolav>
    1dd6:	8f ef       	ldi	r24, 0xFF	; 255
    1dd8:	99 ef       	ldi	r25, 0xF9	; 249
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	81 50       	subi	r24, 0x01	; 1
    1dde:	90 40       	sbci	r25, 0x00	; 0
    1de0:	20 40       	sbci	r18, 0x00	; 0
    1de2:	e1 f7       	brne	.-8      	; 0x1ddc <loop+0x18c>
    1de4:	00 c0       	rjmp	.+0      	; 0x1de6 <loop+0x196>
    1de6:	00 00       	nop
        _delay_ms(20);
        stato_procedura++;
    1de8:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <stato_procedura>
    1dec:	90 91 91 0a 	lds	r25, 0x0A91	; 0x800a91 <stato_procedura+0x1>
    1df0:	01 96       	adiw	r24, 0x01	; 1
    1df2:	90 93 91 0a 	sts	0x0A91, r25	; 0x800a91 <stato_procedura+0x1>
    1df6:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <stato_procedura>
      }
      break;
    1dfa:	b1 c5       	rjmp	.+2914   	; 0x295e <loop+0xd0e>
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	83 ed       	ldi	r24, 0xD3	; 211
    1e00:	90 e3       	ldi	r25, 0x30	; 48
    1e02:	31 50       	subi	r19, 0x01	; 1
    1e04:	80 40       	sbci	r24, 0x00	; 0
    1e06:	90 40       	sbci	r25, 0x00	; 0
    1e08:	e1 f7       	brne	.-8      	; 0x1e02 <loop+0x1b2>
    1e0a:	00 c0       	rjmp	.+0      	; 0x1e0c <loop+0x1bc>
    1e0c:	00 00       	nop
    case 0:
      {
        _delay_ms(1000);
        alreadyTimbrata = false;
    1e0e:	10 92 cf 0a 	sts	0x0ACF, r1	; 0x800acf <alreadyTimbrata>
        enable_ETH();
    1e12:	0e 94 91 01 	call	0x322	; 0x322 <_ZL10enable_ETHv>
        /************************************************/
        righeDisplay[1] = " * AUTENTICAZIONE *";
    1e16:	63 e8       	ldi	r22, 0x83	; 131
    1e18:	76 e0       	ldi	r23, 0x06	; 6
    1e1a:	85 e4       	ldi	r24, 0x45	; 69
    1e1c:	9a e0       	ldi	r25, 0x0A	; 10
    1e1e:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
        righeDisplay[2] = "";
    1e22:	68 ed       	ldi	r22, 0xD8	; 216
    1e24:	71 e0       	ldi	r23, 0x01	; 1
    1e26:	8b e4       	ldi	r24, 0x4B	; 75
    1e28:	9a e0       	ldi	r25, 0x0A	; 10
    1e2a:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
        righeDisplay[3] = "    Avvicina ATE  ";
    1e2e:	67 e9       	ldi	r22, 0x97	; 151
    1e30:	76 e0       	ldi	r23, 0x06	; 6
    1e32:	81 e5       	ldi	r24, 0x51	; 81
    1e34:	9a e0       	ldi	r25, 0x0A	; 10
    1e36:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
        displayLCD(righeDisplay, stato_procedura, 50);
    1e3a:	60 91 90 0a 	lds	r22, 0x0A90	; 0x800a90 <stato_procedura>
    1e3e:	70 91 91 0a 	lds	r23, 0x0A91	; 0x800a91 <stato_procedura+0x1>
    1e42:	42 e3       	ldi	r20, 0x32	; 50
    1e44:	50 e0       	ldi	r21, 0x00	; 0
    1e46:	8f e3       	ldi	r24, 0x3F	; 63
    1e48:	9a e0       	ldi	r25, 0x0A	; 10
    1e4a:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z10displayLCDP6Stringii>
        /************************************************/
        stato_procedura++;
    1e4e:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <stato_procedura>
    1e52:	90 91 91 0a 	lds	r25, 0x0A91	; 0x800a91 <stato_procedura+0x1>
    1e56:	01 96       	adiw	r24, 0x01	; 1
    1e58:	90 93 91 0a 	sts	0x0A91, r25	; 0x800a91 <stato_procedura+0x1>
    1e5c:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <stato_procedura>
    1e60:	2f ef       	ldi	r18, 0xFF	; 255
    1e62:	39 e6       	ldi	r19, 0x69	; 105
    1e64:	88 e1       	ldi	r24, 0x18	; 24
    1e66:	21 50       	subi	r18, 0x01	; 1
    1e68:	30 40       	sbci	r19, 0x00	; 0
    1e6a:	80 40       	sbci	r24, 0x00	; 0
    1e6c:	e1 f7       	brne	.-8      	; 0x1e66 <loop+0x216>
    1e6e:	00 c0       	rjmp	.+0      	; 0x1e70 <loop+0x220>
    1e70:	00 00       	nop
    1e72:	75 c5       	rjmp	.+2794   	; 0x295e <loop+0xd0e>
        _delay_ms(500);
      }
      break;
    case 1:
      {
        TARGA = "";
    1e74:	68 ed       	ldi	r22, 0xD8	; 216
    1e76:	71 e0       	ldi	r23, 0x01	; 1
    1e78:	89 ee       	ldi	r24, 0xE9	; 233
    1e7a:	99 e0       	ldi	r25, 0x09	; 9
    1e7c:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
        KM = "";
    1e80:	68 ed       	ldi	r22, 0xD8	; 216
    1e82:	71 e0       	ldi	r23, 0x01	; 1
    1e84:	83 ee       	ldi	r24, 0xE3	; 227
    1e86:	99 e0       	ldi	r25, 0x09	; 9
    1e88:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>

        /*****************************************************/
        String ATe = "ERRORE";
    1e8c:	6f e9       	ldi	r22, 0x9F	; 159
    1e8e:	72 e0       	ldi	r23, 0x02	; 2
    1e90:	ce 01       	movw	r24, r28
    1e92:	0f 96       	adiw	r24, 0x0f	; 15
    1e94:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
        
        if (!alreadyTimbrata) {
    1e98:	80 91 cf 0a 	lds	r24, 0x0ACF	; 0x800acf <alreadyTimbrata>
    1e9c:	81 11       	cpse	r24, r1
    1e9e:	15 c0       	rjmp	.+42     	; 0x1eca <loop+0x27a>
          ATe = GetCodeRfidATe();
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	19 d9       	rcall	.-3534   	; 0x10d8 <_Z14GetCodeRfidATev>
    1ea6:	be 01       	movw	r22, r28
    1ea8:	6f 5f       	subi	r22, 0xFF	; 255
    1eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1eac:	ce 01       	movw	r24, r28
    1eae:	0f 96       	adiw	r24, 0x0f	; 15
    1eb0:	0e 94 f6 39 	call	0x73ec	; 0x73ec <_ZN6StringaSEOS_>
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	01 96       	adiw	r24, 0x01	; 1
    1eb8:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
          Buzzer(2, 100);
    1ebc:	44 e6       	ldi	r20, 0x64	; 100
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	60 e0       	ldi	r22, 0x00	; 0
    1ec2:	70 e0       	ldi	r23, 0x00	; 0
    1ec4:	82 e0       	ldi	r24, 0x02	; 2
    1ec6:	0e 94 24 05 	call	0xa48	; 0xa48 <_Z6Buzzerhm>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    1eca:	6f e9       	ldi	r22, 0x9F	; 159
    1ecc:	72 e0       	ldi	r23, 0x02	; 2
    1ece:	ce 01       	movw	r24, r28
    1ed0:	0f 96       	adiw	r24, 0x0f	; 15
    1ed2:	0e 94 8b 3b 	call	0x7716	; 0x7716 <_ZNK6String6equalsEPKc>
        }

        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC, 4)))
    1ed6:	81 11       	cpse	r24, r1
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <loop+0x28e>
    1eda:	44 9b       	sbis	0x08, 4	; 8
    1edc:	7f c5       	rjmp	.+2814   	; 0x29dc <loop+0xd8c>
          _delay_ms(1000); // tempo per inizializzare la ethernet
        }

        // Effettua chiamata REST per validare CARD NFC
        
        righeDisplay[1] =  "** TARGA MEZZO **";
    1ede:	6a ec       	ldi	r22, 0xCA	; 202
    1ee0:	75 e0       	ldi	r23, 0x05	; 5
    1ee2:	85 e4       	ldi	r24, 0x45	; 69
    1ee4:	9a e0       	ldi	r25, 0x0A	; 10
    1ee6:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
        righeDisplay[2] = "TARGA:";
    1eea:	6c ed       	ldi	r22, 0xDC	; 220
    1eec:	75 e0       	ldi	r23, 0x05	; 5
    1eee:	8b e4       	ldi	r24, 0x4B	; 75
    1ef0:	9a e0       	ldi	r25, 0x0A	; 10
    1ef2:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
        righeDisplay[3] = "#:Conferma *:Usa TAG";
    1ef6:	63 ee       	ldi	r22, 0xE3	; 227
    1ef8:	75 e0       	ldi	r23, 0x05	; 5
    1efa:	81 e5       	ldi	r24, 0x51	; 81
    1efc:	9a e0       	ldi	r25, 0x0A	; 10
    1efe:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>

        // bool GetAteCheck(int Port, char serverREST[], EthernetClient ClientHTTP, String _idAte)

        if (1) // (GetAteCheck(80,serverREST,clientATE,ATe)) 
        {
                SET_BIT(PORTC,PC4);
    1f02:	44 9a       	sbi	0x08, 4	; 8
                RaccoltaDati[5] = "000";               
    1f04:	6a ea       	ldi	r22, 0xAA	; 170
    1f06:	76 e0       	ldi	r23, 0x06	; 6
    1f08:	81 e8       	ldi	r24, 0x81	; 129
    1f0a:	9a e0       	ldi	r25, 0x0A	; 10
    1f0c:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
                Buzzer(1,200);
    1f10:	48 ec       	ldi	r20, 0xC8	; 200
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	0e 94 24 05 	call	0xa48	; 0xa48 <_Z6Buzzerhm>
    1f1e:	9f ef       	ldi	r25, 0xFF	; 255
    1f20:	20 e7       	ldi	r18, 0x70	; 112
    1f22:	32 e0       	ldi	r19, 0x02	; 2
    1f24:	91 50       	subi	r25, 0x01	; 1
    1f26:	20 40       	sbci	r18, 0x00	; 0
    1f28:	30 40       	sbci	r19, 0x00	; 0
    1f2a:	e1 f7       	brne	.-8      	; 0x1f24 <loop+0x2d4>
    1f2c:	00 c0       	rjmp	.+0      	; 0x1f2e <loop+0x2de>
    1f2e:	00 00       	nop
                _delay_ms(50);
                avanzaStato(TinputTarga);
    1f30:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <TinputTarga>
    1f34:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <TinputTarga+0x1>
    1f38:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <TinputTarga+0x2>
    1f3c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <TinputTarga+0x3>
    1f40:	ec c5       	rjmp	.+3032   	; 0x2b1a <loop+0xeca>
         }      
      }
      break;
    case 2:
      {
        lcd.setCursor(0, 0);
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	87 eb       	ldi	r24, 0xB7	; 183
    1f48:	9a e0       	ldi	r25, 0x0A	; 10
    1f4a:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    1f4e:	61 e0       	ldi	r22, 0x01	; 1
    1f50:	87 eb       	ldi	r24, 0xB7	; 183
    1f52:	9a e0       	ldi	r25, 0x0A	; 10
    1f54:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    1f58:	40 91 f9 09 	lds	r20, 0x09F9	; 0x8009f9 <UltimoPassaggioStato>
    1f5c:	50 91 fa 09 	lds	r21, 0x09FA	; 0x8009fa <UltimoPassaggioStato+0x1>
    1f60:	60 91 fb 09 	lds	r22, 0x09FB	; 0x8009fb <UltimoPassaggioStato+0x2>
    1f64:	70 91 fc 09 	lds	r23, 0x09FC	; 0x8009fc <UltimoPassaggioStato+0x3>
    1f68:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <Timer>
    1f6c:	90 91 f6 09 	lds	r25, 0x09F6	; 0x8009f6 <Timer+0x1>
    1f70:	a0 91 f7 09 	lds	r26, 0x09F7	; 0x8009f7 <Timer+0x2>
    1f74:	b0 91 f8 09 	lds	r27, 0x09F8	; 0x8009f8 <Timer+0x3>
    1f78:	48 0f       	add	r20, r24
    1f7a:	59 1f       	adc	r21, r25
    1f7c:	6a 1f       	adc	r22, r26
    1f7e:	7b 1f       	adc	r23, r27
    1f80:	41 50       	subi	r20, 0x01	; 1
    1f82:	51 09       	sbc	r21, r1
    1f84:	61 09       	sbc	r22, r1
    1f86:	71 09       	sbc	r23, r1
    1f88:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <secs>
    1f8c:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <secs+0x1>
    1f90:	a0 91 ff 09 	lds	r26, 0x09FF	; 0x8009ff <secs+0x2>
    1f94:	b0 91 00 0a 	lds	r27, 0x0A00	; 0x800a00 <secs+0x3>
    1f98:	48 1b       	sub	r20, r24
    1f9a:	59 0b       	sbc	r21, r25
    1f9c:	6a 0b       	sbc	r22, r26
    1f9e:	7b 0b       	sbc	r23, r27
    1fa0:	2a e0       	ldi	r18, 0x0A	; 10
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	0f 96       	adiw	r24, 0x0f	; 15
    1fa6:	0e 94 ac 3a 	call	0x7558	; 0x7558 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1faa:	60 ed       	ldi	r22, 0xD0	; 208
    1fac:	76 e0       	ldi	r23, 0x06	; 6
    1fae:	ce 01       	movw	r24, r28
    1fb0:	01 96       	adiw	r24, 0x01	; 1
    1fb2:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    1fb6:	be 01       	movw	r22, r28
    1fb8:	61 5f       	subi	r22, 0xF1	; 241
    1fba:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	01 96       	adiw	r24, 0x01	; 1
    1fc0:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    1fc4:	6e ea       	ldi	r22, 0xAE	; 174
    1fc6:	76 e0       	ldi	r23, 0x06	; 6
    1fc8:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <_ZplRK15StringSumHelperPKc>
    1fcc:	bc 01       	movw	r22, r24
    1fce:	87 eb       	ldi	r24, 0xB7	; 183
    1fd0:	9a e0       	ldi	r25, 0x0A	; 10
    1fd2:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	01 96       	adiw	r24, 0x01	; 1
    1fda:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    1fde:	ce 01       	movw	r24, r28
    1fe0:	0f 96       	adiw	r24, 0x0f	; 15
    1fe2:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
        // da commentare
        // Carburante = "D"; // Simulo Abilitazione Diesel
        // da commentare
        // Carburante = "B"; // Simulo Abilitazione Benzina
        /*****************************************************************/
        gpio.setCONFREG(0x3C);
    1fe6:	6c e3       	ldi	r22, 0x3C	; 60
    1fe8:	80 ee       	ldi	r24, 0xE0	; 224
    1fea:	99 e0       	ldi	r25, 0x09	; 9
    1fec:	0e 94 89 1b 	call	0x3712	; 0x3712 <_ZN7PCA953410setCONFREGEh>
        uint8_t c = gpio.Read_IP_REGISTER();
    1ff0:	80 ee       	ldi	r24, 0xE0	; 224
    1ff2:	99 e0       	ldi	r25, 0x09	; 9
    1ff4:	0e 94 a0 1b 	call	0x3740	; 0x3740 <_ZN7PCA953416Read_IP_REGISTEREv>
    1ff8:	e8 2e       	mov	r14, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1ffa:	42 e0       	ldi	r20, 0x02	; 2
    1ffc:	be 01       	movw	r22, r28
    1ffe:	69 5e       	subi	r22, 0xE9	; 233
    2000:	7f 4f       	sbci	r23, 0xFF	; 255
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	0e 94 56 40 	call	0x80ac	; 0x80ac <__itoa_ncheck>
        char buf[8];
        itoa(c, buf, 2);
        gpio.setCONFREG(0xC3);
    2008:	63 ec       	ldi	r22, 0xC3	; 195
    200a:	80 ee       	ldi	r24, 0xE0	; 224
    200c:	99 e0       	ldi	r25, 0x09	; 9
    200e:	0e 94 89 1b 	call	0x3712	; 0x3712 <_ZN7PCA953410setCONFREGEh>
        uint8_t r = gpio.Read_IP_REGISTER();
    2012:	80 ee       	ldi	r24, 0xE0	; 224
    2014:	99 e0       	ldi	r25, 0x09	; 9
    2016:	0e 94 a0 1b 	call	0x3740	; 0x3740 <_ZN7PCA953416Read_IP_REGISTEREv>
    201a:	f8 2e       	mov	r15, r24
    201c:	42 e0       	ldi	r20, 0x02	; 2
    201e:	be 01       	movw	r22, r28
    2020:	61 5f       	subi	r22, 0xF1	; 241
    2022:	7f 4f       	sbci	r23, 0xFF	; 255
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	0e 94 56 40 	call	0x80ac	; 0x80ac <__itoa_ncheck>
        char bufr[8];
        itoa(r, bufr, 2);
        char ris[8];
        uint8_t z = (r ^ c);
        itoa(z, ris, 2);
    202a:	fe 24       	eor	r15, r14
    202c:	ef 2c       	mov	r14, r15
    202e:	f1 2c       	mov	r15, r1
    2030:	42 e0       	ldi	r20, 0x02	; 2
    2032:	be 01       	movw	r22, r28
    2034:	6f 5f       	subi	r22, 0xFF	; 255
    2036:	7f 4f       	sbci	r23, 0xFF	; 255
    2038:	c7 01       	movw	r24, r14
    203a:	0e 94 56 40 	call	0x80ac	; 0x80ac <__itoa_ncheck>
        char T = getCharKeypad(int(z));
    203e:	c7 01       	movw	r24, r14
    2040:	0e 94 42 05 	call	0xa84	; 0xa84 <_Z13getCharKeypadi>
    2044:	9f ef       	ldi	r25, 0xFF	; 255
    2046:	29 ef       	ldi	r18, 0xF9	; 249
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	91 50       	subi	r25, 0x01	; 1
    204c:	20 40       	sbci	r18, 0x00	; 0
    204e:	30 40       	sbci	r19, 0x00	; 0
    2050:	e1 f7       	brne	.-8      	; 0x204a <loop+0x3fa>
    2052:	00 c0       	rjmp	.+0      	; 0x2054 <loop+0x404>
        _delay_ms(20);
        /*****************************************************************/
        inputTarga(T);
    2054:	00 00       	nop
    2056:	14 dc       	rcall	.-2008   	; 0x1880 <_Z10inputTargac>
      }
      break;
    2058:	82 c4       	rjmp	.+2308   	; 0x295e <loop+0xd0e>
    case 3:
      {
        lcd.setCursor(0, 0);
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	87 eb       	ldi	r24, 0xB7	; 183
    2060:	9a e0       	ldi	r25, 0x0A	; 10
    2062:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    2066:	61 e0       	ldi	r22, 0x01	; 1
    2068:	87 eb       	ldi	r24, 0xB7	; 183
    206a:	9a e0       	ldi	r25, 0x0A	; 10
    206c:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    2070:	40 91 f9 09 	lds	r20, 0x09F9	; 0x8009f9 <UltimoPassaggioStato>
    2074:	50 91 fa 09 	lds	r21, 0x09FA	; 0x8009fa <UltimoPassaggioStato+0x1>
    2078:	60 91 fb 09 	lds	r22, 0x09FB	; 0x8009fb <UltimoPassaggioStato+0x2>
    207c:	70 91 fc 09 	lds	r23, 0x09FC	; 0x8009fc <UltimoPassaggioStato+0x3>
    2080:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <Timer>
    2084:	90 91 f6 09 	lds	r25, 0x09F6	; 0x8009f6 <Timer+0x1>
    2088:	a0 91 f7 09 	lds	r26, 0x09F7	; 0x8009f7 <Timer+0x2>
    208c:	b0 91 f8 09 	lds	r27, 0x09F8	; 0x8009f8 <Timer+0x3>
    2090:	48 0f       	add	r20, r24
    2092:	59 1f       	adc	r21, r25
    2094:	6a 1f       	adc	r22, r26
    2096:	7b 1f       	adc	r23, r27
    2098:	41 50       	subi	r20, 0x01	; 1
    209a:	51 09       	sbc	r21, r1
    209c:	61 09       	sbc	r22, r1
    209e:	71 09       	sbc	r23, r1
    20a0:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <secs>
    20a4:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <secs+0x1>
    20a8:	a0 91 ff 09 	lds	r26, 0x09FF	; 0x8009ff <secs+0x2>
    20ac:	b0 91 00 0a 	lds	r27, 0x0A00	; 0x800a00 <secs+0x3>
    20b0:	48 1b       	sub	r20, r24
    20b2:	59 0b       	sbc	r21, r25
    20b4:	6a 0b       	sbc	r22, r26
    20b6:	7b 0b       	sbc	r23, r27
    20b8:	2a e0       	ldi	r18, 0x0A	; 10
    20ba:	ce 01       	movw	r24, r28
    20bc:	0f 96       	adiw	r24, 0x0f	; 15
    20be:	0e 94 ac 3a 	call	0x7558	; 0x7558 <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    20c2:	60 ed       	ldi	r22, 0xD0	; 208
    20c4:	76 e0       	ldi	r23, 0x06	; 6
    20c6:	ce 01       	movw	r24, r28
    20c8:	01 96       	adiw	r24, 0x01	; 1
    20ca:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    20ce:	be 01       	movw	r22, r28
    20d0:	61 5f       	subi	r22, 0xF1	; 241
    20d2:	7f 4f       	sbci	r23, 0xFF	; 255
    20d4:	ce 01       	movw	r24, r28
    20d6:	01 96       	adiw	r24, 0x01	; 1
    20d8:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    20dc:	6e ea       	ldi	r22, 0xAE	; 174
    20de:	76 e0       	ldi	r23, 0x06	; 6
    20e0:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <_ZplRK15StringSumHelperPKc>
    20e4:	bc 01       	movw	r22, r24
    20e6:	87 eb       	ldi	r24, 0xB7	; 183
    20e8:	9a e0       	ldi	r25, 0x0A	; 10
    20ea:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    20ee:	ce 01       	movw	r24, r28
    20f0:	01 96       	adiw	r24, 0x01	; 1
    20f2:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    20f6:	ce 01       	movw	r24, r28
    20f8:	0f 96       	adiw	r24, 0x0f	; 15
    20fa:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>

        if (TARGA.length() == 5)
    20fe:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <TARGA+0x4>
    2102:	90 91 ee 09 	lds	r25, 0x09EE	; 0x8009ee <TARGA+0x5>
    2106:	05 97       	sbiw	r24, 0x05	; 5
    2108:	e9 f4       	brne	.+58     	; 0x2144 <loop+0x4f4>
        {
          mezzo.Carb = "X";
    210a:	6d e2       	ldi	r22, 0x2D	; 45
    210c:	75 e0       	ldi	r23, 0x05	; 5
    210e:	89 ed       	ldi	r24, 0xD9	; 217
    2110:	9a e0       	ldi	r25, 0x0A	; 10
    2112:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          mezzo.TARGA = TARGA;
    2116:	69 ee       	ldi	r22, 0xE9	; 233
    2118:	79 e0       	ldi	r23, 0x09	; 9
    211a:	8f ed       	ldi	r24, 0xDF	; 223
    211c:	9a e0       	ldi	r25, 0x0A	; 10
    211e:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
          mezzo.KM = "0";
    2122:	65 e5       	ldi	r22, 0x55	; 85
    2124:	76 e0       	ldi	r23, 0x06	; 6
    2126:	85 ee       	ldi	r24, 0xE5	; 229
    2128:	9a e0       	ldi	r25, 0x0A	; 10
    212a:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          distr_selezionato = 0;
    212e:	10 92 8d 0a 	sts	0x0A8D, r1	; 0x800a8d <distr_selezionato>
          avanzaStato(TselDistributore);
    2132:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    2136:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    213a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    213e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    2142:	cb c5       	rjmp	.+2966   	; 0x2cda <loop+0x108a>
        }
        else {
          String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	ce 01       	movw	r24, r28
    2148:	0f 96       	adiw	r24, 0x0f	; 15
    214a:	0e 94 89 07 	call	0xf12	; 0xf12 <_Z14leggiTAG_Mezzob>
    214e:	8f e3       	ldi	r24, 0x3F	; 63
    2150:	9c e9       	ldi	r25, 0x9C	; 156
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <loop+0x502>
    2156:	00 c0       	rjmp	.+0      	; 0x2158 <loop+0x508>
    2158:	00 00       	nop
          _delay_ms(10);

          Serial.println(mezzoString);
    215a:	be 01       	movw	r22, r28
    215c:	61 5f       	subi	r22, 0xF1	; 241
    215e:	7f 4f       	sbci	r23, 0xFF	; 255
    2160:	8e e7       	ldi	r24, 0x7E	; 126
    2162:	9c e0       	ldi	r25, 0x0C	; 12
    2164:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    2168:	2b 89       	ldd	r18, Y+19	; 0x13
    216a:	3c 89       	ldd	r19, Y+20	; 0x14
    216c:	45 e0       	ldi	r20, 0x05	; 5
    216e:	50 e0       	ldi	r21, 0x00	; 0
    2170:	be 01       	movw	r22, r28
    2172:	61 5f       	subi	r22, 0xF1	; 241
    2174:	7f 4f       	sbci	r23, 0xFF	; 255
    2176:	ce 01       	movw	r24, r28
    2178:	01 96       	adiw	r24, 0x01	; 1
    217a:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <_ZNK6String9substringEjj>

          mezzo.Carb = mezzoString.substring(5);
    217e:	be 01       	movw	r22, r28
    2180:	6f 5f       	subi	r22, 0xFF	; 255
    2182:	7f 4f       	sbci	r23, 0xFF	; 255
    2184:	89 ed       	ldi	r24, 0xD9	; 217
    2186:	9a e0       	ldi	r25, 0x0A	; 10
    2188:	0e 94 f6 39 	call	0x73ec	; 0x73ec <_ZN6StringaSEOS_>
    218c:	ce 01       	movw	r24, r28
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
          mezzo.TARGA = mezzoString.substring(0, 5);
    2194:	25 e0       	ldi	r18, 0x05	; 5
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	50 e0       	ldi	r21, 0x00	; 0
    219c:	be 01       	movw	r22, r28
    219e:	61 5f       	subi	r22, 0xF1	; 241
    21a0:	7f 4f       	sbci	r23, 0xFF	; 255
    21a2:	ce 01       	movw	r24, r28
    21a4:	01 96       	adiw	r24, 0x01	; 1
    21a6:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <_ZNK6String9substringEjj>
    21aa:	be 01       	movw	r22, r28
    21ac:	6f 5f       	subi	r22, 0xFF	; 255
    21ae:	7f 4f       	sbci	r23, 0xFF	; 255
    21b0:	8f ed       	ldi	r24, 0xDF	; 223
    21b2:	9a e0       	ldi	r25, 0x0A	; 10
    21b4:	0e 94 f6 39 	call	0x73ec	; 0x73ec <_ZN6StringaSEOS_>
    21b8:	ce 01       	movw	r24, r28
    21ba:	01 96       	adiw	r24, 0x01	; 1
    21bc:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
          mezzo.KM = "0";
    21c0:	65 e5       	ldi	r22, 0x55	; 85
    21c2:	76 e0       	ldi	r23, 0x06	; 6
    21c4:	85 ee       	ldi	r24, 0xE5	; 229
    21c6:	9a e0       	ldi	r25, 0x0A	; 10
    21c8:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    21cc:	64 eb       	ldi	r22, 0xB4	; 180
    21ce:	76 e0       	ldi	r23, 0x06	; 6
    21d0:	ce 01       	movw	r24, r28
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>

          Serial.println("TIPO CARBURANTE: " + mezzo.Carb);
    21d8:	69 ed       	ldi	r22, 0xD9	; 217
    21da:	7a e0       	ldi	r23, 0x0A	; 10
    21dc:	ce 01       	movw	r24, r28
    21de:	01 96       	adiw	r24, 0x01	; 1
    21e0:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    21e4:	bc 01       	movw	r22, r24
    21e6:	8e e7       	ldi	r24, 0x7E	; 126
    21e8:	9c e0       	ldi	r25, 0x0C	; 12
    21ea:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    21ee:	ce 01       	movw	r24, r28
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    21f6:	66 ec       	ldi	r22, 0xC6	; 198
    21f8:	76 e0       	ldi	r23, 0x06	; 6
    21fa:	ce 01       	movw	r24, r28
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
          Serial.println("TARGA: " + mezzo.TARGA);
    2202:	6f ed       	ldi	r22, 0xDF	; 223
    2204:	7a e0       	ldi	r23, 0x0A	; 10
    2206:	ce 01       	movw	r24, r28
    2208:	01 96       	adiw	r24, 0x01	; 1
    220a:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    220e:	bc 01       	movw	r22, r24
    2210:	8e e7       	ldi	r24, 0x7E	; 126
    2212:	9c e0       	ldi	r25, 0x0C	; 12
    2214:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2218:	ce 01       	movw	r24, r28
    221a:	01 96       	adiw	r24, 0x01	; 1
    221c:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2220:	65 eb       	ldi	r22, 0xB5	; 181
    2222:	75 e0       	ldi	r23, 0x05	; 5
    2224:	89 ed       	ldi	r24, 0xD9	; 217
    2226:	9a e0       	ldi	r25, 0x0A	; 10
    2228:	0e 94 8b 3b 	call	0x7716	; 0x7716 <_ZNK6String6equalsEPKc>

          // Carburante = mezzo.Carb;
          if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    222c:	81 11       	cpse	r24, r1
    222e:	41 c4       	rjmp	.+2178   	; 0x2ab2 <loop+0xe62>
    2230:	63 eb       	ldi	r22, 0xB3	; 179
    2232:	75 e0       	ldi	r23, 0x05	; 5
    2234:	89 ed       	ldi	r24, 0xD9	; 217
    2236:	9a e0       	ldi	r25, 0x0A	; 10
    2238:	0e 94 8b 3b 	call	0x7716	; 0x7716 <_ZNK6String6equalsEPKc>
    223c:	81 11       	cpse	r24, r1
    223e:	39 c4       	rjmp	.+2162   	; 0x2ab2 <loop+0xe62>
          mezzo.KM = "0";
          distr_selezionato = 0;
          avanzaStato(TselDistributore);
        }
        else {
          String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    2240:	ce 01       	movw	r24, r28
    2242:	0f 96       	adiw	r24, 0x0f	; 15
    2244:	8a c3       	rjmp	.+1812   	; 0x295a <loop+0xd0a>
        }
      }
      break;
    case 4:
      {
        lcd.setCursor(0, 0);
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	60 e0       	ldi	r22, 0x00	; 0
    224a:	87 eb       	ldi	r24, 0xB7	; 183
    224c:	9a e0       	ldi	r25, 0x0A	; 10
    224e:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    2252:	61 e0       	ldi	r22, 0x01	; 1
    2254:	87 eb       	ldi	r24, 0xB7	; 183
    2256:	9a e0       	ldi	r25, 0x0A	; 10
    2258:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    225c:	40 91 f9 09 	lds	r20, 0x09F9	; 0x8009f9 <UltimoPassaggioStato>
    2260:	50 91 fa 09 	lds	r21, 0x09FA	; 0x8009fa <UltimoPassaggioStato+0x1>
    2264:	60 91 fb 09 	lds	r22, 0x09FB	; 0x8009fb <UltimoPassaggioStato+0x2>
    2268:	70 91 fc 09 	lds	r23, 0x09FC	; 0x8009fc <UltimoPassaggioStato+0x3>
    226c:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <Timer>
    2270:	90 91 f6 09 	lds	r25, 0x09F6	; 0x8009f6 <Timer+0x1>
    2274:	a0 91 f7 09 	lds	r26, 0x09F7	; 0x8009f7 <Timer+0x2>
    2278:	b0 91 f8 09 	lds	r27, 0x09F8	; 0x8009f8 <Timer+0x3>
    227c:	48 0f       	add	r20, r24
    227e:	59 1f       	adc	r21, r25
    2280:	6a 1f       	adc	r22, r26
    2282:	7b 1f       	adc	r23, r27
    2284:	41 50       	subi	r20, 0x01	; 1
    2286:	51 09       	sbc	r21, r1
    2288:	61 09       	sbc	r22, r1
    228a:	71 09       	sbc	r23, r1
    228c:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <secs>
    2290:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <secs+0x1>
    2294:	a0 91 ff 09 	lds	r26, 0x09FF	; 0x8009ff <secs+0x2>
    2298:	b0 91 00 0a 	lds	r27, 0x0A00	; 0x800a00 <secs+0x3>
    229c:	48 1b       	sub	r20, r24
    229e:	59 0b       	sbc	r21, r25
    22a0:	6a 0b       	sbc	r22, r26
    22a2:	7b 0b       	sbc	r23, r27
    22a4:	2a e0       	ldi	r18, 0x0A	; 10
    22a6:	ce 01       	movw	r24, r28
    22a8:	0f 96       	adiw	r24, 0x0f	; 15
    22aa:	0e 94 ac 3a 	call	0x7558	; 0x7558 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    22ae:	60 ed       	ldi	r22, 0xD0	; 208
    22b0:	76 e0       	ldi	r23, 0x06	; 6
    22b2:	ce 01       	movw	r24, r28
    22b4:	01 96       	adiw	r24, 0x01	; 1
    22b6:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    22ba:	be 01       	movw	r22, r28
    22bc:	61 5f       	subi	r22, 0xF1	; 241
    22be:	7f 4f       	sbci	r23, 0xFF	; 255
    22c0:	ce 01       	movw	r24, r28
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    22c8:	6e ea       	ldi	r22, 0xAE	; 174
    22ca:	76 e0       	ldi	r23, 0x06	; 6
    22cc:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <_ZplRK15StringSumHelperPKc>
    22d0:	bc 01       	movw	r22, r24
    22d2:	87 eb       	ldi	r24, 0xB7	; 183
    22d4:	9a e0       	ldi	r25, 0x0A	; 10
    22d6:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    22da:	ce 01       	movw	r24, r28
    22dc:	01 96       	adiw	r24, 0x01	; 1
    22de:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    22e2:	ce 01       	movw	r24, r28
    22e4:	0f 96       	adiw	r24, 0x0f	; 15
    22e6:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    22ea:	65 eb       	ldi	r22, 0xB5	; 181
    22ec:	75 e0       	ldi	r23, 0x05	; 5
    22ee:	89 ed       	ldi	r24, 0xD9	; 217
    22f0:	9a e0       	ldi	r25, 0x0A	; 10
    22f2:	0e 94 8b 3b 	call	0x7716	; 0x7716 <_ZNK6String6equalsEPKc>

        // Verifica scelta distributore

        if ((mezzo.Carb == "B") || (distr_selezionato == 2))
    22f6:	81 11       	cpse	r24, r1
    22f8:	21 c4       	rjmp	.+2114   	; 0x2b3c <loop+0xeec>
    22fa:	80 91 8d 0a 	lds	r24, 0x0A8D	; 0x800a8d <distr_selezionato>
    22fe:	82 30       	cpi	r24, 0x02	; 2
    2300:	09 f0       	breq	.+2      	; 0x2304 <loop+0x6b4>
    2302:	0e c4       	rjmp	.+2076   	; 0x2b20 <loop+0xed0>
    2304:	1b c4       	rjmp	.+2102   	; 0x2b3c <loop+0xeec>
        }
      }
      break;
    case 5:
      {
        lcd.setCursor(0, 0);
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	60 e0       	ldi	r22, 0x00	; 0
    230a:	87 eb       	ldi	r24, 0xB7	; 183
    230c:	9a e0       	ldi	r25, 0x0A	; 10
    230e:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    2312:	61 e0       	ldi	r22, 0x01	; 1
    2314:	87 eb       	ldi	r24, 0xB7	; 183
    2316:	9a e0       	ldi	r25, 0x0A	; 10
    2318:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    231c:	40 91 f9 09 	lds	r20, 0x09F9	; 0x8009f9 <UltimoPassaggioStato>
    2320:	50 91 fa 09 	lds	r21, 0x09FA	; 0x8009fa <UltimoPassaggioStato+0x1>
    2324:	60 91 fb 09 	lds	r22, 0x09FB	; 0x8009fb <UltimoPassaggioStato+0x2>
    2328:	70 91 fc 09 	lds	r23, 0x09FC	; 0x8009fc <UltimoPassaggioStato+0x3>
    232c:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <Timer>
    2330:	90 91 f6 09 	lds	r25, 0x09F6	; 0x8009f6 <Timer+0x1>
    2334:	a0 91 f7 09 	lds	r26, 0x09F7	; 0x8009f7 <Timer+0x2>
    2338:	b0 91 f8 09 	lds	r27, 0x09F8	; 0x8009f8 <Timer+0x3>
    233c:	48 0f       	add	r20, r24
    233e:	59 1f       	adc	r21, r25
    2340:	6a 1f       	adc	r22, r26
    2342:	7b 1f       	adc	r23, r27
    2344:	41 50       	subi	r20, 0x01	; 1
    2346:	51 09       	sbc	r21, r1
    2348:	61 09       	sbc	r22, r1
    234a:	71 09       	sbc	r23, r1
    234c:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <secs>
    2350:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <secs+0x1>
    2354:	a0 91 ff 09 	lds	r26, 0x09FF	; 0x8009ff <secs+0x2>
    2358:	b0 91 00 0a 	lds	r27, 0x0A00	; 0x800a00 <secs+0x3>
    235c:	48 1b       	sub	r20, r24
    235e:	59 0b       	sbc	r21, r25
    2360:	6a 0b       	sbc	r22, r26
    2362:	7b 0b       	sbc	r23, r27
    2364:	2a e0       	ldi	r18, 0x0A	; 10
    2366:	ce 01       	movw	r24, r28
    2368:	0f 96       	adiw	r24, 0x0f	; 15
    236a:	0e 94 ac 3a 	call	0x7558	; 0x7558 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    236e:	60 ed       	ldi	r22, 0xD0	; 208
    2370:	76 e0       	ldi	r23, 0x06	; 6
    2372:	ce 01       	movw	r24, r28
    2374:	01 96       	adiw	r24, 0x01	; 1
    2376:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    237a:	be 01       	movw	r22, r28
    237c:	61 5f       	subi	r22, 0xF1	; 241
    237e:	7f 4f       	sbci	r23, 0xFF	; 255
    2380:	ce 01       	movw	r24, r28
    2382:	01 96       	adiw	r24, 0x01	; 1
    2384:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    2388:	6e ea       	ldi	r22, 0xAE	; 174
    238a:	76 e0       	ldi	r23, 0x06	; 6
    238c:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <_ZplRK15StringSumHelperPKc>
    2390:	bc 01       	movw	r22, r24
    2392:	87 eb       	ldi	r24, 0xB7	; 183
    2394:	9a e0       	ldi	r25, 0x0A	; 10
    2396:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    239a:	ce 01       	movw	r24, r28
    239c:	01 96       	adiw	r24, 0x01	; 1
    239e:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    23a2:	ce 01       	movw	r24, r28
    23a4:	0f 96       	adiw	r24, 0x0f	; 15
    23a6:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
        // RaccoltaDati[4] = "1234";        
        /*****************************************************************/
        gpio.setCONFREG(0x3C);
    23aa:	6c e3       	ldi	r22, 0x3C	; 60
    23ac:	80 ee       	ldi	r24, 0xE0	; 224
    23ae:	99 e0       	ldi	r25, 0x09	; 9
    23b0:	0e 94 89 1b 	call	0x3712	; 0x3712 <_ZN7PCA953410setCONFREGEh>
        uint8_t c = gpio.Read_IP_REGISTER();
    23b4:	80 ee       	ldi	r24, 0xE0	; 224
    23b6:	99 e0       	ldi	r25, 0x09	; 9
    23b8:	0e 94 a0 1b 	call	0x3740	; 0x3740 <_ZN7PCA953416Read_IP_REGISTEREv>
    23bc:	e8 2e       	mov	r14, r24
    23be:	42 e0       	ldi	r20, 0x02	; 2
    23c0:	be 01       	movw	r22, r28
    23c2:	69 5e       	subi	r22, 0xE9	; 233
    23c4:	7f 4f       	sbci	r23, 0xFF	; 255
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0e 94 56 40 	call	0x80ac	; 0x80ac <__itoa_ncheck>
        char buf[8];
        itoa(c, buf, 2);
        gpio.setCONFREG(0xC3);
    23cc:	63 ec       	ldi	r22, 0xC3	; 195
    23ce:	80 ee       	ldi	r24, 0xE0	; 224
    23d0:	99 e0       	ldi	r25, 0x09	; 9
    23d2:	0e 94 89 1b 	call	0x3712	; 0x3712 <_ZN7PCA953410setCONFREGEh>
        uint8_t r = gpio.Read_IP_REGISTER();
    23d6:	80 ee       	ldi	r24, 0xE0	; 224
    23d8:	99 e0       	ldi	r25, 0x09	; 9
    23da:	0e 94 a0 1b 	call	0x3740	; 0x3740 <_ZN7PCA953416Read_IP_REGISTEREv>
    23de:	f8 2e       	mov	r15, r24
    23e0:	42 e0       	ldi	r20, 0x02	; 2
    23e2:	be 01       	movw	r22, r28
    23e4:	61 5f       	subi	r22, 0xF1	; 241
    23e6:	7f 4f       	sbci	r23, 0xFF	; 255
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0e 94 56 40 	call	0x80ac	; 0x80ac <__itoa_ncheck>
        char bufr[8];
        itoa(r, bufr, 2);
        char ris[8];
        uint8_t z = (r ^ c);
        itoa(z, ris, 2);
    23ee:	fe 24       	eor	r15, r14
    23f0:	ef 2c       	mov	r14, r15
    23f2:	f1 2c       	mov	r15, r1
    23f4:	42 e0       	ldi	r20, 0x02	; 2
    23f6:	be 01       	movw	r22, r28
    23f8:	6f 5f       	subi	r22, 0xFF	; 255
    23fa:	7f 4f       	sbci	r23, 0xFF	; 255
    23fc:	c7 01       	movw	r24, r14
    23fe:	0e 94 56 40 	call	0x80ac	; 0x80ac <__itoa_ncheck>
        char K = getCharKeypad(int(z));
    2402:	c7 01       	movw	r24, r14
    2404:	0e 94 42 05 	call	0xa84	; 0xa84 <_Z13getCharKeypadi>
    2408:	9f ef       	ldi	r25, 0xFF	; 255
    240a:	29 ef       	ldi	r18, 0xF9	; 249
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	91 50       	subi	r25, 0x01	; 1
    2410:	20 40       	sbci	r18, 0x00	; 0
    2412:	30 40       	sbci	r19, 0x00	; 0
    2414:	e1 f7       	brne	.-8      	; 0x240e <loop+0x7be>
    2416:	00 c0       	rjmp	.+0      	; 0x2418 <loop+0x7c8>
        _delay_ms(20);
        /*****************************************************************/

        inputKM(K);
    2418:	00 00       	nop
    241a:	3a db       	rcall	.-2444   	; 0x1a90 <_Z7inputKMc>
        impulsi = 0;
    241c:	10 92 8f 0a 	sts	0x0A8F, r1	; 0x800a8f <impulsi+0x1>
    2420:	10 92 8e 0a 	sts	0x0A8E, r1	; 0x800a8e <impulsi>
      }
      break;
    2424:	9c c2       	rjmp	.+1336   	; 0x295e <loop+0xd0e>
    case 6:
      {
        lcd.setCursor(0, 0);
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	87 eb       	ldi	r24, 0xB7	; 183
    242c:	9a e0       	ldi	r25, 0x0A	; 10
    242e:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    2432:	61 e0       	ldi	r22, 0x01	; 1
    2434:	87 eb       	ldi	r24, 0xB7	; 183
    2436:	9a e0       	ldi	r25, 0x0A	; 10
    2438:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
        lcd.print("  Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    243c:	40 91 f9 09 	lds	r20, 0x09F9	; 0x8009f9 <UltimoPassaggioStato>
    2440:	50 91 fa 09 	lds	r21, 0x09FA	; 0x8009fa <UltimoPassaggioStato+0x1>
    2444:	60 91 fb 09 	lds	r22, 0x09FB	; 0x8009fb <UltimoPassaggioStato+0x2>
    2448:	70 91 fc 09 	lds	r23, 0x09FC	; 0x8009fc <UltimoPassaggioStato+0x3>
    244c:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <Timer>
    2450:	90 91 f6 09 	lds	r25, 0x09F6	; 0x8009f6 <Timer+0x1>
    2454:	a0 91 f7 09 	lds	r26, 0x09F7	; 0x8009f7 <Timer+0x2>
    2458:	b0 91 f8 09 	lds	r27, 0x09F8	; 0x8009f8 <Timer+0x3>
    245c:	48 0f       	add	r20, r24
    245e:	59 1f       	adc	r21, r25
    2460:	6a 1f       	adc	r22, r26
    2462:	7b 1f       	adc	r23, r27
    2464:	41 50       	subi	r20, 0x01	; 1
    2466:	51 09       	sbc	r21, r1
    2468:	61 09       	sbc	r22, r1
    246a:	71 09       	sbc	r23, r1
    246c:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <secs>
    2470:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <secs+0x1>
    2474:	a0 91 ff 09 	lds	r26, 0x09FF	; 0x8009ff <secs+0x2>
    2478:	b0 91 00 0a 	lds	r27, 0x0A00	; 0x800a00 <secs+0x3>
    247c:	48 1b       	sub	r20, r24
    247e:	59 0b       	sbc	r21, r25
    2480:	6a 0b       	sbc	r22, r26
    2482:	7b 0b       	sbc	r23, r27
    2484:	2a e0       	ldi	r18, 0x0A	; 10
    2486:	ce 01       	movw	r24, r28
    2488:	0f 96       	adiw	r24, 0x0f	; 15
    248a:	0e 94 ac 3a 	call	0x7558	; 0x7558 <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    248e:	6e ec       	ldi	r22, 0xCE	; 206
    2490:	76 e0       	ldi	r23, 0x06	; 6
    2492:	ce 01       	movw	r24, r28
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    249a:	be 01       	movw	r22, r28
    249c:	61 5f       	subi	r22, 0xF1	; 241
    249e:	7f 4f       	sbci	r23, 0xFF	; 255
    24a0:	ce 01       	movw	r24, r28
    24a2:	01 96       	adiw	r24, 0x01	; 1
    24a4:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    24a8:	6e ea       	ldi	r22, 0xAE	; 174
    24aa:	76 e0       	ldi	r23, 0x06	; 6
    24ac:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <_ZplRK15StringSumHelperPKc>
    24b0:	bc 01       	movw	r22, r24
    24b2:	87 eb       	ldi	r24, 0xB7	; 183
    24b4:	9a e0       	ldi	r25, 0x0A	; 10
    24b6:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    24ba:	ce 01       	movw	r24, r28
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    24c2:	ce 01       	movw	r24, r28
    24c4:	0f 96       	adiw	r24, 0x0f	; 15
    24c6:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
          disable_ETH();
          _delay_ms(2);
          enable_ETH();
          /*****************************************************************/

        double lt = impulsiToLitri(impulsi);
    24ca:	80 91 8e 0a 	lds	r24, 0x0A8E	; 0x800a8e <impulsi>
    24ce:	90 91 8f 0a 	lds	r25, 0x0A8F	; 0x800a8f <impulsi+0x1>
    24d2:	69 d8       	rcall	.-3886   	; 0x15a6 <_Z14impulsiToLitrii>
    24d4:	6b 01       	movw	r12, r22
    24d6:	7c 01       	movw	r14, r24

        righeDisplay[1] = "LITRI :" + String(lt);
    24d8:	22 e0       	ldi	r18, 0x02	; 2
    24da:	ab 01       	movw	r20, r22
    24dc:	bc 01       	movw	r22, r24
    24de:	ce 01       	movw	r24, r28
    24e0:	0f 96       	adiw	r24, 0x0f	; 15
    24e2:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <_ZN6StringC1Edh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    24e6:	68 ed       	ldi	r22, 0xD8	; 216
    24e8:	76 e0       	ldi	r23, 0x06	; 6
    24ea:	ce 01       	movw	r24, r28
    24ec:	01 96       	adiw	r24, 0x01	; 1
    24ee:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    24f2:	be 01       	movw	r22, r28
    24f4:	61 5f       	subi	r22, 0xF1	; 241
    24f6:	7f 4f       	sbci	r23, 0xFF	; 255
    24f8:	ce 01       	movw	r24, r28
    24fa:	01 96       	adiw	r24, 0x01	; 1
    24fc:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    2500:	bc 01       	movw	r22, r24
    2502:	85 e4       	ldi	r24, 0x45	; 69
    2504:	9a e0       	ldi	r25, 0x0A	; 10
    2506:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    250a:	ce 01       	movw	r24, r28
    250c:	01 96       	adiw	r24, 0x01	; 1
    250e:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    2512:	ce 01       	movw	r24, r28
    2514:	0f 96       	adiw	r24, 0x0f	; 15
    2516:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
        righeDisplay[2] = "imp :" + String(impulsi);
    251a:	60 91 8e 0a 	lds	r22, 0x0A8E	; 0x800a8e <impulsi>
    251e:	70 91 8f 0a 	lds	r23, 0x0A8F	; 0x800a8f <impulsi+0x1>
    2522:	4a e0       	ldi	r20, 0x0A	; 10
    2524:	ce 01       	movw	r24, r28
    2526:	0f 96       	adiw	r24, 0x0f	; 15
    2528:	0e 94 58 3a 	call	0x74b0	; 0x74b0 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    252c:	67 e5       	ldi	r22, 0x57	; 87
    252e:	76 e0       	ldi	r23, 0x06	; 6
    2530:	ce 01       	movw	r24, r28
    2532:	01 96       	adiw	r24, 0x01	; 1
    2534:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2538:	be 01       	movw	r22, r28
    253a:	61 5f       	subi	r22, 0xF1	; 241
    253c:	7f 4f       	sbci	r23, 0xFF	; 255
    253e:	ce 01       	movw	r24, r28
    2540:	01 96       	adiw	r24, 0x01	; 1
    2542:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    2546:	bc 01       	movw	r22, r24
    2548:	8b e4       	ldi	r24, 0x4B	; 75
    254a:	9a e0       	ldi	r25, 0x0A	; 10
    254c:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2550:	ce 01       	movw	r24, r28
    2552:	01 96       	adiw	r24, 0x01	; 1
    2554:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    2558:	ce 01       	movw	r24, r28
    255a:	0f 96       	adiw	r24, 0x0f	; 15
    255c:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2560:	6d e5       	ldi	r22, 0x5D	; 93
    2562:	76 e0       	ldi	r23, 0x06	; 6
    2564:	ce 01       	movw	r24, r28
    2566:	01 96       	adiw	r24, 0x01	; 1
    2568:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
        righeDisplay[3] = "Erogazione: " + StatoAttuale;
    256c:	6a e9       	ldi	r22, 0x9A	; 154
    256e:	7a e0       	ldi	r23, 0x0A	; 10
    2570:	ce 01       	movw	r24, r28
    2572:	01 96       	adiw	r24, 0x01	; 1
    2574:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    2578:	bc 01       	movw	r22, r24
    257a:	81 e5       	ldi	r24, 0x51	; 81
    257c:	9a e0       	ldi	r25, 0x0A	; 10
    257e:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2582:	ce 01       	movw	r24, r28
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>

        lcd.setCursor(0, 1);
    258a:	41 e0       	ldi	r20, 0x01	; 1
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	87 eb       	ldi	r24, 0xB7	; 183
    2590:	9a e0       	ldi	r25, 0x0A	; 10
    2592:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[1]);
    2596:	65 e4       	ldi	r22, 0x45	; 69
    2598:	7a e0       	ldi	r23, 0x0A	; 10
    259a:	87 eb       	ldi	r24, 0xB7	; 183
    259c:	9a e0       	ldi	r25, 0x0A	; 10
    259e:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN5Print5printERK6String>
        lcd.setCursor(0, 2);
    25a2:	42 e0       	ldi	r20, 0x02	; 2
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	87 eb       	ldi	r24, 0xB7	; 183
    25a8:	9a e0       	ldi	r25, 0x0A	; 10
    25aa:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[2]);
    25ae:	6b e4       	ldi	r22, 0x4B	; 75
    25b0:	7a e0       	ldi	r23, 0x0A	; 10
    25b2:	87 eb       	ldi	r24, 0xB7	; 183
    25b4:	9a e0       	ldi	r25, 0x0A	; 10
    25b6:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN5Print5printERK6String>
        lcd.setCursor(0, 3);
    25ba:	43 e0       	ldi	r20, 0x03	; 3
    25bc:	60 e0       	ldi	r22, 0x00	; 0
    25be:	87 eb       	ldi	r24, 0xB7	; 183
    25c0:	9a e0       	ldi	r25, 0x0A	; 10
    25c2:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[3]);
    25c6:	61 e5       	ldi	r22, 0x51	; 81
    25c8:	7a e0       	ldi	r23, 0x0A	; 10
    25ca:	87 eb       	ldi	r24, 0xB7	; 183
    25cc:	9a e0       	ldi	r25, 0x0A	; 10
    25ce:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN5Print5printERK6String>

        // CONTATTO PISTOLA DIESEL

        if ((PINA & _BV(PA1)) && (mezzo.Carb == "D"))
    25d2:	01 9b       	sbis	0x00, 1	; 0
    25d4:	08 c0       	rjmp	.+16     	; 0x25e6 <loop+0x996>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    25d6:	63 eb       	ldi	r22, 0xB3	; 179
    25d8:	75 e0       	ldi	r23, 0x05	; 5
    25da:	89 ed       	ldi	r24, 0xD9	; 217
    25dc:	9a e0       	ldi	r25, 0x0A	; 10
    25de:	0e 94 8b 3b 	call	0x7716	; 0x7716 <_ZNK6String6equalsEPKc>
    25e2:	81 11       	cpse	r24, r1
    25e4:	1f c3       	rjmp	.+1598   	; 0x2c24 <loop+0xfd4>
          avanzaStato(TmaxInviodati);
        }

        // CONTATTO PISTOLA BENZINA

        if  ((PINB & _BV(PB1)) && (mezzo.Carb == "B"))
    25e6:	19 9b       	sbis	0x03, 1	; 3
    25e8:	ba c1       	rjmp	.+884    	; 0x295e <loop+0xd0e>
    25ea:	65 eb       	ldi	r22, 0xB5	; 181
    25ec:	75 e0       	ldi	r23, 0x05	; 5
    25ee:	89 ed       	ldi	r24, 0xD9	; 217
    25f0:	9a e0       	ldi	r25, 0x0A	; 10
    25f2:	0e 94 8b 3b 	call	0x7716	; 0x7716 <_ZNK6String6equalsEPKc>
    25f6:	81 11       	cpse	r24, r1
    25f8:	44 c3       	rjmp	.+1672   	; 0x2c82 <loop+0x1032>
    25fa:	b1 c1       	rjmp	.+866    	; 0x295e <loop+0xd0e>
        }
      }
      break;
    case 7 :
      {
        righeDisplay[1] =  "";
    25fc:	68 ed       	ldi	r22, 0xD8	; 216
    25fe:	71 e0       	ldi	r23, 0x01	; 1
    2600:	85 e4       	ldi	r24, 0x45	; 69
    2602:	9a e0       	ldi	r25, 0x0A	; 10
    2604:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
        righeDisplay[2] = "Invio........";
    2608:	60 ee       	ldi	r22, 0xE0	; 224
    260a:	76 e0       	ldi	r23, 0x06	; 6
    260c:	8b e4       	ldi	r24, 0x4B	; 75
    260e:	9a e0       	ldi	r25, 0x0A	; 10
    2610:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
        righeDisplay[3] =  "";      
    2614:	68 ed       	ldi	r22, 0xD8	; 216
    2616:	71 e0       	ldi	r23, 0x01	; 1
    2618:	81 e5       	ldi	r24, 0x51	; 81
    261a:	9a e0       	ldi	r25, 0x0A	; 10
    261c:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
        displayLCD(righeDisplay, stato_procedura, 100);
    2620:	60 91 90 0a 	lds	r22, 0x0A90	; 0x800a90 <stato_procedura>
    2624:	70 91 91 0a 	lds	r23, 0x0A91	; 0x800a91 <stato_procedura+0x1>
    2628:	44 e6       	ldi	r20, 0x64	; 100
    262a:	50 e0       	ldi	r21, 0x00	; 0
    262c:	8f e3       	ldi	r24, 0x3F	; 63
    262e:	9a e0       	ldi	r25, 0x0A	; 10
    2630:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z10displayLCDP6Stringii>
        Messaggio = "";
    2634:	68 ed       	ldi	r22, 0xD8	; 216
    2636:	71 e0       	ldi	r23, 0x01	; 1
    2638:	87 e5       	ldi	r24, 0x57	; 87
    263a:	9a e0       	ldi	r25, 0x0A	; 10
    263c:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
    2640:	03 e6       	ldi	r16, 0x63	; 99
    2642:	1a e0       	ldi	r17, 0x0A	; 10
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2644:	b8 01       	movw	r22, r16
    2646:	ce 01       	movw	r24, r28
    2648:	01 96       	adiw	r24, 0x01	; 1
    264a:	0e 94 ee 39 	call	0x73dc	; 0x73dc <_ZN6StringC1ERKS_>

        for (int k = 0; k < 6; k++)
          Messaggio.concat(RaccoltaDati[k] + ";");
    264e:	6e ee       	ldi	r22, 0xEE	; 238
    2650:	76 e0       	ldi	r23, 0x06	; 6
    2652:	ce 01       	movw	r24, r28
    2654:	01 96       	adiw	r24, 0x01	; 1
    2656:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <_ZplRK15StringSumHelperPKc>
    265a:	bc 01       	movw	r22, r24
    265c:	87 e5       	ldi	r24, 0x57	; 87
    265e:	9a e0       	ldi	r25, 0x0A	; 10
    2660:	0e 94 31 3b 	call	0x7662	; 0x7662 <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2664:	ce 01       	movw	r24, r28
    2666:	01 96       	adiw	r24, 0x01	; 1
    2668:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    266c:	0a 5f       	subi	r16, 0xFA	; 250
    266e:	1f 4f       	sbci	r17, 0xFF	; 255
        righeDisplay[2] = "Invio........";
        righeDisplay[3] =  "";      
        displayLCD(righeDisplay, stato_procedura, 100);
        Messaggio = "";

        for (int k = 0; k < 6; k++)
    2670:	8a e0       	ldi	r24, 0x0A	; 10
    2672:	07 38       	cpi	r16, 0x87	; 135
    2674:	18 07       	cpc	r17, r24
    2676:	31 f7       	brne	.-52     	; 0x2644 <loop+0x9f4>
          Messaggio.concat(RaccoltaDati[k] + ";");

        Messaggio.concat(CodSede);
    2678:	62 e4       	ldi	r22, 0x42	; 66
    267a:	71 e0       	ldi	r23, 0x01	; 1
    267c:	87 e5       	ldi	r24, 0x57	; 87
    267e:	9a e0       	ldi	r25, 0x0A	; 10
    2680:	0e 94 37 3b 	call	0x766e	; 0x766e <_ZN6String6concatEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2684:	60 ef       	ldi	r22, 0xF0	; 240
    2686:	76 e0       	ldi	r23, 0x06	; 6
    2688:	ce 01       	movw	r24, r28
    268a:	01 96       	adiw	r24, 0x01	; 1
    268c:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
        Serial.println("Messaggio:" + Messaggio);
    2690:	67 e5       	ldi	r22, 0x57	; 87
    2692:	7a e0       	ldi	r23, 0x0A	; 10
    2694:	ce 01       	movw	r24, r28
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    269c:	bc 01       	movw	r22, r24
    269e:	8e e7       	ldi	r24, 0x7E	; 126
    26a0:	9c e0       	ldi	r25, 0x0C	; 12
    26a2:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    26a6:	ce 01       	movw	r24, r28
    26a8:	01 96       	adiw	r24, 0x01	; 1
    26aa:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
         // Messaggio = "DD92743A;28530;D;15.03;1234;000;SA10012";
          /*****************************************************************/
          disable_ETH();
    26ae:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
    26b2:	8f e3       	ldi	r24, 0x3F	; 63
    26b4:	9f e1       	ldi	r25, 0x1F	; 31
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <loop+0xa66>
    26ba:	00 c0       	rjmp	.+0      	; 0x26bc <loop+0xa6c>
    26bc:	00 00       	nop
          _delay_ms(2);
          enable_ETH();
    26be:	0e 94 91 01 	call	0x322	; 0x322 <_ZL10enable_ETHv>
    26c2:	9f ef       	ldi	r25, 0xFF	; 255
    26c4:	23 ed       	ldi	r18, 0xD3	; 211
    26c6:	30 e3       	ldi	r19, 0x30	; 48
    26c8:	91 50       	subi	r25, 0x01	; 1
    26ca:	20 40       	sbci	r18, 0x00	; 0
    26cc:	30 40       	sbci	r19, 0x00	; 0
    26ce:	e1 f7       	brne	.-8      	; 0x26c8 <loop+0xa78>
    26d0:	00 c0       	rjmp	.+0      	; 0x26d2 <loop+0xa82>
    26d2:	00 00       	nop
          /*****************************************************************/
          _delay_ms(1000);
          avanzaStato(30); 
    26d4:	6e e1       	ldi	r22, 0x1E	; 30
    26d6:	70 e0       	ldi	r23, 0x00	; 0
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	fe c2       	rjmp	.+1532   	; 0x2cda <loop+0x108a>
      }
      break;
    case 8:
      {        
        if (BIT_IS_CLEAR(PORTC, 4))
    26de:	44 99       	sbic	0x08, 4	; 8
    26e0:	3e c1       	rjmp	.+636    	; 0x295e <loop+0xd0e>
        {
          displayLCD(righeDisplay, stato_procedura, 10);
    26e2:	4a e0       	ldi	r20, 0x0A	; 10
    26e4:	50 e0       	ldi	r21, 0x00	; 0
    26e6:	68 e0       	ldi	r22, 0x08	; 8
    26e8:	70 e0       	ldi	r23, 0x00	; 0
    26ea:	8f e3       	ldi	r24, 0x3F	; 63
    26ec:	9a e0       	ldi	r25, 0x0A	; 10
    26ee:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z10displayLCDP6Stringii>
          Messaggio = "";
    26f2:	68 ed       	ldi	r22, 0xD8	; 216
    26f4:	71 e0       	ldi	r23, 0x01	; 1
    26f6:	87 e5       	ldi	r24, 0x57	; 87
    26f8:	9a e0       	ldi	r25, 0x0A	; 10
    26fa:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
    26fe:	03 e6       	ldi	r16, 0x63	; 99
    2700:	1a e0       	ldi	r17, 0x0A	; 10
    2702:	97 e8       	ldi	r25, 0x87	; 135
    2704:	e9 2e       	mov	r14, r25
    2706:	9a e0       	ldi	r25, 0x0A	; 10
    2708:	f9 2e       	mov	r15, r25
{
public:
	StringSumHelper(const String &s) : String(s) {}
    270a:	b8 01       	movw	r22, r16
    270c:	ce 01       	movw	r24, r28
    270e:	01 96       	adiw	r24, 0x01	; 1
    2710:	0e 94 ee 39 	call	0x73dc	; 0x73dc <_ZN6StringC1ERKS_>

          for (int k = 0; k < 6; k++)
            Messaggio.concat(RaccoltaDati[k] + ";");
    2714:	6e ee       	ldi	r22, 0xEE	; 238
    2716:	76 e0       	ldi	r23, 0x06	; 6
    2718:	ce 01       	movw	r24, r28
    271a:	01 96       	adiw	r24, 0x01	; 1
    271c:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <_ZplRK15StringSumHelperPKc>
    2720:	bc 01       	movw	r22, r24
    2722:	87 e5       	ldi	r24, 0x57	; 87
    2724:	9a e0       	ldi	r25, 0x0A	; 10
    2726:	0e 94 31 3b 	call	0x7662	; 0x7662 <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    272a:	ce 01       	movw	r24, r28
    272c:	01 96       	adiw	r24, 0x01	; 1
    272e:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    2732:	0a 5f       	subi	r16, 0xFA	; 250
    2734:	1f 4f       	sbci	r17, 0xFF	; 255
        if (BIT_IS_CLEAR(PORTC, 4))
        {
          displayLCD(righeDisplay, stato_procedura, 10);
          Messaggio = "";

          for (int k = 0; k < 6; k++)
    2736:	e0 16       	cp	r14, r16
    2738:	f1 06       	cpc	r15, r17
    273a:	39 f7       	brne	.-50     	; 0x270a <loop+0xaba>
            Messaggio.concat(RaccoltaDati[k] + ";");

          Messaggio.concat(CodSede);
    273c:	62 e4       	ldi	r22, 0x42	; 66
    273e:	71 e0       	ldi	r23, 0x01	; 1
    2740:	87 e5       	ldi	r24, 0x57	; 87
    2742:	9a e0       	ldi	r25, 0x0A	; 10
    2744:	0e 94 37 3b 	call	0x766e	; 0x766e <_ZN6String6concatEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2748:	60 ef       	ldi	r22, 0xF0	; 240
    274a:	76 e0       	ldi	r23, 0x06	; 6
    274c:	ce 01       	movw	r24, r28
    274e:	01 96       	adiw	r24, 0x01	; 1
    2750:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
          Serial.println("Messaggio:" + Messaggio);
    2754:	67 e5       	ldi	r22, 0x57	; 87
    2756:	7a e0       	ldi	r23, 0x0A	; 10
    2758:	ce 01       	movw	r24, r28
    275a:	01 96       	adiw	r24, 0x01	; 1
    275c:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    2760:	bc 01       	movw	r22, r24
    2762:	8e e7       	ldi	r24, 0x7E	; 126
    2764:	9c e0       	ldi	r25, 0x0C	; 12
    2766:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    276a:	ce 01       	movw	r24, r28
    276c:	01 96       	adiw	r24, 0x01	; 1
    276e:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    2772:	8f ef       	ldi	r24, 0xFF	; 255
    2774:	93 ed       	ldi	r25, 0xD3	; 211
    2776:	20 e3       	ldi	r18, 0x30	; 48
    2778:	81 50       	subi	r24, 0x01	; 1
    277a:	90 40       	sbci	r25, 0x00	; 0
    277c:	20 40       	sbci	r18, 0x00	; 0
    277e:	e1 f7       	brne	.-8      	; 0x2778 <loop+0xb28>
    2780:	00 c0       	rjmp	.+0      	; 0x2782 <loop+0xb32>
    2782:	00 00       	nop

          // Messaggio = "DD92743A;28530;D;15.03;1234;000;SA10012";

          _delay_ms(1000);

          if (PostErogazioneGAC(80, serverREST, clientLOCAL, Messaggio))
    2784:	67 e5       	ldi	r22, 0x57	; 87
    2786:	7a e0       	ldi	r23, 0x0A	; 10
    2788:	ce 01       	movw	r24, r28
    278a:	0f 96       	adiw	r24, 0x0f	; 15
    278c:	0e 94 ee 39 	call	0x73dc	; 0x73dc <_ZN6StringC1ERKS_>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    2790:	80 91 1c 0a 	lds	r24, 0x0A1C	; 0x800a1c <clientLOCAL+0x2>
    2794:	90 91 1d 0a 	lds	r25, 0x0A1D	; 0x800a1d <clientLOCAL+0x3>
    2798:	9c 83       	std	Y+4, r25	; 0x04
    279a:	8b 83       	std	Y+3, r24	; 0x03
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    279c:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <clientLOCAL+0x4>
    27a0:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <clientLOCAL+0x5>
    27a4:	a0 91 20 0a 	lds	r26, 0x0A20	; 0x800a20 <clientLOCAL+0x6>
    27a8:	b0 91 21 0a 	lds	r27, 0x0A21	; 0x800a21 <clientLOCAL+0x7>
    27ac:	8d 83       	std	Y+5, r24	; 0x05
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	af 83       	std	Y+7, r26	; 0x07
    27b2:	b8 87       	std	Y+8, r27	; 0x08
    27b4:	80 91 22 0a 	lds	r24, 0x0A22	; 0x800a22 <clientLOCAL+0x8>
    27b8:	90 91 23 0a 	lds	r25, 0x0A23	; 0x800a23 <clientLOCAL+0x9>
    27bc:	a0 91 24 0a 	lds	r26, 0x0A24	; 0x800a24 <clientLOCAL+0xa>
    27c0:	b0 91 25 0a 	lds	r27, 0x0A25	; 0x800a25 <clientLOCAL+0xb>
    27c4:	89 87       	std	Y+9, r24	; 0x09
    27c6:	9a 87       	std	Y+10, r25	; 0x0a
    27c8:	ab 87       	std	Y+11, r26	; 0x0b
    27ca:	bc 87       	std	Y+12, r27	; 0x0c
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
    27cc:	8c e3       	ldi	r24, 0x3C	; 60
    27ce:	99 e0       	ldi	r25, 0x09	; 9
    27d0:	9a 83       	std	Y+2, r25	; 0x02
    27d2:	89 83       	std	Y+1, r24	; 0x01
    27d4:	80 91 26 0a 	lds	r24, 0x0A26	; 0x800a26 <clientLOCAL+0xc>
    27d8:	8d 87       	std	Y+13, r24	; 0x0d
    27da:	9e 01       	movw	r18, r28
    27dc:	21 5f       	subi	r18, 0xF1	; 241
    27de:	3f 4f       	sbci	r19, 0xFF	; 255
    27e0:	ae 01       	movw	r20, r28
    27e2:	4f 5f       	subi	r20, 0xFF	; 255
    27e4:	5f 4f       	sbci	r21, 0xFF	; 255
    27e6:	60 e3       	ldi	r22, 0x30	; 48
    27e8:	71 e0       	ldi	r23, 0x01	; 1
    27ea:	80 e5       	ldi	r24, 0x50	; 80
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	0e 94 3d 09 	call	0x127a	; 0x127a <_Z17PostErogazioneGACiPc14EthernetClient6String>
    27f2:	18 2f       	mov	r17, r24
    27f4:	ce 01       	movw	r24, r28
    27f6:	0f 96       	adiw	r24, 0x0f	; 15
    27f8:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    27fc:	11 23       	and	r17, r17
    27fe:	a1 f0       	breq	.+40     	; 0x2828 <loop+0xbd8>
          {
            disable_ETH();
    2800:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
    2804:	3f ef       	ldi	r19, 0xFF	; 255
    2806:	83 ec       	ldi	r24, 0xC3	; 195
    2808:	99 e0       	ldi	r25, 0x09	; 9
    280a:	31 50       	subi	r19, 0x01	; 1
    280c:	80 40       	sbci	r24, 0x00	; 0
    280e:	90 40       	sbci	r25, 0x00	; 0
    2810:	e1 f7       	brne	.-8      	; 0x280a <loop+0xbba>
    2812:	00 c0       	rjmp	.+0      	; 0x2814 <loop+0xbc4>
    2814:	00 00       	nop
            _delay_ms(200);
            Serial.println("PostErogazioneGAC - OK" );                      
    2816:	6b ef       	ldi	r22, 0xFB	; 251
    2818:	76 e0       	ldi	r23, 0x06	; 6
    281a:	8e e7       	ldi	r24, 0x7E	; 126
    281c:	9c e0       	ldi	r25, 0x0C	; 12
    281e:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
            Azzera();  
    2822:	0e 94 90 0b 	call	0x1720	; 0x1720 <_Z6Azzerav>
    2826:	9b c0       	rjmp	.+310    	; 0x295e <loop+0xd0e>
          }
          else
          {
             disable_ETH();   
    2828:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
             String ultima_indirizzo  = read_eeprom_string(4,1035);
    282c:	4b e0       	ldi	r20, 0x0B	; 11
    282e:	54 e0       	ldi	r21, 0x04	; 4
    2830:	64 e0       	ldi	r22, 0x04	; 4
    2832:	70 e0       	ldi	r23, 0x00	; 0
    2834:	ce 01       	movw	r24, r28
    2836:	4f 96       	adiw	r24, 0x1f	; 31
    2838:	0e 94 9e 03 	call	0x73c	; 0x73c <_Z18read_eeprom_stringii>
             int indirizzo = ultima_indirizzo.toInt();
    283c:	ce 01       	movw	r24, r28
    283e:	4f 96       	adiw	r24, 0x1f	; 31
    2840:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZNK6String5toIntEv>
    2844:	6b 01       	movw	r12, r22
    2846:	7c 01       	movw	r14, r24
            // bool write_eeprom_string(String erog,int lunBuffer,int start_ind)
            if (write_eeprom_string(Messaggio,Messaggio.length(),indirizzo))
    2848:	00 91 5b 0a 	lds	r16, 0x0A5B	; 0x800a5b <Messaggio+0x4>
    284c:	10 91 5c 0a 	lds	r17, 0x0A5C	; 0x800a5c <Messaggio+0x5>
    2850:	67 e5       	ldi	r22, 0x57	; 87
    2852:	7a e0       	ldi	r23, 0x0A	; 10
    2854:	ce 01       	movw	r24, r28
    2856:	01 96       	adiw	r24, 0x01	; 1
    2858:	0e 94 ee 39 	call	0x73dc	; 0x73dc <_ZN6StringC1ERKS_>
    285c:	a6 01       	movw	r20, r12
    285e:	b8 01       	movw	r22, r16
    2860:	ce 01       	movw	r24, r28
    2862:	01 96       	adiw	r24, 0x01	; 1
    2864:	0e 94 53 04 	call	0x8a6	; 0x8a6 <_Z19write_eeprom_string6Stringii>
    2868:	18 2f       	mov	r17, r24
    286a:	ce 01       	movw	r24, r28
    286c:	01 96       	adiw	r24, 0x01	; 1
    286e:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    2872:	11 23       	and	r17, r17
    2874:	09 f4       	brne	.+2      	; 0x2878 <loop+0xc28>
    2876:	6d c0       	rjmp	.+218    	; 0x2952 <loop+0xd02>
              {
                Serial.println("WRITE OK AT address :" + String(indirizzo));
    2878:	4a e0       	ldi	r20, 0x0A	; 10
    287a:	b6 01       	movw	r22, r12
    287c:	ce 01       	movw	r24, r28
    287e:	0f 96       	adiw	r24, 0x0f	; 15
    2880:	0e 94 58 3a 	call	0x74b0	; 0x74b0 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2884:	62 e1       	ldi	r22, 0x12	; 18
    2886:	77 e0       	ldi	r23, 0x07	; 7
    2888:	ce 01       	movw	r24, r28
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2890:	be 01       	movw	r22, r28
    2892:	61 5f       	subi	r22, 0xF1	; 241
    2894:	7f 4f       	sbci	r23, 0xFF	; 255
    2896:	ce 01       	movw	r24, r28
    2898:	01 96       	adiw	r24, 0x01	; 1
    289a:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    289e:	bc 01       	movw	r22, r24
    28a0:	8e e7       	ldi	r24, 0x7E	; 126
    28a2:	9c e0       	ldi	r25, 0x0C	; 12
    28a4:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    28a8:	ce 01       	movw	r24, r28
    28aa:	01 96       	adiw	r24, 0x01	; 1
    28ac:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    28b0:	ce 01       	movw	r24, r28
    28b2:	0f 96       	adiw	r24, 0x0f	; 15
    28b4:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
                indirizzo = indirizzo + 50;  
    28b8:	22 e3       	ldi	r18, 0x32	; 50
    28ba:	c2 0e       	add	r12, r18
    28bc:	d1 1c       	adc	r13, r1
                if (indirizzo > 3000) {indirizzo = 2000; }   
    28be:	39 eb       	ldi	r19, 0xB9	; 185
    28c0:	c3 16       	cp	r12, r19
    28c2:	3b e0       	ldi	r19, 0x0B	; 11
    28c4:	d3 06       	cpc	r13, r19
    28c6:	24 f0       	brlt	.+8      	; 0x28d0 <loop+0xc80>
    28c8:	80 ed       	ldi	r24, 0xD0	; 208
    28ca:	c8 2e       	mov	r12, r24
    28cc:	87 e0       	ldi	r24, 0x07	; 7
    28ce:	d8 2e       	mov	r13, r24
                String update_ultima_indirizzo = String(indirizzo);
    28d0:	4a e0       	ldi	r20, 0x0A	; 10
    28d2:	b6 01       	movw	r22, r12
    28d4:	ce 01       	movw	r24, r28
    28d6:	47 96       	adiw	r24, 0x17	; 23
    28d8:	0e 94 58 3a 	call	0x74b0	; 0x74b0 <_ZN6StringC1Eih>
                if (write_eeprom_string(update_ultima_indirizzo,update_ultima_indirizzo.length(),1035))
    28dc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    28de:	1c 8d       	ldd	r17, Y+28	; 0x1c
    28e0:	be 01       	movw	r22, r28
    28e2:	69 5e       	subi	r22, 0xE9	; 233
    28e4:	7f 4f       	sbci	r23, 0xFF	; 255
    28e6:	ce 01       	movw	r24, r28
    28e8:	01 96       	adiw	r24, 0x01	; 1
    28ea:	0e 94 ee 39 	call	0x73dc	; 0x73dc <_ZN6StringC1ERKS_>
    28ee:	4b e0       	ldi	r20, 0x0B	; 11
    28f0:	54 e0       	ldi	r21, 0x04	; 4
    28f2:	b8 01       	movw	r22, r16
    28f4:	ce 01       	movw	r24, r28
    28f6:	01 96       	adiw	r24, 0x01	; 1
    28f8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <_Z19write_eeprom_string6Stringii>
    28fc:	18 2f       	mov	r17, r24
    28fe:	ce 01       	movw	r24, r28
    2900:	01 96       	adiw	r24, 0x01	; 1
    2902:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    2906:	11 23       	and	r17, r17
    2908:	01 f1       	breq	.+64     	; 0x294a <loop+0xcfa>
                  Serial.println("UPDATE OK address :" + String(indirizzo));  
    290a:	4a e0       	ldi	r20, 0x0A	; 10
    290c:	b6 01       	movw	r22, r12
    290e:	ce 01       	movw	r24, r28
    2910:	0f 96       	adiw	r24, 0x0f	; 15
    2912:	0e 94 58 3a 	call	0x74b0	; 0x74b0 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2916:	68 e2       	ldi	r22, 0x28	; 40
    2918:	77 e0       	ldi	r23, 0x07	; 7
    291a:	ce 01       	movw	r24, r28
    291c:	01 96       	adiw	r24, 0x01	; 1
    291e:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2922:	be 01       	movw	r22, r28
    2924:	61 5f       	subi	r22, 0xF1	; 241
    2926:	7f 4f       	sbci	r23, 0xFF	; 255
    2928:	ce 01       	movw	r24, r28
    292a:	01 96       	adiw	r24, 0x01	; 1
    292c:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    2930:	bc 01       	movw	r22, r24
    2932:	8e e7       	ldi	r24, 0x7E	; 126
    2934:	9c e0       	ldi	r25, 0x0C	; 12
    2936:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    293a:	ce 01       	movw	r24, r28
    293c:	01 96       	adiw	r24, 0x01	; 1
    293e:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    2942:	ce 01       	movw	r24, r28
    2944:	0f 96       	adiw	r24, 0x0f	; 15
    2946:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
            if (write_eeprom_string(Messaggio,Messaggio.length(),indirizzo))
              {
                Serial.println("WRITE OK AT address :" + String(indirizzo));
                indirizzo = indirizzo + 50;  
                if (indirizzo > 3000) {indirizzo = 2000; }   
                String update_ultima_indirizzo = String(indirizzo);
    294a:	ce 01       	movw	r24, r28
    294c:	47 96       	adiw	r24, 0x17	; 23
    294e:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
                if (write_eeprom_string(update_ultima_indirizzo,update_ultima_indirizzo.length(),1035))
                  Serial.println("UPDATE OK address :" + String(indirizzo));  
              }                
              Azzera();
    2952:	0e 94 90 0b 	call	0x1720	; 0x1720 <_Z6Azzerav>
            Azzera();  
          }
          else
          {
             disable_ETH();   
             String ultima_indirizzo  = read_eeprom_string(4,1035);
    2956:	ce 01       	movw	r24, r28
    2958:	4f 96       	adiw	r24, 0x1f	; 31
    295a:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
      {
      }
      break;
  }

  nowTimer = DS3231M.now();
    295e:	61 e0       	ldi	r22, 0x01	; 1
    2960:	7a e0       	ldi	r23, 0x0A	; 10
    2962:	ce 01       	movw	r24, r28
    2964:	01 96       	adiw	r24, 0x01	; 1
    2966:	0e 94 3d 21 	call	0x427a	; 0x427a <_ZN13DS3231M_Class3nowEv>
    296a:	86 e0       	ldi	r24, 0x06	; 6
    296c:	fe 01       	movw	r30, r28
    296e:	31 96       	adiw	r30, 0x01	; 1
    2970:	af ee       	ldi	r26, 0xEF	; 239
    2972:	b9 e0       	ldi	r27, 0x09	; 9
    2974:	01 90       	ld	r0, Z+
    2976:	0d 92       	st	X+, r0
    2978:	8a 95       	dec	r24
    297a:	e1 f7       	brne	.-8      	; 0x2974 <loop+0xd24>
  secs = nowTimer.secondstime();
    297c:	8f ee       	ldi	r24, 0xEF	; 239
    297e:	99 e0       	ldi	r25, 0x09	; 9
    2980:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZNK8DateTime11secondstimeEv>
    2984:	60 93 fd 09 	sts	0x09FD, r22	; 0x8009fd <secs>
    2988:	70 93 fe 09 	sts	0x09FE, r23	; 0x8009fe <secs+0x1>
    298c:	80 93 ff 09 	sts	0x09FF, r24	; 0x8009ff <secs+0x2>
    2990:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <secs+0x3>
  if ((UltimoPassaggioStato + Timer - secs) <= 1) Azzera();
    2994:	00 91 f9 09 	lds	r16, 0x09F9	; 0x8009f9 <UltimoPassaggioStato>
    2998:	10 91 fa 09 	lds	r17, 0x09FA	; 0x8009fa <UltimoPassaggioStato+0x1>
    299c:	20 91 fb 09 	lds	r18, 0x09FB	; 0x8009fb <UltimoPassaggioStato+0x2>
    29a0:	30 91 fc 09 	lds	r19, 0x09FC	; 0x8009fc <UltimoPassaggioStato+0x3>
    29a4:	c0 90 f5 09 	lds	r12, 0x09F5	; 0x8009f5 <Timer>
    29a8:	d0 90 f6 09 	lds	r13, 0x09F6	; 0x8009f6 <Timer+0x1>
    29ac:	e0 90 f7 09 	lds	r14, 0x09F7	; 0x8009f7 <Timer+0x2>
    29b0:	f0 90 f8 09 	lds	r15, 0x09F8	; 0x8009f8 <Timer+0x3>
    29b4:	0c 0d       	add	r16, r12
    29b6:	1d 1d       	adc	r17, r13
    29b8:	2e 1d       	adc	r18, r14
    29ba:	3f 1d       	adc	r19, r15
    29bc:	68 01       	movw	r12, r16
    29be:	79 01       	movw	r14, r18
    29c0:	c6 1a       	sub	r12, r22
    29c2:	d7 0a       	sbc	r13, r23
    29c4:	e8 0a       	sbc	r14, r24
    29c6:	f9 0a       	sbc	r15, r25
    29c8:	d7 01       	movw	r26, r14
    29ca:	c6 01       	movw	r24, r12
    29cc:	02 97       	sbiw	r24, 0x02	; 2
    29ce:	a1 05       	cpc	r26, r1
    29d0:	b1 05       	cpc	r27, r1
    29d2:	08 f0       	brcs	.+2      	; 0x29d6 <loop+0xd86>
    29d4:	85 c1       	rjmp	.+778    	; 0x2ce0 <loop+0x1090>
    29d6:	0e 94 90 0b 	call	0x1720	; 0x1720 <_Z6Azzerav>

}
    29da:	82 c1       	rjmp	.+772    	; 0x2ce0 <loop+0x1090>
          Buzzer(2, 100);
        }

        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC, 4)))
        {
          Serial.println("");
    29dc:	68 ed       	ldi	r22, 0xD8	; 216
    29de:	71 e0       	ldi	r23, 0x01	; 1
    29e0:	8e e7       	ldi	r24, 0x7E	; 126
    29e2:	9c e0       	ldi	r25, 0x0C	; 12
    29e4:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
          Serial.print("***************************************************************");
    29e8:	6c e3       	ldi	r22, 0x3C	; 60
    29ea:	77 e0       	ldi	r23, 0x07	; 7
    29ec:	8e e7       	ldi	r24, 0x7E	; 126
    29ee:	9c e0       	ldi	r25, 0x0C	; 12
    29f0:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    29f4:	6c e7       	ldi	r22, 0x7C	; 124
    29f6:	77 e0       	ldi	r23, 0x07	; 7
    29f8:	ce 01       	movw	r24, r28
    29fa:	01 96       	adiw	r24, 0x01	; 1
    29fc:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
          Serial.println(" Tessera ID : " + ATe);
    2a00:	be 01       	movw	r22, r28
    2a02:	61 5f       	subi	r22, 0xF1	; 241
    2a04:	7f 4f       	sbci	r23, 0xFF	; 255
    2a06:	ce 01       	movw	r24, r28
    2a08:	01 96       	adiw	r24, 0x01	; 1
    2a0a:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    2a0e:	bc 01       	movw	r22, r24
    2a10:	8e e7       	ldi	r24, 0x7E	; 126
    2a12:	9c e0       	ldi	r25, 0x0C	; 12
    2a14:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2a18:	ce 01       	movw	r24, r28
    2a1a:	01 96       	adiw	r24, 0x01	; 1
    2a1c:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
          Serial.print("***************************************************************");
    2a20:	6c e3       	ldi	r22, 0x3C	; 60
    2a22:	77 e0       	ldi	r23, 0x07	; 7
    2a24:	8e e7       	ldi	r24, 0x7E	; 126
    2a26:	9c e0       	ldi	r25, 0x0C	; 12
    2a28:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
          Serial.println("Riconoscimento Tessera .............");
    2a2c:	6b e8       	ldi	r22, 0x8B	; 139
    2a2e:	77 e0       	ldi	r23, 0x07	; 7
    2a30:	8e e7       	ldi	r24, 0x7E	; 126
    2a32:	9c e0       	ldi	r25, 0x0C	; 12
    2a34:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>

           RaccoltaDati[0] = ATe;
    2a38:	be 01       	movw	r22, r28
    2a3a:	61 5f       	subi	r22, 0xF1	; 241
    2a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3e:	83 e6       	ldi	r24, 0x63	; 99
    2a40:	9a e0       	ldi	r25, 0x0A	; 10
    2a42:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
          // RaccoltaDati[0] = "DD92743A";
          // RaccoltaDati[5] = "000";

          lcd.backlight();
    2a46:	87 eb       	ldi	r24, 0xB7	; 183
    2a48:	9a e0       	ldi	r25, 0x0A	; 10
    2a4a:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <_ZN3LCD9backlightEv>
          lcd.display();
    2a4e:	87 eb       	ldi	r24, 0xB7	; 183
    2a50:	9a e0       	ldi	r25, 0x0A	; 10
    2a52:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <_ZN3LCD7displayEv>
    2a56:	8f e3       	ldi	r24, 0x3F	; 63
    2a58:	9c e9       	ldi	r25, 0x9C	; 156
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <loop+0xe0a>
    2a5e:	00 c0       	rjmp	.+0      	; 0x2a60 <loop+0xe10>
    2a60:	00 00       	nop
          _delay_ms(10);

          righeDisplay[1] = "  RICONOSCIMENTO ";
    2a62:	60 eb       	ldi	r22, 0xB0	; 176
    2a64:	77 e0       	ldi	r23, 0x07	; 7
    2a66:	85 e4       	ldi	r24, 0x45	; 69
    2a68:	9a e0       	ldi	r25, 0x0A	; 10
    2a6a:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          righeDisplay[2] = ".....In Corso.....";
    2a6e:	62 ec       	ldi	r22, 0xC2	; 194
    2a70:	77 e0       	ldi	r23, 0x07	; 7
    2a72:	8b e4       	ldi	r24, 0x4B	; 75
    2a74:	9a e0       	ldi	r25, 0x0A	; 10
    2a76:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          //righeDisplay[3] = "   Rfid: " + ATe;
          righeDisplay[3] = "Attendere.........";
    2a7a:	65 ed       	ldi	r22, 0xD5	; 213
    2a7c:	77 e0       	ldi	r23, 0x07	; 7
    2a7e:	81 e5       	ldi	r24, 0x51	; 81
    2a80:	9a e0       	ldi	r25, 0x0A	; 10
    2a82:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          displayLCD(righeDisplay, stato_procedura, 100);
    2a86:	60 91 90 0a 	lds	r22, 0x0A90	; 0x800a90 <stato_procedura>
    2a8a:	70 91 91 0a 	lds	r23, 0x0A91	; 0x800a91 <stato_procedura+0x1>
    2a8e:	44 e6       	ldi	r20, 0x64	; 100
    2a90:	50 e0       	ldi	r21, 0x00	; 0
    2a92:	8f e3       	ldi	r24, 0x3F	; 63
    2a94:	9a e0       	ldi	r25, 0x0A	; 10
    2a96:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z10displayLCDP6Stringii>
          InizializzaEthernet();
    2a9a:	0e 94 95 01 	call	0x32a	; 0x32a <_Z19InizializzaEthernetv>
    2a9e:	9f ef       	ldi	r25, 0xFF	; 255
    2aa0:	23 ed       	ldi	r18, 0xD3	; 211
    2aa2:	30 e3       	ldi	r19, 0x30	; 48
    2aa4:	91 50       	subi	r25, 0x01	; 1
    2aa6:	20 40       	sbci	r18, 0x00	; 0
    2aa8:	30 40       	sbci	r19, 0x00	; 0
    2aaa:	e1 f7       	brne	.-8      	; 0x2aa4 <loop+0xe54>
    2aac:	00 c0       	rjmp	.+0      	; 0x2aae <loop+0xe5e>
    2aae:	00 00       	nop
    2ab0:	16 ca       	rjmp	.-3028   	; 0x1ede <loop+0x28e>
          Serial.println("TIPO CARBURANTE: " + mezzo.Carb);
          Serial.println("TARGA: " + mezzo.TARGA);

          // Carburante = mezzo.Carb;
          if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
            RaccoltaDati[1] = mezzo.TARGA;
    2ab2:	6f ed       	ldi	r22, 0xDF	; 223
    2ab4:	7a e0       	ldi	r23, 0x0A	; 10
    2ab6:	89 e6       	ldi	r24, 0x69	; 105
    2ab8:	9a e0       	ldi	r25, 0x0A	; 10
    2aba:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
            RaccoltaDati[2] = mezzo.Carb;
    2abe:	69 ed       	ldi	r22, 0xD9	; 217
    2ac0:	7a e0       	ldi	r23, 0x0A	; 10
    2ac2:	8f e6       	ldi	r24, 0x6F	; 111
    2ac4:	9a e0       	ldi	r25, 0x0A	; 10
    2ac6:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2aca:	66 ec       	ldi	r22, 0xC6	; 198
    2acc:	76 e0       	ldi	r23, 0x06	; 6
    2ace:	ce 01       	movw	r24, r28
    2ad0:	01 96       	adiw	r24, 0x01	; 1
    2ad2:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
            righeDisplay[3] = "TARGA: " +  mezzo.TARGA;
    2ad6:	6f ed       	ldi	r22, 0xDF	; 223
    2ad8:	7a e0       	ldi	r23, 0x0A	; 10
    2ada:	ce 01       	movw	r24, r28
    2adc:	01 96       	adiw	r24, 0x01	; 1
    2ade:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    2ae2:	bc 01       	movw	r22, r24
    2ae4:	81 e5       	ldi	r24, 0x51	; 81
    2ae6:	9a e0       	ldi	r25, 0x0A	; 10
    2ae8:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2aec:	ce 01       	movw	r24, r28
    2aee:	01 96       	adiw	r24, 0x01	; 1
    2af0:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    2af4:	8f ef       	ldi	r24, 0xFF	; 255
    2af6:	99 e6       	ldi	r25, 0x69	; 105
    2af8:	28 e1       	ldi	r18, 0x18	; 24
    2afa:	81 50       	subi	r24, 0x01	; 1
    2afc:	90 40       	sbci	r25, 0x00	; 0
    2afe:	20 40       	sbci	r18, 0x00	; 0
    2b00:	e1 f7       	brne	.-8      	; 0x2afa <loop+0xeaa>
    2b02:	00 c0       	rjmp	.+0      	; 0x2b04 <loop+0xeb4>
    2b04:	00 00       	nop
            _delay_ms(500);
            distr_selezionato = 0;
    2b06:	10 92 8d 0a 	sts	0x0A8D, r1	; 0x800a8d <distr_selezionato>
            avanzaStato(TselDistributore);
    2b0a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    2b0e:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    2b12:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    2b16:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    2b1a:	0e 94 5d 06 	call	0xcba	; 0xcba <_Z11avanzaStatom>
    2b1e:	90 cb       	rjmp	.-2272   	; 0x2240 <loop+0x5f0>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2b20:	63 eb       	ldi	r22, 0xB3	; 179
    2b22:	75 e0       	ldi	r23, 0x05	; 5
    2b24:	89 ed       	ldi	r24, 0xD9	; 217
    2b26:	9a e0       	ldi	r25, 0x0A	; 10
    2b28:	0e 94 8b 3b 	call	0x7716	; 0x7716 <_ZNK6String6equalsEPKc>
          righeDisplay[2] = "KM:";
          righeDisplay[3] = "#:Conferma";       
          _delay_ms(100);    
          avanzaStato(TinputKM);
        }
        else if ((mezzo.Carb == "D") || (distr_selezionato == 1))
    2b2c:	81 11       	cpse	r24, r1
    2b2e:	3b c0       	rjmp	.+118    	; 0x2ba6 <loop+0xf56>
    2b30:	80 91 8d 0a 	lds	r24, 0x0A8D	; 0x800a8d <distr_selezionato>
    2b34:	81 30       	cpi	r24, 0x01	; 1
    2b36:	09 f0       	breq	.+2      	; 0x2b3a <loop+0xeea>
    2b38:	12 cf       	rjmp	.-476    	; 0x295e <loop+0xd0e>
    2b3a:	35 c0       	rjmp	.+106    	; 0x2ba6 <loop+0xf56>

        // Verifica scelta distributore

        if ((mezzo.Carb == "B") || (distr_selezionato == 2))
        {
          abilitaPulser('B');
    2b3c:	82 e4       	ldi	r24, 0x42	; 66
    2b3e:	0e 94 c5 0a 	call	0x158a	; 0x158a <_Z13abilitaPulserc>
          mezzo.Carb = "B";
    2b42:	65 eb       	ldi	r22, 0xB5	; 181
    2b44:	75 e0       	ldi	r23, 0x05	; 5
    2b46:	89 ed       	ldi	r24, 0xD9	; 217
    2b48:	9a e0       	ldi	r25, 0x0A	; 10
    2b4a:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          Rele_Abilitazione2(0, 7); // chiudi relè
    2b4e:	67 e0       	ldi	r22, 0x07	; 7
    2b50:	70 e0       	ldi	r23, 0x00	; 0
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	0e 94 39 0b 	call	0x1672	; 0x1672 <_Z18Rele_Abilitazione2ii>
          StatoAttuale = "POMPA 2";
    2b5a:	62 e2       	ldi	r22, 0x22	; 34
    2b5c:	76 e0       	ldi	r23, 0x06	; 6
    2b5e:	8a e9       	ldi	r24, 0x9A	; 154
    2b60:	9a e0       	ldi	r25, 0x0A	; 10
    2b62:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          RaccoltaDati[2] = mezzo.Carb;
    2b66:	69 ed       	ldi	r22, 0xD9	; 217
    2b68:	7a e0       	ldi	r23, 0x0A	; 10
    2b6a:	8f e6       	ldi	r24, 0x6F	; 111
    2b6c:	9a e0       	ldi	r25, 0x0A	; 10
    2b6e:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
          righeDisplay[1] =  "****** KM ******";
    2b72:	6a e2       	ldi	r22, 0x2A	; 42
    2b74:	76 e0       	ldi	r23, 0x06	; 6
    2b76:	85 e4       	ldi	r24, 0x45	; 69
    2b78:	9a e0       	ldi	r25, 0x0A	; 10
    2b7a:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          righeDisplay[2] = "KM:";
    2b7e:	6b e3       	ldi	r22, 0x3B	; 59
    2b80:	76 e0       	ldi	r23, 0x06	; 6
    2b82:	8b e4       	ldi	r24, 0x4B	; 75
    2b84:	9a e0       	ldi	r25, 0x0A	; 10
    2b86:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          righeDisplay[3] = "#:Conferma";       
    2b8a:	6f e3       	ldi	r22, 0x3F	; 63
    2b8c:	76 e0       	ldi	r23, 0x06	; 6
    2b8e:	81 e5       	ldi	r24, 0x51	; 81
    2b90:	9a e0       	ldi	r25, 0x0A	; 10
    2b92:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
    2b96:	3f ef       	ldi	r19, 0xFF	; 255
    2b98:	81 ee       	ldi	r24, 0xE1	; 225
    2b9a:	94 e0       	ldi	r25, 0x04	; 4
    2b9c:	31 50       	subi	r19, 0x01	; 1
    2b9e:	80 40       	sbci	r24, 0x00	; 0
    2ba0:	90 40       	sbci	r25, 0x00	; 0
    2ba2:	e1 f7       	brne	.-8      	; 0x2b9c <loop+0xf4c>
    2ba4:	34 c0       	rjmp	.+104    	; 0x2c0e <loop+0xfbe>
          _delay_ms(100);    
          avanzaStato(TinputKM);
        }
        else if ((mezzo.Carb == "D") || (distr_selezionato == 1))
        {
          mezzo.Carb = "D";
    2ba6:	63 eb       	ldi	r22, 0xB3	; 179
    2ba8:	75 e0       	ldi	r23, 0x05	; 5
    2baa:	89 ed       	ldi	r24, 0xD9	; 217
    2bac:	9a e0       	ldi	r25, 0x0A	; 10
    2bae:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          abilitaPulser('D');          
    2bb2:	84 e4       	ldi	r24, 0x44	; 68
    2bb4:	0e 94 c5 0a 	call	0x158a	; 0x158a <_Z13abilitaPulserc>
          Rele_Abilitazione1(0, 7); // chiudi relè
    2bb8:	67 e0       	ldi	r22, 0x07	; 7
    2bba:	70 e0       	ldi	r23, 0x00	; 0
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_Z18Rele_Abilitazione1ii>
          StatoAttuale = "POMPA 1";
    2bc4:	63 e1       	ldi	r22, 0x13	; 19
    2bc6:	76 e0       	ldi	r23, 0x06	; 6
    2bc8:	8a e9       	ldi	r24, 0x9A	; 154
    2bca:	9a e0       	ldi	r25, 0x0A	; 10
    2bcc:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          RaccoltaDati[2] = mezzo.Carb;
    2bd0:	69 ed       	ldi	r22, 0xD9	; 217
    2bd2:	7a e0       	ldi	r23, 0x0A	; 10
    2bd4:	8f e6       	ldi	r24, 0x6F	; 111
    2bd6:	9a e0       	ldi	r25, 0x0A	; 10
    2bd8:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
          righeDisplay[1] =  "****** KM ******";
    2bdc:	6a e2       	ldi	r22, 0x2A	; 42
    2bde:	76 e0       	ldi	r23, 0x06	; 6
    2be0:	85 e4       	ldi	r24, 0x45	; 69
    2be2:	9a e0       	ldi	r25, 0x0A	; 10
    2be4:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          righeDisplay[2] = "KM:";
    2be8:	6b e3       	ldi	r22, 0x3B	; 59
    2bea:	76 e0       	ldi	r23, 0x06	; 6
    2bec:	8b e4       	ldi	r24, 0x4B	; 75
    2bee:	9a e0       	ldi	r25, 0x0A	; 10
    2bf0:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          righeDisplay[3] = "#:Conferma";      
    2bf4:	6f e3       	ldi	r22, 0x3F	; 63
    2bf6:	76 e0       	ldi	r23, 0x06	; 6
    2bf8:	81 e5       	ldi	r24, 0x51	; 81
    2bfa:	9a e0       	ldi	r25, 0x0A	; 10
    2bfc:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
    2c00:	2f ef       	ldi	r18, 0xFF	; 255
    2c02:	31 ee       	ldi	r19, 0xE1	; 225
    2c04:	84 e0       	ldi	r24, 0x04	; 4
    2c06:	21 50       	subi	r18, 0x01	; 1
    2c08:	30 40       	sbci	r19, 0x00	; 0
    2c0a:	80 40       	sbci	r24, 0x00	; 0
    2c0c:	e1 f7       	brne	.-8      	; 0x2c06 <loop+0xfb6>
    2c0e:	00 c0       	rjmp	.+0      	; 0x2c10 <loop+0xfc0>
    2c10:	00 00       	nop
          _delay_ms(100);     
          avanzaStato(TinputKM);
    2c12:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputKM>
    2c16:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputKM+0x1>
    2c1a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputKM+0x2>
    2c1e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputKM+0x3>
    2c22:	5b c0       	rjmp	.+182    	; 0x2cda <loop+0x108a>

        // CONTATTO PISTOLA DIESEL

        if ((PINA & _BV(PA1)) && (mezzo.Carb == "D"))
        {
          RaccoltaDati[3] = String(lt);
    2c24:	22 e0       	ldi	r18, 0x02	; 2
    2c26:	b7 01       	movw	r22, r14
    2c28:	a6 01       	movw	r20, r12
    2c2a:	ce 01       	movw	r24, r28
    2c2c:	01 96       	adiw	r24, 0x01	; 1
    2c2e:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <_ZN6StringC1Edh>
    2c32:	be 01       	movw	r22, r28
    2c34:	6f 5f       	subi	r22, 0xFF	; 255
    2c36:	7f 4f       	sbci	r23, 0xFF	; 255
    2c38:	85 e7       	ldi	r24, 0x75	; 117
    2c3a:	9a e0       	ldi	r25, 0x0A	; 10
    2c3c:	0e 94 f6 39 	call	0x73ec	; 0x73ec <_ZN6StringaSEOS_>
    2c40:	ce 01       	movw	r24, r28
    2c42:	01 96       	adiw	r24, 0x01	; 1
    2c44:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
          StatoAttuale = "STOP EROGAZIONE";
    2c48:	68 ee       	ldi	r22, 0xE8	; 232
    2c4a:	77 e0       	ldi	r23, 0x07	; 7
    2c4c:	8a e9       	ldi	r24, 0x9A	; 154
    2c4e:	9a e0       	ldi	r25, 0x0A	; 10
    2c50:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          Rele_Abilitazione2(1, 7); //  apri relè
    2c54:	67 e0       	ldi	r22, 0x07	; 7
    2c56:	70 e0       	ldi	r23, 0x00	; 0
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	0e 94 39 0b 	call	0x1672	; 0x1672 <_Z18Rele_Abilitazione2ii>
          Rele_Abilitazione1(1, 7); //  apri relè
    2c60:	67 e0       	ldi	r22, 0x07	; 7
    2c62:	70 e0       	ldi	r23, 0x00	; 0
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_Z18Rele_Abilitazione1ii>
          //TOGGLE_BIT(PORTA, 1);
          avanzaStato(TmaxInviodati);
    2c6c:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxInviodati>
    2c70:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxInviodati+0x1>
    2c74:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxInviodati+0x2>
    2c78:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxInviodati+0x3>
    2c7c:	0e 94 5d 06 	call	0xcba	; 0xcba <_Z11avanzaStatom>
    2c80:	b2 cc       	rjmp	.-1692   	; 0x25e6 <loop+0x996>

        // CONTATTO PISTOLA BENZINA

        if  ((PINB & _BV(PB1)) && (mezzo.Carb == "B"))
        {
          RaccoltaDati[3] = String(lt);
    2c82:	22 e0       	ldi	r18, 0x02	; 2
    2c84:	b7 01       	movw	r22, r14
    2c86:	a6 01       	movw	r20, r12
    2c88:	ce 01       	movw	r24, r28
    2c8a:	01 96       	adiw	r24, 0x01	; 1
    2c8c:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <_ZN6StringC1Edh>
    2c90:	be 01       	movw	r22, r28
    2c92:	6f 5f       	subi	r22, 0xFF	; 255
    2c94:	7f 4f       	sbci	r23, 0xFF	; 255
    2c96:	85 e7       	ldi	r24, 0x75	; 117
    2c98:	9a e0       	ldi	r25, 0x0A	; 10
    2c9a:	0e 94 f6 39 	call	0x73ec	; 0x73ec <_ZN6StringaSEOS_>
    2c9e:	ce 01       	movw	r24, r28
    2ca0:	01 96       	adiw	r24, 0x01	; 1
    2ca2:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>

          StatoAttuale = "STOP EROGAZIONE";
    2ca6:	68 ee       	ldi	r22, 0xE8	; 232
    2ca8:	77 e0       	ldi	r23, 0x07	; 7
    2caa:	8a e9       	ldi	r24, 0x9A	; 154
    2cac:	9a e0       	ldi	r25, 0x0A	; 10
    2cae:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
          Rele_Abilitazione2(1, 7); //  apri relè
    2cb2:	67 e0       	ldi	r22, 0x07	; 7
    2cb4:	70 e0       	ldi	r23, 0x00	; 0
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	0e 94 39 0b 	call	0x1672	; 0x1672 <_Z18Rele_Abilitazione2ii>
          Rele_Abilitazione1(1, 7); //  apri relè
    2cbe:	67 e0       	ldi	r22, 0x07	; 7
    2cc0:	70 e0       	ldi	r23, 0x00	; 0
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_Z18Rele_Abilitazione1ii>
          avanzaStato(TmaxInviodati);
    2cca:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxInviodati>
    2cce:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxInviodati+0x1>
    2cd2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxInviodati+0x2>
    2cd6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxInviodati+0x3>
    2cda:	0e 94 5d 06 	call	0xcba	; 0xcba <_Z11avanzaStatom>
    2cde:	3f ce       	rjmp	.-898    	; 0x295e <loop+0xd0e>

  nowTimer = DS3231M.now();
  secs = nowTimer.secondstime();
  if ((UltimoPassaggioStato + Timer - secs) <= 1) Azzera();

}
    2ce0:	aa 96       	adiw	r28, 0x2a	; 42
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	ff 90       	pop	r15
    2cf6:	ef 90       	pop	r14
    2cf8:	df 90       	pop	r13
    2cfa:	cf 90       	pop	r12
    2cfc:	08 95       	ret

00002cfe <__vector_4>:
  73 litri al minuto
  73/60 = 1,22 lt/sec
  1,22*100 = 122 Hz
***********************************************************************/

ISR(PCINT0_vect) {
    2cfe:	1f 92       	push	r1
    2d00:	0f 92       	push	r0
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	0f 92       	push	r0
    2d06:	11 24       	eor	r1, r1
    2d08:	0b b6       	in	r0, 0x3b	; 59
    2d0a:	0f 92       	push	r0
    2d0c:	2f 93       	push	r18
    2d0e:	3f 93       	push	r19
    2d10:	4f 93       	push	r20
    2d12:	5f 93       	push	r21
    2d14:	6f 93       	push	r22
    2d16:	7f 93       	push	r23
    2d18:	8f 93       	push	r24
    2d1a:	9f 93       	push	r25
    2d1c:	af 93       	push	r26
    2d1e:	bf 93       	push	r27
    2d20:	ef 93       	push	r30
    2d22:	ff 93       	push	r31
  if (PINA & _BV(PA5)) {
    2d24:	05 9b       	sbis	0x00, 5	; 0
    2d26:	16 c0       	rjmp	.+44     	; 0x2d54 <__vector_4+0x56>
    impulsi++;
    2d28:	80 91 8e 0a 	lds	r24, 0x0A8E	; 0x800a8e <impulsi>
    2d2c:	90 91 8f 0a 	lds	r25, 0x0A8F	; 0x800a8f <impulsi+0x1>
    2d30:	01 96       	adiw	r24, 0x01	; 1
    2d32:	90 93 8f 0a 	sts	0x0A8F, r25	; 0x800a8f <impulsi+0x1>
    2d36:	80 93 8e 0a 	sts	0x0A8E, r24	; 0x800a8e <impulsi>
    //_delay_ms(debounceDelay);
    my_delay_ms(debounceDelay);
    2d3a:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <debounceDelay>
    2d3e:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <debounceDelay+0x1>
    2d42:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <debounceDelay+0x2>
    2d46:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <debounceDelay+0x3>
    2d4a:	0e 94 6e 34 	call	0x68dc	; 0x68dc <__fixsfsi>
    2d4e:	cb 01       	movw	r24, r22
    2d50:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <_Z11my_delay_msi>
  }
  if (PINA & _BV(PA6)) {
    2d54:	06 9b       	sbis	0x00, 6	; 0
    2d56:	16 c0       	rjmp	.+44     	; 0x2d84 <__vector_4+0x86>
    impulsi++;
    2d58:	80 91 8e 0a 	lds	r24, 0x0A8E	; 0x800a8e <impulsi>
    2d5c:	90 91 8f 0a 	lds	r25, 0x0A8F	; 0x800a8f <impulsi+0x1>
    2d60:	01 96       	adiw	r24, 0x01	; 1
    2d62:	90 93 8f 0a 	sts	0x0A8F, r25	; 0x800a8f <impulsi+0x1>
    2d66:	80 93 8e 0a 	sts	0x0A8E, r24	; 0x800a8e <impulsi>
    //_delay_ms(debounceDelay);
    my_delay_ms(debounceDelay);
    2d6a:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <debounceDelay>
    2d6e:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <debounceDelay+0x1>
    2d72:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <debounceDelay+0x2>
    2d76:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <debounceDelay+0x3>
    2d7a:	0e 94 6e 34 	call	0x68dc	; 0x68dc <__fixsfsi>
    2d7e:	cb 01       	movw	r24, r22
    2d80:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <_Z11my_delay_msi>
  }
}
    2d84:	ff 91       	pop	r31
    2d86:	ef 91       	pop	r30
    2d88:	bf 91       	pop	r27
    2d8a:	af 91       	pop	r26
    2d8c:	9f 91       	pop	r25
    2d8e:	8f 91       	pop	r24
    2d90:	7f 91       	pop	r23
    2d92:	6f 91       	pop	r22
    2d94:	5f 91       	pop	r21
    2d96:	4f 91       	pop	r20
    2d98:	3f 91       	pop	r19
    2d9a:	2f 91       	pop	r18
    2d9c:	0f 90       	pop	r0
    2d9e:	0b be       	out	0x3b, r0	; 59
    2da0:	0f 90       	pop	r0
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	0f 90       	pop	r0
    2da6:	1f 90       	pop	r1
    2da8:	18 95       	reti

00002daa <__vector_7>:
/***********************************************************************/

// interrupt per pulsanti abilitazione diesele benzina

ISR(PCINT3_vect) {
    2daa:	1f 92       	push	r1
    2dac:	0f 92       	push	r0
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	0f 92       	push	r0
    2db2:	11 24       	eor	r1, r1
    2db4:	8f 93       	push	r24
    2db6:	9f 93       	push	r25

  if (stato_procedura == 4)
    2db8:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <stato_procedura>
    2dbc:	90 91 91 0a 	lds	r25, 0x0A91	; 0x800a91 <stato_procedura+0x1>
    2dc0:	04 97       	sbiw	r24, 0x04	; 4
    2dc2:	09 f0       	breq	.+2      	; 0x2dc6 <__vector_7+0x1c>
    2dc4:	6a c0       	rjmp	.+212    	; 0x2e9a <__vector_7+0xf0>
  {
    if (PIND & _BV(PD6))
    2dc6:	4e 9b       	sbis	0x09, 6	; 9
    2dc8:	1c c0       	rjmp	.+56     	; 0x2e02 <__vector_7+0x58>
    {
      intConsecutivePresses++;  // increment counter for number of presses           
    2dca:	80 91 ed 0a 	lds	r24, 0x0AED	; 0x800aed <intConsecutivePresses>
    2dce:	90 91 ee 0a 	lds	r25, 0x0AEE	; 0x800aee <intConsecutivePresses+0x1>
    2dd2:	01 96       	adiw	r24, 0x01	; 1
    2dd4:	90 93 ee 0a 	sts	0x0AEE, r25	; 0x800aee <intConsecutivePresses+0x1>
    2dd8:	80 93 ed 0a 	sts	0x0AED, r24	; 0x800aed <intConsecutivePresses>
      if (intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES)
    2ddc:	80 91 ed 0a 	lds	r24, 0x0AED	; 0x800aed <intConsecutivePresses>
    2de0:	90 91 ee 0a 	lds	r25, 0x0AEE	; 0x800aee <intConsecutivePresses+0x1>
    2de4:	18 16       	cp	r1, r24
    2de6:	19 06       	cpc	r1, r25
    2de8:	1c f5       	brge	.+70     	; 0x2e30 <__vector_7+0x86>
      { // if enough presses to constitute a press
        intConsecutivePresses = 0;                    // and reset press counts
    2dea:	10 92 ee 0a 	sts	0x0AEE, r1	; 0x800aee <intConsecutivePresses+0x1>
    2dee:	10 92 ed 0a 	sts	0x0AED, r1	; 0x800aed <intConsecutivePresses>
        intConsecutiveNonPresses = 0;        
    2df2:	10 92 ec 0a 	sts	0x0AEC, r1	; 0x800aec <intConsecutiveNonPresses+0x1>
    2df6:	10 92 eb 0a 	sts	0x0AEB, r1	; 0x800aeb <intConsecutiveNonPresses>
        distr_selezionato = 2;
    2dfa:	82 e0       	ldi	r24, 0x02	; 2
    2dfc:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <distr_selezionato>
    2e00:	17 c0       	rjmp	.+46     	; 0x2e30 <__vector_7+0x86>
      }
    }
    else  {           // else if button is not pressed (logic low)
      intConsecutiveNonPresses++;
    2e02:	80 91 eb 0a 	lds	r24, 0x0AEB	; 0x800aeb <intConsecutiveNonPresses>
    2e06:	90 91 ec 0a 	lds	r25, 0x0AEC	; 0x800aec <intConsecutiveNonPresses+0x1>
    2e0a:	01 96       	adiw	r24, 0x01	; 1
    2e0c:	90 93 ec 0a 	sts	0x0AEC, r25	; 0x800aec <intConsecutiveNonPresses+0x1>
    2e10:	80 93 eb 0a 	sts	0x0AEB, r24	; 0x800aeb <intConsecutiveNonPresses>
      if (intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    2e14:	80 91 eb 0a 	lds	r24, 0x0AEB	; 0x800aeb <intConsecutiveNonPresses>
    2e18:	90 91 ec 0a 	lds	r25, 0x0AEC	; 0x800aec <intConsecutiveNonPresses+0x1>
    2e1c:	02 97       	sbiw	r24, 0x02	; 2
    2e1e:	44 f0       	brlt	.+16     	; 0x2e30 <__vector_7+0x86>
        intConsecutivePresses = 0;                      // reset press counts
    2e20:	10 92 ee 0a 	sts	0x0AEE, r1	; 0x800aee <intConsecutivePresses+0x1>
    2e24:	10 92 ed 0a 	sts	0x0AED, r1	; 0x800aed <intConsecutivePresses>
        intConsecutiveNonPresses = 0;
    2e28:	10 92 ec 0a 	sts	0x0AEC, r1	; 0x800aec <intConsecutiveNonPresses+0x1>
    2e2c:	10 92 eb 0a 	sts	0x0AEB, r1	; 0x800aeb <intConsecutiveNonPresses>
      }
    }

    if (PIND & _BV(PD7))
    2e30:	4f 9b       	sbis	0x09, 7	; 9
    2e32:	1c c0       	rjmp	.+56     	; 0x2e6c <__vector_7+0xc2>
    {      
      intConsecutivePresses++;  // increment counter for number of presses
    2e34:	80 91 ed 0a 	lds	r24, 0x0AED	; 0x800aed <intConsecutivePresses>
    2e38:	90 91 ee 0a 	lds	r25, 0x0AEE	; 0x800aee <intConsecutivePresses+0x1>
    2e3c:	01 96       	adiw	r24, 0x01	; 1
    2e3e:	90 93 ee 0a 	sts	0x0AEE, r25	; 0x800aee <intConsecutivePresses+0x1>
    2e42:	80 93 ed 0a 	sts	0x0AED, r24	; 0x800aed <intConsecutivePresses>
      if (intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES)
    2e46:	80 91 ed 0a 	lds	r24, 0x0AED	; 0x800aed <intConsecutivePresses>
    2e4a:	90 91 ee 0a 	lds	r25, 0x0AEE	; 0x800aee <intConsecutivePresses+0x1>
    2e4e:	18 16       	cp	r1, r24
    2e50:	19 06       	cpc	r1, r25
    2e52:	1c f5       	brge	.+70     	; 0x2e9a <__vector_7+0xf0>
      { // if enough presses to constitute a press
        intConsecutivePresses = 0;                    // and reset press counts
    2e54:	10 92 ee 0a 	sts	0x0AEE, r1	; 0x800aee <intConsecutivePresses+0x1>
    2e58:	10 92 ed 0a 	sts	0x0AED, r1	; 0x800aed <intConsecutivePresses>
        intConsecutiveNonPresses = 0;        
    2e5c:	10 92 ec 0a 	sts	0x0AEC, r1	; 0x800aec <intConsecutiveNonPresses+0x1>
    2e60:	10 92 eb 0a 	sts	0x0AEB, r1	; 0x800aeb <intConsecutiveNonPresses>
        distr_selezionato = 1;
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <distr_selezionato>
    2e6a:	17 c0       	rjmp	.+46     	; 0x2e9a <__vector_7+0xf0>
      }
    }
    else  {            // else if button is not pressed (logic low)
      intConsecutiveNonPresses++;
    2e6c:	80 91 eb 0a 	lds	r24, 0x0AEB	; 0x800aeb <intConsecutiveNonPresses>
    2e70:	90 91 ec 0a 	lds	r25, 0x0AEC	; 0x800aec <intConsecutiveNonPresses+0x1>
    2e74:	01 96       	adiw	r24, 0x01	; 1
    2e76:	90 93 ec 0a 	sts	0x0AEC, r25	; 0x800aec <intConsecutiveNonPresses+0x1>
    2e7a:	80 93 eb 0a 	sts	0x0AEB, r24	; 0x800aeb <intConsecutiveNonPresses>
      if (intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    2e7e:	80 91 eb 0a 	lds	r24, 0x0AEB	; 0x800aeb <intConsecutiveNonPresses>
    2e82:	90 91 ec 0a 	lds	r25, 0x0AEC	; 0x800aec <intConsecutiveNonPresses+0x1>
    2e86:	02 97       	sbiw	r24, 0x02	; 2
    2e88:	44 f0       	brlt	.+16     	; 0x2e9a <__vector_7+0xf0>
        intConsecutivePresses = 0;                     // reset press counts
    2e8a:	10 92 ee 0a 	sts	0x0AEE, r1	; 0x800aee <intConsecutivePresses+0x1>
    2e8e:	10 92 ed 0a 	sts	0x0AED, r1	; 0x800aed <intConsecutivePresses>
        intConsecutiveNonPresses = 0;
    2e92:	10 92 ec 0a 	sts	0x0AEC, r1	; 0x800aec <intConsecutiveNonPresses+0x1>
    2e96:	10 92 eb 0a 	sts	0x0AEB, r1	; 0x800aeb <intConsecutiveNonPresses>
      }
    }
  }
    2e9a:	9f 91       	pop	r25
    2e9c:	8f 91       	pop	r24
    2e9e:	0f 90       	pop	r0
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	0f 90       	pop	r0
    2ea4:	1f 90       	pop	r1
    2ea6:	18 95       	reti

00002ea8 <_GLOBAL__sub_I_ParametriCCEC>:
    2ea8:	8f 92       	push	r8
    2eaa:	af 92       	push	r10
    2eac:	cf 92       	push	r12
    2eae:	ef 92       	push	r14
    2eb0:	0f 93       	push	r16
    2eb2:	cf 93       	push	r28
    2eb4:	df 93       	push	r29
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    2eb6:	00 e0       	ldi	r16, 0x00	; 0
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	40 e0       	ldi	r20, 0x00	; 0
    2ebc:	60 e0       	ldi	r22, 0x00	; 0
    2ebe:	89 e2       	ldi	r24, 0x29	; 41
    2ec0:	9b e0       	ldi	r25, 0x0B	; 11
    2ec2:	0e 94 29 36 	call	0x6c52	; 0x6c52 <_ZN9IPAddressC1Ehhhh>
ParametriCCEC_TypeDef Parametri[numero_parametri] =
{ {"DNS NAME SERVER\0", "ccec.no.dipvvf.it\0", 1000},
  {"IPCCEC\0", "192.168.3.2\0", 1020},
  {"Disponibile\0", "2000\0", 1035},
  {"CodiceSede\0", "NO1001\0", 1040}
    2ec6:	6d e6       	ldi	r22, 0x6D	; 109
    2ec8:	71 e0       	ldi	r23, 0x01	; 1
    2eca:	8f ee       	ldi	r24, 0xEF	; 239
    2ecc:	9a e0       	ldi	r25, 0x0A	; 10
    2ece:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2ed2:	6e e7       	ldi	r22, 0x7E	; 126
    2ed4:	71 e0       	ldi	r23, 0x01	; 1
    2ed6:	85 ef       	ldi	r24, 0xF5	; 245
    2ed8:	9a e0       	ldi	r25, 0x0A	; 10
    2eda:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2ede:	cf ee       	ldi	r28, 0xEF	; 239
    2ee0:	da e0       	ldi	r29, 0x0A	; 10
    2ee2:	88 ee       	ldi	r24, 0xE8	; 232
    2ee4:	93 e0       	ldi	r25, 0x03	; 3
    2ee6:	9d 87       	std	Y+13, r25	; 0x0d
    2ee8:	8c 87       	std	Y+12, r24	; 0x0c
    2eea:	61 e9       	ldi	r22, 0x91	; 145
    2eec:	71 e0       	ldi	r23, 0x01	; 1
    2eee:	8d ef       	ldi	r24, 0xFD	; 253
    2ef0:	9a e0       	ldi	r25, 0x0A	; 10
    2ef2:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2ef6:	69 e9       	ldi	r22, 0x99	; 153
    2ef8:	71 e0       	ldi	r23, 0x01	; 1
    2efa:	83 e0       	ldi	r24, 0x03	; 3
    2efc:	9b e0       	ldi	r25, 0x0B	; 11
    2efe:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2f02:	8c ef       	ldi	r24, 0xFC	; 252
    2f04:	93 e0       	ldi	r25, 0x03	; 3
    2f06:	9b 8f       	std	Y+27, r25	; 0x1b
    2f08:	8a 8f       	std	Y+26, r24	; 0x1a
    2f0a:	66 ea       	ldi	r22, 0xA6	; 166
    2f0c:	71 e0       	ldi	r23, 0x01	; 1
    2f0e:	8b e0       	ldi	r24, 0x0B	; 11
    2f10:	9b e0       	ldi	r25, 0x0B	; 11
    2f12:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2f16:	63 eb       	ldi	r22, 0xB3	; 179
    2f18:	71 e0       	ldi	r23, 0x01	; 1
    2f1a:	81 e1       	ldi	r24, 0x11	; 17
    2f1c:	9b e0       	ldi	r25, 0x0B	; 11
    2f1e:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2f22:	8b e0       	ldi	r24, 0x0B	; 11
    2f24:	94 e0       	ldi	r25, 0x04	; 4
    2f26:	99 a7       	std	Y+41, r25	; 0x29
    2f28:	88 a7       	std	Y+40, r24	; 0x28
    2f2a:	69 eb       	ldi	r22, 0xB9	; 185
    2f2c:	71 e0       	ldi	r23, 0x01	; 1
    2f2e:	89 e1       	ldi	r24, 0x19	; 25
    2f30:	9b e0       	ldi	r25, 0x0B	; 11
    2f32:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2f36:	65 ec       	ldi	r22, 0xC5	; 197
    2f38:	71 e0       	ldi	r23, 0x01	; 1
    2f3a:	8f e1       	ldi	r24, 0x1F	; 31
    2f3c:	9b e0       	ldi	r25, 0x0B	; 11
    2f3e:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2f42:	80 e1       	ldi	r24, 0x10	; 16
    2f44:	94 e0       	ldi	r25, 0x04	; 4
    2f46:	9f ab       	std	Y+55, r25	; 0x37
    2f48:	8e ab       	std	Y+54, r24	; 0x36

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;
const uint8_t I2C_PCA9534_ADDR = 0x20;

struct mezzoType {
    2f4a:	68 ed       	ldi	r22, 0xD8	; 216
    2f4c:	71 e0       	ldi	r23, 0x01	; 1
    2f4e:	89 ed       	ldi	r24, 0xD9	; 217
    2f50:	9a e0       	ldi	r25, 0x0A	; 10
    2f52:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2f56:	68 ed       	ldi	r22, 0xD8	; 216
    2f58:	71 e0       	ldi	r23, 0x01	; 1
    2f5a:	8f ed       	ldi	r24, 0xDF	; 223
    2f5c:	9a e0       	ldi	r25, 0x0A	; 10
    2f5e:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2f62:	68 ed       	ldi	r22, 0xD8	; 216
    2f64:	71 e0       	ldi	r23, 0x01	; 1
    2f66:	85 ee       	ldi	r24, 0xE5	; 229
    2f68:	9a e0       	ldi	r25, 0x0A	; 10
    2f6a:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };       // Buffer dove memorizzo la UID del Badge
uint8_t uidLength;                             // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
uint8_t uidMezzo[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer dove memorizzo la UID del Badge Mezzo
boolean alreadyTimbrata = false;

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
    2f6e:	1f 92       	push	r1
    2f70:	83 e0       	ldi	r24, 0x03	; 3
    2f72:	8f 93       	push	r24
    2f74:	87 e0       	ldi	r24, 0x07	; 7
    2f76:	88 2e       	mov	r8, r24
    2f78:	96 e0       	ldi	r25, 0x06	; 6
    2f7a:	a9 2e       	mov	r10, r25
    2f7c:	25 e0       	ldi	r18, 0x05	; 5
    2f7e:	c2 2e       	mov	r12, r18
    2f80:	34 e0       	ldi	r19, 0x04	; 4
    2f82:	e3 2e       	mov	r14, r19
    2f84:	21 e0       	ldi	r18, 0x01	; 1
    2f86:	42 e0       	ldi	r20, 0x02	; 2
    2f88:	67 e2       	ldi	r22, 0x27	; 39
    2f8a:	87 eb       	ldi	r24, 0xB7	; 183
    2f8c:	9a e0       	ldi	r25, 0x0A	; 10
    2f8e:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);
    2f92:	43 e0       	ldi	r20, 0x03	; 3
    2f94:	64 e0       	ldi	r22, 0x04	; 4
    2f96:	80 ea       	ldi	r24, 0xA0	; 160
    2f98:	9a e0       	ldi	r25, 0x0A	; 10
    2f9a:	fc d3       	rcall	.+2040   	; 0x3794 <_ZN9NFC_PN532C1Ehh>

String StatoAttuale = "START...";
    2f9c:	68 ef       	ldi	r22, 0xF8	; 248
    2f9e:	77 e0       	ldi	r23, 0x07	; 7
    2fa0:	8a e9       	ldi	r24, 0x9A	; 154
    2fa2:	9a e0       	ldi	r25, 0x0A	; 10
    2fa4:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
String strURLAPI = "";
    2fa8:	68 ed       	ldi	r22, 0xD8	; 216
    2faa:	71 e0       	ldi	r23, 0x01	; 1
    2fac:	84 e9       	ldi	r24, 0x94	; 148
    2fae:	9a e0       	ldi	r25, 0x0A	; 10
    2fb0:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>

uint8_t distr_selezionato = 0;
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    2fb4:	68 ed       	ldi	r22, 0xD8	; 216
    2fb6:	71 e0       	ldi	r23, 0x01	; 1
    2fb8:	87 e8       	ldi	r24, 0x87	; 135
    2fba:	9a e0       	ldi	r25, 0x0A	; 10
    2fbc:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
    2fc0:	68 ed       	ldi	r22, 0xD8	; 216
    2fc2:	71 e0       	ldi	r23, 0x01	; 1
    2fc4:	83 e6       	ldi	r24, 0x63	; 99
    2fc6:	9a e0       	ldi	r25, 0x0A	; 10
    2fc8:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2fcc:	68 ed       	ldi	r22, 0xD8	; 216
    2fce:	71 e0       	ldi	r23, 0x01	; 1
    2fd0:	89 e6       	ldi	r24, 0x69	; 105
    2fd2:	9a e0       	ldi	r25, 0x0A	; 10
    2fd4:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2fd8:	68 ed       	ldi	r22, 0xD8	; 216
    2fda:	71 e0       	ldi	r23, 0x01	; 1
    2fdc:	8f e6       	ldi	r24, 0x6F	; 111
    2fde:	9a e0       	ldi	r25, 0x0A	; 10
    2fe0:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2fe4:	68 ed       	ldi	r22, 0xD8	; 216
    2fe6:	71 e0       	ldi	r23, 0x01	; 1
    2fe8:	85 e7       	ldi	r24, 0x75	; 117
    2fea:	9a e0       	ldi	r25, 0x0A	; 10
    2fec:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2ff0:	68 ed       	ldi	r22, 0xD8	; 216
    2ff2:	71 e0       	ldi	r23, 0x01	; 1
    2ff4:	8b e7       	ldi	r24, 0x7B	; 123
    2ff6:	9a e0       	ldi	r25, 0x0A	; 10
    2ff8:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    2ffc:	68 ed       	ldi	r22, 0xD8	; 216
    2ffe:	71 e0       	ldi	r23, 0x01	; 1
    3000:	81 e8       	ldi	r24, 0x81	; 129
    3002:	9a e0       	ldi	r25, 0x0A	; 10
    3004:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
// String Carburante = "X";
String Risposta = "";
    3008:	68 ed       	ldi	r22, 0xD8	; 216
    300a:	71 e0       	ldi	r23, 0x01	; 1
    300c:	8d e5       	ldi	r24, 0x5D	; 93
    300e:	9a e0       	ldi	r25, 0x0A	; 10
    3010:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
String Messaggio = "";
    3014:	68 ed       	ldi	r22, 0xD8	; 216
    3016:	71 e0       	ldi	r23, 0x01	; 1
    3018:	87 e5       	ldi	r24, 0x57	; 87
    301a:	9a e0       	ldi	r25, 0x0A	; 10
    301c:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
String righeDisplay[] = {"X", "X", "X", "X"};
    3020:	6d e2       	ldi	r22, 0x2D	; 45
    3022:	75 e0       	ldi	r23, 0x05	; 5
    3024:	8f e3       	ldi	r24, 0x3F	; 63
    3026:	9a e0       	ldi	r25, 0x0A	; 10
    3028:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    302c:	6d e2       	ldi	r22, 0x2D	; 45
    302e:	75 e0       	ldi	r23, 0x05	; 5
    3030:	85 e4       	ldi	r24, 0x45	; 69
    3032:	9a e0       	ldi	r25, 0x0A	; 10
    3034:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    3038:	6d e2       	ldi	r22, 0x2D	; 45
    303a:	75 e0       	ldi	r23, 0x05	; 5
    303c:	8b e4       	ldi	r24, 0x4B	; 75
    303e:	9a e0       	ldi	r25, 0x0A	; 10
    3040:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    3044:	6d e2       	ldi	r22, 0x2D	; 45
    3046:	75 e0       	ldi	r23, 0x05	; 5
    3048:	81 e5       	ldi	r24, 0x51	; 81
    304a:	9a e0       	ldi	r25, 0x0A	; 10
    304c:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
char CodSede[] = "SA1001";
/********************************************************************************************/
/*                    Configurazione Rete                       */
/********************************************************************************************/

IPAddress ipCCEC(192, 168, 3, 2);
    3050:	02 e0       	ldi	r16, 0x02	; 2
    3052:	23 e0       	ldi	r18, 0x03	; 3
    3054:	48 ea       	ldi	r20, 0xA8	; 168
    3056:	60 ec       	ldi	r22, 0xC0	; 192
    3058:	89 e3       	ldi	r24, 0x39	; 57
    305a:	9a e0       	ldi	r25, 0x0A	; 10
    305c:	0e 94 29 36 	call	0x6c52	; 0x6c52 <_ZN9IPAddressC1Ehhhh>
IPAddress myDns(192, 168, 1, 21); // DNS
    3060:	05 e1       	ldi	r16, 0x15	; 21
    3062:	21 e0       	ldi	r18, 0x01	; 1
    3064:	48 ea       	ldi	r20, 0xA8	; 168
    3066:	60 ec       	ldi	r22, 0xC0	; 192
    3068:	83 e3       	ldi	r24, 0x33	; 51
    306a:	9a e0       	ldi	r25, 0x0A	; 10
    306c:	0e 94 29 36 	call	0x6c52	; 0x6c52 <_ZN9IPAddressC1Ehhhh>
IPAddress gateway(192, 168, 0, 1); // GATEWAY
    3070:	01 e0       	ldi	r16, 0x01	; 1
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	48 ea       	ldi	r20, 0xA8	; 168
    3076:	60 ec       	ldi	r22, 0xC0	; 192
    3078:	8d e2       	ldi	r24, 0x2D	; 45
    307a:	9a e0       	ldi	r25, 0x0A	; 10
    307c:	0e 94 29 36 	call	0x6c52	; 0x6c52 <_ZN9IPAddressC1Ehhhh>
IPAddress subnet(255, 255, 0, 0); // SUBNET
    3080:	00 e0       	ldi	r16, 0x00	; 0
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	4f ef       	ldi	r20, 0xFF	; 255
    3086:	6f ef       	ldi	r22, 0xFF	; 255
    3088:	87 e2       	ldi	r24, 0x27	; 39
    308a:	9a e0       	ldi	r25, 0x0A	; 10
    308c:	0e 94 29 36 	call	0x6c52	; 0x6c52 <_ZN9IPAddressC1Ehhhh>

char serverATE[]  = "wbpate-test.dipvvf.it";
char serverGAC[]  = "gacweb-test.dipvvf.it";
char serverREST[] = "ccec.no.dipvvf.it";

EthernetClient clientLOCAL;
    3090:	8a e1       	ldi	r24, 0x1A	; 26
    3092:	9a e0       	ldi	r25, 0x0A	; 10
    3094:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_ZN14EthernetClientC1Ev>
EthernetClient clientATE;
    3098:	8d e0       	ldi	r24, 0x0D	; 13
    309a:	9a e0       	ldi	r25, 0x0A	; 10
    309c:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_ZN14EthernetClientC1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/*                    Real Time Clock                       */
/********************************************************************************************/
DS3231M_Class DS3231M;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	9a e0       	ldi	r25, 0x0A	; 10
    30a4:	0e 94 c3 20 	call	0x4186	; 0x4186 <_ZN13DS3231M_ClassC1Ev>
const uint8_t SPRINTF_BUFFER_SIZE =     32;
char          inputBuffer[SPRINTF_BUFFER_SIZE];
unsigned long secs;                            // store the seconds value
unsigned long UltimoPassaggioStato = 0;        // Timer Stati Procedura
unsigned long Timer = 0;                       // Timer
DateTime nowTimer;
    30a8:	40 e0       	ldi	r20, 0x00	; 0
    30aa:	50 e0       	ldi	r21, 0x00	; 0
    30ac:	ba 01       	movw	r22, r20
    30ae:	8f ee       	ldi	r24, 0xEF	; 239
    30b0:	99 e0       	ldi	r25, 0x09	; 9
    30b2:	fd d6       	rcall	.+3578   	; 0x3eae <_ZN8DateTimeC1Em>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    30b4:	68 ed       	ldi	r22, 0xD8	; 216
    30b6:	71 e0       	ldi	r23, 0x01	; 1
    30b8:	89 ee       	ldi	r24, 0xE9	; 233
    30ba:	99 e0       	ldi	r25, 0x09	; 9
    30bc:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
String KM = "";
    30c0:	68 ed       	ldi	r22, 0xD8	; 216
    30c2:	71 e0       	ldi	r23, 0x01	; 1
    30c4:	83 ee       	ldi	r24, 0xE3	; 227
    30c6:	99 e0       	ldi	r25, 0x09	; 9
    30c8:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', '.'}
};

PCA9534 gpio;
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	80 ee       	ldi	r24, 0xE0	; 224
    30d2:	99 e0       	ldi	r25, 0x09	; 9
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    30d4:	df 91       	pop	r29
    30d6:	cf 91       	pop	r28
    30d8:	0f 91       	pop	r16
    30da:	ef 90       	pop	r14
    30dc:	cf 90       	pop	r12
    30de:	af 90       	pop	r10
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', '.'}
};

PCA9534 gpio;
    30e0:	8f 90       	pop	r8
    30e2:	b8 c2       	rjmp	.+1392   	; 0x3654 <_ZN7PCA9534C1Ev>

000030e4 <_GLOBAL__sub_D_ParametriCCEC>:
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    30e4:	cf 93       	push	r28
    30e6:	df 93       	push	r29

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
String KM = "";
    30e8:	83 ee       	ldi	r24, 0xE3	; 227
    30ea:	99 e0       	ldi	r25, 0x09	; 9
    30ec:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    30f0:	89 ee       	ldi	r24, 0xE9	; 233
    30f2:	99 e0       	ldi	r25, 0x09	; 9
    30f4:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/*                    Real Time Clock                       */
/********************************************************************************************/
DS3231M_Class DS3231M;
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	9a e0       	ldi	r25, 0x0A	; 10
    30fc:	0e 94 ca 20 	call	0x4194	; 0x4194 <_ZN13DS3231M_ClassD1Ev>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
String Messaggio = "";
String righeDisplay[] = {"X", "X", "X", "X"};
    3100:	81 e5       	ldi	r24, 0x51	; 81
    3102:	9a e0       	ldi	r25, 0x0A	; 10
    3104:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    3108:	8b e4       	ldi	r24, 0x4B	; 75
    310a:	9a e0       	ldi	r25, 0x0A	; 10
    310c:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    3110:	85 e4       	ldi	r24, 0x45	; 69
    3112:	9a e0       	ldi	r25, 0x0A	; 10
    3114:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    3118:	8f e3       	ldi	r24, 0x3F	; 63
    311a:	9a e0       	ldi	r25, 0x0A	; 10
    311c:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
String Messaggio = "";
    3120:	87 e5       	ldi	r24, 0x57	; 87
    3122:	9a e0       	ldi	r25, 0x0A	; 10
    3124:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
    3128:	8d e5       	ldi	r24, 0x5D	; 93
    312a:	9a e0       	ldi	r25, 0x0A	; 10
    312c:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
    3130:	c7 e8       	ldi	r28, 0x87	; 135
    3132:	da e0       	ldi	r29, 0x0A	; 10
    3134:	26 97       	sbiw	r28, 0x06	; 6
    3136:	ce 01       	movw	r24, r28
    3138:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    313c:	8a e0       	ldi	r24, 0x0A	; 10
    313e:	c3 36       	cpi	r28, 0x63	; 99
    3140:	d8 07       	cpc	r29, r24
    3142:	c1 f7       	brne	.-16     	; 0x3134 <_GLOBAL__sub_D_ParametriCCEC+0x50>

uint8_t distr_selezionato = 0;
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    3144:	87 e8       	ldi	r24, 0x87	; 135
    3146:	9a e0       	ldi	r25, 0x0A	; 10
    3148:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale = "START...";
String strURLAPI = "";
    314c:	84 e9       	ldi	r24, 0x94	; 148
    314e:	9a e0       	ldi	r25, 0x0A	; 10
    3150:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale = "START...";
    3154:	8a e9       	ldi	r24, 0x9A	; 154
    3156:	9a e0       	ldi	r25, 0x0A	; 10
    3158:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;
const uint8_t I2C_PCA9534_ADDR = 0x20;

struct mezzoType {
    315c:	85 ee       	ldi	r24, 0xE5	; 229
    315e:	9a e0       	ldi	r25, 0x0A	; 10
    3160:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    3164:	8f ed       	ldi	r24, 0xDF	; 223
    3166:	9a e0       	ldi	r25, 0x0A	; 10
    3168:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    316c:	89 ed       	ldi	r24, 0xD9	; 217
    316e:	9a e0       	ldi	r25, 0x0A	; 10
    3170:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>

ParametriCCEC_TypeDef *ParametriCCEC; //puntatore  a Map memoria

#define numero_parametri 4

ParametriCCEC_TypeDef Parametri[numero_parametri] =
    3174:	89 e1       	ldi	r24, 0x19	; 25
    3176:	9b e0       	ldi	r25, 0x0B	; 11
    3178:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN20ParametriCCEC_structD1Ev>
    317c:	8b e0       	ldi	r24, 0x0B	; 11
    317e:	9b e0       	ldi	r25, 0x0B	; 11
    3180:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN20ParametriCCEC_structD1Ev>
    3184:	8d ef       	ldi	r24, 0xFD	; 253
    3186:	9a e0       	ldi	r25, 0x0A	; 10
    3188:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN20ParametriCCEC_structD1Ev>
    318c:	8f ee       	ldi	r24, 0xEF	; 239
    318e:	9a e0       	ldi	r25, 0x0A	; 10
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    3190:	df 91       	pop	r29
    3192:	cf 91       	pop	r28
    3194:	0c 94 19 05 	jmp	0xa32	; 0xa32 <_ZN20ParametriCCEC_structD1Ev>

00003198 <setup>:
 return true;
}

/************************************************************/

void setup() {
    3198:	cf 92       	push	r12
    319a:	df 92       	push	r13
    319c:	ef 92       	push	r14
    319e:	ff 92       	push	r15
    31a0:	0f 93       	push	r16
    31a2:	1f 93       	push	r17
    31a4:	cf 93       	push	r28
    31a6:	df 93       	push	r29
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    31ac:	64 97       	sbiw	r28, 0x14	; 20
    31ae:	0f b6       	in	r0, 0x3f	; 63
    31b0:	f8 94       	cli
    31b2:	de bf       	out	0x3e, r29	; 62
    31b4:	0f be       	out	0x3f, r0	; 63
    31b6:	cd bf       	out	0x3d, r28	; 61
/*********************************************************************************************/
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
    31b8:	3c 9a       	sbi	0x07, 4	; 7
    31ba:	8f e1       	ldi	r24, 0x1F	; 31
    31bc:	9e e4       	ldi	r25, 0x4E	; 78
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	f1 f7       	brne	.-4      	; 0x31be <setup+0x26>
    31c2:	00 c0       	rjmp	.+0      	; 0x31c4 <setup+0x2c>
    31c4:	00 00       	nop

void setup() {

   initSS_ETH();
   _delay_ms(5);
   disable_ETH();
    31c6:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
    31ca:	9f ef       	ldi	r25, 0xFF	; 255
    31cc:	21 ee       	ldi	r18, 0xE1	; 225
    31ce:	84 e0       	ldi	r24, 0x04	; 4
    31d0:	91 50       	subi	r25, 0x01	; 1
    31d2:	20 40       	sbci	r18, 0x00	; 0
    31d4:	80 40       	sbci	r24, 0x00	; 0
    31d6:	e1 f7       	brne	.-8      	; 0x31d0 <setup+0x38>
    31d8:	00 c0       	rjmp	.+0      	; 0x31da <setup+0x42>
    31da:	00 00       	nop

   // Serial.begin(115200);
   _delay_ms(100);

  Serial.println(" inizio Setup ......");
    31dc:	61 e0       	ldi	r22, 0x01	; 1
    31de:	78 e0       	ldi	r23, 0x08	; 8
    31e0:	8e e7       	ldi	r24, 0x7E	; 126
    31e2:	9c e0       	ldi	r25, 0x0C	; 12
    31e4:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
  printLine();
    31e8:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>

  /*******************************************************************************************/
  ParametriCCEC = Parametri;  
    31ec:	8f ee       	ldi	r24, 0xEF	; 239
    31ee:	9a e0       	ldi	r25, 0x0A	; 10
    31f0:	90 93 28 0b 	sts	0x0B28, r25	; 0x800b28 <ParametriCCEC+0x1>
    31f4:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <ParametriCCEC>
  printLine();
    31f8:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  Serial.print("EEPROM utilizzata (byte): ");
    31fc:	66 e1       	ldi	r22, 0x16	; 22
    31fe:	78 e0       	ldi	r23, 0x08	; 8
    3200:	8e e7       	ldi	r24, 0x7E	; 126
    3202:	9c e0       	ldi	r25, 0x0C	; 12
    3204:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
  Serial.print(EEPROM.length());
    3208:	4a e0       	ldi	r20, 0x0A	; 10
    320a:	50 e0       	ldi	r21, 0x00	; 0
    320c:	60 e0       	ldi	r22, 0x00	; 0
    320e:	70 e1       	ldi	r23, 0x10	; 16
    3210:	8e e7       	ldi	r24, 0x7E	; 126
    3212:	9c e0       	ldi	r25, 0x0C	; 12
    3214:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <_ZN5Print5printEji>
  Serial.println(" ");
    3218:	6b ed       	ldi	r22, 0xDB	; 219
    321a:	71 e0       	ldi	r23, 0x01	; 1
    321c:	8e e7       	ldi	r24, 0x7E	; 126
    321e:	9c e0       	ldi	r25, 0x0C	; 12
    3220:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
  Serial.print("Scrittura Parametri CCEC");
    3224:	61 e3       	ldi	r22, 0x31	; 49
    3226:	78 e0       	ldi	r23, 0x08	; 8
    3228:	8e e7       	ldi	r24, 0x7E	; 126
    322a:	9c e0       	ldi	r25, 0x0C	; 12
    322c:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>

  String app = "";
    3230:	68 ed       	ldi	r22, 0xD8	; 216
    3232:	71 e0       	ldi	r23, 0x01	; 1
    3234:	ce 01       	movw	r24, r28
    3236:	0f 96       	adiw	r24, 0x0f	; 15
    3238:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>

  clearEEPROM(0,EEPROM.length());
    323c:	60 e0       	ldi	r22, 0x00	; 0
    323e:	70 e1       	ldi	r23, 0x10	; 16
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z11clearEEPROMii>
  if (write_eeprom_string_struct(ParametriCCEC[0])) { Serial.println("WRITE OK");}
    3248:	60 91 27 0b 	lds	r22, 0x0B27	; 0x800b27 <ParametriCCEC>
    324c:	70 91 28 0b 	lds	r23, 0x0B28	; 0x800b28 <ParametriCCEC+0x1>
    3250:	ce 01       	movw	r24, r28
    3252:	01 96       	adiw	r24, 0x01	; 1
    3254:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN20ParametriCCEC_structC1ERKS_>
    3258:	ce 01       	movw	r24, r28
    325a:	01 96       	adiw	r24, 0x01	; 1
    325c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z26write_eeprom_string_struct20ParametriCCEC_struct>
    3260:	18 2f       	mov	r17, r24
    3262:	ce 01       	movw	r24, r28
    3264:	01 96       	adiw	r24, 0x01	; 1
    3266:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN20ParametriCCEC_structD1Ev>
    326a:	11 23       	and	r17, r17
    326c:	31 f0       	breq	.+12     	; 0x327a <setup+0xe2>
    326e:	6a e4       	ldi	r22, 0x4A	; 74
    3270:	78 e0       	ldi	r23, 0x08	; 8
    3272:	8e e7       	ldi	r24, 0x7E	; 126
    3274:	9c e0       	ldi	r25, 0x0C	; 12
    3276:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
  if (write_eeprom_string_struct(ParametriCCEC[1])) { Serial.println("WRITE OK");}
    327a:	60 91 27 0b 	lds	r22, 0x0B27	; 0x800b27 <ParametriCCEC>
    327e:	70 91 28 0b 	lds	r23, 0x0B28	; 0x800b28 <ParametriCCEC+0x1>
    3282:	62 5f       	subi	r22, 0xF2	; 242
    3284:	7f 4f       	sbci	r23, 0xFF	; 255
    3286:	ce 01       	movw	r24, r28
    3288:	01 96       	adiw	r24, 0x01	; 1
    328a:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN20ParametriCCEC_structC1ERKS_>
    328e:	ce 01       	movw	r24, r28
    3290:	01 96       	adiw	r24, 0x01	; 1
    3292:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z26write_eeprom_string_struct20ParametriCCEC_struct>
    3296:	18 2f       	mov	r17, r24
    3298:	ce 01       	movw	r24, r28
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN20ParametriCCEC_structD1Ev>
    32a0:	11 23       	and	r17, r17
    32a2:	31 f0       	breq	.+12     	; 0x32b0 <setup+0x118>
    32a4:	6a e4       	ldi	r22, 0x4A	; 74
    32a6:	78 e0       	ldi	r23, 0x08	; 8
    32a8:	8e e7       	ldi	r24, 0x7E	; 126
    32aa:	9c e0       	ldi	r25, 0x0C	; 12
    32ac:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
  if (write_eeprom_string_struct(ParametriCCEC[2])) { Serial.println("WRITE OK");}
    32b0:	60 91 27 0b 	lds	r22, 0x0B27	; 0x800b27 <ParametriCCEC>
    32b4:	70 91 28 0b 	lds	r23, 0x0B28	; 0x800b28 <ParametriCCEC+0x1>
    32b8:	64 5e       	subi	r22, 0xE4	; 228
    32ba:	7f 4f       	sbci	r23, 0xFF	; 255
    32bc:	ce 01       	movw	r24, r28
    32be:	01 96       	adiw	r24, 0x01	; 1
    32c0:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN20ParametriCCEC_structC1ERKS_>
    32c4:	ce 01       	movw	r24, r28
    32c6:	01 96       	adiw	r24, 0x01	; 1
    32c8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z26write_eeprom_string_struct20ParametriCCEC_struct>
    32cc:	18 2f       	mov	r17, r24
    32ce:	ce 01       	movw	r24, r28
    32d0:	01 96       	adiw	r24, 0x01	; 1
    32d2:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN20ParametriCCEC_structD1Ev>
    32d6:	11 23       	and	r17, r17
    32d8:	31 f0       	breq	.+12     	; 0x32e6 <setup+0x14e>
    32da:	6a e4       	ldi	r22, 0x4A	; 74
    32dc:	78 e0       	ldi	r23, 0x08	; 8
    32de:	8e e7       	ldi	r24, 0x7E	; 126
    32e0:	9c e0       	ldi	r25, 0x0C	; 12
    32e2:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
  if (write_eeprom_string_struct(ParametriCCEC[3])) { Serial.println("WRITE OK");}
    32e6:	60 91 27 0b 	lds	r22, 0x0B27	; 0x800b27 <ParametriCCEC>
    32ea:	70 91 28 0b 	lds	r23, 0x0B28	; 0x800b28 <ParametriCCEC+0x1>
    32ee:	66 5d       	subi	r22, 0xD6	; 214
    32f0:	7f 4f       	sbci	r23, 0xFF	; 255
    32f2:	ce 01       	movw	r24, r28
    32f4:	01 96       	adiw	r24, 0x01	; 1
    32f6:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN20ParametriCCEC_structC1ERKS_>
    32fa:	ce 01       	movw	r24, r28
    32fc:	01 96       	adiw	r24, 0x01	; 1
    32fe:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z26write_eeprom_string_struct20ParametriCCEC_struct>
    3302:	18 2f       	mov	r17, r24
    3304:	ce 01       	movw	r24, r28
    3306:	01 96       	adiw	r24, 0x01	; 1
    3308:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN20ParametriCCEC_structD1Ev>
    330c:	11 23       	and	r17, r17
    330e:	31 f0       	breq	.+12     	; 0x331c <setup+0x184>
    3310:	6a e4       	ldi	r22, 0x4A	; 74
    3312:	78 e0       	ldi	r23, 0x08	; 8
    3314:	8e e7       	ldi	r24, 0x7E	; 126
    3316:	9c e0       	ldi	r25, 0x0C	; 12
    3318:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>

  printLine();  
    331c:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
/*******************************************************************************************/
  DDRC |= (1 << BUZZER); // set pin BUZZER (PC6) for output
    3320:	3e 9a       	sbi	0x07, 6	; 7
  DDRC |= (1 << RELE1);  // Rele1
    3322:	3f 9a       	sbi	0x07, 7	; 7
  DDRA |= (1 << RELE2);  // Rele2   // set PA7 e PC7 come output
    3324:	0f 9a       	sbi	0x01, 7	; 1
    3326:	8f e3       	ldi	r24, 0x3F	; 63
    3328:	9c e9       	ldi	r25, 0x9C	; 156
    332a:	01 97       	sbiw	r24, 0x01	; 1
    332c:	f1 f7       	brne	.-4      	; 0x332a <setup+0x192>
    332e:	00 c0       	rjmp	.+0      	; 0x3330 <setup+0x198>
    3330:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTC, RELE1); // Apri RELE1
    3332:	47 9a       	sbi	0x08, 7	; 8
    3334:	8f e3       	ldi	r24, 0x3F	; 63
    3336:	9c e9       	ldi	r25, 0x9C	; 156
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	f1 f7       	brne	.-4      	; 0x3338 <setup+0x1a0>
    333c:	00 c0       	rjmp	.+0      	; 0x333e <setup+0x1a6>
    333e:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTA, RELE2); // Apri RELE2
    3340:	17 9a       	sbi	0x02, 7	; 2
  printLine();
    3342:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>

  /***************************LCD******************************/

  lcd.begin(20, 4);        // Inizializza display LCD 20x4 e accendi e spegni 2 volte
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	44 e0       	ldi	r20, 0x04	; 4
    334a:	64 e1       	ldi	r22, 0x14	; 20
    334c:	87 eb       	ldi	r24, 0xB7	; 183
    334e:	9a e0       	ldi	r25, 0x0A	; 10
    3350:	0e 94 06 30 	call	0x600c	; 0x600c <_ZN17LiquidCrystal_I2C5beginEhhh>

  // ------- 2 blinks -------------
  for (int i = 0; i < 2; i++)
  {
    lcd.backlight();
    3354:	87 eb       	ldi	r24, 0xB7	; 183
    3356:	9a e0       	ldi	r25, 0x0A	; 10
    3358:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <_ZN3LCD9backlightEv>
    335c:	9f ef       	ldi	r25, 0xFF	; 255
    335e:	24 e3       	ldi	r18, 0x34	; 52
    3360:	8c e0       	ldi	r24, 0x0C	; 12
    3362:	91 50       	subi	r25, 0x01	; 1
    3364:	20 40       	sbci	r18, 0x00	; 0
    3366:	80 40       	sbci	r24, 0x00	; 0
    3368:	e1 f7       	brne	.-8      	; 0x3362 <setup+0x1ca>
    336a:	00 c0       	rjmp	.+0      	; 0x336c <setup+0x1d4>
    336c:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    336e:	87 eb       	ldi	r24, 0xB7	; 183
    3370:	9a e0       	ldi	r25, 0x0A	; 10
    3372:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <_ZN3LCD11noBacklightEv>
    3376:	9f ef       	ldi	r25, 0xFF	; 255
    3378:	24 e3       	ldi	r18, 0x34	; 52
    337a:	8c e0       	ldi	r24, 0x0C	; 12
    337c:	91 50       	subi	r25, 0x01	; 1
    337e:	20 40       	sbci	r18, 0x00	; 0
    3380:	80 40       	sbci	r24, 0x00	; 0
    3382:	e1 f7       	brne	.-8      	; 0x337c <setup+0x1e4>
    3384:	00 c0       	rjmp	.+0      	; 0x3386 <setup+0x1ee>
    3386:	00 00       	nop
  lcd.begin(20, 4);        // Inizializza display LCD 20x4 e accendi e spegni 2 volte

  // ------- 2 blinks -------------
  for (int i = 0; i < 2; i++)
  {
    lcd.backlight();
    3388:	87 eb       	ldi	r24, 0xB7	; 183
    338a:	9a e0       	ldi	r25, 0x0A	; 10
    338c:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <_ZN3LCD9backlightEv>
    3390:	9f ef       	ldi	r25, 0xFF	; 255
    3392:	24 e3       	ldi	r18, 0x34	; 52
    3394:	8c e0       	ldi	r24, 0x0C	; 12
    3396:	91 50       	subi	r25, 0x01	; 1
    3398:	20 40       	sbci	r18, 0x00	; 0
    339a:	80 40       	sbci	r24, 0x00	; 0
    339c:	e1 f7       	brne	.-8      	; 0x3396 <setup+0x1fe>
    339e:	00 c0       	rjmp	.+0      	; 0x33a0 <setup+0x208>
    33a0:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    33a2:	87 eb       	ldi	r24, 0xB7	; 183
    33a4:	9a e0       	ldi	r25, 0x0A	; 10
    33a6:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <_ZN3LCD11noBacklightEv>
    33aa:	9f ef       	ldi	r25, 0xFF	; 255
    33ac:	24 e3       	ldi	r18, 0x34	; 52
    33ae:	8c e0       	ldi	r24, 0x0C	; 12
    33b0:	91 50       	subi	r25, 0x01	; 1
    33b2:	20 40       	sbci	r18, 0x00	; 0
    33b4:	80 40       	sbci	r24, 0x00	; 0
    33b6:	e1 f7       	brne	.-8      	; 0x33b0 <setup+0x218>
    33b8:	00 c0       	rjmp	.+0      	; 0x33ba <setup+0x222>
    33ba:	00 00       	nop
    _delay_ms(250);
  }

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
    33bc:	41 e5       	ldi	r20, 0x51	; 81
    33be:	51 e0       	ldi	r21, 0x01	; 1
    33c0:	61 e0       	ldi	r22, 0x01	; 1
    33c2:	87 eb       	ldi	r24, 0xB7	; 183
    33c4:	9a e0       	ldi	r25, 0x0A	; 10
    33c6:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <_ZN3LCD10createCharEhPh>
    33ca:	9f ef       	ldi	r25, 0xFF	; 255
    33cc:	29 ef       	ldi	r18, 0xF9	; 249
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	91 50       	subi	r25, 0x01	; 1
    33d2:	20 40       	sbci	r18, 0x00	; 0
    33d4:	80 40       	sbci	r24, 0x00	; 0
    33d6:	e1 f7       	brne	.-8      	; 0x33d0 <setup+0x238>
    33d8:	00 c0       	rjmp	.+0      	; 0x33da <setup+0x242>
    33da:	00 00       	nop
  _delay_ms(20);
  lcd.backlight();
    33dc:	87 eb       	ldi	r24, 0xB7	; 183
    33de:	9a e0       	ldi	r25, 0x0A	; 10
    33e0:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <_ZN3LCD9backlightEv>
    33e4:	0f e3       	ldi	r16, 0x3F	; 63
    33e6:	1a e0       	ldi	r17, 0x0A	; 10

  for (int r = 0; r < 4; r++)
    righeDisplay[r] = "";
    33e8:	68 ed       	ldi	r22, 0xD8	; 216
    33ea:	71 e0       	ldi	r23, 0x01	; 1
    33ec:	c8 01       	movw	r24, r16
    33ee:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
    33f2:	0a 5f       	subi	r16, 0xFA	; 250
    33f4:	1f 4f       	sbci	r17, 0xFF	; 255

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
  _delay_ms(20);
  lcd.backlight();

  for (int r = 0; r < 4; r++)
    33f6:	9a e0       	ldi	r25, 0x0A	; 10
    33f8:	07 35       	cpi	r16, 0x57	; 87
    33fa:	19 07       	cpc	r17, r25
    33fc:	a9 f7       	brne	.-22     	; 0x33e8 <setup+0x250>
    righeDisplay[r] = "";

  printLine();
    33fe:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>

  /***************************NFC*************************/

  nfc.begin();
    3402:	80 ea       	ldi	r24, 0xA0	; 160
    3404:	9a e0       	ldi	r25, 0x0A	; 10
    3406:	d7 d1       	rcall	.+942    	; 0x37b6 <_ZN9NFC_PN5325beginEv>
    3408:	2f ef       	ldi	r18, 0xFF	; 255
    340a:	80 e7       	ldi	r24, 0x70	; 112
    340c:	92 e0       	ldi	r25, 0x02	; 2
    340e:	21 50       	subi	r18, 0x01	; 1
    3410:	80 40       	sbci	r24, 0x00	; 0
    3412:	90 40       	sbci	r25, 0x00	; 0
    3414:	e1 f7       	brne	.-8      	; 0x340e <setup+0x276>
    3416:	00 c0       	rjmp	.+0      	; 0x3418 <setup+0x280>
    3418:	00 00       	nop

  _delay_ms(50);

  uint32_t versiondata = nfc.getFirmwareVersion();
    341a:	80 ea       	ldi	r24, 0xA0	; 160
    341c:	9a e0       	ldi	r25, 0x0A	; 10
    341e:	6b d3       	rcall	.+1750   	; 0x3af6 <_ZN9NFC_PN53218getFirmwareVersionEv>
    3420:	6b 01       	movw	r12, r22
    3422:	7c 01       	movw	r14, r24
  if (! versiondata) {
    3424:	67 2b       	or	r22, r23
    3426:	68 2b       	or	r22, r24
    3428:	69 2b       	or	r22, r25
    342a:	69 f5       	brne	.+90     	; 0x3486 <setup+0x2ee>
    Serial.print("Modulo PN532 non trovato");
    342c:	63 e5       	ldi	r22, 0x53	; 83
    342e:	78 e0       	ldi	r23, 0x08	; 8
    3430:	8e e7       	ldi	r24, 0x7E	; 126
    3432:	9c e0       	ldi	r25, 0x0C	; 12
    3434:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
    lcd.backlight();
    3438:	87 eb       	ldi	r24, 0xB7	; 183
    343a:	9a e0       	ldi	r25, 0x0A	; 10
    343c:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <_ZN3LCD9backlightEv>
    3440:	2f ef       	ldi	r18, 0xFF	; 255
    3442:	84 e3       	ldi	r24, 0x34	; 52
    3444:	9c e0       	ldi	r25, 0x0C	; 12
    3446:	21 50       	subi	r18, 0x01	; 1
    3448:	80 40       	sbci	r24, 0x00	; 0
    344a:	90 40       	sbci	r25, 0x00	; 0
    344c:	e1 f7       	brne	.-8      	; 0x3446 <setup+0x2ae>
    344e:	00 c0       	rjmp	.+0      	; 0x3450 <setup+0x2b8>
    3450:	00 00       	nop
    _delay_ms(250);
    lcd.clear();
    3452:	87 eb       	ldi	r24, 0xB7	; 183
    3454:	9a e0       	ldi	r25, 0x0A	; 10
    3456:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <_ZN3LCD5clearEv>
    lcd.print("Modulo PN532 non trovato ");
    345a:	6c e6       	ldi	r22, 0x6C	; 108
    345c:	78 e0       	ldi	r23, 0x08	; 8
    345e:	87 eb       	ldi	r24, 0xB7	; 183
    3460:	9a e0       	ldi	r25, 0x0A	; 10
    3462:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
    3466:	2f ef       	ldi	r18, 0xFF	; 255
    3468:	87 ea       	ldi	r24, 0xA7	; 167
    346a:	91 e6       	ldi	r25, 0x61	; 97
    346c:	21 50       	subi	r18, 0x01	; 1
    346e:	80 40       	sbci	r24, 0x00	; 0
    3470:	90 40       	sbci	r25, 0x00	; 0
    3472:	e1 f7       	brne	.-8      	; 0x346c <setup+0x2d4>
    3474:	00 c0       	rjmp	.+0      	; 0x3476 <setup+0x2de>
    3476:	00 00       	nop
    _delay_ms(2000);
    StatoAttuale  = " CHIAMA ASSISTENZA";
    3478:	66 e8       	ldi	r22, 0x86	; 134
    347a:	78 e0       	ldi	r23, 0x08	; 8
    347c:	8a e9       	ldi	r24, 0x9A	; 154
    347e:	9a e0       	ldi	r25, 0x0A	; 10
    3480:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
    3484:	06 c0       	rjmp	.+12     	; 0x3492 <setup+0x2fa>
    //while (1); // halt  // Aspetta per sempre
  } else {
    Serial.println("Modulo NFC OK ......");
    3486:	69 e9       	ldi	r22, 0x99	; 153
    3488:	78 e0       	ldi	r23, 0x08	; 8
    348a:	8e e7       	ldi	r24, 0x7E	; 126
    348c:	9c e0       	ldi	r25, 0x0C	; 12
    348e:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
  }

  Serial.print("Found chip PN5"); Serial.println((versiondata >> 24) & 0xFF, HEX);
    3492:	6e ea       	ldi	r22, 0xAE	; 174
    3494:	78 e0       	ldi	r23, 0x08	; 8
    3496:	8e e7       	ldi	r24, 0x7E	; 126
    3498:	9c e0       	ldi	r25, 0x0C	; 12
    349a:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
    349e:	4f 2d       	mov	r20, r15
    34a0:	55 27       	eor	r21, r21
    34a2:	66 27       	eor	r22, r22
    34a4:	77 27       	eor	r23, r23
    34a6:	20 e1       	ldi	r18, 0x10	; 16
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	8e e7       	ldi	r24, 0x7E	; 126
    34ac:	9c e0       	ldi	r25, 0x0C	; 12
    34ae:	0e 94 55 37 	call	0x6eaa	; 0x6eaa <_ZN5Print7printlnEmi>
  Serial.print("Firmware ver. "); Serial.print((versiondata >> 16) & 0xFF, DEC);
    34b2:	6d eb       	ldi	r22, 0xBD	; 189
    34b4:	78 e0       	ldi	r23, 0x08	; 8
    34b6:	8e e7       	ldi	r24, 0x7E	; 126
    34b8:	9c e0       	ldi	r25, 0x0C	; 12
    34ba:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_ZN5Print5printEPKc>
    34be:	4e 2d       	mov	r20, r14
    34c0:	50 e0       	ldi	r21, 0x00	; 0
    34c2:	60 e0       	ldi	r22, 0x00	; 0
    34c4:	70 e0       	ldi	r23, 0x00	; 0
    34c6:	2a e0       	ldi	r18, 0x0A	; 10
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	8e e7       	ldi	r24, 0x7E	; 126
    34cc:	9c e0       	ldi	r25, 0x0C	; 12
    34ce:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <_ZN5Print5printEmi>
  Serial.print('.'); Serial.println((versiondata >> 8) & 0xFF, DEC);
    34d2:	6e e2       	ldi	r22, 0x2E	; 46
    34d4:	8e e7       	ldi	r24, 0x7E	; 126
    34d6:	9c e0       	ldi	r25, 0x0C	; 12
    34d8:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <_ZN5Print5printEc>
    34dc:	4d 2d       	mov	r20, r13
    34de:	50 e0       	ldi	r21, 0x00	; 0
    34e0:	60 e0       	ldi	r22, 0x00	; 0
    34e2:	70 e0       	ldi	r23, 0x00	; 0
    34e4:	2a e0       	ldi	r18, 0x0A	; 10
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	8e e7       	ldi	r24, 0x7E	; 126
    34ea:	9c e0       	ldi	r25, 0x0C	; 12
    34ec:	0e 94 55 37 	call	0x6eaa	; 0x6eaa <_ZN5Print7printlnEmi>

  nfc.setPassiveActivationRetries(0xFF);
    34f0:	6f ef       	ldi	r22, 0xFF	; 255
    34f2:	80 ea       	ldi	r24, 0xA0	; 160
    34f4:	9a e0       	ldi	r25, 0x0A	; 10
    34f6:	75 d3       	rcall	.+1770   	; 0x3be2 <_ZN9NFC_PN53227setPassiveActivationRetriesEh>
  nfc.SAMConfig();
    34f8:	80 ea       	ldi	r24, 0xA0	; 160
    34fa:	9a e0       	ldi	r25, 0x0A	; 10
    34fc:	44 d3       	rcall	.+1672   	; 0x3b86 <_ZN9NFC_PN5329SAMConfigEv>
    34fe:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  printLine();
    3502:	40 ea       	ldi	r20, 0xA0	; 160
  
  /*************************** RTC ************************/
  while (!DS3231M.begin()) {
    3504:	56 e8       	ldi	r21, 0x86	; 134
    3506:	61 e0       	ldi	r22, 0x01	; 1
    3508:	70 e0       	ldi	r23, 0x00	; 0
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	9a e0       	ldi	r25, 0x0A	; 10
    350e:	85 d6       	rcall	.+3338   	; 0x421a <_ZN13DS3231M_Class5beginEm>
    3510:	81 11       	cpse	r24, r1
    3512:	10 c0       	rjmp	.+32     	; 0x3534 <setup+0x39c>
    3514:	60 ee       	ldi	r22, 0xE0	; 224
    Serial.println(F("non trovo modulo RTC DS3231MM. Riprovo tra 3s."));
    3516:	71 e0       	ldi	r23, 0x01	; 1
    3518:	8e e7       	ldi	r24, 0x7E	; 126
    351a:	9c e0       	ldi	r25, 0x0C	; 12
    351c:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <_ZN5Print7printlnEPK19__FlashStringHelper>
    3520:	2f ef       	ldi	r18, 0xFF	; 255
    3522:	83 ed       	ldi	r24, 0xD3	; 211
    3524:	90 e3       	ldi	r25, 0x30	; 48
    3526:	21 50       	subi	r18, 0x01	; 1
    3528:	80 40       	sbci	r24, 0x00	; 0
    352a:	90 40       	sbci	r25, 0x00	; 0
    352c:	e1 f7       	brne	.-8      	; 0x3526 <setup+0x38e>
    352e:	00 c0       	rjmp	.+0      	; 0x3530 <setup+0x398>
    3530:	00 00       	nop
    3532:	e7 cf       	rjmp	.-50     	; 0x3502 <setup+0x36a>
    3534:	2f ef       	ldi	r18, 0xFF	; 255
    3536:	80 e7       	ldi	r24, 0x70	; 112
    3538:	92 e0       	ldi	r25, 0x02	; 2
    353a:	21 50       	subi	r18, 0x01	; 1
    353c:	80 40       	sbci	r24, 0x00	; 0
    353e:	90 40       	sbci	r25, 0x00	; 0
    3540:	e1 f7       	brne	.-8      	; 0x353a <setup+0x3a2>
    3542:	00 c0       	rjmp	.+0      	; 0x3544 <setup+0x3ac>
    3544:	00 00       	nop
    3546:	62 ec       	ldi	r22, 0xC2	; 194
    _delay_ms(1000);
  }
  _delay_ms(50);

  Serial.println(F("RTC chip DS3231M initialized."));
    3548:	71 e0       	ldi	r23, 0x01	; 1
    354a:	8e e7       	ldi	r24, 0x7E	; 126
    354c:	9c e0       	ldi	r25, 0x0C	; 12
    354e:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <_ZN5Print7printlnEPK19__FlashStringHelper>
  DS3231M.adjust();
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	9a e0       	ldi	r25, 0x0A	; 10
    3556:	bf d7       	rcall	.+3966   	; 0x44d6 <_ZN13DS3231M_Class6adjustEv>
    3558:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  printLine();
    355c:	6c ec       	ldi	r22, 0xCC	; 204
  /*************************** POTENZIOMETRI ************************/
  Serial.println("Inizializzo POTENZIOMETRI per livello pulser.......");
    355e:	78 e0       	ldi	r23, 0x08	; 8
    3560:	8e e7       	ldi	r24, 0x7E	; 126
    3562:	9c e0       	ldi	r25, 0x0C	; 12
    3564:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
    3568:	88 e2       	ldi	r24, 0x28	; 40

  Wire.begin(); // join i2c bus (address optional for master)
    356a:	9c e0       	ldi	r25, 0x0C	; 12
    356c:	0e 94 69 33 	call	0x66d2	; 0x66d2 <_ZN7TwoWire5beginEv>
    3570:	68 e2       	ldi	r22, 0x28	; 40
  Wire.beginTransmission(0x28);  // (0x50) POTENZIOMETRO U11
    3572:	70 e0       	ldi	r23, 0x00	; 0
    3574:	88 e2       	ldi	r24, 0x28	; 40
    3576:	9c e0       	ldi	r25, 0x0C	; 12
    3578:	0e 94 86 33 	call	0x670c	; 0x670c <_ZN7TwoWire17beginTransmissionEi>
    357c:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    357e:	88 e2       	ldi	r24, 0x28	; 40
    3580:	9c e0       	ldi	r25, 0x0C	; 12
    3582:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
    3586:	62 e3       	ldi	r22, 0x32	; 50
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    3588:	88 e2       	ldi	r24, 0x28	; 40
    358a:	9c e0       	ldi	r25, 0x0C	; 12
    358c:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
    3590:	88 e2       	ldi	r24, 0x28	; 40
  Wire.write(50);                // Valore del potenziomentro circa 6 volt
  Wire.endTransmission();
    3592:	9c e0       	ldi	r25, 0x0C	; 12
    3594:	0e 94 fd 33 	call	0x67fa	; 0x67fa <_ZN7TwoWire15endTransmissionEv>
    3598:	2f ef       	ldi	r18, 0xFF	; 255
    359a:	80 e7       	ldi	r24, 0x70	; 112
    359c:	92 e0       	ldi	r25, 0x02	; 2
    359e:	21 50       	subi	r18, 0x01	; 1
    35a0:	80 40       	sbci	r24, 0x00	; 0
    35a2:	90 40       	sbci	r25, 0x00	; 0
    35a4:	e1 f7       	brne	.-8      	; 0x359e <setup+0x406>
    35a6:	00 c0       	rjmp	.+0      	; 0x35a8 <setup+0x410>
    35a8:	00 00       	nop
    35aa:	62 e5       	ldi	r22, 0x52	; 82

  _delay_ms(50);

  Wire.beginTransmission(0x52);  // (0x52) POTENZIOMETRO U12
    35ac:	70 e0       	ldi	r23, 0x00	; 0
    35ae:	88 e2       	ldi	r24, 0x28	; 40
    35b0:	9c e0       	ldi	r25, 0x0C	; 12
    35b2:	0e 94 86 33 	call	0x670c	; 0x670c <_ZN7TwoWire17beginTransmissionEi>
    35b6:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    35b8:	88 e2       	ldi	r24, 0x28	; 40
    35ba:	9c e0       	ldi	r25, 0x0C	; 12
    35bc:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
    35c0:	62 e3       	ldi	r22, 0x32	; 50
    35c2:	88 e2       	ldi	r24, 0x28	; 40
    35c4:	9c e0       	ldi	r25, 0x0C	; 12
    35c6:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
    35ca:	88 e2       	ldi	r24, 0x28	; 40
  Wire.write(50);                // Valore del potenziomentro circa 6 volt
  Wire.endTransmission();
    35cc:	9c e0       	ldi	r25, 0x0C	; 12
    35ce:	0e 94 fd 33 	call	0x67fa	; 0x67fa <_ZN7TwoWire15endTransmissionEv>
    35d2:	88 e2       	ldi	r24, 0x28	; 40
  Wire.end();
    35d4:	9c e0       	ldi	r25, 0x0C	; 12
    35d6:	0e 94 78 33 	call	0x66f0	; 0x66f0 <_ZN7TwoWire3endEv>
    35da:	60 e0       	ldi	r22, 0x00	; 0
  Serial.println("POTENZIOMETRI OK");
    35dc:	79 e0       	ldi	r23, 0x09	; 9
    35de:	8e e7       	ldi	r24, 0x7E	; 126
    35e0:	9c e0       	ldi	r25, 0x0C	; 12
    35e2:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
  printLine();
    35e6:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  /*************************KEYPAD*********************/
  gpio.begin(I2C_PCA9534_ADDR);
    35ea:	60 e2       	ldi	r22, 0x20	; 32
    35ec:	80 ee       	ldi	r24, 0xE0	; 224
    35ee:	99 e0       	ldi	r25, 0x09	; 9
    35f0:	36 d0       	rcall	.+108    	; 0x365e <_ZN7PCA95345beginEh>
  // set REG IOexpander OPREG 11000011,INVREG 00000000,CONFREG 00111100
  gpio.setporteIoExp(0xC3, 0x00, 0x3C);
    35f2:	2c e3       	ldi	r18, 0x3C	; 60
    35f4:	40 e0       	ldi	r20, 0x00	; 0
    35f6:	63 ec       	ldi	r22, 0xC3	; 195
    35f8:	80 ee       	ldi	r24, 0xE0	; 224
    35fa:	99 e0       	ldi	r25, 0x09	; 9
    35fc:	36 d0       	rcall	.+108    	; 0x366a <_ZN7PCA953413setporteIoExpEhhh>
    35fe:	8e ef       	ldi	r24, 0xFE	; 254
  /**************** SETTING INIZIALI ******************/

  stato_procedura = - 2; // set stato di partenza
    3600:	9f ef       	ldi	r25, 0xFF	; 255
    3602:	90 93 91 0a 	sts	0x0A91, r25	; 0x800a91 <stato_procedura+0x1>
    3606:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <stato_procedura>
    360a:	61 e1       	ldi	r22, 0x11	; 17
  StatoAttuale = "Starting ....";
    360c:	79 e0       	ldi	r23, 0x09	; 9
    360e:	8a e9       	ldi	r24, 0x9A	; 154
    3610:	9a e0       	ldi	r25, 0x0A	; 10
    3612:	0e 94 01 3a 	call	0x7402	; 0x7402 <_ZN6StringaSEPKc>
    3616:	6a e9       	ldi	r22, 0x9A	; 154
  Serial.println(StatoAttuale);
    3618:	7a e0       	ldi	r23, 0x0A	; 10
    361a:	8e e7       	ldi	r24, 0x7E	; 126
    361c:	9c e0       	ldi	r25, 0x0C	; 12
    361e:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_ZN5Print7printlnERK6String>
    3622:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  printLine();
    3626:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  printLine();
    362a:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  printLine();
    362e:	ce 01       	movw	r24, r28
  Serial.print("EEPROM utilizzata (byte): ");
  Serial.print(EEPROM.length());
  Serial.println(" ");
  Serial.print("Scrittura Parametri CCEC");

  String app = "";
    3630:	0f 96       	adiw	r24, 0x0f	; 15
    3632:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    3636:	64 96       	adiw	r28, 0x14	; 20
  StatoAttuale = "Starting ....";
  Serial.println(StatoAttuale);
  printLine();
  printLine();
  printLine();
}
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	f8 94       	cli
    363c:	de bf       	out	0x3e, r29	; 62
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	cd bf       	out	0x3d, r28	; 61
    3642:	df 91       	pop	r29
    3644:	cf 91       	pop	r28
    3646:	1f 91       	pop	r17
    3648:	0f 91       	pop	r16
    364a:	ff 90       	pop	r15
    364c:	ef 90       	pop	r14
    364e:	df 90       	pop	r13
    3650:	cf 90       	pop	r12
    3652:	08 95       	ret

00003654 <_ZN7PCA9534C1Ev>:
    3654:	fc 01       	movw	r30, r24
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
		buff = Wire.read();
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}
    3656:	10 82       	st	Z, r1
    3658:	11 82       	std	Z+1, r1	; 0x01
    365a:	12 82       	std	Z+2, r1	; 0x02
    365c:	08 95       	ret

0000365e <_ZN7PCA95345beginEh>:
    365e:	fc 01       	movw	r30, r24
    3660:	60 83       	st	Z, r22
    3662:	88 e2       	ldi	r24, 0x28	; 40
    3664:	9c e0       	ldi	r25, 0x0C	; 12
    3666:	0c 94 69 33 	jmp	0x66d2	; 0x66d2 <_ZN7TwoWire5beginEv>

0000366a <_ZN7PCA953413setporteIoExpEhhh>:
    366a:	ff 92       	push	r15
    366c:	0f 93       	push	r16
    366e:	1f 93       	push	r17
    3670:	cf 93       	push	r28
    3672:	df 93       	push	r29
    3674:	ec 01       	movw	r28, r24
    3676:	f6 2e       	mov	r15, r22
    3678:	04 2f       	mov	r16, r20
    367a:	12 2f       	mov	r17, r18
    367c:	68 81       	ld	r22, Y
    367e:	88 e2       	ldi	r24, 0x28	; 40
    3680:	9c e0       	ldi	r25, 0x0C	; 12
    3682:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <_ZN7TwoWire17beginTransmissionEh>
    3686:	61 e0       	ldi	r22, 0x01	; 1
    3688:	88 e2       	ldi	r24, 0x28	; 40
    368a:	9c e0       	ldi	r25, 0x0C	; 12
    368c:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
    3690:	6f 2d       	mov	r22, r15
    3692:	88 e2       	ldi	r24, 0x28	; 40
    3694:	9c e0       	ldi	r25, 0x0C	; 12
    3696:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
    369a:	88 e2       	ldi	r24, 0x28	; 40
    369c:	9c e0       	ldi	r25, 0x0C	; 12
    369e:	0e 94 fd 33 	call	0x67fa	; 0x67fa <_ZN7TwoWire15endTransmissionEv>
    36a2:	68 81       	ld	r22, Y
    36a4:	88 e2       	ldi	r24, 0x28	; 40
    36a6:	9c e0       	ldi	r25, 0x0C	; 12
    36a8:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <_ZN7TwoWire17beginTransmissionEh>
    36ac:	62 e0       	ldi	r22, 0x02	; 2
    36ae:	88 e2       	ldi	r24, 0x28	; 40
    36b0:	9c e0       	ldi	r25, 0x0C	; 12
    36b2:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
    36b6:	60 2f       	mov	r22, r16
    36b8:	88 e2       	ldi	r24, 0x28	; 40
    36ba:	9c e0       	ldi	r25, 0x0C	; 12
    36bc:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
    36c0:	88 e2       	ldi	r24, 0x28	; 40
    36c2:	9c e0       	ldi	r25, 0x0C	; 12
    36c4:	0e 94 fd 33 	call	0x67fa	; 0x67fa <_ZN7TwoWire15endTransmissionEv>
    36c8:	8f e3       	ldi	r24, 0x3F	; 63
    36ca:	9c e9       	ldi	r25, 0x9C	; 156
    36cc:	01 97       	sbiw	r24, 0x01	; 1
    36ce:	f1 f7       	brne	.-4      	; 0x36cc <_ZN7PCA953413setporteIoExpEhhh+0x62>
    36d0:	00 c0       	rjmp	.+0      	; 0x36d2 <_ZN7PCA953413setporteIoExpEhhh+0x68>
    36d2:	00 00       	nop
    36d4:	68 81       	ld	r22, Y
    36d6:	88 e2       	ldi	r24, 0x28	; 40
    36d8:	9c e0       	ldi	r25, 0x0C	; 12
    36da:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <_ZN7TwoWire17beginTransmissionEh>
    36de:	63 e0       	ldi	r22, 0x03	; 3
    36e0:	88 e2       	ldi	r24, 0x28	; 40
    36e2:	9c e0       	ldi	r25, 0x0C	; 12
    36e4:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
    36e8:	61 2f       	mov	r22, r17
    36ea:	88 e2       	ldi	r24, 0x28	; 40
    36ec:	9c e0       	ldi	r25, 0x0C	; 12
    36ee:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
    36f2:	88 e2       	ldi	r24, 0x28	; 40
    36f4:	9c e0       	ldi	r25, 0x0C	; 12
    36f6:	0e 94 fd 33 	call	0x67fa	; 0x67fa <_ZN7TwoWire15endTransmissionEv>
    36fa:	8f e3       	ldi	r24, 0x3F	; 63
    36fc:	9c e9       	ldi	r25, 0x9C	; 156
    36fe:	01 97       	sbiw	r24, 0x01	; 1
    3700:	f1 f7       	brne	.-4      	; 0x36fe <_ZN7PCA953413setporteIoExpEhhh+0x94>
    3702:	00 c0       	rjmp	.+0      	; 0x3704 <_ZN7PCA953413setporteIoExpEhhh+0x9a>
    3704:	00 00       	nop
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	1f 91       	pop	r17
    370c:	0f 91       	pop	r16
    370e:	ff 90       	pop	r15
    3710:	08 95       	ret

00003712 <_ZN7PCA953410setCONFREGEh>:
    3712:	cf 93       	push	r28
    3714:	c6 2f       	mov	r28, r22
    3716:	fc 01       	movw	r30, r24
    3718:	60 81       	ld	r22, Z
    371a:	88 e2       	ldi	r24, 0x28	; 40
    371c:	9c e0       	ldi	r25, 0x0C	; 12
    371e:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <_ZN7TwoWire17beginTransmissionEh>
    3722:	63 e0       	ldi	r22, 0x03	; 3
    3724:	88 e2       	ldi	r24, 0x28	; 40
    3726:	9c e0       	ldi	r25, 0x0C	; 12
    3728:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
    372c:	6c 2f       	mov	r22, r28
    372e:	88 e2       	ldi	r24, 0x28	; 40
    3730:	9c e0       	ldi	r25, 0x0C	; 12
    3732:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
    3736:	88 e2       	ldi	r24, 0x28	; 40
    3738:	9c e0       	ldi	r25, 0x0C	; 12
    373a:	cf 91       	pop	r28
    373c:	0c 94 fd 33 	jmp	0x67fa	; 0x67fa <_ZN7TwoWire15endTransmissionEv>

00003740 <_ZN7PCA953416Read_IP_REGISTEREv>:

uint8_t PCA9534::Read_IP_REGISTER() {
    3740:	cf 93       	push	r28
    3742:	df 93       	push	r29
    3744:	ec 01       	movw	r28, r24
	uint8_t buff = 0;

	//_i2caddr = i2caddr;

	Wire.beginTransmission(_i2caddr);
    3746:	68 81       	ld	r22, Y
    3748:	88 e2       	ldi	r24, 0x28	; 40
    374a:	9c e0       	ldi	r25, 0x0C	; 12
    374c:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(PCA9534_IP_REGISTER);
    3750:	60 e0       	ldi	r22, 0x00	; 0
    3752:	88 e2       	ldi	r24, 0x28	; 40
    3754:	9c e0       	ldi	r25, 0x0C	; 12
    3756:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
	// Wire.write(_port);
	Wire.endTransmission();
    375a:	88 e2       	ldi	r24, 0x28	; 40
    375c:	9c e0       	ldi	r25, 0x0C	; 12
    375e:	0e 94 fd 33 	call	0x67fa	; 0x67fa <_ZN7TwoWire15endTransmissionEv>

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
    3762:	68 81       	ld	r22, Y
    3764:	70 e0       	ldi	r23, 0x00	; 0
    3766:	41 e0       	ldi	r20, 0x01	; 1
    3768:	50 e0       	ldi	r21, 0x00	; 0
    376a:	88 e2       	ldi	r24, 0x28	; 40
    376c:	9c e0       	ldi	r25, 0x0C	; 12
    376e:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <_ZN7TwoWire11requestFromEii>
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}

uint8_t PCA9534::Read_IP_REGISTER() {
	uint8_t buff = 0;
    3772:	c0 e0       	ldi	r28, 0x00	; 0
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    3774:	88 e2       	ldi	r24, 0x28	; 40
    3776:	9c e0       	ldi	r25, 0x0C	; 12
    3778:	0e 94 9d 32 	call	0x653a	; 0x653a <_ZN7TwoWire9availableEv>
    377c:	89 2b       	or	r24, r25
    377e:	31 f0       	breq	.+12     	; 0x378c <_ZN7PCA953416Read_IP_REGISTEREv+0x4c>
		buff = Wire.read();
    3780:	88 e2       	ldi	r24, 0x28	; 40
    3782:	9c e0       	ldi	r25, 0x0C	; 12
    3784:	0e 94 a5 32 	call	0x654a	; 0x654a <_ZN7TwoWire4readEv>
    3788:	c8 2f       	mov	r28, r24
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    378a:	f4 cf       	rjmp	.-24     	; 0x3774 <_ZN7PCA953416Read_IP_REGISTEREv+0x34>
		buff = Wire.read();
	}
	return buff;
    378c:	8c 2f       	mov	r24, r28
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	08 95       	ret

00003794 <_ZN9NFC_PN532C1Ehh>:
    #endif
    return false;
  }

  return true;
}
    3794:	cf 93       	push	r28
    3796:	df 93       	push	r29
    3798:	ec 01       	movw	r28, r24
    379a:	86 2f       	mov	r24, r22
    379c:	6c 83       	std	Y+4, r22	; 0x04
    379e:	4d 83       	std	Y+5, r20	; 0x05
    37a0:	1d 8a       	std	Y+21, r1	; 0x15
    37a2:	1e 8a       	std	Y+22, r1	; 0x16
    37a4:	60 e0       	ldi	r22, 0x00	; 0
    37a6:	0e 94 88 38 	call	0x7110	; 0x7110 <pinMode>
    37aa:	61 e0       	ldi	r22, 0x01	; 1
    37ac:	8d 81       	ldd	r24, Y+5	; 0x05
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	0c 94 88 38 	jmp	0x7110	; 0x7110 <pinMode>

000037b6 <_ZN9NFC_PN5325beginEv>:
    37b6:	cf 93       	push	r28
    37b8:	df 93       	push	r29
    37ba:	ec 01       	movw	r28, r24
    37bc:	88 e2       	ldi	r24, 0x28	; 40
    37be:	9c e0       	ldi	r25, 0x0C	; 12
    37c0:	0e 94 69 33 	call	0x66d2	; 0x66d2 <_ZN7TwoWire5beginEv>
    37c4:	61 e0       	ldi	r22, 0x01	; 1
    37c6:	8d 81       	ldd	r24, Y+5	; 0x05
    37c8:	0e 94 c4 38 	call	0x7188	; 0x7188 <digitalWrite>
    37cc:	60 e0       	ldi	r22, 0x00	; 0
    37ce:	8d 81       	ldd	r24, Y+5	; 0x05
    37d0:	0e 94 c4 38 	call	0x7188	; 0x7188 <digitalWrite>
    37d4:	2f ef       	ldi	r18, 0xFF	; 255
    37d6:	87 e8       	ldi	r24, 0x87	; 135
    37d8:	93 e1       	ldi	r25, 0x13	; 19
    37da:	21 50       	subi	r18, 0x01	; 1
    37dc:	80 40       	sbci	r24, 0x00	; 0
    37de:	90 40       	sbci	r25, 0x00	; 0
    37e0:	e1 f7       	brne	.-8      	; 0x37da <_ZN9NFC_PN5325beginEv+0x24>
    37e2:	00 c0       	rjmp	.+0      	; 0x37e4 <_ZN9NFC_PN5325beginEv+0x2e>
    37e4:	00 00       	nop
    37e6:	61 e0       	ldi	r22, 0x01	; 1
    37e8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ea:	0e 94 c4 38 	call	0x7188	; 0x7188 <digitalWrite>
    37ee:	8f e3       	ldi	r24, 0x3F	; 63
    37f0:	9c e9       	ldi	r25, 0x9C	; 156
    37f2:	01 97       	sbiw	r24, 0x01	; 1
    37f4:	f1 f7       	brne	.-4      	; 0x37f2 <_ZN9NFC_PN5325beginEv+0x3c>
    37f6:	00 c0       	rjmp	.+0      	; 0x37f8 <_ZN9NFC_PN5325beginEv+0x42>
    37f8:	00 00       	nop
    37fa:	df 91       	pop	r29
    37fc:	cf 91       	pop	r28
    37fe:	08 95       	ret

00003800 <_ZN9NFC_PN53210GetHexCodeEPKhm>:
    3800:	4f 92       	push	r4
    3802:	5f 92       	push	r5
    3804:	6f 92       	push	r6
    3806:	7f 92       	push	r7
    3808:	8f 92       	push	r8
    380a:	9f 92       	push	r9
    380c:	af 92       	push	r10
    380e:	bf 92       	push	r11
    3810:	ef 92       	push	r14
    3812:	ff 92       	push	r15
    3814:	0f 93       	push	r16
    3816:	1f 93       	push	r17
    3818:	cf 93       	push	r28
    381a:	df 93       	push	r29
    381c:	cd b7       	in	r28, 0x3d	; 61
    381e:	de b7       	in	r29, 0x3e	; 62
    3820:	2c 97       	sbiw	r28, 0x0c	; 12
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	f8 94       	cli
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	0f be       	out	0x3f, r0	; 63
    382a:	cd bf       	out	0x3d, r28	; 61
    382c:	7c 01       	movw	r14, r24
    382e:	5a 01       	movw	r10, r20
    3830:	28 01       	movw	r4, r16
    3832:	39 01       	movw	r6, r18
    3834:	68 ed       	ldi	r22, 0xD8	; 216
    3836:	71 e0       	ldi	r23, 0x01	; 1
    3838:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN6StringC1EPKc>
    383c:	85 01       	movw	r16, r10
    383e:	81 2c       	mov	r8, r1
    3840:	91 2c       	mov	r9, r1
    3842:	54 01       	movw	r10, r8
    3844:	84 14       	cp	r8, r4
    3846:	95 04       	cpc	r9, r5
    3848:	a6 04       	cpc	r10, r6
    384a:	b7 04       	cpc	r11, r7
    384c:	09 f4       	brne	.+2      	; 0x3850 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x50>
    384e:	46 c0       	rjmp	.+140    	; 0x38dc <_ZN9NFC_PN53210GetHexCodeEPKhm+0xdc>
    3850:	f8 01       	movw	r30, r16
    3852:	61 91       	ld	r22, Z+
    3854:	8f 01       	movw	r16, r30
    3856:	40 e1       	ldi	r20, 0x10	; 16
    3858:	ce 01       	movw	r24, r28
    385a:	60 31       	cpi	r22, 0x10	; 16
    385c:	f0 f4       	brcc	.+60     	; 0x389a <_ZN9NFC_PN53210GetHexCodeEPKhm+0x9a>
    385e:	01 96       	adiw	r24, 0x01	; 1
    3860:	0e 94 2d 3a 	call	0x745a	; 0x745a <_ZN6StringC1Ehh>
    3864:	b7 01       	movw	r22, r14
    3866:	ce 01       	movw	r24, r28
    3868:	07 96       	adiw	r24, 0x07	; 7
    386a:	0e 94 ee 39 	call	0x73dc	; 0x73dc <_ZN6StringC1ERKS_>
    386e:	65 e5       	ldi	r22, 0x55	; 85
    3870:	76 e0       	ldi	r23, 0x06	; 6
    3872:	ce 01       	movw	r24, r28
    3874:	07 96       	adiw	r24, 0x07	; 7
    3876:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <_ZplRK15StringSumHelperPKc>
    387a:	be 01       	movw	r22, r28
    387c:	6f 5f       	subi	r22, 0xFF	; 255
    387e:	7f 4f       	sbci	r23, 0xFF	; 255
    3880:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    3884:	bc 01       	movw	r22, r24
    3886:	c7 01       	movw	r24, r14
    3888:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
    388c:	ce 01       	movw	r24, r28
    388e:	07 96       	adiw	r24, 0x07	; 7
    3890:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    3894:	ce 01       	movw	r24, r28
    3896:	01 96       	adiw	r24, 0x01	; 1
    3898:	19 c0       	rjmp	.+50     	; 0x38cc <_ZN9NFC_PN53210GetHexCodeEPKhm+0xcc>
    389a:	07 96       	adiw	r24, 0x07	; 7
    389c:	0e 94 2d 3a 	call	0x745a	; 0x745a <_ZN6StringC1Ehh>
    38a0:	b7 01       	movw	r22, r14
    38a2:	ce 01       	movw	r24, r28
    38a4:	01 96       	adiw	r24, 0x01	; 1
    38a6:	0e 94 ee 39 	call	0x73dc	; 0x73dc <_ZN6StringC1ERKS_>
    38aa:	be 01       	movw	r22, r28
    38ac:	69 5f       	subi	r22, 0xF9	; 249
    38ae:	7f 4f       	sbci	r23, 0xFF	; 255
    38b0:	ce 01       	movw	r24, r28
    38b2:	01 96       	adiw	r24, 0x01	; 1
    38b4:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_ZplRK15StringSumHelperRK6String>
    38b8:	bc 01       	movw	r22, r24
    38ba:	c7 01       	movw	r24, r14
    38bc:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN6StringaSERKS_>
    38c0:	ce 01       	movw	r24, r28
    38c2:	01 96       	adiw	r24, 0x01	; 1
    38c4:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    38c8:	ce 01       	movw	r24, r28
    38ca:	07 96       	adiw	r24, 0x07	; 7
    38cc:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZN6StringD1Ev>
    38d0:	ff ef       	ldi	r31, 0xFF	; 255
    38d2:	8f 1a       	sub	r8, r31
    38d4:	9f 0a       	sbc	r9, r31
    38d6:	af 0a       	sbc	r10, r31
    38d8:	bf 0a       	sbc	r11, r31
    38da:	b4 cf       	rjmp	.-152    	; 0x3844 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x44>
    38dc:	8e e7       	ldi	r24, 0x7E	; 126
    38de:	9c e0       	ldi	r25, 0x0C	; 12
    38e0:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <_ZN5Print7printlnEv>
    38e4:	c7 01       	movw	r24, r14
    38e6:	2c 96       	adiw	r28, 0x0c	; 12
    38e8:	0f b6       	in	r0, 0x3f	; 63
    38ea:	f8 94       	cli
    38ec:	de bf       	out	0x3e, r29	; 62
    38ee:	0f be       	out	0x3f, r0	; 63
    38f0:	cd bf       	out	0x3d, r28	; 61
    38f2:	df 91       	pop	r29
    38f4:	cf 91       	pop	r28
    38f6:	1f 91       	pop	r17
    38f8:	0f 91       	pop	r16
    38fa:	ff 90       	pop	r15
    38fc:	ef 90       	pop	r14
    38fe:	bf 90       	pop	r11
    3900:	af 90       	pop	r10
    3902:	9f 90       	pop	r9
    3904:	8f 90       	pop	r8
    3906:	7f 90       	pop	r7
    3908:	6f 90       	pop	r6
    390a:	5f 90       	pop	r5
    390c:	4f 90       	pop	r4
    390e:	08 95       	ret

00003910 <_ZN9NFC_PN5327isreadyEv>:
    3910:	fc 01       	movw	r30, r24
    3912:	84 81       	ldd	r24, Z+4	; 0x04
    3914:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <digitalRead>
    3918:	91 e0       	ldi	r25, 0x01	; 1
    391a:	81 11       	cpse	r24, r1
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	89 2f       	mov	r24, r25
    3920:	08 95       	ret

00003922 <_ZN9NFC_PN5329waitreadyEj>:
    3922:	cf 92       	push	r12
    3924:	df 92       	push	r13
    3926:	ef 92       	push	r14
    3928:	ff 92       	push	r15
    392a:	1f 93       	push	r17
    392c:	cf 93       	push	r28
    392e:	df 93       	push	r29
    3930:	6c 01       	movw	r12, r24
    3932:	7b 01       	movw	r14, r22
    3934:	c0 e0       	ldi	r28, 0x00	; 0
    3936:	d0 e0       	ldi	r29, 0x00	; 0
    3938:	c6 01       	movw	r24, r12
    393a:	ea df       	rcall	.-44     	; 0x3910 <_ZN9NFC_PN5327isreadyEv>
    393c:	18 2f       	mov	r17, r24
    393e:	81 11       	cpse	r24, r1
    3940:	15 c0       	rjmp	.+42     	; 0x396c <_ZN9NFC_PN5329waitreadyEj+0x4a>
    3942:	e1 14       	cp	r14, r1
    3944:	f1 04       	cpc	r15, r1
    3946:	59 f0       	breq	.+22     	; 0x395e <_ZN9NFC_PN5329waitreadyEj+0x3c>
    3948:	2a 96       	adiw	r28, 0x0a	; 10
    394a:	ec 16       	cp	r14, r28
    394c:	fd 06       	cpc	r15, r29
    394e:	38 f4       	brcc	.+14     	; 0x395e <_ZN9NFC_PN5329waitreadyEj+0x3c>
    3950:	6f e2       	ldi	r22, 0x2F	; 47
    3952:	79 e0       	ldi	r23, 0x09	; 9
    3954:	8e e7       	ldi	r24, 0x7E	; 126
    3956:	9c e0       	ldi	r25, 0x0C	; 12
    3958:	0e 94 e7 36 	call	0x6dce	; 0x6dce <_ZN5Print7printlnEPKc>
    395c:	07 c0       	rjmp	.+14     	; 0x396c <_ZN9NFC_PN5329waitreadyEj+0x4a>
    395e:	8f e3       	ldi	r24, 0x3F	; 63
    3960:	9c e9       	ldi	r25, 0x9C	; 156
    3962:	01 97       	sbiw	r24, 0x01	; 1
    3964:	f1 f7       	brne	.-4      	; 0x3962 <_ZN9NFC_PN5329waitreadyEj+0x40>
    3966:	00 c0       	rjmp	.+0      	; 0x3968 <_ZN9NFC_PN5329waitreadyEj+0x46>
    3968:	00 00       	nop
    396a:	e6 cf       	rjmp	.-52     	; 0x3938 <_ZN9NFC_PN5329waitreadyEj+0x16>
    396c:	81 2f       	mov	r24, r17
    396e:	df 91       	pop	r29
    3970:	cf 91       	pop	r28
    3972:	1f 91       	pop	r17
    3974:	ff 90       	pop	r15
    3976:	ef 90       	pop	r14
    3978:	df 90       	pop	r13
    397a:	cf 90       	pop	r12
    397c:	08 95       	ret

0000397e <_ZN9NFC_PN5328readdataEPhh>:
    397e:	ff 92       	push	r15
    3980:	0f 93       	push	r16
    3982:	1f 93       	push	r17
    3984:	cf 93       	push	r28
    3986:	df 93       	push	r29
    3988:	f6 2e       	mov	r15, r22
    398a:	07 2f       	mov	r16, r23
    398c:	14 2f       	mov	r17, r20
    398e:	8f e3       	ldi	r24, 0x3F	; 63
    3990:	9f e1       	ldi	r25, 0x1F	; 31
    3992:	01 97       	sbiw	r24, 0x01	; 1
    3994:	f1 f7       	brne	.-4      	; 0x3992 <_ZN9NFC_PN5328readdataEPhh+0x14>
    3996:	00 c0       	rjmp	.+0      	; 0x3998 <_ZN9NFC_PN5328readdataEPhh+0x1a>
    3998:	00 00       	nop
    399a:	42 e0       	ldi	r20, 0x02	; 2
    399c:	41 0f       	add	r20, r17
    399e:	64 e2       	ldi	r22, 0x24	; 36
    39a0:	88 e2       	ldi	r24, 0x28	; 40
    39a2:	9c e0       	ldi	r25, 0x0C	; 12
    39a4:	0e 94 f9 33 	call	0x67f2	; 0x67f2 <_ZN7TwoWire11requestFromEhh>
    39a8:	88 e2       	ldi	r24, 0x28	; 40
    39aa:	9c e0       	ldi	r25, 0x0C	; 12
    39ac:	0e 94 a5 32 	call	0x654a	; 0x654a <_ZN7TwoWire4readEv>
    39b0:	cf 2d       	mov	r28, r15
    39b2:	d0 2f       	mov	r29, r16
    39b4:	ce 01       	movw	r24, r28
    39b6:	81 0f       	add	r24, r17
    39b8:	91 1d       	adc	r25, r1
    39ba:	8c 01       	movw	r16, r24
    39bc:	c0 17       	cp	r28, r16
    39be:	d1 07       	cpc	r29, r17
    39c0:	61 f0       	breq	.+24     	; 0x39da <_ZN9NFC_PN5328readdataEPhh+0x5c>
    39c2:	8f e9       	ldi	r24, 0x9F	; 159
    39c4:	9f e0       	ldi	r25, 0x0F	; 15
    39c6:	01 97       	sbiw	r24, 0x01	; 1
    39c8:	f1 f7       	brne	.-4      	; 0x39c6 <_ZN9NFC_PN5328readdataEPhh+0x48>
    39ca:	00 c0       	rjmp	.+0      	; 0x39cc <_ZN9NFC_PN5328readdataEPhh+0x4e>
    39cc:	00 00       	nop
    39ce:	88 e2       	ldi	r24, 0x28	; 40
    39d0:	9c e0       	ldi	r25, 0x0C	; 12
    39d2:	0e 94 a5 32 	call	0x654a	; 0x654a <_ZN7TwoWire4readEv>
    39d6:	89 93       	st	Y+, r24
    39d8:	f1 cf       	rjmp	.-30     	; 0x39bc <_ZN9NFC_PN5328readdataEPhh+0x3e>
    39da:	df 91       	pop	r29
    39dc:	cf 91       	pop	r28
    39de:	1f 91       	pop	r17
    39e0:	0f 91       	pop	r16
    39e2:	ff 90       	pop	r15
    39e4:	08 95       	ret

000039e6 <_ZN9NFC_PN5327readackEv>:
    39e6:	cf 93       	push	r28
    39e8:	df 93       	push	r29
    39ea:	00 d0       	rcall	.+0      	; 0x39ec <_ZN9NFC_PN5327readackEv+0x6>
    39ec:	00 d0       	rcall	.+0      	; 0x39ee <_ZN9NFC_PN5327readackEv+0x8>
    39ee:	00 d0       	rcall	.+0      	; 0x39f0 <_ZN9NFC_PN5327readackEv+0xa>
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	46 e0       	ldi	r20, 0x06	; 6
    39f6:	be 01       	movw	r22, r28
    39f8:	6f 5f       	subi	r22, 0xFF	; 255
    39fa:	7f 4f       	sbci	r23, 0xFF	; 255
    39fc:	c0 df       	rcall	.-128    	; 0x397e <_ZN9NFC_PN5328readdataEPhh>
    39fe:	46 e0       	ldi	r20, 0x06	; 6
    3a00:	50 e0       	ldi	r21, 0x00	; 0
    3a02:	6f e5       	ldi	r22, 0x5F	; 95
    3a04:	71 e0       	ldi	r23, 0x01	; 1
    3a06:	ce 01       	movw	r24, r28
    3a08:	01 96       	adiw	r24, 0x01	; 1
    3a0a:	0e 94 2f 40 	call	0x805e	; 0x805e <strncmp>
    3a0e:	21 e0       	ldi	r18, 0x01	; 1
    3a10:	89 2b       	or	r24, r25
    3a12:	09 f0       	breq	.+2      	; 0x3a16 <_ZN9NFC_PN5327readackEv+0x30>
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	82 2f       	mov	r24, r18
    3a18:	26 96       	adiw	r28, 0x06	; 6
    3a1a:	0f b6       	in	r0, 0x3f	; 63
    3a1c:	f8 94       	cli
    3a1e:	de bf       	out	0x3e, r29	; 62
    3a20:	0f be       	out	0x3f, r0	; 63
    3a22:	cd bf       	out	0x3d, r28	; 61
    3a24:	df 91       	pop	r29
    3a26:	cf 91       	pop	r28
    3a28:	08 95       	ret

00003a2a <_ZL8i2c_sendh>:
    3a2a:	68 2f       	mov	r22, r24
    3a2c:	88 e2       	ldi	r24, 0x28	; 40
    3a2e:	9c e0       	ldi	r25, 0x0C	; 12
    3a30:	0c 94 2b 33 	jmp	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>

00003a34 <_ZN9NFC_PN53212writecommandEPhh>:
    3a34:	cf 92       	push	r12
    3a36:	df 92       	push	r13
    3a38:	ef 92       	push	r14
    3a3a:	ff 92       	push	r15
    3a3c:	0f 93       	push	r16
    3a3e:	1f 93       	push	r17
    3a40:	cf 93       	push	r28
    3a42:	df 93       	push	r29
    3a44:	7b 01       	movw	r14, r22
    3a46:	c1 e0       	ldi	r28, 0x01	; 1
    3a48:	c4 0f       	add	r28, r20
    3a4a:	8f e3       	ldi	r24, 0x3F	; 63
    3a4c:	9f e1       	ldi	r25, 0x1F	; 31
    3a4e:	01 97       	sbiw	r24, 0x01	; 1
    3a50:	f1 f7       	brne	.-4      	; 0x3a4e <_ZN9NFC_PN53212writecommandEPhh+0x1a>
    3a52:	00 c0       	rjmp	.+0      	; 0x3a54 <_ZN9NFC_PN53212writecommandEPhh+0x20>
    3a54:	00 00       	nop
    3a56:	64 e2       	ldi	r22, 0x24	; 36
    3a58:	70 e0       	ldi	r23, 0x00	; 0
    3a5a:	88 e2       	ldi	r24, 0x28	; 40
    3a5c:	9c e0       	ldi	r25, 0x0C	; 12
    3a5e:	0e 94 86 33 	call	0x670c	; 0x670c <_ZN7TwoWire17beginTransmissionEi>
    3a62:	80 e0       	ldi	r24, 0x00	; 0
    3a64:	e2 df       	rcall	.-60     	; 0x3a2a <_ZL8i2c_sendh>
    3a66:	80 e0       	ldi	r24, 0x00	; 0
    3a68:	e0 df       	rcall	.-64     	; 0x3a2a <_ZL8i2c_sendh>
    3a6a:	8f ef       	ldi	r24, 0xFF	; 255
    3a6c:	de df       	rcall	.-68     	; 0x3a2a <_ZL8i2c_sendh>
    3a6e:	8c 2f       	mov	r24, r28
    3a70:	dc df       	rcall	.-72     	; 0x3a2a <_ZL8i2c_sendh>
    3a72:	8c 2f       	mov	r24, r28
    3a74:	81 95       	neg	r24
    3a76:	d9 df       	rcall	.-78     	; 0x3a2a <_ZL8i2c_sendh>
    3a78:	84 ed       	ldi	r24, 0xD4	; 212
    3a7a:	d7 df       	rcall	.-82     	; 0x3a2a <_ZL8i2c_sendh>
    3a7c:	c1 2c       	mov	r12, r1
    3a7e:	83 ed       	ldi	r24, 0xD3	; 211
    3a80:	d8 2e       	mov	r13, r24
    3a82:	d0 e0       	ldi	r29, 0x00	; 0
    3a84:	21 97       	sbiw	r28, 0x01	; 1
    3a86:	0c 2d       	mov	r16, r12
    3a88:	10 e0       	ldi	r17, 0x00	; 0
    3a8a:	0c 17       	cp	r16, r28
    3a8c:	1d 07       	cpc	r17, r29
    3a8e:	54 f4       	brge	.+20     	; 0x3aa4 <_ZN9NFC_PN53212writecommandEPhh+0x70>
    3a90:	0e 0d       	add	r16, r14
    3a92:	1f 1d       	adc	r17, r15
    3a94:	f8 01       	movw	r30, r16
    3a96:	80 81       	ld	r24, Z
    3a98:	c8 df       	rcall	.-112    	; 0x3a2a <_ZL8i2c_sendh>
    3a9a:	f8 01       	movw	r30, r16
    3a9c:	80 81       	ld	r24, Z
    3a9e:	d8 0e       	add	r13, r24
    3aa0:	c3 94       	inc	r12
    3aa2:	f1 cf       	rjmp	.-30     	; 0x3a86 <_ZN9NFC_PN53212writecommandEPhh+0x52>
    3aa4:	8d 2d       	mov	r24, r13
    3aa6:	80 95       	com	r24
    3aa8:	c0 df       	rcall	.-128    	; 0x3a2a <_ZL8i2c_sendh>
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	be df       	rcall	.-132    	; 0x3a2a <_ZL8i2c_sendh>
    3aae:	88 e2       	ldi	r24, 0x28	; 40
    3ab0:	9c e0       	ldi	r25, 0x0C	; 12
    3ab2:	df 91       	pop	r29
    3ab4:	cf 91       	pop	r28
    3ab6:	1f 91       	pop	r17
    3ab8:	0f 91       	pop	r16
    3aba:	ff 90       	pop	r15
    3abc:	ef 90       	pop	r14
    3abe:	df 90       	pop	r13
    3ac0:	cf 90       	pop	r12
    3ac2:	0c 94 fd 33 	jmp	0x67fa	; 0x67fa <_ZN7TwoWire15endTransmissionEv>

00003ac6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>:
    3ac6:	0f 93       	push	r16
    3ac8:	1f 93       	push	r17
    3aca:	cf 93       	push	r28
    3acc:	df 93       	push	r29
    3ace:	ec 01       	movw	r28, r24
    3ad0:	89 01       	movw	r16, r18
    3ad2:	b0 df       	rcall	.-160    	; 0x3a34 <_ZN9NFC_PN53212writecommandEPhh>
    3ad4:	b8 01       	movw	r22, r16
    3ad6:	ce 01       	movw	r24, r28
    3ad8:	24 df       	rcall	.-440    	; 0x3922 <_ZN9NFC_PN5329waitreadyEj>
    3ada:	88 23       	and	r24, r24
    3adc:	31 f0       	breq	.+12     	; 0x3aea <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x24>
    3ade:	ce 01       	movw	r24, r28
    3ae0:	df 91       	pop	r29
    3ae2:	cf 91       	pop	r28
    3ae4:	1f 91       	pop	r17
    3ae6:	0f 91       	pop	r16
    3ae8:	7e cf       	rjmp	.-260    	; 0x39e6 <_ZN9NFC_PN5327readackEv>
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	df 91       	pop	r29
    3aee:	cf 91       	pop	r28
    3af0:	1f 91       	pop	r17
    3af2:	0f 91       	pop	r16
    3af4:	08 95       	ret

00003af6 <_ZN9NFC_PN53218getFirmwareVersionEv>:
    3af6:	cf 93       	push	r28
    3af8:	df 93       	push	r29
    3afa:	ec 01       	movw	r28, r24
    3afc:	82 e0       	ldi	r24, 0x02	; 2
    3afe:	80 93 2f 0b 	sts	0x0B2F, r24	; 0x800b2f <pn532_packetbuffer>
    3b02:	28 ee       	ldi	r18, 0xE8	; 232
    3b04:	33 e0       	ldi	r19, 0x03	; 3
    3b06:	41 e0       	ldi	r20, 0x01	; 1
    3b08:	6f e2       	ldi	r22, 0x2F	; 47
    3b0a:	7b e0       	ldi	r23, 0x0B	; 11
    3b0c:	ce 01       	movw	r24, r28
    3b0e:	db df       	rcall	.-74     	; 0x3ac6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    3b10:	81 11       	cpse	r24, r1
    3b12:	04 c0       	rjmp	.+8      	; 0x3b1c <_ZN9NFC_PN53218getFirmwareVersionEv+0x26>
    3b14:	60 e0       	ldi	r22, 0x00	; 0
    3b16:	70 e0       	ldi	r23, 0x00	; 0
    3b18:	cb 01       	movw	r24, r22
    3b1a:	32 c0       	rjmp	.+100    	; 0x3b80 <_ZN9NFC_PN53218getFirmwareVersionEv+0x8a>
    3b1c:	4c e0       	ldi	r20, 0x0C	; 12
    3b1e:	6f e2       	ldi	r22, 0x2F	; 47
    3b20:	7b e0       	ldi	r23, 0x0B	; 11
    3b22:	ce 01       	movw	r24, r28
    3b24:	2c df       	rcall	.-424    	; 0x397e <_ZN9NFC_PN5328readdataEPhh>
    3b26:	46 e0       	ldi	r20, 0x06	; 6
    3b28:	50 e0       	ldi	r21, 0x00	; 0
    3b2a:	69 e5       	ldi	r22, 0x59	; 89
    3b2c:	71 e0       	ldi	r23, 0x01	; 1
    3b2e:	8f e2       	ldi	r24, 0x2F	; 47
    3b30:	9b e0       	ldi	r25, 0x0B	; 11
    3b32:	0e 94 2f 40 	call	0x805e	; 0x805e <strncmp>
    3b36:	89 2b       	or	r24, r25
    3b38:	69 f7       	brne	.-38     	; 0x3b14 <_ZN9NFC_PN53218getFirmwareVersionEv+0x1e>
    3b3a:	8d 89       	ldd	r24, Y+21	; 0x15
    3b3c:	81 11       	cpse	r24, r1
    3b3e:	03 c0       	rjmp	.+6      	; 0x3b46 <_ZN9NFC_PN53218getFirmwareVersionEv+0x50>
    3b40:	e7 e0       	ldi	r30, 0x07	; 7
    3b42:	f0 e0       	ldi	r31, 0x00	; 0
    3b44:	02 c0       	rjmp	.+4      	; 0x3b4a <_ZN9NFC_PN53218getFirmwareVersionEv+0x54>
    3b46:	e6 e0       	ldi	r30, 0x06	; 6
    3b48:	f0 e0       	ldi	r31, 0x00	; 0
    3b4a:	e1 5d       	subi	r30, 0xD1	; 209
    3b4c:	f4 4f       	sbci	r31, 0xF4	; 244
    3b4e:	60 81       	ld	r22, Z
    3b50:	86 2f       	mov	r24, r22
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	a0 e0       	ldi	r26, 0x00	; 0
    3b56:	b0 e0       	ldi	r27, 0x00	; 0
    3b58:	ba 2f       	mov	r27, r26
    3b5a:	a9 2f       	mov	r26, r25
    3b5c:	98 2f       	mov	r25, r24
    3b5e:	88 27       	eor	r24, r24
    3b60:	21 81       	ldd	r18, Z+1	; 0x01
    3b62:	82 2b       	or	r24, r18
    3b64:	ba 2f       	mov	r27, r26
    3b66:	a9 2f       	mov	r26, r25
    3b68:	98 2f       	mov	r25, r24
    3b6a:	88 27       	eor	r24, r24
    3b6c:	22 81       	ldd	r18, Z+2	; 0x02
    3b6e:	82 2b       	or	r24, r18
    3b70:	ba 2f       	mov	r27, r26
    3b72:	a9 2f       	mov	r26, r25
    3b74:	98 2f       	mov	r25, r24
    3b76:	88 27       	eor	r24, r24
    3b78:	23 81       	ldd	r18, Z+3	; 0x03
    3b7a:	bc 01       	movw	r22, r24
    3b7c:	cd 01       	movw	r24, r26
    3b7e:	62 2b       	or	r22, r18
    3b80:	df 91       	pop	r29
    3b82:	cf 91       	pop	r28
    3b84:	08 95       	ret

00003b86 <_ZN9NFC_PN5329SAMConfigEv>:
    3b86:	cf 93       	push	r28
    3b88:	df 93       	push	r29
    3b8a:	ec 01       	movw	r28, r24
    3b8c:	94 e1       	ldi	r25, 0x14	; 20
    3b8e:	90 93 2f 0b 	sts	0x0B2F, r25	; 0x800b2f <pn532_packetbuffer>
    3b92:	81 e0       	ldi	r24, 0x01	; 1
    3b94:	80 93 30 0b 	sts	0x0B30, r24	; 0x800b30 <pn532_packetbuffer+0x1>
    3b98:	90 93 31 0b 	sts	0x0B31, r25	; 0x800b31 <pn532_packetbuffer+0x2>
    3b9c:	80 93 32 0b 	sts	0x0B32, r24	; 0x800b32 <pn532_packetbuffer+0x3>
    3ba0:	28 ee       	ldi	r18, 0xE8	; 232
    3ba2:	33 e0       	ldi	r19, 0x03	; 3
    3ba4:	44 e0       	ldi	r20, 0x04	; 4
    3ba6:	6f e2       	ldi	r22, 0x2F	; 47
    3ba8:	7b e0       	ldi	r23, 0x0B	; 11
    3baa:	ce 01       	movw	r24, r28
    3bac:	8c df       	rcall	.-232    	; 0x3ac6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    3bae:	88 23       	and	r24, r24
    3bb0:	a9 f0       	breq	.+42     	; 0x3bdc <_ZN9NFC_PN5329SAMConfigEv+0x56>
    3bb2:	48 e0       	ldi	r20, 0x08	; 8
    3bb4:	6f e2       	ldi	r22, 0x2F	; 47
    3bb6:	7b e0       	ldi	r23, 0x0B	; 11
    3bb8:	ce 01       	movw	r24, r28
    3bba:	e1 de       	rcall	.-574    	; 0x397e <_ZN9NFC_PN5328readdataEPhh>
    3bbc:	8d 89       	ldd	r24, Y+21	; 0x15
    3bbe:	81 11       	cpse	r24, r1
    3bc0:	03 c0       	rjmp	.+6      	; 0x3bc8 <_ZN9NFC_PN5329SAMConfigEv+0x42>
    3bc2:	86 e0       	ldi	r24, 0x06	; 6
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	02 c0       	rjmp	.+4      	; 0x3bcc <_ZN9NFC_PN5329SAMConfigEv+0x46>
    3bc8:	85 e0       	ldi	r24, 0x05	; 5
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	fc 01       	movw	r30, r24
    3bce:	e1 5d       	subi	r30, 0xD1	; 209
    3bd0:	f4 4f       	sbci	r31, 0xF4	; 244
    3bd2:	81 e0       	ldi	r24, 0x01	; 1
    3bd4:	90 81       	ld	r25, Z
    3bd6:	95 31       	cpi	r25, 0x15	; 21
    3bd8:	09 f0       	breq	.+2      	; 0x3bdc <_ZN9NFC_PN5329SAMConfigEv+0x56>
    3bda:	80 e0       	ldi	r24, 0x00	; 0
    3bdc:	df 91       	pop	r29
    3bde:	cf 91       	pop	r28
    3be0:	08 95       	ret

00003be2 <_ZN9NFC_PN53227setPassiveActivationRetriesEh>:
    3be2:	ef e2       	ldi	r30, 0x2F	; 47
    3be4:	fb e0       	ldi	r31, 0x0B	; 11
    3be6:	22 e3       	ldi	r18, 0x32	; 50
    3be8:	20 83       	st	Z, r18
    3bea:	25 e0       	ldi	r18, 0x05	; 5
    3bec:	21 83       	std	Z+1, r18	; 0x01
    3bee:	2f ef       	ldi	r18, 0xFF	; 255
    3bf0:	22 83       	std	Z+2, r18	; 0x02
    3bf2:	21 e0       	ldi	r18, 0x01	; 1
    3bf4:	23 83       	std	Z+3, r18	; 0x03
    3bf6:	64 83       	std	Z+4, r22	; 0x04
    3bf8:	28 ee       	ldi	r18, 0xE8	; 232
    3bfa:	33 e0       	ldi	r19, 0x03	; 3
    3bfc:	45 e0       	ldi	r20, 0x05	; 5
    3bfe:	bf 01       	movw	r22, r30
    3c00:	62 cf       	rjmp	.-316    	; 0x3ac6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>

00003c02 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>:
    3c02:	af 92       	push	r10
    3c04:	bf 92       	push	r11
    3c06:	cf 92       	push	r12
    3c08:	df 92       	push	r13
    3c0a:	ef 92       	push	r14
    3c0c:	ff 92       	push	r15
    3c0e:	0f 93       	push	r16
    3c10:	1f 93       	push	r17
    3c12:	cf 93       	push	r28
    3c14:	df 93       	push	r29
    3c16:	ec 01       	movw	r28, r24
    3c18:	7a 01       	movw	r14, r20
    3c1a:	59 01       	movw	r10, r18
    3c1c:	68 01       	movw	r12, r16
    3c1e:	8a e4       	ldi	r24, 0x4A	; 74
    3c20:	80 93 2f 0b 	sts	0x0B2F, r24	; 0x800b2f <pn532_packetbuffer>
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	80 93 30 0b 	sts	0x0B30, r24	; 0x800b30 <pn532_packetbuffer+0x1>
    3c2a:	60 93 31 0b 	sts	0x0B31, r22	; 0x800b31 <pn532_packetbuffer+0x2>
    3c2e:	98 01       	movw	r18, r16
    3c30:	43 e0       	ldi	r20, 0x03	; 3
    3c32:	6f e2       	ldi	r22, 0x2F	; 47
    3c34:	7b e0       	ldi	r23, 0x0B	; 11
    3c36:	ce 01       	movw	r24, r28
    3c38:	46 df       	rcall	.-372    	; 0x3ac6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    3c3a:	18 2f       	mov	r17, r24
    3c3c:	88 23       	and	r24, r24
    3c3e:	41 f1       	breq	.+80     	; 0x3c90 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    3c40:	8d 89       	ldd	r24, Y+21	; 0x15
    3c42:	88 23       	and	r24, r24
    3c44:	79 f0       	breq	.+30     	; 0x3c64 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x62>
    3c46:	44 e1       	ldi	r20, 0x14	; 20
    3c48:	6f e2       	ldi	r22, 0x2F	; 47
    3c4a:	7b e0       	ldi	r23, 0x0B	; 11
    3c4c:	ce 01       	movw	r24, r28
    3c4e:	97 de       	rcall	.-722    	; 0x397e <_ZN9NFC_PN5328readdataEPhh>
    3c50:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <pn532_packetbuffer+0x7>
    3c54:	81 30       	cpi	r24, 0x01	; 1
    3c56:	e1 f4       	brne	.+56     	; 0x3c90 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    3c58:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <pn532_packetbuffer+0xc>
    3c5c:	f5 01       	movw	r30, r10
    3c5e:	80 83       	st	Z, r24
    3c60:	80 e0       	ldi	r24, 0x00	; 0
    3c62:	06 c0       	rjmp	.+12     	; 0x3c70 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    3c64:	b6 01       	movw	r22, r12
    3c66:	ce 01       	movw	r24, r28
    3c68:	5c de       	rcall	.-840    	; 0x3922 <_ZN9NFC_PN5329waitreadyEj>
    3c6a:	81 11       	cpse	r24, r1
    3c6c:	ec cf       	rjmp	.-40     	; 0x3c46 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x44>
    3c6e:	10 c0       	rjmp	.+32     	; 0x3c90 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    3c70:	90 91 3b 0b 	lds	r25, 0x0B3B	; 0x800b3b <pn532_packetbuffer+0xc>
    3c74:	89 17       	cp	r24, r25
    3c76:	68 f4       	brcc	.+26     	; 0x3c92 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x90>
    3c78:	28 2f       	mov	r18, r24
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	f9 01       	movw	r30, r18
    3c7e:	e1 5d       	subi	r30, 0xD1	; 209
    3c80:	f4 4f       	sbci	r31, 0xF4	; 244
    3c82:	95 85       	ldd	r25, Z+13	; 0x0d
    3c84:	f7 01       	movw	r30, r14
    3c86:	e2 0f       	add	r30, r18
    3c88:	f3 1f       	adc	r31, r19
    3c8a:	90 83       	st	Z, r25
    3c8c:	8f 5f       	subi	r24, 0xFF	; 255
    3c8e:	f0 cf       	rjmp	.-32     	; 0x3c70 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    3c90:	10 e0       	ldi	r17, 0x00	; 0
    3c92:	81 2f       	mov	r24, r17
    3c94:	df 91       	pop	r29
    3c96:	cf 91       	pop	r28
    3c98:	1f 91       	pop	r17
    3c9a:	0f 91       	pop	r16
    3c9c:	ff 90       	pop	r15
    3c9e:	ef 90       	pop	r14
    3ca0:	df 90       	pop	r13
    3ca2:	cf 90       	pop	r12
    3ca4:	bf 90       	pop	r11
    3ca6:	af 90       	pop	r10
    3ca8:	08 95       	ret

00003caa <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    3caa:	af 92       	push	r10
    3cac:	bf 92       	push	r11
    3cae:	cf 92       	push	r12
    3cb0:	df 92       	push	r13
    3cb2:	ef 92       	push	r14
    3cb4:	0f 93       	push	r16
    3cb6:	1f 93       	push	r17
    3cb8:	cf 93       	push	r28
    3cba:	df 93       	push	r29
    3cbc:	ec 01       	movw	r28, r24
    3cbe:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    3cc0:	5c 01       	movw	r10, r24
    3cc2:	8e e0       	ldi	r24, 0x0E	; 14
    3cc4:	a8 0e       	add	r10, r24
    3cc6:	b1 1c       	adc	r11, r1
    3cc8:	86 e0       	ldi	r24, 0x06	; 6
    3cca:	f6 01       	movw	r30, r12
    3ccc:	d5 01       	movw	r26, r10
    3cce:	01 90       	ld	r0, Z+
    3cd0:	0d 92       	st	X+, r0
    3cd2:	8a 95       	dec	r24
    3cd4:	e1 f7       	brne	.-8      	; 0x3cce <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    3cd6:	50 e0       	ldi	r21, 0x00	; 0
    3cd8:	ce 01       	movw	r24, r28
    3cda:	06 96       	adiw	r24, 0x06	; 6
    3cdc:	0e 94 16 40 	call	0x802c	; 0x802c <memcpy>
  _uidLen = uidLen;
    3ce0:	1d 87       	std	Y+13, r17	; 0x0d
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    NFC_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    3ce2:	80 e4       	ldi	r24, 0x40	; 64
    3ce4:	80 93 2f 0b 	sts	0x0B2F, r24	; 0x800b2f <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	80 93 30 0b 	sts	0x0B30, r24	; 0x800b30 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    3cee:	e1 10       	cpse	r14, r1
    3cf0:	02 c0       	rjmp	.+4      	; 0x3cf6 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    3cf2:	80 e6       	ldi	r24, 0x60	; 96
    3cf4:	01 c0       	rjmp	.+2      	; 0x3cf8 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    3cf6:	81 e6       	ldi	r24, 0x61	; 97
    3cf8:	80 93 31 0b 	sts	0x0B31, r24	; 0x800b31 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    3cfc:	00 93 32 0b 	sts	0x0B32, r16	; 0x800b32 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    3d00:	86 e0       	ldi	r24, 0x06	; 6
    3d02:	f5 01       	movw	r30, r10
    3d04:	a3 e3       	ldi	r26, 0x33	; 51
    3d06:	bb e0       	ldi	r27, 0x0B	; 11
    3d08:	01 90       	ld	r0, Z+
    3d0a:	0d 92       	st	X+, r0
    3d0c:	8a 95       	dec	r24
    3d0e:	e1 f7       	brne	.-8      	; 0x3d08 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	4d 85       	ldd	r20, Y+13	; 0x0d
    3d14:	84 17       	cp	r24, r20
    3d16:	60 f4       	brcc	.+24     	; 0x3d30 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    3d18:	28 2f       	mov	r18, r24
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	fe 01       	movw	r30, r28
    3d1e:	e2 0f       	add	r30, r18
    3d20:	f3 1f       	adc	r31, r19
    3d22:	96 81       	ldd	r25, Z+6	; 0x06
    3d24:	f9 01       	movw	r30, r18
    3d26:	e1 5d       	subi	r30, 0xD1	; 209
    3d28:	f4 4f       	sbci	r31, 0xF4	; 244
    3d2a:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    3d2c:	8f 5f       	subi	r24, 0xFF	; 255
    3d2e:	f1 cf       	rjmp	.-30     	; 0x3d12 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    3d30:	46 5f       	subi	r20, 0xF6	; 246
    3d32:	28 ee       	ldi	r18, 0xE8	; 232
    3d34:	33 e0       	ldi	r19, 0x03	; 3
    3d36:	6f e2       	ldi	r22, 0x2F	; 47
    3d38:	7b e0       	ldi	r23, 0x0B	; 11
    3d3a:	ce 01       	movw	r24, r28
    3d3c:	c4 de       	rcall	.-632    	; 0x3ac6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    3d3e:	88 23       	and	r24, r24
    3d40:	49 f0       	breq	.+18     	; 0x3d54 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    3d42:	4c e0       	ldi	r20, 0x0C	; 12
    3d44:	6f e2       	ldi	r22, 0x2F	; 47
    3d46:	7b e0       	ldi	r23, 0x0B	; 11
    3d48:	ce 01       	movw	r24, r28
    3d4a:	19 de       	rcall	.-974    	; 0x397e <_ZN9NFC_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
    3d4e:	90 91 36 0b 	lds	r25, 0x0B36	; 0x800b36 <pn532_packetbuffer+0x7>
    3d52:	91 11       	cpse	r25, r1
    3d54:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    3d56:	df 91       	pop	r29
    3d58:	cf 91       	pop	r28
    3d5a:	1f 91       	pop	r17
    3d5c:	0f 91       	pop	r16
    3d5e:	ef 90       	pop	r14
    3d60:	df 90       	pop	r13
    3d62:	cf 90       	pop	r12
    3d64:	bf 90       	pop	r11
    3d66:	af 90       	pop	r10
    3d68:	08 95       	ret

00003d6a <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    3d6a:	0f 93       	push	r16
    3d6c:	1f 93       	push	r17
    3d6e:	cf 93       	push	r28
    3d70:	df 93       	push	r29
    3d72:	ec 01       	movw	r28, r24
    3d74:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    3d76:	80 e4       	ldi	r24, 0x40	; 64
    3d78:	80 93 2f 0b 	sts	0x0B2F, r24	; 0x800b2f <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	80 93 30 0b 	sts	0x0B30, r24	; 0x800b30 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    3d82:	80 e3       	ldi	r24, 0x30	; 48
    3d84:	80 93 31 0b 	sts	0x0B31, r24	; 0x800b31 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    3d88:	60 93 32 0b 	sts	0x0B32, r22	; 0x800b32 <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    3d8c:	28 ee       	ldi	r18, 0xE8	; 232
    3d8e:	33 e0       	ldi	r19, 0x03	; 3
    3d90:	44 e0       	ldi	r20, 0x04	; 4
    3d92:	6f e2       	ldi	r22, 0x2F	; 47
    3d94:	7b e0       	ldi	r23, 0x0B	; 11
    3d96:	ce 01       	movw	r24, r28
    3d98:	96 de       	rcall	.-724    	; 0x3ac6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    3d9a:	81 11       	cpse	r24, r1
    3d9c:	02 c0       	rjmp	.+4      	; 0x3da2 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	12 c0       	rjmp	.+36     	; 0x3dc6 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x5c>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    3da2:	4a e1       	ldi	r20, 0x1A	; 26
    3da4:	6f e2       	ldi	r22, 0x2F	; 47
    3da6:	7b e0       	ldi	r23, 0x0B	; 11
    3da8:	ce 01       	movw	r24, r28
    3daa:	e9 dd       	rcall	.-1070   	; 0x397e <_ZN9NFC_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    3dac:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <pn532_packetbuffer+0x7>
    3db0:	81 11       	cpse	r24, r1
    3db2:	f5 cf       	rjmp	.-22     	; 0x3d9e <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    3db4:	80 e1       	ldi	r24, 0x10	; 16
    3db6:	e7 e3       	ldi	r30, 0x37	; 55
    3db8:	fb e0       	ldi	r31, 0x0B	; 11
    3dba:	d8 01       	movw	r26, r16
    3dbc:	01 90       	ld	r0, Z+
    3dbe:	0d 92       	st	X+, r0
    3dc0:	8a 95       	dec	r24
    3dc2:	e1 f7       	brne	.-8      	; 0x3dbc <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x52>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    NFC_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
}
    3dc6:	df 91       	pop	r29
    3dc8:	cf 91       	pop	r28
    3dca:	1f 91       	pop	r17
    3dcc:	0f 91       	pop	r16
    3dce:	08 95       	ret

00003dd0 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    3dd0:	cf 93       	push	r28
    3dd2:	df 93       	push	r29
    3dd4:	ec 01       	movw	r28, r24
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    3dd6:	80 e4       	ldi	r24, 0x40	; 64
    3dd8:	80 93 2f 0b 	sts	0x0B2F, r24	; 0x800b2f <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	80 93 30 0b 	sts	0x0B30, r24	; 0x800b30 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    3de2:	80 ea       	ldi	r24, 0xA0	; 160
    3de4:	80 93 31 0b 	sts	0x0B31, r24	; 0x800b31 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    3de8:	60 93 32 0b 	sts	0x0B32, r22	; 0x800b32 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);          /* Data Payload */
    3dec:	80 e1       	ldi	r24, 0x10	; 16
    3dee:	fa 01       	movw	r30, r20
    3df0:	a3 e3       	ldi	r26, 0x33	; 51
    3df2:	bb e0       	ldi	r27, 0x0B	; 11
    3df4:	01 90       	ld	r0, Z+
    3df6:	0d 92       	st	X+, r0
    3df8:	8a 95       	dec	r24
    3dfa:	e1 f7       	brne	.-8      	; 0x3df4 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    3dfc:	28 ee       	ldi	r18, 0xE8	; 232
    3dfe:	33 e0       	ldi	r19, 0x03	; 3
    3e00:	44 e1       	ldi	r20, 0x14	; 20
    3e02:	6f e2       	ldi	r22, 0x2F	; 47
    3e04:	7b e0       	ldi	r23, 0x0B	; 11
    3e06:	ce 01       	movw	r24, r28
    3e08:	5e de       	rcall	.-836    	; 0x3ac6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    3e0a:	88 23       	and	r24, r24
    3e0c:	69 f0       	breq	.+26     	; 0x3e28 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    3e0e:	8f e3       	ldi	r24, 0x3F	; 63
    3e10:	9c e9       	ldi	r25, 0x9C	; 156
    3e12:	01 97       	sbiw	r24, 0x01	; 1
    3e14:	f1 f7       	brne	.-4      	; 0x3e12 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x42>
    3e16:	00 c0       	rjmp	.+0      	; 0x3e18 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x48>
    3e18:	00 00       	nop
    return 0;
  }
  _delay_ms(10);

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    3e1a:	4a e1       	ldi	r20, 0x1A	; 26
    3e1c:	6f e2       	ldi	r22, 0x2F	; 47
    3e1e:	7b e0       	ldi	r23, 0x0B	; 11
    3e20:	ce 01       	movw	r24, r28
    3e22:	ad dd       	rcall	.-1190   	; 0x397e <_ZN9NFC_PN5328readdataEPhh>
    3e24:	81 e0       	ldi	r24, 0x01	; 1
    3e26:	01 c0       	rjmp	.+2      	; 0x3e2a <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
    #endif
    return 0;
    3e28:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    3e2a:	df 91       	pop	r29
    3e2c:	cf 91       	pop	r28
    3e2e:	08 95       	ret

00003e30 <_ZL9date2daysjhh>:
} // of method pinAlarm()                                                     //                                  //
/*******************************************************************************************************************
** Method pinSquareWave() will set the control register flag to make the INT/SQW Pin produce a 1Hz signal         **
*******************************************************************************************************************/
void DS3231M_Class::pinSquareWave() {                                         //                                  //
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)|0x4);                   // Set bit 3 to off                 //
    3e30:	80 3d       	cpi	r24, 0xD0	; 208
    3e32:	27 e0       	ldi	r18, 0x07	; 7
    3e34:	92 07       	cpc	r25, r18
    3e36:	10 f0       	brcs	.+4      	; 0x3e3c <_ZL9date2daysjhh+0xc>
    3e38:	80 5d       	subi	r24, 0xD0	; 208
    3e3a:	97 40       	sbci	r25, 0x07	; 7
    3e3c:	50 e0       	ldi	r21, 0x00	; 0
    3e3e:	e4 e2       	ldi	r30, 0x24	; 36
    3e40:	f2 e0       	ldi	r31, 0x02	; 2
    3e42:	21 e0       	ldi	r18, 0x01	; 1
    3e44:	26 17       	cp	r18, r22
    3e46:	30 f4       	brcc	.+12     	; 0x3e54 <_ZL9date2daysjhh+0x24>
    3e48:	34 91       	lpm	r19, Z
    3e4a:	43 0f       	add	r20, r19
    3e4c:	51 1d       	adc	r21, r1
    3e4e:	2f 5f       	subi	r18, 0xFF	; 255
    3e50:	31 96       	adiw	r30, 0x01	; 1
    3e52:	f8 cf       	rjmp	.-16     	; 0x3e44 <_ZL9date2daysjhh+0x14>
    3e54:	63 30       	cpi	r22, 0x03	; 3
    3e56:	38 f0       	brcs	.+14     	; 0x3e66 <_ZL9date2daysjhh+0x36>
    3e58:	9c 01       	movw	r18, r24
    3e5a:	23 70       	andi	r18, 0x03	; 3
    3e5c:	33 27       	eor	r19, r19
    3e5e:	23 2b       	or	r18, r19
    3e60:	11 f4       	brne	.+4      	; 0x3e66 <_ZL9date2daysjhh+0x36>
    3e62:	4f 5f       	subi	r20, 0xFF	; 255
    3e64:	5f 4f       	sbci	r21, 0xFF	; 255
    3e66:	bc 01       	movw	r22, r24
    3e68:	6d 5f       	subi	r22, 0xFD	; 253
    3e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e6c:	76 95       	lsr	r23
    3e6e:	67 95       	ror	r22
    3e70:	76 95       	lsr	r23
    3e72:	67 95       	ror	r22
    3e74:	ed e6       	ldi	r30, 0x6D	; 109
    3e76:	f1 e0       	ldi	r31, 0x01	; 1
    3e78:	8e 9f       	mul	r24, r30
    3e7a:	90 01       	movw	r18, r0
    3e7c:	8f 9f       	mul	r24, r31
    3e7e:	30 0d       	add	r19, r0
    3e80:	9e 9f       	mul	r25, r30
    3e82:	30 0d       	add	r19, r0
    3e84:	11 24       	eor	r1, r1
    3e86:	c9 01       	movw	r24, r18
    3e88:	01 97       	sbiw	r24, 0x01	; 1
    3e8a:	86 0f       	add	r24, r22
    3e8c:	97 1f       	adc	r25, r23
    3e8e:	84 0f       	add	r24, r20
    3e90:	95 1f       	adc	r25, r21
    3e92:	08 95       	ret

00003e94 <_ZL6conv2dPKc>:
    3e94:	fc 01       	movw	r30, r24
    3e96:	90 81       	ld	r25, Z
    3e98:	90 53       	subi	r25, 0x30	; 48
    3e9a:	9a 30       	cpi	r25, 0x0A	; 10
    3e9c:	08 f0       	brcs	.+2      	; 0x3ea0 <_ZL6conv2dPKc+0xc>
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	81 81       	ldd	r24, Z+1	; 0x01
    3ea2:	80 53       	subi	r24, 0x30	; 48
    3ea4:	2a e0       	ldi	r18, 0x0A	; 10
    3ea6:	92 9f       	mul	r25, r18
    3ea8:	80 0d       	add	r24, r0
    3eaa:	11 24       	eor	r1, r1
    3eac:	08 95       	ret

00003eae <_ZN8DateTimeC1Em>:
    3eae:	8f 92       	push	r8
    3eb0:	9f 92       	push	r9
    3eb2:	af 92       	push	r10
    3eb4:	bf 92       	push	r11
    3eb6:	cf 92       	push	r12
    3eb8:	df 92       	push	r13
    3eba:	ef 92       	push	r14
    3ebc:	ff 92       	push	r15
    3ebe:	cf 93       	push	r28
    3ec0:	df 93       	push	r29
    3ec2:	ec 01       	movw	r28, r24
    3ec4:	6a 01       	movw	r12, r20
    3ec6:	7b 01       	movw	r14, r22
    3ec8:	80 e8       	ldi	r24, 0x80	; 128
    3eca:	c8 1a       	sub	r12, r24
    3ecc:	83 e4       	ldi	r24, 0x43	; 67
    3ece:	d8 0a       	sbc	r13, r24
    3ed0:	8d e6       	ldi	r24, 0x6D	; 109
    3ed2:	e8 0a       	sbc	r14, r24
    3ed4:	88 e3       	ldi	r24, 0x38	; 56
    3ed6:	f8 0a       	sbc	r15, r24
    3ed8:	8c e3       	ldi	r24, 0x3C	; 60
    3eda:	88 2e       	mov	r8, r24
    3edc:	91 2c       	mov	r9, r1
    3ede:	a1 2c       	mov	r10, r1
    3ee0:	b1 2c       	mov	r11, r1
    3ee2:	c7 01       	movw	r24, r14
    3ee4:	b6 01       	movw	r22, r12
    3ee6:	a5 01       	movw	r20, r10
    3ee8:	94 01       	movw	r18, r8
    3eea:	0e 94 77 3d 	call	0x7aee	; 0x7aee <__udivmodsi4>
    3eee:	6d 83       	std	Y+5, r22	; 0x05
    3ef0:	ca 01       	movw	r24, r20
    3ef2:	b9 01       	movw	r22, r18
    3ef4:	a5 01       	movw	r20, r10
    3ef6:	94 01       	movw	r18, r8
    3ef8:	0e 94 77 3d 	call	0x7aee	; 0x7aee <__udivmodsi4>
    3efc:	6c 83       	std	Y+4, r22	; 0x04
    3efe:	c7 01       	movw	r24, r14
    3f00:	b6 01       	movw	r22, r12
    3f02:	20 e1       	ldi	r18, 0x10	; 16
    3f04:	3e e0       	ldi	r19, 0x0E	; 14
    3f06:	40 e0       	ldi	r20, 0x00	; 0
    3f08:	50 e0       	ldi	r21, 0x00	; 0
    3f0a:	0e 94 77 3d 	call	0x7aee	; 0x7aee <__udivmodsi4>
    3f0e:	ca 01       	movw	r24, r20
    3f10:	b9 01       	movw	r22, r18
    3f12:	28 e1       	ldi	r18, 0x18	; 24
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	40 e0       	ldi	r20, 0x00	; 0
    3f18:	50 e0       	ldi	r21, 0x00	; 0
    3f1a:	0e 94 77 3d 	call	0x7aee	; 0x7aee <__udivmodsi4>
    3f1e:	6b 83       	std	Y+3, r22	; 0x03
    3f20:	c7 01       	movw	r24, r14
    3f22:	b6 01       	movw	r22, r12
    3f24:	20 e8       	ldi	r18, 0x80	; 128
    3f26:	31 e5       	ldi	r19, 0x51	; 81
    3f28:	41 e0       	ldi	r20, 0x01	; 1
    3f2a:	50 e0       	ldi	r21, 0x00	; 0
    3f2c:	0e 94 77 3d 	call	0x7aee	; 0x7aee <__udivmodsi4>
    3f30:	18 82       	st	Y, r1
    3f32:	88 81       	ld	r24, Y
    3f34:	98 2f       	mov	r25, r24
    3f36:	93 70       	andi	r25, 0x03	; 3
    3f38:	41 e0       	ldi	r20, 0x01	; 1
    3f3a:	50 e0       	ldi	r21, 0x00	; 0
    3f3c:	11 f0       	breq	.+4      	; 0x3f42 <_ZN8DateTimeC1Em+0x94>
    3f3e:	40 e0       	ldi	r20, 0x00	; 0
    3f40:	50 e0       	ldi	r21, 0x00	; 0
    3f42:	ba 01       	movw	r22, r20
    3f44:	63 59       	subi	r22, 0x93	; 147
    3f46:	7e 4f       	sbci	r23, 0xFE	; 254
    3f48:	26 17       	cp	r18, r22
    3f4a:	37 07       	cpc	r19, r23
    3f4c:	38 f0       	brcs	.+14     	; 0x3f5c <_ZN8DateTimeC1Em+0xae>
    3f4e:	24 1b       	sub	r18, r20
    3f50:	35 0b       	sbc	r19, r21
    3f52:	2d 56       	subi	r18, 0x6D	; 109
    3f54:	31 40       	sbci	r19, 0x01	; 1
    3f56:	8f 5f       	subi	r24, 0xFF	; 255
    3f58:	88 83       	st	Y, r24
    3f5a:	eb cf       	rjmp	.-42     	; 0x3f32 <_ZN8DateTimeC1Em+0x84>
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	89 83       	std	Y+1, r24	; 0x01
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	e8 2f       	mov	r30, r24
    3f64:	f0 e0       	ldi	r31, 0x00	; 0
    3f66:	ed 5d       	subi	r30, 0xDD	; 221
    3f68:	fd 4f       	sbci	r31, 0xFD	; 253
    3f6a:	e4 91       	lpm	r30, Z
    3f6c:	91 11       	cpse	r25, r1
    3f6e:	03 c0       	rjmp	.+6      	; 0x3f76 <_ZN8DateTimeC1Em+0xc8>
    3f70:	82 30       	cpi	r24, 0x02	; 2
    3f72:	09 f4       	brne	.+2      	; 0x3f76 <_ZN8DateTimeC1Em+0xc8>
    3f74:	ef 5f       	subi	r30, 0xFF	; 255
    3f76:	f0 e0       	ldi	r31, 0x00	; 0
    3f78:	2e 17       	cp	r18, r30
    3f7a:	3f 07       	cpc	r19, r31
    3f7c:	20 f0       	brcs	.+8      	; 0x3f86 <_ZN8DateTimeC1Em+0xd8>
    3f7e:	2e 1b       	sub	r18, r30
    3f80:	3f 0b       	sbc	r19, r31
    3f82:	8f 5f       	subi	r24, 0xFF	; 255
    3f84:	ec cf       	rjmp	.-40     	; 0x3f5e <_ZN8DateTimeC1Em+0xb0>
    3f86:	2f 5f       	subi	r18, 0xFF	; 255
    3f88:	2a 83       	std	Y+2, r18	; 0x02
    3f8a:	df 91       	pop	r29
    3f8c:	cf 91       	pop	r28
    3f8e:	ff 90       	pop	r15
    3f90:	ef 90       	pop	r14
    3f92:	df 90       	pop	r13
    3f94:	cf 90       	pop	r12
    3f96:	bf 90       	pop	r11
    3f98:	af 90       	pop	r10
    3f9a:	9f 90       	pop	r9
    3f9c:	8f 90       	pop	r8
    3f9e:	08 95       	ret

00003fa0 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    3fa0:	ef 92       	push	r14
    3fa2:	ff 92       	push	r15
    3fa4:	0f 93       	push	r16
    3fa6:	1f 93       	push	r17
    3fa8:	cf 93       	push	r28
    3faa:	df 93       	push	r29
    3fac:	cd b7       	in	r28, 0x3d	; 61
    3fae:	de b7       	in	r29, 0x3e	; 62
    3fb0:	2b 97       	sbiw	r28, 0x0b	; 11
    3fb2:	0f b6       	in	r0, 0x3f	; 63
    3fb4:	f8 94       	cli
    3fb6:	de bf       	out	0x3e, r29	; 62
    3fb8:	0f be       	out	0x3f, r0	; 63
    3fba:	cd bf       	out	0x3d, r28	; 61
    3fbc:	8c 01       	movw	r16, r24
    3fbe:	7a 01       	movw	r14, r20
    3fc0:	4b e0       	ldi	r20, 0x0B	; 11
    3fc2:	50 e0       	ldi	r21, 0x00	; 0
    3fc4:	ce 01       	movw	r24, r28
    3fc6:	01 96       	adiw	r24, 0x01	; 1
    3fc8:	0e 94 0d 40 	call	0x801a	; 0x801a <memcpy_P>
    3fcc:	ce 01       	movw	r24, r28
    3fce:	0a 96       	adiw	r24, 0x0a	; 10
    3fd0:	61 df       	rcall	.-318    	; 0x3e94 <_ZL6conv2dPKc>
    3fd2:	f8 01       	movw	r30, r16
    3fd4:	80 83       	st	Z, r24
    3fd6:	e9 81       	ldd	r30, Y+1	; 0x01
    3fd8:	8e 2f       	mov	r24, r30
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	fc 01       	movw	r30, r24
    3fde:	e1 54       	subi	r30, 0x41	; 65
    3fe0:	f1 09       	sbc	r31, r1
    3fe2:	e3 31       	cpi	r30, 0x13	; 19
    3fe4:	f1 05       	cpc	r31, r1
    3fe6:	48 f5       	brcc	.+82     	; 0x403a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    3fe8:	ef 5a       	subi	r30, 0xAF	; 175
    3fea:	ff 4f       	sbci	r31, 0xFF	; 255
    3fec:	0c 94 99 3d 	jmp	0x7b32	; 0x7b32 <__tablejump2__>
    3ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff2:	81 36       	cpi	r24, 0x61	; 97
    3ff4:	29 f0       	breq	.+10     	; 0x4000 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    3ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff8:	8e 36       	cpi	r24, 0x6E	; 110
    3ffa:	21 f0       	breq	.+8      	; 0x4004 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    3ffc:	87 e0       	ldi	r24, 0x07	; 7
    3ffe:	1b c0       	rjmp	.+54     	; 0x4036 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	19 c0       	rjmp	.+50     	; 0x4036 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4004:	86 e0       	ldi	r24, 0x06	; 6
    4006:	17 c0       	rjmp	.+46     	; 0x4036 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4008:	82 e0       	ldi	r24, 0x02	; 2
    400a:	15 c0       	rjmp	.+42     	; 0x4036 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    400c:	8b 81       	ldd	r24, Y+3	; 0x03
    400e:	82 37       	cpi	r24, 0x72	; 114
    4010:	11 f0       	breq	.+4      	; 0x4016 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    4012:	88 e0       	ldi	r24, 0x08	; 8
    4014:	10 c0       	rjmp	.+32     	; 0x4036 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4016:	84 e0       	ldi	r24, 0x04	; 4
    4018:	0e c0       	rjmp	.+28     	; 0x4036 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    401a:	8b 81       	ldd	r24, Y+3	; 0x03
    401c:	82 37       	cpi	r24, 0x72	; 114
    401e:	11 f0       	breq	.+4      	; 0x4024 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    4020:	85 e0       	ldi	r24, 0x05	; 5
    4022:	09 c0       	rjmp	.+18     	; 0x4036 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4024:	83 e0       	ldi	r24, 0x03	; 3
    4026:	07 c0       	rjmp	.+14     	; 0x4036 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4028:	89 e0       	ldi	r24, 0x09	; 9
    402a:	05 c0       	rjmp	.+10     	; 0x4036 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    402c:	8a e0       	ldi	r24, 0x0A	; 10
    402e:	03 c0       	rjmp	.+6      	; 0x4036 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4030:	8b e0       	ldi	r24, 0x0B	; 11
    4032:	01 c0       	rjmp	.+2      	; 0x4036 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4034:	8c e0       	ldi	r24, 0x0C	; 12
    4036:	f8 01       	movw	r30, r16
    4038:	81 83       	std	Z+1, r24	; 0x01
    403a:	ce 01       	movw	r24, r28
    403c:	05 96       	adiw	r24, 0x05	; 5
    403e:	2a df       	rcall	.-428    	; 0x3e94 <_ZL6conv2dPKc>
    4040:	f8 01       	movw	r30, r16
    4042:	82 83       	std	Z+2, r24	; 0x02
    4044:	48 e0       	ldi	r20, 0x08	; 8
    4046:	50 e0       	ldi	r21, 0x00	; 0
    4048:	b7 01       	movw	r22, r14
    404a:	ce 01       	movw	r24, r28
    404c:	01 96       	adiw	r24, 0x01	; 1
    404e:	0e 94 0d 40 	call	0x801a	; 0x801a <memcpy_P>
    4052:	ce 01       	movw	r24, r28
    4054:	01 96       	adiw	r24, 0x01	; 1
    4056:	1e df       	rcall	.-452    	; 0x3e94 <_ZL6conv2dPKc>
    4058:	f8 01       	movw	r30, r16
    405a:	83 83       	std	Z+3, r24	; 0x03
    405c:	ce 01       	movw	r24, r28
    405e:	04 96       	adiw	r24, 0x04	; 4
    4060:	19 df       	rcall	.-462    	; 0x3e94 <_ZL6conv2dPKc>
    4062:	f8 01       	movw	r30, r16
    4064:	84 83       	std	Z+4, r24	; 0x04
    4066:	ce 01       	movw	r24, r28
    4068:	07 96       	adiw	r24, 0x07	; 7
    406a:	14 df       	rcall	.-472    	; 0x3e94 <_ZL6conv2dPKc>
    406c:	f8 01       	movw	r30, r16
    406e:	85 83       	std	Z+5, r24	; 0x05
    4070:	2b 96       	adiw	r28, 0x0b	; 11
    4072:	0f b6       	in	r0, 0x3f	; 63
    4074:	f8 94       	cli
    4076:	de bf       	out	0x3e, r29	; 62
    4078:	0f be       	out	0x3f, r0	; 63
    407a:	cd bf       	out	0x3d, r28	; 61
    407c:	df 91       	pop	r29
    407e:	cf 91       	pop	r28
    4080:	1f 91       	pop	r17
    4082:	0f 91       	pop	r16
    4084:	ff 90       	pop	r15
    4086:	ef 90       	pop	r14
    4088:	08 95       	ret

0000408a <_ZNK8DateTime12dayOfTheWeekEv>:
    408a:	fc 01       	movw	r30, r24
    408c:	80 81       	ld	r24, Z
    408e:	42 81       	ldd	r20, Z+2	; 0x02
    4090:	61 81       	ldd	r22, Z+1	; 0x01
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	cd de       	rcall	.-614    	; 0x3e30 <_ZL9date2daysjhh>
    4096:	06 96       	adiw	r24, 0x06	; 6
    4098:	67 e0       	ldi	r22, 0x07	; 7
    409a:	70 e0       	ldi	r23, 0x00	; 0
    409c:	0c 94 63 3d 	jmp	0x7ac6	; 0x7ac6 <__udivmodhi4>
    40a0:	08 95       	ret

000040a2 <_ZNK8DateTime8unixtimeEv>:
    40a2:	ef 92       	push	r14
    40a4:	ff 92       	push	r15
    40a6:	0f 93       	push	r16
    40a8:	1f 93       	push	r17
    40aa:	cf 93       	push	r28
    40ac:	df 93       	push	r29
    40ae:	ec 01       	movw	r28, r24
    40b0:	88 81       	ld	r24, Y
    40b2:	4a 81       	ldd	r20, Y+2	; 0x02
    40b4:	69 81       	ldd	r22, Y+1	; 0x01
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	bb de       	rcall	.-650    	; 0x3e30 <_ZL9date2daysjhh>
    40ba:	9c 01       	movw	r18, r24
    40bc:	a8 e1       	ldi	r26, 0x18	; 24
    40be:	b0 e0       	ldi	r27, 0x00	; 0
    40c0:	0e 94 a2 3d 	call	0x7b44	; 0x7b44 <__umulhisi3>
    40c4:	2b 81       	ldd	r18, Y+3	; 0x03
    40c6:	7b 01       	movw	r14, r22
    40c8:	8c 01       	movw	r16, r24
    40ca:	e2 0e       	add	r14, r18
    40cc:	f1 1c       	adc	r15, r1
    40ce:	01 1d       	adc	r16, r1
    40d0:	11 1d       	adc	r17, r1
    40d2:	a8 01       	movw	r20, r16
    40d4:	97 01       	movw	r18, r14
    40d6:	ac e3       	ldi	r26, 0x3C	; 60
    40d8:	b0 e0       	ldi	r27, 0x00	; 0
    40da:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <__muluhisi3>
    40de:	2c 81       	ldd	r18, Y+4	; 0x04
    40e0:	7b 01       	movw	r14, r22
    40e2:	8c 01       	movw	r16, r24
    40e4:	e2 0e       	add	r14, r18
    40e6:	f1 1c       	adc	r15, r1
    40e8:	01 1d       	adc	r16, r1
    40ea:	11 1d       	adc	r17, r1
    40ec:	a8 01       	movw	r20, r16
    40ee:	97 01       	movw	r18, r14
    40f0:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <__muluhisi3>
    40f4:	2d 81       	ldd	r18, Y+5	; 0x05
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	82 0f       	add	r24, r18
    40fc:	91 1d       	adc	r25, r1
    40fe:	a1 1d       	adc	r26, r1
    4100:	b1 1d       	adc	r27, r1
    4102:	bc 01       	movw	r22, r24
    4104:	cd 01       	movw	r24, r26
    4106:	60 58       	subi	r22, 0x80	; 128
    4108:	7c 4b       	sbci	r23, 0xBC	; 188
    410a:	82 49       	sbci	r24, 0x92	; 146
    410c:	97 4c       	sbci	r25, 0xC7	; 199
    410e:	df 91       	pop	r29
    4110:	cf 91       	pop	r28
    4112:	1f 91       	pop	r17
    4114:	0f 91       	pop	r16
    4116:	ff 90       	pop	r15
    4118:	ef 90       	pop	r14
    411a:	08 95       	ret

0000411c <_ZNK8DateTime11secondstimeEv>:
    411c:	ef 92       	push	r14
    411e:	ff 92       	push	r15
    4120:	0f 93       	push	r16
    4122:	1f 93       	push	r17
    4124:	cf 93       	push	r28
    4126:	df 93       	push	r29
    4128:	ec 01       	movw	r28, r24
    412a:	88 81       	ld	r24, Y
    412c:	4a 81       	ldd	r20, Y+2	; 0x02
    412e:	69 81       	ldd	r22, Y+1	; 0x01
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	7e de       	rcall	.-772    	; 0x3e30 <_ZL9date2daysjhh>
    4134:	9c 01       	movw	r18, r24
    4136:	a8 e1       	ldi	r26, 0x18	; 24
    4138:	b0 e0       	ldi	r27, 0x00	; 0
    413a:	0e 94 a2 3d 	call	0x7b44	; 0x7b44 <__umulhisi3>
    413e:	2b 81       	ldd	r18, Y+3	; 0x03
    4140:	7b 01       	movw	r14, r22
    4142:	8c 01       	movw	r16, r24
    4144:	e2 0e       	add	r14, r18
    4146:	f1 1c       	adc	r15, r1
    4148:	01 1d       	adc	r16, r1
    414a:	11 1d       	adc	r17, r1
    414c:	a8 01       	movw	r20, r16
    414e:	97 01       	movw	r18, r14
    4150:	ac e3       	ldi	r26, 0x3C	; 60
    4152:	b0 e0       	ldi	r27, 0x00	; 0
    4154:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <__muluhisi3>
    4158:	2c 81       	ldd	r18, Y+4	; 0x04
    415a:	7b 01       	movw	r14, r22
    415c:	8c 01       	movw	r16, r24
    415e:	e2 0e       	add	r14, r18
    4160:	f1 1c       	adc	r15, r1
    4162:	01 1d       	adc	r16, r1
    4164:	11 1d       	adc	r17, r1
    4166:	a8 01       	movw	r20, r16
    4168:	97 01       	movw	r18, r14
    416a:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <__muluhisi3>
    416e:	2d 81       	ldd	r18, Y+5	; 0x05
    4170:	62 0f       	add	r22, r18
    4172:	71 1d       	adc	r23, r1
    4174:	81 1d       	adc	r24, r1
    4176:	91 1d       	adc	r25, r1
    4178:	df 91       	pop	r29
    417a:	cf 91       	pop	r28
    417c:	1f 91       	pop	r17
    417e:	0f 91       	pop	r16
    4180:	ff 90       	pop	r15
    4182:	ef 90       	pop	r14
    4184:	08 95       	ret

00004186 <_ZN13DS3231M_ClassC1Ev>:
    4186:	fc 01       	movw	r30, r24
    4188:	10 82       	st	Z, r1
    418a:	11 82       	std	Z+1, r1	; 0x01
    418c:	12 82       	std	Z+2, r1	; 0x02
    418e:	13 82       	std	Z+3, r1	; 0x03
    4190:	14 82       	std	Z+4, r1	; 0x04
    4192:	08 95       	ret

00004194 <_ZN13DS3231M_ClassD1Ev>:
    4194:	08 95       	ret

00004196 <_ZN13DS3231M_Class9writeByteEhh>:
    4196:	0f 93       	push	r16
    4198:	1f 93       	push	r17
    419a:	cf 93       	push	r28
    419c:	df 93       	push	r29
    419e:	ec 01       	movw	r28, r24
    41a0:	06 2f       	mov	r16, r22
    41a2:	14 2f       	mov	r17, r20
    41a4:	68 e6       	ldi	r22, 0x68	; 104
    41a6:	88 e2       	ldi	r24, 0x28	; 40
    41a8:	9c e0       	ldi	r25, 0x0C	; 12
    41aa:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <_ZN7TwoWire17beginTransmissionEh>
    41ae:	60 2f       	mov	r22, r16
    41b0:	88 e2       	ldi	r24, 0x28	; 40
    41b2:	9c e0       	ldi	r25, 0x0C	; 12
    41b4:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
    41b8:	61 2f       	mov	r22, r17
    41ba:	88 e2       	ldi	r24, 0x28	; 40
    41bc:	9c e0       	ldi	r25, 0x0C	; 12
    41be:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
    41c2:	88 e2       	ldi	r24, 0x28	; 40
    41c4:	9c e0       	ldi	r25, 0x0C	; 12
    41c6:	0e 94 fd 33 	call	0x67fa	; 0x67fa <_ZN7TwoWire15endTransmissionEv>
    41ca:	88 83       	st	Y, r24
    41cc:	df 91       	pop	r29
    41ce:	cf 91       	pop	r28
    41d0:	1f 91       	pop	r17
    41d2:	0f 91       	pop	r16
    41d4:	08 95       	ret

000041d6 <_ZN13DS3231M_Class8readByteEh>:
    41d6:	1f 93       	push	r17
    41d8:	cf 93       	push	r28
    41da:	df 93       	push	r29
    41dc:	ec 01       	movw	r28, r24
    41de:	16 2f       	mov	r17, r22
    41e0:	68 e6       	ldi	r22, 0x68	; 104
    41e2:	88 e2       	ldi	r24, 0x28	; 40
    41e4:	9c e0       	ldi	r25, 0x0C	; 12
    41e6:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <_ZN7TwoWire17beginTransmissionEh>
    41ea:	61 2f       	mov	r22, r17
    41ec:	88 e2       	ldi	r24, 0x28	; 40
    41ee:	9c e0       	ldi	r25, 0x0C	; 12
    41f0:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
    41f4:	88 e2       	ldi	r24, 0x28	; 40
    41f6:	9c e0       	ldi	r25, 0x0C	; 12
    41f8:	0e 94 fd 33 	call	0x67fa	; 0x67fa <_ZN7TwoWire15endTransmissionEv>
    41fc:	88 83       	st	Y, r24
    41fe:	41 e0       	ldi	r20, 0x01	; 1
    4200:	68 e6       	ldi	r22, 0x68	; 104
    4202:	88 e2       	ldi	r24, 0x28	; 40
    4204:	9c e0       	ldi	r25, 0x0C	; 12
    4206:	0e 94 f9 33 	call	0x67f2	; 0x67f2 <_ZN7TwoWire11requestFromEhh>
    420a:	88 e2       	ldi	r24, 0x28	; 40
    420c:	9c e0       	ldi	r25, 0x0C	; 12
    420e:	0e 94 a5 32 	call	0x654a	; 0x654a <_ZN7TwoWire4readEv>
    4212:	df 91       	pop	r29
    4214:	cf 91       	pop	r28
    4216:	1f 91       	pop	r17
    4218:	08 95       	ret

0000421a <_ZN13DS3231M_Class5beginEm>:
    421a:	cf 92       	push	r12
    421c:	df 92       	push	r13
    421e:	ef 92       	push	r14
    4220:	ff 92       	push	r15
    4222:	cf 93       	push	r28
    4224:	df 93       	push	r29
    4226:	ec 01       	movw	r28, r24
    4228:	6a 01       	movw	r12, r20
    422a:	7b 01       	movw	r14, r22
    422c:	88 e2       	ldi	r24, 0x28	; 40
    422e:	9c e0       	ldi	r25, 0x0C	; 12
    4230:	0e 94 69 33 	call	0x66d2	; 0x66d2 <_ZN7TwoWire5beginEv>
    4234:	b7 01       	movw	r22, r14
    4236:	a6 01       	movw	r20, r12
    4238:	88 e2       	ldi	r24, 0x28	; 40
    423a:	9c e0       	ldi	r25, 0x0C	; 12
    423c:	0e 94 79 33 	call	0x66f2	; 0x66f2 <_ZN7TwoWire8setClockEm>
    4240:	68 e6       	ldi	r22, 0x68	; 104
    4242:	88 e2       	ldi	r24, 0x28	; 40
    4244:	9c e0       	ldi	r25, 0x0C	; 12
    4246:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <_ZN7TwoWire17beginTransmissionEh>
    424a:	88 e2       	ldi	r24, 0x28	; 40
    424c:	9c e0       	ldi	r25, 0x0C	; 12
    424e:	0e 94 fd 33 	call	0x67fa	; 0x67fa <_ZN7TwoWire15endTransmissionEv>
    4252:	81 11       	cpse	r24, r1
    4254:	0a c0       	rjmp	.+20     	; 0x426a <_ZN13DS3231M_Class5beginEm+0x50>
    4256:	62 e0       	ldi	r22, 0x02	; 2
    4258:	ce 01       	movw	r24, r28
    425a:	bd df       	rcall	.-134    	; 0x41d6 <_ZN13DS3231M_Class8readByteEh>
    425c:	48 2f       	mov	r20, r24
    425e:	4f 7b       	andi	r20, 0xBF	; 191
    4260:	62 e0       	ldi	r22, 0x02	; 2
    4262:	ce 01       	movw	r24, r28
    4264:	98 df       	rcall	.-208    	; 0x4196 <_ZN13DS3231M_Class9writeByteEhh>
    4266:	81 e0       	ldi	r24, 0x01	; 1
    4268:	01 c0       	rjmp	.+2      	; 0x426c <_ZN13DS3231M_Class5beginEm+0x52>
    426a:	80 e0       	ldi	r24, 0x00	; 0
    426c:	df 91       	pop	r29
    426e:	cf 91       	pop	r28
    4270:	ff 90       	pop	r15
    4272:	ef 90       	pop	r14
    4274:	df 90       	pop	r13
    4276:	cf 90       	pop	r12
    4278:	08 95       	ret

0000427a <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    427a:	0f 93       	push	r16
    427c:	1f 93       	push	r17
    427e:	cf 93       	push	r28
    4280:	df 93       	push	r29
    4282:	8c 01       	movw	r16, r24
    4284:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    4286:	68 e6       	ldi	r22, 0x68	; 104
    4288:	88 e2       	ldi	r24, 0x28	; 40
    428a:	9c e0       	ldi	r25, 0x0C	; 12
    428c:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    4290:	60 e0       	ldi	r22, 0x00	; 0
    4292:	88 e2       	ldi	r24, 0x28	; 40
    4294:	9c e0       	ldi	r25, 0x0C	; 12
    4296:	0e 94 2b 33 	call	0x6656	; 0x6656 <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    429a:	88 e2       	ldi	r24, 0x28	; 40
    429c:	9c e0       	ldi	r25, 0x0C	; 12
    429e:	0e 94 fd 33 	call	0x67fa	; 0x67fa <_ZN7TwoWire15endTransmissionEv>
    42a2:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    42a4:	47 e0       	ldi	r20, 0x07	; 7
    42a6:	68 e6       	ldi	r22, 0x68	; 104
    42a8:	88 e2       	ldi	r24, 0x28	; 40
    42aa:	9c e0       	ldi	r25, 0x0C	; 12
    42ac:	0e 94 f9 33 	call	0x67f2	; 0x67f2 <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    42b0:	88 e2       	ldi	r24, 0x28	; 40
    42b2:	9c e0       	ldi	r25, 0x0C	; 12
    42b4:	0e 94 9d 32 	call	0x653a	; 0x653a <_ZN7TwoWire9availableEv>
    42b8:	07 97       	sbiw	r24, 0x07	; 7
    42ba:	09 f0       	breq	.+2      	; 0x42be <_ZN13DS3231M_Class3nowEv+0x44>
    42bc:	64 c0       	rjmp	.+200    	; 0x4386 <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    42be:	88 e2       	ldi	r24, 0x28	; 40
    42c0:	9c e0       	ldi	r25, 0x0C	; 12
    42c2:	0e 94 a5 32 	call	0x654a	; 0x654a <_ZN7TwoWire4readEv>
    42c6:	98 2f       	mov	r25, r24
    42c8:	96 95       	lsr	r25
    42ca:	96 95       	lsr	r25
    42cc:	96 95       	lsr	r25
    42ce:	9e 70       	andi	r25, 0x0E	; 14
    42d0:	29 2f       	mov	r18, r25
    42d2:	22 0f       	add	r18, r18
    42d4:	22 0f       	add	r18, r18
    42d6:	92 0f       	add	r25, r18
    42d8:	8f 70       	andi	r24, 0x0F	; 15
    42da:	89 0f       	add	r24, r25
    42dc:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    42de:	88 e2       	ldi	r24, 0x28	; 40
    42e0:	9c e0       	ldi	r25, 0x0C	; 12
    42e2:	0e 94 a5 32 	call	0x654a	; 0x654a <_ZN7TwoWire4readEv>
    42e6:	98 2f       	mov	r25, r24
    42e8:	96 95       	lsr	r25
    42ea:	96 95       	lsr	r25
    42ec:	96 95       	lsr	r25
    42ee:	9e 70       	andi	r25, 0x0E	; 14
    42f0:	29 2f       	mov	r18, r25
    42f2:	22 0f       	add	r18, r18
    42f4:	22 0f       	add	r18, r18
    42f6:	92 0f       	add	r25, r18
    42f8:	8f 70       	andi	r24, 0x0F	; 15
    42fa:	89 0f       	add	r24, r25
    42fc:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    42fe:	88 e2       	ldi	r24, 0x28	; 40
    4300:	9c e0       	ldi	r25, 0x0C	; 12
    4302:	0e 94 a5 32 	call	0x654a	; 0x654a <_ZN7TwoWire4readEv>
    4306:	98 2f       	mov	r25, r24
    4308:	96 95       	lsr	r25
    430a:	96 95       	lsr	r25
    430c:	96 95       	lsr	r25
    430e:	9e 70       	andi	r25, 0x0E	; 14
    4310:	29 2f       	mov	r18, r25
    4312:	22 0f       	add	r18, r18
    4314:	22 0f       	add	r18, r18
    4316:	92 0f       	add	r25, r18
    4318:	8f 70       	andi	r24, 0x0F	; 15
    431a:	89 0f       	add	r24, r25
    431c:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    431e:	88 e2       	ldi	r24, 0x28	; 40
    4320:	9c e0       	ldi	r25, 0x0C	; 12
    4322:	0e 94 a5 32 	call	0x654a	; 0x654a <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    4326:	88 e2       	ldi	r24, 0x28	; 40
    4328:	9c e0       	ldi	r25, 0x0C	; 12
    432a:	0e 94 a5 32 	call	0x654a	; 0x654a <_ZN7TwoWire4readEv>
    432e:	98 2f       	mov	r25, r24
    4330:	96 95       	lsr	r25
    4332:	96 95       	lsr	r25
    4334:	96 95       	lsr	r25
    4336:	96 70       	andi	r25, 0x06	; 6
    4338:	29 2f       	mov	r18, r25
    433a:	22 0f       	add	r18, r18
    433c:	22 0f       	add	r18, r18
    433e:	92 0f       	add	r25, r18
    4340:	8f 70       	andi	r24, 0x0F	; 15
    4342:	89 0f       	add	r24, r25
    4344:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    4346:	88 e2       	ldi	r24, 0x28	; 40
    4348:	9c e0       	ldi	r25, 0x0C	; 12
    434a:	0e 94 a5 32 	call	0x654a	; 0x654a <_ZN7TwoWire4readEv>
    434e:	84 fb       	bst	r24, 4
    4350:	99 27       	eor	r25, r25
    4352:	90 f9       	bld	r25, 0
    4354:	99 0f       	add	r25, r25
    4356:	29 2f       	mov	r18, r25
    4358:	22 0f       	add	r18, r18
    435a:	22 0f       	add	r18, r18
    435c:	92 0f       	add	r25, r18
    435e:	8f 70       	andi	r24, 0x0F	; 15
    4360:	89 0f       	add	r24, r25
    4362:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    4364:	88 e2       	ldi	r24, 0x28	; 40
    4366:	9c e0       	ldi	r25, 0x0C	; 12
    4368:	0e 94 a5 32 	call	0x654a	; 0x654a <_ZN7TwoWire4readEv>
    436c:	98 2f       	mov	r25, r24
    436e:	92 95       	swap	r25
    4370:	9f 70       	andi	r25, 0x0F	; 15
    4372:	8f 70       	andi	r24, 0x0F	; 15
    4374:	2a e0       	ldi	r18, 0x0A	; 10
    4376:	92 9f       	mul	r25, r18
    4378:	80 0d       	add	r24, r0
    437a:	11 24       	eor	r1, r1
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	80 53       	subi	r24, 0x30	; 48
    4380:	98 4f       	sbci	r25, 0xF8	; 248
    4382:	9b 87       	std	Y+11, r25	; 0x0b
    4384:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    4386:	2d 81       	ldd	r18, Y+5	; 0x05
    4388:	3e 81       	ldd	r19, Y+6	; 0x06
    438a:	4f 81       	ldd	r20, Y+7	; 0x07
    438c:	58 85       	ldd	r21, Y+8	; 0x08
    438e:	69 85       	ldd	r22, Y+9	; 0x09
    4390:	8a 85       	ldd	r24, Y+10	; 0x0a
    4392:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    4394:	80 3d       	cpi	r24, 0xD0	; 208
    4396:	77 e0       	ldi	r23, 0x07	; 7
    4398:	97 07       	cpc	r25, r23
    439a:	10 f0       	brcs	.+4      	; 0x43a0 <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    439c:	80 5d       	subi	r24, 0xD0	; 208
    439e:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    43a0:	f8 01       	movw	r30, r16
    43a2:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    43a4:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    43a6:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    43a8:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    43aa:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    43ac:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    43ae:	c8 01       	movw	r24, r16
    43b0:	df 91       	pop	r29
    43b2:	cf 91       	pop	r28
    43b4:	1f 91       	pop	r17
    43b6:	0f 91       	pop	r16
    43b8:	08 95       	ret

000043ba <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    43ba:	df 92       	push	r13
    43bc:	ef 92       	push	r14
    43be:	ff 92       	push	r15
    43c0:	0f 93       	push	r16
    43c2:	1f 93       	push	r17
    43c4:	cf 93       	push	r28
    43c6:	df 93       	push	r29
    43c8:	00 d0       	rcall	.+0      	; 0x43ca <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    43ca:	00 d0       	rcall	.+0      	; 0x43cc <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    43cc:	00 d0       	rcall	.+0      	; 0x43ce <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    43ce:	cd b7       	in	r28, 0x3d	; 61
    43d0:	de b7       	in	r29, 0x3e	; 62
    43d2:	8c 01       	movw	r16, r24
    43d4:	7b 01       	movw	r14, r22
    43d6:	fb 01       	movw	r30, r22
    43d8:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    43da:	9a e0       	ldi	r25, 0x0A	; 10
    43dc:	d9 2e       	mov	r13, r25
    43de:	6d 2d       	mov	r22, r13
    43e0:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__udivmodqi4>
    43e4:	49 2f       	mov	r20, r25
    43e6:	f0 e1       	ldi	r31, 0x10	; 16
    43e8:	8f 9f       	mul	r24, r31
    43ea:	40 0d       	add	r20, r0
    43ec:	11 24       	eor	r1, r1
    43ee:	60 e0       	ldi	r22, 0x00	; 0
    43f0:	c8 01       	movw	r24, r16
    43f2:	d1 de       	rcall	.-606    	; 0x4196 <_ZN13DS3231M_Class9writeByteEhh>
    43f4:	f7 01       	movw	r30, r14
    43f6:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    43f8:	6d 2d       	mov	r22, r13
    43fa:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__udivmodqi4>
    43fe:	49 2f       	mov	r20, r25
    4400:	f0 e1       	ldi	r31, 0x10	; 16
    4402:	8f 9f       	mul	r24, r31
    4404:	40 0d       	add	r20, r0
    4406:	11 24       	eor	r1, r1
    4408:	61 e0       	ldi	r22, 0x01	; 1
    440a:	c8 01       	movw	r24, r16
    440c:	c4 de       	rcall	.-632    	; 0x4196 <_ZN13DS3231M_Class9writeByteEhh>
    440e:	f7 01       	movw	r30, r14
    4410:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    4412:	6d 2d       	mov	r22, r13
    4414:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__udivmodqi4>
    4418:	49 2f       	mov	r20, r25
    441a:	f0 e1       	ldi	r31, 0x10	; 16
    441c:	8f 9f       	mul	r24, r31
    441e:	40 0d       	add	r20, r0
    4420:	11 24       	eor	r1, r1
    4422:	62 e0       	ldi	r22, 0x02	; 2
    4424:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    4426:	b7 de       	rcall	.-658    	; 0x4196 <_ZN13DS3231M_Class9writeByteEhh>
    4428:	c7 01       	movw	r24, r14
    442a:	2f de       	rcall	.-930    	; 0x408a <_ZNK8DateTime12dayOfTheWeekEv>
    442c:	48 2f       	mov	r20, r24
    442e:	63 e0       	ldi	r22, 0x03	; 3
    4430:	c8 01       	movw	r24, r16
    4432:	b1 de       	rcall	.-670    	; 0x4196 <_ZN13DS3231M_Class9writeByteEhh>
    4434:	f7 01       	movw	r30, r14
    4436:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    4438:	6d 2d       	mov	r22, r13
    443a:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__udivmodqi4>
    443e:	49 2f       	mov	r20, r25
    4440:	f0 e1       	ldi	r31, 0x10	; 16
    4442:	8f 9f       	mul	r24, r31
    4444:	40 0d       	add	r20, r0
    4446:	11 24       	eor	r1, r1
    4448:	64 e0       	ldi	r22, 0x04	; 4
    444a:	c8 01       	movw	r24, r16
    444c:	a4 de       	rcall	.-696    	; 0x4196 <_ZN13DS3231M_Class9writeByteEhh>
    444e:	f7 01       	movw	r30, r14
    4450:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    4452:	6d 2d       	mov	r22, r13
    4454:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__udivmodqi4>
    4458:	49 2f       	mov	r20, r25
    445a:	f0 e1       	ldi	r31, 0x10	; 16
    445c:	8f 9f       	mul	r24, r31
    445e:	40 0d       	add	r20, r0
    4460:	11 24       	eor	r1, r1
    4462:	65 e0       	ldi	r22, 0x05	; 5
    4464:	c8 01       	movw	r24, r16
    4466:	97 de       	rcall	.-722    	; 0x4196 <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    4468:	f7 01       	movw	r30, r14
    446a:	80 81       	ld	r24, Z
    446c:	6d 2d       	mov	r22, r13
    446e:	0e 94 57 3d 	call	0x7aae	; 0x7aae <__udivmodqi4>
    4472:	49 2f       	mov	r20, r25
    4474:	f0 e1       	ldi	r31, 0x10	; 16
    4476:	8f 9f       	mul	r24, r31
    4478:	40 0d       	add	r20, r0
    447a:	11 24       	eor	r1, r1
    447c:	66 e0       	ldi	r22, 0x06	; 6
    447e:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    4480:	8a de       	rcall	.-748    	; 0x4196 <_ZN13DS3231M_Class9writeByteEhh>
    4482:	6f e0       	ldi	r22, 0x0F	; 15
    4484:	c8 01       	movw	r24, r16
    4486:	a7 de       	rcall	.-690    	; 0x41d6 <_ZN13DS3231M_Class8readByteEh>
    4488:	48 2f       	mov	r20, r24
    448a:	4f 77       	andi	r20, 0x7F	; 127
    448c:	6f e0       	ldi	r22, 0x0F	; 15
    448e:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    4490:	82 de       	rcall	.-764    	; 0x4196 <_ZN13DS3231M_Class9writeByteEhh>
    4492:	6e e0       	ldi	r22, 0x0E	; 14
    4494:	c8 01       	movw	r24, r16
    4496:	9f de       	rcall	.-706    	; 0x41d6 <_ZN13DS3231M_Class8readByteEh>
    4498:	48 2f       	mov	r20, r24
    449a:	4f 77       	andi	r20, 0x7F	; 127
    449c:	6e e0       	ldi	r22, 0x0E	; 14
    449e:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    44a0:	7a de       	rcall	.-780    	; 0x4196 <_ZN13DS3231M_Class9writeByteEhh>
    44a2:	b8 01       	movw	r22, r16
    44a4:	ce 01       	movw	r24, r28
    44a6:	01 96       	adiw	r24, 0x01	; 1
    44a8:	e8 de       	rcall	.-560    	; 0x427a <_ZN13DS3231M_Class3nowEv>
    44aa:	ce 01       	movw	r24, r28
    44ac:	01 96       	adiw	r24, 0x01	; 1
    44ae:	f9 dd       	rcall	.-1038   	; 0x40a2 <_ZNK8DateTime8unixtimeEv>
    44b0:	f8 01       	movw	r30, r16
    44b2:	61 83       	std	Z+1, r22	; 0x01
    44b4:	72 83       	std	Z+2, r23	; 0x02
    44b6:	83 83       	std	Z+3, r24	; 0x03
    44b8:	94 83       	std	Z+4, r25	; 0x04
    44ba:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    44bc:	0f b6       	in	r0, 0x3f	; 63
    44be:	f8 94       	cli
    44c0:	de bf       	out	0x3e, r29	; 62
    44c2:	0f be       	out	0x3f, r0	; 63
    44c4:	cd bf       	out	0x3d, r28	; 61
    44c6:	df 91       	pop	r29
    44c8:	cf 91       	pop	r28
    44ca:	1f 91       	pop	r17
    44cc:	0f 91       	pop	r16
    44ce:	ff 90       	pop	r15
    44d0:	ef 90       	pop	r14
    44d2:	df 90       	pop	r13
    44d4:	08 95       	ret

000044d6 <_ZN13DS3231M_Class6adjustEv>:
    44d6:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    44d8:	1f 93       	push	r17
    44da:	cf 93       	push	r28
    44dc:	df 93       	push	r29
    44de:	00 d0       	rcall	.+0      	; 0x44e0 <_ZN13DS3231M_Class6adjustEv+0xa>
    44e0:	00 d0       	rcall	.+0      	; 0x44e2 <_ZN13DS3231M_Class6adjustEv+0xc>
    44e2:	00 d0       	rcall	.+0      	; 0x44e4 <_ZN13DS3231M_Class6adjustEv+0xe>
    44e4:	cd b7       	in	r28, 0x3d	; 61
    44e6:	de b7       	in	r29, 0x3e	; 62
    44e8:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    44ea:	4b e1       	ldi	r20, 0x1B	; 27
    44ec:	52 e0       	ldi	r21, 0x02	; 2
    44ee:	6f e0       	ldi	r22, 0x0F	; 15
    44f0:	72 e0       	ldi	r23, 0x02	; 2
    44f2:	ce 01       	movw	r24, r28
    44f4:	01 96       	adiw	r24, 0x01	; 1
    44f6:	54 dd       	rcall	.-1368   	; 0x3fa0 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    44f8:	be 01       	movw	r22, r28
    44fa:	6f 5f       	subi	r22, 0xFF	; 255
    44fc:	7f 4f       	sbci	r23, 0xFF	; 255
    44fe:	c8 01       	movw	r24, r16
    4500:	5c df       	rcall	.-328    	; 0x43ba <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    4502:	26 96       	adiw	r28, 0x06	; 6
    4504:	0f b6       	in	r0, 0x3f	; 63
    4506:	f8 94       	cli
    4508:	de bf       	out	0x3e, r29	; 62
    450a:	0f be       	out	0x3f, r0	; 63
    450c:	cd bf       	out	0x3d, r28	; 61
    450e:	df 91       	pop	r29
    4510:	cf 91       	pop	r28
    4512:	1f 91       	pop	r17
    4514:	0f 91       	pop	r16
    4516:	08 95       	ret

00004518 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    4518:	0f 93       	push	r16
    451a:	00 e0       	ldi	r16, 0x00	; 0
    451c:	20 e0       	ldi	r18, 0x00	; 0
    451e:	40 e0       	ldi	r20, 0x00	; 0
    4520:	60 e0       	ldi	r22, 0x00	; 0
    4522:	8f e6       	ldi	r24, 0x6F	; 111
    4524:	9b e0       	ldi	r25, 0x0B	; 11
    4526:	0e 94 29 36 	call	0x6c52	; 0x6c52 <_ZN9IPAddressC1Ehhhh>
    452a:	0f 91       	pop	r16
    452c:	08 95       	ret

0000452e <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    452e:	fb 01       	movw	r30, r22
    4530:	42 81       	ldd	r20, Z+2	; 0x02
    4532:	53 81       	ldd	r21, Z+3	; 0x03
    4534:	64 81       	ldd	r22, Z+4	; 0x04
    4536:	75 81       	ldd	r23, Z+5	; 0x05
    4538:	fc 01       	movw	r30, r24
    453a:	42 83       	std	Z+2, r20	; 0x02
    453c:	53 83       	std	Z+3, r21	; 0x03
    453e:	64 83       	std	Z+4, r22	; 0x04
    4540:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    4542:	17 82       	std	Z+7, r1	; 0x07
    4544:	16 82       	std	Z+6, r1	; 0x06
    4546:	08 95       	ret

00004548 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    4548:	cf 93       	push	r28
    454a:	df 93       	push	r29
    454c:	da 01       	movw	r26, r20
    454e:	fb 01       	movw	r30, r22
    4550:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    4552:	89 91       	ld	r24, Y+
    4554:	81 11       	cpse	r24, r1
    4556:	fd cf       	rjmp	.-6      	; 0x4552 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    4560:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    4562:	51 91       	ld	r21, Z+
    4564:	55 23       	and	r21, r21
    4566:	e9 f0       	breq	.+58     	; 0x45a2 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    4568:	24 30       	cpi	r18, 0x04	; 4
    456a:	31 05       	cpc	r19, r1
    456c:	44 f5       	brge	.+80     	; 0x45be <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    456e:	5e 32       	cpi	r21, 0x2E	; 46
    4570:	69 f4       	brne	.+26     	; 0x458c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    4572:	8f 3f       	cpi	r24, 0xFF	; 255
    4574:	91 05       	cpc	r25, r1
    4576:	09 f0       	breq	.+2      	; 0x457a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    4578:	14 f5       	brge	.+68     	; 0x45be <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    457a:	ed 01       	movw	r28, r26
    457c:	c2 0f       	add	r28, r18
    457e:	d3 1f       	adc	r29, r19
    4580:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    4582:	2f 5f       	subi	r18, 0xFF	; 255
    4584:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    4586:	80 e0       	ldi	r24, 0x00	; 0
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	eb cf       	rjmp	.-42     	; 0x4562 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    458c:	48 9f       	mul	r20, r24
    458e:	b0 01       	movw	r22, r0
    4590:	49 9f       	mul	r20, r25
    4592:	70 0d       	add	r23, r0
    4594:	11 24       	eor	r1, r1
    4596:	85 2f       	mov	r24, r21
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	c0 97       	sbiw	r24, 0x30	; 48
    459c:	86 0f       	add	r24, r22
    459e:	97 1f       	adc	r25, r23
    45a0:	e0 cf       	rjmp	.-64     	; 0x4562 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    45a2:	8f 3f       	cpi	r24, 0xFF	; 255
    45a4:	91 05       	cpc	r25, r1
    45a6:	09 f0       	breq	.+2      	; 0x45aa <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    45a8:	54 f4       	brge	.+20     	; 0x45be <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    45aa:	24 30       	cpi	r18, 0x04	; 4
    45ac:	31 05       	cpc	r19, r1
    45ae:	3c f4       	brge	.+14     	; 0x45be <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    45b0:	fd 01       	movw	r30, r26
    45b2:	e2 0f       	add	r30, r18
    45b4:	f3 1f       	adc	r31, r19
    45b6:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    45b8:	81 e0       	ldi	r24, 0x01	; 1
    45ba:	90 e0       	ldi	r25, 0x00	; 0
    45bc:	02 c0       	rjmp	.+4      	; 0x45c2 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    45be:	80 e0       	ldi	r24, 0x00	; 0
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    45c2:	df 91       	pop	r29
    45c4:	cf 91       	pop	r28
    45c6:	08 95       	ret

000045c8 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    45c8:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    45ca:	00 e0       	ldi	r16, 0x00	; 0
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	40 e0       	ldi	r20, 0x00	; 0
    45d0:	60 e0       	ldi	r22, 0x00	; 0
    45d2:	85 e7       	ldi	r24, 0x75	; 117
    45d4:	9b e0       	ldi	r25, 0x0B	; 11
    45d6:	0e 94 29 36 	call	0x6c52	; 0x6c52 <_ZN9IPAddressC1Ehhhh>
    45da:	0f 91       	pop	r16
    45dc:	08 95       	ret

000045de <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    45de:	8f 92       	push	r8
    45e0:	9f 92       	push	r9
    45e2:	af 92       	push	r10
    45e4:	bf 92       	push	r11
    45e6:	cf 92       	push	r12
    45e8:	df 92       	push	r13
    45ea:	ef 92       	push	r14
    45ec:	ff 92       	push	r15
    45ee:	0f 93       	push	r16
    45f0:	1f 93       	push	r17
    45f2:	cf 93       	push	r28
    45f4:	df 93       	push	r29
    45f6:	00 d0       	rcall	.+0      	; 0x45f8 <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    45f8:	1f 92       	push	r1
    45fa:	cd b7       	in	r28, 0x3d	; 61
    45fc:	de b7       	in	r29, 0x3e	; 62
    45fe:	6c 01       	movw	r12, r24
    4600:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    4602:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <millis>
    4606:	f6 01       	movw	r30, r12
    4608:	77 83       	std	Z+7, r23	; 0x07
    460a:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    460c:	86 01       	movw	r16, r12
    460e:	08 5f       	subi	r16, 0xF8	; 248
    4610:	1f 4f       	sbci	r17, 0xFF	; 255
    4612:	b6 01       	movw	r22, r12
    4614:	6a 5f       	subi	r22, 0xFA	; 250
    4616:	7f 4f       	sbci	r23, 0xFF	; 255
    4618:	42 e0       	ldi	r20, 0x02	; 2
    461a:	50 e0       	ldi	r21, 0x00	; 0
    461c:	c8 01       	movw	r24, r16
    461e:	30 d5       	rcall	.+2656   	; 0x5080 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	9a 83       	std	Y+2, r25	; 0x02
    4626:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4628:	42 e0       	ldi	r20, 0x02	; 2
    462a:	50 e0       	ldi	r21, 0x00	; 0
    462c:	be 01       	movw	r22, r28
    462e:	6f 5f       	subi	r22, 0xFF	; 255
    4630:	7f 4f       	sbci	r23, 0xFF	; 255
    4632:	c8 01       	movw	r24, r16
    4634:	25 d5       	rcall	.+2634   	; 0x5080 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    4636:	80 e0       	ldi	r24, 0x00	; 0
    4638:	91 e0       	ldi	r25, 0x01	; 1
    463a:	9a 83       	std	Y+2, r25	; 0x02
    463c:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    463e:	42 e0       	ldi	r20, 0x02	; 2
    4640:	50 e0       	ldi	r21, 0x00	; 0
    4642:	be 01       	movw	r22, r28
    4644:	6f 5f       	subi	r22, 0xFF	; 255
    4646:	7f 4f       	sbci	r23, 0xFF	; 255
    4648:	c8 01       	movw	r24, r16
    464a:	1a d5       	rcall	.+2612   	; 0x5080 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    464c:	1a 82       	std	Y+2, r1	; 0x02
    464e:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4650:	42 e0       	ldi	r20, 0x02	; 2
    4652:	50 e0       	ldi	r21, 0x00	; 0
    4654:	be 01       	movw	r22, r28
    4656:	6f 5f       	subi	r22, 0xFF	; 255
    4658:	7f 4f       	sbci	r23, 0xFF	; 255
    465a:	c8 01       	movw	r24, r16
    465c:	11 d5       	rcall	.+2594   	; 0x5080 <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    465e:	42 e0       	ldi	r20, 0x02	; 2
    4660:	50 e0       	ldi	r21, 0x00	; 0
    4662:	be 01       	movw	r22, r28
    4664:	6f 5f       	subi	r22, 0xFF	; 255
    4666:	7f 4f       	sbci	r23, 0xFF	; 255
    4668:	c8 01       	movw	r24, r16
    466a:	0a d5       	rcall	.+2580   	; 0x5080 <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    466c:	42 e0       	ldi	r20, 0x02	; 2
    466e:	50 e0       	ldi	r21, 0x00	; 0
    4670:	be 01       	movw	r22, r28
    4672:	6f 5f       	subi	r22, 0xFF	; 255
    4674:	7f 4f       	sbci	r23, 0xFF	; 255
    4676:	c8 01       	movw	r24, r16
    4678:	03 d5       	rcall	.+2566   	; 0x5080 <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    467a:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    467c:	f5 01       	movw	r30, r10
    467e:	80 81       	ld	r24, Z
    4680:	88 23       	and	r24, r24
    4682:	f9 f0       	breq	.+62     	; 0x46c2 <_ZN9DNSClient12BuildRequestEPKc+0xe4>
    4684:	a7 01       	movw	r20, r14
    4686:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    4688:	f5 01       	movw	r30, r10
    468a:	81 91       	ld	r24, Z+
    468c:	6f 01       	movw	r12, r30
    468e:	88 23       	and	r24, r24
    4690:	21 f0       	breq	.+8      	; 0x469a <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    4692:	8e 32       	cpi	r24, 0x2E	; 46
    4694:	11 f0       	breq	.+4      	; 0x469a <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    4696:	a6 01       	movw	r20, r12
    4698:	f6 cf       	rjmp	.-20     	; 0x4686 <_ZN9DNSClient12BuildRequestEPKc+0xa8>
        {
            end++;
        }

        if (end-start > 0)
    469a:	4a 01       	movw	r8, r20
    469c:	8e 18       	sub	r8, r14
    469e:	9f 08       	sbc	r9, r15
    46a0:	18 14       	cp	r1, r8
    46a2:	19 04       	cpc	r1, r9
    46a4:	64 f4       	brge	.+24     	; 0x46be <_ZN9DNSClient12BuildRequestEPKc+0xe0>
        {
            // Write out the size of this section
            len = end-start;
    46a6:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    46a8:	41 e0       	ldi	r20, 0x01	; 1
    46aa:	50 e0       	ldi	r21, 0x00	; 0
    46ac:	be 01       	movw	r22, r28
    46ae:	6d 5f       	subi	r22, 0xFD	; 253
    46b0:	7f 4f       	sbci	r23, 0xFF	; 255
    46b2:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    46b4:	e5 d4       	rcall	.+2506   	; 0x5080 <_ZN11EthernetUDP5writeEPKhj>
    46b6:	a4 01       	movw	r20, r8
    46b8:	b7 01       	movw	r22, r14
    46ba:	c8 01       	movw	r24, r16
    46bc:	e1 d4       	rcall	.+2498   	; 0x5080 <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    46be:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    46c0:	dd cf       	rjmp	.-70     	; 0x467c <_ZN9DNSClient12BuildRequestEPKc+0x9e>
    iUdp.write(&len, sizeof(len));
    46c2:	1b 82       	std	Y+3, r1	; 0x03
    46c4:	41 e0       	ldi	r20, 0x01	; 1
    46c6:	50 e0       	ldi	r21, 0x00	; 0
    46c8:	be 01       	movw	r22, r28
    46ca:	6d 5f       	subi	r22, 0xFD	; 253
    46cc:	7f 4f       	sbci	r23, 0xFF	; 255
    46ce:	c8 01       	movw	r24, r16
    46d0:	d7 d4       	rcall	.+2478   	; 0x5080 <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    46d2:	e1 2c       	mov	r14, r1
    46d4:	ff 24       	eor	r15, r15
    46d6:	f3 94       	inc	r15
    46d8:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    46da:	e9 82       	std	Y+1, r14	; 0x01
    46dc:	42 e0       	ldi	r20, 0x02	; 2
    46de:	50 e0       	ldi	r21, 0x00	; 0
    46e0:	be 01       	movw	r22, r28
    46e2:	6f 5f       	subi	r22, 0xFF	; 255
    46e4:	7f 4f       	sbci	r23, 0xFF	; 255
    46e6:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    46e8:	cb d4       	rcall	.+2454   	; 0x5080 <_ZN11EthernetUDP5writeEPKhj>
    46ea:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    46ec:	e9 82       	std	Y+1, r14	; 0x01
    46ee:	42 e0       	ldi	r20, 0x02	; 2
    46f0:	50 e0       	ldi	r21, 0x00	; 0
    46f2:	be 01       	movw	r22, r28
    46f4:	6f 5f       	subi	r22, 0xFF	; 255
    46f6:	7f 4f       	sbci	r23, 0xFF	; 255
    46f8:	c8 01       	movw	r24, r16
    46fa:	c2 d4       	rcall	.+2436   	; 0x5080 <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    46fc:	81 e0       	ldi	r24, 0x01	; 1
    46fe:	90 e0       	ldi	r25, 0x00	; 0
    4700:	0f 90       	pop	r0
    4702:	0f 90       	pop	r0
    4704:	0f 90       	pop	r0
    4706:	df 91       	pop	r29
    4708:	cf 91       	pop	r28
    470a:	1f 91       	pop	r17
    470c:	0f 91       	pop	r16
    470e:	ff 90       	pop	r15
    4710:	ef 90       	pop	r14
    4712:	df 90       	pop	r13
    4714:	cf 90       	pop	r12
    4716:	bf 90       	pop	r11
    4718:	af 90       	pop	r10
    471a:	9f 90       	pop	r9
    471c:	8f 90       	pop	r8
    471e:	08 95       	ret

00004720 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    4720:	2f 92       	push	r2
    4722:	3f 92       	push	r3
    4724:	4f 92       	push	r4
    4726:	5f 92       	push	r5
    4728:	6f 92       	push	r6
    472a:	7f 92       	push	r7
    472c:	8f 92       	push	r8
    472e:	9f 92       	push	r9
    4730:	af 92       	push	r10
    4732:	bf 92       	push	r11
    4734:	cf 92       	push	r12
    4736:	df 92       	push	r13
    4738:	ef 92       	push	r14
    473a:	ff 92       	push	r15
    473c:	0f 93       	push	r16
    473e:	1f 93       	push	r17
    4740:	cf 93       	push	r28
    4742:	df 93       	push	r29
    4744:	cd b7       	in	r28, 0x3d	; 61
    4746:	de b7       	in	r29, 0x3e	; 62
    4748:	63 97       	sbiw	r28, 0x13	; 19
    474a:	0f b6       	in	r0, 0x3f	; 63
    474c:	f8 94       	cli
    474e:	de bf       	out	0x3e, r29	; 62
    4750:	0f be       	out	0x3f, r0	; 63
    4752:	cd bf       	out	0x3d, r28	; 61
    4754:	7c 01       	movw	r14, r24
    4756:	6b 01       	movw	r12, r22
    4758:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    475a:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <millis>
    475e:	4b 01       	movw	r8, r22
    4760:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4762:	87 01       	movw	r16, r14
    4764:	08 5f       	subi	r16, 0xF8	; 248
    4766:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    4768:	26 01       	movw	r4, r12
    476a:	61 2c       	mov	r6, r1
    476c:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    476e:	c8 01       	movw	r24, r16
    4770:	29 d5       	rcall	.+2642   	; 0x51c4 <_ZN11EthernetUDP11parsePacketEv>
    4772:	18 16       	cp	r1, r24
    4774:	19 06       	cpc	r1, r25
    4776:	a4 f0       	brlt	.+40     	; 0x47a0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x80>
    {
        if((millis() - startTime) > aTimeout)
    4778:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <millis>
    477c:	dc 01       	movw	r26, r24
    477e:	cb 01       	movw	r24, r22
    4780:	88 19       	sub	r24, r8
    4782:	99 09       	sbc	r25, r9
    4784:	aa 09       	sbc	r26, r10
    4786:	bb 09       	sbc	r27, r11
    4788:	48 16       	cp	r4, r24
    478a:	59 06       	cpc	r5, r25
    478c:	6a 06       	cpc	r6, r26
    478e:	7b 06       	cpc	r7, r27
    4790:	d0 f0       	brcs	.+52     	; 0x47c6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
            return TIMED_OUT;
        delay(50);
    4792:	62 e3       	ldi	r22, 0x32	; 50
    4794:	70 e0       	ldi	r23, 0x00	; 0
    4796:	80 e0       	ldi	r24, 0x00	; 0
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    479e:	e7 cf       	rjmp	.-50     	; 0x476e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    47a0:	f7 01       	movw	r30, r14
    47a2:	42 81       	ldd	r20, Z+2	; 0x02
    47a4:	53 81       	ldd	r21, Z+3	; 0x03
    47a6:	64 81       	ldd	r22, Z+4	; 0x04
    47a8:	75 81       	ldd	r23, Z+5	; 0x05
    47aa:	81 8d       	ldd	r24, Z+25	; 0x19
    47ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    47ae:	a3 8d       	ldd	r26, Z+27	; 0x1b
    47b0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    47b2:	48 17       	cp	r20, r24
    47b4:	59 07       	cpc	r21, r25
    47b6:	6a 07       	cpc	r22, r26
    47b8:	7b 07       	cpc	r23, r27
    47ba:	49 f4       	brne	.+18     	; 0x47ce <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    47bc:	85 8d       	ldd	r24, Z+29	; 0x1d
    47be:	96 8d       	ldd	r25, Z+30	; 0x1e
    47c0:	c5 97       	sbiw	r24, 0x35	; 53
    47c2:	29 f4       	brne	.+10     	; 0x47ce <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    47c4:	09 c0       	rjmp	.+18     	; 0x47d8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    47c6:	ee 24       	eor	r14, r14
    47c8:	ea 94       	dec	r14
    47ca:	fe 2c       	mov	r15, r14
    47cc:	f0 c0       	rjmp	.+480    	; 0x49ae <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    47ce:	9e ef       	ldi	r25, 0xFE	; 254
    47d0:	e9 2e       	mov	r14, r25
    47d2:	ff 24       	eor	r15, r15
    47d4:	fa 94       	dec	r15
    47d6:	eb c0       	rjmp	.+470    	; 0x49ae <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    47d8:	c8 01       	movw	r24, r16
    47da:	08 d4       	rcall	.+2064   	; 0x4fec <_ZN11EthernetUDP9availableEv>
    47dc:	0c 97       	sbiw	r24, 0x0c	; 12
    47de:	0c f4       	brge	.+2      	; 0x47e2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>
    47e0:	e2 c0       	rjmp	.+452    	; 0x49a6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    47e2:	4c e0       	ldi	r20, 0x0C	; 12
    47e4:	50 e0       	ldi	r21, 0x00	; 0
    47e6:	be 01       	movw	r22, r28
    47e8:	6f 5f       	subi	r22, 0xFF	; 255
    47ea:	7f 4f       	sbci	r23, 0xFF	; 255
    47ec:	c8 01       	movw	r24, r16
    47ee:	83 d4       	rcall	.+2310   	; 0x50f6 <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    47f0:	8b 81       	ldd	r24, Y+3	; 0x03
    47f2:	9c 81       	ldd	r25, Y+4	; 0x04
    47f4:	98 27       	eor	r25, r24
    47f6:	89 27       	eor	r24, r25
    47f8:	98 27       	eor	r25, r24
    47fa:	9a 8b       	std	Y+18, r25	; 0x12
    47fc:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    47fe:	f7 01       	movw	r30, r14
    4800:	46 81       	ldd	r20, Z+6	; 0x06
    4802:	57 81       	ldd	r21, Z+7	; 0x07
    4804:	29 81       	ldd	r18, Y+1	; 0x01
    4806:	3a 81       	ldd	r19, Y+2	; 0x02
    4808:	42 17       	cp	r20, r18
    480a:	53 07       	cpc	r21, r19
    480c:	11 f4       	brne	.+4      	; 0x4812 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf2>
    480e:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    4810:	07 c0       	rjmp	.+14     	; 0x4820 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    4812:	c8 01       	movw	r24, r16
    4814:	05 d4       	rcall	.+2058   	; 0x5020 <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    4816:	7c ef       	ldi	r23, 0xFC	; 252
    4818:	e7 2e       	mov	r14, r23
    481a:	ff 24       	eor	r15, r15
    481c:	fa 94       	dec	r15
    481e:	c7 c0       	rjmp	.+398    	; 0x49ae <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    4820:	8f 70       	andi	r24, 0x0F	; 15
    4822:	92 70       	andi	r25, 0x02	; 2
    4824:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    4826:	39 f0       	breq	.+14     	; 0x4836 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    4828:	c8 01       	movw	r24, r16
    482a:	fa d3       	rcall	.+2036   	; 0x5020 <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    482c:	6b ef       	ldi	r22, 0xFB	; 251
    482e:	e6 2e       	mov	r14, r22
    4830:	ff 24       	eor	r15, r15
    4832:	fa 94       	dec	r15
    4834:	bc c0       	rjmp	.+376    	; 0x49ae <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    4836:	cf 80       	ldd	r12, Y+7	; 0x07
    4838:	d8 84       	ldd	r13, Y+8	; 0x08
    483a:	dc 24       	eor	r13, r12
    483c:	cd 24       	eor	r12, r13
    483e:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    4840:	c1 14       	cp	r12, r1
    4842:	d1 04       	cpc	r13, r1
    4844:	19 f0       	breq	.+6      	; 0x484c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x12c>
    4846:	e1 2c       	mov	r14, r1
    4848:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    484a:	1f c0       	rjmp	.+62     	; 0x488a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16a>
    484c:	c8 01       	movw	r24, r16
    484e:	e8 d3       	rcall	.+2000   	; 0x5020 <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    4850:	5a ef       	ldi	r21, 0xFA	; 250
    4852:	e5 2e       	mov	r14, r21
    4854:	ff 24       	eor	r15, r15
    4856:	fa 94       	dec	r15
    4858:	aa c0       	rjmp	.+340    	; 0x49ae <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    485a:	41 e0       	ldi	r20, 0x01	; 1
    485c:	50 e0       	ldi	r21, 0x00	; 0
    485e:	be 01       	movw	r22, r28
    4860:	63 5f       	subi	r22, 0xF3	; 243
    4862:	7f 4f       	sbci	r23, 0xFF	; 255
    4864:	c8 01       	movw	r24, r16
    4866:	47 d4       	rcall	.+2190   	; 0x50f6 <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    4868:	8d 85       	ldd	r24, Y+13	; 0x0d
    486a:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    486c:	17 c0       	rjmp	.+46     	; 0x489c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    486e:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4870:	81 11       	cpse	r24, r1
    4872:	f3 cf       	rjmp	.-26     	; 0x485a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    4874:	c8 01       	movw	r24, r16
    4876:	17 d4       	rcall	.+2094   	; 0x50a6 <_ZN11EthernetUDP4readEv>
    4878:	c8 01       	movw	r24, r16
    487a:	15 d4       	rcall	.+2090   	; 0x50a6 <_ZN11EthernetUDP4readEv>
    487c:	c8 01       	movw	r24, r16
    487e:	13 d4       	rcall	.+2086   	; 0x50a6 <_ZN11EthernetUDP4readEv>
    4880:	c8 01       	movw	r24, r16
    4882:	11 d4       	rcall	.+2082   	; 0x50a6 <_ZN11EthernetUDP4readEv>
    4884:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    4886:	ef 1a       	sub	r14, r31
    4888:	ff 0a       	sbc	r15, r31
    488a:	8d 81       	ldd	r24, Y+5	; 0x05
    488c:	9e 81       	ldd	r25, Y+6	; 0x06
    488e:	98 27       	eor	r25, r24
    4890:	89 27       	eor	r24, r25
    4892:	98 27       	eor	r25, r24
    4894:	e8 16       	cp	r14, r24
    4896:	f9 06       	cpc	r15, r25
    4898:	00 f3       	brcs	.-64     	; 0x485a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    489a:	09 c0       	rjmp	.+18     	; 0x48ae <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18e>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    489c:	8d 85       	ldd	r24, Y+13	; 0x0d
    489e:	9f ef       	ldi	r25, 0xFF	; 255
    48a0:	98 0f       	add	r25, r24
    48a2:	9d 87       	std	Y+13, r25	; 0x0d
    48a4:	88 23       	and	r24, r24
    48a6:	19 f3       	breq	.-58     	; 0x486e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14e>
                {
                    iUdp.read(); // we don't care about the returned byte
    48a8:	c8 01       	movw	r24, r16
    48aa:	fd d3       	rcall	.+2042   	; 0x50a6 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    48ac:	f7 cf       	rjmp	.-18     	; 0x489c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    48ae:	a1 2c       	mov	r10, r1
    48b0:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    48b2:	41 e0       	ldi	r20, 0x01	; 1
    48b4:	50 e0       	ldi	r21, 0x00	; 0
    48b6:	be 01       	movw	r22, r28
    48b8:	6d 5e       	subi	r22, 0xED	; 237
    48ba:	7f 4f       	sbci	r23, 0xFF	; 255
    48bc:	c8 01       	movw	r24, r16
    48be:	1b d4       	rcall	.+2102   	; 0x50f6 <_ZN11EthernetUDP4readEPhj>
    48c0:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    48c2:	98 2f       	mov	r25, r24
    48c4:	90 7c       	andi	r25, 0xC0	; 192
    48c6:	59 f4       	brne	.+22     	; 0x48de <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1be>
            {
                // It's just a normal label
                if (len > 0)
    48c8:	88 23       	and	r24, r24
    48ca:	79 f0       	breq	.+30     	; 0x48ea <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    48cc:	8b 89       	ldd	r24, Y+19	; 0x13
    48ce:	9f ef       	ldi	r25, 0xFF	; 255
    48d0:	98 0f       	add	r25, r24
    48d2:	9b 8b       	std	Y+19, r25	; 0x13
    48d4:	88 23       	and	r24, r24
    48d6:	31 f0       	breq	.+12     	; 0x48e4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c4>
                    {
                        iUdp.read(); // we don't care about the returned byte
    48d8:	c8 01       	movw	r24, r16
    48da:	e5 d3       	rcall	.+1994   	; 0x50a6 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    48dc:	f7 cf       	rjmp	.-18     	; 0x48cc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ac>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    48de:	c8 01       	movw	r24, r16
    48e0:	e2 d3       	rcall	.+1988   	; 0x50a6 <_ZN11EthernetUDP4readEv>
    48e2:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    48e4:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    48e6:	81 11       	cpse	r24, r1
    48e8:	e4 cf       	rjmp	.-56     	; 0x48b2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    48ea:	42 e0       	ldi	r20, 0x02	; 2
    48ec:	50 e0       	ldi	r21, 0x00	; 0
    48ee:	be 01       	movw	r22, r28
    48f0:	61 5f       	subi	r22, 0xF1	; 241
    48f2:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    48f4:	c8 01       	movw	r24, r16
    48f6:	ff d3       	rcall	.+2046   	; 0x50f6 <_ZN11EthernetUDP4readEPhj>
    48f8:	42 e0       	ldi	r20, 0x02	; 2
    48fa:	50 e0       	ldi	r21, 0x00	; 0
    48fc:	be 01       	movw	r22, r28
    48fe:	63 5f       	subi	r22, 0xF3	; 243
    4900:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4902:	c8 01       	movw	r24, r16
    4904:	f8 d3       	rcall	.+2032   	; 0x50f6 <_ZN11EthernetUDP4readEPhj>
    4906:	c8 01       	movw	r24, r16
    4908:	ce d3       	rcall	.+1948   	; 0x50a6 <_ZN11EthernetUDP4readEv>
    490a:	c8 01       	movw	r24, r16
    490c:	cc d3       	rcall	.+1944   	; 0x50a6 <_ZN11EthernetUDP4readEv>
    490e:	c8 01       	movw	r24, r16
    4910:	ca d3       	rcall	.+1940   	; 0x50a6 <_ZN11EthernetUDP4readEv>
    4912:	c8 01       	movw	r24, r16
    4914:	c8 d3       	rcall	.+1936   	; 0x50a6 <_ZN11EthernetUDP4readEv>
    4916:	42 e0       	ldi	r20, 0x02	; 2
    4918:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    491a:	be 01       	movw	r22, r28
    491c:	6f 5e       	subi	r22, 0xEF	; 239
    491e:	7f 4f       	sbci	r23, 0xFF	; 255
    4920:	c8 01       	movw	r24, r16
    4922:	e9 d3       	rcall	.+2002   	; 0x50f6 <_ZN11EthernetUDP4readEPhj>
    4924:	8f 85       	ldd	r24, Y+15	; 0x0f
    4926:	98 89       	ldd	r25, Y+16	; 0x10
    4928:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    492a:	91 40       	sbci	r25, 0x01	; 1
    492c:	49 f4       	brne	.+18     	; 0x4940 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
    492e:	ed 84       	ldd	r14, Y+13	; 0x0d
    4930:	fe 84       	ldd	r15, Y+14	; 0x0e
    4932:	fe 24       	eor	r15, r14
    4934:	ef 24       	eor	r14, r15
    4936:	fe 24       	eor	r15, r14
    4938:	81 e0       	ldi	r24, 0x01	; 1
    493a:	e8 16       	cp	r14, r24
    493c:	f1 04       	cpc	r15, r1
    493e:	19 f0       	breq	.+6      	; 0x4946 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x226>
    4940:	e1 2c       	mov	r14, r1
    4942:	f1 2c       	mov	r15, r1
    4944:	14 c0       	rjmp	.+40     	; 0x496e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4946:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    4948:	9a 89       	ldd	r25, Y+18	; 0x12
    494a:	81 15       	cp	r24, r1
    494c:	94 40       	sbci	r25, 0x04	; 4
    494e:	39 f0       	breq	.+14     	; 0x495e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x23e>
    4950:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    4952:	66 d3       	rcall	.+1740   	; 0x5020 <_ZN11EthernetUDP5flushEv>
    4954:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    4956:	e4 2e       	mov	r14, r20
    4958:	ff 24       	eor	r15, r15
    495a:	fa 94       	dec	r15
    495c:	28 c0       	rjmp	.+80     	; 0x49ae <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    495e:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    4960:	6e 5f       	subi	r22, 0xFE	; 254
    4962:	7f 4f       	sbci	r23, 0xFF	; 255
    4964:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    4966:	50 e0       	ldi	r21, 0x00	; 0
    4968:	c8 01       	movw	r24, r16
    496a:	c5 d3       	rcall	.+1930   	; 0x50f6 <_ZN11EthernetUDP4readEPhj>
    496c:	20 c0       	rjmp	.+64     	; 0x49ae <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
            return SUCCESS;
    496e:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    4970:	9a 89       	ldd	r25, Y+18	; 0x12
    4972:	98 27       	eor	r25, r24
    4974:	89 27       	eor	r24, r25
    4976:	98 27       	eor	r25, r24
    4978:	e8 16       	cp	r14, r24
    497a:	f9 06       	cpc	r15, r25
    497c:	30 f4       	brcc	.+12     	; 0x498a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26a>
    497e:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    4980:	92 d3       	rcall	.+1828   	; 0x50a6 <_ZN11EthernetUDP4readEv>
    4982:	ff ef       	ldi	r31, 0xFF	; 255
    4984:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    4986:	ff 0a       	sbc	r15, r31
    4988:	f2 cf       	rjmp	.-28     	; 0x496e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    498a:	2f ef       	ldi	r18, 0xFF	; 255
    498c:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    498e:	b2 0a       	sbc	r11, r18
    4990:	ca 14       	cp	r12, r10
    4992:	db 04       	cpc	r13, r11
    4994:	09 f0       	breq	.+2      	; 0x4998 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x278>
    4996:	8d cf       	rjmp	.-230    	; 0x48b2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    4998:	c8 01       	movw	r24, r16
    499a:	42 d3       	rcall	.+1668   	; 0x5020 <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    499c:	36 ef       	ldi	r19, 0xF6	; 246
    499e:	e3 2e       	mov	r14, r19
    49a0:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    49a2:	fa 94       	dec	r15
    49a4:	04 c0       	rjmp	.+8      	; 0x49ae <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    49a6:	8d ef       	ldi	r24, 0xFD	; 253
    49a8:	e8 2e       	mov	r14, r24
    49aa:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    49ac:	fa 94       	dec	r15
    49ae:	c7 01       	movw	r24, r14
    49b0:	63 96       	adiw	r28, 0x13	; 19
    49b2:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    49b4:	f8 94       	cli
    49b6:	de bf       	out	0x3e, r29	; 62
    49b8:	0f be       	out	0x3f, r0	; 63
    49ba:	cd bf       	out	0x3d, r28	; 61
    49bc:	df 91       	pop	r29
    49be:	cf 91       	pop	r28
    49c0:	1f 91       	pop	r17
    49c2:	0f 91       	pop	r16
    49c4:	ff 90       	pop	r15
    49c6:	ef 90       	pop	r14
    49c8:	df 90       	pop	r13
    49ca:	cf 90       	pop	r12
    49cc:	bf 90       	pop	r11
    49ce:	af 90       	pop	r10
    49d0:	9f 90       	pop	r9
    49d2:	8f 90       	pop	r8
    49d4:	7f 90       	pop	r7
    49d6:	6f 90       	pop	r6
    49d8:	5f 90       	pop	r5
    49da:	4f 90       	pop	r4
    49dc:	3f 90       	pop	r3
    49de:	2f 90       	pop	r2
    49e0:	08 95       	ret

000049e2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    49e2:	8f 92       	push	r8
    49e4:	9f 92       	push	r9
    49e6:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    49e8:	bf 92       	push	r11
    49ea:	cf 92       	push	r12
    49ec:	df 92       	push	r13
    49ee:	ef 92       	push	r14
    49f0:	ff 92       	push	r15
    49f2:	0f 93       	push	r16
    49f4:	1f 93       	push	r17
    49f6:	cf 93       	push	r28
    49f8:	df 93       	push	r29
    49fa:	00 d0       	rcall	.+0      	; 0x49fc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    49fc:	00 d0       	rcall	.+0      	; 0x49fe <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    49fe:	00 d0       	rcall	.+0      	; 0x4a00 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    4a00:	cd b7       	in	r28, 0x3d	; 61
    4a02:	de b7       	in	r29, 0x3e	; 62
    4a04:	7c 01       	movw	r14, r24
    4a06:	4b 01       	movw	r8, r22
    4a08:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    4a0a:	9e dd       	rcall	.-1220   	; 0x4548 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    4a0c:	8c 01       	movw	r16, r24
    4a0e:	89 2b       	or	r24, r25
    4a10:	09 f0       	breq	.+2      	; 0x4a14 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    4a12:	57 c0       	rjmp	.+174    	; 0x4ac2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    4a14:	f7 01       	movw	r30, r14
    4a16:	42 81       	ldd	r20, Z+2	; 0x02
    4a18:	53 81       	ldd	r21, Z+3	; 0x03
    4a1a:	64 81       	ldd	r22, Z+4	; 0x04
    4a1c:	75 81       	ldd	r23, Z+5	; 0x05
    4a1e:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <_ZL11INADDR_NONE+0x2>
    4a22:	90 91 78 0b 	lds	r25, 0x0B78	; 0x800b78 <_ZL11INADDR_NONE+0x3>
    4a26:	a0 91 79 0b 	lds	r26, 0x0B79	; 0x800b79 <_ZL11INADDR_NONE+0x4>
    4a2a:	b0 91 7a 0b 	lds	r27, 0x0B7A	; 0x800b7a <_ZL11INADDR_NONE+0x5>
    4a2e:	48 17       	cp	r20, r24
    4a30:	59 07       	cpc	r21, r25
    4a32:	6a 07       	cpc	r22, r26
    4a34:	7b 07       	cpc	r23, r27
    4a36:	09 f4       	brne	.+2      	; 0x4a3a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    4a38:	47 c0       	rjmp	.+142    	; 0x4ac8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    4a3a:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <millis>
    4a3e:	67 01       	movw	r12, r14
    4a40:	f8 e0       	ldi	r31, 0x08	; 8
    4a42:	cf 0e       	add	r12, r31
    4a44:	d1 1c       	adc	r13, r1
    4a46:	6f 70       	andi	r22, 0x0F	; 15
    4a48:	77 27       	eor	r23, r23
    4a4a:	7c 5f       	subi	r23, 0xFC	; 252
    4a4c:	c6 01       	movw	r24, r12
    4a4e:	89 d3       	rcall	.+1810   	; 0x5162 <_ZN11EthernetUDP5beginEj>
    4a50:	81 30       	cpi	r24, 0x01	; 1
    4a52:	09 f0       	breq	.+2      	; 0x4a56 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x74>
    4a54:	3b c0       	rjmp	.+118    	; 0x4acc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4a56:	80 ec       	ldi	r24, 0xC0	; 192
    4a58:	99 e0       	ldi	r25, 0x09	; 9
    4a5a:	9a 83       	std	Y+2, r25	; 0x02
    4a5c:	89 83       	std	Y+1, r24	; 0x01
    4a5e:	f7 01       	movw	r30, r14
    4a60:	82 81       	ldd	r24, Z+2	; 0x02
    4a62:	93 81       	ldd	r25, Z+3	; 0x03
    4a64:	a4 81       	ldd	r26, Z+4	; 0x04
    4a66:	b5 81       	ldd	r27, Z+5	; 0x05
    4a68:	8b 83       	std	Y+3, r24	; 0x03
    4a6a:	9c 83       	std	Y+4, r25	; 0x04
    4a6c:	ad 83       	std	Y+5, r26	; 0x05
    4a6e:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    4a70:	45 e3       	ldi	r20, 0x35	; 53
    4a72:	50 e0       	ldi	r21, 0x00	; 0
    4a74:	be 01       	movw	r22, r28
    4a76:	6f 5f       	subi	r22, 0xFF	; 255
    4a78:	7f 4f       	sbci	r23, 0xFF	; 255
    4a7a:	c6 01       	movw	r24, r12
    4a7c:	f7 d2       	rcall	.+1518   	; 0x506c <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    4a7e:	89 2b       	or	r24, r25
    4a80:	19 f4       	brne	.+6      	; 0x4a88 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa6>
    4a82:	00 e0       	ldi	r16, 0x00	; 0
    4a84:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    4a86:	1a c0       	rjmp	.+52     	; 0x4abc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    4a88:	b4 01       	movw	r22, r8
    4a8a:	c7 01       	movw	r24, r14
                if (ret != 0)
    4a8c:	a8 dd       	rcall	.-1200   	; 0x45de <_ZN9DNSClient12BuildRequestEPKc>
    4a8e:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    4a90:	c1 f3       	breq	.-16     	; 0x4a82 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    4a92:	c6 01       	movw	r24, r12
    4a94:	f2 d2       	rcall	.+1508   	; 0x507a <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    4a96:	89 2b       	or	r24, r25
    4a98:	a1 f3       	breq	.-24     	; 0x4a82 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    4a9a:	83 e0       	ldi	r24, 0x03	; 3
    4a9c:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    4a9e:	91 2c       	mov	r9, r1
    4aa0:	a5 01       	movw	r20, r10
    4aa2:	68 e8       	ldi	r22, 0x88	; 136
    4aa4:	73 e1       	ldi	r23, 0x13	; 19
    4aa6:	c7 01       	movw	r24, r14
    4aa8:	3b de       	rcall	.-906    	; 0x4720 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    4aaa:	8c 01       	movw	r16, r24
    4aac:	21 e0       	ldi	r18, 0x01	; 1
    4aae:	82 1a       	sub	r8, r18
    4ab0:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    4ab2:	21 f0       	breq	.+8      	; 0x4abc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    4ab4:	0f 3f       	cpi	r16, 0xFF	; 255
    4ab6:	ff ef       	ldi	r31, 0xFF	; 255
    4ab8:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    4aba:	91 f3       	breq	.-28     	; 0x4aa0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbe>
    4abc:	c6 01       	movw	r24, r12
    4abe:	c2 d2       	rcall	.+1412   	; 0x5044 <_ZN11EthernetUDP4stopEv>
    4ac0:	05 c0       	rjmp	.+10     	; 0x4acc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    4ac2:	01 e0       	ldi	r16, 0x01	; 1
    4ac4:	10 e0       	ldi	r17, 0x00	; 0
    4ac6:	02 c0       	rjmp	.+4      	; 0x4acc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    4ac8:	0e ef       	ldi	r16, 0xFE	; 254
    4aca:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    4acc:	c8 01       	movw	r24, r16
    4ace:	26 96       	adiw	r28, 0x06	; 6
    4ad0:	0f b6       	in	r0, 0x3f	; 63
    4ad2:	f8 94       	cli
    4ad4:	de bf       	out	0x3e, r29	; 62
    4ad6:	0f be       	out	0x3f, r0	; 63
    4ad8:	cd bf       	out	0x3d, r28	; 61
    4ada:	df 91       	pop	r29
    4adc:	cf 91       	pop	r28
    4ade:	1f 91       	pop	r17
    4ae0:	0f 91       	pop	r16
    4ae2:	ff 90       	pop	r15
    4ae4:	ef 90       	pop	r14
    4ae6:	df 90       	pop	r13
    4ae8:	cf 90       	pop	r12
    4aea:	bf 90       	pop	r11
    4aec:	af 90       	pop	r10
    4aee:	9f 90       	pop	r9
    4af0:	8f 90       	pop	r8
    4af2:	08 95       	ret

00004af4 <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    4af4:	24 e0       	ldi	r18, 0x04	; 4
    4af6:	30 e0       	ldi	r19, 0x00	; 0
    4af8:	ac 01       	movw	r20, r24
    4afa:	64 e0       	ldi	r22, 0x04	; 4
    4afc:	81 e0       	ldi	r24, 0x01	; 1
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	35 c6       	rjmp	.+3178   	; 0x576c <_ZN10W5500Class5writeEjhPKhj>

00004b02 <_ZN10W5500Class9writeSUBREPh>:
    4b02:	24 e0       	ldi	r18, 0x04	; 4
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	ac 01       	movw	r20, r24
    4b08:	64 e0       	ldi	r22, 0x04	; 4
    4b0a:	85 e0       	ldi	r24, 0x05	; 5
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	2e c6       	rjmp	.+3164   	; 0x576c <_ZN10W5500Class5writeEjhPKhj>

00004b10 <_ZN10W5500Class9writeSHAREPh>:
    4b10:	26 e0       	ldi	r18, 0x06	; 6
    4b12:	30 e0       	ldi	r19, 0x00	; 0
    4b14:	ac 01       	movw	r20, r24
    4b16:	64 e0       	ldi	r22, 0x04	; 4
    4b18:	89 e0       	ldi	r24, 0x09	; 9
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	27 c6       	rjmp	.+3150   	; 0x576c <_ZN10W5500Class5writeEjhPKhj>

00004b1e <_ZN10W5500Class9writeSIPREPh>:
    4b1e:	24 e0       	ldi	r18, 0x04	; 4
    4b20:	30 e0       	ldi	r19, 0x00	; 0
    4b22:	ac 01       	movw	r20, r24
    4b24:	64 e0       	ldi	r22, 0x04	; 4
    4b26:	8f e0       	ldi	r24, 0x0F	; 15
    4b28:	90 e0       	ldi	r25, 0x00	; 0
    4b2a:	20 c6       	rjmp	.+3136   	; 0x576c <_ZN10W5500Class5writeEjhPKhj>

00004b2c <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    4b2c:	8f 92       	push	r8
    4b2e:	9f 92       	push	r9
    4b30:	af 92       	push	r10
    4b32:	bf 92       	push	r11
    4b34:	cf 92       	push	r12
    4b36:	df 92       	push	r13
    4b38:	ef 92       	push	r14
    4b3a:	ff 92       	push	r15
    4b3c:	0f 93       	push	r16
    4b3e:	1f 93       	push	r17
    4b40:	cf 93       	push	r28
    4b42:	df 93       	push	r29
    4b44:	4c 01       	movw	r8, r24
    4b46:	5b 01       	movw	r10, r22
    4b48:	6a 01       	movw	r12, r20
    4b4a:	e9 01       	movw	r28, r18
    4b4c:	fc 01       	movw	r30, r24
    4b4e:	64 85       	ldd	r22, Z+12	; 0x0c
    4b50:	85 eb       	ldi	r24, 0xB5	; 181
    4b52:	9b e0       	ldi	r25, 0x0B	; 11
    4b54:	53 d6       	rcall	.+3238   	; 0x57fc <_ZN10W5500Class4initEh>
    4b56:	c5 01       	movw	r24, r10
    4b58:	db df       	rcall	.-74     	; 0x4b10 <_ZN10W5500Class9writeSHAREPh>
    4b5a:	c6 01       	movw	r24, r12
    4b5c:	02 96       	adiw	r24, 0x02	; 2
    4b5e:	df df       	rcall	.-66     	; 0x4b1e <_ZN10W5500Class9writeSIPREPh>
    4b60:	c8 01       	movw	r24, r16
    4b62:	02 96       	adiw	r24, 0x02	; 2
    4b64:	c7 df       	rcall	.-114    	; 0x4af4 <_ZN10W5500Class8writeGAREPh>
    4b66:	c7 01       	movw	r24, r14
    4b68:	02 96       	adiw	r24, 0x02	; 2
    4b6a:	cb df       	rcall	.-106    	; 0x4b02 <_ZN10W5500Class9writeSUBREPh>
    4b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    4b70:	ac 81       	ldd	r26, Y+4	; 0x04
    4b72:	bd 81       	ldd	r27, Y+5	; 0x05
    4b74:	f4 01       	movw	r30, r8
    4b76:	82 83       	std	Z+2, r24	; 0x02
    4b78:	93 83       	std	Z+3, r25	; 0x03
    4b7a:	a4 83       	std	Z+4, r26	; 0x04
    4b7c:	b5 83       	std	Z+5, r27	; 0x05
    4b7e:	df 91       	pop	r29
    4b80:	cf 91       	pop	r28
    4b82:	1f 91       	pop	r17
    4b84:	0f 91       	pop	r16
    4b86:	ff 90       	pop	r15
    4b88:	ef 90       	pop	r14
    4b8a:	df 90       	pop	r13
    4b8c:	cf 90       	pop	r12
    4b8e:	bf 90       	pop	r11
    4b90:	af 90       	pop	r10
    4b92:	9f 90       	pop	r9
    4b94:	8f 90       	pop	r8
    4b96:	08 95       	ret

00004b98 <_ZN13EthernetClass11dnsServerIPEv>:
    4b98:	20 ec       	ldi	r18, 0xC0	; 192
    4b9a:	39 e0       	ldi	r19, 0x09	; 9
    4b9c:	fc 01       	movw	r30, r24
    4b9e:	31 83       	std	Z+1, r19	; 0x01
    4ba0:	20 83       	st	Z, r18
    4ba2:	fb 01       	movw	r30, r22
    4ba4:	42 81       	ldd	r20, Z+2	; 0x02
    4ba6:	53 81       	ldd	r21, Z+3	; 0x03
    4ba8:	64 81       	ldd	r22, Z+4	; 0x04
    4baa:	75 81       	ldd	r23, Z+5	; 0x05
    4bac:	fc 01       	movw	r30, r24
    4bae:	42 83       	std	Z+2, r20	; 0x02
    4bb0:	53 83       	std	Z+3, r21	; 0x03
    4bb2:	64 83       	std	Z+4, r22	; 0x04
    4bb4:	75 83       	std	Z+5, r23	; 0x05
    4bb6:	08 95       	ret

00004bb8 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    4bb8:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4bba:	00 e0       	ldi	r16, 0x00	; 0
    4bbc:	20 e0       	ldi	r18, 0x00	; 0
    4bbe:	40 e0       	ldi	r20, 0x00	; 0
    4bc0:	60 e0       	ldi	r22, 0x00	; 0
    4bc2:	88 e9       	ldi	r24, 0x98	; 152
    4bc4:	9b e0       	ldi	r25, 0x0B	; 11
    4bc6:	0e 94 29 36 	call	0x6c52	; 0x6c52 <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    4bca:	8b e7       	ldi	r24, 0x7B	; 123
    4bcc:	9b e0       	ldi	r25, 0x0B	; 11
    4bce:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <_ZN9IPAddressC1Ev>
    4bd2:	eb e7       	ldi	r30, 0x7B	; 123
    4bd4:	fb e0       	ldi	r31, 0x0B	; 11
    4bd6:	13 86       	std	Z+11, r1	; 0x0b
    4bd8:	12 86       	std	Z+10, r1	; 0x0a
    4bda:	8a e0       	ldi	r24, 0x0A	; 10
    4bdc:	84 87       	std	Z+12, r24	; 0x0c
    4bde:	0f 91       	pop	r16
    4be0:	08 95       	ret

00004be2 <_ZN14EthernetClientneERKS_>:
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    4be2:	dc 01       	movw	r26, r24
    4be4:	ed 91       	ld	r30, X+
    4be6:	fc 91       	ld	r31, X
    4be8:	02 8c       	ldd	r0, Z+26	; 0x1a
    4bea:	f3 8d       	ldd	r31, Z+27	; 0x1b
    4bec:	e0 2d       	mov	r30, r0
    4bee:	09 95       	icall
    4bf0:	91 e0       	ldi	r25, 0x01	; 1
    4bf2:	89 27       	eor	r24, r25
    4bf4:	08 95       	ret

00004bf6 <_ZN14EthernetClient5writeEh>:
    4bf6:	cf 93       	push	r28
    4bf8:	df 93       	push	r29
    4bfa:	1f 92       	push	r1
    4bfc:	cd b7       	in	r28, 0x3d	; 61
    4bfe:	de b7       	in	r29, 0x3e	; 62
    4c00:	69 83       	std	Y+1, r22	; 0x01
    4c02:	dc 01       	movw	r26, r24
    4c04:	ed 91       	ld	r30, X+
    4c06:	fc 91       	ld	r31, X
    4c08:	02 80       	ldd	r0, Z+2	; 0x02
    4c0a:	f3 81       	ldd	r31, Z+3	; 0x03
    4c0c:	e0 2d       	mov	r30, r0
    4c0e:	41 e0       	ldi	r20, 0x01	; 1
    4c10:	50 e0       	ldi	r21, 0x00	; 0
    4c12:	be 01       	movw	r22, r28
    4c14:	6f 5f       	subi	r22, 0xFF	; 255
    4c16:	7f 4f       	sbci	r23, 0xFF	; 255
    4c18:	09 95       	icall
    4c1a:	0f 90       	pop	r0
    4c1c:	df 91       	pop	r29
    4c1e:	cf 91       	pop	r28
    4c20:	08 95       	ret

00004c22 <_ZN14EthernetClientcvbEv>:
    4c22:	21 e0       	ldi	r18, 0x01	; 1
    4c24:	fc 01       	movw	r30, r24
    4c26:	84 85       	ldd	r24, Z+12	; 0x0c
    4c28:	88 30       	cpi	r24, 0x08	; 8
    4c2a:	09 f4       	brne	.+2      	; 0x4c2e <_ZN14EthernetClientcvbEv+0xc>
    4c2c:	20 e0       	ldi	r18, 0x00	; 0
    4c2e:	82 2f       	mov	r24, r18
    4c30:	08 95       	ret

00004c32 <_ZN14EthernetClienteqERKS_>:
    4c32:	fc 01       	movw	r30, r24
    4c34:	94 85       	ldd	r25, Z+12	; 0x0c
    4c36:	fb 01       	movw	r30, r22
    4c38:	84 85       	ldd	r24, Z+12	; 0x0c
    4c3a:	98 13       	cpse	r25, r24
    4c3c:	03 c0       	rjmp	.+6      	; 0x4c44 <_ZN14EthernetClienteqERKS_+0x12>
    4c3e:	81 e0       	ldi	r24, 0x01	; 1
    4c40:	98 30       	cpi	r25, 0x08	; 8
    4c42:	09 f4       	brne	.+2      	; 0x4c46 <_ZN14EthernetClienteqERKS_+0x14>
    4c44:	80 e0       	ldi	r24, 0x00	; 0
    4c46:	08 95       	ret

00004c48 <_ZN14EthernetClient7connectEPKcj>:
    4c48:	cf 92       	push	r12
    4c4a:	df 92       	push	r13
    4c4c:	ef 92       	push	r14
    4c4e:	ff 92       	push	r15
    4c50:	0f 93       	push	r16
    4c52:	1f 93       	push	r17
    4c54:	cf 93       	push	r28
    4c56:	df 93       	push	r29
    4c58:	cd b7       	in	r28, 0x3d	; 61
    4c5a:	de b7       	in	r29, 0x3e	; 62
    4c5c:	af 97       	sbiw	r28, 0x2f	; 47
    4c5e:	0f b6       	in	r0, 0x3f	; 63
    4c60:	f8 94       	cli
    4c62:	de bf       	out	0x3e, r29	; 62
    4c64:	0f be       	out	0x3f, r0	; 63
    4c66:	cd bf       	out	0x3d, r28	; 61
    4c68:	8c 01       	movw	r16, r24
    4c6a:	6b 01       	movw	r12, r22
    4c6c:	7a 01       	movw	r14, r20
    4c6e:	ce 01       	movw	r24, r28
    4c70:	01 96       	adiw	r24, 0x01	; 1
    4c72:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <_ZN9IPAddressC1Ev>
    4c76:	ce 01       	movw	r24, r28
    4c78:	09 96       	adiw	r24, 0x09	; 9
    4c7a:	f3 d2       	rcall	.+1510   	; 0x5262 <_ZN11EthernetUDPC1Ev>
    4c7c:	ce 01       	movw	r24, r28
    4c7e:	8a 96       	adiw	r24, 0x2a	; 42
    4c80:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <_ZN9IPAddressC1Ev>
    4c84:	6b e7       	ldi	r22, 0x7B	; 123
    4c86:	7b e0       	ldi	r23, 0x0B	; 11
    4c88:	ce 01       	movw	r24, r28
    4c8a:	84 96       	adiw	r24, 0x24	; 36
    4c8c:	85 df       	rcall	.-246    	; 0x4b98 <_ZN13EthernetClass11dnsServerIPEv>
    4c8e:	be 01       	movw	r22, r28
    4c90:	6c 5d       	subi	r22, 0xDC	; 220
    4c92:	7f 4f       	sbci	r23, 0xFF	; 255
    4c94:	ce 01       	movw	r24, r28
    4c96:	01 96       	adiw	r24, 0x01	; 1
    4c98:	4a dc       	rcall	.-1900   	; 0x452e <_ZN9DNSClient5beginERK9IPAddress>
    4c9a:	ae 01       	movw	r20, r28
    4c9c:	46 5d       	subi	r20, 0xD6	; 214
    4c9e:	5f 4f       	sbci	r21, 0xFF	; 255
    4ca0:	b6 01       	movw	r22, r12
    4ca2:	ce 01       	movw	r24, r28
    4ca4:	01 96       	adiw	r24, 0x01	; 1
    4ca6:	9d de       	rcall	.-710    	; 0x49e2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    4ca8:	81 30       	cpi	r24, 0x01	; 1
    4caa:	91 05       	cpc	r25, r1
    4cac:	c1 f4       	brne	.+48     	; 0x4cde <_ZN14EthernetClient7connectEPKcj+0x96>
    4cae:	d8 01       	movw	r26, r16
    4cb0:	ed 91       	ld	r30, X+
    4cb2:	fc 91       	ld	r31, X
    4cb4:	06 84       	ldd	r0, Z+14	; 0x0e
    4cb6:	f7 85       	ldd	r31, Z+15	; 0x0f
    4cb8:	e0 2d       	mov	r30, r0
    4cba:	80 ec       	ldi	r24, 0xC0	; 192
    4cbc:	99 e0       	ldi	r25, 0x09	; 9
    4cbe:	9d a3       	std	Y+37, r25	; 0x25
    4cc0:	8c a3       	std	Y+36, r24	; 0x24
    4cc2:	8c a5       	ldd	r24, Y+44	; 0x2c
    4cc4:	9d a5       	ldd	r25, Y+45	; 0x2d
    4cc6:	ae a5       	ldd	r26, Y+46	; 0x2e
    4cc8:	bf a5       	ldd	r27, Y+47	; 0x2f
    4cca:	8e a3       	std	Y+38, r24	; 0x26
    4ccc:	9f a3       	std	Y+39, r25	; 0x27
    4cce:	a8 a7       	std	Y+40, r26	; 0x28
    4cd0:	b9 a7       	std	Y+41, r27	; 0x29
    4cd2:	a7 01       	movw	r20, r14
    4cd4:	be 01       	movw	r22, r28
    4cd6:	6c 5d       	subi	r22, 0xDC	; 220
    4cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cda:	c8 01       	movw	r24, r16
    4cdc:	09 95       	icall
    4cde:	af 96       	adiw	r28, 0x2f	; 47
    4ce0:	0f b6       	in	r0, 0x3f	; 63
    4ce2:	f8 94       	cli
    4ce4:	de bf       	out	0x3e, r29	; 62
    4ce6:	0f be       	out	0x3f, r0	; 63
    4ce8:	cd bf       	out	0x3d, r28	; 61
    4cea:	df 91       	pop	r29
    4cec:	cf 91       	pop	r28
    4cee:	1f 91       	pop	r17
    4cf0:	0f 91       	pop	r16
    4cf2:	ff 90       	pop	r15
    4cf4:	ef 90       	pop	r14
    4cf6:	df 90       	pop	r13
    4cf8:	cf 90       	pop	r12
    4cfa:	08 95       	ret

00004cfc <_ZN14EthernetClient5writeEPKhj>:
    4cfc:	0f 93       	push	r16
    4cfe:	1f 93       	push	r17
    4d00:	cf 93       	push	r28
    4d02:	df 93       	push	r29
    4d04:	8c 01       	movw	r16, r24
    4d06:	d4 2f       	mov	r29, r20
    4d08:	c5 2f       	mov	r28, r21
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	84 85       	ldd	r24, Z+12	; 0x0c
    4d0e:	88 30       	cpi	r24, 0x08	; 8
    4d10:	41 f4       	brne	.+16     	; 0x4d22 <_ZN14EthernetClient5writeEPKhj+0x26>
    4d12:	81 e0       	ldi	r24, 0x01	; 1
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	f8 01       	movw	r30, r16
    4d18:	93 83       	std	Z+3, r25	; 0x03
    4d1a:	82 83       	std	Z+2, r24	; 0x02
    4d1c:	80 e0       	ldi	r24, 0x00	; 0
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	05 c0       	rjmp	.+10     	; 0x4d2c <_ZN14EthernetClient5writeEPKhj+0x30>
    4d22:	cf d3       	rcall	.+1950   	; 0x54c2 <_Z4sendhPKhj>
    4d24:	89 2b       	or	r24, r25
    4d26:	a9 f3       	breq	.-22     	; 0x4d12 <_ZN14EthernetClient5writeEPKhj+0x16>
    4d28:	8d 2f       	mov	r24, r29
    4d2a:	9c 2f       	mov	r25, r28
    4d2c:	df 91       	pop	r29
    4d2e:	cf 91       	pop	r28
    4d30:	1f 91       	pop	r17
    4d32:	0f 91       	pop	r16
    4d34:	08 95       	ret

00004d36 <_ZN14EthernetClient9availableEv>:
    4d36:	fc 01       	movw	r30, r24
    4d38:	64 85       	ldd	r22, Z+12	; 0x0c
    4d3a:	68 30       	cpi	r22, 0x08	; 8
    4d3c:	19 f0       	breq	.+6      	; 0x4d44 <_ZN14EthernetClient9availableEv+0xe>
    4d3e:	85 eb       	ldi	r24, 0xB5	; 181
    4d40:	9b e0       	ldi	r25, 0x0B	; 11
    4d42:	d0 c5       	rjmp	.+2976   	; 0x58e4 <_ZN10W5500Class17getRXReceivedSizeEh>
    4d44:	80 e0       	ldi	r24, 0x00	; 0
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	08 95       	ret

00004d4a <_ZN14EthernetClient4readEv>:
    4d4a:	cf 93       	push	r28
    4d4c:	df 93       	push	r29
    4d4e:	1f 92       	push	r1
    4d50:	cd b7       	in	r28, 0x3d	; 61
    4d52:	de b7       	in	r29, 0x3e	; 62
    4d54:	41 e0       	ldi	r20, 0x01	; 1
    4d56:	50 e0       	ldi	r21, 0x00	; 0
    4d58:	be 01       	movw	r22, r28
    4d5a:	6f 5f       	subi	r22, 0xFF	; 255
    4d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d5e:	fc 01       	movw	r30, r24
    4d60:	84 85       	ldd	r24, Z+12	; 0x0c
    4d62:	f7 d3       	rcall	.+2030   	; 0x5552 <_Z4recvhPhi>
    4d64:	18 16       	cp	r1, r24
    4d66:	19 06       	cpc	r1, r25
    4d68:	1c f4       	brge	.+6      	; 0x4d70 <_ZN14EthernetClient4readEv+0x26>
    4d6a:	89 81       	ldd	r24, Y+1	; 0x01
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	02 c0       	rjmp	.+4      	; 0x4d74 <_ZN14EthernetClient4readEv+0x2a>
    4d70:	8f ef       	ldi	r24, 0xFF	; 255
    4d72:	9f ef       	ldi	r25, 0xFF	; 255
    4d74:	0f 90       	pop	r0
    4d76:	df 91       	pop	r29
    4d78:	cf 91       	pop	r28
    4d7a:	08 95       	ret

00004d7c <_ZN14EthernetClient4readEPhj>:
    4d7c:	fc 01       	movw	r30, r24
    4d7e:	84 85       	ldd	r24, Z+12	; 0x0c
    4d80:	e8 c3       	rjmp	.+2000   	; 0x5552 <_Z4recvhPhi>

00004d82 <_ZN14EthernetClient4peekEv>:
    4d82:	0f 93       	push	r16
    4d84:	1f 93       	push	r17
    4d86:	cf 93       	push	r28
    4d88:	df 93       	push	r29
    4d8a:	1f 92       	push	r1
    4d8c:	cd b7       	in	r28, 0x3d	; 61
    4d8e:	de b7       	in	r29, 0x3e	; 62
    4d90:	8c 01       	movw	r16, r24
    4d92:	dc 01       	movw	r26, r24
    4d94:	ed 91       	ld	r30, X+
    4d96:	fc 91       	ld	r31, X
    4d98:	00 84       	ldd	r0, Z+8	; 0x08
    4d9a:	f1 85       	ldd	r31, Z+9	; 0x09
    4d9c:	e0 2d       	mov	r30, r0
    4d9e:	09 95       	icall
    4da0:	89 2b       	or	r24, r25
    4da2:	49 f0       	breq	.+18     	; 0x4db6 <_ZN14EthernetClient4peekEv+0x34>
    4da4:	be 01       	movw	r22, r28
    4da6:	6f 5f       	subi	r22, 0xFF	; 255
    4da8:	7f 4f       	sbci	r23, 0xFF	; 255
    4daa:	f8 01       	movw	r30, r16
    4dac:	84 85       	ldd	r24, Z+12	; 0x0c
    4dae:	12 d4       	rcall	.+2084   	; 0x55d4 <_Z4peekhPh>
    4db0:	89 81       	ldd	r24, Y+1	; 0x01
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	02 c0       	rjmp	.+4      	; 0x4dba <_ZN14EthernetClient4peekEv+0x38>
    4db6:	8f ef       	ldi	r24, 0xFF	; 255
    4db8:	9f ef       	ldi	r25, 0xFF	; 255
    4dba:	0f 90       	pop	r0
    4dbc:	df 91       	pop	r29
    4dbe:	cf 91       	pop	r28
    4dc0:	1f 91       	pop	r17
    4dc2:	0f 91       	pop	r16
    4dc4:	08 95       	ret

00004dc6 <_ZN14EthernetClient5flushEv>:
    4dc6:	fc 01       	movw	r30, r24
    4dc8:	84 85       	ldd	r24, Z+12	; 0x0c
    4dca:	11 c4       	rjmp	.+2082   	; 0x55ee <_Z5flushh>

00004dcc <_ZN14EthernetClientC1Ev>:
    4dcc:	fc 01       	movw	r30, r24
    4dce:	13 82       	std	Z+3, r1	; 0x03
    4dd0:	12 82       	std	Z+2, r1	; 0x02
    4dd2:	88 ee       	ldi	r24, 0xE8	; 232
    4dd4:	93 e0       	ldi	r25, 0x03	; 3
    4dd6:	a0 e0       	ldi	r26, 0x00	; 0
    4dd8:	b0 e0       	ldi	r27, 0x00	; 0
    4dda:	84 83       	std	Z+4, r24	; 0x04
    4ddc:	95 83       	std	Z+5, r25	; 0x05
    4dde:	a6 83       	std	Z+6, r26	; 0x06
    4de0:	b7 83       	std	Z+7, r27	; 0x07
    4de2:	8c e3       	ldi	r24, 0x3C	; 60
    4de4:	99 e0       	ldi	r25, 0x09	; 9
    4de6:	91 83       	std	Z+1, r25	; 0x01
    4de8:	80 83       	st	Z, r24
    4dea:	88 e0       	ldi	r24, 0x08	; 8
    4dec:	84 87       	std	Z+12, r24	; 0x0c
    4dee:	08 95       	ret

00004df0 <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    4df0:	fc 01       	movw	r30, r24
    4df2:	64 85       	ldd	r22, Z+12	; 0x0c
    4df4:	68 30       	cpi	r22, 0x08	; 8
    4df6:	39 f0       	breq	.+14     	; 0x4e06 <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    4df8:	62 95       	swap	r22
    4dfa:	66 0f       	add	r22, r22
    4dfc:	60 7e       	andi	r22, 0xE0	; 224
    4dfe:	68 5f       	subi	r22, 0xF8	; 248
    4e00:	83 e0       	ldi	r24, 0x03	; 3
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	df c4       	rjmp	.+2494   	; 0x57c4 <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    4e06:	80 e0       	ldi	r24, 0x00	; 0
    4e08:	08 95       	ret

00004e0a <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    4e0a:	cf 93       	push	r28
    4e0c:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    4e0e:	fc 01       	movw	r30, r24
    4e10:	24 85       	ldd	r18, Z+12	; 0x0c
    4e12:	28 30       	cpi	r18, 0x08	; 8
    4e14:	c9 f0       	breq	.+50     	; 0x4e48 <_ZN14EthernetClient9connectedEv+0x3e>
    4e16:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    4e18:	eb df       	rcall	.-42     	; 0x4df0 <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    4e1a:	84 31       	cpi	r24, 0x14	; 20
    4e1c:	81 f0       	breq	.+32     	; 0x4e3e <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    4e1e:	88 23       	and	r24, r24
    4e20:	71 f0       	breq	.+28     	; 0x4e3e <_ZN14EthernetClient9connectedEv+0x34>
    4e22:	88 31       	cpi	r24, 0x18	; 24
    4e24:	61 f0       	breq	.+24     	; 0x4e3e <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    4e26:	8c 31       	cpi	r24, 0x1C	; 28
    4e28:	61 f4       	brne	.+24     	; 0x4e42 <_ZN14EthernetClient9connectedEv+0x38>
    4e2a:	e8 81       	ld	r30, Y
    4e2c:	f9 81       	ldd	r31, Y+1	; 0x01
    4e2e:	00 84       	ldd	r0, Z+8	; 0x08
    4e30:	f1 85       	ldd	r31, Z+9	; 0x09
    4e32:	e0 2d       	mov	r30, r0
    4e34:	ce 01       	movw	r24, r28
    4e36:	09 95       	icall
    4e38:	21 e0       	ldi	r18, 0x01	; 1
    4e3a:	89 2b       	or	r24, r25
    4e3c:	19 f4       	brne	.+6      	; 0x4e44 <_ZN14EthernetClient9connectedEv+0x3a>
    4e3e:	20 e0       	ldi	r18, 0x00	; 0
    4e40:	01 c0       	rjmp	.+2      	; 0x4e44 <_ZN14EthernetClient9connectedEv+0x3a>
    4e42:	21 e0       	ldi	r18, 0x01	; 1
    4e44:	82 2f       	mov	r24, r18
    4e46:	01 c0       	rjmp	.+2      	; 0x4e4a <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    4e48:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    4e4a:	df 91       	pop	r29
    4e4c:	cf 91       	pop	r28
    4e4e:	08 95       	ret

00004e50 <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    4e50:	cf 92       	push	r12
    4e52:	df 92       	push	r13
    4e54:	ef 92       	push	r14
    4e56:	ff 92       	push	r15
    4e58:	cf 93       	push	r28
    4e5a:	df 93       	push	r29
    4e5c:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    4e5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e60:	88 30       	cpi	r24, 0x08	; 8
    4e62:	69 f1       	breq	.+90     	; 0x4ebe <_ZN14EthernetClient4stopEv+0x6e>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    4e64:	29 d3       	rcall	.+1618   	; 0x54b8 <_Z10disconnecth>
  unsigned long start = millis();
    4e66:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <millis>
    4e6a:	6b 01       	movw	r12, r22
    4e6c:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    4e6e:	ce 01       	movw	r24, r28
    4e70:	bf df       	rcall	.-130    	; 0x4df0 <_ZN14EthernetClient6statusEv>
    4e72:	88 23       	and	r24, r24
    4e74:	a1 f0       	breq	.+40     	; 0x4e9e <_ZN14EthernetClient4stopEv+0x4e>
    4e76:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <millis>
    4e7a:	dc 01       	movw	r26, r24
    4e7c:	cb 01       	movw	r24, r22
    4e7e:	8c 19       	sub	r24, r12
    4e80:	9d 09       	sbc	r25, r13
    4e82:	ae 09       	sbc	r26, r14
    4e84:	bf 09       	sbc	r27, r15
    4e86:	88 3e       	cpi	r24, 0xE8	; 232
    4e88:	93 40       	sbci	r25, 0x03	; 3
    4e8a:	a1 05       	cpc	r26, r1
    4e8c:	b1 05       	cpc	r27, r1
    4e8e:	38 f4       	brcc	.+14     	; 0x4e9e <_ZN14EthernetClient4stopEv+0x4e>
    delay(1);
    4e90:	61 e0       	ldi	r22, 0x01	; 1
    4e92:	70 e0       	ldi	r23, 0x00	; 0
    4e94:	80 e0       	ldi	r24, 0x00	; 0
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    4e9c:	e8 cf       	rjmp	.-48     	; 0x4e6e <_ZN14EthernetClient4stopEv+0x1e>
    4e9e:	ce 01       	movw	r24, r28
    4ea0:	a7 df       	rcall	.-178    	; 0x4df0 <_ZN14EthernetClient6statusEv>
    4ea2:	88 23       	and	r24, r24
    close(_sock);
    4ea4:	11 f0       	breq	.+4      	; 0x4eaa <_ZN14EthernetClient4stopEv+0x5a>
    4ea6:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ea8:	96 d2       	rcall	.+1324   	; 0x53d6 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    4eaa:	ec 85       	ldd	r30, Y+12	; 0x0c
    4eac:	f0 e0       	ldi	r31, 0x00	; 0
    4eae:	ee 0f       	add	r30, r30
    4eb0:	ff 1f       	adc	r31, r31
    4eb2:	e8 57       	subi	r30, 0x78	; 120
    4eb4:	f4 4f       	sbci	r31, 0xF4	; 244
    4eb6:	11 82       	std	Z+1, r1	; 0x01
    4eb8:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    4eba:	88 e0       	ldi	r24, 0x08	; 8
    4ebc:	8c 87       	std	Y+12, r24	; 0x0c
}
    4ebe:	df 91       	pop	r29
    4ec0:	cf 91       	pop	r28
    4ec2:	ff 90       	pop	r15
    4ec4:	ef 90       	pop	r14
    4ec6:	df 90       	pop	r13
    4ec8:	cf 90       	pop	r12
    4eca:	08 95       	ret

00004ecc <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    4ecc:	cf 92       	push	r12
    4ece:	df 92       	push	r13
    4ed0:	ff 92       	push	r15
    4ed2:	0f 93       	push	r16
    4ed4:	1f 93       	push	r17
    4ed6:	cf 93       	push	r28
    4ed8:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    4eda:	fc 01       	movw	r30, r24
    4edc:	24 85       	ldd	r18, Z+12	; 0x0c
    4ede:	28 30       	cpi	r18, 0x08	; 8
    4ee0:	c1 f5       	brne	.+112    	; 0x4f52 <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    4ee2:	6a 01       	movw	r12, r20
    4ee4:	8b 01       	movw	r16, r22
    4ee6:	ec 01       	movw	r28, r24
    4ee8:	f1 2c       	mov	r15, r1
    4eea:	6f 2d       	mov	r22, r15
    4eec:	62 95       	swap	r22
    4eee:	66 0f       	add	r22, r22
    4ef0:	60 7e       	andi	r22, 0xE0	; 224
    4ef2:	68 5f       	subi	r22, 0xF8	; 248
    4ef4:	83 e0       	ldi	r24, 0x03	; 3
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	65 d4       	rcall	.+2250   	; 0x57c4 <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    4efa:	81 11       	cpse	r24, r1
    4efc:	02 c0       	rjmp	.+4      	; 0x4f02 <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    4efe:	fc 86       	std	Y+12, r15	; 0x0c
    4f00:	07 c0       	rjmp	.+14     	; 0x4f10 <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    4f02:	8b 7f       	andi	r24, 0xFB	; 251
    4f04:	88 31       	cpi	r24, 0x18	; 24
    4f06:	d9 f3       	breq	.-10     	; 0x4efe <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    4f08:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    4f0a:	f8 e0       	ldi	r31, 0x08	; 8
    4f0c:	ff 12       	cpse	r15, r31
    4f0e:	ed cf       	rjmp	.-38     	; 0x4eea <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    4f10:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f12:	88 30       	cpi	r24, 0x08	; 8
    4f14:	f1 f0       	breq	.+60     	; 0x4f52 <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    4f16:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <_ZN14EthernetClient8_srcportE>
    4f1a:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <_ZN14EthernetClient8_srcportE+0x1>
    4f1e:	2f 5f       	subi	r18, 0xFF	; 255
    4f20:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    4f22:	11 f4       	brne	.+4      	; 0x4f28 <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    4f24:	20 e0       	ldi	r18, 0x00	; 0
    4f26:	34 e0       	ldi	r19, 0x04	; 4
    4f28:	30 93 66 01 	sts	0x0166, r19	; 0x800166 <_ZN14EthernetClient8_srcportE+0x1>
    4f2c:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    4f30:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <_ZN14EthernetClient8_srcportE>
    4f34:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <_ZN14EthernetClient8_srcportE+0x1>
    4f38:	20 e0       	ldi	r18, 0x00	; 0
    4f3a:	61 e0       	ldi	r22, 0x01	; 1
    4f3c:	57 d2       	rcall	.+1198   	; 0x53ec <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    4f3e:	b8 01       	movw	r22, r16
    4f40:	6e 5f       	subi	r22, 0xFE	; 254
    4f42:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    4f44:	a6 01       	movw	r20, r12
    4f46:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f48:	84 d2       	rcall	.+1288   	; 0x5452 <_Z7connecthPhj>
    4f4a:	81 11       	cpse	r24, r1
    4f4c:	05 c0       	rjmp	.+10     	; 0x4f58 <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    4f4e:	88 e0       	ldi	r24, 0x08	; 8
    4f50:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    4f52:	80 e0       	ldi	r24, 0x00	; 0
    4f54:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    4f56:	0f c0       	rjmp	.+30     	; 0x4f76 <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    4f58:	ce 01       	movw	r24, r28
    4f5a:	4a df       	rcall	.-364    	; 0x4df0 <_ZN14EthernetClient6statusEv>
    4f5c:	87 31       	cpi	r24, 0x17	; 23
    4f5e:	49 f0       	breq	.+18     	; 0x4f72 <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    4f60:	61 e0       	ldi	r22, 0x01	; 1
    4f62:	70 e0       	ldi	r23, 0x00	; 0
    4f64:	80 e0       	ldi	r24, 0x00	; 0
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <delay>
    if (status() == SnSR::CLOSED) {
    4f6c:	ce 01       	movw	r24, r28
    4f6e:	40 df       	rcall	.-384    	; 0x4df0 <_ZN14EthernetClient6statusEv>
    4f70:	ec cf       	rjmp	.-40     	; 0x4f4a <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    4f72:	81 e0       	ldi	r24, 0x01	; 1
    4f74:	90 e0       	ldi	r25, 0x00	; 0
}
    4f76:	df 91       	pop	r29
    4f78:	cf 91       	pop	r28
    4f7a:	1f 91       	pop	r17
    4f7c:	0f 91       	pop	r16
    4f7e:	ff 90       	pop	r15
    4f80:	df 90       	pop	r13
    4f82:	cf 90       	pop	r12
    4f84:	08 95       	ret

00004f86 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    4f86:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4f88:	00 e0       	ldi	r16, 0x00	; 0
    4f8a:	20 e0       	ldi	r18, 0x00	; 0
    4f8c:	40 e0       	ldi	r20, 0x00	; 0
    4f8e:	60 e0       	ldi	r22, 0x00	; 0
    4f90:	8e e9       	ldi	r24, 0x9E	; 158
    4f92:	9b e0       	ldi	r25, 0x0B	; 11
    4f94:	0e 94 29 36 	call	0x6c52	; 0x6c52 <_ZN9IPAddressC1Ehhhh>
    4f98:	0f 91       	pop	r16
    4f9a:	08 95       	ret

00004f9c <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    4f9c:	0f 93       	push	r16
    4f9e:	00 e0       	ldi	r16, 0x00	; 0
    4fa0:	20 e0       	ldi	r18, 0x00	; 0
    4fa2:	40 e0       	ldi	r20, 0x00	; 0
    4fa4:	60 e0       	ldi	r22, 0x00	; 0
    4fa6:	84 ea       	ldi	r24, 0xA4	; 164
    4fa8:	9b e0       	ldi	r25, 0x0B	; 11
    4faa:	0e 94 29 36 	call	0x6c52	; 0x6c52 <_ZN9IPAddressC1Ehhhh>
    4fae:	0f 91       	pop	r16
    4fb0:	08 95       	ret

00004fb2 <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    4fb2:	80 e0       	ldi	r24, 0x00	; 0
    4fb4:	08 95       	ret

00004fb6 <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    4fb6:	dc 01       	movw	r26, r24
    4fb8:	ed 91       	ld	r30, X+
    4fba:	fc 91       	ld	r31, X
    4fbc:	04 8c       	ldd	r0, Z+28	; 0x1c
    4fbe:	f5 8d       	ldd	r31, Z+29	; 0x1d
    4fc0:	e0 2d       	mov	r30, r0
    4fc2:	09 94       	ijmp

00004fc4 <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4fc4:	20 ec       	ldi	r18, 0xC0	; 192
    4fc6:	39 e0       	ldi	r19, 0x09	; 9
    4fc8:	fc 01       	movw	r30, r24
    4fca:	31 83       	std	Z+1, r19	; 0x01
    4fcc:	20 83       	st	Z, r18
    4fce:	fb 01       	movw	r30, r22
    4fd0:	41 89       	ldd	r20, Z+17	; 0x11
    4fd2:	52 89       	ldd	r21, Z+18	; 0x12
    4fd4:	63 89       	ldd	r22, Z+19	; 0x13
    4fd6:	74 89       	ldd	r23, Z+20	; 0x14
    4fd8:	fc 01       	movw	r30, r24
    4fda:	42 83       	std	Z+2, r20	; 0x02
    4fdc:	53 83       	std	Z+3, r21	; 0x03
    4fde:	64 83       	std	Z+4, r22	; 0x04
    4fe0:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    4fe2:	08 95       	ret

00004fe4 <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    4fe4:	fc 01       	movw	r30, r24
    4fe6:	85 89       	ldd	r24, Z+21	; 0x15
    4fe8:	96 89       	ldd	r25, Z+22	; 0x16
    4fea:	08 95       	ret

00004fec <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    4fec:	fc 01       	movw	r30, r24
    4fee:	81 8d       	ldd	r24, Z+25	; 0x19
    4ff0:	92 8d       	ldd	r25, Z+26	; 0x1a
    4ff2:	08 95       	ret

00004ff4 <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    4ff4:	cf 93       	push	r28
    4ff6:	df 93       	push	r29
    4ff8:	1f 92       	push	r1
    4ffa:	cd b7       	in	r28, 0x3d	; 61
    4ffc:	de b7       	in	r29, 0x3e	; 62
    4ffe:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    5000:	dc 01       	movw	r26, r24
    5002:	ed 91       	ld	r30, X+
    5004:	fc 91       	ld	r31, X
    5006:	02 80       	ldd	r0, Z+2	; 0x02
    5008:	f3 81       	ldd	r31, Z+3	; 0x03
    500a:	e0 2d       	mov	r30, r0
    500c:	41 e0       	ldi	r20, 0x01	; 1
    500e:	50 e0       	ldi	r21, 0x00	; 0
    5010:	be 01       	movw	r22, r28
    5012:	6f 5f       	subi	r22, 0xFF	; 255
    5014:	7f 4f       	sbci	r23, 0xFF	; 255
    5016:	09 95       	icall
}
    5018:	0f 90       	pop	r0
    501a:	df 91       	pop	r29
    501c:	cf 91       	pop	r28
    501e:	08 95       	ret

00005020 <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    5020:	cf 93       	push	r28
    5022:	df 93       	push	r29
    5024:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    5026:	89 8d       	ldd	r24, Y+25	; 0x19
    5028:	9a 8d       	ldd	r25, Y+26	; 0x1a
    502a:	89 2b       	or	r24, r25
    502c:	41 f0       	breq	.+16     	; 0x503e <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    502e:	e8 81       	ld	r30, Y
    5030:	f9 81       	ldd	r31, Y+1	; 0x01
    5032:	02 84       	ldd	r0, Z+10	; 0x0a
    5034:	f3 85       	ldd	r31, Z+11	; 0x0b
    5036:	e0 2d       	mov	r30, r0
    5038:	ce 01       	movw	r24, r28
    503a:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    503c:	f4 cf       	rjmp	.-24     	; 0x5026 <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    503e:	df 91       	pop	r29
    5040:	cf 91       	pop	r28
    5042:	08 95       	ret

00005044 <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    5044:	cf 93       	push	r28
    5046:	df 93       	push	r29
    5048:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    504a:	8c 85       	ldd	r24, Y+12	; 0x0c
    504c:	88 30       	cpi	r24, 0x08	; 8
    504e:	59 f0       	breq	.+22     	; 0x5066 <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    5050:	c2 d1       	rcall	.+900    	; 0x53d6 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    5052:	ec 85       	ldd	r30, Y+12	; 0x0c
    5054:	f0 e0       	ldi	r31, 0x00	; 0
    5056:	ee 0f       	add	r30, r30
    5058:	ff 1f       	adc	r31, r31
    505a:	e8 57       	subi	r30, 0x78	; 120
    505c:	f4 4f       	sbci	r31, 0xF4	; 244
    505e:	11 82       	std	Z+1, r1	; 0x01
    5060:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    5062:	88 e0       	ldi	r24, 0x08	; 8
    5064:	8c 87       	std	Y+12, r24	; 0x0c
}
    5066:	df 91       	pop	r29
    5068:	cf 91       	pop	r28
    506a:	08 95       	ret

0000506c <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    506c:	fc 01       	movw	r30, r24
    506e:	10 8e       	std	Z+24, r1	; 0x18
    5070:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    5072:	6e 5f       	subi	r22, 0xFE	; 254
    5074:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    5076:	84 85       	ldd	r24, Z+12	; 0x0c
    5078:	e6 c2       	rjmp	.+1484   	; 0x5646 <_Z8startUDPhPhj>

0000507a <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    507a:	fc 01       	movw	r30, r24
    507c:	84 85       	ldd	r24, Z+12	; 0x0c
    507e:	06 c3       	rjmp	.+1548   	; 0x568c <_Z7sendUDPh>

00005080 <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    5080:	cf 93       	push	r28
    5082:	df 93       	push	r29
    5084:	ec 01       	movw	r28, r24
    5086:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    5088:	8f 89       	ldd	r24, Y+23	; 0x17
    508a:	98 8d       	ldd	r25, Y+24	; 0x18
    508c:	ab 01       	movw	r20, r22
    508e:	bc 01       	movw	r22, r24
    5090:	8c 85       	ldd	r24, Y+12	; 0x0c
    5092:	ae d2       	rcall	.+1372   	; 0x55f0 <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    5094:	2f 89       	ldd	r18, Y+23	; 0x17
    5096:	38 8d       	ldd	r19, Y+24	; 0x18
    5098:	28 0f       	add	r18, r24
    509a:	39 1f       	adc	r19, r25
    509c:	38 8f       	std	Y+24, r19	; 0x18
    509e:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    50a0:	df 91       	pop	r29
    50a2:	cf 91       	pop	r28
    50a4:	08 95       	ret

000050a6 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    50a6:	0f 93       	push	r16
    50a8:	1f 93       	push	r17
    50aa:	cf 93       	push	r28
    50ac:	df 93       	push	r29
    50ae:	1f 92       	push	r1
    50b0:	cd b7       	in	r28, 0x3d	; 61
    50b2:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    50b4:	fc 01       	movw	r30, r24
    50b6:	21 8d       	ldd	r18, Z+25	; 0x19
    50b8:	32 8d       	ldd	r19, Z+26	; 0x1a
    50ba:	23 2b       	or	r18, r19
    50bc:	59 f0       	breq	.+22     	; 0x50d4 <_ZN11EthernetUDP4readEv+0x2e>
    50be:	8c 01       	movw	r16, r24
    50c0:	41 e0       	ldi	r20, 0x01	; 1
    50c2:	50 e0       	ldi	r21, 0x00	; 0
    50c4:	be 01       	movw	r22, r28
    50c6:	6f 5f       	subi	r22, 0xFF	; 255
    50c8:	7f 4f       	sbci	r23, 0xFF	; 255
    50ca:	84 85       	ldd	r24, Z+12	; 0x0c
    50cc:	42 d2       	rcall	.+1156   	; 0x5552 <_Z4recvhPhi>
    50ce:	18 16       	cp	r1, r24
    50d0:	19 06       	cpc	r1, r25
    50d2:	1c f0       	brlt	.+6      	; 0x50da <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    50d4:	8f ef       	ldi	r24, 0xFF	; 255
    50d6:	9f ef       	ldi	r25, 0xFF	; 255
    50d8:	08 c0       	rjmp	.+16     	; 0x50ea <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    50da:	f8 01       	movw	r30, r16
    50dc:	81 8d       	ldd	r24, Z+25	; 0x19
    50de:	92 8d       	ldd	r25, Z+26	; 0x1a
    50e0:	01 97       	sbiw	r24, 0x01	; 1
    50e2:	92 8f       	std	Z+26, r25	; 0x1a
    50e4:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    50e6:	89 81       	ldd	r24, Y+1	; 0x01
    50e8:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    50ea:	0f 90       	pop	r0
    50ec:	df 91       	pop	r29
    50ee:	cf 91       	pop	r28
    50f0:	1f 91       	pop	r17
    50f2:	0f 91       	pop	r16
    50f4:	08 95       	ret

000050f6 <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    50f6:	cf 93       	push	r28
    50f8:	df 93       	push	r29

  if (_remaining > 0)
    50fa:	fc 01       	movw	r30, r24
    50fc:	21 8d       	ldd	r18, Z+25	; 0x19
    50fe:	32 8d       	ldd	r19, Z+26	; 0x1a
    5100:	21 15       	cp	r18, r1
    5102:	31 05       	cpc	r19, r1
    5104:	19 f4       	brne	.+6      	; 0x510c <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    5106:	8f ef       	ldi	r24, 0xFF	; 255
    5108:	9f ef       	ldi	r25, 0xFF	; 255
    510a:	10 c0       	rjmp	.+32     	; 0x512c <_ZN11EthernetUDP4readEPhj+0x36>
    510c:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    510e:	42 17       	cp	r20, r18
    5110:	53 07       	cpc	r21, r19
    5112:	08 f0       	brcs	.+2      	; 0x5116 <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    5114:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    5116:	8c 85       	ldd	r24, Y+12	; 0x0c
    5118:	1c d2       	rcall	.+1080   	; 0x5552 <_Z4recvhPhi>
    }

    if (got > 0)
    511a:	18 16       	cp	r1, r24
    511c:	19 06       	cpc	r1, r25
    511e:	9c f7       	brge	.-26     	; 0x5106 <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    5120:	29 8d       	ldd	r18, Y+25	; 0x19
    5122:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5124:	28 1b       	sub	r18, r24
    5126:	39 0b       	sbc	r19, r25
    5128:	3a 8f       	std	Y+26, r19	; 0x1a
    512a:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    512c:	df 91       	pop	r29
    512e:	cf 91       	pop	r28
    5130:	08 95       	ret

00005132 <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    5132:	cf 93       	push	r28
    5134:	df 93       	push	r29
    5136:	1f 92       	push	r1
    5138:	cd b7       	in	r28, 0x3d	; 61
    513a:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    513c:	fc 01       	movw	r30, r24
    513e:	21 8d       	ldd	r18, Z+25	; 0x19
    5140:	32 8d       	ldd	r19, Z+26	; 0x1a
    5142:	23 2b       	or	r18, r19
    5144:	41 f0       	breq	.+16     	; 0x5156 <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    5146:	be 01       	movw	r22, r28
    5148:	6f 5f       	subi	r22, 0xFF	; 255
    514a:	7f 4f       	sbci	r23, 0xFF	; 255
    514c:	84 85       	ldd	r24, Z+12	; 0x0c
    514e:	42 d2       	rcall	.+1156   	; 0x55d4 <_Z4peekhPh>
  return b;
    5150:	89 81       	ldd	r24, Y+1	; 0x01
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	02 c0       	rjmp	.+4      	; 0x515a <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    5156:	8f ef       	ldi	r24, 0xFF	; 255
    5158:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    515a:	0f 90       	pop	r0
    515c:	df 91       	pop	r29
    515e:	cf 91       	pop	r28
    5160:	08 95       	ret

00005162 <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    5162:	ef 92       	push	r14
    5164:	ff 92       	push	r15
    5166:	1f 93       	push	r17
    5168:	cf 93       	push	r28
    516a:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    516c:	fc 01       	movw	r30, r24
    516e:	24 85       	ldd	r18, Z+12	; 0x0c
    5170:	28 30       	cpi	r18, 0x08	; 8
    5172:	11 f0       	breq	.+4      	; 0x5178 <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    5174:	80 e0       	ldi	r24, 0x00	; 0
    5176:	20 c0       	rjmp	.+64     	; 0x51b8 <_ZN11EthernetUDP5beginEj+0x56>
    5178:	7b 01       	movw	r14, r22
    517a:	ec 01       	movw	r28, r24
    517c:	10 e0       	ldi	r17, 0x00	; 0
    517e:	61 2f       	mov	r22, r17
    5180:	62 95       	swap	r22
    5182:	66 0f       	add	r22, r22
    5184:	60 7e       	andi	r22, 0xE0	; 224
    5186:	68 5f       	subi	r22, 0xF8	; 248
    5188:	83 e0       	ldi	r24, 0x03	; 3
    518a:	90 e0       	ldi	r25, 0x00	; 0
    518c:	1b d3       	rcall	.+1590   	; 0x57c4 <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    518e:	81 11       	cpse	r24, r1
    5190:	02 c0       	rjmp	.+4      	; 0x5196 <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    5192:	1c 87       	std	Y+12, r17	; 0x0c
    5194:	05 c0       	rjmp	.+10     	; 0x51a0 <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    5196:	88 31       	cpi	r24, 0x18	; 24
    5198:	e1 f3       	breq	.-8      	; 0x5192 <_ZN11EthernetUDP5beginEj+0x30>
    519a:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    519c:	18 30       	cpi	r17, 0x08	; 8
    519e:	79 f7       	brne	.-34     	; 0x517e <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    51a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    51a2:	88 30       	cpi	r24, 0x08	; 8
    51a4:	39 f3       	breq	.-50     	; 0x5174 <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    51a6:	fe 86       	std	Y+14, r15	; 0x0e
    51a8:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    51aa:	1a 8e       	std	Y+26, r1	; 0x1a
    51ac:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    51ae:	20 e0       	ldi	r18, 0x00	; 0
    51b0:	a7 01       	movw	r20, r14
    51b2:	62 e0       	ldi	r22, 0x02	; 2
    51b4:	1b d1       	rcall	.+566    	; 0x53ec <_Z6sockethhjh>

  return 1;
    51b6:	81 e0       	ldi	r24, 0x01	; 1
}
    51b8:	df 91       	pop	r29
    51ba:	cf 91       	pop	r28
    51bc:	1f 91       	pop	r17
    51be:	ff 90       	pop	r15
    51c0:	ef 90       	pop	r14
    51c2:	08 95       	ret

000051c4 <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    51c4:	0f 93       	push	r16
    51c6:	1f 93       	push	r17
    51c8:	cf 93       	push	r28
    51ca:	df 93       	push	r29
    51cc:	cd b7       	in	r28, 0x3d	; 61
    51ce:	de b7       	in	r29, 0x3e	; 62
    51d0:	28 97       	sbiw	r28, 0x08	; 8
    51d2:	0f b6       	in	r0, 0x3f	; 63
    51d4:	f8 94       	cli
    51d6:	de bf       	out	0x3e, r29	; 62
    51d8:	0f be       	out	0x3f, r0	; 63
    51da:	cd bf       	out	0x3d, r28	; 61
    51dc:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    51de:	dc 01       	movw	r26, r24
    51e0:	ed 91       	ld	r30, X+
    51e2:	fc 91       	ld	r31, X
    51e4:	06 80       	ldd	r0, Z+6	; 0x06
    51e6:	f7 81       	ldd	r31, Z+7	; 0x07
    51e8:	e0 2d       	mov	r30, r0
    51ea:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    51ec:	f8 01       	movw	r30, r16
    51ee:	64 85       	ldd	r22, Z+12	; 0x0c
    51f0:	85 eb       	ldi	r24, 0xB5	; 181
    51f2:	9b e0       	ldi	r25, 0x0B	; 11
    51f4:	77 d3       	rcall	.+1774   	; 0x58e4 <_ZN10W5500Class17getRXReceivedSizeEh>
    51f6:	89 2b       	or	r24, r25
    51f8:	39 f1       	breq	.+78     	; 0x5248 <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    51fa:	48 e0       	ldi	r20, 0x08	; 8
    51fc:	50 e0       	ldi	r21, 0x00	; 0
    51fe:	be 01       	movw	r22, r28
    5200:	6f 5f       	subi	r22, 0xFF	; 255
    5202:	7f 4f       	sbci	r23, 0xFF	; 255
    5204:	d8 01       	movw	r26, r16
    5206:	1c 96       	adiw	r26, 0x0c	; 12
    5208:	8c 91       	ld	r24, X
    520a:	a3 d1       	rcall	.+838    	; 0x5552 <_Z4recvhPhi>
    if (ret > 0)
    520c:	18 16       	cp	r1, r24
    520e:	19 06       	cpc	r1, r25
    5210:	ec f4       	brge	.+58     	; 0x524c <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    5212:	be 01       	movw	r22, r28
    5214:	6f 5f       	subi	r22, 0xFF	; 255
    5216:	7f 4f       	sbci	r23, 0xFF	; 255
    5218:	c8 01       	movw	r24, r16
    521a:	0f 96       	adiw	r24, 0x0f	; 15
    521c:	0e 94 35 36 	call	0x6c6a	; 0x6c6a <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    5220:	8d 81       	ldd	r24, Y+5	; 0x05
    5222:	90 e0       	ldi	r25, 0x00	; 0
    5224:	98 2f       	mov	r25, r24
    5226:	88 27       	eor	r24, r24
    5228:	2e 81       	ldd	r18, Y+6	; 0x06
    522a:	82 0f       	add	r24, r18
    522c:	91 1d       	adc	r25, r1
    522e:	f8 01       	movw	r30, r16
    5230:	96 8b       	std	Z+22, r25	; 0x16
    5232:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    5234:	8f 81       	ldd	r24, Y+7	; 0x07
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	98 2f       	mov	r25, r24
    523a:	88 27       	eor	r24, r24
    523c:	28 85       	ldd	r18, Y+8	; 0x08
    523e:	82 0f       	add	r24, r18
    5240:	91 1d       	adc	r25, r1
    5242:	92 8f       	std	Z+26, r25	; 0x1a
    5244:	81 8f       	std	Z+25, r24	; 0x19
    5246:	02 c0       	rjmp	.+4      	; 0x524c <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    5248:	80 e0       	ldi	r24, 0x00	; 0
    524a:	90 e0       	ldi	r25, 0x00	; 0
}
    524c:	28 96       	adiw	r28, 0x08	; 8
    524e:	0f b6       	in	r0, 0x3f	; 63
    5250:	f8 94       	cli
    5252:	de bf       	out	0x3e, r29	; 62
    5254:	0f be       	out	0x3f, r0	; 63
    5256:	cd bf       	out	0x3d, r28	; 61
    5258:	df 91       	pop	r29
    525a:	cf 91       	pop	r28
    525c:	1f 91       	pop	r17
    525e:	0f 91       	pop	r16
    5260:	08 95       	ret

00005262 <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    5262:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5264:	13 82       	std	Z+3, r1	; 0x03
    5266:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5268:	88 ee       	ldi	r24, 0xE8	; 232
    526a:	93 e0       	ldi	r25, 0x03	; 3
    526c:	a0 e0       	ldi	r26, 0x00	; 0
    526e:	b0 e0       	ldi	r27, 0x00	; 0
    5270:	84 83       	std	Z+4, r24	; 0x04
    5272:	95 83       	std	Z+5, r25	; 0x05
    5274:	a6 83       	std	Z+6, r26	; 0x06
    5276:	b7 83       	std	Z+7, r27	; 0x07
    5278:	8e e5       	ldi	r24, 0x5E	; 94
    527a:	99 e0       	ldi	r25, 0x09	; 9
    527c:	91 83       	std	Z+1, r25	; 0x01
    527e:	80 83       	st	Z, r24
    5280:	88 e0       	ldi	r24, 0x08	; 8
    5282:	84 87       	std	Z+12, r24	; 0x0c
    5284:	cf 01       	movw	r24, r30
    5286:	0f 96       	adiw	r24, 0x0f	; 15
    5288:	0c 94 1f 36 	jmp	0x6c3e	; 0x6c3e <_ZN9IPAddressC1Ev>

0000528c <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    528c:	cf 92       	push	r12
    528e:	df 92       	push	r13
    5290:	ef 92       	push	r14
    5292:	ff 92       	push	r15
    5294:	0f 93       	push	r16
    5296:	1f 93       	push	r17
    5298:	cf 93       	push	r28
    529a:	df 93       	push	r29
    529c:	cd b7       	in	r28, 0x3d	; 61
    529e:	de b7       	in	r29, 0x3e	; 62
    52a0:	af 97       	sbiw	r28, 0x2f	; 47
    52a2:	0f b6       	in	r0, 0x3f	; 63
    52a4:	f8 94       	cli
    52a6:	de bf       	out	0x3e, r29	; 62
    52a8:	0f be       	out	0x3f, r0	; 63
    52aa:	cd bf       	out	0x3d, r28	; 61
    52ac:	8c 01       	movw	r16, r24
    52ae:	6b 01       	movw	r12, r22
    52b0:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    52b2:	ce 01       	movw	r24, r28
    52b4:	01 96       	adiw	r24, 0x01	; 1
    52b6:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <_ZN9IPAddressC1Ev>
    52ba:	ce 01       	movw	r24, r28
    52bc:	09 96       	adiw	r24, 0x09	; 9
    52be:	d1 df       	rcall	.-94     	; 0x5262 <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    52c0:	ce 01       	movw	r24, r28
    52c2:	8a 96       	adiw	r24, 0x2a	; 42
    52c4:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    52c8:	6b e7       	ldi	r22, 0x7B	; 123
    52ca:	7b e0       	ldi	r23, 0x0B	; 11
    52cc:	ce 01       	movw	r24, r28
    52ce:	84 96       	adiw	r24, 0x24	; 36
    52d0:	63 dc       	rcall	.-1850   	; 0x4b98 <_ZN13EthernetClass11dnsServerIPEv>
    52d2:	be 01       	movw	r22, r28
    52d4:	6c 5d       	subi	r22, 0xDC	; 220
    52d6:	7f 4f       	sbci	r23, 0xFF	; 255
    52d8:	ce 01       	movw	r24, r28
    52da:	01 96       	adiw	r24, 0x01	; 1
    52dc:	28 d9       	rcall	.-3504   	; 0x452e <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    52de:	ae 01       	movw	r20, r28
    52e0:	46 5d       	subi	r20, 0xD6	; 214
    52e2:	5f 4f       	sbci	r21, 0xFF	; 255
    52e4:	b6 01       	movw	r22, r12
    52e6:	ce 01       	movw	r24, r28
    52e8:	01 96       	adiw	r24, 0x01	; 1
    52ea:	7b db       	rcall	.-2314   	; 0x49e2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    52ec:	81 30       	cpi	r24, 0x01	; 1
    52ee:	91 05       	cpc	r25, r1
    52f0:	c1 f4       	brne	.+48     	; 0x5322 <_ZN11EthernetUDP11beginPacketEPKcj+0x96>
    return beginPacket(remote_addr, port);
    52f2:	d8 01       	movw	r26, r16
    52f4:	ed 91       	ld	r30, X+
    52f6:	fc 91       	ld	r31, X
    52f8:	04 88       	ldd	r0, Z+20	; 0x14
    52fa:	f5 89       	ldd	r31, Z+21	; 0x15
    52fc:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    52fe:	80 ec       	ldi	r24, 0xC0	; 192
    5300:	99 e0       	ldi	r25, 0x09	; 9
    5302:	9d a3       	std	Y+37, r25	; 0x25
    5304:	8c a3       	std	Y+36, r24	; 0x24
    5306:	8c a5       	ldd	r24, Y+44	; 0x2c
    5308:	9d a5       	ldd	r25, Y+45	; 0x2d
    530a:	ae a5       	ldd	r26, Y+46	; 0x2e
    530c:	bf a5       	ldd	r27, Y+47	; 0x2f
    530e:	8e a3       	std	Y+38, r24	; 0x26
    5310:	9f a3       	std	Y+39, r25	; 0x27
    5312:	a8 a7       	std	Y+40, r26	; 0x28
    5314:	b9 a7       	std	Y+41, r27	; 0x29
    5316:	a7 01       	movw	r20, r14
    5318:	be 01       	movw	r22, r28
    531a:	6c 5d       	subi	r22, 0xDC	; 220
    531c:	7f 4f       	sbci	r23, 0xFF	; 255
    531e:	c8 01       	movw	r24, r16
    5320:	09 95       	icall
  } else {
    return ret;
  }
}
    5322:	af 96       	adiw	r28, 0x2f	; 47
    5324:	0f b6       	in	r0, 0x3f	; 63
    5326:	f8 94       	cli
    5328:	de bf       	out	0x3e, r29	; 62
    532a:	0f be       	out	0x3f, r0	; 63
    532c:	cd bf       	out	0x3d, r28	; 61
    532e:	df 91       	pop	r29
    5330:	cf 91       	pop	r28
    5332:	1f 91       	pop	r17
    5334:	0f 91       	pop	r16
    5336:	ff 90       	pop	r15
    5338:	ef 90       	pop	r14
    533a:	df 90       	pop	r13
    533c:	cf 90       	pop	r12
    533e:	08 95       	ret

00005340 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    5340:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    5342:	00 e0       	ldi	r16, 0x00	; 0
    5344:	20 e0       	ldi	r18, 0x00	; 0
    5346:	40 e0       	ldi	r20, 0x00	; 0
    5348:	60 e0       	ldi	r22, 0x00	; 0
    534a:	8a ea       	ldi	r24, 0xAA	; 170
    534c:	9b e0       	ldi	r25, 0x0B	; 11
    534e:	0e 94 29 36 	call	0x6c52	; 0x6c52 <_ZN9IPAddressC1Ehhhh>
    5352:	0f 91       	pop	r16
    5354:	08 95       	ret

00005356 <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    5356:	ab 01       	movw	r20, r22
    5358:	82 95       	swap	r24
    535a:	88 0f       	add	r24, r24
    535c:	80 7e       	andi	r24, 0xE0	; 224
    535e:	6c e0       	ldi	r22, 0x0C	; 12
    5360:	68 0f       	add	r22, r24
    5362:	24 e0       	ldi	r18, 0x04	; 4
    5364:	30 e0       	ldi	r19, 0x00	; 0
    5366:	8c e0       	ldi	r24, 0x0C	; 12
    5368:	90 e0       	ldi	r25, 0x00	; 0
    536a:	00 c2       	rjmp	.+1024   	; 0x576c <_ZN10W5500Class5writeEjhPKhj>

0000536c <_ZN10W5500Class6readSnEhj>:
    536c:	9b 01       	movw	r18, r22
    536e:	82 95       	swap	r24
    5370:	88 0f       	add	r24, r24
    5372:	80 7e       	andi	r24, 0xE0	; 224
    5374:	68 e0       	ldi	r22, 0x08	; 8
    5376:	68 0f       	add	r22, r24
    5378:	c9 01       	movw	r24, r18
    537a:	24 c2       	rjmp	.+1096   	; 0x57c4 <_ZN10W5500Class4readEjh>

0000537c <_ZN10W5500Class8readSnIREh>:
    537c:	62 e0       	ldi	r22, 0x02	; 2
    537e:	70 e0       	ldi	r23, 0x00	; 0
    5380:	f5 cf       	rjmp	.-22     	; 0x536c <_ZN10W5500Class6readSnEhj>

00005382 <_ZN10W5500Class7writeSnEhjh>:
    5382:	9b 01       	movw	r18, r22
    5384:	82 95       	swap	r24
    5386:	88 0f       	add	r24, r24
    5388:	80 7e       	andi	r24, 0xE0	; 224
    538a:	6c e0       	ldi	r22, 0x0C	; 12
    538c:	68 0f       	add	r22, r24
    538e:	c9 01       	movw	r24, r18
    5390:	cf c1       	rjmp	.+926    	; 0x5730 <_ZN10W5500Class5writeEjhh>

00005392 <_ZN10W5500Class11writeSnPORTEhj>:
    5392:	cf 93       	push	r28
    5394:	df 93       	push	r29
    5396:	c8 2f       	mov	r28, r24
    5398:	d6 2f       	mov	r29, r22
    539a:	47 2f       	mov	r20, r23
    539c:	64 e0       	ldi	r22, 0x04	; 4
    539e:	70 e0       	ldi	r23, 0x00	; 0
    53a0:	f0 df       	rcall	.-32     	; 0x5382 <_ZN10W5500Class7writeSnEhjh>
    53a2:	4d 2f       	mov	r20, r29
    53a4:	65 e0       	ldi	r22, 0x05	; 5
    53a6:	70 e0       	ldi	r23, 0x00	; 0
    53a8:	8c 2f       	mov	r24, r28
    53aa:	df 91       	pop	r29
    53ac:	cf 91       	pop	r28
    53ae:	e9 cf       	rjmp	.-46     	; 0x5382 <_ZN10W5500Class7writeSnEhjh>

000053b0 <_ZN10W5500Class9writeSnIREhh>:
    53b0:	46 2f       	mov	r20, r22
    53b2:	62 e0       	ldi	r22, 0x02	; 2
    53b4:	70 e0       	ldi	r23, 0x00	; 0
    53b6:	e5 cf       	rjmp	.-54     	; 0x5382 <_ZN10W5500Class7writeSnEhjh>

000053b8 <_ZN10W5500Class12writeSnDPORTEhj>:
    53b8:	cf 93       	push	r28
    53ba:	df 93       	push	r29
    53bc:	c8 2f       	mov	r28, r24
    53be:	d6 2f       	mov	r29, r22
    53c0:	47 2f       	mov	r20, r23
    53c2:	60 e1       	ldi	r22, 0x10	; 16
    53c4:	70 e0       	ldi	r23, 0x00	; 0
    53c6:	dd df       	rcall	.-70     	; 0x5382 <_ZN10W5500Class7writeSnEhjh>
    53c8:	4d 2f       	mov	r20, r29
    53ca:	61 e1       	ldi	r22, 0x11	; 17
    53cc:	70 e0       	ldi	r23, 0x00	; 0
    53ce:	8c 2f       	mov	r24, r28
    53d0:	df 91       	pop	r29
    53d2:	cf 91       	pop	r28
    53d4:	d6 cf       	rjmp	.-84     	; 0x5382 <_ZN10W5500Class7writeSnEhjh>

000053d6 <_Z5closeh>:
    53d6:	cf 93       	push	r28
    53d8:	c8 2f       	mov	r28, r24
    53da:	40 e1       	ldi	r20, 0x10	; 16
    53dc:	68 2f       	mov	r22, r24
    53de:	85 eb       	ldi	r24, 0xB5	; 181
    53e0:	9b e0       	ldi	r25, 0x0B	; 11
    53e2:	70 d3       	rcall	.+1760   	; 0x5ac4 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    53e4:	6f ef       	ldi	r22, 0xFF	; 255
    53e6:	8c 2f       	mov	r24, r28
    53e8:	cf 91       	pop	r28
    53ea:	e2 cf       	rjmp	.-60     	; 0x53b0 <_ZN10W5500Class9writeSnIREhh>

000053ec <_Z6sockethhjh>:
    53ec:	ff 92       	push	r15
    53ee:	0f 93       	push	r16
    53f0:	1f 93       	push	r17
    53f2:	cf 93       	push	r28
    53f4:	df 93       	push	r29
    53f6:	9f ef       	ldi	r25, 0xFF	; 255
    53f8:	96 0f       	add	r25, r22
    53fa:	95 30       	cpi	r25, 0x05	; 5
    53fc:	18 f5       	brcc	.+70     	; 0x5444 <_Z6sockethhjh+0x58>
    53fe:	d2 2f       	mov	r29, r18
    5400:	8a 01       	movw	r16, r20
    5402:	f6 2e       	mov	r15, r22
    5404:	c8 2f       	mov	r28, r24
    5406:	e7 df       	rcall	.-50     	; 0x53d6 <_Z5closeh>
    5408:	4f 2d       	mov	r20, r15
    540a:	4d 2b       	or	r20, r29
    540c:	60 e0       	ldi	r22, 0x00	; 0
    540e:	70 e0       	ldi	r23, 0x00	; 0
    5410:	8c 2f       	mov	r24, r28
    5412:	b7 df       	rcall	.-146    	; 0x5382 <_ZN10W5500Class7writeSnEhjh>
    5414:	01 15       	cp	r16, r1
    5416:	11 05       	cpc	r17, r1
    5418:	11 f0       	breq	.+4      	; 0x541e <_Z6sockethhjh+0x32>
    541a:	b8 01       	movw	r22, r16
    541c:	0a c0       	rjmp	.+20     	; 0x5432 <_Z6sockethhjh+0x46>
    541e:	60 91 b0 0b 	lds	r22, 0x0BB0	; 0x800bb0 <_ZL10local_port>
    5422:	70 91 b1 0b 	lds	r23, 0x0BB1	; 0x800bb1 <_ZL10local_port+0x1>
    5426:	6f 5f       	subi	r22, 0xFF	; 255
    5428:	7f 4f       	sbci	r23, 0xFF	; 255
    542a:	70 93 b1 0b 	sts	0x0BB1, r23	; 0x800bb1 <_ZL10local_port+0x1>
    542e:	60 93 b0 0b 	sts	0x0BB0, r22	; 0x800bb0 <_ZL10local_port>
    5432:	8c 2f       	mov	r24, r28
    5434:	ae df       	rcall	.-164    	; 0x5392 <_ZN10W5500Class11writeSnPORTEhj>
    5436:	41 e0       	ldi	r20, 0x01	; 1
    5438:	6c 2f       	mov	r22, r28
    543a:	85 eb       	ldi	r24, 0xB5	; 181
    543c:	9b e0       	ldi	r25, 0x0B	; 11
    543e:	42 d3       	rcall	.+1668   	; 0x5ac4 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5440:	81 e0       	ldi	r24, 0x01	; 1
    5442:	01 c0       	rjmp	.+2      	; 0x5446 <_Z6sockethhjh+0x5a>
    5444:	80 e0       	ldi	r24, 0x00	; 0
    5446:	df 91       	pop	r29
    5448:	cf 91       	pop	r28
    544a:	1f 91       	pop	r17
    544c:	0f 91       	pop	r16
    544e:	ff 90       	pop	r15
    5450:	08 95       	ret

00005452 <_Z7connecthPhj>:
    5452:	0f 93       	push	r16
    5454:	1f 93       	push	r17
    5456:	cf 93       	push	r28
    5458:	fb 01       	movw	r30, r22
    545a:	90 81       	ld	r25, Z
    545c:	9f 3f       	cpi	r25, 0xFF	; 255
    545e:	51 f4       	brne	.+20     	; 0x5474 <_Z7connecthPhj+0x22>
    5460:	91 81       	ldd	r25, Z+1	; 0x01
    5462:	9f 3f       	cpi	r25, 0xFF	; 255
    5464:	91 f4       	brne	.+36     	; 0x548a <_Z7connecthPhj+0x38>
    5466:	92 81       	ldd	r25, Z+2	; 0x02
    5468:	9f 3f       	cpi	r25, 0xFF	; 255
    546a:	79 f4       	brne	.+30     	; 0x548a <_Z7connecthPhj+0x38>
    546c:	93 81       	ldd	r25, Z+3	; 0x03
    546e:	9f 3f       	cpi	r25, 0xFF	; 255
    5470:	61 f4       	brne	.+24     	; 0x548a <_Z7connecthPhj+0x38>
    5472:	1c c0       	rjmp	.+56     	; 0x54ac <_Z7connecthPhj+0x5a>
    5474:	91 11       	cpse	r25, r1
    5476:	09 c0       	rjmp	.+18     	; 0x548a <_Z7connecthPhj+0x38>
    5478:	91 81       	ldd	r25, Z+1	; 0x01
    547a:	91 11       	cpse	r25, r1
    547c:	06 c0       	rjmp	.+12     	; 0x548a <_Z7connecthPhj+0x38>
    547e:	92 81       	ldd	r25, Z+2	; 0x02
    5480:	91 11       	cpse	r25, r1
    5482:	03 c0       	rjmp	.+6      	; 0x548a <_Z7connecthPhj+0x38>
    5484:	93 81       	ldd	r25, Z+3	; 0x03
    5486:	99 23       	and	r25, r25
    5488:	91 f0       	breq	.+36     	; 0x54ae <_Z7connecthPhj+0x5c>
    548a:	41 15       	cp	r20, r1
    548c:	51 05       	cpc	r21, r1
    548e:	71 f0       	breq	.+28     	; 0x54ac <_Z7connecthPhj+0x5a>
    5490:	8a 01       	movw	r16, r20
    5492:	bf 01       	movw	r22, r30
    5494:	c8 2f       	mov	r28, r24
    5496:	5f df       	rcall	.-322    	; 0x5356 <_ZN10W5500Class11writeSnDIPREhPh>
    5498:	b8 01       	movw	r22, r16
    549a:	8c 2f       	mov	r24, r28
    549c:	8d df       	rcall	.-230    	; 0x53b8 <_ZN10W5500Class12writeSnDPORTEhj>
    549e:	44 e0       	ldi	r20, 0x04	; 4
    54a0:	6c 2f       	mov	r22, r28
    54a2:	85 eb       	ldi	r24, 0xB5	; 181
    54a4:	9b e0       	ldi	r25, 0x0B	; 11
    54a6:	0e d3       	rcall	.+1564   	; 0x5ac4 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    54a8:	91 e0       	ldi	r25, 0x01	; 1
    54aa:	01 c0       	rjmp	.+2      	; 0x54ae <_Z7connecthPhj+0x5c>
    54ac:	90 e0       	ldi	r25, 0x00	; 0
    54ae:	89 2f       	mov	r24, r25
    54b0:	cf 91       	pop	r28
    54b2:	1f 91       	pop	r17
    54b4:	0f 91       	pop	r16
    54b6:	08 95       	ret

000054b8 <_Z10disconnecth>:
    54b8:	48 e0       	ldi	r20, 0x08	; 8
    54ba:	68 2f       	mov	r22, r24
    54bc:	85 eb       	ldi	r24, 0xB5	; 181
    54be:	9b e0       	ldi	r25, 0x0B	; 11
    54c0:	01 c3       	rjmp	.+1538   	; 0x5ac4 <_ZN10W5500Class9execCmdSnEh7SockCMD>

000054c2 <_Z4sendhPKhj>:
    54c2:	cf 92       	push	r12
    54c4:	df 92       	push	r13
    54c6:	ef 92       	push	r14
    54c8:	ff 92       	push	r15
    54ca:	0f 93       	push	r16
    54cc:	1f 93       	push	r17
    54ce:	cf 93       	push	r28
    54d0:	c8 2f       	mov	r28, r24
    54d2:	7b 01       	movw	r14, r22
    54d4:	8a 01       	movw	r16, r20
    54d6:	41 30       	cpi	r20, 0x01	; 1
    54d8:	58 40       	sbci	r21, 0x08	; 8
    54da:	10 f0       	brcs	.+4      	; 0x54e0 <_Z4sendhPKhj+0x1e>
    54dc:	00 e0       	ldi	r16, 0x00	; 0
    54de:	18 e0       	ldi	r17, 0x08	; 8
    54e0:	6c 2f       	mov	r22, r28
    54e2:	85 eb       	ldi	r24, 0xB5	; 181
    54e4:	9b e0       	ldi	r25, 0x0B	; 11
    54e6:	cd d1       	rcall	.+922    	; 0x5882 <_ZN10W5500Class13getTXFreeSizeEh>
    54e8:	6c 01       	movw	r12, r24
    54ea:	63 e0       	ldi	r22, 0x03	; 3
    54ec:	70 e0       	ldi	r23, 0x00	; 0
    54ee:	8c 2f       	mov	r24, r28
    54f0:	3d df       	rcall	.-390    	; 0x536c <_ZN10W5500Class6readSnEhj>
    54f2:	87 31       	cpi	r24, 0x17	; 23
    54f4:	11 f0       	breq	.+4      	; 0x54fa <_Z4sendhPKhj+0x38>
    54f6:	8c 31       	cpi	r24, 0x1C	; 28
    54f8:	21 f4       	brne	.+8      	; 0x5502 <_Z4sendhPKhj+0x40>
    54fa:	c0 16       	cp	r12, r16
    54fc:	d1 06       	cpc	r13, r17
    54fe:	80 f3       	brcs	.-32     	; 0x54e0 <_Z4sendhPKhj+0x1e>
    5500:	02 c0       	rjmp	.+4      	; 0x5506 <_Z4sendhPKhj+0x44>
    5502:	00 e0       	ldi	r16, 0x00	; 0
    5504:	10 e0       	ldi	r17, 0x00	; 0
    5506:	98 01       	movw	r18, r16
    5508:	a7 01       	movw	r20, r14
    550a:	6c 2f       	mov	r22, r28
    550c:	85 eb       	ldi	r24, 0xB5	; 181
    550e:	9b e0       	ldi	r25, 0x0B	; 11
    5510:	3d d2       	rcall	.+1146   	; 0x598c <_ZN10W5500Class20send_data_processingEhPKhj>
    5512:	40 e2       	ldi	r20, 0x20	; 32
    5514:	6c 2f       	mov	r22, r28
    5516:	85 eb       	ldi	r24, 0xB5	; 181
    5518:	9b e0       	ldi	r25, 0x0B	; 11
    551a:	d4 d2       	rcall	.+1448   	; 0x5ac4 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    551c:	8c 2f       	mov	r24, r28
    551e:	2e df       	rcall	.-420    	; 0x537c <_ZN10W5500Class8readSnIREh>
    5520:	84 fd       	sbrc	r24, 4
    5522:	0b c0       	rjmp	.+22     	; 0x553a <_Z4sendhPKhj+0x78>
    5524:	63 e0       	ldi	r22, 0x03	; 3
    5526:	70 e0       	ldi	r23, 0x00	; 0
    5528:	8c 2f       	mov	r24, r28
    552a:	20 df       	rcall	.-448    	; 0x536c <_ZN10W5500Class6readSnEhj>
    552c:	81 11       	cpse	r24, r1
    552e:	f6 cf       	rjmp	.-20     	; 0x551c <_Z4sendhPKhj+0x5a>
    5530:	8c 2f       	mov	r24, r28
    5532:	51 df       	rcall	.-350    	; 0x53d6 <_Z5closeh>
    5534:	80 e0       	ldi	r24, 0x00	; 0
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	04 c0       	rjmp	.+8      	; 0x5542 <_Z4sendhPKhj+0x80>
    553a:	60 e1       	ldi	r22, 0x10	; 16
    553c:	8c 2f       	mov	r24, r28
    553e:	38 df       	rcall	.-400    	; 0x53b0 <_ZN10W5500Class9writeSnIREhh>
    5540:	c8 01       	movw	r24, r16
    5542:	cf 91       	pop	r28
    5544:	1f 91       	pop	r17
    5546:	0f 91       	pop	r16
    5548:	ff 90       	pop	r15
    554a:	ef 90       	pop	r14
    554c:	df 90       	pop	r13
    554e:	cf 90       	pop	r12
    5550:	08 95       	ret

00005552 <_Z4recvhPhi>:
    5552:	cf 92       	push	r12
    5554:	df 92       	push	r13
    5556:	ef 92       	push	r14
    5558:	ff 92       	push	r15
    555a:	0f 93       	push	r16
    555c:	1f 93       	push	r17
    555e:	cf 93       	push	r28
    5560:	df 93       	push	r29
    5562:	18 2f       	mov	r17, r24
    5564:	6b 01       	movw	r12, r22
    5566:	7a 01       	movw	r14, r20
    5568:	68 2f       	mov	r22, r24
    556a:	85 eb       	ldi	r24, 0xB5	; 181
    556c:	9b e0       	ldi	r25, 0x0B	; 11
    556e:	ba d1       	rcall	.+884    	; 0x58e4 <_ZN10W5500Class17getRXReceivedSizeEh>
    5570:	ec 01       	movw	r28, r24
    5572:	00 97       	sbiw	r24, 0x00	; 0
    5574:	91 f4       	brne	.+36     	; 0x559a <_Z4recvhPhi+0x48>
    5576:	63 e0       	ldi	r22, 0x03	; 3
    5578:	70 e0       	ldi	r23, 0x00	; 0
    557a:	81 2f       	mov	r24, r17
    557c:	f7 de       	rcall	.-530    	; 0x536c <_ZN10W5500Class6readSnEhj>
    557e:	84 31       	cpi	r24, 0x14	; 20
    5580:	f9 f0       	breq	.+62     	; 0x55c0 <_Z4recvhPhi+0x6e>
    5582:	88 23       	and	r24, r24
    5584:	e9 f0       	breq	.+58     	; 0x55c0 <_Z4recvhPhi+0x6e>
    5586:	c1 e0       	ldi	r28, 0x01	; 1
    5588:	d0 e0       	ldi	r29, 0x00	; 0
    558a:	8c 31       	cpi	r24, 0x1C	; 28
    558c:	11 f4       	brne	.+4      	; 0x5592 <_Z4recvhPhi+0x40>
    558e:	c0 e0       	ldi	r28, 0x00	; 0
    5590:	d0 e0       	ldi	r29, 0x00	; 0
    5592:	d1 95       	neg	r29
    5594:	c1 95       	neg	r28
    5596:	d1 09       	sbc	r29, r1
    5598:	13 c0       	rjmp	.+38     	; 0x55c0 <_Z4recvhPhi+0x6e>
    559a:	e8 16       	cp	r14, r24
    559c:	f9 06       	cpc	r15, r25
    559e:	0c f4       	brge	.+2      	; 0x55a2 <_Z4recvhPhi+0x50>
    55a0:	e7 01       	movw	r28, r14
    55a2:	1c 16       	cp	r1, r28
    55a4:	1d 06       	cpc	r1, r29
    55a6:	64 f4       	brge	.+24     	; 0x55c0 <_Z4recvhPhi+0x6e>
    55a8:	00 e0       	ldi	r16, 0x00	; 0
    55aa:	9e 01       	movw	r18, r28
    55ac:	a6 01       	movw	r20, r12
    55ae:	61 2f       	mov	r22, r17
    55b0:	85 eb       	ldi	r24, 0xB5	; 181
    55b2:	9b e0       	ldi	r25, 0x0B	; 11
    55b4:	3a d2       	rcall	.+1140   	; 0x5a2a <_ZN10W5500Class20recv_data_processingEhPhjh>
    55b6:	40 e4       	ldi	r20, 0x40	; 64
    55b8:	61 2f       	mov	r22, r17
    55ba:	85 eb       	ldi	r24, 0xB5	; 181
    55bc:	9b e0       	ldi	r25, 0x0B	; 11
    55be:	82 d2       	rcall	.+1284   	; 0x5ac4 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    55c0:	ce 01       	movw	r24, r28
    55c2:	df 91       	pop	r29
    55c4:	cf 91       	pop	r28
    55c6:	1f 91       	pop	r17
    55c8:	0f 91       	pop	r16
    55ca:	ff 90       	pop	r15
    55cc:	ef 90       	pop	r14
    55ce:	df 90       	pop	r13
    55d0:	cf 90       	pop	r12
    55d2:	08 95       	ret

000055d4 <_Z4peekhPh>:
    55d4:	0f 93       	push	r16
    55d6:	ab 01       	movw	r20, r22
    55d8:	01 e0       	ldi	r16, 0x01	; 1
    55da:	21 e0       	ldi	r18, 0x01	; 1
    55dc:	30 e0       	ldi	r19, 0x00	; 0
    55de:	68 2f       	mov	r22, r24
    55e0:	85 eb       	ldi	r24, 0xB5	; 181
    55e2:	9b e0       	ldi	r25, 0x0B	; 11
    55e4:	22 d2       	rcall	.+1092   	; 0x5a2a <_ZN10W5500Class20recv_data_processingEhPhjh>
    55e6:	81 e0       	ldi	r24, 0x01	; 1
    55e8:	90 e0       	ldi	r25, 0x00	; 0
    55ea:	0f 91       	pop	r16
    55ec:	08 95       	ret

000055ee <_Z5flushh>:
    55ee:	08 95       	ret

000055f0 <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    55f0:	af 92       	push	r10
    55f2:	bf 92       	push	r11
    55f4:	cf 92       	push	r12
    55f6:	df 92       	push	r13
    55f8:	ff 92       	push	r15
    55fa:	0f 93       	push	r16
    55fc:	1f 93       	push	r17
    55fe:	cf 93       	push	r28
    5600:	df 93       	push	r29
    5602:	f8 2e       	mov	r15, r24
    5604:	6b 01       	movw	r12, r22
    5606:	5a 01       	movw	r10, r20
    5608:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    560a:	68 2f       	mov	r22, r24
    560c:	85 eb       	ldi	r24, 0xB5	; 181
    560e:	9b e0       	ldi	r25, 0x0B	; 11
    5610:	38 d1       	rcall	.+624    	; 0x5882 <_ZN10W5500Class13getTXFreeSizeEh>
    5612:	8c 17       	cp	r24, r28
    5614:	9d 07       	cpc	r25, r29
    5616:	28 f4       	brcc	.+10     	; 0x5622 <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    5618:	6f 2d       	mov	r22, r15
    561a:	85 eb       	ldi	r24, 0xB5	; 181
    561c:	9b e0       	ldi	r25, 0x0B	; 11
    561e:	31 d1       	rcall	.+610    	; 0x5882 <_ZN10W5500Class13getTXFreeSizeEh>
    5620:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    5622:	8e 01       	movw	r16, r28
    5624:	95 01       	movw	r18, r10
    5626:	a6 01       	movw	r20, r12
    5628:	6f 2d       	mov	r22, r15
    562a:	85 eb       	ldi	r24, 0xB5	; 181
    562c:	9b e0       	ldi	r25, 0x0B	; 11
    562e:	74 d1       	rcall	.+744    	; 0x5918 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    5630:	ce 01       	movw	r24, r28
    5632:	df 91       	pop	r29
    5634:	cf 91       	pop	r28
    5636:	1f 91       	pop	r17
    5638:	0f 91       	pop	r16
    563a:	ff 90       	pop	r15
    563c:	df 90       	pop	r13
    563e:	cf 90       	pop	r12
    5640:	bf 90       	pop	r11
    5642:	af 90       	pop	r10
    5644:	08 95       	ret

00005646 <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    5646:	0f 93       	push	r16
    5648:	1f 93       	push	r17
    564a:	cf 93       	push	r28
    564c:	fb 01       	movw	r30, r22
  if
    564e:	90 81       	ld	r25, Z
    5650:	91 11       	cpse	r25, r1
    5652:	09 c0       	rjmp	.+18     	; 0x5666 <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    5654:	91 81       	ldd	r25, Z+1	; 0x01
    5656:	91 11       	cpse	r25, r1
    5658:	06 c0       	rjmp	.+12     	; 0x5666 <_Z8startUDPhPhj+0x20>
    565a:	92 81       	ldd	r25, Z+2	; 0x02
    565c:	91 11       	cpse	r25, r1
    565e:	03 c0       	rjmp	.+6      	; 0x5666 <_Z8startUDPhPhj+0x20>
    5660:	93 81       	ldd	r25, Z+3	; 0x03
    5662:	99 23       	and	r25, r25
    5664:	69 f0       	breq	.+26     	; 0x5680 <_Z8startUDPhPhj+0x3a>
    5666:	41 15       	cp	r20, r1
    5668:	51 05       	cpc	r21, r1
    566a:	51 f0       	breq	.+20     	; 0x5680 <_Z8startUDPhPhj+0x3a>
    566c:	8a 01       	movw	r16, r20
    566e:	bf 01       	movw	r22, r30
    5670:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    5672:	71 de       	rcall	.-798    	; 0x5356 <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    5674:	b8 01       	movw	r22, r16
    5676:	8c 2f       	mov	r24, r28
    5678:	9f de       	rcall	.-706    	; 0x53b8 <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    567a:	81 e0       	ldi	r24, 0x01	; 1
    567c:	90 e0       	ldi	r25, 0x00	; 0
    567e:	02 c0       	rjmp	.+4      	; 0x5684 <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    5680:	80 e0       	ldi	r24, 0x00	; 0
    5682:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    5684:	cf 91       	pop	r28
    5686:	1f 91       	pop	r17
    5688:	0f 91       	pop	r16
    568a:	08 95       	ret

0000568c <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    568c:	cf 93       	push	r28
    568e:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    5690:	40 e2       	ldi	r20, 0x20	; 32
    5692:	68 2f       	mov	r22, r24
    5694:	85 eb       	ldi	r24, 0xB5	; 181
    5696:	9b e0       	ldi	r25, 0x0B	; 11
    5698:	15 d2       	rcall	.+1066   	; 0x5ac4 <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    569a:	8c 2f       	mov	r24, r28
    569c:	6f de       	rcall	.-802    	; 0x537c <_ZN10W5500Class8readSnIREh>
    569e:	84 fd       	sbrc	r24, 4
    56a0:	0a c0       	rjmp	.+20     	; 0x56b6 <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    56a2:	8c 2f       	mov	r24, r28
    56a4:	6b de       	rcall	.-810    	; 0x537c <_ZN10W5500Class8readSnIREh>
    56a6:	83 ff       	sbrs	r24, 3
    56a8:	f8 cf       	rjmp	.-16     	; 0x569a <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    56aa:	68 e1       	ldi	r22, 0x18	; 24
    56ac:	8c 2f       	mov	r24, r28
    56ae:	80 de       	rcall	.-768    	; 0x53b0 <_ZN10W5500Class9writeSnIREhh>
    56b0:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	05 c0       	rjmp	.+10     	; 0x56c0 <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    56b6:	60 e1       	ldi	r22, 0x10	; 16
    56b8:	8c 2f       	mov	r24, r28
    56ba:	7a de       	rcall	.-780    	; 0x53b0 <_ZN10W5500Class9writeSnIREhh>
    56bc:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    56be:	90 e0       	ldi	r25, 0x00	; 0
    56c0:	cf 91       	pop	r28
}
    56c2:	08 95       	ret

000056c4 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    56c4:	20 91 b8 0b 	lds	r18, 0x0BB8	; 0x800bb8 <_ZN8SPIClass13interruptModeE>
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    56c8:	22 23       	and	r18, r18
    56ca:	99 f0       	breq	.+38     	; 0x56f2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    56cc:	4f b7       	in	r20, 0x3f	; 63
    56ce:	f8 94       	cli
    56d0:	20 91 b8 0b 	lds	r18, 0x0BB8	; 0x800bb8 <_ZN8SPIClass13interruptModeE>
    56d4:	21 30       	cpi	r18, 0x01	; 1
    56d6:	59 f4       	brne	.+22     	; 0x56ee <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    56d8:	2d b3       	in	r18, 0x1d	; 29
    56da:	20 93 b6 0b 	sts	0x0BB6, r18	; 0x800bb6 <_ZN8SPIClass13interruptSaveE>
    56de:	3d b3       	in	r19, 0x1d	; 29
    56e0:	20 91 b7 0b 	lds	r18, 0x0BB7	; 0x800bb7 <_ZN8SPIClass13interruptMaskE>
    56e4:	20 95       	com	r18
    56e6:	23 23       	and	r18, r19
    56e8:	2d bb       	out	0x1d, r18	; 29
    56ea:	4f bf       	out	0x3f, r20	; 63
    56ec:	02 c0       	rjmp	.+4      	; 0x56f2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    56ee:	40 93 b6 0b 	sts	0x0BB6, r20	; 0x800bb6 <_ZN8SPIClass13interruptSaveE>
    56f2:	8c bd       	out	0x2c, r24	; 44
    56f4:	9d bd       	out	0x2d, r25	; 45
    56f6:	08 95       	ret

000056f8 <_ZN8SPIClass8transferEh>:
    56f8:	8e bd       	out	0x2e, r24	; 46
    56fa:	00 00       	nop
    56fc:	0d b4       	in	r0, 0x2d	; 45
    56fe:	07 fe       	sbrs	r0, 7
    5700:	fd cf       	rjmp	.-6      	; 0x56fc <_ZN8SPIClass8transferEh+0x4>
    5702:	8e b5       	in	r24, 0x2e	; 46
    5704:	08 95       	ret

00005706 <_ZN8SPIClass14endTransactionEv>:
    5706:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <_ZN8SPIClass13interruptModeE>
    570a:	88 23       	and	r24, r24
    570c:	61 f0       	breq	.+24     	; 0x5726 <_ZN8SPIClass14endTransactionEv+0x20>
    570e:	9f b7       	in	r25, 0x3f	; 63
    5710:	f8 94       	cli
    5712:	20 91 b8 0b 	lds	r18, 0x0BB8	; 0x800bb8 <_ZN8SPIClass13interruptModeE>
    5716:	80 91 b6 0b 	lds	r24, 0x0BB6	; 0x800bb6 <_ZN8SPIClass13interruptSaveE>
    571a:	21 30       	cpi	r18, 0x01	; 1
    571c:	19 f4       	brne	.+6      	; 0x5724 <_ZN8SPIClass14endTransactionEv+0x1e>
    571e:	8d bb       	out	0x1d, r24	; 29
    5720:	9f bf       	out	0x3f, r25	; 63
    5722:	08 95       	ret
    5724:	8f bf       	out	0x3f, r24	; 63
    5726:	08 95       	ret

00005728 <_ZN10W5500Class5setSSEv>:
    5728:	44 98       	cbi	0x08, 4	; 8
    572a:	08 95       	ret

0000572c <_ZN10W5500Class7resetSSEv>:
    572c:	44 9a       	sbi	0x08, 4	; 8
    572e:	08 95       	ret

00005730 <_ZN10W5500Class5writeEjhh>:
    5730:	0f 93       	push	r16
    5732:	1f 93       	push	r17
    5734:	cf 93       	push	r28
    5736:	df 93       	push	r29
    5738:	18 2f       	mov	r17, r24
    573a:	09 2f       	mov	r16, r25
    573c:	d6 2f       	mov	r29, r22
    573e:	c4 2f       	mov	r28, r20
    5740:	80 91 b3 0b 	lds	r24, 0x0BB3	; 0x800bb3 <wiznet_SPI_settings>
    5744:	90 91 b4 0b 	lds	r25, 0x0BB4	; 0x800bb4 <wiznet_SPI_settings+0x1>
    5748:	bd df       	rcall	.-134    	; 0x56c4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    574a:	ee df       	rcall	.-36     	; 0x5728 <_ZN10W5500Class5setSSEv>
    574c:	80 2f       	mov	r24, r16
    574e:	d4 df       	rcall	.-88     	; 0x56f8 <_ZN8SPIClass8transferEh>
    5750:	81 2f       	mov	r24, r17
    5752:	d2 df       	rcall	.-92     	; 0x56f8 <_ZN8SPIClass8transferEh>
    5754:	8d 2f       	mov	r24, r29
    5756:	d0 df       	rcall	.-96     	; 0x56f8 <_ZN8SPIClass8transferEh>
    5758:	8c 2f       	mov	r24, r28
    575a:	ce df       	rcall	.-100    	; 0x56f8 <_ZN8SPIClass8transferEh>
    575c:	e7 df       	rcall	.-50     	; 0x572c <_ZN10W5500Class7resetSSEv>
    575e:	d3 df       	rcall	.-90     	; 0x5706 <_ZN8SPIClass14endTransactionEv>
    5760:	81 e0       	ldi	r24, 0x01	; 1
    5762:	df 91       	pop	r29
    5764:	cf 91       	pop	r28
    5766:	1f 91       	pop	r17
    5768:	0f 91       	pop	r16
    576a:	08 95       	ret

0000576c <_ZN10W5500Class5writeEjhPKhj>:
    576c:	df 92       	push	r13
    576e:	ef 92       	push	r14
    5770:	ff 92       	push	r15
    5772:	0f 93       	push	r16
    5774:	1f 93       	push	r17
    5776:	cf 93       	push	r28
    5778:	df 93       	push	r29
    577a:	d8 2f       	mov	r29, r24
    577c:	d9 2e       	mov	r13, r25
    577e:	c6 2f       	mov	r28, r22
    5780:	7a 01       	movw	r14, r20
    5782:	89 01       	movw	r16, r18
    5784:	80 91 b3 0b 	lds	r24, 0x0BB3	; 0x800bb3 <wiznet_SPI_settings>
    5788:	90 91 b4 0b 	lds	r25, 0x0BB4	; 0x800bb4 <wiznet_SPI_settings+0x1>
    578c:	9b df       	rcall	.-202    	; 0x56c4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    578e:	cc df       	rcall	.-104    	; 0x5728 <_ZN10W5500Class5setSSEv>
    5790:	8d 2d       	mov	r24, r13
    5792:	b2 df       	rcall	.-156    	; 0x56f8 <_ZN8SPIClass8transferEh>
    5794:	8d 2f       	mov	r24, r29
    5796:	b0 df       	rcall	.-160    	; 0x56f8 <_ZN8SPIClass8transferEh>
    5798:	8c 2f       	mov	r24, r28
    579a:	ae df       	rcall	.-164    	; 0x56f8 <_ZN8SPIClass8transferEh>
    579c:	e7 01       	movw	r28, r14
    579e:	e0 0e       	add	r14, r16
    57a0:	f1 1e       	adc	r15, r17
    57a2:	ce 15       	cp	r28, r14
    57a4:	df 05       	cpc	r29, r15
    57a6:	19 f0       	breq	.+6      	; 0x57ae <_ZN10W5500Class5writeEjhPKhj+0x42>
    57a8:	89 91       	ld	r24, Y+
    57aa:	a6 df       	rcall	.-180    	; 0x56f8 <_ZN8SPIClass8transferEh>
    57ac:	fa cf       	rjmp	.-12     	; 0x57a2 <_ZN10W5500Class5writeEjhPKhj+0x36>
    57ae:	be df       	rcall	.-132    	; 0x572c <_ZN10W5500Class7resetSSEv>
    57b0:	aa df       	rcall	.-172    	; 0x5706 <_ZN8SPIClass14endTransactionEv>
    57b2:	c8 01       	movw	r24, r16
    57b4:	df 91       	pop	r29
    57b6:	cf 91       	pop	r28
    57b8:	1f 91       	pop	r17
    57ba:	0f 91       	pop	r16
    57bc:	ff 90       	pop	r15
    57be:	ef 90       	pop	r14
    57c0:	df 90       	pop	r13
    57c2:	08 95       	ret

000057c4 <_ZN10W5500Class4readEjh>:
    57c4:	1f 93       	push	r17
    57c6:	cf 93       	push	r28
    57c8:	df 93       	push	r29
    57ca:	d8 2f       	mov	r29, r24
    57cc:	19 2f       	mov	r17, r25
    57ce:	c6 2f       	mov	r28, r22
    57d0:	80 91 b3 0b 	lds	r24, 0x0BB3	; 0x800bb3 <wiznet_SPI_settings>
    57d4:	90 91 b4 0b 	lds	r25, 0x0BB4	; 0x800bb4 <wiznet_SPI_settings+0x1>
    57d8:	75 df       	rcall	.-278    	; 0x56c4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    57da:	a6 df       	rcall	.-180    	; 0x5728 <_ZN10W5500Class5setSSEv>
    57dc:	81 2f       	mov	r24, r17
    57de:	8c df       	rcall	.-232    	; 0x56f8 <_ZN8SPIClass8transferEh>
    57e0:	8d 2f       	mov	r24, r29
    57e2:	8a df       	rcall	.-236    	; 0x56f8 <_ZN8SPIClass8transferEh>
    57e4:	8c 2f       	mov	r24, r28
    57e6:	88 df       	rcall	.-240    	; 0x56f8 <_ZN8SPIClass8transferEh>
    57e8:	80 e0       	ldi	r24, 0x00	; 0
    57ea:	86 df       	rcall	.-244    	; 0x56f8 <_ZN8SPIClass8transferEh>
    57ec:	c8 2f       	mov	r28, r24
    57ee:	9e df       	rcall	.-196    	; 0x572c <_ZN10W5500Class7resetSSEv>
    57f0:	8a df       	rcall	.-236    	; 0x5706 <_ZN8SPIClass14endTransactionEv>
    57f2:	8c 2f       	mov	r24, r28
    57f4:	df 91       	pop	r29
    57f6:	cf 91       	pop	r28
    57f8:	1f 91       	pop	r17
    57fa:	08 95       	ret

000057fc <_ZN10W5500Class4initEh>:
    57fc:	cf 93       	push	r28
    57fe:	df 93       	push	r29
    5800:	60 93 b2 0b 	sts	0x0BB2, r22	; 0x800bb2 <SPI_CS>
    5804:	68 ee       	ldi	r22, 0xE8	; 232
    5806:	73 e0       	ldi	r23, 0x03	; 3
    5808:	80 e0       	ldi	r24, 0x00	; 0
    580a:	90 e0       	ldi	r25, 0x00	; 0
    580c:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <delay>
    5810:	3c 9a       	sbi	0x07, 4	; 7
    5812:	10 d4       	rcall	.+2080   	; 0x6034 <_ZN8SPIClass5beginEv>
    5814:	60 e0       	ldi	r22, 0x00	; 0
    5816:	80 e0       	ldi	r24, 0x00	; 0
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	d4 df       	rcall	.-88     	; 0x57c4 <_ZN10W5500Class4readEjh>
    581c:	48 2f       	mov	r20, r24
    581e:	40 68       	ori	r20, 0x80	; 128
    5820:	64 e0       	ldi	r22, 0x04	; 4
    5822:	80 e0       	ldi	r24, 0x00	; 0
    5824:	90 e0       	ldi	r25, 0x00	; 0
    5826:	84 df       	rcall	.-248    	; 0x5730 <_ZN10W5500Class5writeEjhh>
    5828:	c0 e0       	ldi	r28, 0x00	; 0
    582a:	dc 2f       	mov	r29, r28
    582c:	d2 95       	swap	r29
    582e:	dd 0f       	add	r29, r29
    5830:	d0 7e       	andi	r29, 0xE0	; 224
    5832:	d4 5f       	subi	r29, 0xF4	; 244
    5834:	42 e0       	ldi	r20, 0x02	; 2
    5836:	6d 2f       	mov	r22, r29
    5838:	8e e1       	ldi	r24, 0x1E	; 30
    583a:	90 e0       	ldi	r25, 0x00	; 0
    583c:	79 df       	rcall	.-270    	; 0x5730 <_ZN10W5500Class5writeEjhh>
    583e:	42 e0       	ldi	r20, 0x02	; 2
    5840:	6d 2f       	mov	r22, r29
    5842:	8f e1       	ldi	r24, 0x1F	; 31
    5844:	90 e0       	ldi	r25, 0x00	; 0
    5846:	74 df       	rcall	.-280    	; 0x5730 <_ZN10W5500Class5writeEjhh>
    5848:	cf 5f       	subi	r28, 0xFF	; 255
    584a:	c8 30       	cpi	r28, 0x08	; 8
    584c:	71 f7       	brne	.-36     	; 0x582a <_ZN10W5500Class4initEh+0x2e>
    584e:	df 91       	pop	r29
    5850:	cf 91       	pop	r28
    5852:	08 95       	ret

00005854 <_ZN10W5500Class12readSnTX_FSREh>:
    5854:	1f 93       	push	r17
    5856:	cf 93       	push	r28
    5858:	df 93       	push	r29
    585a:	18 2f       	mov	r17, r24
    585c:	60 e2       	ldi	r22, 0x20	; 32
    585e:	70 e0       	ldi	r23, 0x00	; 0
    5860:	85 dd       	rcall	.-1270   	; 0x536c <_ZN10W5500Class6readSnEhj>
    5862:	c8 2f       	mov	r28, r24
    5864:	d0 e0       	ldi	r29, 0x00	; 0
    5866:	dc 2f       	mov	r29, r28
    5868:	cc 27       	eor	r28, r28
    586a:	61 e2       	ldi	r22, 0x21	; 33
    586c:	70 e0       	ldi	r23, 0x00	; 0
    586e:	81 2f       	mov	r24, r17
    5870:	7d dd       	rcall	.-1286   	; 0x536c <_ZN10W5500Class6readSnEhj>
    5872:	9e 01       	movw	r18, r28
    5874:	28 0f       	add	r18, r24
    5876:	31 1d       	adc	r19, r1
    5878:	c9 01       	movw	r24, r18
    587a:	df 91       	pop	r29
    587c:	cf 91       	pop	r28
    587e:	1f 91       	pop	r17
    5880:	08 95       	ret

00005882 <_ZN10W5500Class13getTXFreeSizeEh>:
    5882:	ff 92       	push	r15
    5884:	0f 93       	push	r16
    5886:	1f 93       	push	r17
    5888:	cf 93       	push	r28
    588a:	df 93       	push	r29
    588c:	f6 2e       	mov	r15, r22
    588e:	c0 e0       	ldi	r28, 0x00	; 0
    5890:	d0 e0       	ldi	r29, 0x00	; 0
    5892:	8f 2d       	mov	r24, r15
    5894:	df df       	rcall	.-66     	; 0x5854 <_ZN10W5500Class12readSnTX_FSREh>
    5896:	8c 01       	movw	r16, r24
    5898:	89 2b       	or	r24, r25
    589a:	19 f0       	breq	.+6      	; 0x58a2 <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    589c:	8f 2d       	mov	r24, r15
    589e:	da df       	rcall	.-76     	; 0x5854 <_ZN10W5500Class12readSnTX_FSREh>
    58a0:	ec 01       	movw	r28, r24
    58a2:	c0 17       	cp	r28, r16
    58a4:	d1 07       	cpc	r29, r17
    58a6:	a9 f7       	brne	.-22     	; 0x5892 <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    58a8:	ce 01       	movw	r24, r28
    58aa:	df 91       	pop	r29
    58ac:	cf 91       	pop	r28
    58ae:	1f 91       	pop	r17
    58b0:	0f 91       	pop	r16
    58b2:	ff 90       	pop	r15
    58b4:	08 95       	ret

000058b6 <_ZN10W5500Class12readSnRX_RSREh>:
    58b6:	1f 93       	push	r17
    58b8:	cf 93       	push	r28
    58ba:	df 93       	push	r29
    58bc:	18 2f       	mov	r17, r24
    58be:	66 e2       	ldi	r22, 0x26	; 38
    58c0:	70 e0       	ldi	r23, 0x00	; 0
    58c2:	54 dd       	rcall	.-1368   	; 0x536c <_ZN10W5500Class6readSnEhj>
    58c4:	c8 2f       	mov	r28, r24
    58c6:	d0 e0       	ldi	r29, 0x00	; 0
    58c8:	dc 2f       	mov	r29, r28
    58ca:	cc 27       	eor	r28, r28
    58cc:	67 e2       	ldi	r22, 0x27	; 39
    58ce:	70 e0       	ldi	r23, 0x00	; 0
    58d0:	81 2f       	mov	r24, r17
    58d2:	4c dd       	rcall	.-1384   	; 0x536c <_ZN10W5500Class6readSnEhj>
    58d4:	9e 01       	movw	r18, r28
    58d6:	28 0f       	add	r18, r24
    58d8:	31 1d       	adc	r19, r1
    58da:	c9 01       	movw	r24, r18
    58dc:	df 91       	pop	r29
    58de:	cf 91       	pop	r28
    58e0:	1f 91       	pop	r17
    58e2:	08 95       	ret

000058e4 <_ZN10W5500Class17getRXReceivedSizeEh>:
    58e4:	ff 92       	push	r15
    58e6:	0f 93       	push	r16
    58e8:	1f 93       	push	r17
    58ea:	cf 93       	push	r28
    58ec:	df 93       	push	r29
    58ee:	f6 2e       	mov	r15, r22
    58f0:	c0 e0       	ldi	r28, 0x00	; 0
    58f2:	d0 e0       	ldi	r29, 0x00	; 0
    58f4:	8f 2d       	mov	r24, r15
    58f6:	df df       	rcall	.-66     	; 0x58b6 <_ZN10W5500Class12readSnRX_RSREh>
    58f8:	8c 01       	movw	r16, r24
    58fa:	89 2b       	or	r24, r25
    58fc:	19 f0       	breq	.+6      	; 0x5904 <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    58fe:	8f 2d       	mov	r24, r15
    5900:	da df       	rcall	.-76     	; 0x58b6 <_ZN10W5500Class12readSnRX_RSREh>
    5902:	ec 01       	movw	r28, r24
    5904:	c0 17       	cp	r28, r16
    5906:	d1 07       	cpc	r29, r17
    5908:	a9 f7       	brne	.-22     	; 0x58f4 <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    590a:	ce 01       	movw	r24, r28
    590c:	df 91       	pop	r29
    590e:	cf 91       	pop	r28
    5910:	1f 91       	pop	r17
    5912:	0f 91       	pop	r16
    5914:	ff 90       	pop	r15
    5916:	08 95       	ret

00005918 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    5918:	af 92       	push	r10
    591a:	bf 92       	push	r11
    591c:	df 92       	push	r13
    591e:	ef 92       	push	r14
    5920:	ff 92       	push	r15
    5922:	0f 93       	push	r16
    5924:	1f 93       	push	r17
    5926:	cf 93       	push	r28
    5928:	df 93       	push	r29
    592a:	d6 2e       	mov	r13, r22
    592c:	7a 01       	movw	r14, r20
    592e:	59 01       	movw	r10, r18
    5930:	64 e2       	ldi	r22, 0x24	; 36
    5932:	70 e0       	ldi	r23, 0x00	; 0
    5934:	8d 2d       	mov	r24, r13
    5936:	1a dd       	rcall	.-1484   	; 0x536c <_ZN10W5500Class6readSnEhj>
    5938:	c8 2f       	mov	r28, r24
    593a:	65 e2       	ldi	r22, 0x25	; 37
    593c:	70 e0       	ldi	r23, 0x00	; 0
    593e:	8d 2d       	mov	r24, r13
    5940:	15 dd       	rcall	.-1494   	; 0x536c <_ZN10W5500Class6readSnEhj>
    5942:	d0 e0       	ldi	r29, 0x00	; 0
    5944:	dc 2f       	mov	r29, r28
    5946:	cc 27       	eor	r28, r28
    5948:	e8 0e       	add	r14, r24
    594a:	f1 1c       	adc	r15, r1
    594c:	ce 0d       	add	r28, r14
    594e:	df 1d       	adc	r29, r15
    5950:	6d 2d       	mov	r22, r13
    5952:	62 95       	swap	r22
    5954:	66 0f       	add	r22, r22
    5956:	60 7e       	andi	r22, 0xE0	; 224
    5958:	6c 5e       	subi	r22, 0xEC	; 236
    595a:	98 01       	movw	r18, r16
    595c:	a5 01       	movw	r20, r10
    595e:	ce 01       	movw	r24, r28
    5960:	05 df       	rcall	.-502    	; 0x576c <_ZN10W5500Class5writeEjhPKhj>
    5962:	c0 0f       	add	r28, r16
    5964:	d1 1f       	adc	r29, r17
    5966:	4d 2f       	mov	r20, r29
    5968:	64 e2       	ldi	r22, 0x24	; 36
    596a:	70 e0       	ldi	r23, 0x00	; 0
    596c:	8d 2d       	mov	r24, r13
    596e:	09 dd       	rcall	.-1518   	; 0x5382 <_ZN10W5500Class7writeSnEhjh>
    5970:	4c 2f       	mov	r20, r28
    5972:	65 e2       	ldi	r22, 0x25	; 37
    5974:	70 e0       	ldi	r23, 0x00	; 0
    5976:	8d 2d       	mov	r24, r13
    5978:	df 91       	pop	r29
    597a:	cf 91       	pop	r28
    597c:	1f 91       	pop	r17
    597e:	0f 91       	pop	r16
    5980:	ff 90       	pop	r15
    5982:	ef 90       	pop	r14
    5984:	df 90       	pop	r13
    5986:	bf 90       	pop	r11
    5988:	af 90       	pop	r10
    598a:	fb cc       	rjmp	.-1546   	; 0x5382 <_ZN10W5500Class7writeSnEhjh>

0000598c <_ZN10W5500Class20send_data_processingEhPKhj>:
    598c:	0f 93       	push	r16
    598e:	1f 93       	push	r17
    5990:	89 01       	movw	r16, r18
    5992:	9a 01       	movw	r18, r20
    5994:	40 e0       	ldi	r20, 0x00	; 0
    5996:	50 e0       	ldi	r21, 0x00	; 0
    5998:	bf df       	rcall	.-130    	; 0x5918 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    599a:	1f 91       	pop	r17
    599c:	0f 91       	pop	r16
    599e:	08 95       	ret

000059a0 <_ZN10W5500Class4readEjhPhj>:
    59a0:	df 92       	push	r13
    59a2:	ef 92       	push	r14
    59a4:	ff 92       	push	r15
    59a6:	0f 93       	push	r16
    59a8:	1f 93       	push	r17
    59aa:	cf 93       	push	r28
    59ac:	df 93       	push	r29
    59ae:	d8 2f       	mov	r29, r24
    59b0:	d9 2e       	mov	r13, r25
    59b2:	c6 2f       	mov	r28, r22
    59b4:	7a 01       	movw	r14, r20
    59b6:	89 01       	movw	r16, r18
    59b8:	80 91 b3 0b 	lds	r24, 0x0BB3	; 0x800bb3 <wiznet_SPI_settings>
    59bc:	90 91 b4 0b 	lds	r25, 0x0BB4	; 0x800bb4 <wiznet_SPI_settings+0x1>
    59c0:	81 de       	rcall	.-766    	; 0x56c4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    59c2:	b2 de       	rcall	.-668    	; 0x5728 <_ZN10W5500Class5setSSEv>
    59c4:	8d 2d       	mov	r24, r13
    59c6:	98 de       	rcall	.-720    	; 0x56f8 <_ZN8SPIClass8transferEh>
    59c8:	8d 2f       	mov	r24, r29
    59ca:	96 de       	rcall	.-724    	; 0x56f8 <_ZN8SPIClass8transferEh>
    59cc:	8c 2f       	mov	r24, r28
    59ce:	94 de       	rcall	.-728    	; 0x56f8 <_ZN8SPIClass8transferEh>
    59d0:	e7 01       	movw	r28, r14
    59d2:	e0 0e       	add	r14, r16
    59d4:	f1 1e       	adc	r15, r17
    59d6:	ce 15       	cp	r28, r14
    59d8:	df 05       	cpc	r29, r15
    59da:	21 f0       	breq	.+8      	; 0x59e4 <_ZN10W5500Class4readEjhPhj+0x44>
    59dc:	80 e0       	ldi	r24, 0x00	; 0
    59de:	8c de       	rcall	.-744    	; 0x56f8 <_ZN8SPIClass8transferEh>
    59e0:	89 93       	st	Y+, r24
    59e2:	f9 cf       	rjmp	.-14     	; 0x59d6 <_ZN10W5500Class4readEjhPhj+0x36>
    59e4:	a3 de       	rcall	.-698    	; 0x572c <_ZN10W5500Class7resetSSEv>
    59e6:	8f de       	rcall	.-738    	; 0x5706 <_ZN8SPIClass14endTransactionEv>
    59e8:	c8 01       	movw	r24, r16
    59ea:	df 91       	pop	r29
    59ec:	cf 91       	pop	r28
    59ee:	1f 91       	pop	r17
    59f0:	0f 91       	pop	r16
    59f2:	ff 90       	pop	r15
    59f4:	ef 90       	pop	r14
    59f6:	df 90       	pop	r13
    59f8:	08 95       	ret

000059fa <_ZN10W5500Class9read_dataEhjPVhj>:
    59fa:	0f 93       	push	r16
    59fc:	1f 93       	push	r17
    59fe:	cf 93       	push	r28
    5a00:	df 93       	push	r29
    5a02:	00 d0       	rcall	.+0      	; 0x5a04 <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    5a04:	cd b7       	in	r28, 0x3d	; 61
    5a06:	de b7       	in	r29, 0x3e	; 62
    5a08:	5a 83       	std	Y+2, r21	; 0x02
    5a0a:	49 83       	std	Y+1, r20	; 0x01
    5a0c:	a9 01       	movw	r20, r18
    5a0e:	98 01       	movw	r18, r16
    5a10:	89 81       	ldd	r24, Y+1	; 0x01
    5a12:	9a 81       	ldd	r25, Y+2	; 0x02
    5a14:	62 95       	swap	r22
    5a16:	66 0f       	add	r22, r22
    5a18:	60 7e       	andi	r22, 0xE0	; 224
    5a1a:	68 5e       	subi	r22, 0xE8	; 232
    5a1c:	0f 90       	pop	r0
    5a1e:	0f 90       	pop	r0
    5a20:	df 91       	pop	r29
    5a22:	cf 91       	pop	r28
    5a24:	1f 91       	pop	r17
    5a26:	0f 91       	pop	r16
    5a28:	bb cf       	rjmp	.-138    	; 0x59a0 <_ZN10W5500Class4readEjhPhj>

00005a2a <_ZN10W5500Class20recv_data_processingEhPhjh>:
    5a2a:	8f 92       	push	r8
    5a2c:	9f 92       	push	r9
    5a2e:	af 92       	push	r10
    5a30:	bf 92       	push	r11
    5a32:	cf 92       	push	r12
    5a34:	df 92       	push	r13
    5a36:	ef 92       	push	r14
    5a38:	ff 92       	push	r15
    5a3a:	0f 93       	push	r16
    5a3c:	1f 93       	push	r17
    5a3e:	cf 93       	push	r28
    5a40:	df 93       	push	r29
    5a42:	6c 01       	movw	r12, r24
    5a44:	96 2e       	mov	r9, r22
    5a46:	5a 01       	movw	r10, r20
    5a48:	79 01       	movw	r14, r18
    5a4a:	80 2e       	mov	r8, r16
    5a4c:	68 e2       	ldi	r22, 0x28	; 40
    5a4e:	70 e0       	ldi	r23, 0x00	; 0
    5a50:	89 2d       	mov	r24, r9
    5a52:	8c dc       	rcall	.-1768   	; 0x536c <_ZN10W5500Class6readSnEhj>
    5a54:	08 2f       	mov	r16, r24
    5a56:	69 e2       	ldi	r22, 0x29	; 41
    5a58:	70 e0       	ldi	r23, 0x00	; 0
    5a5a:	89 2d       	mov	r24, r9
    5a5c:	87 dc       	rcall	.-1778   	; 0x536c <_ZN10W5500Class6readSnEhj>
    5a5e:	10 e0       	ldi	r17, 0x00	; 0
    5a60:	10 2f       	mov	r17, r16
    5a62:	00 27       	eor	r16, r16
    5a64:	e8 01       	movw	r28, r16
    5a66:	c8 0f       	add	r28, r24
    5a68:	d1 1d       	adc	r29, r1
    5a6a:	87 01       	movw	r16, r14
    5a6c:	95 01       	movw	r18, r10
    5a6e:	ae 01       	movw	r20, r28
    5a70:	69 2d       	mov	r22, r9
    5a72:	c6 01       	movw	r24, r12
    5a74:	c2 df       	rcall	.-124    	; 0x59fa <_ZN10W5500Class9read_dataEhjPVhj>
    5a76:	81 10       	cpse	r8, r1
    5a78:	18 c0       	rjmp	.+48     	; 0x5aaa <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    5a7a:	0c 0f       	add	r16, r28
    5a7c:	1d 1f       	adc	r17, r29
    5a7e:	41 2f       	mov	r20, r17
    5a80:	68 e2       	ldi	r22, 0x28	; 40
    5a82:	70 e0       	ldi	r23, 0x00	; 0
    5a84:	89 2d       	mov	r24, r9
    5a86:	7d dc       	rcall	.-1798   	; 0x5382 <_ZN10W5500Class7writeSnEhjh>
    5a88:	40 2f       	mov	r20, r16
    5a8a:	69 e2       	ldi	r22, 0x29	; 41
    5a8c:	70 e0       	ldi	r23, 0x00	; 0
    5a8e:	89 2d       	mov	r24, r9
    5a90:	df 91       	pop	r29
    5a92:	cf 91       	pop	r28
    5a94:	1f 91       	pop	r17
    5a96:	0f 91       	pop	r16
    5a98:	ff 90       	pop	r15
    5a9a:	ef 90       	pop	r14
    5a9c:	df 90       	pop	r13
    5a9e:	cf 90       	pop	r12
    5aa0:	bf 90       	pop	r11
    5aa2:	af 90       	pop	r10
    5aa4:	9f 90       	pop	r9
    5aa6:	8f 90       	pop	r8
    5aa8:	6c cc       	rjmp	.-1832   	; 0x5382 <_ZN10W5500Class7writeSnEhjh>
    5aaa:	df 91       	pop	r29
    5aac:	cf 91       	pop	r28
    5aae:	1f 91       	pop	r17
    5ab0:	0f 91       	pop	r16
    5ab2:	ff 90       	pop	r15
    5ab4:	ef 90       	pop	r14
    5ab6:	df 90       	pop	r13
    5ab8:	cf 90       	pop	r12
    5aba:	bf 90       	pop	r11
    5abc:	af 90       	pop	r10
    5abe:	9f 90       	pop	r9
    5ac0:	8f 90       	pop	r8
    5ac2:	08 95       	ret

00005ac4 <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    5ac4:	cf 93       	push	r28
    5ac6:	c6 2f       	mov	r28, r22
    5ac8:	61 e0       	ldi	r22, 0x01	; 1
    5aca:	70 e0       	ldi	r23, 0x00	; 0
    5acc:	8c 2f       	mov	r24, r28
    5ace:	59 dc       	rcall	.-1870   	; 0x5382 <_ZN10W5500Class7writeSnEhjh>
    5ad0:	61 e0       	ldi	r22, 0x01	; 1
    5ad2:	70 e0       	ldi	r23, 0x00	; 0
    5ad4:	8c 2f       	mov	r24, r28
    5ad6:	4a dc       	rcall	.-1900   	; 0x536c <_ZN10W5500Class6readSnEhj>
    5ad8:	81 11       	cpse	r24, r1
    5ada:	fa cf       	rjmp	.-12     	; 0x5ad0 <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    5adc:	cf 91       	pop	r28
    5ade:	08 95       	ret

00005ae0 <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    5ae0:	e3 eb       	ldi	r30, 0xB3	; 179
    5ae2:	fb e0       	ldi	r31, 0x0B	; 11
    5ae4:	80 e5       	ldi	r24, 0x50	; 80
    5ae6:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    5ae8:	81 e0       	ldi	r24, 0x01	; 1
    5aea:	81 83       	std	Z+1, r24	; 0x01
    5aec:	08 95       	ret

00005aee <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    5aee:	fc 01       	movw	r30, r24
    5af0:	12 82       	std	Z+2, r1	; 0x02
    5af2:	8f ef       	ldi	r24, 0xFF	; 255
    5af4:	81 83       	std	Z+1, r24	; 0x01
    5af6:	10 82       	st	Z, r1
    5af8:	13 82       	std	Z+3, r1	; 0x03
    5afa:	08 95       	ret

00005afc <_ZN5I2CIO8portModeEh>:
    5afc:	fc 01       	movw	r30, r24
    5afe:	83 81       	ldd	r24, Z+3	; 0x03
    5b00:	88 23       	and	r24, r24
    5b02:	31 f0       	breq	.+12     	; 0x5b10 <_ZN5I2CIO8portModeEh+0x14>
    5b04:	61 11       	cpse	r22, r1
    5b06:	03 c0       	rjmp	.+6      	; 0x5b0e <_ZN5I2CIO8portModeEh+0x12>
    5b08:	8f ef       	ldi	r24, 0xFF	; 255
    5b0a:	81 83       	std	Z+1, r24	; 0x01
    5b0c:	08 95       	ret
    5b0e:	11 82       	std	Z+1, r1	; 0x01
    5b10:	08 95       	ret

00005b12 <_ZN5I2CIO11isAvailableEh>:
    5b12:	88 e2       	ldi	r24, 0x28	; 40
    5b14:	9c e0       	ldi	r25, 0x0C	; 12
    5b16:	f0 d5       	rcall	.+3040   	; 0x66f8 <_ZN7TwoWire17beginTransmissionEh>
    5b18:	88 e2       	ldi	r24, 0x28	; 40
    5b1a:	9c e0       	ldi	r25, 0x0C	; 12
    5b1c:	6e d6       	rcall	.+3292   	; 0x67fa <_ZN7TwoWire15endTransmissionEv>
    5b1e:	91 e0       	ldi	r25, 0x01	; 1
    5b20:	81 11       	cpse	r24, r1
    5b22:	90 e0       	ldi	r25, 0x00	; 0
    5b24:	89 2f       	mov	r24, r25
    5b26:	08 95       	ret

00005b28 <_ZN5I2CIO5beginEh>:
    5b28:	cf 93       	push	r28
    5b2a:	df 93       	push	r29
    5b2c:	ec 01       	movw	r28, r24
    5b2e:	6a 83       	std	Y+2, r22	; 0x02
    5b30:	88 e2       	ldi	r24, 0x28	; 40
    5b32:	9c e0       	ldi	r25, 0x0C	; 12
    5b34:	ce d5       	rcall	.+2972   	; 0x66d2 <_ZN7TwoWire5beginEv>
    5b36:	6a 81       	ldd	r22, Y+2	; 0x02
    5b38:	ce 01       	movw	r24, r28
    5b3a:	eb df       	rcall	.-42     	; 0x5b12 <_ZN5I2CIO11isAvailableEh>
    5b3c:	8b 83       	std	Y+3, r24	; 0x03
    5b3e:	88 23       	and	r24, r24
    5b40:	21 f0       	breq	.+8      	; 0x5b4a <_ZN5I2CIO5beginEh+0x22>
    5b42:	88 e2       	ldi	r24, 0x28	; 40
    5b44:	9c e0       	ldi	r25, 0x0C	; 12
    5b46:	01 d5       	rcall	.+2562   	; 0x654a <_ZN7TwoWire4readEv>
    5b48:	88 83       	st	Y, r24
    5b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    5b4c:	90 e0       	ldi	r25, 0x00	; 0
    5b4e:	df 91       	pop	r29
    5b50:	cf 91       	pop	r28
    5b52:	08 95       	ret

00005b54 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    5b54:	cf 93       	push	r28
    5b56:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    5b58:	fc 01       	movw	r30, r24
    5b5a:	23 81       	ldd	r18, Z+3	; 0x03
    5b5c:	22 23       	and	r18, r18
    5b5e:	99 f0       	breq	.+38     	; 0x5b86 <_ZN5I2CIO5writeEh+0x32>
    5b60:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    5b62:	81 81       	ldd	r24, Z+1	; 0x01
    5b64:	80 95       	com	r24
    5b66:	68 23       	and	r22, r24
    5b68:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    5b6a:	62 81       	ldd	r22, Z+2	; 0x02
    5b6c:	88 e2       	ldi	r24, 0x28	; 40
    5b6e:	9c e0       	ldi	r25, 0x0C	; 12
    5b70:	c3 d5       	rcall	.+2950   	; 0x66f8 <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    5b72:	68 81       	ld	r22, Y
    5b74:	88 e2       	ldi	r24, 0x28	; 40
    5b76:	9c e0       	ldi	r25, 0x0C	; 12
    5b78:	6e d5       	rcall	.+2780   	; 0x6656 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    5b7a:	88 e2       	ldi	r24, 0x28	; 40
    5b7c:	9c e0       	ldi	r25, 0x0C	; 12
    5b7e:	3d d6       	rcall	.+3194   	; 0x67fa <_ZN7TwoWire15endTransmissionEv>
    5b80:	28 2f       	mov	r18, r24
    5b82:	30 e0       	ldi	r19, 0x00	; 0
    5b84:	02 c0       	rjmp	.+4      	; 0x5b8a <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    5b86:	20 e0       	ldi	r18, 0x00	; 0
    5b88:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    5b8a:	81 e0       	ldi	r24, 0x01	; 1
    5b8c:	90 e0       	ldi	r25, 0x00	; 0
    5b8e:	23 2b       	or	r18, r19
    5b90:	11 f0       	breq	.+4      	; 0x5b96 <_ZN5I2CIO5writeEh+0x42>
    5b92:	80 e0       	ldi	r24, 0x00	; 0
    5b94:	90 e0       	ldi	r25, 0x00	; 0
}
    5b96:	df 91       	pop	r29
    5b98:	cf 91       	pop	r28
    5b9a:	08 95       	ret

00005b9c <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    5b9c:	08 95       	ret

00005b9e <_ZN3LCD12setBacklightEh>:
    5b9e:	08 95       	ret

00005ba0 <_ZN3LCD5writeEh>:
    5ba0:	dc 01       	movw	r26, r24
    5ba2:	ed 91       	ld	r30, X+
    5ba4:	fc 91       	ld	r31, X
    5ba6:	06 84       	ldd	r0, Z+14	; 0x0e
    5ba8:	f7 85       	ldd	r31, Z+15	; 0x0f
    5baa:	e0 2d       	mov	r30, r0
    5bac:	41 e0       	ldi	r20, 0x01	; 1
    5bae:	09 95       	icall
    5bb0:	81 e0       	ldi	r24, 0x01	; 1
    5bb2:	90 e0       	ldi	r25, 0x00	; 0
    5bb4:	08 95       	ret

00005bb6 <_ZN3LCDC1Ev>:
    5bb6:	fc 01       	movw	r30, r24
    5bb8:	13 82       	std	Z+3, r1	; 0x03
    5bba:	12 82       	std	Z+2, r1	; 0x02
    5bbc:	26 e8       	ldi	r18, 0x86	; 134
    5bbe:	39 e0       	ldi	r19, 0x09	; 9
    5bc0:	31 83       	std	Z+1, r19	; 0x01
    5bc2:	20 83       	st	Z, r18
    5bc4:	08 95       	ret

00005bc6 <_ZN3LCD9backlightEv>:
    5bc6:	dc 01       	movw	r26, r24
    5bc8:	ed 91       	ld	r30, X+
    5bca:	fc 91       	ld	r31, X
    5bcc:	04 84       	ldd	r0, Z+12	; 0x0c
    5bce:	f5 85       	ldd	r31, Z+13	; 0x0d
    5bd0:	e0 2d       	mov	r30, r0
    5bd2:	6f ef       	ldi	r22, 0xFF	; 255
    5bd4:	09 94       	ijmp

00005bd6 <_ZN3LCD11noBacklightEv>:
    5bd6:	dc 01       	movw	r26, r24
    5bd8:	ed 91       	ld	r30, X+
    5bda:	fc 91       	ld	r31, X
    5bdc:	04 84       	ldd	r0, Z+12	; 0x0c
    5bde:	f5 85       	ldd	r31, Z+13	; 0x0d
    5be0:	e0 2d       	mov	r30, r0
    5be2:	60 e0       	ldi	r22, 0x00	; 0
    5be4:	09 94       	ijmp

00005be6 <_ZN3LCD7commandEh>:
    5be6:	dc 01       	movw	r26, r24
    5be8:	ed 91       	ld	r30, X+
    5bea:	fc 91       	ld	r31, X
    5bec:	06 84       	ldd	r0, Z+14	; 0x0e
    5bee:	f7 85       	ldd	r31, Z+15	; 0x0f
    5bf0:	e0 2d       	mov	r30, r0
    5bf2:	40 e0       	ldi	r20, 0x00	; 0
    5bf4:	09 94       	ijmp

00005bf6 <_ZN3LCD5clearEv>:
    5bf6:	61 e0       	ldi	r22, 0x01	; 1
    5bf8:	f6 df       	rcall	.-20     	; 0x5be6 <_ZN3LCD7commandEh>
    5bfa:	80 ed       	ldi	r24, 0xD0	; 208
    5bfc:	97 e0       	ldi	r25, 0x07	; 7
    5bfe:	0c 94 19 38 	jmp	0x7032	; 0x7032 <delayMicroseconds>

00005c02 <_ZN3LCD9setCursorEhh>:
    5c02:	cf 93       	push	r28
    5c04:	df 93       	push	r29
    5c06:	cd b7       	in	r28, 0x3d	; 61
    5c08:	de b7       	in	r29, 0x3e	; 62
    5c0a:	28 97       	sbiw	r28, 0x08	; 8
    5c0c:	0f b6       	in	r0, 0x3f	; 63
    5c0e:	f8 94       	cli
    5c10:	de bf       	out	0x3e, r29	; 62
    5c12:	0f be       	out	0x3f, r0	; 63
    5c14:	cd bf       	out	0x3d, r28	; 61
    5c16:	fc 01       	movw	r30, r24
    5c18:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <_ZN14EthernetClient8_srcportE+0x68>
    5c1c:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <_ZN14EthernetClient8_srcportE+0x69>
    5c20:	a0 91 cf 01 	lds	r26, 0x01CF	; 0x8001cf <_ZN14EthernetClient8_srcportE+0x6a>
    5c24:	b0 91 d0 01 	lds	r27, 0x01D0	; 0x8001d0 <_ZN14EthernetClient8_srcportE+0x6b>
    5c28:	8d 83       	std	Y+5, r24	; 0x05
    5c2a:	9e 83       	std	Y+6, r25	; 0x06
    5c2c:	af 83       	std	Y+7, r26	; 0x07
    5c2e:	b8 87       	std	Y+8, r27	; 0x08
    5c30:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <_ZN14EthernetClient8_srcportE+0x6c>
    5c34:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <_ZN14EthernetClient8_srcportE+0x6d>
    5c38:	a0 91 d3 01 	lds	r26, 0x01D3	; 0x8001d3 <_ZN14EthernetClient8_srcportE+0x6e>
    5c3c:	b0 91 d4 01 	lds	r27, 0x01D4	; 0x8001d4 <_ZN14EthernetClient8_srcportE+0x6f>
    5c40:	89 83       	std	Y+1, r24	; 0x01
    5c42:	9a 83       	std	Y+2, r25	; 0x02
    5c44:	ab 83       	std	Y+3, r26	; 0x03
    5c46:	bc 83       	std	Y+4, r27	; 0x04
    5c48:	87 81       	ldd	r24, Z+7	; 0x07
    5c4a:	48 17       	cp	r20, r24
    5c4c:	10 f0       	brcs	.+4      	; 0x5c52 <_ZN3LCD9setCursorEhh+0x50>
    5c4e:	4f ef       	ldi	r20, 0xFF	; 255
    5c50:	48 0f       	add	r20, r24
    5c52:	90 85       	ldd	r25, Z+8	; 0x08
    5c54:	50 e0       	ldi	r21, 0x00	; 0
    5c56:	de 01       	movw	r26, r28
    5c58:	a4 0f       	add	r26, r20
    5c5a:	b5 1f       	adc	r27, r21
    5c5c:	90 31       	cpi	r25, 0x10	; 16
    5c5e:	29 f4       	brne	.+10     	; 0x5c6a <_ZN3LCD9setCursorEhh+0x68>
    5c60:	84 30       	cpi	r24, 0x04	; 4
    5c62:	19 f4       	brne	.+6      	; 0x5c6a <_ZN3LCD9setCursorEhh+0x68>
    5c64:	11 96       	adiw	r26, 0x01	; 1
    5c66:	9c 91       	ld	r25, X
    5c68:	02 c0       	rjmp	.+4      	; 0x5c6e <_ZN3LCD9setCursorEhh+0x6c>
    5c6a:	15 96       	adiw	r26, 0x05	; 5
    5c6c:	9c 91       	ld	r25, X
    5c6e:	69 0f       	add	r22, r25
    5c70:	60 68       	ori	r22, 0x80	; 128
    5c72:	cf 01       	movw	r24, r30
    5c74:	28 96       	adiw	r28, 0x08	; 8
    5c76:	0f b6       	in	r0, 0x3f	; 63
    5c78:	f8 94       	cli
    5c7a:	de bf       	out	0x3e, r29	; 62
    5c7c:	0f be       	out	0x3f, r0	; 63
    5c7e:	cd bf       	out	0x3d, r28	; 61
    5c80:	df 91       	pop	r29
    5c82:	cf 91       	pop	r28
    5c84:	b0 cf       	rjmp	.-160    	; 0x5be6 <_ZN3LCD7commandEh>

00005c86 <_ZN3LCD9noDisplayEv>:
    5c86:	fc 01       	movw	r30, r24
    5c88:	65 81       	ldd	r22, Z+5	; 0x05
    5c8a:	6b 7f       	andi	r22, 0xFB	; 251
    5c8c:	65 83       	std	Z+5, r22	; 0x05
    5c8e:	68 60       	ori	r22, 0x08	; 8
    5c90:	aa cf       	rjmp	.-172    	; 0x5be6 <_ZN3LCD7commandEh>

00005c92 <_ZN3LCD7displayEv>:
    5c92:	fc 01       	movw	r30, r24
    5c94:	65 81       	ldd	r22, Z+5	; 0x05
    5c96:	26 2f       	mov	r18, r22
    5c98:	24 60       	ori	r18, 0x04	; 4
    5c9a:	25 83       	std	Z+5, r18	; 0x05
    5c9c:	6c 60       	ori	r22, 0x0C	; 12
    5c9e:	a3 cf       	rjmp	.-186    	; 0x5be6 <_ZN3LCD7commandEh>

00005ca0 <_ZN3LCD5beginEhhh>:
    5ca0:	cf 93       	push	r28
    5ca2:	df 93       	push	r29
    5ca4:	ec 01       	movw	r28, r24
    5ca6:	42 30       	cpi	r20, 0x02	; 2
    5ca8:	18 f0       	brcs	.+6      	; 0x5cb0 <_ZN3LCD5beginEhhh+0x10>
    5caa:	8c 81       	ldd	r24, Y+4	; 0x04
    5cac:	88 60       	ori	r24, 0x08	; 8
    5cae:	8c 83       	std	Y+4, r24	; 0x04
    5cb0:	4f 83       	std	Y+7, r20	; 0x07
    5cb2:	68 87       	std	Y+8, r22	; 0x08
    5cb4:	22 23       	and	r18, r18
    5cb6:	29 f0       	breq	.+10     	; 0x5cc2 <_ZN3LCD5beginEhhh+0x22>
    5cb8:	41 30       	cpi	r20, 0x01	; 1
    5cba:	19 f4       	brne	.+6      	; 0x5cc2 <_ZN3LCD5beginEhhh+0x22>
    5cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    5cbe:	84 60       	ori	r24, 0x04	; 4
    5cc0:	8c 83       	std	Y+4, r24	; 0x04
    5cc2:	64 e6       	ldi	r22, 0x64	; 100
    5cc4:	70 e0       	ldi	r23, 0x00	; 0
    5cc6:	80 e0       	ldi	r24, 0x00	; 0
    5cc8:	90 e0       	ldi	r25, 0x00	; 0
    5cca:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <delay>
    5cce:	6c 81       	ldd	r22, Y+4	; 0x04
    5cd0:	64 fd       	sbrc	r22, 4
    5cd2:	31 c0       	rjmp	.+98     	; 0x5d36 <_ZN3LCD5beginEhhh+0x96>
    5cd4:	e8 81       	ld	r30, Y
    5cd6:	f9 81       	ldd	r31, Y+1	; 0x01
    5cd8:	06 84       	ldd	r0, Z+14	; 0x0e
    5cda:	f7 85       	ldd	r31, Z+15	; 0x0f
    5cdc:	e0 2d       	mov	r30, r0
    5cde:	42 e0       	ldi	r20, 0x02	; 2
    5ce0:	63 e0       	ldi	r22, 0x03	; 3
    5ce2:	ce 01       	movw	r24, r28
    5ce4:	09 95       	icall
    5ce6:	84 e9       	ldi	r24, 0x94	; 148
    5ce8:	91 e1       	ldi	r25, 0x11	; 17
    5cea:	0e 94 19 38 	call	0x7032	; 0x7032 <delayMicroseconds>
    5cee:	e8 81       	ld	r30, Y
    5cf0:	f9 81       	ldd	r31, Y+1	; 0x01
    5cf2:	06 84       	ldd	r0, Z+14	; 0x0e
    5cf4:	f7 85       	ldd	r31, Z+15	; 0x0f
    5cf6:	e0 2d       	mov	r30, r0
    5cf8:	42 e0       	ldi	r20, 0x02	; 2
    5cfa:	63 e0       	ldi	r22, 0x03	; 3
    5cfc:	ce 01       	movw	r24, r28
    5cfe:	09 95       	icall
    5d00:	86 e9       	ldi	r24, 0x96	; 150
    5d02:	90 e0       	ldi	r25, 0x00	; 0
    5d04:	0e 94 19 38 	call	0x7032	; 0x7032 <delayMicroseconds>
    5d08:	e8 81       	ld	r30, Y
    5d0a:	f9 81       	ldd	r31, Y+1	; 0x01
    5d0c:	06 84       	ldd	r0, Z+14	; 0x0e
    5d0e:	f7 85       	ldd	r31, Z+15	; 0x0f
    5d10:	e0 2d       	mov	r30, r0
    5d12:	42 e0       	ldi	r20, 0x02	; 2
    5d14:	63 e0       	ldi	r22, 0x03	; 3
    5d16:	ce 01       	movw	r24, r28
    5d18:	09 95       	icall
    5d1a:	86 e9       	ldi	r24, 0x96	; 150
    5d1c:	90 e0       	ldi	r25, 0x00	; 0
    5d1e:	0e 94 19 38 	call	0x7032	; 0x7032 <delayMicroseconds>
    5d22:	e8 81       	ld	r30, Y
    5d24:	f9 81       	ldd	r31, Y+1	; 0x01
    5d26:	06 84       	ldd	r0, Z+14	; 0x0e
    5d28:	f7 85       	ldd	r31, Z+15	; 0x0f
    5d2a:	e0 2d       	mov	r30, r0
    5d2c:	42 e0       	ldi	r20, 0x02	; 2
    5d2e:	62 e0       	ldi	r22, 0x02	; 2
    5d30:	ce 01       	movw	r24, r28
    5d32:	09 95       	icall
    5d34:	13 c0       	rjmp	.+38     	; 0x5d5c <_ZN3LCD5beginEhhh+0xbc>
    5d36:	60 62       	ori	r22, 0x20	; 32
    5d38:	ce 01       	movw	r24, r28
    5d3a:	55 df       	rcall	.-342    	; 0x5be6 <_ZN3LCD7commandEh>
    5d3c:	84 e9       	ldi	r24, 0x94	; 148
    5d3e:	91 e1       	ldi	r25, 0x11	; 17
    5d40:	0e 94 19 38 	call	0x7032	; 0x7032 <delayMicroseconds>
    5d44:	6c 81       	ldd	r22, Y+4	; 0x04
    5d46:	60 62       	ori	r22, 0x20	; 32
    5d48:	ce 01       	movw	r24, r28
    5d4a:	4d df       	rcall	.-358    	; 0x5be6 <_ZN3LCD7commandEh>
    5d4c:	86 e9       	ldi	r24, 0x96	; 150
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	0e 94 19 38 	call	0x7032	; 0x7032 <delayMicroseconds>
    5d54:	6c 81       	ldd	r22, Y+4	; 0x04
    5d56:	60 62       	ori	r22, 0x20	; 32
    5d58:	ce 01       	movw	r24, r28
    5d5a:	45 df       	rcall	.-374    	; 0x5be6 <_ZN3LCD7commandEh>
    5d5c:	86 e9       	ldi	r24, 0x96	; 150
    5d5e:	90 e0       	ldi	r25, 0x00	; 0
    5d60:	0e 94 19 38 	call	0x7032	; 0x7032 <delayMicroseconds>
    5d64:	6c 81       	ldd	r22, Y+4	; 0x04
    5d66:	60 62       	ori	r22, 0x20	; 32
    5d68:	ce 01       	movw	r24, r28
    5d6a:	3d df       	rcall	.-390    	; 0x5be6 <_ZN3LCD7commandEh>
    5d6c:	8c e3       	ldi	r24, 0x3C	; 60
    5d6e:	90 e0       	ldi	r25, 0x00	; 0
    5d70:	0e 94 19 38 	call	0x7032	; 0x7032 <delayMicroseconds>
    5d74:	84 e0       	ldi	r24, 0x04	; 4
    5d76:	8d 83       	std	Y+5, r24	; 0x05
    5d78:	ce 01       	movw	r24, r28
    5d7a:	8b df       	rcall	.-234    	; 0x5c92 <_ZN3LCD7displayEv>
    5d7c:	ce 01       	movw	r24, r28
    5d7e:	3b df       	rcall	.-394    	; 0x5bf6 <_ZN3LCD5clearEv>
    5d80:	82 e0       	ldi	r24, 0x02	; 2
    5d82:	8e 83       	std	Y+6, r24	; 0x06
    5d84:	66 e0       	ldi	r22, 0x06	; 6
    5d86:	ce 01       	movw	r24, r28
    5d88:	2e df       	rcall	.-420    	; 0x5be6 <_ZN3LCD7commandEh>
    5d8a:	ce 01       	movw	r24, r28
    5d8c:	df 91       	pop	r29
    5d8e:	cf 91       	pop	r28
    5d90:	1a cf       	rjmp	.-460    	; 0x5bc6 <_ZN3LCD9backlightEv>

00005d92 <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    5d92:	ef 92       	push	r14
    5d94:	ff 92       	push	r15
    5d96:	0f 93       	push	r16
    5d98:	1f 93       	push	r17
    5d9a:	cf 93       	push	r28
    5d9c:	df 93       	push	r29
    5d9e:	8c 01       	movw	r16, r24
    5da0:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    5da2:	67 70       	andi	r22, 0x07	; 7
    5da4:	88 e0       	ldi	r24, 0x08	; 8
    5da6:	68 9f       	mul	r22, r24
    5da8:	b0 01       	movw	r22, r0
    5daa:	11 24       	eor	r1, r1
    5dac:	60 64       	ori	r22, 0x40	; 64
    5dae:	c8 01       	movw	r24, r16
    5db0:	1a df       	rcall	.-460    	; 0x5be6 <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    5db2:	8e e1       	ldi	r24, 0x1E	; 30
    5db4:	90 e0       	ldi	r25, 0x00	; 0
    5db6:	0e 94 19 38 	call	0x7032	; 0x7032 <delayMicroseconds>
    5dba:	e7 01       	movw	r28, r14
    5dbc:	a8 e0       	ldi	r26, 0x08	; 8
    5dbe:	ea 0e       	add	r14, r26
    5dc0:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    5dc2:	69 91       	ld	r22, Y+
    5dc4:	d8 01       	movw	r26, r16
    5dc6:	ed 91       	ld	r30, X+
    5dc8:	fc 91       	ld	r31, X
    5dca:	01 90       	ld	r0, Z+
    5dcc:	f0 81       	ld	r31, Z
    5dce:	e0 2d       	mov	r30, r0
    5dd0:	c8 01       	movw	r24, r16
    5dd2:	09 95       	icall
      delayMicroseconds(40);
    5dd4:	88 e2       	ldi	r24, 0x28	; 40
    5dd6:	90 e0       	ldi	r25, 0x00	; 0
    5dd8:	0e 94 19 38 	call	0x7032	; 0x7032 <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    5ddc:	ce 15       	cp	r28, r14
    5dde:	df 05       	cpc	r29, r15
    5de0:	81 f7       	brne	.-32     	; 0x5dc2 <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    5de2:	df 91       	pop	r29
    5de4:	cf 91       	pop	r28
    5de6:	1f 91       	pop	r17
    5de8:	0f 91       	pop	r16
    5dea:	ff 90       	pop	r15
    5dec:	ef 90       	pop	r14
    5dee:	08 95       	ret

00005df0 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    5df0:	21 e0       	ldi	r18, 0x01	; 1
    5df2:	01 c0       	rjmp	.+2      	; 0x5df6 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    5df4:	22 0f       	add	r18, r18
    5df6:	6a 95       	dec	r22
    5df8:	ea f7       	brpl	.-6      	; 0x5df4 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    5dfa:	dc 01       	movw	r26, r24
    5dfc:	1b 96       	adiw	r26, 0x0b	; 11
    5dfe:	2c 93       	st	X, r18
    5e00:	1b 97       	sbiw	r26, 0x0b	; 11
    5e02:	19 96       	adiw	r26, 0x09	; 9
    5e04:	4c 93       	st	X, r20
    5e06:	19 97       	sbiw	r26, 0x09	; 9
    5e08:	ed 91       	ld	r30, X+
    5e0a:	fc 91       	ld	r31, X
    5e0c:	04 84       	ldd	r0, Z+12	; 0x0c
    5e0e:	f5 85       	ldd	r31, Z+13	; 0x0d
    5e10:	e0 2d       	mov	r30, r0
    5e12:	60 e0       	ldi	r22, 0x00	; 0
    5e14:	09 94       	ijmp

00005e16 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    5e16:	fc 01       	movw	r30, r24
    5e18:	83 85       	ldd	r24, Z+11	; 0x0b
    5e1a:	88 23       	and	r24, r24
    5e1c:	89 f0       	breq	.+34     	; 0x5e40 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    5e1e:	91 85       	ldd	r25, Z+9	; 0x09
    5e20:	91 11       	cpse	r25, r1
    5e22:	03 c0       	rjmp	.+6      	; 0x5e2a <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    5e24:	61 11       	cpse	r22, r1
    5e26:	05 c0       	rjmp	.+10     	; 0x5e32 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    5e28:	06 c0       	rjmp	.+12     	; 0x5e36 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    5e2a:	91 30       	cpi	r25, 0x01	; 1
    5e2c:	21 f4       	brne	.+8      	; 0x5e36 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    5e2e:	61 11       	cpse	r22, r1
    5e30:	02 c0       	rjmp	.+4      	; 0x5e36 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    5e32:	84 87       	std	Z+12, r24	; 0x0c
    5e34:	01 c0       	rjmp	.+2      	; 0x5e38 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    5e36:	14 86       	std	Z+12, r1	; 0x0c
    5e38:	64 85       	ldd	r22, Z+12	; 0x0c
    5e3a:	cf 01       	movw	r24, r30
    5e3c:	0d 96       	adiw	r24, 0x0d	; 13
    5e3e:	8a ce       	rjmp	.-748    	; 0x5b54 <_ZN5I2CIO5writeEh>
    5e40:	08 95       	ret

00005e42 <_ZN17LiquidCrystal_I2C4initEv>:
    5e42:	0f 93       	push	r16
    5e44:	1f 93       	push	r17
    5e46:	cf 93       	push	r28
    5e48:	df 93       	push	r29
    5e4a:	8c 01       	movw	r16, r24
    5e4c:	ec 01       	movw	r28, r24
    5e4e:	2d 96       	adiw	r28, 0x0d	; 13
    5e50:	fc 01       	movw	r30, r24
    5e52:	62 85       	ldd	r22, Z+10	; 0x0a
    5e54:	ce 01       	movw	r24, r28
    5e56:	68 de       	rcall	.-816    	; 0x5b28 <_ZN5I2CIO5beginEh>
    5e58:	01 97       	sbiw	r24, 0x01	; 1
    5e5a:	59 f4       	brne	.+22     	; 0x5e72 <_ZN17LiquidCrystal_I2C4initEv+0x30>
    5e5c:	61 e0       	ldi	r22, 0x01	; 1
    5e5e:	ce 01       	movw	r24, r28
    5e60:	4d de       	rcall	.-870    	; 0x5afc <_ZN5I2CIO8portModeEh>
    5e62:	f8 01       	movw	r30, r16
    5e64:	14 82       	std	Z+4, r1	; 0x04
    5e66:	60 e0       	ldi	r22, 0x00	; 0
    5e68:	ce 01       	movw	r24, r28
    5e6a:	74 de       	rcall	.-792    	; 0x5b54 <_ZN5I2CIO5writeEh>
    5e6c:	81 e0       	ldi	r24, 0x01	; 1
    5e6e:	90 e0       	ldi	r25, 0x00	; 0
    5e70:	02 c0       	rjmp	.+4      	; 0x5e76 <_ZN17LiquidCrystal_I2C4initEv+0x34>
    5e72:	80 e0       	ldi	r24, 0x00	; 0
    5e74:	90 e0       	ldi	r25, 0x00	; 0
    5e76:	df 91       	pop	r29
    5e78:	cf 91       	pop	r28
    5e7a:	1f 91       	pop	r17
    5e7c:	0f 91       	pop	r16
    5e7e:	08 95       	ret

00005e80 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    5e80:	8f 92       	push	r8
    5e82:	af 92       	push	r10
    5e84:	cf 92       	push	r12
    5e86:	ef 92       	push	r14
    5e88:	0f 93       	push	r16
    5e8a:	cf 93       	push	r28
    5e8c:	df 93       	push	r29
    5e8e:	cd b7       	in	r28, 0x3d	; 61
    5e90:	de b7       	in	r29, 0x3e	; 62
    5e92:	fc 01       	movw	r30, r24
    5e94:	62 87       	std	Z+10, r22	; 0x0a
    5e96:	13 86       	std	Z+11, r1	; 0x0b
    5e98:	14 86       	std	Z+12, r1	; 0x0c
    5e9a:	11 86       	std	Z+9, r1	; 0x09
    5e9c:	81 e0       	ldi	r24, 0x01	; 1
    5e9e:	98 2f       	mov	r25, r24
    5ea0:	01 c0       	rjmp	.+2      	; 0x5ea4 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    5ea2:	99 0f       	add	r25, r25
    5ea4:	4a 95       	dec	r20
    5ea6:	ea f7       	brpl	.-6      	; 0x5ea2 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    5ea8:	91 8b       	std	Z+17, r25	; 0x11
    5eaa:	98 2f       	mov	r25, r24
    5eac:	01 c0       	rjmp	.+2      	; 0x5eb0 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    5eae:	99 0f       	add	r25, r25
    5eb0:	2a 95       	dec	r18
    5eb2:	ea f7       	brpl	.-6      	; 0x5eae <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    5eb4:	92 8b       	std	Z+18, r25	; 0x12
    5eb6:	98 2f       	mov	r25, r24
    5eb8:	01 c0       	rjmp	.+2      	; 0x5ebc <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    5eba:	99 0f       	add	r25, r25
    5ebc:	0a 95       	dec	r16
    5ebe:	ea f7       	brpl	.-6      	; 0x5eba <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    5ec0:	93 8b       	std	Z+19, r25	; 0x13
    5ec2:	98 2f       	mov	r25, r24
    5ec4:	01 c0       	rjmp	.+2      	; 0x5ec8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    5ec6:	99 0f       	add	r25, r25
    5ec8:	ea 94       	dec	r14
    5eca:	ea f7       	brpl	.-6      	; 0x5ec6 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    5ecc:	94 8b       	std	Z+20, r25	; 0x14
    5ece:	98 2f       	mov	r25, r24
    5ed0:	01 c0       	rjmp	.+2      	; 0x5ed4 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    5ed2:	99 0f       	add	r25, r25
    5ed4:	ca 94       	dec	r12
    5ed6:	ea f7       	brpl	.-6      	; 0x5ed2 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    5ed8:	95 8b       	std	Z+21, r25	; 0x15
    5eda:	98 2f       	mov	r25, r24
    5edc:	01 c0       	rjmp	.+2      	; 0x5ee0 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    5ede:	99 0f       	add	r25, r25
    5ee0:	aa 94       	dec	r10
    5ee2:	ea f7       	brpl	.-6      	; 0x5ede <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    5ee4:	96 8b       	std	Z+22, r25	; 0x16
    5ee6:	01 c0       	rjmp	.+2      	; 0x5eea <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    5ee8:	88 0f       	add	r24, r24
    5eea:	8a 94       	dec	r8
    5eec:	ea f7       	brpl	.-6      	; 0x5ee8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    5eee:	87 8b       	std	Z+23, r24	; 0x17
    5ef0:	df 91       	pop	r29
    5ef2:	cf 91       	pop	r28
    5ef4:	0f 91       	pop	r16
    5ef6:	ef 90       	pop	r14
    5ef8:	cf 90       	pop	r12
    5efa:	af 90       	pop	r10
    5efc:	8f 90       	pop	r8
    5efe:	08 95       	ret

00005f00 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    5f00:	6f 92       	push	r6
    5f02:	7f 92       	push	r7
    5f04:	8f 92       	push	r8
    5f06:	9f 92       	push	r9
    5f08:	af 92       	push	r10
    5f0a:	bf 92       	push	r11
    5f0c:	cf 92       	push	r12
    5f0e:	df 92       	push	r13
    5f10:	ef 92       	push	r14
    5f12:	ff 92       	push	r15
    5f14:	0f 93       	push	r16
    5f16:	1f 93       	push	r17
    5f18:	cf 93       	push	r28
    5f1a:	df 93       	push	r29
    5f1c:	cd b7       	in	r28, 0x3d	; 61
    5f1e:	de b7       	in	r29, 0x3e	; 62
    5f20:	3c 01       	movw	r6, r24
    5f22:	d6 2e       	mov	r13, r22
    5f24:	b4 2e       	mov	r11, r20
    5f26:	92 2e       	mov	r9, r18
    5f28:	19 89       	ldd	r17, Y+17	; 0x11
    5f2a:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    5f2c:	44 de       	rcall	.-888    	; 0x5bb6 <_ZN3LCDC1Ev>
    5f2e:	8a e9       	ldi	r24, 0x9A	; 154
    5f30:	99 e0       	ldi	r25, 0x09	; 9
    5f32:	f3 01       	movw	r30, r6
    5f34:	91 83       	std	Z+1, r25	; 0x01
    5f36:	80 83       	st	Z, r24
    5f38:	c3 01       	movw	r24, r6
    5f3a:	0d 96       	adiw	r24, 0x0d	; 13
    5f3c:	d8 dd       	rcall	.-1104   	; 0x5aee <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    5f3e:	29 2d       	mov	r18, r9
    5f40:	4b 2d       	mov	r20, r11
    5f42:	6d 2d       	mov	r22, r13
    5f44:	c3 01       	movw	r24, r6
    5f46:	9c df       	rcall	.-200    	; 0x5e80 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    5f48:	4f 2d       	mov	r20, r15
    5f4a:	61 2f       	mov	r22, r17
    5f4c:	c3 01       	movw	r24, r6
}
    5f4e:	df 91       	pop	r29
    5f50:	cf 91       	pop	r28
    5f52:	1f 91       	pop	r17
    5f54:	0f 91       	pop	r16
    5f56:	ff 90       	pop	r15
    5f58:	ef 90       	pop	r14
    5f5a:	df 90       	pop	r13
    5f5c:	cf 90       	pop	r12
    5f5e:	bf 90       	pop	r11
    5f60:	af 90       	pop	r10
    5f62:	9f 90       	pop	r9
    5f64:	8f 90       	pop	r8
    5f66:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    5f68:	6f 90       	pop	r6
    5f6a:	42 cf       	rjmp	.-380    	; 0x5df0 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

00005f6c <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    5f6c:	ef 92       	push	r14
    5f6e:	ff 92       	push	r15
    5f70:	0f 93       	push	r16
    5f72:	1f 93       	push	r17
    5f74:	cf 93       	push	r28
    5f76:	8c 01       	movw	r16, r24
    5f78:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    5f7a:	7c 01       	movw	r14, r24
    5f7c:	8d e0       	ldi	r24, 0x0D	; 13
    5f7e:	e8 0e       	add	r14, r24
    5f80:	f1 1c       	adc	r15, r1
    5f82:	f8 01       	movw	r30, r16
    5f84:	61 89       	ldd	r22, Z+17	; 0x11
    5f86:	6c 2b       	or	r22, r28
    5f88:	c7 01       	movw	r24, r14
    5f8a:	e4 dd       	rcall	.-1080   	; 0x5b54 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    5f8c:	f8 01       	movw	r30, r16
    5f8e:	61 89       	ldd	r22, Z+17	; 0x11
    5f90:	60 95       	com	r22
    5f92:	6c 23       	and	r22, r28
    5f94:	c7 01       	movw	r24, r14
    5f96:	cf 91       	pop	r28
    5f98:	1f 91       	pop	r17
    5f9a:	0f 91       	pop	r16
    5f9c:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    5f9e:	ef 90       	pop	r14
    5fa0:	d9 cd       	rjmp	.-1102   	; 0x5b54 <_ZN5I2CIO5writeEh>

00005fa2 <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    5fa2:	fc 01       	movw	r30, r24
    5fa4:	96 2f       	mov	r25, r22
    5fa6:	df 01       	movw	r26, r30
    5fa8:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    5faa:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    5fac:	90 ff       	sbrs	r25, 0
    5fae:	04 c0       	rjmp	.+8      	; 0x5fb8 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    5fb0:	54 96       	adiw	r26, 0x14	; 20
    5fb2:	2c 91       	ld	r18, X
    5fb4:	54 97       	sbiw	r26, 0x14	; 20
    5fb6:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    5fb8:	96 95       	lsr	r25
    5fba:	81 50       	subi	r24, 0x01	; 1
    5fbc:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    5fbe:	81 11       	cpse	r24, r1
    5fc0:	f5 cf       	rjmp	.-22     	; 0x5fac <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    5fc2:	41 30       	cpi	r20, 0x01	; 1
    5fc4:	09 f4       	brne	.+2      	; 0x5fc8 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    5fc6:	43 89       	ldd	r20, Z+19	; 0x13
    5fc8:	94 85       	ldd	r25, Z+12	; 0x0c
    5fca:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    5fcc:	64 2b       	or	r22, r20
    5fce:	cf 01       	movw	r24, r30
    5fd0:	cd cf       	rjmp	.-102    	; 0x5f6c <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00005fd2 <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    5fd2:	0f 93       	push	r16
    5fd4:	1f 93       	push	r17
    5fd6:	cf 93       	push	r28
    5fd8:	df 93       	push	r29
    5fda:	06 2f       	mov	r16, r22
    5fdc:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    5fde:	42 30       	cpi	r20, 0x02	; 2
    5fe0:	19 f4       	brne	.+6      	; 0x5fe8 <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    5fe2:	40 e0       	ldi	r20, 0x00	; 0
    5fe4:	60 2f       	mov	r22, r16
    5fe6:	0d c0       	rjmp	.+26     	; 0x6002 <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    5fe8:	14 2f       	mov	r17, r20
    5fea:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    5fec:	70 e0       	ldi	r23, 0x00	; 0
    5fee:	84 e0       	ldi	r24, 0x04	; 4
    5ff0:	75 95       	asr	r23
    5ff2:	67 95       	ror	r22
    5ff4:	8a 95       	dec	r24
    5ff6:	e1 f7       	brne	.-8      	; 0x5ff0 <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    5ff8:	ce 01       	movw	r24, r28
    5ffa:	d3 df       	rcall	.-90     	; 0x5fa2 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    5ffc:	41 2f       	mov	r20, r17
    5ffe:	60 2f       	mov	r22, r16
    6000:	ce 01       	movw	r24, r28
   }
}
    6002:	df 91       	pop	r29
    6004:	cf 91       	pop	r28
    6006:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    6008:	0f 91       	pop	r16
    600a:	cb cf       	rjmp	.-106    	; 0x5fa2 <_ZN17LiquidCrystal_I2C10write4bitsEhh>

0000600c <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    600c:	ff 92       	push	r15
    600e:	0f 93       	push	r16
    6010:	1f 93       	push	r17
    6012:	cf 93       	push	r28
    6014:	df 93       	push	r29
    6016:	ec 01       	movw	r28, r24
    6018:	16 2f       	mov	r17, r22
    601a:	04 2f       	mov	r16, r20
    601c:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    601e:	11 df       	rcall	.-478    	; 0x5e42 <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    6020:	2f 2d       	mov	r18, r15
    6022:	40 2f       	mov	r20, r16
    6024:	61 2f       	mov	r22, r17
    6026:	ce 01       	movw	r24, r28
}
    6028:	df 91       	pop	r29
    602a:	cf 91       	pop	r28
    602c:	1f 91       	pop	r17
    602e:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    6030:	ff 90       	pop	r15
    6032:	36 ce       	rjmp	.-916    	; 0x5ca0 <_ZN3LCD5beginEhhh>

00006034 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    6034:	cf 93       	push	r28
  uint8_t sreg = SREG;
    6036:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    6038:	f8 94       	cli
  if (!initialized) {
    603a:	80 91 b9 0b 	lds	r24, 0x0BB9	; 0x800bb9 <_ZN8SPIClass11initializedE>
    603e:	81 11       	cpse	r24, r1
    6040:	27 c0       	rjmp	.+78     	; 0x6090 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    6042:	ea e7       	ldi	r30, 0x7A	; 122
    6044:	f2 e0       	ldi	r31, 0x02	; 2
    6046:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    6048:	ea e5       	ldi	r30, 0x5A	; 90
    604a:	f2 e0       	ldi	r31, 0x02	; 2
    604c:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    604e:	e8 2f       	mov	r30, r24
    6050:	f0 e0       	ldi	r31, 0x00	; 0
    6052:	ee 0f       	add	r30, r30
    6054:	ff 1f       	adc	r31, r31
    6056:	ec 55       	subi	r30, 0x5C	; 92
    6058:	fd 4f       	sbci	r31, 0xFD	; 253
    605a:	a5 91       	lpm	r26, Z+
    605c:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    605e:	ec 91       	ld	r30, X
    6060:	e9 23       	and	r30, r25
    6062:	21 f4       	brne	.+8      	; 0x606c <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    6064:	61 e0       	ldi	r22, 0x01	; 1
    6066:	8a e0       	ldi	r24, 0x0A	; 10
    6068:	0e 94 c4 38 	call	0x7188	; 0x7188 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    606c:	61 e0       	ldi	r22, 0x01	; 1
    606e:	8a e0       	ldi	r24, 0x0A	; 10
    6070:	0e 94 88 38 	call	0x7110	; 0x7110 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    6074:	8c b5       	in	r24, 0x2c	; 44
    6076:	80 61       	ori	r24, 0x10	; 16
    6078:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    607a:	8c b5       	in	r24, 0x2c	; 44
    607c:	80 64       	ori	r24, 0x40	; 64
    607e:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    6080:	61 e0       	ldi	r22, 0x01	; 1
    6082:	8d e0       	ldi	r24, 0x0D	; 13
    6084:	0e 94 88 38 	call	0x7110	; 0x7110 <pinMode>
    pinMode(MOSI, OUTPUT);
    6088:	61 e0       	ldi	r22, 0x01	; 1
    608a:	8b e0       	ldi	r24, 0x0B	; 11
    608c:	0e 94 88 38 	call	0x7110	; 0x7110 <pinMode>
  }
  initialized++; // reference count
    6090:	80 91 b9 0b 	lds	r24, 0x0BB9	; 0x800bb9 <_ZN8SPIClass11initializedE>
    6094:	8f 5f       	subi	r24, 0xFF	; 255
    6096:	80 93 b9 0b 	sts	0x0BB9, r24	; 0x800bb9 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    609a:	cf bf       	out	0x3f, r28	; 63
}
    609c:	cf 91       	pop	r28
    609e:	08 95       	ret

000060a0 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    60a0:	10 92 27 0c 	sts	0x0C27, r1	; 0x800c27 <twi_state>
    60a4:	81 e0       	ldi	r24, 0x01	; 1
    60a6:	80 93 25 0c 	sts	0x0C25, r24	; 0x800c25 <twi_sendStop>
    60aa:	10 92 24 0c 	sts	0x0C24, r1	; 0x800c24 <twi_inRepStart>
    60ae:	61 e0       	ldi	r22, 0x01	; 1
    60b0:	8d e1       	ldi	r24, 0x1D	; 29
    60b2:	0e 94 c4 38 	call	0x7188	; 0x7188 <digitalWrite>
    60b6:	61 e0       	ldi	r22, 0x01	; 1
    60b8:	8c e1       	ldi	r24, 0x1C	; 28
    60ba:	0e 94 c4 38 	call	0x7188	; 0x7188 <digitalWrite>
    60be:	e9 eb       	ldi	r30, 0xB9	; 185
    60c0:	f0 e0       	ldi	r31, 0x00	; 0
    60c2:	80 81       	ld	r24, Z
    60c4:	8e 7f       	andi	r24, 0xFE	; 254
    60c6:	80 83       	st	Z, r24
    60c8:	80 81       	ld	r24, Z
    60ca:	8d 7f       	andi	r24, 0xFD	; 253
    60cc:	80 83       	st	Z, r24
    60ce:	88 e4       	ldi	r24, 0x48	; 72
    60d0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    60d4:	85 e4       	ldi	r24, 0x45	; 69
    60d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    60da:	08 95       	ret

000060dc <twi_disable>:
    60dc:	ec eb       	ldi	r30, 0xBC	; 188
    60de:	f0 e0       	ldi	r31, 0x00	; 0
    60e0:	80 81       	ld	r24, Z
    60e2:	8a 7b       	andi	r24, 0xBA	; 186
    60e4:	80 83       	st	Z, r24
    60e6:	60 e0       	ldi	r22, 0x00	; 0
    60e8:	8d e1       	ldi	r24, 0x1D	; 29
    60ea:	0e 94 c4 38 	call	0x7188	; 0x7188 <digitalWrite>
    60ee:	60 e0       	ldi	r22, 0x00	; 0
    60f0:	8c e1       	ldi	r24, 0x1C	; 28
    60f2:	0c 94 c4 38 	jmp	0x7188	; 0x7188 <digitalWrite>

000060f6 <twi_setFrequency>:
    60f6:	9b 01       	movw	r18, r22
    60f8:	ac 01       	movw	r20, r24
    60fa:	60 e0       	ldi	r22, 0x00	; 0
    60fc:	74 e2       	ldi	r23, 0x24	; 36
    60fe:	84 ef       	ldi	r24, 0xF4	; 244
    6100:	90 e0       	ldi	r25, 0x00	; 0
    6102:	0e 94 77 3d 	call	0x7aee	; 0x7aee <__udivmodsi4>
    6106:	da 01       	movw	r26, r20
    6108:	c9 01       	movw	r24, r18
    610a:	40 97       	sbiw	r24, 0x10	; 16
    610c:	a1 09       	sbc	r26, r1
    610e:	b1 09       	sbc	r27, r1
    6110:	b6 95       	lsr	r27
    6112:	a7 95       	ror	r26
    6114:	97 95       	ror	r25
    6116:	87 95       	ror	r24
    6118:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    611c:	08 95       	ret

0000611e <twi_readFrom>:
    611e:	41 32       	cpi	r20, 0x21	; 33
    6120:	08 f0       	brcs	.+2      	; 0x6124 <twi_readFrom+0x6>
    6122:	43 c0       	rjmp	.+134    	; 0x61aa <twi_readFrom+0x8c>
    6124:	90 91 27 0c 	lds	r25, 0x0C27	; 0x800c27 <twi_state>
    6128:	91 11       	cpse	r25, r1
    612a:	fc cf       	rjmp	.-8      	; 0x6124 <twi_readFrom+0x6>
    612c:	91 e0       	ldi	r25, 0x01	; 1
    612e:	90 93 27 0c 	sts	0x0C27, r25	; 0x800c27 <twi_state>
    6132:	20 93 25 0c 	sts	0x0C25, r18	; 0x800c25 <twi_sendStop>
    6136:	2f ef       	ldi	r18, 0xFF	; 255
    6138:	20 93 ba 0b 	sts	0x0BBA, r18	; 0x800bba <twi_error>
    613c:	10 92 ff 0b 	sts	0x0BFF, r1	; 0x800bff <twi_masterBufferIndex>
    6140:	24 0f       	add	r18, r20
    6142:	20 93 fe 0b 	sts	0x0BFE, r18	; 0x800bfe <twi_masterBufferLength>
    6146:	90 93 26 0c 	sts	0x0C26, r25	; 0x800c26 <twi_slarw>
    614a:	90 91 26 0c 	lds	r25, 0x0C26	; 0x800c26 <twi_slarw>
    614e:	88 0f       	add	r24, r24
    6150:	89 2b       	or	r24, r25
    6152:	80 93 26 0c 	sts	0x0C26, r24	; 0x800c26 <twi_slarw>
    6156:	80 91 24 0c 	lds	r24, 0x0C24	; 0x800c24 <twi_inRepStart>
    615a:	81 30       	cpi	r24, 0x01	; 1
    615c:	61 f4       	brne	.+24     	; 0x6176 <twi_readFrom+0x58>
    615e:	10 92 24 0c 	sts	0x0C24, r1	; 0x800c24 <twi_inRepStart>
    6162:	80 91 26 0c 	lds	r24, 0x0C26	; 0x800c26 <twi_slarw>
    6166:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    616a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    616e:	83 fd       	sbrc	r24, 3
    6170:	f8 cf       	rjmp	.-16     	; 0x6162 <twi_readFrom+0x44>
    6172:	85 ec       	ldi	r24, 0xC5	; 197
    6174:	01 c0       	rjmp	.+2      	; 0x6178 <twi_readFrom+0x5a>
    6176:	85 ee       	ldi	r24, 0xE5	; 229
    6178:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    617c:	80 91 27 0c 	lds	r24, 0x0C27	; 0x800c27 <twi_state>
    6180:	81 30       	cpi	r24, 0x01	; 1
    6182:	e1 f3       	breq	.-8      	; 0x617c <twi_readFrom+0x5e>
    6184:	80 91 ff 0b 	lds	r24, 0x0BFF	; 0x800bff <twi_masterBufferIndex>
    6188:	84 17       	cp	r24, r20
    618a:	10 f4       	brcc	.+4      	; 0x6190 <twi_readFrom+0x72>
    618c:	40 91 ff 0b 	lds	r20, 0x0BFF	; 0x800bff <twi_masterBufferIndex>
    6190:	a0 e0       	ldi	r26, 0x00	; 0
    6192:	bc e0       	ldi	r27, 0x0C	; 12
    6194:	96 2f       	mov	r25, r22
    6196:	fb 01       	movw	r30, r22
    6198:	8e 2f       	mov	r24, r30
    619a:	89 1b       	sub	r24, r25
    619c:	84 17       	cp	r24, r20
    619e:	18 f4       	brcc	.+6      	; 0x61a6 <twi_readFrom+0x88>
    61a0:	8d 91       	ld	r24, X+
    61a2:	81 93       	st	Z+, r24
    61a4:	f9 cf       	rjmp	.-14     	; 0x6198 <twi_readFrom+0x7a>
    61a6:	84 2f       	mov	r24, r20
    61a8:	08 95       	ret
    61aa:	80 e0       	ldi	r24, 0x00	; 0
    61ac:	08 95       	ret

000061ae <twi_writeTo>:
    61ae:	0f 93       	push	r16
    61b0:	41 32       	cpi	r20, 0x21	; 33
    61b2:	08 f0       	brcs	.+2      	; 0x61b6 <twi_writeTo+0x8>
    61b4:	4a c0       	rjmp	.+148    	; 0x624a <twi_writeTo+0x9c>
    61b6:	90 91 27 0c 	lds	r25, 0x0C27	; 0x800c27 <twi_state>
    61ba:	91 11       	cpse	r25, r1
    61bc:	fc cf       	rjmp	.-8      	; 0x61b6 <twi_writeTo+0x8>
    61be:	32 e0       	ldi	r19, 0x02	; 2
    61c0:	30 93 27 0c 	sts	0x0C27, r19	; 0x800c27 <twi_state>
    61c4:	00 93 25 0c 	sts	0x0C25, r16	; 0x800c25 <twi_sendStop>
    61c8:	3f ef       	ldi	r19, 0xFF	; 255
    61ca:	30 93 ba 0b 	sts	0x0BBA, r19	; 0x800bba <twi_error>
    61ce:	10 92 ff 0b 	sts	0x0BFF, r1	; 0x800bff <twi_masterBufferIndex>
    61d2:	40 93 fe 0b 	sts	0x0BFE, r20	; 0x800bfe <twi_masterBufferLength>
    61d6:	56 2f       	mov	r21, r22
    61d8:	a0 e0       	ldi	r26, 0x00	; 0
    61da:	bc e0       	ldi	r27, 0x0C	; 12
    61dc:	fb 01       	movw	r30, r22
    61de:	3e 2f       	mov	r19, r30
    61e0:	35 1b       	sub	r19, r21
    61e2:	34 17       	cp	r19, r20
    61e4:	18 f4       	brcc	.+6      	; 0x61ec <twi_writeTo+0x3e>
    61e6:	31 91       	ld	r19, Z+
    61e8:	3d 93       	st	X+, r19
    61ea:	f9 cf       	rjmp	.-14     	; 0x61de <twi_writeTo+0x30>
    61ec:	10 92 26 0c 	sts	0x0C26, r1	; 0x800c26 <twi_slarw>
    61f0:	30 91 26 0c 	lds	r19, 0x0C26	; 0x800c26 <twi_slarw>
    61f4:	88 0f       	add	r24, r24
    61f6:	83 2b       	or	r24, r19
    61f8:	80 93 26 0c 	sts	0x0C26, r24	; 0x800c26 <twi_slarw>
    61fc:	80 91 24 0c 	lds	r24, 0x0C24	; 0x800c24 <twi_inRepStart>
    6200:	81 30       	cpi	r24, 0x01	; 1
    6202:	61 f4       	brne	.+24     	; 0x621c <twi_writeTo+0x6e>
    6204:	10 92 24 0c 	sts	0x0C24, r1	; 0x800c24 <twi_inRepStart>
    6208:	80 91 26 0c 	lds	r24, 0x0C26	; 0x800c26 <twi_slarw>
    620c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6210:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6214:	83 fd       	sbrc	r24, 3
    6216:	f8 cf       	rjmp	.-16     	; 0x6208 <twi_writeTo+0x5a>
    6218:	85 ec       	ldi	r24, 0xC5	; 197
    621a:	01 c0       	rjmp	.+2      	; 0x621e <twi_writeTo+0x70>
    621c:	85 ee       	ldi	r24, 0xE5	; 229
    621e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6222:	22 23       	and	r18, r18
    6224:	21 f0       	breq	.+8      	; 0x622e <twi_writeTo+0x80>
    6226:	80 91 27 0c 	lds	r24, 0x0C27	; 0x800c27 <twi_state>
    622a:	82 30       	cpi	r24, 0x02	; 2
    622c:	d1 f3       	breq	.-12     	; 0x6222 <twi_writeTo+0x74>
    622e:	80 91 ba 0b 	lds	r24, 0x0BBA	; 0x800bba <twi_error>
    6232:	8f 3f       	cpi	r24, 0xFF	; 255
    6234:	79 f0       	breq	.+30     	; 0x6254 <twi_writeTo+0xa6>
    6236:	80 91 ba 0b 	lds	r24, 0x0BBA	; 0x800bba <twi_error>
    623a:	80 32       	cpi	r24, 0x20	; 32
    623c:	41 f0       	breq	.+16     	; 0x624e <twi_writeTo+0xa0>
    623e:	80 91 ba 0b 	lds	r24, 0x0BBA	; 0x800bba <twi_error>
    6242:	80 33       	cpi	r24, 0x30	; 48
    6244:	31 f0       	breq	.+12     	; 0x6252 <twi_writeTo+0xa4>
    6246:	94 e0       	ldi	r25, 0x04	; 4
    6248:	05 c0       	rjmp	.+10     	; 0x6254 <twi_writeTo+0xa6>
    624a:	91 e0       	ldi	r25, 0x01	; 1
    624c:	03 c0       	rjmp	.+6      	; 0x6254 <twi_writeTo+0xa6>
    624e:	92 e0       	ldi	r25, 0x02	; 2
    6250:	01 c0       	rjmp	.+2      	; 0x6254 <twi_writeTo+0xa6>
    6252:	93 e0       	ldi	r25, 0x03	; 3
    6254:	89 2f       	mov	r24, r25
    6256:	0f 91       	pop	r16
    6258:	08 95       	ret

0000625a <twi_transmit>:
    625a:	40 91 dc 0b 	lds	r20, 0x0BDC	; 0x800bdc <twi_txBufferLength>
    625e:	26 2f       	mov	r18, r22
    6260:	30 e0       	ldi	r19, 0x00	; 0
    6262:	24 0f       	add	r18, r20
    6264:	31 1d       	adc	r19, r1
    6266:	21 32       	cpi	r18, 0x21	; 33
    6268:	31 05       	cpc	r19, r1
    626a:	dc f4       	brge	.+54     	; 0x62a2 <twi_transmit+0x48>
    626c:	20 91 27 0c 	lds	r18, 0x0C27	; 0x800c27 <twi_state>
    6270:	24 30       	cpi	r18, 0x04	; 4
    6272:	c9 f4       	brne	.+50     	; 0x62a6 <twi_transmit+0x4c>
    6274:	fc 01       	movw	r30, r24
    6276:	80 e0       	ldi	r24, 0x00	; 0
    6278:	90 e0       	ldi	r25, 0x00	; 0
    627a:	86 17       	cp	r24, r22
    627c:	58 f4       	brcc	.+22     	; 0x6294 <twi_transmit+0x3a>
    627e:	30 91 dc 0b 	lds	r19, 0x0BDC	; 0x800bdc <twi_txBufferLength>
    6282:	21 91       	ld	r18, Z+
    6284:	dc 01       	movw	r26, r24
    6286:	a2 52       	subi	r26, 0x22	; 34
    6288:	b4 4f       	sbci	r27, 0xF4	; 244
    628a:	a3 0f       	add	r26, r19
    628c:	b1 1d       	adc	r27, r1
    628e:	2c 93       	st	X, r18
    6290:	01 96       	adiw	r24, 0x01	; 1
    6292:	f3 cf       	rjmp	.-26     	; 0x627a <twi_transmit+0x20>
    6294:	80 91 dc 0b 	lds	r24, 0x0BDC	; 0x800bdc <twi_txBufferLength>
    6298:	68 0f       	add	r22, r24
    629a:	60 93 dc 0b 	sts	0x0BDC, r22	; 0x800bdc <twi_txBufferLength>
    629e:	80 e0       	ldi	r24, 0x00	; 0
    62a0:	08 95       	ret
    62a2:	81 e0       	ldi	r24, 0x01	; 1
    62a4:	08 95       	ret
    62a6:	82 e0       	ldi	r24, 0x02	; 2
    62a8:	08 95       	ret

000062aa <twi_attachSlaveRxEvent>:
    62aa:	90 93 21 0c 	sts	0x0C21, r25	; 0x800c21 <twi_onSlaveReceive+0x1>
    62ae:	80 93 20 0c 	sts	0x0C20, r24	; 0x800c20 <twi_onSlaveReceive>
    62b2:	08 95       	ret

000062b4 <twi_attachSlaveTxEvent>:
    62b4:	90 93 23 0c 	sts	0x0C23, r25	; 0x800c23 <twi_onSlaveTransmit+0x1>
    62b8:	80 93 22 0c 	sts	0x0C22, r24	; 0x800c22 <twi_onSlaveTransmit>
    62bc:	08 95       	ret

000062be <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    62be:	85 ed       	ldi	r24, 0xD5	; 213
    62c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    62c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    62c8:	84 fd       	sbrc	r24, 4
    62ca:	fc cf       	rjmp	.-8      	; 0x62c4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    62cc:	10 92 27 0c 	sts	0x0C27, r1	; 0x800c27 <twi_state>
    62d0:	08 95       	ret

000062d2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    62d2:	85 ec       	ldi	r24, 0xC5	; 197
    62d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    62d8:	10 92 27 0c 	sts	0x0C27, r1	; 0x800c27 <twi_state>
    62dc:	08 95       	ret

000062de <__vector_26>:
}

ISR(TWI_vect)
{
    62de:	1f 92       	push	r1
    62e0:	0f 92       	push	r0
    62e2:	0f b6       	in	r0, 0x3f	; 63
    62e4:	0f 92       	push	r0
    62e6:	11 24       	eor	r1, r1
    62e8:	0b b6       	in	r0, 0x3b	; 59
    62ea:	0f 92       	push	r0
    62ec:	2f 93       	push	r18
    62ee:	3f 93       	push	r19
    62f0:	4f 93       	push	r20
    62f2:	5f 93       	push	r21
    62f4:	6f 93       	push	r22
    62f6:	7f 93       	push	r23
    62f8:	8f 93       	push	r24
    62fa:	9f 93       	push	r25
    62fc:	af 93       	push	r26
    62fe:	bf 93       	push	r27
    6300:	ef 93       	push	r30
    6302:	ff 93       	push	r31
  switch(TW_STATUS){
    6304:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    6308:	88 7f       	andi	r24, 0xF8	; 248
    630a:	80 36       	cpi	r24, 0x60	; 96
    630c:	09 f4       	brne	.+2      	; 0x6310 <__vector_26+0x32>
    630e:	9d c0       	rjmp	.+314    	; 0x644a <__vector_26+0x16c>
    6310:	70 f5       	brcc	.+92     	; 0x636e <__vector_26+0x90>
    6312:	88 32       	cpi	r24, 0x28	; 40
    6314:	09 f4       	brne	.+2      	; 0x6318 <__vector_26+0x3a>
    6316:	5c c0       	rjmp	.+184    	; 0x63d0 <__vector_26+0xf2>
    6318:	90 f4       	brcc	.+36     	; 0x633e <__vector_26+0x60>
    631a:	80 31       	cpi	r24, 0x10	; 16
    631c:	09 f4       	brne	.+2      	; 0x6320 <__vector_26+0x42>
    631e:	55 c0       	rjmp	.+170    	; 0x63ca <__vector_26+0xec>
    6320:	38 f4       	brcc	.+14     	; 0x6330 <__vector_26+0x52>
    6322:	88 23       	and	r24, r24
    6324:	09 f4       	brne	.+2      	; 0x6328 <__vector_26+0x4a>
    6326:	f3 c0       	rjmp	.+486    	; 0x650e <__vector_26+0x230>
    6328:	88 30       	cpi	r24, 0x08	; 8
    632a:	09 f4       	brne	.+2      	; 0x632e <__vector_26+0x50>
    632c:	4e c0       	rjmp	.+156    	; 0x63ca <__vector_26+0xec>
    632e:	f2 c0       	rjmp	.+484    	; 0x6514 <__vector_26+0x236>
    6330:	88 31       	cpi	r24, 0x18	; 24
    6332:	09 f4       	brne	.+2      	; 0x6336 <__vector_26+0x58>
    6334:	4d c0       	rjmp	.+154    	; 0x63d0 <__vector_26+0xf2>
    6336:	80 32       	cpi	r24, 0x20	; 32
    6338:	09 f4       	brne	.+2      	; 0x633c <__vector_26+0x5e>
    633a:	5e c0       	rjmp	.+188    	; 0x63f8 <__vector_26+0x11a>
    633c:	eb c0       	rjmp	.+470    	; 0x6514 <__vector_26+0x236>
    633e:	80 34       	cpi	r24, 0x40	; 64
    6340:	09 f4       	brne	.+2      	; 0x6344 <__vector_26+0x66>
    6342:	69 c0       	rjmp	.+210    	; 0x6416 <__vector_26+0x138>
    6344:	50 f4       	brcc	.+20     	; 0x635a <__vector_26+0x7c>
    6346:	80 33       	cpi	r24, 0x30	; 48
    6348:	09 f4       	brne	.+2      	; 0x634c <__vector_26+0x6e>
    634a:	56 c0       	rjmp	.+172    	; 0x63f8 <__vector_26+0x11a>
    634c:	88 33       	cpi	r24, 0x38	; 56
    634e:	09 f0       	breq	.+2      	; 0x6352 <__vector_26+0x74>
    6350:	e1 c0       	rjmp	.+450    	; 0x6514 <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    6352:	80 93 ba 0b 	sts	0x0BBA, r24	; 0x800bba <twi_error>
      twi_releaseBus();
    6356:	bd df       	rcall	.-134    	; 0x62d2 <twi_releaseBus>
      break;
    6358:	dd c0       	rjmp	.+442    	; 0x6514 <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    635a:	80 35       	cpi	r24, 0x50	; 80
    635c:	09 f4       	brne	.+2      	; 0x6360 <__vector_26+0x82>
    635e:	4f c0       	rjmp	.+158    	; 0x63fe <__vector_26+0x120>
    6360:	88 35       	cpi	r24, 0x58	; 88
    6362:	09 f4       	brne	.+2      	; 0x6366 <__vector_26+0x88>
    6364:	5d c0       	rjmp	.+186    	; 0x6420 <__vector_26+0x142>
    6366:	88 34       	cpi	r24, 0x48	; 72
    6368:	09 f0       	breq	.+2      	; 0x636c <__vector_26+0x8e>
    636a:	d4 c0       	rjmp	.+424    	; 0x6514 <__vector_26+0x236>
    636c:	d2 c0       	rjmp	.+420    	; 0x6512 <__vector_26+0x234>
    636e:	88 39       	cpi	r24, 0x98	; 152
    6370:	09 f4       	brne	.+2      	; 0x6374 <__vector_26+0x96>
    6372:	c3 c0       	rjmp	.+390    	; 0x64fa <__vector_26+0x21c>
    6374:	a8 f4       	brcc	.+42     	; 0x63a0 <__vector_26+0xc2>
    6376:	88 37       	cpi	r24, 0x78	; 120
    6378:	09 f4       	brne	.+2      	; 0x637c <__vector_26+0x9e>
    637a:	67 c0       	rjmp	.+206    	; 0x644a <__vector_26+0x16c>
    637c:	38 f4       	brcc	.+14     	; 0x638c <__vector_26+0xae>
    637e:	88 36       	cpi	r24, 0x68	; 104
    6380:	09 f4       	brne	.+2      	; 0x6384 <__vector_26+0xa6>
    6382:	63 c0       	rjmp	.+198    	; 0x644a <__vector_26+0x16c>
    6384:	80 37       	cpi	r24, 0x70	; 112
    6386:	09 f4       	brne	.+2      	; 0x638a <__vector_26+0xac>
    6388:	60 c0       	rjmp	.+192    	; 0x644a <__vector_26+0x16c>
    638a:	c4 c0       	rjmp	.+392    	; 0x6514 <__vector_26+0x236>
    638c:	88 38       	cpi	r24, 0x88	; 136
    638e:	09 f4       	brne	.+2      	; 0x6392 <__vector_26+0xb4>
    6390:	b4 c0       	rjmp	.+360    	; 0x64fa <__vector_26+0x21c>
    6392:	80 39       	cpi	r24, 0x90	; 144
    6394:	09 f4       	brne	.+2      	; 0x6398 <__vector_26+0xba>
    6396:	5f c0       	rjmp	.+190    	; 0x6456 <__vector_26+0x178>
    6398:	80 38       	cpi	r24, 0x80	; 128
    639a:	09 f0       	breq	.+2      	; 0x639e <__vector_26+0xc0>
    639c:	bb c0       	rjmp	.+374    	; 0x6514 <__vector_26+0x236>
    639e:	5b c0       	rjmp	.+182    	; 0x6456 <__vector_26+0x178>
    63a0:	80 3b       	cpi	r24, 0xB0	; 176
    63a2:	09 f4       	brne	.+2      	; 0x63a6 <__vector_26+0xc8>
    63a4:	82 c0       	rjmp	.+260    	; 0x64aa <__vector_26+0x1cc>
    63a6:	38 f4       	brcc	.+14     	; 0x63b6 <__vector_26+0xd8>
    63a8:	80 3a       	cpi	r24, 0xA0	; 160
    63aa:	09 f4       	brne	.+2      	; 0x63ae <__vector_26+0xd0>
    63ac:	66 c0       	rjmp	.+204    	; 0x647a <__vector_26+0x19c>
    63ae:	88 3a       	cpi	r24, 0xA8	; 168
    63b0:	09 f4       	brne	.+2      	; 0x63b4 <__vector_26+0xd6>
    63b2:	7b c0       	rjmp	.+246    	; 0x64aa <__vector_26+0x1cc>
    63b4:	af c0       	rjmp	.+350    	; 0x6514 <__vector_26+0x236>
    63b6:	80 3c       	cpi	r24, 0xC0	; 192
    63b8:	09 f4       	brne	.+2      	; 0x63bc <__vector_26+0xde>
    63ba:	a3 c0       	rjmp	.+326    	; 0x6502 <__vector_26+0x224>
    63bc:	88 3c       	cpi	r24, 0xC8	; 200
    63be:	09 f4       	brne	.+2      	; 0x63c2 <__vector_26+0xe4>
    63c0:	a0 c0       	rjmp	.+320    	; 0x6502 <__vector_26+0x224>
    63c2:	88 3b       	cpi	r24, 0xB8	; 184
    63c4:	09 f4       	brne	.+2      	; 0x63c8 <__vector_26+0xea>
    63c6:	86 c0       	rjmp	.+268    	; 0x64d4 <__vector_26+0x1f6>
    63c8:	a5 c0       	rjmp	.+330    	; 0x6514 <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    63ca:	80 91 26 0c 	lds	r24, 0x0C26	; 0x800c26 <twi_slarw>
    63ce:	10 c0       	rjmp	.+32     	; 0x63f0 <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    63d0:	90 91 ff 0b 	lds	r25, 0x0BFF	; 0x800bff <twi_masterBufferIndex>
    63d4:	80 91 fe 0b 	lds	r24, 0x0BFE	; 0x800bfe <twi_masterBufferLength>
    63d8:	98 17       	cp	r25, r24
    63da:	70 f5       	brcc	.+92     	; 0x6438 <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    63dc:	e0 91 ff 0b 	lds	r30, 0x0BFF	; 0x800bff <twi_masterBufferIndex>
    63e0:	81 e0       	ldi	r24, 0x01	; 1
    63e2:	8e 0f       	add	r24, r30
    63e4:	80 93 ff 0b 	sts	0x0BFF, r24	; 0x800bff <twi_masterBufferIndex>
    63e8:	f0 e0       	ldi	r31, 0x00	; 0
    63ea:	e0 50       	subi	r30, 0x00	; 0
    63ec:	f4 4f       	sbci	r31, 0xF4	; 244
    63ee:	80 81       	ld	r24, Z
    63f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    63f4:	85 ec       	ldi	r24, 0xC5	; 197
    63f6:	82 c0       	rjmp	.+260    	; 0x64fc <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    63f8:	80 93 ba 0b 	sts	0x0BBA, r24	; 0x800bba <twi_error>
    63fc:	8a c0       	rjmp	.+276    	; 0x6512 <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    63fe:	e0 91 ff 0b 	lds	r30, 0x0BFF	; 0x800bff <twi_masterBufferIndex>
    6402:	81 e0       	ldi	r24, 0x01	; 1
    6404:	8e 0f       	add	r24, r30
    6406:	80 93 ff 0b 	sts	0x0BFF, r24	; 0x800bff <twi_masterBufferIndex>
    640a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    640e:	f0 e0       	ldi	r31, 0x00	; 0
    6410:	e0 50       	subi	r30, 0x00	; 0
    6412:	f4 4f       	sbci	r31, 0xF4	; 244
    6414:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6416:	90 91 ff 0b 	lds	r25, 0x0BFF	; 0x800bff <twi_masterBufferIndex>
    641a:	80 91 fe 0b 	lds	r24, 0x0BFE	; 0x800bfe <twi_masterBufferLength>
    641e:	6a c0       	rjmp	.+212    	; 0x64f4 <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6420:	e0 91 ff 0b 	lds	r30, 0x0BFF	; 0x800bff <twi_masterBufferIndex>
    6424:	81 e0       	ldi	r24, 0x01	; 1
    6426:	8e 0f       	add	r24, r30
    6428:	80 93 ff 0b 	sts	0x0BFF, r24	; 0x800bff <twi_masterBufferIndex>
    642c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6430:	f0 e0       	ldi	r31, 0x00	; 0
    6432:	e0 50       	subi	r30, 0x00	; 0
    6434:	f4 4f       	sbci	r31, 0xF4	; 244
    6436:	80 83       	st	Z, r24
	if (twi_sendStop)
    6438:	80 91 25 0c 	lds	r24, 0x0C25	; 0x800c25 <twi_sendStop>
    643c:	81 11       	cpse	r24, r1
    643e:	69 c0       	rjmp	.+210    	; 0x6512 <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    6440:	81 e0       	ldi	r24, 0x01	; 1
    6442:	80 93 24 0c 	sts	0x0C24, r24	; 0x800c24 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6446:	84 ea       	ldi	r24, 0xA4	; 164
    6448:	5d c0       	rjmp	.+186    	; 0x6504 <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    644a:	83 e0       	ldi	r24, 0x03	; 3
    644c:	80 93 27 0c 	sts	0x0C27, r24	; 0x800c27 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    6450:	10 92 bb 0b 	sts	0x0BBB, r1	; 0x800bbb <twi_rxBufferIndex>
    6454:	cf cf       	rjmp	.-98     	; 0x63f4 <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6456:	80 91 bb 0b 	lds	r24, 0x0BBB	; 0x800bbb <twi_rxBufferIndex>
    645a:	80 32       	cpi	r24, 0x20	; 32
    645c:	08 f0       	brcs	.+2      	; 0x6460 <__vector_26+0x182>
    645e:	4d c0       	rjmp	.+154    	; 0x64fa <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    6460:	e0 91 bb 0b 	lds	r30, 0x0BBB	; 0x800bbb <twi_rxBufferIndex>
    6464:	81 e0       	ldi	r24, 0x01	; 1
    6466:	8e 0f       	add	r24, r30
    6468:	80 93 bb 0b 	sts	0x0BBB, r24	; 0x800bbb <twi_rxBufferIndex>
    646c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6470:	f0 e0       	ldi	r31, 0x00	; 0
    6472:	e4 54       	subi	r30, 0x44	; 68
    6474:	f4 4f       	sbci	r31, 0xF4	; 244
    6476:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    6478:	bd cf       	rjmp	.-134    	; 0x63f4 <__vector_26+0x116>
    647a:	2b df       	rcall	.-426    	; 0x62d2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    647c:	80 91 bb 0b 	lds	r24, 0x0BBB	; 0x800bbb <twi_rxBufferIndex>
    6480:	80 32       	cpi	r24, 0x20	; 32
    6482:	30 f4       	brcc	.+12     	; 0x6490 <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6484:	e0 91 bb 0b 	lds	r30, 0x0BBB	; 0x800bbb <twi_rxBufferIndex>
    6488:	f0 e0       	ldi	r31, 0x00	; 0
    648a:	e4 54       	subi	r30, 0x44	; 68
    648c:	f4 4f       	sbci	r31, 0xF4	; 244
    648e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    6490:	60 91 bb 0b 	lds	r22, 0x0BBB	; 0x800bbb <twi_rxBufferIndex>
    6494:	70 e0       	ldi	r23, 0x00	; 0
    6496:	e0 91 20 0c 	lds	r30, 0x0C20	; 0x800c20 <twi_onSlaveReceive>
    649a:	f0 91 21 0c 	lds	r31, 0x0C21	; 0x800c21 <twi_onSlaveReceive+0x1>
    649e:	8c eb       	ldi	r24, 0xBC	; 188
    64a0:	9b e0       	ldi	r25, 0x0B	; 11
    64a2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    64a4:	10 92 bb 0b 	sts	0x0BBB, r1	; 0x800bbb <twi_rxBufferIndex>
      break;
    64a8:	35 c0       	rjmp	.+106    	; 0x6514 <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    64aa:	84 e0       	ldi	r24, 0x04	; 4
    64ac:	80 93 27 0c 	sts	0x0C27, r24	; 0x800c27 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    64b0:	10 92 dd 0b 	sts	0x0BDD, r1	; 0x800bdd <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    64b4:	10 92 dc 0b 	sts	0x0BDC, r1	; 0x800bdc <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    64b8:	e0 91 22 0c 	lds	r30, 0x0C22	; 0x800c22 <twi_onSlaveTransmit>
    64bc:	f0 91 23 0c 	lds	r31, 0x0C23	; 0x800c23 <twi_onSlaveTransmit+0x1>
    64c0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    64c2:	80 91 dc 0b 	lds	r24, 0x0BDC	; 0x800bdc <twi_txBufferLength>
    64c6:	81 11       	cpse	r24, r1
    64c8:	05 c0       	rjmp	.+10     	; 0x64d4 <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    64ca:	81 e0       	ldi	r24, 0x01	; 1
    64cc:	80 93 dc 0b 	sts	0x0BDC, r24	; 0x800bdc <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    64d0:	10 92 de 0b 	sts	0x0BDE, r1	; 0x800bde <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    64d4:	e0 91 dd 0b 	lds	r30, 0x0BDD	; 0x800bdd <twi_txBufferIndex>
    64d8:	81 e0       	ldi	r24, 0x01	; 1
    64da:	8e 0f       	add	r24, r30
    64dc:	80 93 dd 0b 	sts	0x0BDD, r24	; 0x800bdd <twi_txBufferIndex>
    64e0:	f0 e0       	ldi	r31, 0x00	; 0
    64e2:	e2 52       	subi	r30, 0x22	; 34
    64e4:	f4 4f       	sbci	r31, 0xF4	; 244
    64e6:	80 81       	ld	r24, Z
    64e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    64ec:	90 91 dd 0b 	lds	r25, 0x0BDD	; 0x800bdd <twi_txBufferIndex>
    64f0:	80 91 dc 0b 	lds	r24, 0x0BDC	; 0x800bdc <twi_txBufferLength>
    64f4:	98 17       	cp	r25, r24
    64f6:	08 f4       	brcc	.+2      	; 0x64fa <__vector_26+0x21c>
    64f8:	7d cf       	rjmp	.-262    	; 0x63f4 <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    64fa:	85 e8       	ldi	r24, 0x85	; 133
    64fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6500:	09 c0       	rjmp	.+18     	; 0x6514 <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6502:	85 ec       	ldi	r24, 0xC5	; 197
    6504:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    6508:	10 92 27 0c 	sts	0x0C27, r1	; 0x800c27 <twi_state>
      break;
    650c:	03 c0       	rjmp	.+6      	; 0x6514 <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    650e:	10 92 ba 0b 	sts	0x0BBA, r1	; 0x800bba <twi_error>
      twi_stop();
    6512:	d5 de       	rcall	.-598    	; 0x62be <twi_stop>
      break;
  }
}
    6514:	ff 91       	pop	r31
    6516:	ef 91       	pop	r30
    6518:	bf 91       	pop	r27
    651a:	af 91       	pop	r26
    651c:	9f 91       	pop	r25
    651e:	8f 91       	pop	r24
    6520:	7f 91       	pop	r23
    6522:	6f 91       	pop	r22
    6524:	5f 91       	pop	r21
    6526:	4f 91       	pop	r20
    6528:	3f 91       	pop	r19
    652a:	2f 91       	pop	r18
    652c:	0f 90       	pop	r0
    652e:	0b be       	out	0x3b, r0	; 59
    6530:	0f 90       	pop	r0
    6532:	0f be       	out	0x3f, r0	; 63
    6534:	0f 90       	pop	r0
    6536:	1f 90       	pop	r1
    6538:	18 95       	reti

0000653a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    653a:	80 91 5c 0c 	lds	r24, 0x0C5C	; 0x800c5c <_ZN7TwoWire14rxBufferLengthE>
    653e:	90 e0       	ldi	r25, 0x00	; 0
    6540:	20 91 5d 0c 	lds	r18, 0x0C5D	; 0x800c5d <_ZN7TwoWire13rxBufferIndexE>
    6544:	82 1b       	sub	r24, r18
    6546:	91 09       	sbc	r25, r1
    6548:	08 95       	ret

0000654a <_ZN7TwoWire4readEv>:
    654a:	90 91 5d 0c 	lds	r25, 0x0C5D	; 0x800c5d <_ZN7TwoWire13rxBufferIndexE>
    654e:	80 91 5c 0c 	lds	r24, 0x0C5C	; 0x800c5c <_ZN7TwoWire14rxBufferLengthE>
    6552:	98 17       	cp	r25, r24
    6554:	50 f4       	brcc	.+20     	; 0x656a <_ZN7TwoWire4readEv+0x20>
    6556:	e9 2f       	mov	r30, r25
    6558:	f0 e0       	ldi	r31, 0x00	; 0
    655a:	e2 5a       	subi	r30, 0xA2	; 162
    655c:	f3 4f       	sbci	r31, 0xF3	; 243
    655e:	20 81       	ld	r18, Z
    6560:	30 e0       	ldi	r19, 0x00	; 0
    6562:	9f 5f       	subi	r25, 0xFF	; 255
    6564:	90 93 5d 0c 	sts	0x0C5D, r25	; 0x800c5d <_ZN7TwoWire13rxBufferIndexE>
    6568:	02 c0       	rjmp	.+4      	; 0x656e <_ZN7TwoWire4readEv+0x24>
    656a:	2f ef       	ldi	r18, 0xFF	; 255
    656c:	3f ef       	ldi	r19, 0xFF	; 255
    656e:	c9 01       	movw	r24, r18
    6570:	08 95       	ret

00006572 <_ZN7TwoWire4peekEv>:
    6572:	e0 91 5d 0c 	lds	r30, 0x0C5D	; 0x800c5d <_ZN7TwoWire13rxBufferIndexE>
    6576:	80 91 5c 0c 	lds	r24, 0x0C5C	; 0x800c5c <_ZN7TwoWire14rxBufferLengthE>
    657a:	e8 17       	cp	r30, r24
    657c:	30 f4       	brcc	.+12     	; 0x658a <_ZN7TwoWire4peekEv+0x18>
    657e:	f0 e0       	ldi	r31, 0x00	; 0
    6580:	e2 5a       	subi	r30, 0xA2	; 162
    6582:	f3 4f       	sbci	r31, 0xF3	; 243
    6584:	80 81       	ld	r24, Z
    6586:	90 e0       	ldi	r25, 0x00	; 0
    6588:	08 95       	ret
    658a:	8f ef       	ldi	r24, 0xFF	; 255
    658c:	9f ef       	ldi	r25, 0xFF	; 255
    658e:	08 95       	ret

00006590 <_ZN7TwoWire5flushEv>:
    6590:	08 95       	ret

00006592 <_ZN7TwoWire16onReceiveServiceEPhi>:
    6592:	cf 93       	push	r28
    6594:	df 93       	push	r29
    6596:	ec 01       	movw	r28, r24
    6598:	e0 91 34 0c 	lds	r30, 0x0C34	; 0x800c34 <_ZN7TwoWire14user_onReceiveE>
    659c:	f0 91 35 0c 	lds	r31, 0x0C35	; 0x800c35 <_ZN7TwoWire14user_onReceiveE+0x1>
    65a0:	30 97       	sbiw	r30, 0x00	; 0
    65a2:	f1 f0       	breq	.+60     	; 0x65e0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    65a4:	90 91 5d 0c 	lds	r25, 0x0C5D	; 0x800c5d <_ZN7TwoWire13rxBufferIndexE>
    65a8:	80 91 5c 0c 	lds	r24, 0x0C5C	; 0x800c5c <_ZN7TwoWire14rxBufferLengthE>
    65ac:	98 17       	cp	r25, r24
    65ae:	c0 f0       	brcs	.+48     	; 0x65e0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    65b0:	90 e0       	ldi	r25, 0x00	; 0
    65b2:	29 2f       	mov	r18, r25
    65b4:	30 e0       	ldi	r19, 0x00	; 0
    65b6:	26 17       	cp	r18, r22
    65b8:	37 07       	cpc	r19, r23
    65ba:	54 f4       	brge	.+20     	; 0x65d0 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    65bc:	de 01       	movw	r26, r28
    65be:	a2 0f       	add	r26, r18
    65c0:	b3 1f       	adc	r27, r19
    65c2:	4c 91       	ld	r20, X
    65c4:	d9 01       	movw	r26, r18
    65c6:	a2 5a       	subi	r26, 0xA2	; 162
    65c8:	b3 4f       	sbci	r27, 0xF3	; 243
    65ca:	4c 93       	st	X, r20
    65cc:	9f 5f       	subi	r25, 0xFF	; 255
    65ce:	f1 cf       	rjmp	.-30     	; 0x65b2 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    65d0:	10 92 5d 0c 	sts	0x0C5D, r1	; 0x800c5d <_ZN7TwoWire13rxBufferIndexE>
    65d4:	60 93 5c 0c 	sts	0x0C5C, r22	; 0x800c5c <_ZN7TwoWire14rxBufferLengthE>
    65d8:	cb 01       	movw	r24, r22
    65da:	df 91       	pop	r29
    65dc:	cf 91       	pop	r28
    65de:	09 94       	ijmp
    65e0:	df 91       	pop	r29
    65e2:	cf 91       	pop	r28
    65e4:	08 95       	ret

000065e6 <_ZN7TwoWire16onRequestServiceEv>:
    65e6:	e0 91 36 0c 	lds	r30, 0x0C36	; 0x800c36 <_ZN7TwoWire14user_onRequestE>
    65ea:	f0 91 37 0c 	lds	r31, 0x0C37	; 0x800c37 <_ZN7TwoWire14user_onRequestE+0x1>
    65ee:	30 97       	sbiw	r30, 0x00	; 0
    65f0:	29 f0       	breq	.+10     	; 0x65fc <_ZN7TwoWire16onRequestServiceEv+0x16>
    65f2:	10 92 3a 0c 	sts	0x0C3A, r1	; 0x800c3a <_ZN7TwoWire13txBufferIndexE>
    65f6:	10 92 39 0c 	sts	0x0C39, r1	; 0x800c39 <_ZN7TwoWire14txBufferLengthE>
    65fa:	09 94       	ijmp
    65fc:	08 95       	ret

000065fe <_ZN7TwoWire5writeEPKhj>:
    65fe:	cf 92       	push	r12
    6600:	df 92       	push	r13
    6602:	ef 92       	push	r14
    6604:	ff 92       	push	r15
    6606:	0f 93       	push	r16
    6608:	1f 93       	push	r17
    660a:	cf 93       	push	r28
    660c:	df 93       	push	r29
    660e:	7c 01       	movw	r14, r24
    6610:	cb 01       	movw	r24, r22
    6612:	8a 01       	movw	r16, r20
    6614:	20 91 38 0c 	lds	r18, 0x0C38	; 0x800c38 <_ZN7TwoWire12transmittingE>
    6618:	22 23       	and	r18, r18
    661a:	89 f0       	breq	.+34     	; 0x663e <_ZN7TwoWire5writeEPKhj+0x40>
    661c:	eb 01       	movw	r28, r22
    661e:	6b 01       	movw	r12, r22
    6620:	c4 0e       	add	r12, r20
    6622:	d5 1e       	adc	r13, r21
    6624:	cc 15       	cp	r28, r12
    6626:	dd 05       	cpc	r29, r13
    6628:	61 f0       	breq	.+24     	; 0x6642 <_ZN7TwoWire5writeEPKhj+0x44>
    662a:	69 91       	ld	r22, Y+
    662c:	d7 01       	movw	r26, r14
    662e:	ed 91       	ld	r30, X+
    6630:	fc 91       	ld	r31, X
    6632:	01 90       	ld	r0, Z+
    6634:	f0 81       	ld	r31, Z
    6636:	e0 2d       	mov	r30, r0
    6638:	c7 01       	movw	r24, r14
    663a:	09 95       	icall
    663c:	f3 cf       	rjmp	.-26     	; 0x6624 <_ZN7TwoWire5writeEPKhj+0x26>
    663e:	64 2f       	mov	r22, r20
    6640:	0c de       	rcall	.-1000   	; 0x625a <twi_transmit>
    6642:	c8 01       	movw	r24, r16
    6644:	df 91       	pop	r29
    6646:	cf 91       	pop	r28
    6648:	1f 91       	pop	r17
    664a:	0f 91       	pop	r16
    664c:	ff 90       	pop	r15
    664e:	ef 90       	pop	r14
    6650:	df 90       	pop	r13
    6652:	cf 90       	pop	r12
    6654:	08 95       	ret

00006656 <_ZN7TwoWire5writeEh>:
    6656:	cf 93       	push	r28
    6658:	df 93       	push	r29
    665a:	1f 92       	push	r1
    665c:	cd b7       	in	r28, 0x3d	; 61
    665e:	de b7       	in	r29, 0x3e	; 62
    6660:	69 83       	std	Y+1, r22	; 0x01
    6662:	20 91 38 0c 	lds	r18, 0x0C38	; 0x800c38 <_ZN7TwoWire12transmittingE>
    6666:	22 23       	and	r18, r18
    6668:	d1 f0       	breq	.+52     	; 0x669e <_ZN7TwoWire5writeEh+0x48>
    666a:	20 91 39 0c 	lds	r18, 0x0C39	; 0x800c39 <_ZN7TwoWire14txBufferLengthE>
    666e:	20 32       	cpi	r18, 0x20	; 32
    6670:	40 f0       	brcs	.+16     	; 0x6682 <_ZN7TwoWire5writeEh+0x2c>
    6672:	21 e0       	ldi	r18, 0x01	; 1
    6674:	30 e0       	ldi	r19, 0x00	; 0
    6676:	fc 01       	movw	r30, r24
    6678:	33 83       	std	Z+3, r19	; 0x03
    667a:	22 83       	std	Z+2, r18	; 0x02
    667c:	80 e0       	ldi	r24, 0x00	; 0
    667e:	90 e0       	ldi	r25, 0x00	; 0
    6680:	14 c0       	rjmp	.+40     	; 0x66aa <_ZN7TwoWire5writeEh+0x54>
    6682:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <_ZN7TwoWire13txBufferIndexE>
    6686:	e8 2f       	mov	r30, r24
    6688:	f0 e0       	ldi	r31, 0x00	; 0
    668a:	e5 5c       	subi	r30, 0xC5	; 197
    668c:	f3 4f       	sbci	r31, 0xF3	; 243
    668e:	99 81       	ldd	r25, Y+1	; 0x01
    6690:	90 83       	st	Z, r25
    6692:	8f 5f       	subi	r24, 0xFF	; 255
    6694:	80 93 3a 0c 	sts	0x0C3A, r24	; 0x800c3a <_ZN7TwoWire13txBufferIndexE>
    6698:	80 93 39 0c 	sts	0x0C39, r24	; 0x800c39 <_ZN7TwoWire14txBufferLengthE>
    669c:	04 c0       	rjmp	.+8      	; 0x66a6 <_ZN7TwoWire5writeEh+0x50>
    669e:	61 e0       	ldi	r22, 0x01	; 1
    66a0:	ce 01       	movw	r24, r28
    66a2:	01 96       	adiw	r24, 0x01	; 1
    66a4:	da dd       	rcall	.-1100   	; 0x625a <twi_transmit>
    66a6:	81 e0       	ldi	r24, 0x01	; 1
    66a8:	90 e0       	ldi	r25, 0x00	; 0
    66aa:	0f 90       	pop	r0
    66ac:	df 91       	pop	r29
    66ae:	cf 91       	pop	r28
    66b0:	08 95       	ret

000066b2 <_ZN7TwoWireC1Ev>:
    66b2:	fc 01       	movw	r30, r24
    66b4:	13 82       	std	Z+3, r1	; 0x03
    66b6:	12 82       	std	Z+2, r1	; 0x02
    66b8:	88 ee       	ldi	r24, 0xE8	; 232
    66ba:	93 e0       	ldi	r25, 0x03	; 3
    66bc:	a0 e0       	ldi	r26, 0x00	; 0
    66be:	b0 e0       	ldi	r27, 0x00	; 0
    66c0:	84 83       	std	Z+4, r24	; 0x04
    66c2:	95 83       	std	Z+5, r25	; 0x05
    66c4:	a6 83       	std	Z+6, r26	; 0x06
    66c6:	b7 83       	std	Z+7, r27	; 0x07
    66c8:	8e ea       	ldi	r24, 0xAE	; 174
    66ca:	99 e0       	ldi	r25, 0x09	; 9
    66cc:	91 83       	std	Z+1, r25	; 0x01
    66ce:	80 83       	st	Z, r24
    66d0:	08 95       	ret

000066d2 <_ZN7TwoWire5beginEv>:
    66d2:	10 92 5d 0c 	sts	0x0C5D, r1	; 0x800c5d <_ZN7TwoWire13rxBufferIndexE>
    66d6:	10 92 5c 0c 	sts	0x0C5C, r1	; 0x800c5c <_ZN7TwoWire14rxBufferLengthE>
    66da:	10 92 3a 0c 	sts	0x0C3A, r1	; 0x800c3a <_ZN7TwoWire13txBufferIndexE>
    66de:	10 92 39 0c 	sts	0x0C39, r1	; 0x800c39 <_ZN7TwoWire14txBufferLengthE>
    66e2:	de dc       	rcall	.-1604   	; 0x60a0 <twi_init>
    66e4:	83 ef       	ldi	r24, 0xF3	; 243
    66e6:	92 e3       	ldi	r25, 0x32	; 50
    66e8:	e5 dd       	rcall	.-1078   	; 0x62b4 <twi_attachSlaveTxEvent>
    66ea:	89 ec       	ldi	r24, 0xC9	; 201
    66ec:	92 e3       	ldi	r25, 0x32	; 50
    66ee:	dd cd       	rjmp	.-1094   	; 0x62aa <twi_attachSlaveRxEvent>

000066f0 <_ZN7TwoWire3endEv>:
    66f0:	f5 cc       	rjmp	.-1558   	; 0x60dc <twi_disable>

000066f2 <_ZN7TwoWire8setClockEm>:
    66f2:	cb 01       	movw	r24, r22
    66f4:	ba 01       	movw	r22, r20
    66f6:	ff cc       	rjmp	.-1538   	; 0x60f6 <twi_setFrequency>

000066f8 <_ZN7TwoWire17beginTransmissionEh>:
    66f8:	81 e0       	ldi	r24, 0x01	; 1
    66fa:	80 93 38 0c 	sts	0x0C38, r24	; 0x800c38 <_ZN7TwoWire12transmittingE>
    66fe:	60 93 5b 0c 	sts	0x0C5B, r22	; 0x800c5b <_ZN7TwoWire9txAddressE>
    6702:	10 92 3a 0c 	sts	0x0C3A, r1	; 0x800c3a <_ZN7TwoWire13txBufferIndexE>
    6706:	10 92 39 0c 	sts	0x0C39, r1	; 0x800c39 <_ZN7TwoWire14txBufferLengthE>
    670a:	08 95       	ret

0000670c <_ZN7TwoWire17beginTransmissionEi>:
    670c:	f5 cf       	rjmp	.-22     	; 0x66f8 <_ZN7TwoWire17beginTransmissionEh>

0000670e <_ZN7TwoWire15endTransmissionEh>:
    670e:	0f 93       	push	r16
    6710:	06 2f       	mov	r16, r22
    6712:	21 e0       	ldi	r18, 0x01	; 1
    6714:	40 91 39 0c 	lds	r20, 0x0C39	; 0x800c39 <_ZN7TwoWire14txBufferLengthE>
    6718:	6b e3       	ldi	r22, 0x3B	; 59
    671a:	7c e0       	ldi	r23, 0x0C	; 12
    671c:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <_ZN7TwoWire9txAddressE>
    6720:	46 dd       	rcall	.-1396   	; 0x61ae <twi_writeTo>
    6722:	10 92 3a 0c 	sts	0x0C3A, r1	; 0x800c3a <_ZN7TwoWire13txBufferIndexE>
    6726:	10 92 39 0c 	sts	0x0C39, r1	; 0x800c39 <_ZN7TwoWire14txBufferLengthE>
    672a:	10 92 38 0c 	sts	0x0C38, r1	; 0x800c38 <_ZN7TwoWire12transmittingE>
    672e:	0f 91       	pop	r16
    6730:	08 95       	ret

00006732 <_ZN7TwoWire11requestFromEhhmhh>:
    6732:	4f 92       	push	r4
    6734:	5f 92       	push	r5
    6736:	6f 92       	push	r6
    6738:	7f 92       	push	r7
    673a:	af 92       	push	r10
    673c:	bf 92       	push	r11
    673e:	cf 92       	push	r12
    6740:	ef 92       	push	r14
    6742:	ff 92       	push	r15
    6744:	0f 93       	push	r16
    6746:	1f 93       	push	r17
    6748:	cf 93       	push	r28
    674a:	df 93       	push	r29
    674c:	5c 01       	movw	r10, r24
    674e:	f6 2e       	mov	r15, r22
    6750:	d4 2f       	mov	r29, r20
    6752:	28 01       	movw	r4, r16
    6754:	39 01       	movw	r6, r18
    6756:	ee 20       	and	r14, r14
    6758:	11 f1       	breq	.+68     	; 0x679e <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    675a:	ce df       	rcall	.-100    	; 0x66f8 <_ZN7TwoWire17beginTransmissionEh>
    675c:	ce 2d       	mov	r28, r14
    675e:	c4 30       	cpi	r28, 0x04	; 4
    6760:	08 f0       	brcs	.+2      	; 0x6764 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6762:	c3 e0       	ldi	r28, 0x03	; 3
    6764:	c1 50       	subi	r28, 0x01	; 1
    6766:	c0 f0       	brcs	.+48     	; 0x6798 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    6768:	28 e0       	ldi	r18, 0x08	; 8
    676a:	c2 9f       	mul	r28, r18
    676c:	c0 01       	movw	r24, r0
    676e:	11 24       	eor	r1, r1
    6770:	a3 01       	movw	r20, r6
    6772:	92 01       	movw	r18, r4
    6774:	04 c0       	rjmp	.+8      	; 0x677e <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    6776:	56 95       	lsr	r21
    6778:	47 95       	ror	r20
    677a:	37 95       	ror	r19
    677c:	27 95       	ror	r18
    677e:	8a 95       	dec	r24
    6780:	d2 f7       	brpl	.-12     	; 0x6776 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    6782:	ca 01       	movw	r24, r20
    6784:	b9 01       	movw	r22, r18
    6786:	d5 01       	movw	r26, r10
    6788:	ed 91       	ld	r30, X+
    678a:	fc 91       	ld	r31, X
    678c:	01 90       	ld	r0, Z+
    678e:	f0 81       	ld	r31, Z
    6790:	e0 2d       	mov	r30, r0
    6792:	c5 01       	movw	r24, r10
    6794:	09 95       	icall
    6796:	e6 cf       	rjmp	.-52     	; 0x6764 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6798:	60 e0       	ldi	r22, 0x00	; 0
    679a:	c5 01       	movw	r24, r10
    679c:	b8 df       	rcall	.-144    	; 0x670e <_ZN7TwoWire15endTransmissionEh>
    679e:	4d 2f       	mov	r20, r29
    67a0:	d1 32       	cpi	r29, 0x21	; 33
    67a2:	08 f0       	brcs	.+2      	; 0x67a6 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    67a4:	40 e2       	ldi	r20, 0x20	; 32
    67a6:	2c 2d       	mov	r18, r12
    67a8:	6e e5       	ldi	r22, 0x5E	; 94
    67aa:	7c e0       	ldi	r23, 0x0C	; 12
    67ac:	8f 2d       	mov	r24, r15
    67ae:	b7 dc       	rcall	.-1682   	; 0x611e <twi_readFrom>
    67b0:	10 92 5d 0c 	sts	0x0C5D, r1	; 0x800c5d <_ZN7TwoWire13rxBufferIndexE>
    67b4:	80 93 5c 0c 	sts	0x0C5C, r24	; 0x800c5c <_ZN7TwoWire14rxBufferLengthE>
    67b8:	df 91       	pop	r29
    67ba:	cf 91       	pop	r28
    67bc:	1f 91       	pop	r17
    67be:	0f 91       	pop	r16
    67c0:	ff 90       	pop	r15
    67c2:	ef 90       	pop	r14
    67c4:	cf 90       	pop	r12
    67c6:	bf 90       	pop	r11
    67c8:	af 90       	pop	r10
    67ca:	7f 90       	pop	r7
    67cc:	6f 90       	pop	r6
    67ce:	5f 90       	pop	r5
    67d0:	4f 90       	pop	r4
    67d2:	08 95       	ret

000067d4 <_ZN7TwoWire11requestFromEhhh>:
    67d4:	cf 92       	push	r12
    67d6:	ef 92       	push	r14
    67d8:	0f 93       	push	r16
    67da:	1f 93       	push	r17
    67dc:	c2 2e       	mov	r12, r18
    67de:	e1 2c       	mov	r14, r1
    67e0:	00 e0       	ldi	r16, 0x00	; 0
    67e2:	10 e0       	ldi	r17, 0x00	; 0
    67e4:	98 01       	movw	r18, r16
    67e6:	a5 df       	rcall	.-182    	; 0x6732 <_ZN7TwoWire11requestFromEhhmhh>
    67e8:	1f 91       	pop	r17
    67ea:	0f 91       	pop	r16
    67ec:	ef 90       	pop	r14
    67ee:	cf 90       	pop	r12
    67f0:	08 95       	ret

000067f2 <_ZN7TwoWire11requestFromEhh>:
    67f2:	21 e0       	ldi	r18, 0x01	; 1
    67f4:	ef cf       	rjmp	.-34     	; 0x67d4 <_ZN7TwoWire11requestFromEhhh>

000067f6 <_ZN7TwoWire11requestFromEii>:
    67f6:	21 e0       	ldi	r18, 0x01	; 1
    67f8:	ed cf       	rjmp	.-38     	; 0x67d4 <_ZN7TwoWire11requestFromEhhh>

000067fa <_ZN7TwoWire15endTransmissionEv>:
    67fa:	61 e0       	ldi	r22, 0x01	; 1
    67fc:	88 cf       	rjmp	.-240    	; 0x670e <_ZN7TwoWire15endTransmissionEh>

000067fe <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    67fe:	88 e2       	ldi	r24, 0x28	; 40
    6800:	9c e0       	ldi	r25, 0x0C	; 12
    6802:	57 cf       	rjmp	.-338    	; 0x66b2 <_ZN7TwoWireC1Ev>

00006804 <__cmpsf2>:
    6804:	d9 d0       	rcall	.+434    	; 0x69b8 <__fp_cmp>
    6806:	08 f4       	brcc	.+2      	; 0x680a <__cmpsf2+0x6>
    6808:	81 e0       	ldi	r24, 0x01	; 1
    680a:	08 95       	ret

0000680c <__divsf3>:
    680c:	0c d0       	rcall	.+24     	; 0x6826 <__divsf3x>
    680e:	0f c1       	rjmp	.+542    	; 0x6a2e <__fp_round>
    6810:	07 d1       	rcall	.+526    	; 0x6a20 <__fp_pscB>
    6812:	40 f0       	brcs	.+16     	; 0x6824 <__divsf3+0x18>
    6814:	fe d0       	rcall	.+508    	; 0x6a12 <__fp_pscA>
    6816:	30 f0       	brcs	.+12     	; 0x6824 <__divsf3+0x18>
    6818:	21 f4       	brne	.+8      	; 0x6822 <__divsf3+0x16>
    681a:	5f 3f       	cpi	r21, 0xFF	; 255
    681c:	19 f0       	breq	.+6      	; 0x6824 <__divsf3+0x18>
    681e:	f0 c0       	rjmp	.+480    	; 0x6a00 <__fp_inf>
    6820:	51 11       	cpse	r21, r1
    6822:	39 c1       	rjmp	.+626    	; 0x6a96 <__fp_szero>
    6824:	f3 c0       	rjmp	.+486    	; 0x6a0c <__fp_nan>

00006826 <__divsf3x>:
    6826:	14 d1       	rcall	.+552    	; 0x6a50 <__fp_split3>
    6828:	98 f3       	brcs	.-26     	; 0x6810 <__divsf3+0x4>

0000682a <__divsf3_pse>:
    682a:	99 23       	and	r25, r25
    682c:	c9 f3       	breq	.-14     	; 0x6820 <__divsf3+0x14>
    682e:	55 23       	and	r21, r21
    6830:	b1 f3       	breq	.-20     	; 0x681e <__divsf3+0x12>
    6832:	95 1b       	sub	r25, r21
    6834:	55 0b       	sbc	r21, r21
    6836:	bb 27       	eor	r27, r27
    6838:	aa 27       	eor	r26, r26
    683a:	62 17       	cp	r22, r18
    683c:	73 07       	cpc	r23, r19
    683e:	84 07       	cpc	r24, r20
    6840:	38 f0       	brcs	.+14     	; 0x6850 <__divsf3_pse+0x26>
    6842:	9f 5f       	subi	r25, 0xFF	; 255
    6844:	5f 4f       	sbci	r21, 0xFF	; 255
    6846:	22 0f       	add	r18, r18
    6848:	33 1f       	adc	r19, r19
    684a:	44 1f       	adc	r20, r20
    684c:	aa 1f       	adc	r26, r26
    684e:	a9 f3       	breq	.-22     	; 0x683a <__divsf3_pse+0x10>
    6850:	33 d0       	rcall	.+102    	; 0x68b8 <__divsf3_pse+0x8e>
    6852:	0e 2e       	mov	r0, r30
    6854:	3a f0       	brmi	.+14     	; 0x6864 <__divsf3_pse+0x3a>
    6856:	e0 e8       	ldi	r30, 0x80	; 128
    6858:	30 d0       	rcall	.+96     	; 0x68ba <__divsf3_pse+0x90>
    685a:	91 50       	subi	r25, 0x01	; 1
    685c:	50 40       	sbci	r21, 0x00	; 0
    685e:	e6 95       	lsr	r30
    6860:	00 1c       	adc	r0, r0
    6862:	ca f7       	brpl	.-14     	; 0x6856 <__divsf3_pse+0x2c>
    6864:	29 d0       	rcall	.+82     	; 0x68b8 <__divsf3_pse+0x8e>
    6866:	fe 2f       	mov	r31, r30
    6868:	27 d0       	rcall	.+78     	; 0x68b8 <__divsf3_pse+0x8e>
    686a:	66 0f       	add	r22, r22
    686c:	77 1f       	adc	r23, r23
    686e:	88 1f       	adc	r24, r24
    6870:	bb 1f       	adc	r27, r27
    6872:	26 17       	cp	r18, r22
    6874:	37 07       	cpc	r19, r23
    6876:	48 07       	cpc	r20, r24
    6878:	ab 07       	cpc	r26, r27
    687a:	b0 e8       	ldi	r27, 0x80	; 128
    687c:	09 f0       	breq	.+2      	; 0x6880 <__divsf3_pse+0x56>
    687e:	bb 0b       	sbc	r27, r27
    6880:	80 2d       	mov	r24, r0
    6882:	bf 01       	movw	r22, r30
    6884:	ff 27       	eor	r31, r31
    6886:	93 58       	subi	r25, 0x83	; 131
    6888:	5f 4f       	sbci	r21, 0xFF	; 255
    688a:	2a f0       	brmi	.+10     	; 0x6896 <__divsf3_pse+0x6c>
    688c:	9e 3f       	cpi	r25, 0xFE	; 254
    688e:	51 05       	cpc	r21, r1
    6890:	68 f0       	brcs	.+26     	; 0x68ac <__divsf3_pse+0x82>
    6892:	b6 c0       	rjmp	.+364    	; 0x6a00 <__fp_inf>
    6894:	00 c1       	rjmp	.+512    	; 0x6a96 <__fp_szero>
    6896:	5f 3f       	cpi	r21, 0xFF	; 255
    6898:	ec f3       	brlt	.-6      	; 0x6894 <__divsf3_pse+0x6a>
    689a:	98 3e       	cpi	r25, 0xE8	; 232
    689c:	dc f3       	brlt	.-10     	; 0x6894 <__divsf3_pse+0x6a>
    689e:	86 95       	lsr	r24
    68a0:	77 95       	ror	r23
    68a2:	67 95       	ror	r22
    68a4:	b7 95       	ror	r27
    68a6:	f7 95       	ror	r31
    68a8:	9f 5f       	subi	r25, 0xFF	; 255
    68aa:	c9 f7       	brne	.-14     	; 0x689e <__divsf3_pse+0x74>
    68ac:	88 0f       	add	r24, r24
    68ae:	91 1d       	adc	r25, r1
    68b0:	96 95       	lsr	r25
    68b2:	87 95       	ror	r24
    68b4:	97 f9       	bld	r25, 7
    68b6:	08 95       	ret
    68b8:	e1 e0       	ldi	r30, 0x01	; 1
    68ba:	66 0f       	add	r22, r22
    68bc:	77 1f       	adc	r23, r23
    68be:	88 1f       	adc	r24, r24
    68c0:	bb 1f       	adc	r27, r27
    68c2:	62 17       	cp	r22, r18
    68c4:	73 07       	cpc	r23, r19
    68c6:	84 07       	cpc	r24, r20
    68c8:	ba 07       	cpc	r27, r26
    68ca:	20 f0       	brcs	.+8      	; 0x68d4 <__divsf3_pse+0xaa>
    68cc:	62 1b       	sub	r22, r18
    68ce:	73 0b       	sbc	r23, r19
    68d0:	84 0b       	sbc	r24, r20
    68d2:	ba 0b       	sbc	r27, r26
    68d4:	ee 1f       	adc	r30, r30
    68d6:	88 f7       	brcc	.-30     	; 0x68ba <__divsf3_pse+0x90>
    68d8:	e0 95       	com	r30
    68da:	08 95       	ret

000068dc <__fixsfsi>:
    68dc:	04 d0       	rcall	.+8      	; 0x68e6 <__fixunssfsi>
    68de:	68 94       	set
    68e0:	b1 11       	cpse	r27, r1
    68e2:	d9 c0       	rjmp	.+434    	; 0x6a96 <__fp_szero>
    68e4:	08 95       	ret

000068e6 <__fixunssfsi>:
    68e6:	bc d0       	rcall	.+376    	; 0x6a60 <__fp_splitA>
    68e8:	88 f0       	brcs	.+34     	; 0x690c <__fixunssfsi+0x26>
    68ea:	9f 57       	subi	r25, 0x7F	; 127
    68ec:	90 f0       	brcs	.+36     	; 0x6912 <__fixunssfsi+0x2c>
    68ee:	b9 2f       	mov	r27, r25
    68f0:	99 27       	eor	r25, r25
    68f2:	b7 51       	subi	r27, 0x17	; 23
    68f4:	a0 f0       	brcs	.+40     	; 0x691e <__fixunssfsi+0x38>
    68f6:	d1 f0       	breq	.+52     	; 0x692c <__fixunssfsi+0x46>
    68f8:	66 0f       	add	r22, r22
    68fa:	77 1f       	adc	r23, r23
    68fc:	88 1f       	adc	r24, r24
    68fe:	99 1f       	adc	r25, r25
    6900:	1a f0       	brmi	.+6      	; 0x6908 <__fixunssfsi+0x22>
    6902:	ba 95       	dec	r27
    6904:	c9 f7       	brne	.-14     	; 0x68f8 <__fixunssfsi+0x12>
    6906:	12 c0       	rjmp	.+36     	; 0x692c <__fixunssfsi+0x46>
    6908:	b1 30       	cpi	r27, 0x01	; 1
    690a:	81 f0       	breq	.+32     	; 0x692c <__fixunssfsi+0x46>
    690c:	c3 d0       	rcall	.+390    	; 0x6a94 <__fp_zero>
    690e:	b1 e0       	ldi	r27, 0x01	; 1
    6910:	08 95       	ret
    6912:	c0 c0       	rjmp	.+384    	; 0x6a94 <__fp_zero>
    6914:	67 2f       	mov	r22, r23
    6916:	78 2f       	mov	r23, r24
    6918:	88 27       	eor	r24, r24
    691a:	b8 5f       	subi	r27, 0xF8	; 248
    691c:	39 f0       	breq	.+14     	; 0x692c <__fixunssfsi+0x46>
    691e:	b9 3f       	cpi	r27, 0xF9	; 249
    6920:	cc f3       	brlt	.-14     	; 0x6914 <__fixunssfsi+0x2e>
    6922:	86 95       	lsr	r24
    6924:	77 95       	ror	r23
    6926:	67 95       	ror	r22
    6928:	b3 95       	inc	r27
    692a:	d9 f7       	brne	.-10     	; 0x6922 <__fixunssfsi+0x3c>
    692c:	3e f4       	brtc	.+14     	; 0x693c <__fixunssfsi+0x56>
    692e:	90 95       	com	r25
    6930:	80 95       	com	r24
    6932:	70 95       	com	r23
    6934:	61 95       	neg	r22
    6936:	7f 4f       	sbci	r23, 0xFF	; 255
    6938:	8f 4f       	sbci	r24, 0xFF	; 255
    693a:	9f 4f       	sbci	r25, 0xFF	; 255
    693c:	08 95       	ret

0000693e <__floatunsisf>:
    693e:	e8 94       	clt
    6940:	09 c0       	rjmp	.+18     	; 0x6954 <__floatsisf+0x12>

00006942 <__floatsisf>:
    6942:	97 fb       	bst	r25, 7
    6944:	3e f4       	brtc	.+14     	; 0x6954 <__floatsisf+0x12>
    6946:	90 95       	com	r25
    6948:	80 95       	com	r24
    694a:	70 95       	com	r23
    694c:	61 95       	neg	r22
    694e:	7f 4f       	sbci	r23, 0xFF	; 255
    6950:	8f 4f       	sbci	r24, 0xFF	; 255
    6952:	9f 4f       	sbci	r25, 0xFF	; 255
    6954:	99 23       	and	r25, r25
    6956:	a9 f0       	breq	.+42     	; 0x6982 <__floatsisf+0x40>
    6958:	f9 2f       	mov	r31, r25
    695a:	96 e9       	ldi	r25, 0x96	; 150
    695c:	bb 27       	eor	r27, r27
    695e:	93 95       	inc	r25
    6960:	f6 95       	lsr	r31
    6962:	87 95       	ror	r24
    6964:	77 95       	ror	r23
    6966:	67 95       	ror	r22
    6968:	b7 95       	ror	r27
    696a:	f1 11       	cpse	r31, r1
    696c:	f8 cf       	rjmp	.-16     	; 0x695e <__floatsisf+0x1c>
    696e:	fa f4       	brpl	.+62     	; 0x69ae <__floatsisf+0x6c>
    6970:	bb 0f       	add	r27, r27
    6972:	11 f4       	brne	.+4      	; 0x6978 <__floatsisf+0x36>
    6974:	60 ff       	sbrs	r22, 0
    6976:	1b c0       	rjmp	.+54     	; 0x69ae <__floatsisf+0x6c>
    6978:	6f 5f       	subi	r22, 0xFF	; 255
    697a:	7f 4f       	sbci	r23, 0xFF	; 255
    697c:	8f 4f       	sbci	r24, 0xFF	; 255
    697e:	9f 4f       	sbci	r25, 0xFF	; 255
    6980:	16 c0       	rjmp	.+44     	; 0x69ae <__floatsisf+0x6c>
    6982:	88 23       	and	r24, r24
    6984:	11 f0       	breq	.+4      	; 0x698a <__floatsisf+0x48>
    6986:	96 e9       	ldi	r25, 0x96	; 150
    6988:	11 c0       	rjmp	.+34     	; 0x69ac <__floatsisf+0x6a>
    698a:	77 23       	and	r23, r23
    698c:	21 f0       	breq	.+8      	; 0x6996 <__floatsisf+0x54>
    698e:	9e e8       	ldi	r25, 0x8E	; 142
    6990:	87 2f       	mov	r24, r23
    6992:	76 2f       	mov	r23, r22
    6994:	05 c0       	rjmp	.+10     	; 0x69a0 <__floatsisf+0x5e>
    6996:	66 23       	and	r22, r22
    6998:	71 f0       	breq	.+28     	; 0x69b6 <__floatsisf+0x74>
    699a:	96 e8       	ldi	r25, 0x86	; 134
    699c:	86 2f       	mov	r24, r22
    699e:	70 e0       	ldi	r23, 0x00	; 0
    69a0:	60 e0       	ldi	r22, 0x00	; 0
    69a2:	2a f0       	brmi	.+10     	; 0x69ae <__floatsisf+0x6c>
    69a4:	9a 95       	dec	r25
    69a6:	66 0f       	add	r22, r22
    69a8:	77 1f       	adc	r23, r23
    69aa:	88 1f       	adc	r24, r24
    69ac:	da f7       	brpl	.-10     	; 0x69a4 <__floatsisf+0x62>
    69ae:	88 0f       	add	r24, r24
    69b0:	96 95       	lsr	r25
    69b2:	87 95       	ror	r24
    69b4:	97 f9       	bld	r25, 7
    69b6:	08 95       	ret

000069b8 <__fp_cmp>:
    69b8:	99 0f       	add	r25, r25
    69ba:	00 08       	sbc	r0, r0
    69bc:	55 0f       	add	r21, r21
    69be:	aa 0b       	sbc	r26, r26
    69c0:	e0 e8       	ldi	r30, 0x80	; 128
    69c2:	fe ef       	ldi	r31, 0xFE	; 254
    69c4:	16 16       	cp	r1, r22
    69c6:	17 06       	cpc	r1, r23
    69c8:	e8 07       	cpc	r30, r24
    69ca:	f9 07       	cpc	r31, r25
    69cc:	c0 f0       	brcs	.+48     	; 0x69fe <__fp_cmp+0x46>
    69ce:	12 16       	cp	r1, r18
    69d0:	13 06       	cpc	r1, r19
    69d2:	e4 07       	cpc	r30, r20
    69d4:	f5 07       	cpc	r31, r21
    69d6:	98 f0       	brcs	.+38     	; 0x69fe <__fp_cmp+0x46>
    69d8:	62 1b       	sub	r22, r18
    69da:	73 0b       	sbc	r23, r19
    69dc:	84 0b       	sbc	r24, r20
    69de:	95 0b       	sbc	r25, r21
    69e0:	39 f4       	brne	.+14     	; 0x69f0 <__fp_cmp+0x38>
    69e2:	0a 26       	eor	r0, r26
    69e4:	61 f0       	breq	.+24     	; 0x69fe <__fp_cmp+0x46>
    69e6:	23 2b       	or	r18, r19
    69e8:	24 2b       	or	r18, r20
    69ea:	25 2b       	or	r18, r21
    69ec:	21 f4       	brne	.+8      	; 0x69f6 <__fp_cmp+0x3e>
    69ee:	08 95       	ret
    69f0:	0a 26       	eor	r0, r26
    69f2:	09 f4       	brne	.+2      	; 0x69f6 <__fp_cmp+0x3e>
    69f4:	a1 40       	sbci	r26, 0x01	; 1
    69f6:	a6 95       	lsr	r26
    69f8:	8f ef       	ldi	r24, 0xFF	; 255
    69fa:	81 1d       	adc	r24, r1
    69fc:	81 1d       	adc	r24, r1
    69fe:	08 95       	ret

00006a00 <__fp_inf>:
    6a00:	97 f9       	bld	r25, 7
    6a02:	9f 67       	ori	r25, 0x7F	; 127
    6a04:	80 e8       	ldi	r24, 0x80	; 128
    6a06:	70 e0       	ldi	r23, 0x00	; 0
    6a08:	60 e0       	ldi	r22, 0x00	; 0
    6a0a:	08 95       	ret

00006a0c <__fp_nan>:
    6a0c:	9f ef       	ldi	r25, 0xFF	; 255
    6a0e:	80 ec       	ldi	r24, 0xC0	; 192
    6a10:	08 95       	ret

00006a12 <__fp_pscA>:
    6a12:	00 24       	eor	r0, r0
    6a14:	0a 94       	dec	r0
    6a16:	16 16       	cp	r1, r22
    6a18:	17 06       	cpc	r1, r23
    6a1a:	18 06       	cpc	r1, r24
    6a1c:	09 06       	cpc	r0, r25
    6a1e:	08 95       	ret

00006a20 <__fp_pscB>:
    6a20:	00 24       	eor	r0, r0
    6a22:	0a 94       	dec	r0
    6a24:	12 16       	cp	r1, r18
    6a26:	13 06       	cpc	r1, r19
    6a28:	14 06       	cpc	r1, r20
    6a2a:	05 06       	cpc	r0, r21
    6a2c:	08 95       	ret

00006a2e <__fp_round>:
    6a2e:	09 2e       	mov	r0, r25
    6a30:	03 94       	inc	r0
    6a32:	00 0c       	add	r0, r0
    6a34:	11 f4       	brne	.+4      	; 0x6a3a <__fp_round+0xc>
    6a36:	88 23       	and	r24, r24
    6a38:	52 f0       	brmi	.+20     	; 0x6a4e <__fp_round+0x20>
    6a3a:	bb 0f       	add	r27, r27
    6a3c:	40 f4       	brcc	.+16     	; 0x6a4e <__fp_round+0x20>
    6a3e:	bf 2b       	or	r27, r31
    6a40:	11 f4       	brne	.+4      	; 0x6a46 <__fp_round+0x18>
    6a42:	60 ff       	sbrs	r22, 0
    6a44:	04 c0       	rjmp	.+8      	; 0x6a4e <__fp_round+0x20>
    6a46:	6f 5f       	subi	r22, 0xFF	; 255
    6a48:	7f 4f       	sbci	r23, 0xFF	; 255
    6a4a:	8f 4f       	sbci	r24, 0xFF	; 255
    6a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    6a4e:	08 95       	ret

00006a50 <__fp_split3>:
    6a50:	57 fd       	sbrc	r21, 7
    6a52:	90 58       	subi	r25, 0x80	; 128
    6a54:	44 0f       	add	r20, r20
    6a56:	55 1f       	adc	r21, r21
    6a58:	59 f0       	breq	.+22     	; 0x6a70 <__fp_splitA+0x10>
    6a5a:	5f 3f       	cpi	r21, 0xFF	; 255
    6a5c:	71 f0       	breq	.+28     	; 0x6a7a <__fp_splitA+0x1a>
    6a5e:	47 95       	ror	r20

00006a60 <__fp_splitA>:
    6a60:	88 0f       	add	r24, r24
    6a62:	97 fb       	bst	r25, 7
    6a64:	99 1f       	adc	r25, r25
    6a66:	61 f0       	breq	.+24     	; 0x6a80 <__fp_splitA+0x20>
    6a68:	9f 3f       	cpi	r25, 0xFF	; 255
    6a6a:	79 f0       	breq	.+30     	; 0x6a8a <__fp_splitA+0x2a>
    6a6c:	87 95       	ror	r24
    6a6e:	08 95       	ret
    6a70:	12 16       	cp	r1, r18
    6a72:	13 06       	cpc	r1, r19
    6a74:	14 06       	cpc	r1, r20
    6a76:	55 1f       	adc	r21, r21
    6a78:	f2 cf       	rjmp	.-28     	; 0x6a5e <__fp_split3+0xe>
    6a7a:	46 95       	lsr	r20
    6a7c:	f1 df       	rcall	.-30     	; 0x6a60 <__fp_splitA>
    6a7e:	08 c0       	rjmp	.+16     	; 0x6a90 <__fp_splitA+0x30>
    6a80:	16 16       	cp	r1, r22
    6a82:	17 06       	cpc	r1, r23
    6a84:	18 06       	cpc	r1, r24
    6a86:	99 1f       	adc	r25, r25
    6a88:	f1 cf       	rjmp	.-30     	; 0x6a6c <__fp_splitA+0xc>
    6a8a:	86 95       	lsr	r24
    6a8c:	71 05       	cpc	r23, r1
    6a8e:	61 05       	cpc	r22, r1
    6a90:	08 94       	sec
    6a92:	08 95       	ret

00006a94 <__fp_zero>:
    6a94:	e8 94       	clt

00006a96 <__fp_szero>:
    6a96:	bb 27       	eor	r27, r27
    6a98:	66 27       	eor	r22, r22
    6a9a:	77 27       	eor	r23, r23
    6a9c:	cb 01       	movw	r24, r22
    6a9e:	97 f9       	bld	r25, 7
    6aa0:	08 95       	ret

00006aa2 <__cxa_pure_virtual>:
    6aa2:	0e 94 db 3f 	call	0x7fb6	; 0x7fb6 <abort>

00006aa6 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    6aa6:	1f 92       	push	r1
    6aa8:	0f 92       	push	r0
    6aaa:	0f b6       	in	r0, 0x3f	; 63
    6aac:	0f 92       	push	r0
    6aae:	11 24       	eor	r1, r1
    6ab0:	2f 93       	push	r18
    6ab2:	8f 93       	push	r24
    6ab4:	9f 93       	push	r25
    6ab6:	ef 93       	push	r30
    6ab8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    6aba:	e0 91 8e 0c 	lds	r30, 0x0C8E	; 0x800c8e <Serial+0x10>
    6abe:	f0 91 8f 0c 	lds	r31, 0x0C8F	; 0x800c8f <Serial+0x11>
    6ac2:	80 81       	ld	r24, Z
    6ac4:	e0 91 94 0c 	lds	r30, 0x0C94	; 0x800c94 <Serial+0x16>
    6ac8:	f0 91 95 0c 	lds	r31, 0x0C95	; 0x800c95 <Serial+0x17>
    6acc:	82 fd       	sbrc	r24, 2
    6ace:	12 c0       	rjmp	.+36     	; 0x6af4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    6ad0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    6ad2:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <Serial+0x19>
    6ad6:	8f 5f       	subi	r24, 0xFF	; 255
    6ad8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    6ada:	20 91 98 0c 	lds	r18, 0x0C98	; 0x800c98 <Serial+0x1a>
    6ade:	82 17       	cp	r24, r18
    6ae0:	51 f0       	breq	.+20     	; 0x6af6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    6ae2:	e0 91 97 0c 	lds	r30, 0x0C97	; 0x800c97 <Serial+0x19>
    6ae6:	f0 e0       	ldi	r31, 0x00	; 0
    6ae8:	e2 58       	subi	r30, 0x82	; 130
    6aea:	f3 4f       	sbci	r31, 0xF3	; 243
    6aec:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    6aee:	80 93 97 0c 	sts	0x0C97, r24	; 0x800c97 <Serial+0x19>
    6af2:	01 c0       	rjmp	.+2      	; 0x6af6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    6af4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    6af6:	ff 91       	pop	r31
    6af8:	ef 91       	pop	r30
    6afa:	9f 91       	pop	r25
    6afc:	8f 91       	pop	r24
    6afe:	2f 91       	pop	r18
    6b00:	0f 90       	pop	r0
    6b02:	0f be       	out	0x3f, r0	; 63
    6b04:	0f 90       	pop	r0
    6b06:	1f 90       	pop	r1
    6b08:	18 95       	reti

00006b0a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    6b0a:	1f 92       	push	r1
    6b0c:	0f 92       	push	r0
    6b0e:	0f b6       	in	r0, 0x3f	; 63
    6b10:	0f 92       	push	r0
    6b12:	11 24       	eor	r1, r1
    6b14:	2f 93       	push	r18
    6b16:	3f 93       	push	r19
    6b18:	4f 93       	push	r20
    6b1a:	5f 93       	push	r21
    6b1c:	6f 93       	push	r22
    6b1e:	7f 93       	push	r23
    6b20:	8f 93       	push	r24
    6b22:	9f 93       	push	r25
    6b24:	af 93       	push	r26
    6b26:	bf 93       	push	r27
    6b28:	ef 93       	push	r30
    6b2a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    6b2c:	8e e7       	ldi	r24, 0x7E	; 126
    6b2e:	9c e0       	ldi	r25, 0x0C	; 12
    6b30:	2e d7       	rcall	.+3676   	; 0x798e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    6b32:	ff 91       	pop	r31
    6b34:	ef 91       	pop	r30
    6b36:	bf 91       	pop	r27
    6b38:	af 91       	pop	r26
    6b3a:	9f 91       	pop	r25
    6b3c:	8f 91       	pop	r24
    6b3e:	7f 91       	pop	r23
    6b40:	6f 91       	pop	r22
    6b42:	5f 91       	pop	r21
    6b44:	4f 91       	pop	r20
    6b46:	3f 91       	pop	r19
    6b48:	2f 91       	pop	r18
    6b4a:	0f 90       	pop	r0
    6b4c:	0f be       	out	0x3f, r0	; 63
    6b4e:	0f 90       	pop	r0
    6b50:	1f 90       	pop	r1
    6b52:	18 95       	reti

00006b54 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    6b54:	8e e7       	ldi	r24, 0x7E	; 126
    6b56:	9c e0       	ldi	r25, 0x0C	; 12
    6b58:	d0 d6       	rcall	.+3488   	; 0x78fa <_ZN14HardwareSerial9availableEv>
    6b5a:	21 e0       	ldi	r18, 0x01	; 1
    6b5c:	89 2b       	or	r24, r25
    6b5e:	09 f4       	brne	.+2      	; 0x6b62 <_Z17Serial0_availablev+0xe>
    6b60:	20 e0       	ldi	r18, 0x00	; 0
}
    6b62:	82 2f       	mov	r24, r18
    6b64:	08 95       	ret

00006b66 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    6b66:	ee e7       	ldi	r30, 0x7E	; 126
    6b68:	fc e0       	ldi	r31, 0x0C	; 12
    6b6a:	13 82       	std	Z+3, r1	; 0x03
    6b6c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    6b6e:	88 ee       	ldi	r24, 0xE8	; 232
    6b70:	93 e0       	ldi	r25, 0x03	; 3
    6b72:	a0 e0       	ldi	r26, 0x00	; 0
    6b74:	b0 e0       	ldi	r27, 0x00	; 0
    6b76:	84 83       	std	Z+4, r24	; 0x04
    6b78:	95 83       	std	Z+5, r25	; 0x05
    6b7a:	a6 83       	std	Z+6, r26	; 0x06
    6b7c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    6b7e:	82 ed       	ldi	r24, 0xD2	; 210
    6b80:	99 e0       	ldi	r25, 0x09	; 9
    6b82:	91 83       	std	Z+1, r25	; 0x01
    6b84:	80 83       	st	Z, r24
    6b86:	85 ec       	ldi	r24, 0xC5	; 197
    6b88:	90 e0       	ldi	r25, 0x00	; 0
    6b8a:	95 87       	std	Z+13, r25	; 0x0d
    6b8c:	84 87       	std	Z+12, r24	; 0x0c
    6b8e:	84 ec       	ldi	r24, 0xC4	; 196
    6b90:	90 e0       	ldi	r25, 0x00	; 0
    6b92:	97 87       	std	Z+15, r25	; 0x0f
    6b94:	86 87       	std	Z+14, r24	; 0x0e
    6b96:	80 ec       	ldi	r24, 0xC0	; 192
    6b98:	90 e0       	ldi	r25, 0x00	; 0
    6b9a:	91 8b       	std	Z+17, r25	; 0x11
    6b9c:	80 8b       	std	Z+16, r24	; 0x10
    6b9e:	81 ec       	ldi	r24, 0xC1	; 193
    6ba0:	90 e0       	ldi	r25, 0x00	; 0
    6ba2:	93 8b       	std	Z+19, r25	; 0x13
    6ba4:	82 8b       	std	Z+18, r24	; 0x12
    6ba6:	82 ec       	ldi	r24, 0xC2	; 194
    6ba8:	90 e0       	ldi	r25, 0x00	; 0
    6baa:	95 8b       	std	Z+21, r25	; 0x15
    6bac:	84 8b       	std	Z+20, r24	; 0x14
    6bae:	86 ec       	ldi	r24, 0xC6	; 198
    6bb0:	90 e0       	ldi	r25, 0x00	; 0
    6bb2:	97 8b       	std	Z+23, r25	; 0x17
    6bb4:	86 8b       	std	Z+22, r24	; 0x16
    6bb6:	11 8e       	std	Z+25, r1	; 0x19
    6bb8:	12 8e       	std	Z+26, r1	; 0x1a
    6bba:	13 8e       	std	Z+27, r1	; 0x1b
    6bbc:	14 8e       	std	Z+28, r1	; 0x1c
    6bbe:	08 95       	ret

00006bc0 <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    6bc0:	8f 92       	push	r8
    6bc2:	9f 92       	push	r9
    6bc4:	af 92       	push	r10
    6bc6:	bf 92       	push	r11
    6bc8:	cf 92       	push	r12
    6bca:	df 92       	push	r13
    6bcc:	ef 92       	push	r14
    6bce:	ff 92       	push	r15
    6bd0:	0f 93       	push	r16
    6bd2:	1f 93       	push	r17
    6bd4:	cf 93       	push	r28
    6bd6:	df 93       	push	r29
    6bd8:	7c 01       	movw	r14, r24
    6bda:	8b 01       	movw	r16, r22
    6bdc:	4c 01       	movw	r8, r24
    6bde:	82 e0       	ldi	r24, 0x02	; 2
    6be0:	88 0e       	add	r8, r24
    6be2:	91 1c       	adc	r9, r1
    6be4:	57 01       	movw	r10, r14
    6be6:	e5 e0       	ldi	r30, 0x05	; 5
    6be8:	ae 0e       	add	r10, r30
    6bea:	b1 1c       	adc	r11, r1
    6bec:	c0 e0       	ldi	r28, 0x00	; 0
    6bee:	d0 e0       	ldi	r29, 0x00	; 0
    6bf0:	f4 01       	movw	r30, r8
    6bf2:	61 91       	ld	r22, Z+
    6bf4:	4f 01       	movw	r8, r30
    6bf6:	4a e0       	ldi	r20, 0x0A	; 10
    6bf8:	50 e0       	ldi	r21, 0x00	; 0
    6bfa:	c8 01       	movw	r24, r16
    6bfc:	4b d1       	rcall	.+662    	; 0x6e94 <_ZN5Print5printEhi>
    6bfe:	6c 01       	movw	r12, r24
    6c00:	6e e2       	ldi	r22, 0x2E	; 46
    6c02:	c8 01       	movw	r24, r16
    6c04:	ba d0       	rcall	.+372    	; 0x6d7a <_ZN5Print5printEc>
    6c06:	8c 0d       	add	r24, r12
    6c08:	9d 1d       	adc	r25, r13
    6c0a:	c8 0f       	add	r28, r24
    6c0c:	d9 1f       	adc	r29, r25
    6c0e:	8a 14       	cp	r8, r10
    6c10:	9b 04       	cpc	r9, r11
    6c12:	71 f7       	brne	.-36     	; 0x6bf0 <_ZNK9IPAddress7printToER5Print+0x30>
    6c14:	4a e0       	ldi	r20, 0x0A	; 10
    6c16:	50 e0       	ldi	r21, 0x00	; 0
    6c18:	f7 01       	movw	r30, r14
    6c1a:	65 81       	ldd	r22, Z+5	; 0x05
    6c1c:	c8 01       	movw	r24, r16
    6c1e:	3a d1       	rcall	.+628    	; 0x6e94 <_ZN5Print5printEhi>
    6c20:	8c 0f       	add	r24, r28
    6c22:	9d 1f       	adc	r25, r29
    6c24:	df 91       	pop	r29
    6c26:	cf 91       	pop	r28
    6c28:	1f 91       	pop	r17
    6c2a:	0f 91       	pop	r16
    6c2c:	ff 90       	pop	r15
    6c2e:	ef 90       	pop	r14
    6c30:	df 90       	pop	r13
    6c32:	cf 90       	pop	r12
    6c34:	bf 90       	pop	r11
    6c36:	af 90       	pop	r10
    6c38:	9f 90       	pop	r9
    6c3a:	8f 90       	pop	r8
    6c3c:	08 95       	ret

00006c3e <_ZN9IPAddressC1Ev>:
    6c3e:	20 ec       	ldi	r18, 0xC0	; 192
    6c40:	39 e0       	ldi	r19, 0x09	; 9
    6c42:	fc 01       	movw	r30, r24
    6c44:	31 83       	std	Z+1, r19	; 0x01
    6c46:	20 83       	st	Z, r18
    6c48:	12 82       	std	Z+2, r1	; 0x02
    6c4a:	13 82       	std	Z+3, r1	; 0x03
    6c4c:	14 82       	std	Z+4, r1	; 0x04
    6c4e:	15 82       	std	Z+5, r1	; 0x05
    6c50:	08 95       	ret

00006c52 <_ZN9IPAddressC1Ehhhh>:
    6c52:	0f 93       	push	r16
    6c54:	fc 01       	movw	r30, r24
    6c56:	80 ec       	ldi	r24, 0xC0	; 192
    6c58:	99 e0       	ldi	r25, 0x09	; 9
    6c5a:	91 83       	std	Z+1, r25	; 0x01
    6c5c:	80 83       	st	Z, r24
    6c5e:	62 83       	std	Z+2, r22	; 0x02
    6c60:	43 83       	std	Z+3, r20	; 0x03
    6c62:	24 83       	std	Z+4, r18	; 0x04
    6c64:	05 83       	std	Z+5, r16	; 0x05
    6c66:	0f 91       	pop	r16
    6c68:	08 95       	ret

00006c6a <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    6c6a:	dc 01       	movw	r26, r24
    6c6c:	12 96       	adiw	r26, 0x02	; 2
    6c6e:	24 e0       	ldi	r18, 0x04	; 4
    6c70:	fb 01       	movw	r30, r22
    6c72:	01 90       	ld	r0, Z+
    6c74:	0d 92       	st	X+, r0
    6c76:	2a 95       	dec	r18
    6c78:	e1 f7       	brne	.-8      	; 0x6c72 <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    6c7a:	08 95       	ret

00006c7c <initVariant>:
    6c7c:	08 95       	ret

00006c7e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    6c7e:	e4 d1       	rcall	.+968    	; 0x7048 <init>

	initVariant();
    6c80:	fd df       	rcall	.-6      	; 0x6c7c <initVariant>
    6c82:	0e 94 cc 18 	call	0x3198	; 0x3198 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    6c86:	ca eb       	ldi	r28, 0xBA	; 186
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    6c88:	dc e3       	ldi	r29, 0x3C	; 60
    6c8a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    6c8e:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    6c90:	e1 f3       	breq	.-8      	; 0x6c8a <main+0xc>
    6c92:	70 d6       	rcall	.+3296   	; 0x7974 <_Z14serialEventRunv>
    6c94:	fa cf       	rjmp	.-12     	; 0x6c8a <main+0xc>

00006c96 <_ZN5Print5writeEPKhj>:
    6c96:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    6c98:	df 92       	push	r13
    6c9a:	ef 92       	push	r14
    6c9c:	ff 92       	push	r15
    6c9e:	0f 93       	push	r16
    6ca0:	1f 93       	push	r17
    6ca2:	cf 93       	push	r28
    6ca4:	df 93       	push	r29
    6ca6:	6c 01       	movw	r12, r24
    6ca8:	7a 01       	movw	r14, r20
    6caa:	8b 01       	movw	r16, r22
    6cac:	c0 e0       	ldi	r28, 0x00	; 0
    6cae:	d0 e0       	ldi	r29, 0x00	; 0
    6cb0:	ce 15       	cp	r28, r14
    6cb2:	df 05       	cpc	r29, r15
    6cb4:	81 f0       	breq	.+32     	; 0x6cd6 <_ZN5Print5writeEPKhj+0x40>
    6cb6:	d8 01       	movw	r26, r16
    6cb8:	6d 91       	ld	r22, X+
    6cba:	8d 01       	movw	r16, r26
    6cbc:	d6 01       	movw	r26, r12
    6cbe:	ed 91       	ld	r30, X+
    6cc0:	fc 91       	ld	r31, X
    6cc2:	01 90       	ld	r0, Z+
    6cc4:	f0 81       	ld	r31, Z
    6cc6:	e0 2d       	mov	r30, r0
    6cc8:	c6 01       	movw	r24, r12
    6cca:	09 95       	icall
    6ccc:	89 2b       	or	r24, r25
    6cce:	11 f0       	breq	.+4      	; 0x6cd4 <_ZN5Print5writeEPKhj+0x3e>
    6cd0:	21 96       	adiw	r28, 0x01	; 1
    6cd2:	ee cf       	rjmp	.-36     	; 0x6cb0 <_ZN5Print5writeEPKhj+0x1a>
    6cd4:	7e 01       	movw	r14, r28
    6cd6:	c7 01       	movw	r24, r14
    6cd8:	df 91       	pop	r29
    6cda:	cf 91       	pop	r28
    6cdc:	1f 91       	pop	r17
    6cde:	0f 91       	pop	r16
    6ce0:	ff 90       	pop	r15
    6ce2:	ef 90       	pop	r14
    6ce4:	df 90       	pop	r13
    6ce6:	cf 90       	pop	r12
    6ce8:	08 95       	ret

00006cea <_ZN5Print5writeEPKc>:
    6cea:	61 15       	cp	r22, r1
    6cec:	71 05       	cpc	r23, r1
    6cee:	79 f0       	breq	.+30     	; 0x6d0e <_ZN5Print5writeEPKc+0x24>
    6cf0:	fb 01       	movw	r30, r22
    6cf2:	01 90       	ld	r0, Z+
    6cf4:	00 20       	and	r0, r0
    6cf6:	e9 f7       	brne	.-6      	; 0x6cf2 <_ZN5Print5writeEPKc+0x8>
    6cf8:	31 97       	sbiw	r30, 0x01	; 1
    6cfa:	af 01       	movw	r20, r30
    6cfc:	46 1b       	sub	r20, r22
    6cfe:	57 0b       	sbc	r21, r23
    6d00:	dc 01       	movw	r26, r24
    6d02:	ed 91       	ld	r30, X+
    6d04:	fc 91       	ld	r31, X
    6d06:	02 80       	ldd	r0, Z+2	; 0x02
    6d08:	f3 81       	ldd	r31, Z+3	; 0x03
    6d0a:	e0 2d       	mov	r30, r0
    6d0c:	09 94       	ijmp
    6d0e:	80 e0       	ldi	r24, 0x00	; 0
    6d10:	90 e0       	ldi	r25, 0x00	; 0
    6d12:	08 95       	ret

00006d14 <_ZN5Print5printEPK19__FlashStringHelper>:
    6d14:	ef 92       	push	r14
    6d16:	ff 92       	push	r15
    6d18:	0f 93       	push	r16
    6d1a:	1f 93       	push	r17
    6d1c:	cf 93       	push	r28
    6d1e:	df 93       	push	r29
    6d20:	8c 01       	movw	r16, r24
    6d22:	7b 01       	movw	r14, r22
    6d24:	c0 e0       	ldi	r28, 0x00	; 0
    6d26:	d0 e0       	ldi	r29, 0x00	; 0
    6d28:	f7 01       	movw	r30, r14
    6d2a:	ec 0f       	add	r30, r28
    6d2c:	fd 1f       	adc	r31, r29
    6d2e:	64 91       	lpm	r22, Z
    6d30:	66 23       	and	r22, r22
    6d32:	61 f0       	breq	.+24     	; 0x6d4c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    6d34:	d8 01       	movw	r26, r16
    6d36:	ed 91       	ld	r30, X+
    6d38:	fc 91       	ld	r31, X
    6d3a:	01 90       	ld	r0, Z+
    6d3c:	f0 81       	ld	r31, Z
    6d3e:	e0 2d       	mov	r30, r0
    6d40:	c8 01       	movw	r24, r16
    6d42:	09 95       	icall
    6d44:	89 2b       	or	r24, r25
    6d46:	11 f0       	breq	.+4      	; 0x6d4c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    6d48:	21 96       	adiw	r28, 0x01	; 1
    6d4a:	ee cf       	rjmp	.-36     	; 0x6d28 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    6d4c:	ce 01       	movw	r24, r28
    6d4e:	df 91       	pop	r29
    6d50:	cf 91       	pop	r28
    6d52:	1f 91       	pop	r17
    6d54:	0f 91       	pop	r16
    6d56:	ff 90       	pop	r15
    6d58:	ef 90       	pop	r14
    6d5a:	08 95       	ret

00006d5c <_ZN5Print5printERK6String>:
    6d5c:	db 01       	movw	r26, r22
    6d5e:	14 96       	adiw	r26, 0x04	; 4
    6d60:	4d 91       	ld	r20, X+
    6d62:	5c 91       	ld	r21, X
    6d64:	15 97       	sbiw	r26, 0x05	; 5
    6d66:	6d 91       	ld	r22, X+
    6d68:	7c 91       	ld	r23, X
    6d6a:	dc 01       	movw	r26, r24
    6d6c:	ed 91       	ld	r30, X+
    6d6e:	fc 91       	ld	r31, X
    6d70:	02 80       	ldd	r0, Z+2	; 0x02
    6d72:	f3 81       	ldd	r31, Z+3	; 0x03
    6d74:	e0 2d       	mov	r30, r0
    6d76:	09 94       	ijmp

00006d78 <_ZN5Print5printEPKc>:
    6d78:	b8 cf       	rjmp	.-144    	; 0x6cea <_ZN5Print5writeEPKc>

00006d7a <_ZN5Print5printEc>:
    6d7a:	dc 01       	movw	r26, r24
    6d7c:	ed 91       	ld	r30, X+
    6d7e:	fc 91       	ld	r31, X
    6d80:	01 90       	ld	r0, Z+
    6d82:	f0 81       	ld	r31, Z
    6d84:	e0 2d       	mov	r30, r0
    6d86:	09 94       	ijmp

00006d88 <_ZN5Print7printlnEv>:
    6d88:	60 e3       	ldi	r22, 0x30	; 48
    6d8a:	73 e0       	ldi	r23, 0x03	; 3
    6d8c:	ae cf       	rjmp	.-164    	; 0x6cea <_ZN5Print5writeEPKc>

00006d8e <_ZN5Print7printlnEPK19__FlashStringHelper>:
    6d8e:	0f 93       	push	r16
    6d90:	1f 93       	push	r17
    6d92:	cf 93       	push	r28
    6d94:	df 93       	push	r29
    6d96:	ec 01       	movw	r28, r24
    6d98:	bd df       	rcall	.-134    	; 0x6d14 <_ZN5Print5printEPK19__FlashStringHelper>
    6d9a:	8c 01       	movw	r16, r24
    6d9c:	ce 01       	movw	r24, r28
    6d9e:	f4 df       	rcall	.-24     	; 0x6d88 <_ZN5Print7printlnEv>
    6da0:	80 0f       	add	r24, r16
    6da2:	91 1f       	adc	r25, r17
    6da4:	df 91       	pop	r29
    6da6:	cf 91       	pop	r28
    6da8:	1f 91       	pop	r17
    6daa:	0f 91       	pop	r16
    6dac:	08 95       	ret

00006dae <_ZN5Print7printlnERK6String>:
    6dae:	0f 93       	push	r16
    6db0:	1f 93       	push	r17
    6db2:	cf 93       	push	r28
    6db4:	df 93       	push	r29
    6db6:	ec 01       	movw	r28, r24
    6db8:	d1 df       	rcall	.-94     	; 0x6d5c <_ZN5Print5printERK6String>
    6dba:	8c 01       	movw	r16, r24
    6dbc:	ce 01       	movw	r24, r28
    6dbe:	e4 df       	rcall	.-56     	; 0x6d88 <_ZN5Print7printlnEv>
    6dc0:	80 0f       	add	r24, r16
    6dc2:	91 1f       	adc	r25, r17
    6dc4:	df 91       	pop	r29
    6dc6:	cf 91       	pop	r28
    6dc8:	1f 91       	pop	r17
    6dca:	0f 91       	pop	r16
    6dcc:	08 95       	ret

00006dce <_ZN5Print7printlnEPKc>:
    6dce:	0f 93       	push	r16
    6dd0:	1f 93       	push	r17
    6dd2:	cf 93       	push	r28
    6dd4:	df 93       	push	r29
    6dd6:	ec 01       	movw	r28, r24
    6dd8:	88 df       	rcall	.-240    	; 0x6cea <_ZN5Print5writeEPKc>
    6dda:	8c 01       	movw	r16, r24
    6ddc:	ce 01       	movw	r24, r28
    6dde:	d4 df       	rcall	.-88     	; 0x6d88 <_ZN5Print7printlnEv>
    6de0:	80 0f       	add	r24, r16
    6de2:	91 1f       	adc	r25, r17
    6de4:	df 91       	pop	r29
    6de6:	cf 91       	pop	r28
    6de8:	1f 91       	pop	r17
    6dea:	0f 91       	pop	r16
    6dec:	08 95       	ret

00006dee <_ZN5Print11printNumberEmh>:
    6dee:	8f 92       	push	r8
    6df0:	9f 92       	push	r9
    6df2:	af 92       	push	r10
    6df4:	bf 92       	push	r11
    6df6:	ef 92       	push	r14
    6df8:	ff 92       	push	r15
    6dfa:	0f 93       	push	r16
    6dfc:	1f 93       	push	r17
    6dfe:	cf 93       	push	r28
    6e00:	df 93       	push	r29
    6e02:	cd b7       	in	r28, 0x3d	; 61
    6e04:	de b7       	in	r29, 0x3e	; 62
    6e06:	a1 97       	sbiw	r28, 0x21	; 33
    6e08:	0f b6       	in	r0, 0x3f	; 63
    6e0a:	f8 94       	cli
    6e0c:	de bf       	out	0x3e, r29	; 62
    6e0e:	0f be       	out	0x3f, r0	; 63
    6e10:	cd bf       	out	0x3d, r28	; 61
    6e12:	7c 01       	movw	r14, r24
    6e14:	fa 01       	movw	r30, r20
    6e16:	cb 01       	movw	r24, r22
    6e18:	19 a2       	std	Y+33, r1	; 0x21
    6e1a:	22 30       	cpi	r18, 0x02	; 2
    6e1c:	08 f4       	brcc	.+2      	; 0x6e20 <_ZN5Print11printNumberEmh+0x32>
    6e1e:	2a e0       	ldi	r18, 0x0A	; 10
    6e20:	8e 01       	movw	r16, r28
    6e22:	0f 5d       	subi	r16, 0xDF	; 223
    6e24:	1f 4f       	sbci	r17, 0xFF	; 255
    6e26:	82 2e       	mov	r8, r18
    6e28:	91 2c       	mov	r9, r1
    6e2a:	a1 2c       	mov	r10, r1
    6e2c:	b1 2c       	mov	r11, r1
    6e2e:	bf 01       	movw	r22, r30
    6e30:	a5 01       	movw	r20, r10
    6e32:	94 01       	movw	r18, r8
    6e34:	5c d6       	rcall	.+3256   	; 0x7aee <__udivmodsi4>
    6e36:	f9 01       	movw	r30, r18
    6e38:	ca 01       	movw	r24, r20
    6e3a:	01 50       	subi	r16, 0x01	; 1
    6e3c:	11 09       	sbc	r17, r1
    6e3e:	6a 30       	cpi	r22, 0x0A	; 10
    6e40:	10 f4       	brcc	.+4      	; 0x6e46 <_ZN5Print11printNumberEmh+0x58>
    6e42:	60 5d       	subi	r22, 0xD0	; 208
    6e44:	01 c0       	rjmp	.+2      	; 0x6e48 <_ZN5Print11printNumberEmh+0x5a>
    6e46:	69 5c       	subi	r22, 0xC9	; 201
    6e48:	d8 01       	movw	r26, r16
    6e4a:	6c 93       	st	X, r22
    6e4c:	23 2b       	or	r18, r19
    6e4e:	24 2b       	or	r18, r20
    6e50:	25 2b       	or	r18, r21
    6e52:	69 f7       	brne	.-38     	; 0x6e2e <_ZN5Print11printNumberEmh+0x40>
    6e54:	b8 01       	movw	r22, r16
    6e56:	c7 01       	movw	r24, r14
    6e58:	48 df       	rcall	.-368    	; 0x6cea <_ZN5Print5writeEPKc>
    6e5a:	a1 96       	adiw	r28, 0x21	; 33
    6e5c:	0f b6       	in	r0, 0x3f	; 63
    6e5e:	f8 94       	cli
    6e60:	de bf       	out	0x3e, r29	; 62
    6e62:	0f be       	out	0x3f, r0	; 63
    6e64:	cd bf       	out	0x3d, r28	; 61
    6e66:	df 91       	pop	r29
    6e68:	cf 91       	pop	r28
    6e6a:	1f 91       	pop	r17
    6e6c:	0f 91       	pop	r16
    6e6e:	ff 90       	pop	r15
    6e70:	ef 90       	pop	r14
    6e72:	bf 90       	pop	r11
    6e74:	af 90       	pop	r10
    6e76:	9f 90       	pop	r9
    6e78:	8f 90       	pop	r8
    6e7a:	08 95       	ret

00006e7c <_ZN5Print5printEmi>:
    6e7c:	21 15       	cp	r18, r1
    6e7e:	31 05       	cpc	r19, r1
    6e80:	41 f4       	brne	.+16     	; 0x6e92 <_ZN5Print5printEmi+0x16>
    6e82:	dc 01       	movw	r26, r24
    6e84:	ed 91       	ld	r30, X+
    6e86:	fc 91       	ld	r31, X
    6e88:	01 90       	ld	r0, Z+
    6e8a:	f0 81       	ld	r31, Z
    6e8c:	e0 2d       	mov	r30, r0
    6e8e:	64 2f       	mov	r22, r20
    6e90:	09 94       	ijmp
    6e92:	ad cf       	rjmp	.-166    	; 0x6dee <_ZN5Print11printNumberEmh>

00006e94 <_ZN5Print5printEhi>:
    6e94:	9a 01       	movw	r18, r20
    6e96:	46 2f       	mov	r20, r22
    6e98:	50 e0       	ldi	r21, 0x00	; 0
    6e9a:	60 e0       	ldi	r22, 0x00	; 0
    6e9c:	70 e0       	ldi	r23, 0x00	; 0
    6e9e:	ee cf       	rjmp	.-36     	; 0x6e7c <_ZN5Print5printEmi>

00006ea0 <_ZN5Print5printEji>:
    6ea0:	9a 01       	movw	r18, r20
    6ea2:	ab 01       	movw	r20, r22
    6ea4:	60 e0       	ldi	r22, 0x00	; 0
    6ea6:	70 e0       	ldi	r23, 0x00	; 0
    6ea8:	e9 cf       	rjmp	.-46     	; 0x6e7c <_ZN5Print5printEmi>

00006eaa <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    6eaa:	0f 93       	push	r16
    6eac:	1f 93       	push	r17
    6eae:	cf 93       	push	r28
    6eb0:	df 93       	push	r29
    6eb2:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    6eb4:	e3 df       	rcall	.-58     	; 0x6e7c <_ZN5Print5printEmi>
    6eb6:	8c 01       	movw	r16, r24
  n += println();
    6eb8:	ce 01       	movw	r24, r28
    6eba:	66 df       	rcall	.-308    	; 0x6d88 <_ZN5Print7printlnEv>
  return n;
}
    6ebc:	80 0f       	add	r24, r16
    6ebe:	91 1f       	adc	r25, r17
    6ec0:	df 91       	pop	r29
    6ec2:	cf 91       	pop	r28
    6ec4:	1f 91       	pop	r17
    6ec6:	0f 91       	pop	r16
    6ec8:	08 95       	ret

00006eca <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    6eca:	1f 92       	push	r1
    6ecc:	0f 92       	push	r0
    6ece:	0f b6       	in	r0, 0x3f	; 63
    6ed0:	0f 92       	push	r0
    6ed2:	11 24       	eor	r1, r1
    6ed4:	2f 93       	push	r18
    6ed6:	3f 93       	push	r19
    6ed8:	8f 93       	push	r24
    6eda:	9f 93       	push	r25
    6edc:	af 93       	push	r26
    6ede:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    6ee0:	80 91 1c 0d 	lds	r24, 0x0D1C	; 0x800d1c <timer0_millis>
    6ee4:	90 91 1d 0d 	lds	r25, 0x0D1D	; 0x800d1d <timer0_millis+0x1>
    6ee8:	a0 91 1e 0d 	lds	r26, 0x0D1E	; 0x800d1e <timer0_millis+0x2>
    6eec:	b0 91 1f 0d 	lds	r27, 0x0D1F	; 0x800d1f <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    6ef0:	30 91 1b 0d 	lds	r19, 0x0D1B	; 0x800d1b <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    6ef4:	23 e0       	ldi	r18, 0x03	; 3
    6ef6:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    6ef8:	2d 37       	cpi	r18, 0x7D	; 125
    6efa:	20 f4       	brcc	.+8      	; 0x6f04 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    6efc:	01 96       	adiw	r24, 0x01	; 1
    6efe:	a1 1d       	adc	r26, r1
    6f00:	b1 1d       	adc	r27, r1
    6f02:	05 c0       	rjmp	.+10     	; 0x6f0e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    6f04:	26 e8       	ldi	r18, 0x86	; 134
    6f06:	23 0f       	add	r18, r19
		m += 1;
    6f08:	02 96       	adiw	r24, 0x02	; 2
    6f0a:	a1 1d       	adc	r26, r1
    6f0c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    6f0e:	20 93 1b 0d 	sts	0x0D1B, r18	; 0x800d1b <timer0_fract>
	timer0_millis = m;
    6f12:	80 93 1c 0d 	sts	0x0D1C, r24	; 0x800d1c <timer0_millis>
    6f16:	90 93 1d 0d 	sts	0x0D1D, r25	; 0x800d1d <timer0_millis+0x1>
    6f1a:	a0 93 1e 0d 	sts	0x0D1E, r26	; 0x800d1e <timer0_millis+0x2>
    6f1e:	b0 93 1f 0d 	sts	0x0D1F, r27	; 0x800d1f <timer0_millis+0x3>
	timer0_overflow_count++;
    6f22:	80 91 20 0d 	lds	r24, 0x0D20	; 0x800d20 <timer0_overflow_count>
    6f26:	90 91 21 0d 	lds	r25, 0x0D21	; 0x800d21 <timer0_overflow_count+0x1>
    6f2a:	a0 91 22 0d 	lds	r26, 0x0D22	; 0x800d22 <timer0_overflow_count+0x2>
    6f2e:	b0 91 23 0d 	lds	r27, 0x0D23	; 0x800d23 <timer0_overflow_count+0x3>
    6f32:	01 96       	adiw	r24, 0x01	; 1
    6f34:	a1 1d       	adc	r26, r1
    6f36:	b1 1d       	adc	r27, r1
    6f38:	80 93 20 0d 	sts	0x0D20, r24	; 0x800d20 <timer0_overflow_count>
    6f3c:	90 93 21 0d 	sts	0x0D21, r25	; 0x800d21 <timer0_overflow_count+0x1>
    6f40:	a0 93 22 0d 	sts	0x0D22, r26	; 0x800d22 <timer0_overflow_count+0x2>
    6f44:	b0 93 23 0d 	sts	0x0D23, r27	; 0x800d23 <timer0_overflow_count+0x3>
}
    6f48:	bf 91       	pop	r27
    6f4a:	af 91       	pop	r26
    6f4c:	9f 91       	pop	r25
    6f4e:	8f 91       	pop	r24
    6f50:	3f 91       	pop	r19
    6f52:	2f 91       	pop	r18
    6f54:	0f 90       	pop	r0
    6f56:	0f be       	out	0x3f, r0	; 63
    6f58:	0f 90       	pop	r0
    6f5a:	1f 90       	pop	r1
    6f5c:	18 95       	reti

00006f5e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    6f5e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    6f60:	f8 94       	cli
	m = timer0_millis;
    6f62:	60 91 1c 0d 	lds	r22, 0x0D1C	; 0x800d1c <timer0_millis>
    6f66:	70 91 1d 0d 	lds	r23, 0x0D1D	; 0x800d1d <timer0_millis+0x1>
    6f6a:	80 91 1e 0d 	lds	r24, 0x0D1E	; 0x800d1e <timer0_millis+0x2>
    6f6e:	90 91 1f 0d 	lds	r25, 0x0D1F	; 0x800d1f <timer0_millis+0x3>
	SREG = oldSREG;
    6f72:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    6f74:	08 95       	ret

00006f76 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6f76:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    6f78:	f8 94       	cli
	m = timer0_overflow_count;
    6f7a:	80 91 20 0d 	lds	r24, 0x0D20	; 0x800d20 <timer0_overflow_count>
    6f7e:	90 91 21 0d 	lds	r25, 0x0D21	; 0x800d21 <timer0_overflow_count+0x1>
    6f82:	a0 91 22 0d 	lds	r26, 0x0D22	; 0x800d22 <timer0_overflow_count+0x2>
    6f86:	b0 91 23 0d 	lds	r27, 0x0D23	; 0x800d23 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    6f8a:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6f8c:	a8 9b       	sbis	0x15, 0	; 21
    6f8e:	05 c0       	rjmp	.+10     	; 0x6f9a <micros+0x24>
    6f90:	2f 3f       	cpi	r18, 0xFF	; 255
    6f92:	19 f0       	breq	.+6      	; 0x6f9a <micros+0x24>
		m++;
    6f94:	01 96       	adiw	r24, 0x01	; 1
    6f96:	a1 1d       	adc	r26, r1
    6f98:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6f9a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    6f9c:	ba 2f       	mov	r27, r26
    6f9e:	a9 2f       	mov	r26, r25
    6fa0:	98 2f       	mov	r25, r24
    6fa2:	88 27       	eor	r24, r24
    6fa4:	82 0f       	add	r24, r18
    6fa6:	91 1d       	adc	r25, r1
    6fa8:	a1 1d       	adc	r26, r1
    6faa:	b1 1d       	adc	r27, r1
    6fac:	bc 01       	movw	r22, r24
    6fae:	cd 01       	movw	r24, r26
    6fb0:	42 e0       	ldi	r20, 0x02	; 2
    6fb2:	66 0f       	add	r22, r22
    6fb4:	77 1f       	adc	r23, r23
    6fb6:	88 1f       	adc	r24, r24
    6fb8:	99 1f       	adc	r25, r25
    6fba:	4a 95       	dec	r20
    6fbc:	d1 f7       	brne	.-12     	; 0x6fb2 <micros+0x3c>
}
    6fbe:	08 95       	ret

00006fc0 <delay>:

void delay(unsigned long ms)
{
    6fc0:	8f 92       	push	r8
    6fc2:	9f 92       	push	r9
    6fc4:	af 92       	push	r10
    6fc6:	bf 92       	push	r11
    6fc8:	cf 92       	push	r12
    6fca:	df 92       	push	r13
    6fcc:	ef 92       	push	r14
    6fce:	ff 92       	push	r15
    6fd0:	6b 01       	movw	r12, r22
    6fd2:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    6fd4:	d0 df       	rcall	.-96     	; 0x6f76 <micros>
    6fd6:	4b 01       	movw	r8, r22
    6fd8:	5c 01       	movw	r10, r24

	while (ms > 0) {
    6fda:	c1 14       	cp	r12, r1
    6fdc:	d1 04       	cpc	r13, r1
    6fde:	e1 04       	cpc	r14, r1
    6fe0:	f1 04       	cpc	r15, r1
		yield();
    6fe2:	f1 f0       	breq	.+60     	; 0x7020 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    6fe4:	63 d5       	rcall	.+2758   	; 0x7aac <yield>
    6fe6:	c7 df       	rcall	.-114    	; 0x6f76 <micros>
    6fe8:	dc 01       	movw	r26, r24
    6fea:	cb 01       	movw	r24, r22
    6fec:	88 19       	sub	r24, r8
    6fee:	99 09       	sbc	r25, r9
    6ff0:	aa 09       	sbc	r26, r10
    6ff2:	bb 09       	sbc	r27, r11
    6ff4:	88 3e       	cpi	r24, 0xE8	; 232
    6ff6:	93 40       	sbci	r25, 0x03	; 3
    6ff8:	a1 05       	cpc	r26, r1
    6ffa:	b1 05       	cpc	r27, r1
    6ffc:	70 f3       	brcs	.-36     	; 0x6fda <delay+0x1a>
			ms--;
    6ffe:	21 e0       	ldi	r18, 0x01	; 1
    7000:	c2 1a       	sub	r12, r18
    7002:	d1 08       	sbc	r13, r1
    7004:	e1 08       	sbc	r14, r1
    7006:	f1 08       	sbc	r15, r1
			start += 1000;
    7008:	88 ee       	ldi	r24, 0xE8	; 232
    700a:	88 0e       	add	r8, r24
    700c:	83 e0       	ldi	r24, 0x03	; 3
    700e:	98 1e       	adc	r9, r24
    7010:	a1 1c       	adc	r10, r1
    7012:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    7014:	c1 14       	cp	r12, r1
    7016:	d1 04       	cpc	r13, r1
    7018:	e1 04       	cpc	r14, r1
    701a:	f1 04       	cpc	r15, r1
    701c:	21 f7       	brne	.-56     	; 0x6fe6 <delay+0x26>
    701e:	dd cf       	rjmp	.-70     	; 0x6fda <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    7020:	ff 90       	pop	r15
    7022:	ef 90       	pop	r14
    7024:	df 90       	pop	r13
    7026:	cf 90       	pop	r12
    7028:	bf 90       	pop	r11
    702a:	af 90       	pop	r10
    702c:	9f 90       	pop	r9
    702e:	8f 90       	pop	r8
    7030:	08 95       	ret

00007032 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    7032:	82 30       	cpi	r24, 0x02	; 2
    7034:	91 05       	cpc	r25, r1
    7036:	38 f0       	brcs	.+14     	; 0x7046 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    7038:	88 0f       	add	r24, r24
    703a:	99 1f       	adc	r25, r25
    703c:	88 0f       	add	r24, r24
    703e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    7040:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    7042:	01 97       	sbiw	r24, 0x01	; 1
    7044:	f1 f7       	brne	.-4      	; 0x7042 <delayMicroseconds+0x10>
    7046:	08 95       	ret

00007048 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    7048:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    704a:	84 b5       	in	r24, 0x24	; 36
    704c:	82 60       	ori	r24, 0x02	; 2
    704e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    7050:	84 b5       	in	r24, 0x24	; 36
    7052:	81 60       	ori	r24, 0x01	; 1
    7054:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    7056:	85 b5       	in	r24, 0x25	; 37
    7058:	82 60       	ori	r24, 0x02	; 2
    705a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    705c:	85 b5       	in	r24, 0x25	; 37
    705e:	81 60       	ori	r24, 0x01	; 1
    7060:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    7062:	ee e6       	ldi	r30, 0x6E	; 110
    7064:	f0 e0       	ldi	r31, 0x00	; 0
    7066:	80 81       	ld	r24, Z
    7068:	81 60       	ori	r24, 0x01	; 1
    706a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    706c:	e1 e8       	ldi	r30, 0x81	; 129
    706e:	f0 e0       	ldi	r31, 0x00	; 0
    7070:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    7072:	80 81       	ld	r24, Z
    7074:	82 60       	ori	r24, 0x02	; 2
    7076:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    7078:	80 81       	ld	r24, Z
    707a:	81 60       	ori	r24, 0x01	; 1
    707c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    707e:	e0 e8       	ldi	r30, 0x80	; 128
    7080:	f0 e0       	ldi	r31, 0x00	; 0
    7082:	80 81       	ld	r24, Z
    7084:	81 60       	ori	r24, 0x01	; 1
    7086:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    7088:	e1 eb       	ldi	r30, 0xB1	; 177
    708a:	f0 e0       	ldi	r31, 0x00	; 0
    708c:	80 81       	ld	r24, Z
    708e:	84 60       	ori	r24, 0x04	; 4
    7090:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    7092:	e0 eb       	ldi	r30, 0xB0	; 176
    7094:	f0 e0       	ldi	r31, 0x00	; 0
    7096:	80 81       	ld	r24, Z
    7098:	81 60       	ori	r24, 0x01	; 1
    709a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    709c:	ea e7       	ldi	r30, 0x7A	; 122
    709e:	f0 e0       	ldi	r31, 0x00	; 0
    70a0:	80 81       	ld	r24, Z
    70a2:	84 60       	ori	r24, 0x04	; 4
    70a4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    70a6:	80 81       	ld	r24, Z
    70a8:	82 60       	ori	r24, 0x02	; 2
    70aa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    70ac:	80 81       	ld	r24, Z
    70ae:	81 60       	ori	r24, 0x01	; 1
    70b0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    70b2:	80 81       	ld	r24, Z
    70b4:	80 68       	ori	r24, 0x80	; 128
    70b6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    70b8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    70bc:	08 95       	ret

000070be <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    70be:	83 30       	cpi	r24, 0x03	; 3
    70c0:	81 f0       	breq	.+32     	; 0x70e2 <turnOffPWM+0x24>
    70c2:	28 f4       	brcc	.+10     	; 0x70ce <turnOffPWM+0x10>
    70c4:	81 30       	cpi	r24, 0x01	; 1
    70c6:	99 f0       	breq	.+38     	; 0x70ee <turnOffPWM+0x30>
    70c8:	82 30       	cpi	r24, 0x02	; 2
    70ca:	a1 f0       	breq	.+40     	; 0x70f4 <turnOffPWM+0x36>
    70cc:	08 95       	ret
    70ce:	87 30       	cpi	r24, 0x07	; 7
    70d0:	a9 f0       	breq	.+42     	; 0x70fc <turnOffPWM+0x3e>
    70d2:	88 30       	cpi	r24, 0x08	; 8
    70d4:	b9 f0       	breq	.+46     	; 0x7104 <turnOffPWM+0x46>
    70d6:	84 30       	cpi	r24, 0x04	; 4
    70d8:	d1 f4       	brne	.+52     	; 0x710e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    70da:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    70de:	8f 7d       	andi	r24, 0xDF	; 223
    70e0:	03 c0       	rjmp	.+6      	; 0x70e8 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    70e2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    70e6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    70e8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    70ec:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    70ee:	84 b5       	in	r24, 0x24	; 36
    70f0:	8f 77       	andi	r24, 0x7F	; 127
    70f2:	02 c0       	rjmp	.+4      	; 0x70f8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    70f4:	84 b5       	in	r24, 0x24	; 36
    70f6:	8f 7d       	andi	r24, 0xDF	; 223
    70f8:	84 bd       	out	0x24, r24	; 36
    70fa:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    70fc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7100:	8f 77       	andi	r24, 0x7F	; 127
    7102:	03 c0       	rjmp	.+6      	; 0x710a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    7104:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7108:	8f 7d       	andi	r24, 0xDF	; 223
    710a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    710e:	08 95       	ret

00007110 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    7110:	cf 93       	push	r28
    7112:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    7114:	90 e0       	ldi	r25, 0x00	; 0
    7116:	fc 01       	movw	r30, r24
    7118:	e0 5b       	subi	r30, 0xB0	; 176
    711a:	fd 4f       	sbci	r31, 0xFD	; 253
    711c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    711e:	fc 01       	movw	r30, r24
    7120:	e0 59       	subi	r30, 0x90	; 144
    7122:	fd 4f       	sbci	r31, 0xFD	; 253
    7124:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    7126:	88 23       	and	r24, r24
    7128:	61 f1       	breq	.+88     	; 0x7182 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    712a:	90 e0       	ldi	r25, 0x00	; 0
    712c:	88 0f       	add	r24, r24
    712e:	99 1f       	adc	r25, r25
    7130:	fc 01       	movw	r30, r24
    7132:	ec 55       	subi	r30, 0x5C	; 92
    7134:	fd 4f       	sbci	r31, 0xFD	; 253
    7136:	c5 91       	lpm	r28, Z+
    7138:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    713a:	fc 01       	movw	r30, r24
    713c:	e6 56       	subi	r30, 0x66	; 102
    713e:	fd 4f       	sbci	r31, 0xFD	; 253
    7140:	a5 91       	lpm	r26, Z+
    7142:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    7144:	61 11       	cpse	r22, r1
    7146:	09 c0       	rjmp	.+18     	; 0x715a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    7148:	9f b7       	in	r25, 0x3f	; 63
                cli();
    714a:	f8 94       	cli
		*reg &= ~bit;
    714c:	88 81       	ld	r24, Y
    714e:	20 95       	com	r18
    7150:	82 23       	and	r24, r18
    7152:	88 83       	st	Y, r24
		*out &= ~bit;
    7154:	ec 91       	ld	r30, X
    7156:	2e 23       	and	r18, r30
    7158:	0b c0       	rjmp	.+22     	; 0x7170 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    715a:	62 30       	cpi	r22, 0x02	; 2
    715c:	61 f4       	brne	.+24     	; 0x7176 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    715e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    7160:	f8 94       	cli
		*reg &= ~bit;
    7162:	88 81       	ld	r24, Y
    7164:	32 2f       	mov	r19, r18
    7166:	30 95       	com	r19
    7168:	83 23       	and	r24, r19
    716a:	88 83       	st	Y, r24
		*out |= bit;
    716c:	ec 91       	ld	r30, X
    716e:	2e 2b       	or	r18, r30
    7170:	2c 93       	st	X, r18
		SREG = oldSREG;
    7172:	9f bf       	out	0x3f, r25	; 63
    7174:	06 c0       	rjmp	.+12     	; 0x7182 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    7176:	8f b7       	in	r24, 0x3f	; 63
                cli();
    7178:	f8 94       	cli
		*reg |= bit;
    717a:	e8 81       	ld	r30, Y
    717c:	2e 2b       	or	r18, r30
    717e:	28 83       	st	Y, r18
		SREG = oldSREG;
    7180:	8f bf       	out	0x3f, r24	; 63
	}
}
    7182:	df 91       	pop	r29
    7184:	cf 91       	pop	r28
    7186:	08 95       	ret

00007188 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    7188:	1f 93       	push	r17
    718a:	cf 93       	push	r28
    718c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    718e:	28 2f       	mov	r18, r24
    7190:	30 e0       	ldi	r19, 0x00	; 0
    7192:	f9 01       	movw	r30, r18
    7194:	e0 5d       	subi	r30, 0xD0	; 208
    7196:	fd 4f       	sbci	r31, 0xFD	; 253
    7198:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    719a:	f9 01       	movw	r30, r18
    719c:	e0 5b       	subi	r30, 0xB0	; 176
    719e:	fd 4f       	sbci	r31, 0xFD	; 253
    71a0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    71a2:	f9 01       	movw	r30, r18
    71a4:	e0 59       	subi	r30, 0x90	; 144
    71a6:	fd 4f       	sbci	r31, 0xFD	; 253
    71a8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    71aa:	cc 23       	and	r28, r28
    71ac:	b9 f0       	breq	.+46     	; 0x71dc <digitalWrite+0x54>
    71ae:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    71b0:	81 11       	cpse	r24, r1
    71b2:	85 df       	rcall	.-246    	; 0x70be <turnOffPWM>

	out = portOutputRegister(port);
    71b4:	ec 2f       	mov	r30, r28
    71b6:	f0 e0       	ldi	r31, 0x00	; 0
    71b8:	ee 0f       	add	r30, r30
    71ba:	ff 1f       	adc	r31, r31
    71bc:	e6 56       	subi	r30, 0x66	; 102
    71be:	fd 4f       	sbci	r31, 0xFD	; 253
    71c0:	a5 91       	lpm	r26, Z+
    71c2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    71c4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    71c6:	f8 94       	cli

	if (val == LOW) {
    71c8:	11 11       	cpse	r17, r1
    71ca:	04 c0       	rjmp	.+8      	; 0x71d4 <digitalWrite+0x4c>
		*out &= ~bit;
    71cc:	8c 91       	ld	r24, X
    71ce:	d0 95       	com	r29
    71d0:	d8 23       	and	r29, r24
    71d2:	02 c0       	rjmp	.+4      	; 0x71d8 <digitalWrite+0x50>
	} else {
		*out |= bit;
    71d4:	ec 91       	ld	r30, X
    71d6:	de 2b       	or	r29, r30
    71d8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    71da:	9f bf       	out	0x3f, r25	; 63
}
    71dc:	df 91       	pop	r29
    71de:	cf 91       	pop	r28
    71e0:	1f 91       	pop	r17
    71e2:	08 95       	ret

000071e4 <digitalRead>:

int digitalRead(uint8_t pin)
{
    71e4:	cf 93       	push	r28
    71e6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    71e8:	28 2f       	mov	r18, r24
    71ea:	30 e0       	ldi	r19, 0x00	; 0
    71ec:	f9 01       	movw	r30, r18
    71ee:	e0 5d       	subi	r30, 0xD0	; 208
    71f0:	fd 4f       	sbci	r31, 0xFD	; 253
    71f2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    71f4:	f9 01       	movw	r30, r18
    71f6:	e0 5b       	subi	r30, 0xB0	; 176
    71f8:	fd 4f       	sbci	r31, 0xFD	; 253
    71fa:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    71fc:	f9 01       	movw	r30, r18
    71fe:	e0 59       	subi	r30, 0x90	; 144
    7200:	fd 4f       	sbci	r31, 0xFD	; 253
    7202:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    7204:	cc 23       	and	r28, r28
    7206:	89 f0       	breq	.+34     	; 0x722a <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7208:	81 11       	cpse	r24, r1
    720a:	59 df       	rcall	.-334    	; 0x70be <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    720c:	ec 2f       	mov	r30, r28
    720e:	f0 e0       	ldi	r31, 0x00	; 0
    7210:	ee 0f       	add	r30, r30
    7212:	ff 1f       	adc	r31, r31
    7214:	e0 57       	subi	r30, 0x70	; 112
    7216:	fd 4f       	sbci	r31, 0xFD	; 253
    7218:	a5 91       	lpm	r26, Z+
    721a:	b4 91       	lpm	r27, Z
    721c:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    721e:	ed 23       	and	r30, r29
    7220:	81 e0       	ldi	r24, 0x01	; 1
    7222:	90 e0       	ldi	r25, 0x00	; 0
    7224:	21 f4       	brne	.+8      	; 0x722e <digitalRead+0x4a>
    7226:	80 e0       	ldi	r24, 0x00	; 0
    7228:	02 c0       	rjmp	.+4      	; 0x722e <digitalRead+0x4a>
    722a:	80 e0       	ldi	r24, 0x00	; 0
    722c:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    722e:	df 91       	pop	r29
    7230:	cf 91       	pop	r28
    7232:	08 95       	ret

00007234 <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    7234:	08 95       	ret

00007236 <_ZN6StringD1Ev>:
    7236:	fc 01       	movw	r30, r24
    7238:	80 81       	ld	r24, Z
    723a:	91 81       	ldd	r25, Z+1	; 0x01
    723c:	53 c5       	rjmp	.+2726   	; 0x7ce4 <free>

0000723e <_ZN6String10invalidateEv>:
    723e:	cf 93       	push	r28
    7240:	df 93       	push	r29
    7242:	ec 01       	movw	r28, r24
    7244:	88 81       	ld	r24, Y
    7246:	99 81       	ldd	r25, Y+1	; 0x01
    7248:	00 97       	sbiw	r24, 0x00	; 0
    724a:	09 f0       	breq	.+2      	; 0x724e <_ZN6String10invalidateEv+0x10>
    724c:	4b d5       	rcall	.+2710   	; 0x7ce4 <free>
    724e:	19 82       	std	Y+1, r1	; 0x01
    7250:	18 82       	st	Y, r1
    7252:	1d 82       	std	Y+5, r1	; 0x05
    7254:	1c 82       	std	Y+4, r1	; 0x04
    7256:	1b 82       	std	Y+3, r1	; 0x03
    7258:	1a 82       	std	Y+2, r1	; 0x02
    725a:	df 91       	pop	r29
    725c:	cf 91       	pop	r28
    725e:	08 95       	ret

00007260 <_ZN6String12changeBufferEj>:
    7260:	0f 93       	push	r16
    7262:	1f 93       	push	r17
    7264:	cf 93       	push	r28
    7266:	df 93       	push	r29
    7268:	ec 01       	movw	r28, r24
    726a:	8b 01       	movw	r16, r22
    726c:	6f 5f       	subi	r22, 0xFF	; 255
    726e:	7f 4f       	sbci	r23, 0xFF	; 255
    7270:	88 81       	ld	r24, Y
    7272:	99 81       	ldd	r25, Y+1	; 0x01
    7274:	c0 d5       	rcall	.+2944   	; 0x7df6 <realloc>
    7276:	00 97       	sbiw	r24, 0x00	; 0
    7278:	31 f0       	breq	.+12     	; 0x7286 <_ZN6String12changeBufferEj+0x26>
    727a:	99 83       	std	Y+1, r25	; 0x01
    727c:	88 83       	st	Y, r24
    727e:	1b 83       	std	Y+3, r17	; 0x03
    7280:	0a 83       	std	Y+2, r16	; 0x02
    7282:	81 e0       	ldi	r24, 0x01	; 1
    7284:	01 c0       	rjmp	.+2      	; 0x7288 <_ZN6String12changeBufferEj+0x28>
    7286:	80 e0       	ldi	r24, 0x00	; 0
    7288:	df 91       	pop	r29
    728a:	cf 91       	pop	r28
    728c:	1f 91       	pop	r17
    728e:	0f 91       	pop	r16
    7290:	08 95       	ret

00007292 <_ZN6String7reserveEj>:
    7292:	cf 93       	push	r28
    7294:	df 93       	push	r29
    7296:	ec 01       	movw	r28, r24
    7298:	88 81       	ld	r24, Y
    729a:	99 81       	ldd	r25, Y+1	; 0x01
    729c:	89 2b       	or	r24, r25
    729e:	29 f0       	breq	.+10     	; 0x72aa <_ZN6String7reserveEj+0x18>
    72a0:	8a 81       	ldd	r24, Y+2	; 0x02
    72a2:	9b 81       	ldd	r25, Y+3	; 0x03
    72a4:	86 17       	cp	r24, r22
    72a6:	97 07       	cpc	r25, r23
    72a8:	58 f4       	brcc	.+22     	; 0x72c0 <_ZN6String7reserveEj+0x2e>
    72aa:	ce 01       	movw	r24, r28
    72ac:	d9 df       	rcall	.-78     	; 0x7260 <_ZN6String12changeBufferEj>
    72ae:	88 23       	and	r24, r24
    72b0:	41 f0       	breq	.+16     	; 0x72c2 <_ZN6String7reserveEj+0x30>
    72b2:	8c 81       	ldd	r24, Y+4	; 0x04
    72b4:	9d 81       	ldd	r25, Y+5	; 0x05
    72b6:	89 2b       	or	r24, r25
    72b8:	19 f4       	brne	.+6      	; 0x72c0 <_ZN6String7reserveEj+0x2e>
    72ba:	e8 81       	ld	r30, Y
    72bc:	f9 81       	ldd	r31, Y+1	; 0x01
    72be:	10 82       	st	Z, r1
    72c0:	81 e0       	ldi	r24, 0x01	; 1
    72c2:	df 91       	pop	r29
    72c4:	cf 91       	pop	r28
    72c6:	08 95       	ret

000072c8 <_ZN6String4copyEPKcj>:
    72c8:	ef 92       	push	r14
    72ca:	ff 92       	push	r15
    72cc:	0f 93       	push	r16
    72ce:	1f 93       	push	r17
    72d0:	cf 93       	push	r28
    72d2:	df 93       	push	r29
    72d4:	ec 01       	movw	r28, r24
    72d6:	7b 01       	movw	r14, r22
    72d8:	8a 01       	movw	r16, r20
    72da:	ba 01       	movw	r22, r20
    72dc:	da df       	rcall	.-76     	; 0x7292 <_ZN6String7reserveEj>
    72de:	81 11       	cpse	r24, r1
    72e0:	03 c0       	rjmp	.+6      	; 0x72e8 <_ZN6String4copyEPKcj+0x20>
    72e2:	ce 01       	movw	r24, r28
    72e4:	ac df       	rcall	.-168    	; 0x723e <_ZN6String10invalidateEv>
    72e6:	06 c0       	rjmp	.+12     	; 0x72f4 <_ZN6String4copyEPKcj+0x2c>
    72e8:	1d 83       	std	Y+5, r17	; 0x05
    72ea:	0c 83       	std	Y+4, r16	; 0x04
    72ec:	b7 01       	movw	r22, r14
    72ee:	88 81       	ld	r24, Y
    72f0:	99 81       	ldd	r25, Y+1	; 0x01
    72f2:	ae d6       	rcall	.+3420   	; 0x8050 <strcpy>
    72f4:	ce 01       	movw	r24, r28
    72f6:	df 91       	pop	r29
    72f8:	cf 91       	pop	r28
    72fa:	1f 91       	pop	r17
    72fc:	0f 91       	pop	r16
    72fe:	ff 90       	pop	r15
    7300:	ef 90       	pop	r14
    7302:	08 95       	ret

00007304 <_ZN6StringC1EPKc>:
    7304:	fc 01       	movw	r30, r24
    7306:	11 82       	std	Z+1, r1	; 0x01
    7308:	10 82       	st	Z, r1
    730a:	13 82       	std	Z+3, r1	; 0x03
    730c:	12 82       	std	Z+2, r1	; 0x02
    730e:	15 82       	std	Z+5, r1	; 0x05
    7310:	14 82       	std	Z+4, r1	; 0x04
    7312:	61 15       	cp	r22, r1
    7314:	71 05       	cpc	r23, r1
    7316:	49 f0       	breq	.+18     	; 0x732a <_ZN6StringC1EPKc+0x26>
    7318:	fb 01       	movw	r30, r22
    731a:	01 90       	ld	r0, Z+
    731c:	00 20       	and	r0, r0
    731e:	e9 f7       	brne	.-6      	; 0x731a <_ZN6StringC1EPKc+0x16>
    7320:	31 97       	sbiw	r30, 0x01	; 1
    7322:	af 01       	movw	r20, r30
    7324:	46 1b       	sub	r20, r22
    7326:	57 0b       	sbc	r21, r23
    7328:	cf cf       	rjmp	.-98     	; 0x72c8 <_ZN6String4copyEPKcj>
    732a:	08 95       	ret

0000732c <_ZN6String4moveERS_>:
    732c:	0f 93       	push	r16
    732e:	1f 93       	push	r17
    7330:	cf 93       	push	r28
    7332:	df 93       	push	r29
    7334:	8c 01       	movw	r16, r24
    7336:	eb 01       	movw	r28, r22
    7338:	fc 01       	movw	r30, r24
    733a:	80 81       	ld	r24, Z
    733c:	91 81       	ldd	r25, Z+1	; 0x01
    733e:	00 97       	sbiw	r24, 0x00	; 0
    7340:	c1 f0       	breq	.+48     	; 0x7372 <_ZN6String4moveERS_+0x46>
    7342:	68 81       	ld	r22, Y
    7344:	79 81       	ldd	r23, Y+1	; 0x01
    7346:	61 15       	cp	r22, r1
    7348:	71 05       	cpc	r23, r1
    734a:	91 f0       	breq	.+36     	; 0x7370 <_ZN6String4moveERS_+0x44>
    734c:	2a e1       	ldi	r18, 0x1A	; 26
    734e:	39 e3       	ldi	r19, 0x39	; 57
    7350:	23 2b       	or	r18, r19
    7352:	71 f0       	breq	.+28     	; 0x7370 <_ZN6String4moveERS_+0x44>
    7354:	42 81       	ldd	r20, Z+2	; 0x02
    7356:	53 81       	ldd	r21, Z+3	; 0x03
    7358:	2c 81       	ldd	r18, Y+4	; 0x04
    735a:	3d 81       	ldd	r19, Y+5	; 0x05
    735c:	42 17       	cp	r20, r18
    735e:	53 07       	cpc	r21, r19
    7360:	38 f0       	brcs	.+14     	; 0x7370 <_ZN6String4moveERS_+0x44>
    7362:	76 d6       	rcall	.+3308   	; 0x8050 <strcpy>
    7364:	8c 81       	ldd	r24, Y+4	; 0x04
    7366:	9d 81       	ldd	r25, Y+5	; 0x05
    7368:	f8 01       	movw	r30, r16
    736a:	95 83       	std	Z+5, r25	; 0x05
    736c:	84 83       	std	Z+4, r24	; 0x04
    736e:	12 c0       	rjmp	.+36     	; 0x7394 <_ZN6String4moveERS_+0x68>
    7370:	b9 d4       	rcall	.+2418   	; 0x7ce4 <free>
    7372:	88 81       	ld	r24, Y
    7374:	99 81       	ldd	r25, Y+1	; 0x01
    7376:	f8 01       	movw	r30, r16
    7378:	91 83       	std	Z+1, r25	; 0x01
    737a:	80 83       	st	Z, r24
    737c:	8a 81       	ldd	r24, Y+2	; 0x02
    737e:	9b 81       	ldd	r25, Y+3	; 0x03
    7380:	93 83       	std	Z+3, r25	; 0x03
    7382:	82 83       	std	Z+2, r24	; 0x02
    7384:	8c 81       	ldd	r24, Y+4	; 0x04
    7386:	9d 81       	ldd	r25, Y+5	; 0x05
    7388:	95 83       	std	Z+5, r25	; 0x05
    738a:	84 83       	std	Z+4, r24	; 0x04
    738c:	19 82       	std	Y+1, r1	; 0x01
    738e:	18 82       	st	Y, r1
    7390:	1b 82       	std	Y+3, r1	; 0x03
    7392:	1a 82       	std	Y+2, r1	; 0x02
    7394:	1d 82       	std	Y+5, r1	; 0x05
    7396:	1c 82       	std	Y+4, r1	; 0x04
    7398:	df 91       	pop	r29
    739a:	cf 91       	pop	r28
    739c:	1f 91       	pop	r17
    739e:	0f 91       	pop	r16
    73a0:	08 95       	ret

000073a2 <_ZN6StringC1EOS_>:
    73a2:	fc 01       	movw	r30, r24
    73a4:	11 82       	std	Z+1, r1	; 0x01
    73a6:	10 82       	st	Z, r1
    73a8:	13 82       	std	Z+3, r1	; 0x03
    73aa:	12 82       	std	Z+2, r1	; 0x02
    73ac:	15 82       	std	Z+5, r1	; 0x05
    73ae:	14 82       	std	Z+4, r1	; 0x04
    73b0:	bd cf       	rjmp	.-134    	; 0x732c <_ZN6String4moveERS_>

000073b2 <_ZN6StringaSERKS_>:
    73b2:	cf 93       	push	r28
    73b4:	df 93       	push	r29
    73b6:	ec 01       	movw	r28, r24
    73b8:	fb 01       	movw	r30, r22
    73ba:	86 17       	cp	r24, r22
    73bc:	97 07       	cpc	r25, r23
    73be:	51 f0       	breq	.+20     	; 0x73d4 <_ZN6StringaSERKS_+0x22>
    73c0:	60 81       	ld	r22, Z
    73c2:	71 81       	ldd	r23, Z+1	; 0x01
    73c4:	61 15       	cp	r22, r1
    73c6:	71 05       	cpc	r23, r1
    73c8:	21 f0       	breq	.+8      	; 0x73d2 <_ZN6StringaSERKS_+0x20>
    73ca:	44 81       	ldd	r20, Z+4	; 0x04
    73cc:	55 81       	ldd	r21, Z+5	; 0x05
    73ce:	7c df       	rcall	.-264    	; 0x72c8 <_ZN6String4copyEPKcj>
    73d0:	01 c0       	rjmp	.+2      	; 0x73d4 <_ZN6StringaSERKS_+0x22>
    73d2:	35 df       	rcall	.-406    	; 0x723e <_ZN6String10invalidateEv>
    73d4:	ce 01       	movw	r24, r28
    73d6:	df 91       	pop	r29
    73d8:	cf 91       	pop	r28
    73da:	08 95       	ret

000073dc <_ZN6StringC1ERKS_>:
    73dc:	fc 01       	movw	r30, r24
    73de:	11 82       	std	Z+1, r1	; 0x01
    73e0:	10 82       	st	Z, r1
    73e2:	13 82       	std	Z+3, r1	; 0x03
    73e4:	12 82       	std	Z+2, r1	; 0x02
    73e6:	15 82       	std	Z+5, r1	; 0x05
    73e8:	14 82       	std	Z+4, r1	; 0x04
    73ea:	e3 cf       	rjmp	.-58     	; 0x73b2 <_ZN6StringaSERKS_>

000073ec <_ZN6StringaSEOS_>:
    73ec:	cf 93       	push	r28
    73ee:	df 93       	push	r29
    73f0:	ec 01       	movw	r28, r24
    73f2:	86 17       	cp	r24, r22
    73f4:	97 07       	cpc	r25, r23
    73f6:	09 f0       	breq	.+2      	; 0x73fa <_ZN6StringaSEOS_+0xe>
    73f8:	99 df       	rcall	.-206    	; 0x732c <_ZN6String4moveERS_>
    73fa:	ce 01       	movw	r24, r28
    73fc:	df 91       	pop	r29
    73fe:	cf 91       	pop	r28
    7400:	08 95       	ret

00007402 <_ZN6StringaSEPKc>:
    7402:	cf 93       	push	r28
    7404:	df 93       	push	r29
    7406:	ec 01       	movw	r28, r24
    7408:	61 15       	cp	r22, r1
    740a:	71 05       	cpc	r23, r1
    740c:	51 f0       	breq	.+20     	; 0x7422 <_ZN6StringaSEPKc+0x20>
    740e:	fb 01       	movw	r30, r22
    7410:	01 90       	ld	r0, Z+
    7412:	00 20       	and	r0, r0
    7414:	e9 f7       	brne	.-6      	; 0x7410 <_ZN6StringaSEPKc+0xe>
    7416:	31 97       	sbiw	r30, 0x01	; 1
    7418:	af 01       	movw	r20, r30
    741a:	46 1b       	sub	r20, r22
    741c:	57 0b       	sbc	r21, r23
    741e:	54 df       	rcall	.-344    	; 0x72c8 <_ZN6String4copyEPKcj>
    7420:	01 c0       	rjmp	.+2      	; 0x7424 <_ZN6StringaSEPKc+0x22>
    7422:	0d df       	rcall	.-486    	; 0x723e <_ZN6String10invalidateEv>
    7424:	ce 01       	movw	r24, r28
    7426:	df 91       	pop	r29
    7428:	cf 91       	pop	r28
    742a:	08 95       	ret

0000742c <_ZN6StringC1Ec>:
    742c:	cf 93       	push	r28
    742e:	df 93       	push	r29
    7430:	00 d0       	rcall	.+0      	; 0x7432 <_ZN6StringC1Ec+0x6>
    7432:	cd b7       	in	r28, 0x3d	; 61
    7434:	de b7       	in	r29, 0x3e	; 62
    7436:	fc 01       	movw	r30, r24
    7438:	11 82       	std	Z+1, r1	; 0x01
    743a:	10 82       	st	Z, r1
    743c:	13 82       	std	Z+3, r1	; 0x03
    743e:	12 82       	std	Z+2, r1	; 0x02
    7440:	15 82       	std	Z+5, r1	; 0x05
    7442:	14 82       	std	Z+4, r1	; 0x04
    7444:	69 83       	std	Y+1, r22	; 0x01
    7446:	1a 82       	std	Y+2, r1	; 0x02
    7448:	be 01       	movw	r22, r28
    744a:	6f 5f       	subi	r22, 0xFF	; 255
    744c:	7f 4f       	sbci	r23, 0xFF	; 255
    744e:	d9 df       	rcall	.-78     	; 0x7402 <_ZN6StringaSEPKc>
    7450:	0f 90       	pop	r0
    7452:	0f 90       	pop	r0
    7454:	df 91       	pop	r29
    7456:	cf 91       	pop	r28
    7458:	08 95       	ret

0000745a <_ZN6StringC1Ehh>:
    745a:	0f 93       	push	r16
    745c:	1f 93       	push	r17
    745e:	cf 93       	push	r28
    7460:	df 93       	push	r29
    7462:	cd b7       	in	r28, 0x3d	; 61
    7464:	de b7       	in	r29, 0x3e	; 62
    7466:	29 97       	sbiw	r28, 0x09	; 9
    7468:	0f b6       	in	r0, 0x3f	; 63
    746a:	f8 94       	cli
    746c:	de bf       	out	0x3e, r29	; 62
    746e:	0f be       	out	0x3f, r0	; 63
    7470:	cd bf       	out	0x3d, r28	; 61
    7472:	8c 01       	movw	r16, r24
    7474:	86 2f       	mov	r24, r22
    7476:	f8 01       	movw	r30, r16
    7478:	11 82       	std	Z+1, r1	; 0x01
    747a:	10 82       	st	Z, r1
    747c:	13 82       	std	Z+3, r1	; 0x03
    747e:	12 82       	std	Z+2, r1	; 0x02
    7480:	15 82       	std	Z+5, r1	; 0x05
    7482:	14 82       	std	Z+4, r1	; 0x04
    7484:	50 e0       	ldi	r21, 0x00	; 0
    7486:	be 01       	movw	r22, r28
    7488:	6f 5f       	subi	r22, 0xFF	; 255
    748a:	7f 4f       	sbci	r23, 0xFF	; 255
    748c:	90 e0       	ldi	r25, 0x00	; 0
    748e:	58 d6       	rcall	.+3248   	; 0x8140 <utoa>
    7490:	be 01       	movw	r22, r28
    7492:	6f 5f       	subi	r22, 0xFF	; 255
    7494:	7f 4f       	sbci	r23, 0xFF	; 255
    7496:	c8 01       	movw	r24, r16
    7498:	b4 df       	rcall	.-152    	; 0x7402 <_ZN6StringaSEPKc>
    749a:	29 96       	adiw	r28, 0x09	; 9
    749c:	0f b6       	in	r0, 0x3f	; 63
    749e:	f8 94       	cli
    74a0:	de bf       	out	0x3e, r29	; 62
    74a2:	0f be       	out	0x3f, r0	; 63
    74a4:	cd bf       	out	0x3d, r28	; 61
    74a6:	df 91       	pop	r29
    74a8:	cf 91       	pop	r28
    74aa:	1f 91       	pop	r17
    74ac:	0f 91       	pop	r16
    74ae:	08 95       	ret

000074b0 <_ZN6StringC1Eih>:
    74b0:	0f 93       	push	r16
    74b2:	1f 93       	push	r17
    74b4:	cf 93       	push	r28
    74b6:	df 93       	push	r29
    74b8:	cd b7       	in	r28, 0x3d	; 61
    74ba:	de b7       	in	r29, 0x3e	; 62
    74bc:	62 97       	sbiw	r28, 0x12	; 18
    74be:	0f b6       	in	r0, 0x3f	; 63
    74c0:	f8 94       	cli
    74c2:	de bf       	out	0x3e, r29	; 62
    74c4:	0f be       	out	0x3f, r0	; 63
    74c6:	cd bf       	out	0x3d, r28	; 61
    74c8:	8c 01       	movw	r16, r24
    74ca:	cb 01       	movw	r24, r22
    74cc:	f8 01       	movw	r30, r16
    74ce:	11 82       	std	Z+1, r1	; 0x01
    74d0:	10 82       	st	Z, r1
    74d2:	13 82       	std	Z+3, r1	; 0x03
    74d4:	12 82       	std	Z+2, r1	; 0x02
    74d6:	15 82       	std	Z+5, r1	; 0x05
    74d8:	14 82       	std	Z+4, r1	; 0x04
    74da:	50 e0       	ldi	r21, 0x00	; 0
    74dc:	be 01       	movw	r22, r28
    74de:	6f 5f       	subi	r22, 0xFF	; 255
    74e0:	7f 4f       	sbci	r23, 0xFF	; 255
    74e2:	da d5       	rcall	.+2996   	; 0x8098 <itoa>
    74e4:	be 01       	movw	r22, r28
    74e6:	6f 5f       	subi	r22, 0xFF	; 255
    74e8:	7f 4f       	sbci	r23, 0xFF	; 255
    74ea:	c8 01       	movw	r24, r16
    74ec:	8a df       	rcall	.-236    	; 0x7402 <_ZN6StringaSEPKc>
    74ee:	62 96       	adiw	r28, 0x12	; 18
    74f0:	0f b6       	in	r0, 0x3f	; 63
    74f2:	f8 94       	cli
    74f4:	de bf       	out	0x3e, r29	; 62
    74f6:	0f be       	out	0x3f, r0	; 63
    74f8:	cd bf       	out	0x3d, r28	; 61
    74fa:	df 91       	pop	r29
    74fc:	cf 91       	pop	r28
    74fe:	1f 91       	pop	r17
    7500:	0f 91       	pop	r16
    7502:	08 95       	ret

00007504 <_ZN6StringC1Ejh>:
    7504:	0f 93       	push	r16
    7506:	1f 93       	push	r17
    7508:	cf 93       	push	r28
    750a:	df 93       	push	r29
    750c:	cd b7       	in	r28, 0x3d	; 61
    750e:	de b7       	in	r29, 0x3e	; 62
    7510:	61 97       	sbiw	r28, 0x11	; 17
    7512:	0f b6       	in	r0, 0x3f	; 63
    7514:	f8 94       	cli
    7516:	de bf       	out	0x3e, r29	; 62
    7518:	0f be       	out	0x3f, r0	; 63
    751a:	cd bf       	out	0x3d, r28	; 61
    751c:	8c 01       	movw	r16, r24
    751e:	cb 01       	movw	r24, r22
    7520:	f8 01       	movw	r30, r16
    7522:	11 82       	std	Z+1, r1	; 0x01
    7524:	10 82       	st	Z, r1
    7526:	13 82       	std	Z+3, r1	; 0x03
    7528:	12 82       	std	Z+2, r1	; 0x02
    752a:	15 82       	std	Z+5, r1	; 0x05
    752c:	14 82       	std	Z+4, r1	; 0x04
    752e:	50 e0       	ldi	r21, 0x00	; 0
    7530:	be 01       	movw	r22, r28
    7532:	6f 5f       	subi	r22, 0xFF	; 255
    7534:	7f 4f       	sbci	r23, 0xFF	; 255
    7536:	04 d6       	rcall	.+3080   	; 0x8140 <utoa>
    7538:	be 01       	movw	r22, r28
    753a:	6f 5f       	subi	r22, 0xFF	; 255
    753c:	7f 4f       	sbci	r23, 0xFF	; 255
    753e:	c8 01       	movw	r24, r16
    7540:	60 df       	rcall	.-320    	; 0x7402 <_ZN6StringaSEPKc>
    7542:	61 96       	adiw	r28, 0x11	; 17
    7544:	0f b6       	in	r0, 0x3f	; 63
    7546:	f8 94       	cli
    7548:	de bf       	out	0x3e, r29	; 62
    754a:	0f be       	out	0x3f, r0	; 63
    754c:	cd bf       	out	0x3d, r28	; 61
    754e:	df 91       	pop	r29
    7550:	cf 91       	pop	r28
    7552:	1f 91       	pop	r17
    7554:	0f 91       	pop	r16
    7556:	08 95       	ret

00007558 <_ZN6StringC1Emh>:
    7558:	0f 93       	push	r16
    755a:	1f 93       	push	r17
    755c:	cf 93       	push	r28
    755e:	df 93       	push	r29
    7560:	cd b7       	in	r28, 0x3d	; 61
    7562:	de b7       	in	r29, 0x3e	; 62
    7564:	a1 97       	sbiw	r28, 0x21	; 33
    7566:	0f b6       	in	r0, 0x3f	; 63
    7568:	f8 94       	cli
    756a:	de bf       	out	0x3e, r29	; 62
    756c:	0f be       	out	0x3f, r0	; 63
    756e:	cd bf       	out	0x3d, r28	; 61
    7570:	8c 01       	movw	r16, r24
    7572:	cb 01       	movw	r24, r22
    7574:	ba 01       	movw	r22, r20
    7576:	f8 01       	movw	r30, r16
    7578:	11 82       	std	Z+1, r1	; 0x01
    757a:	10 82       	st	Z, r1
    757c:	13 82       	std	Z+3, r1	; 0x03
    757e:	12 82       	std	Z+2, r1	; 0x02
    7580:	15 82       	std	Z+5, r1	; 0x05
    7582:	14 82       	std	Z+4, r1	; 0x04
    7584:	30 e0       	ldi	r19, 0x00	; 0
    7586:	ae 01       	movw	r20, r28
    7588:	4f 5f       	subi	r20, 0xFF	; 255
    758a:	5f 4f       	sbci	r21, 0xFF	; 255
    758c:	ae d5       	rcall	.+2908   	; 0x80ea <ultoa>
    758e:	be 01       	movw	r22, r28
    7590:	6f 5f       	subi	r22, 0xFF	; 255
    7592:	7f 4f       	sbci	r23, 0xFF	; 255
    7594:	c8 01       	movw	r24, r16
    7596:	35 df       	rcall	.-406    	; 0x7402 <_ZN6StringaSEPKc>
    7598:	a1 96       	adiw	r28, 0x21	; 33
    759a:	0f b6       	in	r0, 0x3f	; 63
    759c:	f8 94       	cli
    759e:	de bf       	out	0x3e, r29	; 62
    75a0:	0f be       	out	0x3f, r0	; 63
    75a2:	cd bf       	out	0x3d, r28	; 61
    75a4:	df 91       	pop	r29
    75a6:	cf 91       	pop	r28
    75a8:	1f 91       	pop	r17
    75aa:	0f 91       	pop	r16
    75ac:	08 95       	ret

000075ae <_ZN6StringC1Edh>:
    75ae:	ef 92       	push	r14
    75b0:	ff 92       	push	r15
    75b2:	0f 93       	push	r16
    75b4:	1f 93       	push	r17
    75b6:	cf 93       	push	r28
    75b8:	df 93       	push	r29
    75ba:	cd b7       	in	r28, 0x3d	; 61
    75bc:	de b7       	in	r29, 0x3e	; 62
    75be:	a1 97       	sbiw	r28, 0x21	; 33
    75c0:	0f b6       	in	r0, 0x3f	; 63
    75c2:	f8 94       	cli
    75c4:	de bf       	out	0x3e, r29	; 62
    75c6:	0f be       	out	0x3f, r0	; 63
    75c8:	cd bf       	out	0x3d, r28	; 61
    75ca:	7c 01       	movw	r14, r24
    75cc:	cb 01       	movw	r24, r22
    75ce:	ba 01       	movw	r22, r20
    75d0:	f7 01       	movw	r30, r14
    75d2:	11 82       	std	Z+1, r1	; 0x01
    75d4:	10 82       	st	Z, r1
    75d6:	13 82       	std	Z+3, r1	; 0x03
    75d8:	12 82       	std	Z+2, r1	; 0x02
    75da:	15 82       	std	Z+5, r1	; 0x05
    75dc:	14 82       	std	Z+4, r1	; 0x04
    75de:	42 e0       	ldi	r20, 0x02	; 2
    75e0:	42 0f       	add	r20, r18
    75e2:	8e 01       	movw	r16, r28
    75e4:	0f 5f       	subi	r16, 0xFF	; 255
    75e6:	1f 4f       	sbci	r17, 0xFF	; 255
    75e8:	c6 d2       	rcall	.+1420   	; 0x7b76 <dtostrf>
    75ea:	bc 01       	movw	r22, r24
    75ec:	c7 01       	movw	r24, r14
    75ee:	09 df       	rcall	.-494    	; 0x7402 <_ZN6StringaSEPKc>
    75f0:	a1 96       	adiw	r28, 0x21	; 33
    75f2:	0f b6       	in	r0, 0x3f	; 63
    75f4:	f8 94       	cli
    75f6:	de bf       	out	0x3e, r29	; 62
    75f8:	0f be       	out	0x3f, r0	; 63
    75fa:	cd bf       	out	0x3d, r28	; 61
    75fc:	df 91       	pop	r29
    75fe:	cf 91       	pop	r28
    7600:	1f 91       	pop	r17
    7602:	0f 91       	pop	r16
    7604:	ff 90       	pop	r15
    7606:	ef 90       	pop	r14
    7608:	08 95       	ret

0000760a <_ZN6String6concatEPKcj>:
    760a:	ef 92       	push	r14
    760c:	ff 92       	push	r15
    760e:	0f 93       	push	r16
    7610:	1f 93       	push	r17
    7612:	cf 93       	push	r28
    7614:	df 93       	push	r29
    7616:	61 15       	cp	r22, r1
    7618:	71 05       	cpc	r23, r1
    761a:	11 f4       	brne	.+4      	; 0x7620 <_ZN6String6concatEPKcj+0x16>
    761c:	80 e0       	ldi	r24, 0x00	; 0
    761e:	1a c0       	rjmp	.+52     	; 0x7654 <_ZN6String6concatEPKcj+0x4a>
    7620:	41 15       	cp	r20, r1
    7622:	51 05       	cpc	r21, r1
    7624:	b1 f0       	breq	.+44     	; 0x7652 <_ZN6String6concatEPKcj+0x48>
    7626:	7b 01       	movw	r14, r22
    7628:	ec 01       	movw	r28, r24
    762a:	8c 81       	ldd	r24, Y+4	; 0x04
    762c:	9d 81       	ldd	r25, Y+5	; 0x05
    762e:	8a 01       	movw	r16, r20
    7630:	08 0f       	add	r16, r24
    7632:	19 1f       	adc	r17, r25
    7634:	b8 01       	movw	r22, r16
    7636:	ce 01       	movw	r24, r28
    7638:	2c de       	rcall	.-936    	; 0x7292 <_ZN6String7reserveEj>
    763a:	88 23       	and	r24, r24
    763c:	79 f3       	breq	.-34     	; 0x761c <_ZN6String6concatEPKcj+0x12>
    763e:	28 81       	ld	r18, Y
    7640:	39 81       	ldd	r19, Y+1	; 0x01
    7642:	8c 81       	ldd	r24, Y+4	; 0x04
    7644:	9d 81       	ldd	r25, Y+5	; 0x05
    7646:	b7 01       	movw	r22, r14
    7648:	82 0f       	add	r24, r18
    764a:	93 1f       	adc	r25, r19
    764c:	01 d5       	rcall	.+2562   	; 0x8050 <strcpy>
    764e:	1d 83       	std	Y+5, r17	; 0x05
    7650:	0c 83       	std	Y+4, r16	; 0x04
    7652:	81 e0       	ldi	r24, 0x01	; 1
    7654:	df 91       	pop	r29
    7656:	cf 91       	pop	r28
    7658:	1f 91       	pop	r17
    765a:	0f 91       	pop	r16
    765c:	ff 90       	pop	r15
    765e:	ef 90       	pop	r14
    7660:	08 95       	ret

00007662 <_ZN6String6concatERKS_>:
    7662:	fb 01       	movw	r30, r22
    7664:	44 81       	ldd	r20, Z+4	; 0x04
    7666:	55 81       	ldd	r21, Z+5	; 0x05
    7668:	60 81       	ld	r22, Z
    766a:	71 81       	ldd	r23, Z+1	; 0x01
    766c:	ce cf       	rjmp	.-100    	; 0x760a <_ZN6String6concatEPKcj>

0000766e <_ZN6String6concatEPKc>:
    766e:	61 15       	cp	r22, r1
    7670:	71 05       	cpc	r23, r1
    7672:	49 f0       	breq	.+18     	; 0x7686 <_ZN6String6concatEPKc+0x18>
    7674:	fb 01       	movw	r30, r22
    7676:	01 90       	ld	r0, Z+
    7678:	00 20       	and	r0, r0
    767a:	e9 f7       	brne	.-6      	; 0x7676 <_ZN6String6concatEPKc+0x8>
    767c:	31 97       	sbiw	r30, 0x01	; 1
    767e:	af 01       	movw	r20, r30
    7680:	46 1b       	sub	r20, r22
    7682:	57 0b       	sbc	r21, r23
    7684:	c2 cf       	rjmp	.-124    	; 0x760a <_ZN6String6concatEPKcj>
    7686:	80 e0       	ldi	r24, 0x00	; 0
    7688:	08 95       	ret

0000768a <_ZN6String6concatEc>:
    768a:	cf 93       	push	r28
    768c:	df 93       	push	r29
    768e:	00 d0       	rcall	.+0      	; 0x7690 <_ZN6String6concatEc+0x6>
    7690:	cd b7       	in	r28, 0x3d	; 61
    7692:	de b7       	in	r29, 0x3e	; 62
    7694:	69 83       	std	Y+1, r22	; 0x01
    7696:	1a 82       	std	Y+2, r1	; 0x02
    7698:	41 e0       	ldi	r20, 0x01	; 1
    769a:	50 e0       	ldi	r21, 0x00	; 0
    769c:	be 01       	movw	r22, r28
    769e:	6f 5f       	subi	r22, 0xFF	; 255
    76a0:	7f 4f       	sbci	r23, 0xFF	; 255
    76a2:	b3 df       	rcall	.-154    	; 0x760a <_ZN6String6concatEPKcj>
    76a4:	0f 90       	pop	r0
    76a6:	0f 90       	pop	r0
    76a8:	df 91       	pop	r29
    76aa:	cf 91       	pop	r28
    76ac:	08 95       	ret

000076ae <_ZplRK15StringSumHelperRK6String>:
    76ae:	cf 93       	push	r28
    76b0:	df 93       	push	r29
    76b2:	ec 01       	movw	r28, r24
    76b4:	fb 01       	movw	r30, r22
    76b6:	44 81       	ldd	r20, Z+4	; 0x04
    76b8:	55 81       	ldd	r21, Z+5	; 0x05
    76ba:	60 81       	ld	r22, Z
    76bc:	71 81       	ldd	r23, Z+1	; 0x01
    76be:	a5 df       	rcall	.-182    	; 0x760a <_ZN6String6concatEPKcj>
    76c0:	81 11       	cpse	r24, r1
    76c2:	02 c0       	rjmp	.+4      	; 0x76c8 <_ZplRK15StringSumHelperRK6String+0x1a>
    76c4:	ce 01       	movw	r24, r28
    76c6:	bb dd       	rcall	.-1162   	; 0x723e <_ZN6String10invalidateEv>
    76c8:	ce 01       	movw	r24, r28
    76ca:	df 91       	pop	r29
    76cc:	cf 91       	pop	r28
    76ce:	08 95       	ret

000076d0 <_ZplRK15StringSumHelperPKc>:
    76d0:	cf 93       	push	r28
    76d2:	df 93       	push	r29
    76d4:	ec 01       	movw	r28, r24
    76d6:	61 15       	cp	r22, r1
    76d8:	71 05       	cpc	r23, r1
    76da:	59 f0       	breq	.+22     	; 0x76f2 <_ZplRK15StringSumHelperPKc+0x22>
    76dc:	fb 01       	movw	r30, r22
    76de:	01 90       	ld	r0, Z+
    76e0:	00 20       	and	r0, r0
    76e2:	e9 f7       	brne	.-6      	; 0x76de <_ZplRK15StringSumHelperPKc+0xe>
    76e4:	31 97       	sbiw	r30, 0x01	; 1
    76e6:	af 01       	movw	r20, r30
    76e8:	46 1b       	sub	r20, r22
    76ea:	57 0b       	sbc	r21, r23
    76ec:	8e df       	rcall	.-228    	; 0x760a <_ZN6String6concatEPKcj>
    76ee:	81 11       	cpse	r24, r1
    76f0:	02 c0       	rjmp	.+4      	; 0x76f6 <_ZplRK15StringSumHelperPKc+0x26>
    76f2:	ce 01       	movw	r24, r28
    76f4:	a4 dd       	rcall	.-1208   	; 0x723e <_ZN6String10invalidateEv>
    76f6:	ce 01       	movw	r24, r28
    76f8:	df 91       	pop	r29
    76fa:	cf 91       	pop	r28
    76fc:	08 95       	ret

000076fe <_ZplRK15StringSumHelperc>:
    76fe:	cf 93       	push	r28
    7700:	df 93       	push	r29
    7702:	ec 01       	movw	r28, r24
    7704:	c2 df       	rcall	.-124    	; 0x768a <_ZN6String6concatEc>
    7706:	81 11       	cpse	r24, r1
    7708:	02 c0       	rjmp	.+4      	; 0x770e <_ZplRK15StringSumHelperc+0x10>
    770a:	ce 01       	movw	r24, r28
    770c:	98 dd       	rcall	.-1232   	; 0x723e <_ZN6String10invalidateEv>
    770e:	ce 01       	movw	r24, r28
    7710:	df 91       	pop	r29
    7712:	cf 91       	pop	r28
    7714:	08 95       	ret

00007716 <_ZNK6String6equalsEPKc>:
    7716:	fc 01       	movw	r30, r24
    7718:	24 81       	ldd	r18, Z+4	; 0x04
    771a:	35 81       	ldd	r19, Z+5	; 0x05
    771c:	23 2b       	or	r18, r19
    771e:	31 f4       	brne	.+12     	; 0x772c <_ZNK6String6equalsEPKc+0x16>
    7720:	21 e0       	ldi	r18, 0x01	; 1
    7722:	61 15       	cp	r22, r1
    7724:	71 05       	cpc	r23, r1
    7726:	99 f0       	breq	.+38     	; 0x774e <_ZNK6String6equalsEPKc+0x38>
    7728:	fb 01       	movw	r30, r22
    772a:	08 c0       	rjmp	.+16     	; 0x773c <_ZNK6String6equalsEPKc+0x26>
    772c:	fc 01       	movw	r30, r24
    772e:	80 81       	ld	r24, Z
    7730:	91 81       	ldd	r25, Z+1	; 0x01
    7732:	61 15       	cp	r22, r1
    7734:	71 05       	cpc	r23, r1
    7736:	31 f4       	brne	.+12     	; 0x7744 <_ZNK6String6equalsEPKc+0x2e>
    7738:	21 e0       	ldi	r18, 0x01	; 1
    773a:	fc 01       	movw	r30, r24
    773c:	80 81       	ld	r24, Z
    773e:	88 23       	and	r24, r24
    7740:	31 f0       	breq	.+12     	; 0x774e <_ZNK6String6equalsEPKc+0x38>
    7742:	04 c0       	rjmp	.+8      	; 0x774c <_ZNK6String6equalsEPKc+0x36>
    7744:	7c d4       	rcall	.+2296   	; 0x803e <strcmp>
    7746:	21 e0       	ldi	r18, 0x01	; 1
    7748:	89 2b       	or	r24, r25
    774a:	09 f0       	breq	.+2      	; 0x774e <_ZNK6String6equalsEPKc+0x38>
    774c:	20 e0       	ldi	r18, 0x00	; 0
    774e:	82 2f       	mov	r24, r18
    7750:	08 95       	ret

00007752 <_ZNK6String8getBytesEPhjj>:
    7752:	0f 93       	push	r16
    7754:	1f 93       	push	r17
    7756:	cf 93       	push	r28
    7758:	df 93       	push	r29
    775a:	41 15       	cp	r20, r1
    775c:	51 05       	cpc	r21, r1
    775e:	11 f1       	breq	.+68     	; 0x77a4 <_ZNK6String8getBytesEPhjj+0x52>
    7760:	61 15       	cp	r22, r1
    7762:	71 05       	cpc	r23, r1
    7764:	f9 f0       	breq	.+62     	; 0x77a4 <_ZNK6String8getBytesEPhjj+0x52>
    7766:	dc 01       	movw	r26, r24
    7768:	14 96       	adiw	r26, 0x04	; 4
    776a:	ed 91       	ld	r30, X+
    776c:	fc 91       	ld	r31, X
    776e:	15 97       	sbiw	r26, 0x05	; 5
    7770:	2e 17       	cp	r18, r30
    7772:	3f 07       	cpc	r19, r31
    7774:	18 f0       	brcs	.+6      	; 0x777c <_ZNK6String8getBytesEPhjj+0x2a>
    7776:	fb 01       	movw	r30, r22
    7778:	10 82       	st	Z, r1
    777a:	14 c0       	rjmp	.+40     	; 0x77a4 <_ZNK6String8getBytesEPhjj+0x52>
    777c:	e2 1b       	sub	r30, r18
    777e:	f3 0b       	sbc	r31, r19
    7780:	ea 01       	movw	r28, r20
    7782:	21 97       	sbiw	r28, 0x01	; 1
    7784:	ec 17       	cp	r30, r28
    7786:	fd 07       	cpc	r31, r29
    7788:	08 f4       	brcc	.+2      	; 0x778c <_ZNK6String8getBytesEPhjj+0x3a>
    778a:	ef 01       	movw	r28, r30
    778c:	8b 01       	movw	r16, r22
    778e:	fc 01       	movw	r30, r24
    7790:	60 81       	ld	r22, Z
    7792:	71 81       	ldd	r23, Z+1	; 0x01
    7794:	62 0f       	add	r22, r18
    7796:	73 1f       	adc	r23, r19
    7798:	ae 01       	movw	r20, r28
    779a:	c8 01       	movw	r24, r16
    779c:	6e d4       	rcall	.+2268   	; 0x807a <strncpy>
    779e:	c0 0f       	add	r28, r16
    77a0:	d1 1f       	adc	r29, r17
    77a2:	18 82       	st	Y, r1
    77a4:	df 91       	pop	r29
    77a6:	cf 91       	pop	r28
    77a8:	1f 91       	pop	r17
    77aa:	0f 91       	pop	r16
    77ac:	08 95       	ret

000077ae <_ZNK6String9substringEjj>:
    77ae:	bf 92       	push	r11
    77b0:	cf 92       	push	r12
    77b2:	df 92       	push	r13
    77b4:	ef 92       	push	r14
    77b6:	ff 92       	push	r15
    77b8:	0f 93       	push	r16
    77ba:	1f 93       	push	r17
    77bc:	cf 93       	push	r28
    77be:	df 93       	push	r29
    77c0:	7c 01       	movw	r14, r24
    77c2:	6b 01       	movw	r12, r22
    77c4:	8a 01       	movw	r16, r20
    77c6:	e9 01       	movw	r28, r18
    77c8:	24 17       	cp	r18, r20
    77ca:	35 07       	cpc	r19, r21
    77cc:	20 f4       	brcc	.+8      	; 0x77d6 <_ZNK6String9substringEjj+0x28>
    77ce:	81 2f       	mov	r24, r17
    77d0:	89 01       	movw	r16, r18
    77d2:	c4 2f       	mov	r28, r20
    77d4:	d8 2f       	mov	r29, r24
    77d6:	68 ed       	ldi	r22, 0xD8	; 216
    77d8:	71 e0       	ldi	r23, 0x01	; 1
    77da:	c7 01       	movw	r24, r14
    77dc:	93 dd       	rcall	.-1242   	; 0x7304 <_ZN6StringC1EPKc>
    77de:	d6 01       	movw	r26, r12
    77e0:	14 96       	adiw	r26, 0x04	; 4
    77e2:	8d 91       	ld	r24, X+
    77e4:	9c 91       	ld	r25, X
    77e6:	15 97       	sbiw	r26, 0x05	; 5
    77e8:	08 17       	cp	r16, r24
    77ea:	19 07       	cpc	r17, r25
    77ec:	c0 f4       	brcc	.+48     	; 0x781e <_ZNK6String9substringEjj+0x70>
    77ee:	8c 17       	cp	r24, r28
    77f0:	9d 07       	cpc	r25, r29
    77f2:	08 f4       	brcc	.+2      	; 0x77f6 <_ZNK6String9substringEjj+0x48>
    77f4:	ec 01       	movw	r28, r24
    77f6:	d6 01       	movw	r26, r12
    77f8:	ed 91       	ld	r30, X+
    77fa:	fc 91       	ld	r31, X
    77fc:	11 97       	sbiw	r26, 0x01	; 1
    77fe:	ec 0f       	add	r30, r28
    7800:	fd 1f       	adc	r31, r29
    7802:	b0 80       	ld	r11, Z
    7804:	10 82       	st	Z, r1
    7806:	6d 91       	ld	r22, X+
    7808:	7c 91       	ld	r23, X
    780a:	60 0f       	add	r22, r16
    780c:	71 1f       	adc	r23, r17
    780e:	c7 01       	movw	r24, r14
    7810:	f8 dd       	rcall	.-1040   	; 0x7402 <_ZN6StringaSEPKc>
    7812:	d6 01       	movw	r26, r12
    7814:	ed 91       	ld	r30, X+
    7816:	fc 91       	ld	r31, X
    7818:	ec 0f       	add	r30, r28
    781a:	fd 1f       	adc	r31, r29
    781c:	b0 82       	st	Z, r11
    781e:	c7 01       	movw	r24, r14
    7820:	df 91       	pop	r29
    7822:	cf 91       	pop	r28
    7824:	1f 91       	pop	r17
    7826:	0f 91       	pop	r16
    7828:	ff 90       	pop	r15
    782a:	ef 90       	pop	r14
    782c:	df 90       	pop	r13
    782e:	cf 90       	pop	r12
    7830:	bf 90       	pop	r11
    7832:	08 95       	ret

00007834 <_ZN6String4trimEv>:

void String::trim(void)
{
    7834:	af 92       	push	r10
    7836:	bf 92       	push	r11
    7838:	cf 92       	push	r12
    783a:	df 92       	push	r13
    783c:	ef 92       	push	r14
    783e:	ff 92       	push	r15
    7840:	0f 93       	push	r16
    7842:	1f 93       	push	r17
    7844:	cf 93       	push	r28
    7846:	df 93       	push	r29
	if (!buffer || len == 0) return;
    7848:	dc 01       	movw	r26, r24
    784a:	cd 90       	ld	r12, X+
    784c:	dc 90       	ld	r13, X
    784e:	11 97       	sbiw	r26, 0x01	; 1
    7850:	c1 14       	cp	r12, r1
    7852:	d1 04       	cpc	r13, r1
    7854:	09 f4       	brne	.+2      	; 0x7858 <_ZN6String4trimEv+0x24>
    7856:	3c c0       	rjmp	.+120    	; 0x78d0 <_ZN6String4trimEv+0x9c>
    7858:	14 96       	adiw	r26, 0x04	; 4
    785a:	cd 91       	ld	r28, X+
    785c:	dc 91       	ld	r29, X
    785e:	15 97       	sbiw	r26, 0x05	; 5
    7860:	20 97       	sbiw	r28, 0x00	; 0
    7862:	b1 f1       	breq	.+108    	; 0x78d0 <_ZN6String4trimEv+0x9c>
    7864:	8c 01       	movw	r16, r24
    7866:	76 01       	movw	r14, r12
    7868:	57 01       	movw	r10, r14
    786a:	bf ef       	ldi	r27, 0xFF	; 255
    786c:	ab 1a       	sub	r10, r27
    786e:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    7870:	f7 01       	movw	r30, r14
    7872:	80 81       	ld	r24, Z
    7874:	90 e0       	ldi	r25, 0x00	; 0
    7876:	c9 d3       	rcall	.+1938   	; 0x800a <isspace>
    7878:	89 2b       	or	r24, r25
    787a:	11 f0       	breq	.+4      	; 0x7880 <_ZN6String4trimEv+0x4c>
    787c:	75 01       	movw	r14, r10
    787e:	f4 cf       	rjmp	.-24     	; 0x7868 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    7880:	21 97       	sbiw	r28, 0x01	; 1
    7882:	cc 0d       	add	r28, r12
    7884:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    7886:	88 81       	ld	r24, Y
    7888:	90 e0       	ldi	r25, 0x00	; 0
    788a:	bf d3       	rcall	.+1918   	; 0x800a <isspace>
    788c:	89 2b       	or	r24, r25
    788e:	29 f0       	breq	.+10     	; 0x789a <_ZN6String4trimEv+0x66>
    7890:	ce 15       	cp	r28, r14
    7892:	df 05       	cpc	r29, r15
    7894:	10 f0       	brcs	.+4      	; 0x789a <_ZN6String4trimEv+0x66>
    7896:	21 97       	sbiw	r28, 0x01	; 1
    7898:	f6 cf       	rjmp	.-20     	; 0x7886 <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    789a:	ae 01       	movw	r20, r28
    789c:	4f 5f       	subi	r20, 0xFF	; 255
    789e:	5f 4f       	sbci	r21, 0xFF	; 255
    78a0:	4e 19       	sub	r20, r14
    78a2:	5f 09       	sbc	r21, r15
    78a4:	d8 01       	movw	r26, r16
    78a6:	15 96       	adiw	r26, 0x05	; 5
    78a8:	5c 93       	st	X, r21
    78aa:	4e 93       	st	-X, r20
    78ac:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    78ae:	ce 14       	cp	r12, r14
    78b0:	df 04       	cpc	r13, r15
    78b2:	18 f4       	brcc	.+6      	; 0x78ba <_ZN6String4trimEv+0x86>
    78b4:	b7 01       	movw	r22, r14
    78b6:	c6 01       	movw	r24, r12
    78b8:	b9 d3       	rcall	.+1906   	; 0x802c <memcpy>
	buffer[len] = 0;
    78ba:	d8 01       	movw	r26, r16
    78bc:	ed 91       	ld	r30, X+
    78be:	fc 91       	ld	r31, X
    78c0:	11 97       	sbiw	r26, 0x01	; 1
    78c2:	14 96       	adiw	r26, 0x04	; 4
    78c4:	8d 91       	ld	r24, X+
    78c6:	9c 91       	ld	r25, X
    78c8:	15 97       	sbiw	r26, 0x05	; 5
    78ca:	e8 0f       	add	r30, r24
    78cc:	f9 1f       	adc	r31, r25
    78ce:	10 82       	st	Z, r1
}
    78d0:	df 91       	pop	r29
    78d2:	cf 91       	pop	r28
    78d4:	1f 91       	pop	r17
    78d6:	0f 91       	pop	r16
    78d8:	ff 90       	pop	r15
    78da:	ef 90       	pop	r14
    78dc:	df 90       	pop	r13
    78de:	cf 90       	pop	r12
    78e0:	bf 90       	pop	r11
    78e2:	af 90       	pop	r10
    78e4:	08 95       	ret

000078e6 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    78e6:	fc 01       	movw	r30, r24
    78e8:	80 81       	ld	r24, Z
    78ea:	91 81       	ldd	r25, Z+1	; 0x01
    78ec:	00 97       	sbiw	r24, 0x00	; 0
    78ee:	09 f0       	breq	.+2      	; 0x78f2 <_ZNK6String5toIntEv+0xc>
    78f0:	66 c3       	rjmp	.+1740   	; 0x7fbe <atol>
	return 0;
}
    78f2:	60 e0       	ldi	r22, 0x00	; 0
    78f4:	70 e0       	ldi	r23, 0x00	; 0
    78f6:	cb 01       	movw	r24, r22
    78f8:	08 95       	ret

000078fa <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    78fa:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    78fc:	91 8d       	ldd	r25, Z+25	; 0x19
    78fe:	22 8d       	ldd	r18, Z+26	; 0x1a
    7900:	89 2f       	mov	r24, r25
    7902:	90 e0       	ldi	r25, 0x00	; 0
    7904:	80 5c       	subi	r24, 0xC0	; 192
    7906:	9f 4f       	sbci	r25, 0xFF	; 255
    7908:	82 1b       	sub	r24, r18
    790a:	91 09       	sbc	r25, r1
}
    790c:	8f 73       	andi	r24, 0x3F	; 63
    790e:	99 27       	eor	r25, r25
    7910:	08 95       	ret

00007912 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    7912:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    7914:	91 8d       	ldd	r25, Z+25	; 0x19
    7916:	82 8d       	ldd	r24, Z+26	; 0x1a
    7918:	98 17       	cp	r25, r24
    791a:	31 f0       	breq	.+12     	; 0x7928 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    791c:	82 8d       	ldd	r24, Z+26	; 0x1a
    791e:	e8 0f       	add	r30, r24
    7920:	f1 1d       	adc	r31, r1
    7922:	85 8d       	ldd	r24, Z+29	; 0x1d
    7924:	90 e0       	ldi	r25, 0x00	; 0
    7926:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7928:	8f ef       	ldi	r24, 0xFF	; 255
    792a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    792c:	08 95       	ret

0000792e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    792e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    7930:	91 8d       	ldd	r25, Z+25	; 0x19
    7932:	82 8d       	ldd	r24, Z+26	; 0x1a
    7934:	98 17       	cp	r25, r24
    7936:	61 f0       	breq	.+24     	; 0x7950 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    7938:	82 8d       	ldd	r24, Z+26	; 0x1a
    793a:	df 01       	movw	r26, r30
    793c:	a8 0f       	add	r26, r24
    793e:	b1 1d       	adc	r27, r1
    7940:	5d 96       	adiw	r26, 0x1d	; 29
    7942:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    7944:	92 8d       	ldd	r25, Z+26	; 0x1a
    7946:	9f 5f       	subi	r25, 0xFF	; 255
    7948:	9f 73       	andi	r25, 0x3F	; 63
    794a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    794c:	90 e0       	ldi	r25, 0x00	; 0
    794e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7950:	8f ef       	ldi	r24, 0xFF	; 255
    7952:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    7954:	08 95       	ret

00007956 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    7956:	fc 01       	movw	r30, r24
    7958:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    795a:	44 8d       	ldd	r20, Z+28	; 0x1c
    795c:	25 2f       	mov	r18, r21
    795e:	30 e0       	ldi	r19, 0x00	; 0
    7960:	84 2f       	mov	r24, r20
    7962:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    7964:	82 1b       	sub	r24, r18
    7966:	93 0b       	sbc	r25, r19
    7968:	54 17       	cp	r21, r20
    796a:	10 f0       	brcs	.+4      	; 0x7970 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    796c:	cf 96       	adiw	r24, 0x3f	; 63
    796e:	08 95       	ret
  return tail - head - 1;
    7970:	01 97       	sbiw	r24, 0x01	; 1
}
    7972:	08 95       	ret

00007974 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    7974:	8a ea       	ldi	r24, 0xAA	; 170
    7976:	95 e3       	ldi	r25, 0x35	; 53
    7978:	89 2b       	or	r24, r25
    797a:	41 f0       	breq	.+16     	; 0x798c <_Z14serialEventRunv+0x18>
    797c:	80 e0       	ldi	r24, 0x00	; 0
    797e:	90 e0       	ldi	r25, 0x00	; 0
    7980:	89 2b       	or	r24, r25
    7982:	21 f0       	breq	.+8      	; 0x798c <_Z14serialEventRunv+0x18>
    7984:	e7 d8       	rcall	.-3634   	; 0x6b54 <_Z17Serial0_availablev>
    7986:	81 11       	cpse	r24, r1
    7988:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    798c:	08 95       	ret

0000798e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    798e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    7990:	84 8d       	ldd	r24, Z+28	; 0x1c
    7992:	df 01       	movw	r26, r30
    7994:	a8 0f       	add	r26, r24
    7996:	b1 1d       	adc	r27, r1
    7998:	a3 5a       	subi	r26, 0xA3	; 163
    799a:	bf 4f       	sbci	r27, 0xFF	; 255
    799c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    799e:	84 8d       	ldd	r24, Z+28	; 0x1c
    79a0:	90 e0       	ldi	r25, 0x00	; 0
    79a2:	01 96       	adiw	r24, 0x01	; 1
    79a4:	8f 73       	andi	r24, 0x3F	; 63
    79a6:	99 27       	eor	r25, r25
    79a8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    79aa:	a6 89       	ldd	r26, Z+22	; 0x16
    79ac:	b7 89       	ldd	r27, Z+23	; 0x17
    79ae:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    79b0:	a0 89       	ldd	r26, Z+16	; 0x10
    79b2:	b1 89       	ldd	r27, Z+17	; 0x11
    79b4:	8c 91       	ld	r24, X
    79b6:	83 70       	andi	r24, 0x03	; 3
    79b8:	80 64       	ori	r24, 0x40	; 64
    79ba:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    79bc:	93 8d       	ldd	r25, Z+27	; 0x1b
    79be:	84 8d       	ldd	r24, Z+28	; 0x1c
    79c0:	98 13       	cpse	r25, r24
    79c2:	06 c0       	rjmp	.+12     	; 0x79d0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    79c4:	02 88       	ldd	r0, Z+18	; 0x12
    79c6:	f3 89       	ldd	r31, Z+19	; 0x13
    79c8:	e0 2d       	mov	r30, r0
    79ca:	80 81       	ld	r24, Z
    79cc:	8f 7d       	andi	r24, 0xDF	; 223
    79ce:	80 83       	st	Z, r24
    79d0:	08 95       	ret

000079d2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    79d2:	ef 92       	push	r14
    79d4:	ff 92       	push	r15
    79d6:	0f 93       	push	r16
    79d8:	1f 93       	push	r17
    79da:	cf 93       	push	r28
    79dc:	df 93       	push	r29
    79de:	ec 01       	movw	r28, r24
  _written = true;
    79e0:	81 e0       	ldi	r24, 0x01	; 1
    79e2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    79e4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    79e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    79e8:	98 13       	cpse	r25, r24
    79ea:	05 c0       	rjmp	.+10     	; 0x79f6 <_ZN14HardwareSerial5writeEh+0x24>
    79ec:	e8 89       	ldd	r30, Y+16	; 0x10
    79ee:	f9 89       	ldd	r31, Y+17	; 0x11
    79f0:	80 81       	ld	r24, Z
    79f2:	85 fd       	sbrc	r24, 5
    79f4:	25 c0       	rjmp	.+74     	; 0x7a40 <_ZN14HardwareSerial5writeEh+0x6e>
    79f6:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    79f8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    79fa:	10 e0       	ldi	r17, 0x00	; 0
    79fc:	0f 5f       	subi	r16, 0xFF	; 255
    79fe:	1f 4f       	sbci	r17, 0xFF	; 255
    7a00:	0f 73       	andi	r16, 0x3F	; 63
    7a02:	11 27       	eor	r17, r17
    7a04:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    7a06:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7a08:	e8 12       	cpse	r14, r24
    7a0a:	0b c0       	rjmp	.+22     	; 0x7a22 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    7a0c:	0f b6       	in	r0, 0x3f	; 63
    7a0e:	07 fc       	sbrc	r0, 7
    7a10:	fa cf       	rjmp	.-12     	; 0x7a06 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    7a12:	e8 89       	ldd	r30, Y+16	; 0x10
    7a14:	f9 89       	ldd	r31, Y+17	; 0x11
    7a16:	80 81       	ld	r24, Z
    7a18:	85 ff       	sbrs	r24, 5
    7a1a:	f5 cf       	rjmp	.-22     	; 0x7a06 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    7a1c:	ce 01       	movw	r24, r28
    7a1e:	b7 df       	rcall	.-146    	; 0x798e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    7a20:	f2 cf       	rjmp	.-28     	; 0x7a06 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    7a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7a24:	fe 01       	movw	r30, r28
    7a26:	e8 0f       	add	r30, r24
    7a28:	f1 1d       	adc	r31, r1
    7a2a:	e3 5a       	subi	r30, 0xA3	; 163
    7a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    7a2e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7a30:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7a32:	f8 94       	cli
    _tx_buffer_head = i;
    7a34:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    7a36:	ea 89       	ldd	r30, Y+18	; 0x12
    7a38:	fb 89       	ldd	r31, Y+19	; 0x13
    7a3a:	80 81       	ld	r24, Z
    7a3c:	80 62       	ori	r24, 0x20	; 32
    7a3e:	0a c0       	rjmp	.+20     	; 0x7a54 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7a40:	9f b7       	in	r25, 0x3f	; 63
    7a42:	f8 94       	cli
      *_udr = c;
    7a44:	ee 89       	ldd	r30, Y+22	; 0x16
    7a46:	ff 89       	ldd	r31, Y+23	; 0x17
    7a48:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    7a4a:	e8 89       	ldd	r30, Y+16	; 0x10
    7a4c:	f9 89       	ldd	r31, Y+17	; 0x11
    7a4e:	80 81       	ld	r24, Z
    7a50:	83 70       	andi	r24, 0x03	; 3
    7a52:	80 64       	ori	r24, 0x40	; 64
    7a54:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7a56:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    7a58:	81 e0       	ldi	r24, 0x01	; 1
    7a5a:	90 e0       	ldi	r25, 0x00	; 0
    7a5c:	df 91       	pop	r29
    7a5e:	cf 91       	pop	r28
    7a60:	1f 91       	pop	r17
    7a62:	0f 91       	pop	r16
    7a64:	ff 90       	pop	r15
    7a66:	ef 90       	pop	r14
    7a68:	08 95       	ret

00007a6a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    7a6a:	cf 93       	push	r28
    7a6c:	df 93       	push	r29
    7a6e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    7a70:	88 8d       	ldd	r24, Y+24	; 0x18
    7a72:	88 23       	and	r24, r24
    7a74:	c1 f0       	breq	.+48     	; 0x7aa6 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    7a76:	ea 89       	ldd	r30, Y+18	; 0x12
    7a78:	fb 89       	ldd	r31, Y+19	; 0x13
    7a7a:	80 81       	ld	r24, Z
    7a7c:	85 fd       	sbrc	r24, 5
    7a7e:	05 c0       	rjmp	.+10     	; 0x7a8a <_ZN14HardwareSerial5flushEv+0x20>
    7a80:	a8 89       	ldd	r26, Y+16	; 0x10
    7a82:	b9 89       	ldd	r27, Y+17	; 0x11
    7a84:	8c 91       	ld	r24, X
    7a86:	86 fd       	sbrc	r24, 6
    7a88:	0e c0       	rjmp	.+28     	; 0x7aa6 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    7a8a:	0f b6       	in	r0, 0x3f	; 63
    7a8c:	07 fc       	sbrc	r0, 7
    7a8e:	f5 cf       	rjmp	.-22     	; 0x7a7a <_ZN14HardwareSerial5flushEv+0x10>
    7a90:	80 81       	ld	r24, Z
    7a92:	85 ff       	sbrs	r24, 5
    7a94:	f2 cf       	rjmp	.-28     	; 0x7a7a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    7a96:	a8 89       	ldd	r26, Y+16	; 0x10
    7a98:	b9 89       	ldd	r27, Y+17	; 0x11
    7a9a:	8c 91       	ld	r24, X
    7a9c:	85 ff       	sbrs	r24, 5
    7a9e:	ed cf       	rjmp	.-38     	; 0x7a7a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    7aa0:	ce 01       	movw	r24, r28
    7aa2:	75 df       	rcall	.-278    	; 0x798e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    7aa4:	e8 cf       	rjmp	.-48     	; 0x7a76 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    7aa6:	df 91       	pop	r29
    7aa8:	cf 91       	pop	r28
    7aaa:	08 95       	ret

00007aac <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    7aac:	08 95       	ret

00007aae <__udivmodqi4>:
    7aae:	99 1b       	sub	r25, r25
    7ab0:	79 e0       	ldi	r23, 0x09	; 9
    7ab2:	04 c0       	rjmp	.+8      	; 0x7abc <__udivmodqi4_ep>

00007ab4 <__udivmodqi4_loop>:
    7ab4:	99 1f       	adc	r25, r25
    7ab6:	96 17       	cp	r25, r22
    7ab8:	08 f0       	brcs	.+2      	; 0x7abc <__udivmodqi4_ep>
    7aba:	96 1b       	sub	r25, r22

00007abc <__udivmodqi4_ep>:
    7abc:	88 1f       	adc	r24, r24
    7abe:	7a 95       	dec	r23
    7ac0:	c9 f7       	brne	.-14     	; 0x7ab4 <__udivmodqi4_loop>
    7ac2:	80 95       	com	r24
    7ac4:	08 95       	ret

00007ac6 <__udivmodhi4>:
    7ac6:	aa 1b       	sub	r26, r26
    7ac8:	bb 1b       	sub	r27, r27
    7aca:	51 e1       	ldi	r21, 0x11	; 17
    7acc:	07 c0       	rjmp	.+14     	; 0x7adc <__udivmodhi4_ep>

00007ace <__udivmodhi4_loop>:
    7ace:	aa 1f       	adc	r26, r26
    7ad0:	bb 1f       	adc	r27, r27
    7ad2:	a6 17       	cp	r26, r22
    7ad4:	b7 07       	cpc	r27, r23
    7ad6:	10 f0       	brcs	.+4      	; 0x7adc <__udivmodhi4_ep>
    7ad8:	a6 1b       	sub	r26, r22
    7ada:	b7 0b       	sbc	r27, r23

00007adc <__udivmodhi4_ep>:
    7adc:	88 1f       	adc	r24, r24
    7ade:	99 1f       	adc	r25, r25
    7ae0:	5a 95       	dec	r21
    7ae2:	a9 f7       	brne	.-22     	; 0x7ace <__udivmodhi4_loop>
    7ae4:	80 95       	com	r24
    7ae6:	90 95       	com	r25
    7ae8:	bc 01       	movw	r22, r24
    7aea:	cd 01       	movw	r24, r26
    7aec:	08 95       	ret

00007aee <__udivmodsi4>:
    7aee:	a1 e2       	ldi	r26, 0x21	; 33
    7af0:	1a 2e       	mov	r1, r26
    7af2:	aa 1b       	sub	r26, r26
    7af4:	bb 1b       	sub	r27, r27
    7af6:	fd 01       	movw	r30, r26
    7af8:	0d c0       	rjmp	.+26     	; 0x7b14 <__udivmodsi4_ep>

00007afa <__udivmodsi4_loop>:
    7afa:	aa 1f       	adc	r26, r26
    7afc:	bb 1f       	adc	r27, r27
    7afe:	ee 1f       	adc	r30, r30
    7b00:	ff 1f       	adc	r31, r31
    7b02:	a2 17       	cp	r26, r18
    7b04:	b3 07       	cpc	r27, r19
    7b06:	e4 07       	cpc	r30, r20
    7b08:	f5 07       	cpc	r31, r21
    7b0a:	20 f0       	brcs	.+8      	; 0x7b14 <__udivmodsi4_ep>
    7b0c:	a2 1b       	sub	r26, r18
    7b0e:	b3 0b       	sbc	r27, r19
    7b10:	e4 0b       	sbc	r30, r20
    7b12:	f5 0b       	sbc	r31, r21

00007b14 <__udivmodsi4_ep>:
    7b14:	66 1f       	adc	r22, r22
    7b16:	77 1f       	adc	r23, r23
    7b18:	88 1f       	adc	r24, r24
    7b1a:	99 1f       	adc	r25, r25
    7b1c:	1a 94       	dec	r1
    7b1e:	69 f7       	brne	.-38     	; 0x7afa <__udivmodsi4_loop>
    7b20:	60 95       	com	r22
    7b22:	70 95       	com	r23
    7b24:	80 95       	com	r24
    7b26:	90 95       	com	r25
    7b28:	9b 01       	movw	r18, r22
    7b2a:	ac 01       	movw	r20, r24
    7b2c:	bd 01       	movw	r22, r26
    7b2e:	cf 01       	movw	r24, r30
    7b30:	08 95       	ret

00007b32 <__tablejump2__>:
    7b32:	ee 0f       	add	r30, r30
    7b34:	ff 1f       	adc	r31, r31
    7b36:	00 24       	eor	r0, r0
    7b38:	00 1c       	adc	r0, r0
    7b3a:	0b be       	out	0x3b, r0	; 59
    7b3c:	07 90       	elpm	r0, Z+
    7b3e:	f6 91       	elpm	r31, Z
    7b40:	e0 2d       	mov	r30, r0
    7b42:	09 94       	ijmp

00007b44 <__umulhisi3>:
    7b44:	a2 9f       	mul	r26, r18
    7b46:	b0 01       	movw	r22, r0
    7b48:	b3 9f       	mul	r27, r19
    7b4a:	c0 01       	movw	r24, r0
    7b4c:	a3 9f       	mul	r26, r19
    7b4e:	70 0d       	add	r23, r0
    7b50:	81 1d       	adc	r24, r1
    7b52:	11 24       	eor	r1, r1
    7b54:	91 1d       	adc	r25, r1
    7b56:	b2 9f       	mul	r27, r18
    7b58:	70 0d       	add	r23, r0
    7b5a:	81 1d       	adc	r24, r1
    7b5c:	11 24       	eor	r1, r1
    7b5e:	91 1d       	adc	r25, r1
    7b60:	08 95       	ret

00007b62 <__muluhisi3>:
    7b62:	f0 df       	rcall	.-32     	; 0x7b44 <__umulhisi3>
    7b64:	a5 9f       	mul	r26, r21
    7b66:	90 0d       	add	r25, r0
    7b68:	b4 9f       	mul	r27, r20
    7b6a:	90 0d       	add	r25, r0
    7b6c:	a4 9f       	mul	r26, r20
    7b6e:	80 0d       	add	r24, r0
    7b70:	91 1d       	adc	r25, r1
    7b72:	11 24       	eor	r1, r1
    7b74:	08 95       	ret

00007b76 <dtostrf>:
    7b76:	ef 92       	push	r14
    7b78:	0f 93       	push	r16
    7b7a:	1f 93       	push	r17
    7b7c:	cf 93       	push	r28
    7b7e:	df 93       	push	r29
    7b80:	e8 01       	movw	r28, r16
    7b82:	47 fd       	sbrc	r20, 7
    7b84:	02 c0       	rjmp	.+4      	; 0x7b8a <dtostrf+0x14>
    7b86:	34 e0       	ldi	r19, 0x04	; 4
    7b88:	01 c0       	rjmp	.+2      	; 0x7b8c <dtostrf+0x16>
    7b8a:	34 e1       	ldi	r19, 0x14	; 20
    7b8c:	04 2e       	mov	r0, r20
    7b8e:	00 0c       	add	r0, r0
    7b90:	55 0b       	sbc	r21, r21
    7b92:	57 ff       	sbrs	r21, 7
    7b94:	03 c0       	rjmp	.+6      	; 0x7b9c <dtostrf+0x26>
    7b96:	51 95       	neg	r21
    7b98:	41 95       	neg	r20
    7b9a:	51 09       	sbc	r21, r1
    7b9c:	e3 2e       	mov	r14, r19
    7b9e:	02 2f       	mov	r16, r18
    7ba0:	24 2f       	mov	r18, r20
    7ba2:	ae 01       	movw	r20, r28
    7ba4:	f0 d2       	rcall	.+1504   	; 0x8186 <dtoa_prf>
    7ba6:	ce 01       	movw	r24, r28
    7ba8:	df 91       	pop	r29
    7baa:	cf 91       	pop	r28
    7bac:	1f 91       	pop	r17
    7bae:	0f 91       	pop	r16
    7bb0:	ef 90       	pop	r14
    7bb2:	08 95       	ret

00007bb4 <malloc>:
    7bb4:	0f 93       	push	r16
    7bb6:	1f 93       	push	r17
    7bb8:	cf 93       	push	r28
    7bba:	df 93       	push	r29
    7bbc:	82 30       	cpi	r24, 0x02	; 2
    7bbe:	91 05       	cpc	r25, r1
    7bc0:	10 f4       	brcc	.+4      	; 0x7bc6 <malloc+0x12>
    7bc2:	82 e0       	ldi	r24, 0x02	; 2
    7bc4:	90 e0       	ldi	r25, 0x00	; 0
    7bc6:	e0 91 26 0d 	lds	r30, 0x0D26	; 0x800d26 <__flp>
    7bca:	f0 91 27 0d 	lds	r31, 0x0D27	; 0x800d27 <__flp+0x1>
    7bce:	20 e0       	ldi	r18, 0x00	; 0
    7bd0:	30 e0       	ldi	r19, 0x00	; 0
    7bd2:	a0 e0       	ldi	r26, 0x00	; 0
    7bd4:	b0 e0       	ldi	r27, 0x00	; 0
    7bd6:	30 97       	sbiw	r30, 0x00	; 0
    7bd8:	19 f1       	breq	.+70     	; 0x7c20 <malloc+0x6c>
    7bda:	40 81       	ld	r20, Z
    7bdc:	51 81       	ldd	r21, Z+1	; 0x01
    7bde:	02 81       	ldd	r16, Z+2	; 0x02
    7be0:	13 81       	ldd	r17, Z+3	; 0x03
    7be2:	48 17       	cp	r20, r24
    7be4:	59 07       	cpc	r21, r25
    7be6:	c8 f0       	brcs	.+50     	; 0x7c1a <malloc+0x66>
    7be8:	84 17       	cp	r24, r20
    7bea:	95 07       	cpc	r25, r21
    7bec:	69 f4       	brne	.+26     	; 0x7c08 <malloc+0x54>
    7bee:	10 97       	sbiw	r26, 0x00	; 0
    7bf0:	31 f0       	breq	.+12     	; 0x7bfe <malloc+0x4a>
    7bf2:	12 96       	adiw	r26, 0x02	; 2
    7bf4:	0c 93       	st	X, r16
    7bf6:	12 97       	sbiw	r26, 0x02	; 2
    7bf8:	13 96       	adiw	r26, 0x03	; 3
    7bfa:	1c 93       	st	X, r17
    7bfc:	27 c0       	rjmp	.+78     	; 0x7c4c <malloc+0x98>
    7bfe:	00 93 26 0d 	sts	0x0D26, r16	; 0x800d26 <__flp>
    7c02:	10 93 27 0d 	sts	0x0D27, r17	; 0x800d27 <__flp+0x1>
    7c06:	22 c0       	rjmp	.+68     	; 0x7c4c <malloc+0x98>
    7c08:	21 15       	cp	r18, r1
    7c0a:	31 05       	cpc	r19, r1
    7c0c:	19 f0       	breq	.+6      	; 0x7c14 <malloc+0x60>
    7c0e:	42 17       	cp	r20, r18
    7c10:	53 07       	cpc	r21, r19
    7c12:	18 f4       	brcc	.+6      	; 0x7c1a <malloc+0x66>
    7c14:	9a 01       	movw	r18, r20
    7c16:	bd 01       	movw	r22, r26
    7c18:	ef 01       	movw	r28, r30
    7c1a:	df 01       	movw	r26, r30
    7c1c:	f8 01       	movw	r30, r16
    7c1e:	db cf       	rjmp	.-74     	; 0x7bd6 <malloc+0x22>
    7c20:	21 15       	cp	r18, r1
    7c22:	31 05       	cpc	r19, r1
    7c24:	f9 f0       	breq	.+62     	; 0x7c64 <malloc+0xb0>
    7c26:	28 1b       	sub	r18, r24
    7c28:	39 0b       	sbc	r19, r25
    7c2a:	24 30       	cpi	r18, 0x04	; 4
    7c2c:	31 05       	cpc	r19, r1
    7c2e:	80 f4       	brcc	.+32     	; 0x7c50 <malloc+0x9c>
    7c30:	8a 81       	ldd	r24, Y+2	; 0x02
    7c32:	9b 81       	ldd	r25, Y+3	; 0x03
    7c34:	61 15       	cp	r22, r1
    7c36:	71 05       	cpc	r23, r1
    7c38:	21 f0       	breq	.+8      	; 0x7c42 <malloc+0x8e>
    7c3a:	fb 01       	movw	r30, r22
    7c3c:	93 83       	std	Z+3, r25	; 0x03
    7c3e:	82 83       	std	Z+2, r24	; 0x02
    7c40:	04 c0       	rjmp	.+8      	; 0x7c4a <malloc+0x96>
    7c42:	90 93 27 0d 	sts	0x0D27, r25	; 0x800d27 <__flp+0x1>
    7c46:	80 93 26 0d 	sts	0x0D26, r24	; 0x800d26 <__flp>
    7c4a:	fe 01       	movw	r30, r28
    7c4c:	32 96       	adiw	r30, 0x02	; 2
    7c4e:	44 c0       	rjmp	.+136    	; 0x7cd8 <malloc+0x124>
    7c50:	fe 01       	movw	r30, r28
    7c52:	e2 0f       	add	r30, r18
    7c54:	f3 1f       	adc	r31, r19
    7c56:	81 93       	st	Z+, r24
    7c58:	91 93       	st	Z+, r25
    7c5a:	22 50       	subi	r18, 0x02	; 2
    7c5c:	31 09       	sbc	r19, r1
    7c5e:	39 83       	std	Y+1, r19	; 0x01
    7c60:	28 83       	st	Y, r18
    7c62:	3a c0       	rjmp	.+116    	; 0x7cd8 <malloc+0x124>
    7c64:	20 91 24 0d 	lds	r18, 0x0D24	; 0x800d24 <__brkval>
    7c68:	30 91 25 0d 	lds	r19, 0x0D25	; 0x800d25 <__brkval+0x1>
    7c6c:	23 2b       	or	r18, r19
    7c6e:	41 f4       	brne	.+16     	; 0x7c80 <malloc+0xcc>
    7c70:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    7c74:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    7c78:	30 93 25 0d 	sts	0x0D25, r19	; 0x800d25 <__brkval+0x1>
    7c7c:	20 93 24 0d 	sts	0x0D24, r18	; 0x800d24 <__brkval>
    7c80:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    7c84:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    7c88:	21 15       	cp	r18, r1
    7c8a:	31 05       	cpc	r19, r1
    7c8c:	41 f4       	brne	.+16     	; 0x7c9e <malloc+0xea>
    7c8e:	2d b7       	in	r18, 0x3d	; 61
    7c90:	3e b7       	in	r19, 0x3e	; 62
    7c92:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    7c96:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    7c9a:	24 1b       	sub	r18, r20
    7c9c:	35 0b       	sbc	r19, r21
    7c9e:	e0 91 24 0d 	lds	r30, 0x0D24	; 0x800d24 <__brkval>
    7ca2:	f0 91 25 0d 	lds	r31, 0x0D25	; 0x800d25 <__brkval+0x1>
    7ca6:	e2 17       	cp	r30, r18
    7ca8:	f3 07       	cpc	r31, r19
    7caa:	a0 f4       	brcc	.+40     	; 0x7cd4 <malloc+0x120>
    7cac:	2e 1b       	sub	r18, r30
    7cae:	3f 0b       	sbc	r19, r31
    7cb0:	28 17       	cp	r18, r24
    7cb2:	39 07       	cpc	r19, r25
    7cb4:	78 f0       	brcs	.+30     	; 0x7cd4 <malloc+0x120>
    7cb6:	ac 01       	movw	r20, r24
    7cb8:	4e 5f       	subi	r20, 0xFE	; 254
    7cba:	5f 4f       	sbci	r21, 0xFF	; 255
    7cbc:	24 17       	cp	r18, r20
    7cbe:	35 07       	cpc	r19, r21
    7cc0:	48 f0       	brcs	.+18     	; 0x7cd4 <malloc+0x120>
    7cc2:	4e 0f       	add	r20, r30
    7cc4:	5f 1f       	adc	r21, r31
    7cc6:	50 93 25 0d 	sts	0x0D25, r21	; 0x800d25 <__brkval+0x1>
    7cca:	40 93 24 0d 	sts	0x0D24, r20	; 0x800d24 <__brkval>
    7cce:	81 93       	st	Z+, r24
    7cd0:	91 93       	st	Z+, r25
    7cd2:	02 c0       	rjmp	.+4      	; 0x7cd8 <malloc+0x124>
    7cd4:	e0 e0       	ldi	r30, 0x00	; 0
    7cd6:	f0 e0       	ldi	r31, 0x00	; 0
    7cd8:	cf 01       	movw	r24, r30
    7cda:	df 91       	pop	r29
    7cdc:	cf 91       	pop	r28
    7cde:	1f 91       	pop	r17
    7ce0:	0f 91       	pop	r16
    7ce2:	08 95       	ret

00007ce4 <free>:
    7ce4:	cf 93       	push	r28
    7ce6:	df 93       	push	r29
    7ce8:	00 97       	sbiw	r24, 0x00	; 0
    7cea:	09 f4       	brne	.+2      	; 0x7cee <free+0xa>
    7cec:	81 c0       	rjmp	.+258    	; 0x7df0 <free+0x10c>
    7cee:	fc 01       	movw	r30, r24
    7cf0:	32 97       	sbiw	r30, 0x02	; 2
    7cf2:	13 82       	std	Z+3, r1	; 0x03
    7cf4:	12 82       	std	Z+2, r1	; 0x02
    7cf6:	a0 91 26 0d 	lds	r26, 0x0D26	; 0x800d26 <__flp>
    7cfa:	b0 91 27 0d 	lds	r27, 0x0D27	; 0x800d27 <__flp+0x1>
    7cfe:	10 97       	sbiw	r26, 0x00	; 0
    7d00:	81 f4       	brne	.+32     	; 0x7d22 <free+0x3e>
    7d02:	20 81       	ld	r18, Z
    7d04:	31 81       	ldd	r19, Z+1	; 0x01
    7d06:	82 0f       	add	r24, r18
    7d08:	93 1f       	adc	r25, r19
    7d0a:	20 91 24 0d 	lds	r18, 0x0D24	; 0x800d24 <__brkval>
    7d0e:	30 91 25 0d 	lds	r19, 0x0D25	; 0x800d25 <__brkval+0x1>
    7d12:	28 17       	cp	r18, r24
    7d14:	39 07       	cpc	r19, r25
    7d16:	51 f5       	brne	.+84     	; 0x7d6c <free+0x88>
    7d18:	f0 93 25 0d 	sts	0x0D25, r31	; 0x800d25 <__brkval+0x1>
    7d1c:	e0 93 24 0d 	sts	0x0D24, r30	; 0x800d24 <__brkval>
    7d20:	67 c0       	rjmp	.+206    	; 0x7df0 <free+0x10c>
    7d22:	ed 01       	movw	r28, r26
    7d24:	20 e0       	ldi	r18, 0x00	; 0
    7d26:	30 e0       	ldi	r19, 0x00	; 0
    7d28:	ce 17       	cp	r28, r30
    7d2a:	df 07       	cpc	r29, r31
    7d2c:	40 f4       	brcc	.+16     	; 0x7d3e <free+0x5a>
    7d2e:	4a 81       	ldd	r20, Y+2	; 0x02
    7d30:	5b 81       	ldd	r21, Y+3	; 0x03
    7d32:	9e 01       	movw	r18, r28
    7d34:	41 15       	cp	r20, r1
    7d36:	51 05       	cpc	r21, r1
    7d38:	f1 f0       	breq	.+60     	; 0x7d76 <free+0x92>
    7d3a:	ea 01       	movw	r28, r20
    7d3c:	f5 cf       	rjmp	.-22     	; 0x7d28 <free+0x44>
    7d3e:	d3 83       	std	Z+3, r29	; 0x03
    7d40:	c2 83       	std	Z+2, r28	; 0x02
    7d42:	40 81       	ld	r20, Z
    7d44:	51 81       	ldd	r21, Z+1	; 0x01
    7d46:	84 0f       	add	r24, r20
    7d48:	95 1f       	adc	r25, r21
    7d4a:	c8 17       	cp	r28, r24
    7d4c:	d9 07       	cpc	r29, r25
    7d4e:	59 f4       	brne	.+22     	; 0x7d66 <free+0x82>
    7d50:	88 81       	ld	r24, Y
    7d52:	99 81       	ldd	r25, Y+1	; 0x01
    7d54:	84 0f       	add	r24, r20
    7d56:	95 1f       	adc	r25, r21
    7d58:	02 96       	adiw	r24, 0x02	; 2
    7d5a:	91 83       	std	Z+1, r25	; 0x01
    7d5c:	80 83       	st	Z, r24
    7d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    7d60:	9b 81       	ldd	r25, Y+3	; 0x03
    7d62:	93 83       	std	Z+3, r25	; 0x03
    7d64:	82 83       	std	Z+2, r24	; 0x02
    7d66:	21 15       	cp	r18, r1
    7d68:	31 05       	cpc	r19, r1
    7d6a:	29 f4       	brne	.+10     	; 0x7d76 <free+0x92>
    7d6c:	f0 93 27 0d 	sts	0x0D27, r31	; 0x800d27 <__flp+0x1>
    7d70:	e0 93 26 0d 	sts	0x0D26, r30	; 0x800d26 <__flp>
    7d74:	3d c0       	rjmp	.+122    	; 0x7df0 <free+0x10c>
    7d76:	e9 01       	movw	r28, r18
    7d78:	fb 83       	std	Y+3, r31	; 0x03
    7d7a:	ea 83       	std	Y+2, r30	; 0x02
    7d7c:	49 91       	ld	r20, Y+
    7d7e:	59 91       	ld	r21, Y+
    7d80:	c4 0f       	add	r28, r20
    7d82:	d5 1f       	adc	r29, r21
    7d84:	ec 17       	cp	r30, r28
    7d86:	fd 07       	cpc	r31, r29
    7d88:	61 f4       	brne	.+24     	; 0x7da2 <free+0xbe>
    7d8a:	80 81       	ld	r24, Z
    7d8c:	91 81       	ldd	r25, Z+1	; 0x01
    7d8e:	84 0f       	add	r24, r20
    7d90:	95 1f       	adc	r25, r21
    7d92:	02 96       	adiw	r24, 0x02	; 2
    7d94:	e9 01       	movw	r28, r18
    7d96:	99 83       	std	Y+1, r25	; 0x01
    7d98:	88 83       	st	Y, r24
    7d9a:	82 81       	ldd	r24, Z+2	; 0x02
    7d9c:	93 81       	ldd	r25, Z+3	; 0x03
    7d9e:	9b 83       	std	Y+3, r25	; 0x03
    7da0:	8a 83       	std	Y+2, r24	; 0x02
    7da2:	e0 e0       	ldi	r30, 0x00	; 0
    7da4:	f0 e0       	ldi	r31, 0x00	; 0
    7da6:	12 96       	adiw	r26, 0x02	; 2
    7da8:	8d 91       	ld	r24, X+
    7daa:	9c 91       	ld	r25, X
    7dac:	13 97       	sbiw	r26, 0x03	; 3
    7dae:	00 97       	sbiw	r24, 0x00	; 0
    7db0:	19 f0       	breq	.+6      	; 0x7db8 <free+0xd4>
    7db2:	fd 01       	movw	r30, r26
    7db4:	dc 01       	movw	r26, r24
    7db6:	f7 cf       	rjmp	.-18     	; 0x7da6 <free+0xc2>
    7db8:	8d 91       	ld	r24, X+
    7dba:	9c 91       	ld	r25, X
    7dbc:	11 97       	sbiw	r26, 0x01	; 1
    7dbe:	9d 01       	movw	r18, r26
    7dc0:	2e 5f       	subi	r18, 0xFE	; 254
    7dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    7dc4:	82 0f       	add	r24, r18
    7dc6:	93 1f       	adc	r25, r19
    7dc8:	20 91 24 0d 	lds	r18, 0x0D24	; 0x800d24 <__brkval>
    7dcc:	30 91 25 0d 	lds	r19, 0x0D25	; 0x800d25 <__brkval+0x1>
    7dd0:	28 17       	cp	r18, r24
    7dd2:	39 07       	cpc	r19, r25
    7dd4:	69 f4       	brne	.+26     	; 0x7df0 <free+0x10c>
    7dd6:	30 97       	sbiw	r30, 0x00	; 0
    7dd8:	29 f4       	brne	.+10     	; 0x7de4 <free+0x100>
    7dda:	10 92 27 0d 	sts	0x0D27, r1	; 0x800d27 <__flp+0x1>
    7dde:	10 92 26 0d 	sts	0x0D26, r1	; 0x800d26 <__flp>
    7de2:	02 c0       	rjmp	.+4      	; 0x7de8 <free+0x104>
    7de4:	13 82       	std	Z+3, r1	; 0x03
    7de6:	12 82       	std	Z+2, r1	; 0x02
    7de8:	b0 93 25 0d 	sts	0x0D25, r27	; 0x800d25 <__brkval+0x1>
    7dec:	a0 93 24 0d 	sts	0x0D24, r26	; 0x800d24 <__brkval>
    7df0:	df 91       	pop	r29
    7df2:	cf 91       	pop	r28
    7df4:	08 95       	ret

00007df6 <realloc>:
    7df6:	6f 92       	push	r6
    7df8:	7f 92       	push	r7
    7dfa:	8f 92       	push	r8
    7dfc:	9f 92       	push	r9
    7dfe:	af 92       	push	r10
    7e00:	bf 92       	push	r11
    7e02:	cf 92       	push	r12
    7e04:	df 92       	push	r13
    7e06:	ef 92       	push	r14
    7e08:	ff 92       	push	r15
    7e0a:	0f 93       	push	r16
    7e0c:	1f 93       	push	r17
    7e0e:	cf 93       	push	r28
    7e10:	df 93       	push	r29
    7e12:	00 97       	sbiw	r24, 0x00	; 0
    7e14:	81 f4       	brne	.+32     	; 0x7e36 <realloc+0x40>
    7e16:	cb 01       	movw	r24, r22
    7e18:	df 91       	pop	r29
    7e1a:	cf 91       	pop	r28
    7e1c:	1f 91       	pop	r17
    7e1e:	0f 91       	pop	r16
    7e20:	ff 90       	pop	r15
    7e22:	ef 90       	pop	r14
    7e24:	df 90       	pop	r13
    7e26:	cf 90       	pop	r12
    7e28:	bf 90       	pop	r11
    7e2a:	af 90       	pop	r10
    7e2c:	9f 90       	pop	r9
    7e2e:	8f 90       	pop	r8
    7e30:	7f 90       	pop	r7
    7e32:	6f 90       	pop	r6
    7e34:	bf ce       	rjmp	.-642    	; 0x7bb4 <malloc>
    7e36:	fc 01       	movw	r30, r24
    7e38:	e6 0f       	add	r30, r22
    7e3a:	f7 1f       	adc	r31, r23
    7e3c:	9c 01       	movw	r18, r24
    7e3e:	22 50       	subi	r18, 0x02	; 2
    7e40:	31 09       	sbc	r19, r1
    7e42:	e2 17       	cp	r30, r18
    7e44:	f3 07       	cpc	r31, r19
    7e46:	08 f4       	brcc	.+2      	; 0x7e4a <realloc+0x54>
    7e48:	a5 c0       	rjmp	.+330    	; 0x7f94 <realloc+0x19e>
    7e4a:	ec 01       	movw	r28, r24
    7e4c:	d9 01       	movw	r26, r18
    7e4e:	0d 91       	ld	r16, X+
    7e50:	1c 91       	ld	r17, X
    7e52:	11 97       	sbiw	r26, 0x01	; 1
    7e54:	06 17       	cp	r16, r22
    7e56:	17 07       	cpc	r17, r23
    7e58:	a8 f0       	brcs	.+42     	; 0x7e84 <realloc+0x8e>
    7e5a:	05 30       	cpi	r16, 0x05	; 5
    7e5c:	11 05       	cpc	r17, r1
    7e5e:	08 f4       	brcc	.+2      	; 0x7e62 <realloc+0x6c>
    7e60:	97 c0       	rjmp	.+302    	; 0x7f90 <realloc+0x19a>
    7e62:	c8 01       	movw	r24, r16
    7e64:	04 97       	sbiw	r24, 0x04	; 4
    7e66:	86 17       	cp	r24, r22
    7e68:	97 07       	cpc	r25, r23
    7e6a:	08 f4       	brcc	.+2      	; 0x7e6e <realloc+0x78>
    7e6c:	91 c0       	rjmp	.+290    	; 0x7f90 <realloc+0x19a>
    7e6e:	02 50       	subi	r16, 0x02	; 2
    7e70:	11 09       	sbc	r17, r1
    7e72:	06 1b       	sub	r16, r22
    7e74:	17 0b       	sbc	r17, r23
    7e76:	01 93       	st	Z+, r16
    7e78:	11 93       	st	Z+, r17
    7e7a:	6d 93       	st	X+, r22
    7e7c:	7c 93       	st	X, r23
    7e7e:	cf 01       	movw	r24, r30
    7e80:	31 df       	rcall	.-414    	; 0x7ce4 <free>
    7e82:	86 c0       	rjmp	.+268    	; 0x7f90 <realloc+0x19a>
    7e84:	5b 01       	movw	r10, r22
    7e86:	a0 1a       	sub	r10, r16
    7e88:	b1 0a       	sbc	r11, r17
    7e8a:	4c 01       	movw	r8, r24
    7e8c:	80 0e       	add	r8, r16
    7e8e:	91 1e       	adc	r9, r17
    7e90:	a0 91 26 0d 	lds	r26, 0x0D26	; 0x800d26 <__flp>
    7e94:	b0 91 27 0d 	lds	r27, 0x0D27	; 0x800d27 <__flp+0x1>
    7e98:	61 2c       	mov	r6, r1
    7e9a:	71 2c       	mov	r7, r1
    7e9c:	e1 2c       	mov	r14, r1
    7e9e:	f1 2c       	mov	r15, r1
    7ea0:	10 97       	sbiw	r26, 0x00	; 0
    7ea2:	09 f4       	brne	.+2      	; 0x7ea6 <realloc+0xb0>
    7ea4:	46 c0       	rjmp	.+140    	; 0x7f32 <realloc+0x13c>
    7ea6:	8d 91       	ld	r24, X+
    7ea8:	9c 91       	ld	r25, X
    7eaa:	11 97       	sbiw	r26, 0x01	; 1
    7eac:	a8 15       	cp	r26, r8
    7eae:	b9 05       	cpc	r27, r9
    7eb0:	b1 f5       	brne	.+108    	; 0x7f1e <realloc+0x128>
    7eb2:	6c 01       	movw	r12, r24
    7eb4:	42 e0       	ldi	r20, 0x02	; 2
    7eb6:	c4 0e       	add	r12, r20
    7eb8:	d1 1c       	adc	r13, r1
    7eba:	ca 14       	cp	r12, r10
    7ebc:	db 04       	cpc	r13, r11
    7ebe:	78 f1       	brcs	.+94     	; 0x7f1e <realloc+0x128>
    7ec0:	4c 01       	movw	r8, r24
    7ec2:	8a 18       	sub	r8, r10
    7ec4:	9b 08       	sbc	r9, r11
    7ec6:	64 01       	movw	r12, r8
    7ec8:	42 e0       	ldi	r20, 0x02	; 2
    7eca:	c4 0e       	add	r12, r20
    7ecc:	d1 1c       	adc	r13, r1
    7ece:	12 96       	adiw	r26, 0x02	; 2
    7ed0:	bc 90       	ld	r11, X
    7ed2:	12 97       	sbiw	r26, 0x02	; 2
    7ed4:	13 96       	adiw	r26, 0x03	; 3
    7ed6:	ac 91       	ld	r26, X
    7ed8:	b5 e0       	ldi	r27, 0x05	; 5
    7eda:	cb 16       	cp	r12, r27
    7edc:	d1 04       	cpc	r13, r1
    7ede:	40 f0       	brcs	.+16     	; 0x7ef0 <realloc+0xfa>
    7ee0:	b2 82       	std	Z+2, r11	; 0x02
    7ee2:	a3 83       	std	Z+3, r26	; 0x03
    7ee4:	91 82       	std	Z+1, r9	; 0x01
    7ee6:	80 82       	st	Z, r8
    7ee8:	d9 01       	movw	r26, r18
    7eea:	6d 93       	st	X+, r22
    7eec:	7c 93       	st	X, r23
    7eee:	09 c0       	rjmp	.+18     	; 0x7f02 <realloc+0x10c>
    7ef0:	0e 5f       	subi	r16, 0xFE	; 254
    7ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    7ef4:	80 0f       	add	r24, r16
    7ef6:	91 1f       	adc	r25, r17
    7ef8:	f9 01       	movw	r30, r18
    7efa:	91 83       	std	Z+1, r25	; 0x01
    7efc:	80 83       	st	Z, r24
    7efe:	eb 2d       	mov	r30, r11
    7f00:	fa 2f       	mov	r31, r26
    7f02:	e1 14       	cp	r14, r1
    7f04:	f1 04       	cpc	r15, r1
    7f06:	31 f0       	breq	.+12     	; 0x7f14 <realloc+0x11e>
    7f08:	d7 01       	movw	r26, r14
    7f0a:	13 96       	adiw	r26, 0x03	; 3
    7f0c:	fc 93       	st	X, r31
    7f0e:	ee 93       	st	-X, r30
    7f10:	12 97       	sbiw	r26, 0x02	; 2
    7f12:	3e c0       	rjmp	.+124    	; 0x7f90 <realloc+0x19a>
    7f14:	f0 93 27 0d 	sts	0x0D27, r31	; 0x800d27 <__flp+0x1>
    7f18:	e0 93 26 0d 	sts	0x0D26, r30	; 0x800d26 <__flp>
    7f1c:	39 c0       	rjmp	.+114    	; 0x7f90 <realloc+0x19a>
    7f1e:	68 16       	cp	r6, r24
    7f20:	79 06       	cpc	r7, r25
    7f22:	08 f4       	brcc	.+2      	; 0x7f26 <realloc+0x130>
    7f24:	3c 01       	movw	r6, r24
    7f26:	7d 01       	movw	r14, r26
    7f28:	12 96       	adiw	r26, 0x02	; 2
    7f2a:	0d 90       	ld	r0, X+
    7f2c:	bc 91       	ld	r27, X
    7f2e:	a0 2d       	mov	r26, r0
    7f30:	b7 cf       	rjmp	.-146    	; 0x7ea0 <realloc+0xaa>
    7f32:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <__brkval>
    7f36:	90 91 25 0d 	lds	r25, 0x0D25	; 0x800d25 <__brkval+0x1>
    7f3a:	88 16       	cp	r8, r24
    7f3c:	99 06       	cpc	r9, r25
    7f3e:	e1 f4       	brne	.+56     	; 0x7f78 <realloc+0x182>
    7f40:	66 16       	cp	r6, r22
    7f42:	77 06       	cpc	r7, r23
    7f44:	c8 f4       	brcc	.+50     	; 0x7f78 <realloc+0x182>
    7f46:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    7f4a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    7f4e:	00 97       	sbiw	r24, 0x00	; 0
    7f50:	41 f4       	brne	.+16     	; 0x7f62 <realloc+0x16c>
    7f52:	8d b7       	in	r24, 0x3d	; 61
    7f54:	9e b7       	in	r25, 0x3e	; 62
    7f56:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    7f5a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    7f5e:	84 1b       	sub	r24, r20
    7f60:	95 0b       	sbc	r25, r21
    7f62:	e8 17       	cp	r30, r24
    7f64:	f9 07       	cpc	r31, r25
    7f66:	b0 f4       	brcc	.+44     	; 0x7f94 <realloc+0x19e>
    7f68:	f0 93 25 0d 	sts	0x0D25, r31	; 0x800d25 <__brkval+0x1>
    7f6c:	e0 93 24 0d 	sts	0x0D24, r30	; 0x800d24 <__brkval>
    7f70:	f9 01       	movw	r30, r18
    7f72:	71 83       	std	Z+1, r23	; 0x01
    7f74:	60 83       	st	Z, r22
    7f76:	0c c0       	rjmp	.+24     	; 0x7f90 <realloc+0x19a>
    7f78:	cb 01       	movw	r24, r22
    7f7a:	1c de       	rcall	.-968    	; 0x7bb4 <malloc>
    7f7c:	7c 01       	movw	r14, r24
    7f7e:	00 97       	sbiw	r24, 0x00	; 0
    7f80:	49 f0       	breq	.+18     	; 0x7f94 <realloc+0x19e>
    7f82:	a8 01       	movw	r20, r16
    7f84:	be 01       	movw	r22, r28
    7f86:	52 d0       	rcall	.+164    	; 0x802c <memcpy>
    7f88:	ce 01       	movw	r24, r28
    7f8a:	ac de       	rcall	.-680    	; 0x7ce4 <free>
    7f8c:	c7 01       	movw	r24, r14
    7f8e:	04 c0       	rjmp	.+8      	; 0x7f98 <realloc+0x1a2>
    7f90:	ce 01       	movw	r24, r28
    7f92:	02 c0       	rjmp	.+4      	; 0x7f98 <realloc+0x1a2>
    7f94:	80 e0       	ldi	r24, 0x00	; 0
    7f96:	90 e0       	ldi	r25, 0x00	; 0
    7f98:	df 91       	pop	r29
    7f9a:	cf 91       	pop	r28
    7f9c:	1f 91       	pop	r17
    7f9e:	0f 91       	pop	r16
    7fa0:	ff 90       	pop	r15
    7fa2:	ef 90       	pop	r14
    7fa4:	df 90       	pop	r13
    7fa6:	cf 90       	pop	r12
    7fa8:	bf 90       	pop	r11
    7faa:	af 90       	pop	r10
    7fac:	9f 90       	pop	r9
    7fae:	8f 90       	pop	r8
    7fb0:	7f 90       	pop	r7
    7fb2:	6f 90       	pop	r6
    7fb4:	08 95       	ret

00007fb6 <abort>:
    7fb6:	81 e0       	ldi	r24, 0x01	; 1
    7fb8:	90 e0       	ldi	r25, 0x00	; 0
    7fba:	f8 94       	cli
    7fbc:	5b c3       	rjmp	.+1718   	; 0x8674 <__do_global_dtors>

00007fbe <atol>:
    7fbe:	1f 93       	push	r17
    7fc0:	fc 01       	movw	r30, r24
    7fc2:	99 27       	eor	r25, r25
    7fc4:	88 27       	eor	r24, r24
    7fc6:	bc 01       	movw	r22, r24
    7fc8:	e8 94       	clt
    7fca:	11 91       	ld	r17, Z+
    7fcc:	10 32       	cpi	r17, 0x20	; 32
    7fce:	e9 f3       	breq	.-6      	; 0x7fca <atol+0xc>
    7fd0:	19 30       	cpi	r17, 0x09	; 9
    7fd2:	10 f0       	brcs	.+4      	; 0x7fd8 <atol+0x1a>
    7fd4:	1e 30       	cpi	r17, 0x0E	; 14
    7fd6:	c8 f3       	brcs	.-14     	; 0x7fca <atol+0xc>
    7fd8:	1b 32       	cpi	r17, 0x2B	; 43
    7fda:	49 f0       	breq	.+18     	; 0x7fee <atol+0x30>
    7fdc:	1d 32       	cpi	r17, 0x2D	; 45
    7fde:	41 f4       	brne	.+16     	; 0x7ff0 <atol+0x32>
    7fe0:	68 94       	set
    7fe2:	05 c0       	rjmp	.+10     	; 0x7fee <atol+0x30>
    7fe4:	6d d0       	rcall	.+218    	; 0x80c0 <__mulsi_const_10>
    7fe6:	61 0f       	add	r22, r17
    7fe8:	71 1d       	adc	r23, r1
    7fea:	81 1d       	adc	r24, r1
    7fec:	91 1d       	adc	r25, r1
    7fee:	11 91       	ld	r17, Z+
    7ff0:	10 53       	subi	r17, 0x30	; 48
    7ff2:	1a 30       	cpi	r17, 0x0A	; 10
    7ff4:	b8 f3       	brcs	.-18     	; 0x7fe4 <atol+0x26>
    7ff6:	3e f4       	brtc	.+14     	; 0x8006 <atol+0x48>
    7ff8:	90 95       	com	r25
    7ffa:	80 95       	com	r24
    7ffc:	70 95       	com	r23
    7ffe:	61 95       	neg	r22
    8000:	7f 4f       	sbci	r23, 0xFF	; 255
    8002:	8f 4f       	sbci	r24, 0xFF	; 255
    8004:	9f 4f       	sbci	r25, 0xFF	; 255
    8006:	1f 91       	pop	r17
    8008:	08 95       	ret

0000800a <isspace>:
    800a:	91 11       	cpse	r25, r1
    800c:	0a c3       	rjmp	.+1556   	; 0x8622 <__ctype_isfalse>
    800e:	80 32       	cpi	r24, 0x20	; 32
    8010:	19 f0       	breq	.+6      	; 0x8018 <isspace+0xe>
    8012:	89 50       	subi	r24, 0x09	; 9
    8014:	85 50       	subi	r24, 0x05	; 5
    8016:	d0 f7       	brcc	.-12     	; 0x800c <isspace+0x2>
    8018:	08 95       	ret

0000801a <memcpy_P>:
    801a:	fb 01       	movw	r30, r22
    801c:	dc 01       	movw	r26, r24
    801e:	02 c0       	rjmp	.+4      	; 0x8024 <memcpy_P+0xa>
    8020:	05 90       	lpm	r0, Z+
    8022:	0d 92       	st	X+, r0
    8024:	41 50       	subi	r20, 0x01	; 1
    8026:	50 40       	sbci	r21, 0x00	; 0
    8028:	d8 f7       	brcc	.-10     	; 0x8020 <memcpy_P+0x6>
    802a:	08 95       	ret

0000802c <memcpy>:
    802c:	fb 01       	movw	r30, r22
    802e:	dc 01       	movw	r26, r24
    8030:	02 c0       	rjmp	.+4      	; 0x8036 <memcpy+0xa>
    8032:	01 90       	ld	r0, Z+
    8034:	0d 92       	st	X+, r0
    8036:	41 50       	subi	r20, 0x01	; 1
    8038:	50 40       	sbci	r21, 0x00	; 0
    803a:	d8 f7       	brcc	.-10     	; 0x8032 <memcpy+0x6>
    803c:	08 95       	ret

0000803e <strcmp>:
    803e:	fb 01       	movw	r30, r22
    8040:	dc 01       	movw	r26, r24
    8042:	8d 91       	ld	r24, X+
    8044:	01 90       	ld	r0, Z+
    8046:	80 19       	sub	r24, r0
    8048:	01 10       	cpse	r0, r1
    804a:	d9 f3       	breq	.-10     	; 0x8042 <strcmp+0x4>
    804c:	99 0b       	sbc	r25, r25
    804e:	08 95       	ret

00008050 <strcpy>:
    8050:	fb 01       	movw	r30, r22
    8052:	dc 01       	movw	r26, r24
    8054:	01 90       	ld	r0, Z+
    8056:	0d 92       	st	X+, r0
    8058:	00 20       	and	r0, r0
    805a:	e1 f7       	brne	.-8      	; 0x8054 <strcpy+0x4>
    805c:	08 95       	ret

0000805e <strncmp>:
    805e:	fb 01       	movw	r30, r22
    8060:	dc 01       	movw	r26, r24
    8062:	41 50       	subi	r20, 0x01	; 1
    8064:	50 40       	sbci	r21, 0x00	; 0
    8066:	30 f0       	brcs	.+12     	; 0x8074 <strncmp+0x16>
    8068:	8d 91       	ld	r24, X+
    806a:	01 90       	ld	r0, Z+
    806c:	80 19       	sub	r24, r0
    806e:	19 f4       	brne	.+6      	; 0x8076 <strncmp+0x18>
    8070:	00 20       	and	r0, r0
    8072:	b9 f7       	brne	.-18     	; 0x8062 <strncmp+0x4>
    8074:	88 1b       	sub	r24, r24
    8076:	99 0b       	sbc	r25, r25
    8078:	08 95       	ret

0000807a <strncpy>:
    807a:	fb 01       	movw	r30, r22
    807c:	dc 01       	movw	r26, r24
    807e:	41 50       	subi	r20, 0x01	; 1
    8080:	50 40       	sbci	r21, 0x00	; 0
    8082:	48 f0       	brcs	.+18     	; 0x8096 <strncpy+0x1c>
    8084:	01 90       	ld	r0, Z+
    8086:	0d 92       	st	X+, r0
    8088:	00 20       	and	r0, r0
    808a:	c9 f7       	brne	.-14     	; 0x807e <strncpy+0x4>
    808c:	01 c0       	rjmp	.+2      	; 0x8090 <strncpy+0x16>
    808e:	1d 92       	st	X+, r1
    8090:	41 50       	subi	r20, 0x01	; 1
    8092:	50 40       	sbci	r21, 0x00	; 0
    8094:	e0 f7       	brcc	.-8      	; 0x808e <strncpy+0x14>
    8096:	08 95       	ret

00008098 <itoa>:
    8098:	45 32       	cpi	r20, 0x25	; 37
    809a:	51 05       	cpc	r21, r1
    809c:	18 f4       	brcc	.+6      	; 0x80a4 <itoa+0xc>
    809e:	42 30       	cpi	r20, 0x02	; 2
    80a0:	08 f0       	brcs	.+2      	; 0x80a4 <itoa+0xc>
    80a2:	04 c0       	rjmp	.+8      	; 0x80ac <__itoa_ncheck>
    80a4:	fb 01       	movw	r30, r22
    80a6:	10 82       	st	Z, r1
    80a8:	cb 01       	movw	r24, r22
    80aa:	08 95       	ret

000080ac <__itoa_ncheck>:
    80ac:	bb 27       	eor	r27, r27
    80ae:	4a 30       	cpi	r20, 0x0A	; 10
    80b0:	31 f4       	brne	.+12     	; 0x80be <__itoa_ncheck+0x12>
    80b2:	99 23       	and	r25, r25
    80b4:	22 f4       	brpl	.+8      	; 0x80be <__itoa_ncheck+0x12>
    80b6:	bd e2       	ldi	r27, 0x2D	; 45
    80b8:	90 95       	com	r25
    80ba:	81 95       	neg	r24
    80bc:	9f 4f       	sbci	r25, 0xFF	; 255
    80be:	4b c0       	rjmp	.+150    	; 0x8156 <__utoa_common>

000080c0 <__mulsi_const_10>:
    80c0:	59 2f       	mov	r21, r25
    80c2:	48 2f       	mov	r20, r24
    80c4:	37 2f       	mov	r19, r23
    80c6:	26 2f       	mov	r18, r22
    80c8:	66 0f       	add	r22, r22
    80ca:	77 1f       	adc	r23, r23
    80cc:	88 1f       	adc	r24, r24
    80ce:	99 1f       	adc	r25, r25
    80d0:	66 0f       	add	r22, r22
    80d2:	77 1f       	adc	r23, r23
    80d4:	88 1f       	adc	r24, r24
    80d6:	99 1f       	adc	r25, r25
    80d8:	62 0f       	add	r22, r18
    80da:	73 1f       	adc	r23, r19
    80dc:	84 1f       	adc	r24, r20
    80de:	95 1f       	adc	r25, r21
    80e0:	66 0f       	add	r22, r22
    80e2:	77 1f       	adc	r23, r23
    80e4:	88 1f       	adc	r24, r24
    80e6:	99 1f       	adc	r25, r25
    80e8:	08 95       	ret

000080ea <ultoa>:
    80ea:	25 32       	cpi	r18, 0x25	; 37
    80ec:	31 05       	cpc	r19, r1
    80ee:	18 f4       	brcc	.+6      	; 0x80f6 <ultoa+0xc>
    80f0:	22 30       	cpi	r18, 0x02	; 2
    80f2:	08 f0       	brcs	.+2      	; 0x80f6 <ultoa+0xc>
    80f4:	04 c0       	rjmp	.+8      	; 0x80fe <__ultoa_ncheck>
    80f6:	fa 01       	movw	r30, r20
    80f8:	10 82       	st	Z, r1
    80fa:	ca 01       	movw	r24, r20
    80fc:	08 95       	ret

000080fe <__ultoa_ncheck>:
    80fe:	bb 27       	eor	r27, r27

00008100 <__ultoa_common>:
    8100:	fa 01       	movw	r30, r20
    8102:	a6 2f       	mov	r26, r22
    8104:	62 17       	cp	r22, r18
    8106:	71 05       	cpc	r23, r1
    8108:	81 05       	cpc	r24, r1
    810a:	91 05       	cpc	r25, r1
    810c:	33 0b       	sbc	r19, r19
    810e:	30 fb       	bst	r19, 0
    8110:	66 f0       	brts	.+24     	; 0x812a <__ultoa_common+0x2a>
    8112:	aa 27       	eor	r26, r26
    8114:	66 0f       	add	r22, r22
    8116:	77 1f       	adc	r23, r23
    8118:	88 1f       	adc	r24, r24
    811a:	99 1f       	adc	r25, r25
    811c:	aa 1f       	adc	r26, r26
    811e:	a2 17       	cp	r26, r18
    8120:	10 f0       	brcs	.+4      	; 0x8126 <__ultoa_common+0x26>
    8122:	a2 1b       	sub	r26, r18
    8124:	63 95       	inc	r22
    8126:	38 50       	subi	r19, 0x08	; 8
    8128:	a9 f7       	brne	.-22     	; 0x8114 <__ultoa_common+0x14>
    812a:	a0 5d       	subi	r26, 0xD0	; 208
    812c:	aa 33       	cpi	r26, 0x3A	; 58
    812e:	08 f0       	brcs	.+2      	; 0x8132 <__ultoa_common+0x32>
    8130:	a9 5d       	subi	r26, 0xD9	; 217
    8132:	a1 93       	st	Z+, r26
    8134:	36 f7       	brtc	.-52     	; 0x8102 <__ultoa_common+0x2>
    8136:	b1 11       	cpse	r27, r1
    8138:	b1 93       	st	Z+, r27
    813a:	10 82       	st	Z, r1
    813c:	ca 01       	movw	r24, r20
    813e:	74 c2       	rjmp	.+1256   	; 0x8628 <strrev>

00008140 <utoa>:
    8140:	45 32       	cpi	r20, 0x25	; 37
    8142:	51 05       	cpc	r21, r1
    8144:	18 f4       	brcc	.+6      	; 0x814c <utoa+0xc>
    8146:	42 30       	cpi	r20, 0x02	; 2
    8148:	08 f0       	brcs	.+2      	; 0x814c <utoa+0xc>
    814a:	04 c0       	rjmp	.+8      	; 0x8154 <__utoa_ncheck>
    814c:	fb 01       	movw	r30, r22
    814e:	10 82       	st	Z, r1
    8150:	cb 01       	movw	r24, r22
    8152:	08 95       	ret

00008154 <__utoa_ncheck>:
    8154:	bb 27       	eor	r27, r27

00008156 <__utoa_common>:
    8156:	fb 01       	movw	r30, r22
    8158:	55 27       	eor	r21, r21
    815a:	aa 27       	eor	r26, r26
    815c:	88 0f       	add	r24, r24
    815e:	99 1f       	adc	r25, r25
    8160:	aa 1f       	adc	r26, r26
    8162:	a4 17       	cp	r26, r20
    8164:	10 f0       	brcs	.+4      	; 0x816a <__utoa_common+0x14>
    8166:	a4 1b       	sub	r26, r20
    8168:	83 95       	inc	r24
    816a:	50 51       	subi	r21, 0x10	; 16
    816c:	b9 f7       	brne	.-18     	; 0x815c <__utoa_common+0x6>
    816e:	a0 5d       	subi	r26, 0xD0	; 208
    8170:	aa 33       	cpi	r26, 0x3A	; 58
    8172:	08 f0       	brcs	.+2      	; 0x8176 <__utoa_common+0x20>
    8174:	a9 5d       	subi	r26, 0xD9	; 217
    8176:	a1 93       	st	Z+, r26
    8178:	00 97       	sbiw	r24, 0x00	; 0
    817a:	79 f7       	brne	.-34     	; 0x815a <__utoa_common+0x4>
    817c:	b1 11       	cpse	r27, r1
    817e:	b1 93       	st	Z+, r27
    8180:	11 92       	st	Z+, r1
    8182:	cb 01       	movw	r24, r22
    8184:	51 c2       	rjmp	.+1186   	; 0x8628 <strrev>

00008186 <dtoa_prf>:
    8186:	8f 92       	push	r8
    8188:	9f 92       	push	r9
    818a:	af 92       	push	r10
    818c:	bf 92       	push	r11
    818e:	cf 92       	push	r12
    8190:	df 92       	push	r13
    8192:	ef 92       	push	r14
    8194:	ff 92       	push	r15
    8196:	0f 93       	push	r16
    8198:	1f 93       	push	r17
    819a:	cf 93       	push	r28
    819c:	df 93       	push	r29
    819e:	cd b7       	in	r28, 0x3d	; 61
    81a0:	de b7       	in	r29, 0x3e	; 62
    81a2:	29 97       	sbiw	r28, 0x09	; 9
    81a4:	0f b6       	in	r0, 0x3f	; 63
    81a6:	f8 94       	cli
    81a8:	de bf       	out	0x3e, r29	; 62
    81aa:	0f be       	out	0x3f, r0	; 63
    81ac:	cd bf       	out	0x3d, r28	; 61
    81ae:	6a 01       	movw	r12, r20
    81b0:	12 2f       	mov	r17, r18
    81b2:	b0 2e       	mov	r11, r16
    81b4:	2b e3       	ldi	r18, 0x3B	; 59
    81b6:	20 17       	cp	r18, r16
    81b8:	20 f0       	brcs	.+8      	; 0x81c2 <dtoa_prf+0x3c>
    81ba:	ff 24       	eor	r15, r15
    81bc:	f3 94       	inc	r15
    81be:	f0 0e       	add	r15, r16
    81c0:	02 c0       	rjmp	.+4      	; 0x81c6 <dtoa_prf+0x40>
    81c2:	2c e3       	ldi	r18, 0x3C	; 60
    81c4:	f2 2e       	mov	r15, r18
    81c6:	0f 2d       	mov	r16, r15
    81c8:	27 e0       	ldi	r18, 0x07	; 7
    81ca:	ae 01       	movw	r20, r28
    81cc:	4f 5f       	subi	r20, 0xFF	; 255
    81ce:	5f 4f       	sbci	r21, 0xFF	; 255
    81d0:	50 d1       	rcall	.+672    	; 0x8472 <__ftoa_engine>
    81d2:	bc 01       	movw	r22, r24
    81d4:	49 81       	ldd	r20, Y+1	; 0x01
    81d6:	84 2f       	mov	r24, r20
    81d8:	89 70       	andi	r24, 0x09	; 9
    81da:	81 30       	cpi	r24, 0x01	; 1
    81dc:	31 f0       	breq	.+12     	; 0x81ea <dtoa_prf+0x64>
    81de:	e1 fc       	sbrc	r14, 1
    81e0:	06 c0       	rjmp	.+12     	; 0x81ee <dtoa_prf+0x68>
    81e2:	e0 fe       	sbrs	r14, 0
    81e4:	06 c0       	rjmp	.+12     	; 0x81f2 <dtoa_prf+0x6c>
    81e6:	90 e2       	ldi	r25, 0x20	; 32
    81e8:	05 c0       	rjmp	.+10     	; 0x81f4 <dtoa_prf+0x6e>
    81ea:	9d e2       	ldi	r25, 0x2D	; 45
    81ec:	03 c0       	rjmp	.+6      	; 0x81f4 <dtoa_prf+0x6e>
    81ee:	9b e2       	ldi	r25, 0x2B	; 43
    81f0:	01 c0       	rjmp	.+2      	; 0x81f4 <dtoa_prf+0x6e>
    81f2:	90 e0       	ldi	r25, 0x00	; 0
    81f4:	5e 2d       	mov	r21, r14
    81f6:	50 71       	andi	r21, 0x10	; 16
    81f8:	43 ff       	sbrs	r20, 3
    81fa:	3c c0       	rjmp	.+120    	; 0x8274 <dtoa_prf+0xee>
    81fc:	91 11       	cpse	r25, r1
    81fe:	02 c0       	rjmp	.+4      	; 0x8204 <dtoa_prf+0x7e>
    8200:	83 e0       	ldi	r24, 0x03	; 3
    8202:	01 c0       	rjmp	.+2      	; 0x8206 <dtoa_prf+0x80>
    8204:	84 e0       	ldi	r24, 0x04	; 4
    8206:	81 17       	cp	r24, r17
    8208:	18 f4       	brcc	.+6      	; 0x8210 <dtoa_prf+0x8a>
    820a:	21 2f       	mov	r18, r17
    820c:	28 1b       	sub	r18, r24
    820e:	01 c0       	rjmp	.+2      	; 0x8212 <dtoa_prf+0x8c>
    8210:	20 e0       	ldi	r18, 0x00	; 0
    8212:	51 11       	cpse	r21, r1
    8214:	0b c0       	rjmp	.+22     	; 0x822c <dtoa_prf+0xa6>
    8216:	f6 01       	movw	r30, r12
    8218:	82 2f       	mov	r24, r18
    821a:	30 e2       	ldi	r19, 0x20	; 32
    821c:	88 23       	and	r24, r24
    821e:	19 f0       	breq	.+6      	; 0x8226 <dtoa_prf+0xa0>
    8220:	31 93       	st	Z+, r19
    8222:	81 50       	subi	r24, 0x01	; 1
    8224:	fb cf       	rjmp	.-10     	; 0x821c <dtoa_prf+0x96>
    8226:	c2 0e       	add	r12, r18
    8228:	d1 1c       	adc	r13, r1
    822a:	20 e0       	ldi	r18, 0x00	; 0
    822c:	99 23       	and	r25, r25
    822e:	29 f0       	breq	.+10     	; 0x823a <dtoa_prf+0xb4>
    8230:	d6 01       	movw	r26, r12
    8232:	9c 93       	st	X, r25
    8234:	f6 01       	movw	r30, r12
    8236:	31 96       	adiw	r30, 0x01	; 1
    8238:	6f 01       	movw	r12, r30
    823a:	c6 01       	movw	r24, r12
    823c:	03 96       	adiw	r24, 0x03	; 3
    823e:	e2 fe       	sbrs	r14, 2
    8240:	0a c0       	rjmp	.+20     	; 0x8256 <dtoa_prf+0xd0>
    8242:	3e e4       	ldi	r19, 0x4E	; 78
    8244:	d6 01       	movw	r26, r12
    8246:	3c 93       	st	X, r19
    8248:	41 e4       	ldi	r20, 0x41	; 65
    824a:	11 96       	adiw	r26, 0x01	; 1
    824c:	4c 93       	st	X, r20
    824e:	11 97       	sbiw	r26, 0x01	; 1
    8250:	12 96       	adiw	r26, 0x02	; 2
    8252:	3c 93       	st	X, r19
    8254:	06 c0       	rjmp	.+12     	; 0x8262 <dtoa_prf+0xdc>
    8256:	3e e6       	ldi	r19, 0x6E	; 110
    8258:	f6 01       	movw	r30, r12
    825a:	30 83       	st	Z, r19
    825c:	41 e6       	ldi	r20, 0x61	; 97
    825e:	41 83       	std	Z+1, r20	; 0x01
    8260:	32 83       	std	Z+2, r19	; 0x02
    8262:	fc 01       	movw	r30, r24
    8264:	32 2f       	mov	r19, r18
    8266:	40 e2       	ldi	r20, 0x20	; 32
    8268:	33 23       	and	r19, r19
    826a:	09 f4       	brne	.+2      	; 0x826e <dtoa_prf+0xe8>
    826c:	42 c0       	rjmp	.+132    	; 0x82f2 <dtoa_prf+0x16c>
    826e:	41 93       	st	Z+, r20
    8270:	31 50       	subi	r19, 0x01	; 1
    8272:	fa cf       	rjmp	.-12     	; 0x8268 <dtoa_prf+0xe2>
    8274:	42 ff       	sbrs	r20, 2
    8276:	44 c0       	rjmp	.+136    	; 0x8300 <dtoa_prf+0x17a>
    8278:	91 11       	cpse	r25, r1
    827a:	02 c0       	rjmp	.+4      	; 0x8280 <dtoa_prf+0xfa>
    827c:	83 e0       	ldi	r24, 0x03	; 3
    827e:	01 c0       	rjmp	.+2      	; 0x8282 <dtoa_prf+0xfc>
    8280:	84 e0       	ldi	r24, 0x04	; 4
    8282:	81 17       	cp	r24, r17
    8284:	18 f4       	brcc	.+6      	; 0x828c <dtoa_prf+0x106>
    8286:	21 2f       	mov	r18, r17
    8288:	28 1b       	sub	r18, r24
    828a:	01 c0       	rjmp	.+2      	; 0x828e <dtoa_prf+0x108>
    828c:	20 e0       	ldi	r18, 0x00	; 0
    828e:	51 11       	cpse	r21, r1
    8290:	0b c0       	rjmp	.+22     	; 0x82a8 <dtoa_prf+0x122>
    8292:	f6 01       	movw	r30, r12
    8294:	82 2f       	mov	r24, r18
    8296:	30 e2       	ldi	r19, 0x20	; 32
    8298:	88 23       	and	r24, r24
    829a:	19 f0       	breq	.+6      	; 0x82a2 <dtoa_prf+0x11c>
    829c:	31 93       	st	Z+, r19
    829e:	81 50       	subi	r24, 0x01	; 1
    82a0:	fb cf       	rjmp	.-10     	; 0x8298 <dtoa_prf+0x112>
    82a2:	c2 0e       	add	r12, r18
    82a4:	d1 1c       	adc	r13, r1
    82a6:	20 e0       	ldi	r18, 0x00	; 0
    82a8:	99 23       	and	r25, r25
    82aa:	29 f0       	breq	.+10     	; 0x82b6 <dtoa_prf+0x130>
    82ac:	d6 01       	movw	r26, r12
    82ae:	9c 93       	st	X, r25
    82b0:	f6 01       	movw	r30, r12
    82b2:	31 96       	adiw	r30, 0x01	; 1
    82b4:	6f 01       	movw	r12, r30
    82b6:	c6 01       	movw	r24, r12
    82b8:	03 96       	adiw	r24, 0x03	; 3
    82ba:	e2 fe       	sbrs	r14, 2
    82bc:	0b c0       	rjmp	.+22     	; 0x82d4 <dtoa_prf+0x14e>
    82be:	39 e4       	ldi	r19, 0x49	; 73
    82c0:	d6 01       	movw	r26, r12
    82c2:	3c 93       	st	X, r19
    82c4:	3e e4       	ldi	r19, 0x4E	; 78
    82c6:	11 96       	adiw	r26, 0x01	; 1
    82c8:	3c 93       	st	X, r19
    82ca:	11 97       	sbiw	r26, 0x01	; 1
    82cc:	36 e4       	ldi	r19, 0x46	; 70
    82ce:	12 96       	adiw	r26, 0x02	; 2
    82d0:	3c 93       	st	X, r19
    82d2:	07 c0       	rjmp	.+14     	; 0x82e2 <dtoa_prf+0x15c>
    82d4:	39 e6       	ldi	r19, 0x69	; 105
    82d6:	f6 01       	movw	r30, r12
    82d8:	30 83       	st	Z, r19
    82da:	3e e6       	ldi	r19, 0x6E	; 110
    82dc:	31 83       	std	Z+1, r19	; 0x01
    82de:	36 e6       	ldi	r19, 0x66	; 102
    82e0:	32 83       	std	Z+2, r19	; 0x02
    82e2:	fc 01       	movw	r30, r24
    82e4:	32 2f       	mov	r19, r18
    82e6:	40 e2       	ldi	r20, 0x20	; 32
    82e8:	33 23       	and	r19, r19
    82ea:	19 f0       	breq	.+6      	; 0x82f2 <dtoa_prf+0x16c>
    82ec:	41 93       	st	Z+, r20
    82ee:	31 50       	subi	r19, 0x01	; 1
    82f0:	fb cf       	rjmp	.-10     	; 0x82e8 <dtoa_prf+0x162>
    82f2:	fc 01       	movw	r30, r24
    82f4:	e2 0f       	add	r30, r18
    82f6:	f1 1d       	adc	r31, r1
    82f8:	10 82       	st	Z, r1
    82fa:	8e ef       	ldi	r24, 0xFE	; 254
    82fc:	9f ef       	ldi	r25, 0xFF	; 255
    82fe:	a6 c0       	rjmp	.+332    	; 0x844c <dtoa_prf+0x2c6>
    8300:	21 e0       	ldi	r18, 0x01	; 1
    8302:	30 e0       	ldi	r19, 0x00	; 0
    8304:	91 11       	cpse	r25, r1
    8306:	02 c0       	rjmp	.+4      	; 0x830c <dtoa_prf+0x186>
    8308:	20 e0       	ldi	r18, 0x00	; 0
    830a:	30 e0       	ldi	r19, 0x00	; 0
    830c:	16 16       	cp	r1, r22
    830e:	17 06       	cpc	r1, r23
    8310:	1c f4       	brge	.+6      	; 0x8318 <dtoa_prf+0x192>
    8312:	fb 01       	movw	r30, r22
    8314:	31 96       	adiw	r30, 0x01	; 1
    8316:	02 c0       	rjmp	.+4      	; 0x831c <dtoa_prf+0x196>
    8318:	e1 e0       	ldi	r30, 0x01	; 1
    831a:	f0 e0       	ldi	r31, 0x00	; 0
    831c:	2e 0f       	add	r18, r30
    831e:	3f 1f       	adc	r19, r31
    8320:	bb 20       	and	r11, r11
    8322:	21 f0       	breq	.+8      	; 0x832c <dtoa_prf+0x1a6>
    8324:	eb 2d       	mov	r30, r11
    8326:	f0 e0       	ldi	r31, 0x00	; 0
    8328:	31 96       	adiw	r30, 0x01	; 1
    832a:	02 c0       	rjmp	.+4      	; 0x8330 <dtoa_prf+0x1aa>
    832c:	e0 e0       	ldi	r30, 0x00	; 0
    832e:	f0 e0       	ldi	r31, 0x00	; 0
    8330:	2e 0f       	add	r18, r30
    8332:	3f 1f       	adc	r19, r31
    8334:	e1 2f       	mov	r30, r17
    8336:	f0 e0       	ldi	r31, 0x00	; 0
    8338:	2e 17       	cp	r18, r30
    833a:	3f 07       	cpc	r19, r31
    833c:	1c f4       	brge	.+6      	; 0x8344 <dtoa_prf+0x1be>
    833e:	12 1b       	sub	r17, r18
    8340:	21 2f       	mov	r18, r17
    8342:	01 c0       	rjmp	.+2      	; 0x8346 <dtoa_prf+0x1c0>
    8344:	20 e0       	ldi	r18, 0x00	; 0
    8346:	8e 2d       	mov	r24, r14
    8348:	88 71       	andi	r24, 0x18	; 24
    834a:	59 f4       	brne	.+22     	; 0x8362 <dtoa_prf+0x1dc>
    834c:	f6 01       	movw	r30, r12
    834e:	82 2f       	mov	r24, r18
    8350:	30 e2       	ldi	r19, 0x20	; 32
    8352:	88 23       	and	r24, r24
    8354:	19 f0       	breq	.+6      	; 0x835c <dtoa_prf+0x1d6>
    8356:	31 93       	st	Z+, r19
    8358:	81 50       	subi	r24, 0x01	; 1
    835a:	fb cf       	rjmp	.-10     	; 0x8352 <dtoa_prf+0x1cc>
    835c:	c2 0e       	add	r12, r18
    835e:	d1 1c       	adc	r13, r1
    8360:	20 e0       	ldi	r18, 0x00	; 0
    8362:	99 23       	and	r25, r25
    8364:	29 f0       	breq	.+10     	; 0x8370 <dtoa_prf+0x1ea>
    8366:	d6 01       	movw	r26, r12
    8368:	9c 93       	st	X, r25
    836a:	f6 01       	movw	r30, r12
    836c:	31 96       	adiw	r30, 0x01	; 1
    836e:	6f 01       	movw	r12, r30
    8370:	51 11       	cpse	r21, r1
    8372:	0b c0       	rjmp	.+22     	; 0x838a <dtoa_prf+0x204>
    8374:	f6 01       	movw	r30, r12
    8376:	82 2f       	mov	r24, r18
    8378:	90 e3       	ldi	r25, 0x30	; 48
    837a:	88 23       	and	r24, r24
    837c:	19 f0       	breq	.+6      	; 0x8384 <dtoa_prf+0x1fe>
    837e:	91 93       	st	Z+, r25
    8380:	81 50       	subi	r24, 0x01	; 1
    8382:	fb cf       	rjmp	.-10     	; 0x837a <dtoa_prf+0x1f4>
    8384:	c2 0e       	add	r12, r18
    8386:	d1 1c       	adc	r13, r1
    8388:	20 e0       	ldi	r18, 0x00	; 0
    838a:	0f 2d       	mov	r16, r15
    838c:	06 0f       	add	r16, r22
    838e:	9a 81       	ldd	r25, Y+2	; 0x02
    8390:	34 2f       	mov	r19, r20
    8392:	30 71       	andi	r19, 0x10	; 16
    8394:	44 ff       	sbrs	r20, 4
    8396:	03 c0       	rjmp	.+6      	; 0x839e <dtoa_prf+0x218>
    8398:	91 33       	cpi	r25, 0x31	; 49
    839a:	09 f4       	brne	.+2      	; 0x839e <dtoa_prf+0x218>
    839c:	01 50       	subi	r16, 0x01	; 1
    839e:	10 16       	cp	r1, r16
    83a0:	24 f4       	brge	.+8      	; 0x83aa <dtoa_prf+0x224>
    83a2:	09 30       	cpi	r16, 0x09	; 9
    83a4:	18 f0       	brcs	.+6      	; 0x83ac <dtoa_prf+0x226>
    83a6:	08 e0       	ldi	r16, 0x08	; 8
    83a8:	01 c0       	rjmp	.+2      	; 0x83ac <dtoa_prf+0x226>
    83aa:	01 e0       	ldi	r16, 0x01	; 1
    83ac:	ab 01       	movw	r20, r22
    83ae:	77 ff       	sbrs	r23, 7
    83b0:	02 c0       	rjmp	.+4      	; 0x83b6 <dtoa_prf+0x230>
    83b2:	40 e0       	ldi	r20, 0x00	; 0
    83b4:	50 e0       	ldi	r21, 0x00	; 0
    83b6:	fb 01       	movw	r30, r22
    83b8:	e4 1b       	sub	r30, r20
    83ba:	f5 0b       	sbc	r31, r21
    83bc:	a1 e0       	ldi	r26, 0x01	; 1
    83be:	b0 e0       	ldi	r27, 0x00	; 0
    83c0:	ac 0f       	add	r26, r28
    83c2:	bd 1f       	adc	r27, r29
    83c4:	ea 0f       	add	r30, r26
    83c6:	fb 1f       	adc	r31, r27
    83c8:	8e e2       	ldi	r24, 0x2E	; 46
    83ca:	a8 2e       	mov	r10, r24
    83cc:	4b 01       	movw	r8, r22
    83ce:	80 1a       	sub	r8, r16
    83d0:	91 08       	sbc	r9, r1
    83d2:	0b 2d       	mov	r16, r11
    83d4:	10 e0       	ldi	r17, 0x00	; 0
    83d6:	11 95       	neg	r17
    83d8:	01 95       	neg	r16
    83da:	11 09       	sbc	r17, r1
    83dc:	4f 3f       	cpi	r20, 0xFF	; 255
    83de:	bf ef       	ldi	r27, 0xFF	; 255
    83e0:	5b 07       	cpc	r21, r27
    83e2:	21 f4       	brne	.+8      	; 0x83ec <dtoa_prf+0x266>
    83e4:	d6 01       	movw	r26, r12
    83e6:	ac 92       	st	X, r10
    83e8:	11 96       	adiw	r26, 0x01	; 1
    83ea:	6d 01       	movw	r12, r26
    83ec:	64 17       	cp	r22, r20
    83ee:	75 07       	cpc	r23, r21
    83f0:	2c f0       	brlt	.+10     	; 0x83fc <dtoa_prf+0x276>
    83f2:	84 16       	cp	r8, r20
    83f4:	95 06       	cpc	r9, r21
    83f6:	14 f4       	brge	.+4      	; 0x83fc <dtoa_prf+0x276>
    83f8:	81 81       	ldd	r24, Z+1	; 0x01
    83fa:	01 c0       	rjmp	.+2      	; 0x83fe <dtoa_prf+0x278>
    83fc:	80 e3       	ldi	r24, 0x30	; 48
    83fe:	41 50       	subi	r20, 0x01	; 1
    8400:	51 09       	sbc	r21, r1
    8402:	31 96       	adiw	r30, 0x01	; 1
    8404:	d6 01       	movw	r26, r12
    8406:	11 96       	adiw	r26, 0x01	; 1
    8408:	7d 01       	movw	r14, r26
    840a:	40 17       	cp	r20, r16
    840c:	51 07       	cpc	r21, r17
    840e:	24 f0       	brlt	.+8      	; 0x8418 <dtoa_prf+0x292>
    8410:	d6 01       	movw	r26, r12
    8412:	8c 93       	st	X, r24
    8414:	67 01       	movw	r12, r14
    8416:	e2 cf       	rjmp	.-60     	; 0x83dc <dtoa_prf+0x256>
    8418:	64 17       	cp	r22, r20
    841a:	75 07       	cpc	r23, r21
    841c:	39 f4       	brne	.+14     	; 0x842c <dtoa_prf+0x2a6>
    841e:	96 33       	cpi	r25, 0x36	; 54
    8420:	20 f4       	brcc	.+8      	; 0x842a <dtoa_prf+0x2a4>
    8422:	95 33       	cpi	r25, 0x35	; 53
    8424:	19 f4       	brne	.+6      	; 0x842c <dtoa_prf+0x2a6>
    8426:	31 11       	cpse	r19, r1
    8428:	01 c0       	rjmp	.+2      	; 0x842c <dtoa_prf+0x2a6>
    842a:	81 e3       	ldi	r24, 0x31	; 49
    842c:	f6 01       	movw	r30, r12
    842e:	80 83       	st	Z, r24
    8430:	f7 01       	movw	r30, r14
    8432:	82 2f       	mov	r24, r18
    8434:	90 e2       	ldi	r25, 0x20	; 32
    8436:	88 23       	and	r24, r24
    8438:	19 f0       	breq	.+6      	; 0x8440 <dtoa_prf+0x2ba>
    843a:	91 93       	st	Z+, r25
    843c:	81 50       	subi	r24, 0x01	; 1
    843e:	fb cf       	rjmp	.-10     	; 0x8436 <dtoa_prf+0x2b0>
    8440:	f7 01       	movw	r30, r14
    8442:	e2 0f       	add	r30, r18
    8444:	f1 1d       	adc	r31, r1
    8446:	10 82       	st	Z, r1
    8448:	80 e0       	ldi	r24, 0x00	; 0
    844a:	90 e0       	ldi	r25, 0x00	; 0
    844c:	29 96       	adiw	r28, 0x09	; 9
    844e:	0f b6       	in	r0, 0x3f	; 63
    8450:	f8 94       	cli
    8452:	de bf       	out	0x3e, r29	; 62
    8454:	0f be       	out	0x3f, r0	; 63
    8456:	cd bf       	out	0x3d, r28	; 61
    8458:	df 91       	pop	r29
    845a:	cf 91       	pop	r28
    845c:	1f 91       	pop	r17
    845e:	0f 91       	pop	r16
    8460:	ff 90       	pop	r15
    8462:	ef 90       	pop	r14
    8464:	df 90       	pop	r13
    8466:	cf 90       	pop	r12
    8468:	bf 90       	pop	r11
    846a:	af 90       	pop	r10
    846c:	9f 90       	pop	r9
    846e:	8f 90       	pop	r8
    8470:	08 95       	ret

00008472 <__ftoa_engine>:
    8472:	28 30       	cpi	r18, 0x08	; 8
    8474:	08 f0       	brcs	.+2      	; 0x8478 <__ftoa_engine+0x6>
    8476:	27 e0       	ldi	r18, 0x07	; 7
    8478:	33 27       	eor	r19, r19
    847a:	da 01       	movw	r26, r20
    847c:	99 0f       	add	r25, r25
    847e:	31 1d       	adc	r19, r1
    8480:	87 fd       	sbrc	r24, 7
    8482:	91 60       	ori	r25, 0x01	; 1
    8484:	00 96       	adiw	r24, 0x00	; 0
    8486:	61 05       	cpc	r22, r1
    8488:	71 05       	cpc	r23, r1
    848a:	39 f4       	brne	.+14     	; 0x849a <__ftoa_engine+0x28>
    848c:	32 60       	ori	r19, 0x02	; 2
    848e:	2e 5f       	subi	r18, 0xFE	; 254
    8490:	3d 93       	st	X+, r19
    8492:	30 e3       	ldi	r19, 0x30	; 48
    8494:	2a 95       	dec	r18
    8496:	e1 f7       	brne	.-8      	; 0x8490 <__ftoa_engine+0x1e>
    8498:	08 95       	ret
    849a:	9f 3f       	cpi	r25, 0xFF	; 255
    849c:	30 f0       	brcs	.+12     	; 0x84aa <__ftoa_engine+0x38>
    849e:	80 38       	cpi	r24, 0x80	; 128
    84a0:	71 05       	cpc	r23, r1
    84a2:	61 05       	cpc	r22, r1
    84a4:	09 f0       	breq	.+2      	; 0x84a8 <__ftoa_engine+0x36>
    84a6:	3c 5f       	subi	r19, 0xFC	; 252
    84a8:	3c 5f       	subi	r19, 0xFC	; 252
    84aa:	3d 93       	st	X+, r19
    84ac:	91 30       	cpi	r25, 0x01	; 1
    84ae:	08 f0       	brcs	.+2      	; 0x84b2 <__ftoa_engine+0x40>
    84b0:	80 68       	ori	r24, 0x80	; 128
    84b2:	91 1d       	adc	r25, r1
    84b4:	df 93       	push	r29
    84b6:	cf 93       	push	r28
    84b8:	1f 93       	push	r17
    84ba:	0f 93       	push	r16
    84bc:	ff 92       	push	r15
    84be:	ef 92       	push	r14
    84c0:	19 2f       	mov	r17, r25
    84c2:	98 7f       	andi	r25, 0xF8	; 248
    84c4:	96 95       	lsr	r25
    84c6:	e9 2f       	mov	r30, r25
    84c8:	96 95       	lsr	r25
    84ca:	96 95       	lsr	r25
    84cc:	e9 0f       	add	r30, r25
    84ce:	ff 27       	eor	r31, r31
    84d0:	ee 5d       	subi	r30, 0xDE	; 222
    84d2:	fe 4f       	sbci	r31, 0xFE	; 254
    84d4:	99 27       	eor	r25, r25
    84d6:	33 27       	eor	r19, r19
    84d8:	ee 24       	eor	r14, r14
    84da:	ff 24       	eor	r15, r15
    84dc:	a7 01       	movw	r20, r14
    84de:	e7 01       	movw	r28, r14
    84e0:	05 90       	lpm	r0, Z+
    84e2:	08 94       	sec
    84e4:	07 94       	ror	r0
    84e6:	28 f4       	brcc	.+10     	; 0x84f2 <__ftoa_engine+0x80>
    84e8:	36 0f       	add	r19, r22
    84ea:	e7 1e       	adc	r14, r23
    84ec:	f8 1e       	adc	r15, r24
    84ee:	49 1f       	adc	r20, r25
    84f0:	51 1d       	adc	r21, r1
    84f2:	66 0f       	add	r22, r22
    84f4:	77 1f       	adc	r23, r23
    84f6:	88 1f       	adc	r24, r24
    84f8:	99 1f       	adc	r25, r25
    84fa:	06 94       	lsr	r0
    84fc:	a1 f7       	brne	.-24     	; 0x84e6 <__ftoa_engine+0x74>
    84fe:	05 90       	lpm	r0, Z+
    8500:	07 94       	ror	r0
    8502:	28 f4       	brcc	.+10     	; 0x850e <__ftoa_engine+0x9c>
    8504:	e7 0e       	add	r14, r23
    8506:	f8 1e       	adc	r15, r24
    8508:	49 1f       	adc	r20, r25
    850a:	56 1f       	adc	r21, r22
    850c:	c1 1d       	adc	r28, r1
    850e:	77 0f       	add	r23, r23
    8510:	88 1f       	adc	r24, r24
    8512:	99 1f       	adc	r25, r25
    8514:	66 1f       	adc	r22, r22
    8516:	06 94       	lsr	r0
    8518:	a1 f7       	brne	.-24     	; 0x8502 <__ftoa_engine+0x90>
    851a:	05 90       	lpm	r0, Z+
    851c:	07 94       	ror	r0
    851e:	28 f4       	brcc	.+10     	; 0x852a <__ftoa_engine+0xb8>
    8520:	f8 0e       	add	r15, r24
    8522:	49 1f       	adc	r20, r25
    8524:	56 1f       	adc	r21, r22
    8526:	c7 1f       	adc	r28, r23
    8528:	d1 1d       	adc	r29, r1
    852a:	88 0f       	add	r24, r24
    852c:	99 1f       	adc	r25, r25
    852e:	66 1f       	adc	r22, r22
    8530:	77 1f       	adc	r23, r23
    8532:	06 94       	lsr	r0
    8534:	a1 f7       	brne	.-24     	; 0x851e <__ftoa_engine+0xac>
    8536:	05 90       	lpm	r0, Z+
    8538:	07 94       	ror	r0
    853a:	20 f4       	brcc	.+8      	; 0x8544 <__ftoa_engine+0xd2>
    853c:	49 0f       	add	r20, r25
    853e:	56 1f       	adc	r21, r22
    8540:	c7 1f       	adc	r28, r23
    8542:	d8 1f       	adc	r29, r24
    8544:	99 0f       	add	r25, r25
    8546:	66 1f       	adc	r22, r22
    8548:	77 1f       	adc	r23, r23
    854a:	88 1f       	adc	r24, r24
    854c:	06 94       	lsr	r0
    854e:	a9 f7       	brne	.-22     	; 0x853a <__ftoa_engine+0xc8>
    8550:	84 91       	lpm	r24, Z
    8552:	10 95       	com	r17
    8554:	17 70       	andi	r17, 0x07	; 7
    8556:	41 f0       	breq	.+16     	; 0x8568 <__ftoa_engine+0xf6>
    8558:	d6 95       	lsr	r29
    855a:	c7 95       	ror	r28
    855c:	57 95       	ror	r21
    855e:	47 95       	ror	r20
    8560:	f7 94       	ror	r15
    8562:	e7 94       	ror	r14
    8564:	1a 95       	dec	r17
    8566:	c1 f7       	brne	.-16     	; 0x8558 <__ftoa_engine+0xe6>
    8568:	e8 ec       	ldi	r30, 0xC8	; 200
    856a:	f0 e0       	ldi	r31, 0x00	; 0
    856c:	68 94       	set
    856e:	15 90       	lpm	r1, Z+
    8570:	15 91       	lpm	r17, Z+
    8572:	35 91       	lpm	r19, Z+
    8574:	65 91       	lpm	r22, Z+
    8576:	95 91       	lpm	r25, Z+
    8578:	05 90       	lpm	r0, Z+
    857a:	7f e2       	ldi	r23, 0x2F	; 47
    857c:	73 95       	inc	r23
    857e:	e1 18       	sub	r14, r1
    8580:	f1 0a       	sbc	r15, r17
    8582:	43 0b       	sbc	r20, r19
    8584:	56 0b       	sbc	r21, r22
    8586:	c9 0b       	sbc	r28, r25
    8588:	d0 09       	sbc	r29, r0
    858a:	c0 f7       	brcc	.-16     	; 0x857c <__ftoa_engine+0x10a>
    858c:	e1 0c       	add	r14, r1
    858e:	f1 1e       	adc	r15, r17
    8590:	43 1f       	adc	r20, r19
    8592:	56 1f       	adc	r21, r22
    8594:	c9 1f       	adc	r28, r25
    8596:	d0 1d       	adc	r29, r0
    8598:	7e f4       	brtc	.+30     	; 0x85b8 <__ftoa_engine+0x146>
    859a:	70 33       	cpi	r23, 0x30	; 48
    859c:	11 f4       	brne	.+4      	; 0x85a2 <__ftoa_engine+0x130>
    859e:	8a 95       	dec	r24
    85a0:	e6 cf       	rjmp	.-52     	; 0x856e <__ftoa_engine+0xfc>
    85a2:	e8 94       	clt
    85a4:	01 50       	subi	r16, 0x01	; 1
    85a6:	30 f0       	brcs	.+12     	; 0x85b4 <__ftoa_engine+0x142>
    85a8:	08 0f       	add	r16, r24
    85aa:	0a f4       	brpl	.+2      	; 0x85ae <__ftoa_engine+0x13c>
    85ac:	00 27       	eor	r16, r16
    85ae:	02 17       	cp	r16, r18
    85b0:	08 f4       	brcc	.+2      	; 0x85b4 <__ftoa_engine+0x142>
    85b2:	20 2f       	mov	r18, r16
    85b4:	23 95       	inc	r18
    85b6:	02 2f       	mov	r16, r18
    85b8:	7a 33       	cpi	r23, 0x3A	; 58
    85ba:	28 f0       	brcs	.+10     	; 0x85c6 <__ftoa_engine+0x154>
    85bc:	79 e3       	ldi	r23, 0x39	; 57
    85be:	7d 93       	st	X+, r23
    85c0:	2a 95       	dec	r18
    85c2:	e9 f7       	brne	.-6      	; 0x85be <__ftoa_engine+0x14c>
    85c4:	10 c0       	rjmp	.+32     	; 0x85e6 <__ftoa_engine+0x174>
    85c6:	7d 93       	st	X+, r23
    85c8:	2a 95       	dec	r18
    85ca:	89 f6       	brne	.-94     	; 0x856e <__ftoa_engine+0xfc>
    85cc:	06 94       	lsr	r0
    85ce:	97 95       	ror	r25
    85d0:	67 95       	ror	r22
    85d2:	37 95       	ror	r19
    85d4:	17 95       	ror	r17
    85d6:	17 94       	ror	r1
    85d8:	e1 18       	sub	r14, r1
    85da:	f1 0a       	sbc	r15, r17
    85dc:	43 0b       	sbc	r20, r19
    85de:	56 0b       	sbc	r21, r22
    85e0:	c9 0b       	sbc	r28, r25
    85e2:	d0 09       	sbc	r29, r0
    85e4:	98 f0       	brcs	.+38     	; 0x860c <__ftoa_engine+0x19a>
    85e6:	23 95       	inc	r18
    85e8:	7e 91       	ld	r23, -X
    85ea:	73 95       	inc	r23
    85ec:	7a 33       	cpi	r23, 0x3A	; 58
    85ee:	08 f0       	brcs	.+2      	; 0x85f2 <__ftoa_engine+0x180>
    85f0:	70 e3       	ldi	r23, 0x30	; 48
    85f2:	7c 93       	st	X, r23
    85f4:	20 13       	cpse	r18, r16
    85f6:	b8 f7       	brcc	.-18     	; 0x85e6 <__ftoa_engine+0x174>
    85f8:	7e 91       	ld	r23, -X
    85fa:	70 61       	ori	r23, 0x10	; 16
    85fc:	7d 93       	st	X+, r23
    85fe:	30 f0       	brcs	.+12     	; 0x860c <__ftoa_engine+0x19a>
    8600:	83 95       	inc	r24
    8602:	71 e3       	ldi	r23, 0x31	; 49
    8604:	7d 93       	st	X+, r23
    8606:	70 e3       	ldi	r23, 0x30	; 48
    8608:	2a 95       	dec	r18
    860a:	e1 f7       	brne	.-8      	; 0x8604 <__ftoa_engine+0x192>
    860c:	11 24       	eor	r1, r1
    860e:	ef 90       	pop	r14
    8610:	ff 90       	pop	r15
    8612:	0f 91       	pop	r16
    8614:	1f 91       	pop	r17
    8616:	cf 91       	pop	r28
    8618:	df 91       	pop	r29
    861a:	99 27       	eor	r25, r25
    861c:	87 fd       	sbrc	r24, 7
    861e:	90 95       	com	r25
    8620:	08 95       	ret

00008622 <__ctype_isfalse>:
    8622:	99 27       	eor	r25, r25
    8624:	88 27       	eor	r24, r24

00008626 <__ctype_istrue>:
    8626:	08 95       	ret

00008628 <strrev>:
    8628:	dc 01       	movw	r26, r24
    862a:	fc 01       	movw	r30, r24
    862c:	67 2f       	mov	r22, r23
    862e:	71 91       	ld	r23, Z+
    8630:	77 23       	and	r23, r23
    8632:	e1 f7       	brne	.-8      	; 0x862c <strrev+0x4>
    8634:	32 97       	sbiw	r30, 0x02	; 2
    8636:	04 c0       	rjmp	.+8      	; 0x8640 <strrev+0x18>
    8638:	7c 91       	ld	r23, X
    863a:	6d 93       	st	X+, r22
    863c:	70 83       	st	Z, r23
    863e:	62 91       	ld	r22, -Z
    8640:	ae 17       	cp	r26, r30
    8642:	bf 07       	cpc	r27, r31
    8644:	c8 f3       	brcs	.-14     	; 0x8638 <strrev+0x10>
    8646:	08 95       	ret

00008648 <eeprom_read_byte>:
    8648:	f9 99       	sbic	0x1f, 1	; 31
    864a:	fe cf       	rjmp	.-4      	; 0x8648 <eeprom_read_byte>
    864c:	92 bd       	out	0x22, r25	; 34
    864e:	81 bd       	out	0x21, r24	; 33
    8650:	f8 9a       	sbi	0x1f, 0	; 31
    8652:	99 27       	eor	r25, r25
    8654:	80 b5       	in	r24, 0x20	; 32
    8656:	08 95       	ret

00008658 <eeprom_write_byte>:
    8658:	26 2f       	mov	r18, r22

0000865a <eeprom_write_r18>:
    865a:	f9 99       	sbic	0x1f, 1	; 31
    865c:	fe cf       	rjmp	.-4      	; 0x865a <eeprom_write_r18>
    865e:	1f ba       	out	0x1f, r1	; 31
    8660:	92 bd       	out	0x22, r25	; 34
    8662:	81 bd       	out	0x21, r24	; 33
    8664:	20 bd       	out	0x20, r18	; 32
    8666:	0f b6       	in	r0, 0x3f	; 63
    8668:	f8 94       	cli
    866a:	fa 9a       	sbi	0x1f, 2	; 31
    866c:	f9 9a       	sbi	0x1f, 1	; 31
    866e:	0f be       	out	0x3f, r0	; 63
    8670:	01 96       	adiw	r24, 0x01	; 1
    8672:	08 95       	ret

00008674 <__do_global_dtors>:
    8674:	11 e0       	ldi	r17, 0x01	; 1
    8676:	c1 e6       	ldi	r28, 0x61	; 97
    8678:	d1 e0       	ldi	r29, 0x01	; 1
    867a:	03 c0       	rjmp	.+6      	; 0x8682 <__do_global_dtors+0xe>
    867c:	fe 01       	movw	r30, r28
    867e:	59 da       	rcall	.-2894   	; 0x7b32 <__tablejump2__>
    8680:	21 96       	adiw	r28, 0x01	; 1
    8682:	c2 36       	cpi	r28, 0x62	; 98
    8684:	d1 07       	cpc	r29, r17
    8686:	d1 f7       	brne	.-12     	; 0x867c <__do_global_dtors+0x8>
    8688:	f8 94       	cli

0000868a <__stop_program>:
    868a:	ff cf       	rjmp	.-2      	; 0x868a <__stop_program>
