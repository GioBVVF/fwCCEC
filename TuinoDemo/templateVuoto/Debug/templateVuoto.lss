
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000988  00800100  00008d84  00008e18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008d84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000047f  00800a88  00800a88  000097a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000097a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000097d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001568  00000000  00000000  00009810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0004643f  00000000  00000000  0000ad78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000084ca  00000000  00000000  000511b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000dfc5  00000000  00000000  00059681  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005128  00000000  00000000  00067648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009abf  00000000  00000000  0006c770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001e4f6  00000000  00000000  0007622f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000017a0  00000000  00000000  00094725  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__dtors_end>
       2:	00 00       	nop
       4:	8e c1       	rjmp	.+796    	; 0x322 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c1       	rjmp	.+792    	; 0x322 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c1       	rjmp	.+788    	; 0x322 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__vector_4>
      14:	86 c1       	rjmp	.+780    	; 0x322 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c1       	rjmp	.+776    	; 0x322 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__vector_7>
      20:	80 c1       	rjmp	.+768    	; 0x322 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c1       	rjmp	.+764    	; 0x322 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c1       	rjmp	.+760    	; 0x322 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c1       	rjmp	.+756    	; 0x322 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c1       	rjmp	.+752    	; 0x322 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c1       	rjmp	.+748    	; 0x322 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c1       	rjmp	.+744    	; 0x322 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c1       	rjmp	.+740    	; 0x322 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 bd 3a 	jmp	0x757a	; 0x757a <__vector_16>
      44:	6e c1       	rjmp	.+732    	; 0x322 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 94 38 	jmp	0x7128	; 0x7128 <__vector_18>
      4c:	0c 94 c6 38 	jmp	0x718c	; 0x718c <__vector_19>
      50:	68 c1       	rjmp	.+720    	; 0x322 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c1       	rjmp	.+716    	; 0x322 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c1       	rjmp	.+712    	; 0x322 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c1       	rjmp	.+708    	; 0x322 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c1       	rjmp	.+704    	; 0x322 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c1       	rjmp	.+700    	; 0x322 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 e1 34 	jmp	0x69c2	; 0x69c2 <__vector_26>
      6c:	5a c1       	rjmp	.+692    	; 0x322 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c1       	rjmp	.+688    	; 0x322 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c1       	rjmp	.+684    	; 0x322 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c1       	rjmp	.+680    	; 0x322 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c1       	rjmp	.+676    	; 0x322 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c1       	rjmp	.+672    	; 0x322 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c1       	rjmp	.+668    	; 0x322 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c1       	rjmp	.+664    	; 0x322 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ee 11       	cpse	r30, r14
      8e:	14 12       	cpse	r1, r20
      90:	3d 12       	cpse	r3, r29
      92:	65 12       	cpse	r6, r21
      94:	b7 12       	cpse	r11, r23
      96:	eb 12       	cpse	r14, r27
      98:	77 13       	cpse	r23, r23
      9a:	c0 13       	cpse	r28, r16
      9c:	f8 13       	cpse	r31, r24
      9e:	5b 14       	cp	r5, r11
      a0:	f5 14       	cp	r15, r5
      a2:	c5 1c       	adc	r12, r5
      a4:	dc 1c       	adc	r13, r12
      a6:	dc 1c       	adc	r13, r12
      a8:	d9 1c       	adc	r13, r9
      aa:	dc 1c       	adc	r13, r12
      ac:	c3 1c       	adc	r12, r3
      ae:	dc 1c       	adc	r13, r12
      b0:	dc 1c       	adc	r13, r12
      b2:	dc 1c       	adc	r13, r12
      b4:	b7 1c       	adc	r11, r7
      b6:	dc 1c       	adc	r13, r12
      b8:	dc 1c       	adc	r13, r12
      ba:	cc 1c       	adc	r12, r12
      bc:	d7 1c       	adc	r13, r7
      be:	d5 1c       	adc	r13, r5
      c0:	dc 1c       	adc	r13, r12
      c2:	dc 1c       	adc	r13, r12
      c4:	dc 1c       	adc	r13, r12
      c6:	d3 1c       	adc	r13, r3

000000c8 <__trampolines_end>:
      c8:	00 40       	sbci	r16, 0x00	; 0
      ca:	7a 10       	cpse	r7, r10
      cc:	f3 5a       	subi	r31, 0xA3	; 163
      ce:	00 a0       	ldd	r0, Z+32	; 0x20
      d0:	72 4e       	sbci	r23, 0xE2	; 226
      d2:	18 09       	sbc	r17, r8
      d4:	00 10       	cpse	r0, r0
      d6:	a5 d4       	rcall	.+2378   	; 0xa22 <_Z12FlashpowerUpv+0x1a>
      d8:	e8 00       	.word	0x00e8	; ????
      da:	00 e8       	ldi	r16, 0x80	; 128
      dc:	76 48       	sbci	r23, 0x86	; 134
      de:	17 00       	.word	0x0017	; ????
      e0:	00 e4       	ldi	r16, 0x40	; 64
      e2:	0b 54       	subi	r16, 0x4B	; 75
      e4:	02 00       	.word	0x0002	; ????
      e6:	00 ca       	rjmp	.-3072   	; 0xfffff4e8 <__eeprom_end+0xff7ef4e8>
      e8:	9a 3b       	cpi	r25, 0xBA	; 186
      ea:	00 00       	nop
      ec:	00 e1       	ldi	r16, 0x10	; 16
      ee:	f5 05       	cpc	r31, r5
      f0:	00 00       	nop
      f2:	80 96       	adiw	r24, 0x20	; 32
      f4:	98 00       	.word	0x0098	; ????
      f6:	00 00       	nop
      f8:	40 42       	sbci	r20, 0x20	; 32
      fa:	0f 00       	.word	0x000f	; ????
      fc:	00 00       	nop
      fe:	a0 86       	std	Z+8, r10	; 0x08
     100:	01 00       	.word	0x0001	; ????
     102:	00 00       	nop
     104:	10 27       	eor	r17, r16
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	e8 03       	fmulsu	r22, r16
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	64 00       	.word	0x0064	; ????
     112:	00 00       	nop
     114:	00 00       	nop
     116:	0a 00       	.word	0x000a	; ????
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	01 00       	.word	0x0001	; ????
     11e:	00 00       	nop
     120:	00 00       	nop
     122:	2c 76       	andi	r18, 0x6C	; 108
     124:	d8 88       	ldd	r13, Y+16	; 0x10
     126:	dc 67       	ori	r29, 0x7C	; 124
     128:	4f 08       	sbc	r4, r15
     12a:	23 df       	rcall	.-442    	; 0xffffff72 <__eeprom_end+0xff7eff72>
     12c:	c1 df       	rcall	.-126    	; 0xb0 <__SREG__+0x71>
     12e:	ae 59       	subi	r26, 0x9E	; 158
     130:	e1 b1       	in	r30, 0x01	; 1
     132:	b7 96       	adiw	r30, 0x27	; 39
     134:	e5 e3       	ldi	r30, 0x35	; 53
     136:	e4 53       	subi	r30, 0x34	; 52
     138:	c6 3a       	cpi	r28, 0xA6	; 166
     13a:	e6 51       	subi	r30, 0x16	; 22
     13c:	99 76       	andi	r25, 0x69	; 105
     13e:	96 e8       	ldi	r25, 0x86	; 134
     140:	e6 c2       	rjmp	.+1484   	; 0x70e <_Z15erogazioniSaverm6String+0x10a>
     142:	84 26       	eor	r8, r20
     144:	eb 89       	ldd	r30, Y+19	; 0x13
     146:	8c 9b       	sbis	0x11, 4	; 17
     148:	62 ed       	ldi	r22, 0xD2	; 210
     14a:	40 7c       	andi	r20, 0xC0	; 192
     14c:	6f fc       	.word	0xfc6f	; ????
     14e:	ef bc       	out	0x2f, r14	; 47
     150:	9c 9f       	mul	r25, r28
     152:	40 f2       	brcs	.-112    	; 0xe4 <__trampolines_end+0x1c>
     154:	ba a5       	ldd	r27, Y+42	; 0x2a
     156:	6f a5       	ldd	r22, Y+47	; 0x2f
     158:	f4 90       	lpm	r15, Z
     15a:	05 5a       	subi	r16, 0xA5	; 165
     15c:	2a f7       	brpl	.-54     	; 0x128 <__trampolines_end+0x60>
     15e:	5c 93       	st	X, r21
     160:	6b 6c       	ori	r22, 0xCB	; 203
     162:	f9 67       	ori	r31, 0x79	; 121
     164:	6d c1       	rjmp	.+730    	; 0x440 <_Z4passb+0xc>
     166:	1b fc       	.word	0xfc1b	; ????
     168:	e0 e4       	ldi	r30, 0x40	; 64
     16a:	0d 47       	sbci	r16, 0x7D	; 125
     16c:	fe f5       	brtc	.+126    	; 0x1ec <_ZZ5setupE3__c+0x15>
     16e:	20 e6       	ldi	r18, 0x60	; 96
     170:	b5 00       	.word	0x00b5	; ????
     172:	d0 ed       	ldi	r29, 0xD0	; 208
     174:	90 2e       	mov	r9, r16
     176:	03 00       	.word	0x0003	; ????
     178:	94 35       	cpi	r25, 0x54	; 84
     17a:	77 05       	cpc	r23, r7
     17c:	00 80       	ld	r0, Z
     17e:	84 1e       	adc	r8, r20
     180:	08 00       	.word	0x0008	; ????
     182:	00 20       	and	r0, r0
     184:	4e 0a       	sbc	r4, r30
     186:	00 00       	nop
     188:	00 c8       	rjmp	.-4096   	; 0xfffff18a <__eeprom_end+0xff7ef18a>
     18a:	0c 33       	cpi	r16, 0x3C	; 60
     18c:	33 33       	cpi	r19, 0x33	; 51
     18e:	33 0f       	add	r19, r19
     190:	98 6e       	ori	r25, 0xE8	; 232
     192:	12 83       	std	Z+2, r17	; 0x02
     194:	11 41       	sbci	r17, 0x11	; 17
     196:	ef 8d       	ldd	r30, Y+31	; 0x1f
     198:	21 14       	cp	r2, r1
     19a:	89 3b       	cpi	r24, 0xB9	; 185
     19c:	e6 55       	subi	r30, 0x56	; 86
     19e:	16 cf       	rjmp	.-468    	; 0xffffffcc <__eeprom_end+0xff7effcc>
     1a0:	fe e6       	ldi	r31, 0x6E	; 110
     1a2:	db 18       	sub	r13, r11
     1a4:	d1 84       	ldd	r13, Z+9	; 0x09
     1a6:	4b 38       	cpi	r20, 0x8B	; 139
     1a8:	1b f7       	brvc	.-58     	; 0x170 <__trampolines_end+0xa8>
     1aa:	7c 1d       	adc	r23, r12
     1ac:	90 1d       	adc	r25, r0
     1ae:	a4 bb       	out	0x14, r26	; 20
     1b0:	e4 24       	eor	r14, r4
     1b2:	20 32       	cpi	r18, 0x20	; 32
     1b4:	84 72       	andi	r24, 0x24	; 36
     1b6:	5e 22       	and	r5, r30
     1b8:	81 00       	.word	0x0081	; ????
     1ba:	c9 f1       	breq	.+114    	; 0x22e <_ZZN11Diagnostics15_printErrorCodeEvE3__c+0x5>
     1bc:	24 ec       	ldi	r18, 0xC4	; 196
     1be:	a1 e5       	ldi	r26, 0x51	; 81
     1c0:	3d 27       	eor	r19, r29

000001c2 <_ZZ5setupE3__c_0>:
     1c2:	44 53 33 32 33 31 4d 20 69 6e 69 74 69 61 6c 69     DS3231M initiali
     1d2:	7a 65 64 2e 00                                      zed..

000001d7 <_ZZ5setupE3__c>:
     1d7:	55 6e 61 62 6c 65 20 74 6f 20 66 69 6e 64 20 44     Unable to find D
     1e7:	53 33 32 33 31 4d 4d 2e 20 43 68 65 63 6b 69 6e     S3231MM. Checkin
     1f7:	67 20 61 67 61 69 6e 20 69 6e 20 33 73 2e 00        g again in 3s..

00000206 <_ZZN13DS3231M_Class6adjustEvE3__c>:
     206:	41 70 72 20 32 31 20 32 30 32 30 00                 Apr 21 2020.

00000212 <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     212:	31 36 3a 32 30 3a 30 39 00                          16:20:09.

0000021b <_ZL11daysInMonth>:
     21b:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000227 <_ZZN11Diagnostics15_printErrorCodeEvE3__c_0>:
     227:	30 00                                               0.

00000229 <_ZZN11Diagnostics15_printErrorCodeEvE3__c>:
     229:	45 72 72 6f 72 20 63 6f 64 65 3a 20 30 78 00        Error code: 0x.

00000238 <digital_pin_to_timer_PGM>:
     238:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     254:	00 00 00 01                                         ....

00000258 <digital_pin_to_bit_mask_PGM>:
     258:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     268:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

00000278 <digital_pin_to_port_PGM>:
     278:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     288:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

00000298 <port_to_input_PGM>:
     298:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002a2 <port_to_output_PGM>:
     2a2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002ac <port_to_mode_PGM>:
     2ac:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002b6 <__ctors_start>:
     2b6:	9f 0a       	sbc	r9, r31
     2b8:	4b 1f       	adc	r20, r27
     2ba:	a3 1f       	adc	r26, r19
     2bc:	9b 22       	and	r9, r27
     2be:	97 24       	eor	r9, r7
     2c0:	b2 25       	eor	r27, r2
     2c2:	84 27       	eor	r24, r20
     2c4:	8f 27       	eor	r24, r31
     2c6:	4e 2b       	or	r20, r30
     2c8:	71 37       	cpi	r23, 0x71	; 113
     2ca:	f4 38       	cpi	r31, 0x84	; 132

000002cc <__ctors_end>:
     2cc:	91 0b       	sbc	r25, r17

000002ce <__dtors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d0 e4       	ldi	r29, 0x40	; 64
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61

000002da <__do_copy_data>:
     2da:	1a e0       	ldi	r17, 0x0A	; 10
     2dc:	a0 e0       	ldi	r26, 0x00	; 0
     2de:	b1 e0       	ldi	r27, 0x01	; 1
     2e0:	e4 e8       	ldi	r30, 0x84	; 132
     2e2:	fd e8       	ldi	r31, 0x8D	; 141
     2e4:	00 e0       	ldi	r16, 0x00	; 0
     2e6:	0b bf       	out	0x3b, r16	; 59
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <__do_copy_data+0x14>
     2ea:	07 90       	elpm	r0, Z+
     2ec:	0d 92       	st	X+, r0
     2ee:	a8 38       	cpi	r26, 0x88	; 136
     2f0:	b1 07       	cpc	r27, r17
     2f2:	d9 f7       	brne	.-10     	; 0x2ea <__do_copy_data+0x10>

000002f4 <__do_clear_bss>:
     2f4:	2f e0       	ldi	r18, 0x0F	; 15
     2f6:	a8 e8       	ldi	r26, 0x88	; 136
     2f8:	ba e0       	ldi	r27, 0x0A	; 10
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <.do_clear_bss_start>

000002fc <.do_clear_bss_loop>:
     2fc:	1d 92       	st	X+, r1

000002fe <.do_clear_bss_start>:
     2fe:	a7 30       	cpi	r26, 0x07	; 7
     300:	b2 07       	cpc	r27, r18
     302:	e1 f7       	brne	.-8      	; 0x2fc <.do_clear_bss_loop>

00000304 <__do_global_ctors>:
     304:	11 e0       	ldi	r17, 0x01	; 1
     306:	c6 e6       	ldi	r28, 0x66	; 102
     308:	d1 e0       	ldi	r29, 0x01	; 1
     30a:	04 c0       	rjmp	.+8      	; 0x314 <__do_global_ctors+0x10>
     30c:	21 97       	sbiw	r28, 0x01	; 1
     30e:	fe 01       	movw	r30, r28
     310:	0e 94 5e 40 	call	0x80bc	; 0x80bc <__tablejump2__>
     314:	cb 35       	cpi	r28, 0x5B	; 91
     316:	d1 07       	cpc	r29, r17
     318:	c9 f7       	brne	.-14     	; 0x30c <__do_global_ctors+0x8>
     31a:	0e 94 8c 39 	call	0x7318	; 0x7318 <main>
     31e:	0c 94 b6 46 	jmp	0x8d6c	; 0x8d6c <__do_global_dtors>

00000322 <__bad_interrupt>:
     322:	6e ce       	rjmp	.-804    	; 0x0 <__vectors>

00000324 <_ZL11disable_ETHv>:
      if (rispostaGetTimbrature == "200"){ valida = 1; }
      _delay_ms(80);
    }
  }
  return valida;
}
     324:	44 9a       	sbi	0x08, 4	; 8
     326:	08 95       	ret

00000328 <_ZN7TwoWire5writeEi>:
     328:	dc 01       	movw	r26, r24
     32a:	ed 91       	ld	r30, X+
     32c:	fc 91       	ld	r31, X
     32e:	01 90       	ld	r0, Z+
     330:	f0 81       	ld	r31, Z
     332:	e0 2d       	mov	r30, r0
     334:	09 94       	ijmp

00000336 <_Z14initIOExpanderv>:
     336:	87 e0       	ldi	r24, 0x07	; 7
     338:	9e e0       	ldi	r25, 0x0E	; 14
     33a:	0e 94 db 36 	call	0x6db6	; 0x6db6 <_ZN7TwoWire5beginEv>
     33e:	60 e2       	ldi	r22, 0x20	; 32
     340:	87 e0       	ldi	r24, 0x07	; 7
     342:	9e e0       	ldi	r25, 0x0E	; 14
     344:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	70 e0       	ldi	r23, 0x00	; 0
     34c:	87 e0       	ldi	r24, 0x07	; 7
     34e:	9e e0       	ldi	r25, 0x0E	; 14
     350:	eb df       	rcall	.-42     	; 0x328 <_ZN7TwoWire5writeEi>
     352:	63 ec       	ldi	r22, 0xC3	; 195
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	87 e0       	ldi	r24, 0x07	; 7
     358:	9e e0       	ldi	r25, 0x0E	; 14
     35a:	e6 df       	rcall	.-52     	; 0x328 <_ZN7TwoWire5writeEi>
     35c:	87 e0       	ldi	r24, 0x07	; 7
     35e:	9e e0       	ldi	r25, 0x0E	; 14
     360:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
     364:	60 e2       	ldi	r22, 0x20	; 32
     366:	87 e0       	ldi	r24, 0x07	; 7
     368:	9e e0       	ldi	r25, 0x0E	; 14
     36a:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>
     36e:	62 e0       	ldi	r22, 0x02	; 2
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	87 e0       	ldi	r24, 0x07	; 7
     374:	9e e0       	ldi	r25, 0x0E	; 14
     376:	d8 df       	rcall	.-80     	; 0x328 <_ZN7TwoWire5writeEi>
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	87 e0       	ldi	r24, 0x07	; 7
     37e:	9e e0       	ldi	r25, 0x0E	; 14
     380:	d3 df       	rcall	.-90     	; 0x328 <_ZN7TwoWire5writeEi>
     382:	87 e0       	ldi	r24, 0x07	; 7
     384:	9e e0       	ldi	r25, 0x0E	; 14
     386:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
     38a:	8f e3       	ldi	r24, 0x3F	; 63
     38c:	9c e9       	ldi	r25, 0x9C	; 156
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <_Z14initIOExpanderv+0x58>
     392:	00 c0       	rjmp	.+0      	; 0x394 <_Z14initIOExpanderv+0x5e>
     394:	00 00       	nop
     396:	60 e2       	ldi	r22, 0x20	; 32
     398:	87 e0       	ldi	r24, 0x07	; 7
     39a:	9e e0       	ldi	r25, 0x0E	; 14
     39c:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>
     3a0:	63 e0       	ldi	r22, 0x03	; 3
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	87 e0       	ldi	r24, 0x07	; 7
     3a6:	9e e0       	ldi	r25, 0x0E	; 14
     3a8:	bf df       	rcall	.-130    	; 0x328 <_ZN7TwoWire5writeEi>
     3aa:	6c e3       	ldi	r22, 0x3C	; 60
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	87 e0       	ldi	r24, 0x07	; 7
     3b0:	9e e0       	ldi	r25, 0x0E	; 14
     3b2:	ba df       	rcall	.-140    	; 0x328 <_ZN7TwoWire5writeEi>
     3b4:	87 e0       	ldi	r24, 0x07	; 7
     3b6:	9e e0       	ldi	r25, 0x0E	; 14
     3b8:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
     3bc:	8f e3       	ldi	r24, 0x3F	; 63
     3be:	9c e9       	ldi	r25, 0x9C	; 156
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <_Z14initIOExpanderv+0x8a>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <_Z14initIOExpanderv+0x90>
     3c6:	00 00       	nop
     3c8:	60 e2       	ldi	r22, 0x20	; 32
     3ca:	87 e0       	ldi	r24, 0x07	; 7
     3cc:	9e e0       	ldi	r25, 0x0E	; 14
     3ce:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	87 e0       	ldi	r24, 0x07	; 7
     3d8:	9e e0       	ldi	r25, 0x0E	; 14
     3da:	a6 df       	rcall	.-180    	; 0x328 <_ZN7TwoWire5writeEi>
     3dc:	87 e0       	ldi	r24, 0x07	; 7
     3de:	9e e0       	ldi	r25, 0x0E	; 14
     3e0:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
     3e4:	87 e0       	ldi	r24, 0x07	; 7
     3e6:	9e e0       	ldi	r25, 0x0E	; 14
     3e8:	0c 94 db 36 	jmp	0x6db6	; 0x6db6 <_ZN7TwoWire5beginEv>

000003ec <_Z9printLinev>:
     3ec:	cf 93       	push	r28
     3ee:	8d e5       	ldi	r24, 0x5D	; 93
     3f0:	9e e0       	ldi	r25, 0x0E	; 14
     3f2:	0e 94 11 3a 	call	0x7422	; 0x7422 <_ZN5Print7printlnEv>
     3f6:	cd e7       	ldi	r28, 0x7D	; 125
     3f8:	68 eb       	ldi	r22, 0xB8	; 184
     3fa:	71 e0       	ldi	r23, 0x01	; 1
     3fc:	8d e5       	ldi	r24, 0x5D	; 93
     3fe:	9e e0       	ldi	r25, 0x0E	; 14
     400:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     404:	c1 50       	subi	r28, 0x01	; 1
     406:	c1 f7       	brne	.-16     	; 0x3f8 <_Z9printLinev+0xc>
     408:	8d e5       	ldi	r24, 0x5D	; 93
     40a:	9e e0       	ldi	r25, 0x0E	; 14
     40c:	cf 91       	pop	r28
     40e:	0c 94 11 3a 	jmp	0x7422	; 0x7422 <_ZN5Print7printlnEv>

00000412 <_Z8printTabh>:
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	d8 2f       	mov	r29, r24
     418:	c0 e0       	ldi	r28, 0x00	; 0
     41a:	cd 17       	cp	r28, r29
     41c:	41 f0       	breq	.+16     	; 0x42e <_Z8printTabh+0x1c>
     41e:	6a eb       	ldi	r22, 0xBA	; 186
     420:	71 e0       	ldi	r23, 0x01	; 1
     422:	8d e5       	ldi	r24, 0x5D	; 93
     424:	9e e0       	ldi	r25, 0x0E	; 14
     426:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     42a:	cf 5f       	subi	r28, 0xFF	; 255
     42c:	f6 cf       	rjmp	.-20     	; 0x41a <_Z8printTabh+0x8>
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <_Z4passb>:
     434:	cf 93       	push	r28
     436:	c8 2f       	mov	r28, r24
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	eb df       	rcall	.-42     	; 0x412 <_Z8printTabh>
     43c:	6c eb       	ldi	r22, 0xBC	; 188
     43e:	71 e0       	ldi	r23, 0x01	; 1
     440:	8d e5       	ldi	r24, 0x5D	; 93
     442:	9e e0       	ldi	r25, 0x0E	; 14
     444:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     448:	cc 23       	and	r28, r28
     44a:	19 f0       	breq	.+6      	; 0x452 <_Z4passb+0x1e>
     44c:	60 ec       	ldi	r22, 0xC0	; 192
     44e:	71 e0       	ldi	r23, 0x01	; 1
     450:	02 c0       	rjmp	.+4      	; 0x456 <_Z4passb+0x22>
     452:	65 ec       	ldi	r22, 0xC5	; 197
     454:	71 e0       	ldi	r23, 0x01	; 1
     456:	8d e5       	ldi	r24, 0x5D	; 93
     458:	9e e0       	ldi	r25, 0x0E	; 14
     45a:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	cf 91       	pop	r28
     462:	d7 cf       	rjmp	.-82     	; 0x412 <_Z8printTabh>

00000464 <_Z13printUniqueIDv>:
     464:	4f 92       	push	r4
     466:	5f 92       	push	r5
     468:	6f 92       	push	r6
     46a:	7f 92       	push	r7
     46c:	8f 92       	push	r8
     46e:	9f 92       	push	r9
     470:	af 92       	push	r10
     472:	bf 92       	push	r11
     474:	cf 92       	push	r12
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	88 e8       	ldi	r24, 0x88	; 136
     486:	9a e0       	ldi	r25, 0x0A	; 10
     488:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <_ZN8SPIFlash11getUniqueIDEv>
     48c:	49 01       	movw	r8, r18
     48e:	d4 2f       	mov	r29, r20
     490:	c5 2f       	mov	r28, r21
     492:	2b 01       	movw	r4, r22
     494:	3c 01       	movw	r6, r24
     496:	a0 e0       	ldi	r26, 0x00	; 0
     498:	0e 94 90 41 	call	0x8320	; 0x8320 <__cmpdi2_s8>
     49c:	09 f4       	brne	.+2      	; 0x4a0 <_Z13printUniqueIDv+0x3c>
     49e:	60 c0       	rjmp	.+192    	; 0x560 <_Z13printUniqueIDv+0xfc>
     4a0:	6a ec       	ldi	r22, 0xCA	; 202
     4a2:	71 e0       	ldi	r23, 0x01	; 1
     4a4:	8d e5       	ldi	r24, 0x5D	; 93
     4a6:	9e e0       	ldi	r25, 0x0E	; 14
     4a8:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     4ac:	80 e4       	ldi	r24, 0x40	; 64
     4ae:	a8 2e       	mov	r10, r24
     4b0:	92 e4       	ldi	r25, 0x42	; 66
     4b2:	b9 2e       	mov	r11, r25
     4b4:	2f e0       	ldi	r18, 0x0F	; 15
     4b6:	c2 2e       	mov	r12, r18
     4b8:	d1 2c       	mov	r13, r1
     4ba:	e1 2c       	mov	r14, r1
     4bc:	f1 2c       	mov	r15, r1
     4be:	00 e0       	ldi	r16, 0x00	; 0
     4c0:	10 e0       	ldi	r17, 0x00	; 0
     4c2:	94 01       	movw	r18, r8
     4c4:	4d 2f       	mov	r20, r29
     4c6:	5c 2f       	mov	r21, r28
     4c8:	b2 01       	movw	r22, r4
     4ca:	c3 01       	movw	r24, r6
     4cc:	0e 94 82 40 	call	0x8104	; 0x8104 <__divdi3>
     4d0:	f2 2f       	mov	r31, r18
     4d2:	e3 2f       	mov	r30, r19
     4d4:	2a e0       	ldi	r18, 0x0A	; 10
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	cf 01       	movw	r24, r30
     4da:	ba 01       	movw	r22, r20
     4dc:	49 2f       	mov	r20, r25
     4de:	58 2f       	mov	r21, r24
     4e0:	8d e5       	ldi	r24, 0x5D	; 93
     4e2:	9e e0       	ldi	r25, 0x0E	; 14
     4e4:	0e 94 8b 3a 	call	0x7516	; 0x7516 <_ZN5Print5printEmi>
     4e8:	94 01       	movw	r18, r8
     4ea:	4d 2f       	mov	r20, r29
     4ec:	5c 2f       	mov	r21, r28
     4ee:	b2 01       	movw	r22, r4
     4f0:	c3 01       	movw	r24, r6
     4f2:	0e 94 80 40 	call	0x8100	; 0x8100 <__moddi3>
     4f6:	f2 2f       	mov	r31, r18
     4f8:	e3 2f       	mov	r30, r19
     4fa:	2a e0       	ldi	r18, 0x0A	; 10
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	cf 01       	movw	r24, r30
     500:	ba 01       	movw	r22, r20
     502:	49 2f       	mov	r20, r25
     504:	58 2f       	mov	r21, r24
     506:	8d e5       	ldi	r24, 0x5D	; 93
     508:	9e e0       	ldi	r25, 0x0E	; 14
     50a:	0e 94 8b 3a 	call	0x7516	; 0x7516 <_ZN5Print5printEmi>
     50e:	66 ed       	ldi	r22, 0xD6	; 214
     510:	71 e0       	ldi	r23, 0x01	; 1
     512:	8d e5       	ldi	r24, 0x5D	; 93
     514:	9e e0       	ldi	r25, 0x0E	; 14
     516:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     51a:	6f e1       	ldi	r22, 0x1F	; 31
     51c:	73 e0       	ldi	r23, 0x03	; 3
     51e:	8d e5       	ldi	r24, 0x5D	; 93
     520:	9e e0       	ldi	r25, 0x0E	; 14
     522:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     526:	94 01       	movw	r18, r8
     528:	4d 2f       	mov	r20, r29
     52a:	5c 2f       	mov	r21, r28
     52c:	b2 01       	movw	r22, r4
     52e:	c3 01       	movw	r24, r6
     530:	00 e2       	ldi	r16, 0x20	; 32
     532:	0e 94 69 41 	call	0x82d2	; 0x82d2 <__ashrdi3>
     536:	f2 2f       	mov	r31, r18
     538:	e3 2f       	mov	r30, r19
     53a:	20 e1       	ldi	r18, 0x10	; 16
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	cf 01       	movw	r24, r30
     540:	ba 01       	movw	r22, r20
     542:	49 2f       	mov	r20, r25
     544:	58 2f       	mov	r21, r24
     546:	8d e5       	ldi	r24, 0x5D	; 93
     548:	9e e0       	ldi	r25, 0x0E	; 14
     54a:	0e 94 8b 3a 	call	0x7516	; 0x7516 <_ZN5Print5printEmi>
     54e:	20 e1       	ldi	r18, 0x10	; 16
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	a4 01       	movw	r20, r8
     554:	6d 2f       	mov	r22, r29
     556:	7c 2f       	mov	r23, r28
     558:	8d e5       	ldi	r24, 0x5D	; 93
     55a:	9e e0       	ldi	r25, 0x0E	; 14
     55c:	0e 94 8b 3a 	call	0x7516	; 0x7516 <_ZN5Print5printEmi>
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	df 90       	pop	r13
     56e:	cf 90       	pop	r12
     570:	bf 90       	pop	r11
     572:	af 90       	pop	r10
     574:	9f 90       	pop	r9
     576:	8f 90       	pop	r8
     578:	7f 90       	pop	r7
     57a:	6f 90       	pop	r6
     57c:	5f 90       	pop	r5
     57e:	4f 90       	pop	r4
     580:	35 cf       	rjmp	.-406    	; 0x3ec <_Z9printLinev>

00000582 <_Z16FlasheraseSectorm>:
     582:	cf 92       	push	r12
     584:	df 92       	push	r13
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	6b 01       	movw	r12, r22
     58c:	7c 01       	movw	r14, r24
     58e:	83 e0       	ldi	r24, 0x03	; 3
     590:	40 df       	rcall	.-384    	; 0x412 <_Z8printTabh>
     592:	69 ed       	ldi	r22, 0xD9	; 217
     594:	71 e0       	ldi	r23, 0x01	; 1
     596:	8d e5       	ldi	r24, 0x5D	; 93
     598:	9e e0       	ldi	r25, 0x0E	; 14
     59a:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	38 df       	rcall	.-400    	; 0x412 <_Z8printTabh>
     5a2:	b7 01       	movw	r22, r14
     5a4:	a6 01       	movw	r20, r12
     5a6:	88 e8       	ldi	r24, 0x88	; 136
     5a8:	9a e0       	ldi	r25, 0x0A	; 10
     5aa:	0e 94 50 2f 	call	0x5ea0	; 0x5ea0 <_ZN8SPIFlash11eraseSectorEm>
     5ae:	88 23       	and	r24, r24
     5b0:	19 f1       	breq	.+70     	; 0x5f8 <_Z16FlasheraseSectorm+0x76>
     5b2:	88 e8       	ldi	r24, 0x88	; 136
     5b4:	9a e0       	ldi	r25, 0x0A	; 10
     5b6:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <_ZN8SPIFlash15functionRunTimeEv>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	3b df       	rcall	.-394    	; 0x434 <_Z4passb>
     5be:	63 ee       	ldi	r22, 0xE3	; 227
     5c0:	71 e0       	ldi	r23, 0x01	; 1
     5c2:	8d e5       	ldi	r24, 0x5D	; 93
     5c4:	9e e0       	ldi	r25, 0x0E	; 14
     5c6:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     5ca:	65 ef       	ldi	r22, 0xF5	; 245
     5cc:	71 e0       	ldi	r23, 0x01	; 1
     5ce:	8d e5       	ldi	r24, 0x5D	; 93
     5d0:	9e e0       	ldi	r25, 0x0E	; 14
     5d2:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	1c df       	rcall	.-456    	; 0x412 <_Z8printTabh>
     5da:	08 df       	rcall	.-496    	; 0x3ec <_Z9printLinev>
     5dc:	2f ef       	ldi	r18, 0xFF	; 255
     5de:	83 ed       	ldi	r24, 0xD3	; 211
     5e0:	90 e3       	ldi	r25, 0x30	; 48
     5e2:	21 50       	subi	r18, 0x01	; 1
     5e4:	80 40       	sbci	r24, 0x00	; 0
     5e6:	90 40       	sbci	r25, 0x00	; 0
     5e8:	e1 f7       	brne	.-8      	; 0x5e2 <_Z16FlasheraseSectorm+0x60>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <_Z16FlasheraseSectorm+0x6a>
     5ec:	00 00       	nop
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	df 90       	pop	r13
     5f4:	cf 90       	pop	r12
     5f6:	08 95       	ret
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	df 90       	pop	r13
     600:	cf 90       	pop	r12
     602:	18 cf       	rjmp	.-464    	; 0x434 <_Z4passb>

00000604 <_Z15erogazioniSaverm6String>:
     604:	2f 92       	push	r2
     606:	3f 92       	push	r3
     608:	4f 92       	push	r4
     60a:	5f 92       	push	r5
     60c:	6f 92       	push	r6
     60e:	7f 92       	push	r7
     610:	8f 92       	push	r8
     612:	9f 92       	push	r9
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	cc 5b       	subi	r28, 0xBC	; 188
     62e:	d1 09       	sbc	r29, r1
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	4b 01       	movw	r8, r22
     63c:	5c 01       	movw	r10, r24
     63e:	8a 01       	movw	r16, r20
     640:	7e 01       	movw	r14, r28
     642:	23 e0       	ldi	r18, 0x03	; 3
     644:	e2 0e       	add	r14, r18
     646:	f1 1c       	adc	r15, r1
     648:	ce 01       	movw	r24, r28
     64a:	89 54       	subi	r24, 0x49	; 73
     64c:	9f 4f       	sbci	r25, 0xFF	; 255
     64e:	c9 54       	subi	r28, 0x49	; 73
     650:	df 4f       	sbci	r29, 0xFF	; 255
     652:	99 83       	std	Y+1, r25	; 0x01
     654:	88 83       	st	Y, r24
     656:	c7 5b       	subi	r28, 0xB7	; 183
     658:	d0 40       	sbci	r29, 0x00	; 0
     65a:	6b eb       	ldi	r22, 0xBB	; 187
     65c:	71 e0       	ldi	r23, 0x01	; 1
     65e:	c7 01       	movw	r24, r14
     660:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
     664:	96 e0       	ldi	r25, 0x06	; 6
     666:	e9 0e       	add	r14, r25
     668:	f1 1c       	adc	r15, r1
     66a:	c9 54       	subi	r28, 0x49	; 73
     66c:	df 4f       	sbci	r29, 0xFF	; 255
     66e:	e8 81       	ld	r30, Y
     670:	f9 81       	ldd	r31, Y+1	; 0x01
     672:	c7 5b       	subi	r28, 0xB7	; 183
     674:	d0 40       	sbci	r29, 0x00	; 0
     676:	ee 16       	cp	r14, r30
     678:	ff 06       	cpc	r15, r31
     67a:	79 f7       	brne	.-34     	; 0x65a <_Z15erogazioniSaverm6String+0x56>
     67c:	8e e1       	ldi	r24, 0x1E	; 30
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	9a 83       	std	Y+2, r25	; 0x02
     682:	89 83       	std	Y+1, r24	; 0x01
     684:	b8 01       	movw	r22, r16
     686:	ce 01       	movw	r24, r28
     688:	09 96       	adiw	r24, 0x09	; 9
     68a:	0e 94 31 3d 	call	0x7a62	; 0x7a62 <_ZN6StringaSERKS_>
     68e:	8f e1       	ldi	r24, 0x1F	; 31
     690:	9e e4       	ldi	r25, 0x4E	; 78
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	f1 f7       	brne	.-4      	; 0x692 <_Z15erogazioniSaverm6String+0x8e>
     696:	00 c0       	rjmp	.+0      	; 0x698 <_Z15erogazioniSaverm6String+0x94>
     698:	00 00       	nop
     69a:	c5 01       	movw	r24, r10
     69c:	b4 01       	movw	r22, r8
     69e:	71 df       	rcall	.-286    	; 0x582 <_Z16FlasheraseSectorm>
     6a0:	ef e1       	ldi	r30, 0x1F	; 31
     6a2:	fe e4       	ldi	r31, 0x4E	; 78
     6a4:	31 97       	sbiw	r30, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <_Z15erogazioniSaverm6String+0xa0>
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <_Z15erogazioniSaverm6String+0xa6>
     6aa:	00 00       	nop
     6ac:	16 eb       	ldi	r17, 0xB6	; 182
     6ae:	e1 2e       	mov	r14, r17
     6b0:	f1 2c       	mov	r15, r1
     6b2:	00 e0       	ldi	r16, 0x00	; 0
     6b4:	10 e0       	ldi	r17, 0x00	; 0
     6b6:	a5 01       	movw	r20, r10
     6b8:	94 01       	movw	r18, r8
     6ba:	62 e0       	ldi	r22, 0x02	; 2
     6bc:	88 e8       	ldi	r24, 0x88	; 136
     6be:	9a e0       	ldi	r25, 0x0A	; 10
     6c0:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <_ZN8SPIFlash5_prepEhmm>
     6c4:	88 23       	and	r24, r24
     6c6:	09 f4       	brne	.+2      	; 0x6ca <_Z15erogazioniSaverm6String+0xc6>
     6c8:	2c c1       	rjmp	.+600    	; 0x922 <_Z15erogazioniSaverm6String+0x31e>
     6ca:	80 91 e2 0a 	lds	r24, 0x0AE2	; 0x800ae2 <__data_end+0x5a>
     6ce:	00 e0       	ldi	r16, 0x00	; 0
     6d0:	11 e0       	ldi	r17, 0x01	; 1
     6d2:	08 1b       	sub	r16, r24
     6d4:	11 09       	sbc	r17, r1
     6d6:	80 91 96 0a 	lds	r24, 0x0A96	; 0x800a96 <__data_end+0xe>
     6da:	81 11       	cpse	r24, r1
     6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <_Z15erogazioniSaverm6String+0xe2>
     6de:	88 e8       	ldi	r24, 0x88	; 136
     6e0:	9a e0       	ldi	r25, 0x0A	; 10
     6e2:	0e 94 63 30 	call	0x60c6	; 0x60c6 <_ZN8SPIFlash12_startSPIBusEv>
     6e6:	2c 98       	cbi	0x05, 4	; 5
     6e8:	42 e0       	ldi	r20, 0x02	; 2
     6ea:	60 91 a5 0a 	lds	r22, 0x0AA5	; 0x800aa5 <__data_end+0x1d>
     6ee:	88 e8       	ldi	r24, 0x88	; 136
     6f0:	9a e0       	ldi	r25, 0x0A	; 10
     6f2:	0e 94 ee 30 	call	0x61dc	; 0x61dc <_ZN8SPIFlash9_nextByteEch>
     6f6:	88 e8       	ldi	r24, 0x88	; 136
     6f8:	9a e0       	ldi	r25, 0x0A	; 10
     6fa:	0e 94 46 30 	call	0x608c	; 0x608c <_ZN8SPIFlash16_transferAddressEv>
     6fe:	07 3b       	cpi	r16, 0xB7	; 183
     700:	11 05       	cpc	r17, r1
     702:	b8 f0       	brcs	.+46     	; 0x732 <_Z15erogazioniSaverm6String+0x12e>
     704:	8e 01       	movw	r16, r28
     706:	0f 5f       	subi	r16, 0xFF	; 255
     708:	1f 4f       	sbci	r17, 0xFF	; 255
     70a:	f8 01       	movw	r30, r16
     70c:	41 91       	ld	r20, Z+
     70e:	8f 01       	movw	r16, r30
     710:	60 91 a5 0a 	lds	r22, 0x0AA5	; 0x800aa5 <__data_end+0x1d>
     714:	88 e8       	ldi	r24, 0x88	; 136
     716:	9a e0       	ldi	r25, 0x0A	; 10
     718:	0e 94 ee 30 	call	0x61dc	; 0x61dc <_ZN8SPIFlash9_nextByteEch>
     71c:	c9 54       	subi	r28, 0x49	; 73
     71e:	df 4f       	sbci	r29, 0xFF	; 255
     720:	28 81       	ld	r18, Y
     722:	39 81       	ldd	r19, Y+1	; 0x01
     724:	c7 5b       	subi	r28, 0xB7	; 183
     726:	d0 40       	sbci	r29, 0x00	; 0
     728:	20 17       	cp	r18, r16
     72a:	31 07       	cpc	r19, r17
     72c:	71 f7       	brne	.-36     	; 0x70a <_Z15erogazioniSaverm6String+0x106>
     72e:	2c 9a       	sbi	0x05, 4	; 5
     730:	b7 c0       	rjmp	.+366    	; 0x8a0 <_Z15erogazioniSaverm6String+0x29c>
     732:	21 2c       	mov	r2, r1
     734:	31 2c       	mov	r3, r1
     736:	86 eb       	ldi	r24, 0xB6	; 182
     738:	c8 2e       	mov	r12, r24
     73a:	d1 2c       	mov	r13, r1
     73c:	e1 2c       	mov	r14, r1
     73e:	f1 2c       	mov	r15, r1
     740:	ce 01       	movw	r24, r28
     742:	01 96       	adiw	r24, 0x01	; 1
     744:	c7 54       	subi	r28, 0x47	; 71
     746:	df 4f       	sbci	r29, 0xFF	; 255
     748:	99 83       	std	Y+1, r25	; 0x01
     74a:	88 83       	st	Y, r24
     74c:	c9 5b       	subi	r28, 0xB9	; 185
     74e:	d0 40       	sbci	r29, 0x00	; 0
     750:	28 01       	movw	r4, r16
     752:	61 2c       	mov	r6, r1
     754:	71 2c       	mov	r7, r1
     756:	c4 14       	cp	r12, r4
     758:	d5 04       	cpc	r13, r5
     75a:	e6 04       	cpc	r14, r6
     75c:	f7 04       	cpc	r15, r7
     75e:	10 f4       	brcc	.+4      	; 0x764 <_Z15erogazioniSaverm6String+0x160>
     760:	26 01       	movw	r4, r12
     762:	37 01       	movw	r6, r14
     764:	80 91 e2 0a 	lds	r24, 0x0AE2	; 0x800ae2 <__data_end+0x5a>
     768:	81 11       	cpse	r24, r1
     76a:	0c c0       	rjmp	.+24     	; 0x784 <_Z15erogazioniSaverm6String+0x180>
     76c:	2c 98       	cbi	0x05, 4	; 5
     76e:	42 e0       	ldi	r20, 0x02	; 2
     770:	60 91 a5 0a 	lds	r22, 0x0AA5	; 0x800aa5 <__data_end+0x1d>
     774:	88 e8       	ldi	r24, 0x88	; 136
     776:	9a e0       	ldi	r25, 0x0A	; 10
     778:	0e 94 ee 30 	call	0x61dc	; 0x61dc <_ZN8SPIFlash9_nextByteEch>
     77c:	88 e8       	ldi	r24, 0x88	; 136
     77e:	9a e0       	ldi	r25, 0x0A	; 10
     780:	0e 94 46 30 	call	0x608c	; 0x608c <_ZN8SPIFlash16_transferAddressEv>
     784:	c7 54       	subi	r28, 0x47	; 71
     786:	df 4f       	sbci	r29, 0xFF	; 255
     788:	e8 81       	ld	r30, Y
     78a:	f9 81       	ldd	r31, Y+1	; 0x01
     78c:	c9 5b       	subi	r28, 0xB9	; 185
     78e:	d0 40       	sbci	r29, 0x00	; 0
     790:	c5 54       	subi	r28, 0x45	; 69
     792:	df 4f       	sbci	r29, 0xFF	; 255
     794:	f9 83       	std	Y+1, r31	; 0x01
     796:	e8 83       	st	Y, r30
     798:	cb 5b       	subi	r28, 0xBB	; 187
     79a:	d0 40       	sbci	r29, 0x00	; 0
     79c:	8f 01       	movw	r16, r30
     79e:	c7 54       	subi	r28, 0x47	; 71
     7a0:	df 4f       	sbci	r29, 0xFF	; 255
     7a2:	19 83       	std	Y+1, r17	; 0x01
     7a4:	08 83       	st	Y, r16
     7a6:	c9 5b       	subi	r28, 0xB9	; 185
     7a8:	d0 40       	sbci	r29, 0x00	; 0
     7aa:	c8 01       	movw	r24, r16
     7ac:	c5 54       	subi	r28, 0x45	; 69
     7ae:	df 4f       	sbci	r29, 0xFF	; 255
     7b0:	28 81       	ld	r18, Y
     7b2:	39 81       	ldd	r19, Y+1	; 0x01
     7b4:	cb 5b       	subi	r28, 0xBB	; 187
     7b6:	d0 40       	sbci	r29, 0x00	; 0
     7b8:	82 1b       	sub	r24, r18
     7ba:	93 0b       	sbc	r25, r19
     7bc:	a0 e0       	ldi	r26, 0x00	; 0
     7be:	b0 e0       	ldi	r27, 0x00	; 0
     7c0:	84 15       	cp	r24, r4
     7c2:	95 05       	cpc	r25, r5
     7c4:	a6 05       	cpc	r26, r6
     7c6:	b7 05       	cpc	r27, r7
     7c8:	80 f4       	brcc	.+32     	; 0x7ea <_Z15erogazioniSaverm6String+0x1e6>
     7ca:	0f 5f       	subi	r16, 0xFF	; 255
     7cc:	1f 4f       	sbci	r17, 0xFF	; 255
     7ce:	c7 54       	subi	r28, 0x47	; 71
     7d0:	df 4f       	sbci	r29, 0xFF	; 255
     7d2:	e8 81       	ld	r30, Y
     7d4:	f9 81       	ldd	r31, Y+1	; 0x01
     7d6:	c9 5b       	subi	r28, 0xB9	; 185
     7d8:	d0 40       	sbci	r29, 0x00	; 0
     7da:	40 81       	ld	r20, Z
     7dc:	60 91 a5 0a 	lds	r22, 0x0AA5	; 0x800aa5 <__data_end+0x1d>
     7e0:	88 e8       	ldi	r24, 0x88	; 136
     7e2:	9a e0       	ldi	r25, 0x0A	; 10
     7e4:	0e 94 ee 30 	call	0x61dc	; 0x61dc <_ZN8SPIFlash9_nextByteEch>
     7e8:	da cf       	rjmp	.-76     	; 0x79e <_Z15erogazioniSaverm6String+0x19a>
     7ea:	2c 9a       	sbi	0x05, 4	; 5
     7ec:	80 91 e6 0a 	lds	r24, 0x0AE6	; 0x800ae6 <__data_end+0x5e>
     7f0:	90 91 e7 0a 	lds	r25, 0x0AE7	; 0x800ae7 <__data_end+0x5f>
     7f4:	a0 91 e8 0a 	lds	r26, 0x0AE8	; 0x800ae8 <__data_end+0x60>
     7f8:	b0 91 e9 0a 	lds	r27, 0x0AE9	; 0x800ae9 <__data_end+0x61>
     7fc:	00 97       	sbiw	r24, 0x00	; 0
     7fe:	a1 05       	cpc	r26, r1
     800:	b1 05       	cpc	r27, r1
     802:	a9 f4       	brne	.+42     	; 0x82e <_Z15erogazioniSaverm6String+0x22a>
     804:	80 91 e2 0a 	lds	r24, 0x0AE2	; 0x800ae2 <__data_end+0x5a>
     808:	90 91 e3 0a 	lds	r25, 0x0AE3	; 0x800ae3 <__data_end+0x5b>
     80c:	a0 91 e4 0a 	lds	r26, 0x0AE4	; 0x800ae4 <__data_end+0x5c>
     810:	b0 91 e5 0a 	lds	r27, 0x0AE5	; 0x800ae5 <__data_end+0x5d>
     814:	84 0d       	add	r24, r4
     816:	95 1d       	adc	r25, r5
     818:	a6 1d       	adc	r26, r6
     81a:	b7 1d       	adc	r27, r7
     81c:	80 93 e2 0a 	sts	0x0AE2, r24	; 0x800ae2 <__data_end+0x5a>
     820:	90 93 e3 0a 	sts	0x0AE3, r25	; 0x800ae3 <__data_end+0x5b>
     824:	a0 93 e4 0a 	sts	0x0AE4, r26	; 0x800ae4 <__data_end+0x5c>
     828:	b0 93 e5 0a 	sts	0x0AE5, r27	; 0x800ae5 <__data_end+0x5d>
     82c:	18 c0       	rjmp	.+48     	; 0x85e <_Z15erogazioniSaverm6String+0x25a>
     82e:	a1 01       	movw	r20, r2
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	48 17       	cp	r20, r24
     836:	59 07       	cpc	r21, r25
     838:	6a 07       	cpc	r22, r26
     83a:	7b 07       	cpc	r23, r27
     83c:	80 f0       	brcs	.+32     	; 0x85e <_Z15erogazioniSaverm6String+0x25a>
     83e:	10 92 e2 0a 	sts	0x0AE2, r1	; 0x800ae2 <__data_end+0x5a>
     842:	10 92 e3 0a 	sts	0x0AE3, r1	; 0x800ae3 <__data_end+0x5b>
     846:	10 92 e4 0a 	sts	0x0AE4, r1	; 0x800ae4 <__data_end+0x5c>
     84a:	10 92 e5 0a 	sts	0x0AE5, r1	; 0x800ae5 <__data_end+0x5d>
     84e:	10 92 e6 0a 	sts	0x0AE6, r1	; 0x800ae6 <__data_end+0x5e>
     852:	10 92 e7 0a 	sts	0x0AE7, r1	; 0x800ae7 <__data_end+0x5f>
     856:	10 92 e8 0a 	sts	0x0AE8, r1	; 0x800ae8 <__data_end+0x60>
     85a:	10 92 e9 0a 	sts	0x0AE9, r1	; 0x800ae9 <__data_end+0x61>
     85e:	24 0c       	add	r2, r4
     860:	35 1c       	adc	r3, r5
     862:	c4 18       	sub	r12, r4
     864:	d5 08       	sbc	r13, r5
     866:	e6 08       	sbc	r14, r6
     868:	f7 08       	sbc	r15, r7
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	5a ec       	ldi	r21, 0xCA	; 202
     86e:	6a e9       	ldi	r22, 0x9A	; 154
     870:	7b e3       	ldi	r23, 0x3B	; 59
     872:	88 e8       	ldi	r24, 0x88	; 136
     874:	9a e0       	ldi	r25, 0x0A	; 10
     876:	0e 94 6e 31 	call	0x62dc	; 0x62dc <_ZN8SPIFlash8_notBusyEm>
     87a:	88 23       	and	r24, r24
     87c:	09 f4       	brne	.+2      	; 0x880 <_Z15erogazioniSaverm6String+0x27c>
     87e:	51 c0       	rjmp	.+162    	; 0x922 <_Z15erogazioniSaverm6String+0x31e>
     880:	61 e0       	ldi	r22, 0x01	; 1
     882:	88 e8       	ldi	r24, 0x88	; 136
     884:	9a e0       	ldi	r25, 0x0A	; 10
     886:	0e 94 b5 31 	call	0x636a	; 0x636a <_ZN8SPIFlash12_writeEnableEb>
     88a:	88 23       	and	r24, r24
     88c:	09 f4       	brne	.+2      	; 0x890 <_Z15erogazioniSaverm6String+0x28c>
     88e:	49 c0       	rjmp	.+146    	; 0x922 <_Z15erogazioniSaverm6String+0x31e>
     890:	00 e0       	ldi	r16, 0x00	; 0
     892:	11 e0       	ldi	r17, 0x01	; 1
     894:	c1 14       	cp	r12, r1
     896:	d1 04       	cpc	r13, r1
     898:	e1 04       	cpc	r14, r1
     89a:	f1 04       	cpc	r15, r1
     89c:	09 f0       	breq	.+2      	; 0x8a0 <_Z15erogazioniSaverm6String+0x29c>
     89e:	58 cf       	rjmp	.-336    	; 0x750 <_Z15erogazioniSaverm6String+0x14c>
     8a0:	88 e8       	ldi	r24, 0x88	; 136
     8a2:	9a e0       	ldi	r25, 0x0A	; 10
     8a4:	0e 94 61 31 	call	0x62c2	; 0x62c2 <_ZN8SPIFlash18_isChipPoweredDownEv>
     8a8:	81 11       	cpse	r24, r1
     8aa:	3b c0       	rjmp	.+118    	; 0x922 <_Z15erogazioniSaverm6String+0x31e>
     8ac:	06 eb       	ldi	r16, 0xB6	; 182
     8ae:	10 e0       	ldi	r17, 0x00	; 0
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	b5 01       	movw	r22, r10
     8b6:	a4 01       	movw	r20, r8
     8b8:	88 e8       	ldi	r24, 0x88	; 136
     8ba:	9a e0       	ldi	r25, 0x0A	; 10
     8bc:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <_ZN8SPIFlash13_addressCheckEmm>
     8c0:	88 23       	and	r24, r24
     8c2:	79 f1       	breq	.+94     	; 0x922 <_Z15erogazioniSaverm6String+0x31e>
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	5a ec       	ldi	r21, 0xCA	; 202
     8c8:	6a e9       	ldi	r22, 0x9A	; 154
     8ca:	7b e3       	ldi	r23, 0x3B	; 59
     8cc:	88 e8       	ldi	r24, 0x88	; 136
     8ce:	9a e0       	ldi	r25, 0x0A	; 10
     8d0:	0e 94 6e 31 	call	0x62dc	; 0x62dc <_ZN8SPIFlash8_notBusyEm>
     8d4:	88 23       	and	r24, r24
     8d6:	29 f1       	breq	.+74     	; 0x922 <_Z15erogazioniSaverm6String+0x31e>
     8d8:	2c 98       	cbi	0x05, 4	; 5
     8da:	43 e0       	ldi	r20, 0x03	; 3
     8dc:	60 91 a5 0a 	lds	r22, 0x0AA5	; 0x800aa5 <__data_end+0x1d>
     8e0:	88 e8       	ldi	r24, 0x88	; 136
     8e2:	9a e0       	ldi	r25, 0x0A	; 10
     8e4:	0e 94 ee 30 	call	0x61dc	; 0x61dc <_ZN8SPIFlash9_nextByteEch>
     8e8:	88 e8       	ldi	r24, 0x88	; 136
     8ea:	9a e0       	ldi	r25, 0x0A	; 10
     8ec:	0e 94 46 30 	call	0x608c	; 0x608c <_ZN8SPIFlash16_transferAddressEv>
     8f0:	8e 01       	movw	r16, r28
     8f2:	0f 5f       	subi	r16, 0xFF	; 255
     8f4:	1f 4f       	sbci	r17, 0xFF	; 255
     8f6:	f8 01       	movw	r30, r16
     8f8:	f1 90       	ld	r15, Z+
     8fa:	8f 01       	movw	r16, r30
     8fc:	40 e0       	ldi	r20, 0x00	; 0
     8fe:	60 91 a4 0a 	lds	r22, 0x0AA4	; 0x800aa4 <__data_end+0x1c>
     902:	88 e8       	ldi	r24, 0x88	; 136
     904:	9a e0       	ldi	r25, 0x0A	; 10
     906:	0e 94 ee 30 	call	0x61dc	; 0x61dc <_ZN8SPIFlash9_nextByteEch>
     90a:	f8 16       	cp	r15, r24
     90c:	d1 f0       	breq	.+52     	; 0x942 <_Z15erogazioniSaverm6String+0x33e>
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	6a e0       	ldi	r22, 0x0A	; 10
     912:	88 e8       	ldi	r24, 0x88	; 136
     914:	9a e0       	ldi	r25, 0x0A	; 10
     916:	0e 94 89 33 	call	0x6712	; 0x6712 <_ZN8SPIFlash13_troubleshootEhb>
     91a:	88 e8       	ldi	r24, 0x88	; 136
     91c:	9a e0       	ldi	r25, 0x0A	; 10
     91e:	0e 94 40 31 	call	0x6280	; 0x6280 <_ZN8SPIFlash7_endSPIEv>
     922:	8e 01       	movw	r16, r28
     924:	0f 54       	subi	r16, 0x4F	; 79
     926:	1f 4f       	sbci	r17, 0xFF	; 255
     928:	7e 01       	movw	r14, r28
     92a:	33 e0       	ldi	r19, 0x03	; 3
     92c:	e3 1a       	sub	r14, r19
     92e:	f1 08       	sbc	r15, r1
     930:	c8 01       	movw	r24, r16
     932:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
     936:	06 50       	subi	r16, 0x06	; 6
     938:	11 09       	sbc	r17, r1
     93a:	e0 16       	cp	r14, r16
     93c:	f1 06       	cpc	r15, r17
     93e:	c1 f7       	brne	.-16     	; 0x930 <_Z15erogazioniSaverm6String+0x32c>
     940:	15 c0       	rjmp	.+42     	; 0x96c <_Z15erogazioniSaverm6String+0x368>
     942:	c9 54       	subi	r28, 0x49	; 73
     944:	df 4f       	sbci	r29, 0xFF	; 255
     946:	28 81       	ld	r18, Y
     948:	39 81       	ldd	r19, Y+1	; 0x01
     94a:	c7 5b       	subi	r28, 0xB7	; 183
     94c:	d0 40       	sbci	r29, 0x00	; 0
     94e:	02 17       	cp	r16, r18
     950:	13 07       	cpc	r17, r19
     952:	89 f6       	brne	.-94     	; 0x8f6 <_Z15erogazioniSaverm6String+0x2f2>
     954:	88 e8       	ldi	r24, 0x88	; 136
     956:	9a e0       	ldi	r25, 0x0A	; 10
     958:	0e 94 40 31 	call	0x6280	; 0x6280 <_ZN8SPIFlash7_endSPIEv>
     95c:	62 e0       	ldi	r22, 0x02	; 2
     95e:	72 e0       	ldi	r23, 0x02	; 2
     960:	8d e5       	ldi	r24, 0x5D	; 93
     962:	9e e0       	ldi	r25, 0x0E	; 14
     964:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
     968:	41 dd       	rcall	.-1406   	; 0x3ec <_Z9printLinev>
     96a:	db cf       	rjmp	.-74     	; 0x922 <_Z15erogazioniSaverm6String+0x31e>
     96c:	c4 54       	subi	r28, 0x44	; 68
     96e:	df 4f       	sbci	r29, 0xFF	; 255
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
     974:	de bf       	out	0x3e, r29	; 62
     976:	0f be       	out	0x3f, r0	; 63
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	bf 90       	pop	r11
     98c:	af 90       	pop	r10
     98e:	9f 90       	pop	r9
     990:	8f 90       	pop	r8
     992:	7f 90       	pop	r7
     994:	6f 90       	pop	r6
     996:	5f 90       	pop	r5
     998:	4f 90       	pop	r4
     99a:	3f 90       	pop	r3
     99c:	2f 90       	pop	r2
     99e:	08 95       	ret

000009a0 <_Z14FlashpowerDownv>:
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	37 dd       	rcall	.-1426   	; 0x412 <_Z8printTabh>
     9a4:	60 e4       	ldi	r22, 0x40	; 64
     9a6:	72 e0       	ldi	r23, 0x02	; 2
     9a8:	8d e5       	ldi	r24, 0x5D	; 93
     9aa:	9e e0       	ldi	r25, 0x0E	; 14
     9ac:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	2f dd       	rcall	.-1442   	; 0x412 <_Z8printTabh>
     9b4:	88 e8       	ldi	r24, 0x88	; 136
     9b6:	9a e0       	ldi	r25, 0x0A	; 10
     9b8:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <_ZN8SPIFlash9powerDownEv>
     9bc:	88 23       	and	r24, r24
     9be:	d1 f0       	breq	.+52     	; 0x9f4 <_Z14FlashpowerDownv+0x54>
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	38 dd       	rcall	.-1424   	; 0x434 <_Z4passb>
     9c4:	63 ee       	ldi	r22, 0xE3	; 227
     9c6:	71 e0       	ldi	r23, 0x01	; 1
     9c8:	8d e5       	ldi	r24, 0x5D	; 93
     9ca:	9e e0       	ldi	r25, 0x0E	; 14
     9cc:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     9d0:	6b e4       	ldi	r22, 0x4B	; 75
     9d2:	72 e0       	ldi	r23, 0x02	; 2
     9d4:	8d e5       	ldi	r24, 0x5D	; 93
     9d6:	9e e0       	ldi	r25, 0x0E	; 14
     9d8:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     9dc:	2f ef       	ldi	r18, 0xFF	; 255
     9de:	83 ed       	ldi	r24, 0xD3	; 211
     9e0:	90 e3       	ldi	r25, 0x30	; 48
     9e2:	21 50       	subi	r18, 0x01	; 1
     9e4:	80 40       	sbci	r24, 0x00	; 0
     9e6:	90 40       	sbci	r25, 0x00	; 0
     9e8:	e1 f7       	brne	.-8      	; 0x9e2 <_Z14FlashpowerDownv+0x42>
     9ea:	00 c0       	rjmp	.+0      	; 0x9ec <_Z14FlashpowerDownv+0x4c>
     9ec:	00 00       	nop
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	10 dd       	rcall	.-1504   	; 0x412 <_Z8printTabh>
     9f2:	fc cc       	rjmp	.-1544   	; 0x3ec <_Z9printLinev>
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	1e dd       	rcall	.-1476   	; 0x434 <_Z4passb>
     9f8:	82 e0       	ldi	r24, 0x02	; 2
     9fa:	0b dd       	rcall	.-1514   	; 0x412 <_Z8printTabh>
     9fc:	69 e5       	ldi	r22, 0x59	; 89
     9fe:	72 e0       	ldi	r23, 0x02	; 2
     a00:	8d e5       	ldi	r24, 0x5D	; 93
     a02:	9e e0       	ldi	r25, 0x0E	; 14
     a04:	0c 94 09 3a 	jmp	0x7412	; 0x7412 <_ZN5Print5printEPKc>

00000a08 <_Z12FlashpowerUpv>:
     a08:	83 e0       	ldi	r24, 0x03	; 3
     a0a:	03 dd       	rcall	.-1530   	; 0x412 <_Z8printTabh>
     a0c:	61 e9       	ldi	r22, 0x91	; 145
     a0e:	72 e0       	ldi	r23, 0x02	; 2
     a10:	8d e5       	ldi	r24, 0x5D	; 93
     a12:	9e e0       	ldi	r25, 0x0E	; 14
     a14:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	fb dc       	rcall	.-1546   	; 0x412 <_Z8printTabh>
     a1c:	88 e8       	ldi	r24, 0x88	; 136
     a1e:	9a e0       	ldi	r25, 0x0A	; 10
     a20:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <_ZN8SPIFlash7powerUpEv>
     a24:	88 23       	and	r24, r24
     a26:	d1 f0       	breq	.+52     	; 0xa5c <_Z12FlashpowerUpv+0x54>
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	04 dd       	rcall	.-1528   	; 0x434 <_Z4passb>
     a2c:	63 ee       	ldi	r22, 0xE3	; 227
     a2e:	71 e0       	ldi	r23, 0x01	; 1
     a30:	8d e5       	ldi	r24, 0x5D	; 93
     a32:	9e e0       	ldi	r25, 0x0E	; 14
     a34:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     a38:	6a e9       	ldi	r22, 0x9A	; 154
     a3a:	72 e0       	ldi	r23, 0x02	; 2
     a3c:	8d e5       	ldi	r24, 0x5D	; 93
     a3e:	9e e0       	ldi	r25, 0x0E	; 14
     a40:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     a44:	2f ef       	ldi	r18, 0xFF	; 255
     a46:	83 ed       	ldi	r24, 0xD3	; 211
     a48:	90 e3       	ldi	r25, 0x30	; 48
     a4a:	21 50       	subi	r18, 0x01	; 1
     a4c:	80 40       	sbci	r24, 0x00	; 0
     a4e:	90 40       	sbci	r25, 0x00	; 0
     a50:	e1 f7       	brne	.-8      	; 0xa4a <_Z12FlashpowerUpv+0x42>
     a52:	00 c0       	rjmp	.+0      	; 0xa54 <_Z12FlashpowerUpv+0x4c>
     a54:	00 00       	nop
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	dc dc       	rcall	.-1608   	; 0x412 <_Z8printTabh>
     a5a:	c8 cc       	rjmp	.-1648   	; 0x3ec <_Z9printLinev>
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	ea dc       	rcall	.-1580   	; 0x434 <_Z4passb>
     a60:	82 e0       	ldi	r24, 0x02	; 2
     a62:	d7 cc       	rjmp	.-1618   	; 0x412 <_Z8printTabh>

00000a64 <_Z13eraseChipTestv>:
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	d5 dc       	rcall	.-1622   	; 0x412 <_Z8printTabh>
     a68:	66 ea       	ldi	r22, 0xA6	; 166
     a6a:	72 e0       	ldi	r23, 0x02	; 2
     a6c:	8d e5       	ldi	r24, 0x5D	; 93
     a6e:	9e e0       	ldi	r25, 0x0E	; 14
     a70:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	cd dc       	rcall	.-1638   	; 0x412 <_Z8printTabh>
     a78:	88 e8       	ldi	r24, 0x88	; 136
     a7a:	9a e0       	ldi	r25, 0x0A	; 10
     a7c:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <_ZN8SPIFlash9eraseChipEv>
     a80:	88 23       	and	r24, r24
     a82:	d1 f0       	breq	.+52     	; 0xab8 <_Z13eraseChipTestv+0x54>
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	d6 dc       	rcall	.-1620   	; 0x434 <_Z4passb>
     a88:	63 ee       	ldi	r22, 0xE3	; 227
     a8a:	71 e0       	ldi	r23, 0x01	; 1
     a8c:	8d e5       	ldi	r24, 0x5D	; 93
     a8e:	9e e0       	ldi	r25, 0x0E	; 14
     a90:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     a94:	61 eb       	ldi	r22, 0xB1	; 177
     a96:	72 e0       	ldi	r23, 0x02	; 2
     a98:	8d e5       	ldi	r24, 0x5D	; 93
     a9a:	9e e0       	ldi	r25, 0x0E	; 14
     a9c:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     aa0:	2f ef       	ldi	r18, 0xFF	; 255
     aa2:	83 ed       	ldi	r24, 0xD3	; 211
     aa4:	90 e3       	ldi	r25, 0x30	; 48
     aa6:	21 50       	subi	r18, 0x01	; 1
     aa8:	80 40       	sbci	r24, 0x00	; 0
     aaa:	90 40       	sbci	r25, 0x00	; 0
     aac:	e1 f7       	brne	.-8      	; 0xaa6 <_Z13eraseChipTestv+0x42>
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <_Z13eraseChipTestv+0x4c>
     ab0:	00 00       	nop
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	ae dc       	rcall	.-1700   	; 0x412 <_Z8printTabh>
     ab6:	9a cc       	rjmp	.-1740   	; 0x3ec <_Z9printLinev>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	bc cc       	rjmp	.-1672   	; 0x434 <_Z4passb>

00000abc <_Z5getIDv>:
     abc:	8f 92       	push	r8
     abe:	9f 92       	push	r9
     ac0:	af 92       	push	r10
     ac2:	bf 92       	push	r11
     ac4:	cf 92       	push	r12
     ac6:	df 92       	push	r13
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	8d e5       	ldi	r24, 0x5D	; 93
     ace:	9e e0       	ldi	r25, 0x0E	; 14
     ad0:	0e 94 11 3a 	call	0x7422	; 0x7422 <_ZN5Print7printlnEv>
     ad4:	88 e8       	ldi	r24, 0x88	; 136
     ad6:	9a e0       	ldi	r25, 0x0A	; 10
     ad8:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <_ZN8SPIFlash10getJEDECIDEv>
     adc:	6b 01       	movw	r12, r22
     ade:	7c 01       	movw	r14, r24
     ae0:	67 2b       	or	r22, r23
     ae2:	68 2b       	or	r22, r24
     ae4:	69 2b       	or	r22, r25
     ae6:	41 f4       	brne	.+16     	; 0xaf8 <_Z5getIDv+0x3c>
     ae8:	6f eb       	ldi	r22, 0xBF	; 191
     aea:	72 e0       	ldi	r23, 0x02	; 2
     aec:	8d e5       	ldi	r24, 0x5D	; 93
     aee:	9e e0       	ldi	r25, 0x0E	; 14
     af0:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	b2 c0       	rjmp	.+356    	; 0xc5c <_Z5getIDv+0x1a0>
     af8:	65 e1       	ldi	r22, 0x15	; 21
     afa:	73 e0       	ldi	r23, 0x03	; 3
     afc:	8d e5       	ldi	r24, 0x5D	; 93
     afe:	9e e0       	ldi	r25, 0x0E	; 14
     b00:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     b04:	20 e1       	ldi	r18, 0x10	; 16
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	b7 01       	movw	r22, r14
     b0a:	a6 01       	movw	r20, r12
     b0c:	8d e5       	ldi	r24, 0x5D	; 93
     b0e:	9e e0       	ldi	r25, 0x0E	; 14
     b10:	0e 94 ad 3a 	call	0x755a	; 0x755a <_ZN5Print7printlnEmi>
     b14:	62 e2       	ldi	r22, 0x22	; 34
     b16:	73 e0       	ldi	r23, 0x03	; 3
     b18:	8d e5       	ldi	r24, 0x5D	; 93
     b1a:	9e e0       	ldi	r25, 0x0E	; 14
     b1c:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     b20:	b7 01       	movw	r22, r14
     b22:	88 27       	eor	r24, r24
     b24:	99 27       	eor	r25, r25
     b26:	40 e1       	ldi	r20, 0x10	; 16
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	8d e5       	ldi	r24, 0x5D	; 93
     b2c:	9e e0       	ldi	r25, 0x0E	; 14
     b2e:	0e 94 9d 3a 	call	0x753a	; 0x753a <_ZN5Print7printlnEhi>
     b32:	6d e2       	ldi	r22, 0x2D	; 45
     b34:	73 e0       	ldi	r23, 0x03	; 3
     b36:	8d e5       	ldi	r24, 0x5D	; 93
     b38:	9e e0       	ldi	r25, 0x0E	; 14
     b3a:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     b3e:	8d 2c       	mov	r8, r13
     b40:	9e 2c       	mov	r9, r14
     b42:	af 2c       	mov	r10, r15
     b44:	bb 24       	eor	r11, r11
     b46:	40 e1       	ldi	r20, 0x10	; 16
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	68 2d       	mov	r22, r8
     b4c:	8d e5       	ldi	r24, 0x5D	; 93
     b4e:	9e e0       	ldi	r25, 0x0E	; 14
     b50:	0e 94 9d 3a 	call	0x753a	; 0x753a <_ZN5Print7printlnEhi>
     b54:	6b e3       	ldi	r22, 0x3B	; 59
     b56:	73 e0       	ldi	r23, 0x03	; 3
     b58:	8d e5       	ldi	r24, 0x5D	; 93
     b5a:	9e e0       	ldi	r25, 0x0E	; 14
     b5c:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     b60:	88 e8       	ldi	r24, 0x88	; 136
     b62:	9a e0       	ldi	r25, 0x0A	; 10
     b64:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <_ZN8SPIFlash11getCapacityEv>
     b68:	ab 01       	movw	r20, r22
     b6a:	bc 01       	movw	r22, r24
     b6c:	2a e0       	ldi	r18, 0x0A	; 10
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	8d e5       	ldi	r24, 0x5D	; 93
     b72:	9e e0       	ldi	r25, 0x0E	; 14
     b74:	0e 94 ad 3a 	call	0x755a	; 0x755a <_ZN5Print7printlnEmi>
     b78:	66 e4       	ldi	r22, 0x46	; 70
     b7a:	73 e0       	ldi	r23, 0x03	; 3
     b7c:	8d e5       	ldi	r24, 0x5D	; 93
     b7e:	9e e0       	ldi	r25, 0x0E	; 14
     b80:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     b84:	88 e8       	ldi	r24, 0x88	; 136
     b86:	9a e0       	ldi	r25, 0x0A	; 10
     b88:	0e 94 b4 2e 	call	0x5d68	; 0x5d68 <_ZN8SPIFlash10getMaxPageEv>
     b8c:	ab 01       	movw	r20, r22
     b8e:	bc 01       	movw	r22, r24
     b90:	2a e0       	ldi	r18, 0x0A	; 10
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	8d e5       	ldi	r24, 0x5D	; 93
     b96:	9e e0       	ldi	r25, 0x0E	; 14
     b98:	0e 94 ad 3a 	call	0x755a	; 0x755a <_ZN5Print7printlnEmi>
     b9c:	63 dc       	rcall	.-1850   	; 0x464 <_Z13printUniqueIDv>
     b9e:	8e ec       	ldi	r24, 0xCE	; 206
     ba0:	9c e0       	ldi	r25, 0x0C	; 12
     ba2:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN3LCD5clearEv>
     ba6:	65 e1       	ldi	r22, 0x15	; 21
     ba8:	73 e0       	ldi	r23, 0x03	; 3
     baa:	8e ec       	ldi	r24, 0xCE	; 206
     bac:	9c e0       	ldi	r25, 0x0C	; 12
     bae:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     bb2:	20 e1       	ldi	r18, 0x10	; 16
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	b7 01       	movw	r22, r14
     bb8:	a6 01       	movw	r20, r12
     bba:	8e ec       	ldi	r24, 0xCE	; 206
     bbc:	9c e0       	ldi	r25, 0x0C	; 12
     bbe:	0e 94 8b 3a 	call	0x7516	; 0x7516 <_ZN5Print5printEmi>
     bc2:	41 e0       	ldi	r20, 0x01	; 1
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	8e ec       	ldi	r24, 0xCE	; 206
     bc8:	9c e0       	ldi	r25, 0x0C	; 12
     bca:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN3LCD9setCursorEhh>
     bce:	62 e5       	ldi	r22, 0x52	; 82
     bd0:	73 e0       	ldi	r23, 0x03	; 3
     bd2:	8e ec       	ldi	r24, 0xCE	; 206
     bd4:	9c e0       	ldi	r25, 0x0C	; 12
     bd6:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     bda:	88 e8       	ldi	r24, 0x88	; 136
     bdc:	9a e0       	ldi	r25, 0x0A	; 10
     bde:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <_ZN8SPIFlash11getCapacityEv>
     be2:	ab 01       	movw	r20, r22
     be4:	bc 01       	movw	r22, r24
     be6:	2a e0       	ldi	r18, 0x0A	; 10
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	8e ec       	ldi	r24, 0xCE	; 206
     bec:	9c e0       	ldi	r25, 0x0C	; 12
     bee:	0e 94 8b 3a 	call	0x7516	; 0x7516 <_ZN5Print5printEmi>
     bf2:	42 e0       	ldi	r20, 0x02	; 2
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	8e ec       	ldi	r24, 0xCE	; 206
     bf8:	9c e0       	ldi	r25, 0x0C	; 12
     bfa:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN3LCD9setCursorEhh>
     bfe:	6d e2       	ldi	r22, 0x2D	; 45
     c00:	73 e0       	ldi	r23, 0x03	; 3
     c02:	8e ec       	ldi	r24, 0xCE	; 206
     c04:	9c e0       	ldi	r25, 0x0C	; 12
     c06:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     c0a:	40 e1       	ldi	r20, 0x10	; 16
     c0c:	50 e0       	ldi	r21, 0x00	; 0
     c0e:	68 2d       	mov	r22, r8
     c10:	8e ec       	ldi	r24, 0xCE	; 206
     c12:	9c e0       	ldi	r25, 0x0C	; 12
     c14:	0e 94 97 3a 	call	0x752e	; 0x752e <_ZN5Print5printEhi>
     c18:	43 e0       	ldi	r20, 0x03	; 3
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	8e ec       	ldi	r24, 0xCE	; 206
     c1e:	9c e0       	ldi	r25, 0x0C	; 12
     c20:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN3LCD9setCursorEhh>
     c24:	66 e4       	ldi	r22, 0x46	; 70
     c26:	73 e0       	ldi	r23, 0x03	; 3
     c28:	8e ec       	ldi	r24, 0xCE	; 206
     c2a:	9c e0       	ldi	r25, 0x0C	; 12
     c2c:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
     c30:	88 e8       	ldi	r24, 0x88	; 136
     c32:	9a e0       	ldi	r25, 0x0A	; 10
     c34:	0e 94 b4 2e 	call	0x5d68	; 0x5d68 <_ZN8SPIFlash10getMaxPageEv>
     c38:	ab 01       	movw	r20, r22
     c3a:	bc 01       	movw	r22, r24
     c3c:	2a e0       	ldi	r18, 0x0A	; 10
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	8e ec       	ldi	r24, 0xCE	; 206
     c42:	9c e0       	ldi	r25, 0x0C	; 12
     c44:	0e 94 8b 3a 	call	0x7516	; 0x7516 <_ZN5Print5printEmi>
     c48:	2f ef       	ldi	r18, 0xFF	; 255
     c4a:	8b e7       	ldi	r24, 0x7B	; 123
     c4c:	92 e9       	ldi	r25, 0x92	; 146
     c4e:	21 50       	subi	r18, 0x01	; 1
     c50:	80 40       	sbci	r24, 0x00	; 0
     c52:	90 40       	sbci	r25, 0x00	; 0
     c54:	e1 f7       	brne	.-8      	; 0xc4e <_Z5getIDv+0x192>
     c56:	00 c0       	rjmp	.+0      	; 0xc58 <_Z5getIDv+0x19c>
     c58:	00 00       	nop
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	df 90       	pop	r13
     c62:	cf 90       	pop	r12
     c64:	bf 90       	pop	r11
     c66:	af 90       	pop	r10
     c68:	9f 90       	pop	r9
     c6a:	8f 90       	pop	r8
     c6c:	08 95       	ret

00000c6e <_Z11my_delay_msi>:
     c6e:	18 16       	cp	r1, r24
     c70:	19 06       	cpc	r1, r25
     c72:	44 f4       	brge	.+16     	; 0xc84 <_Z11my_delay_msi+0x16>
     c74:	ef e9       	ldi	r30, 0x9F	; 159
     c76:	ff e0       	ldi	r31, 0x0F	; 15
     c78:	31 97       	sbiw	r30, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <_Z11my_delay_msi+0xa>
     c7c:	00 c0       	rjmp	.+0      	; 0xc7e <_Z11my_delay_msi+0x10>
     c7e:	00 00       	nop
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f5 cf       	rjmp	.-22     	; 0xc6e <_Z11my_delay_msi>
     c84:	08 95       	ret

00000c86 <_Z6Buzzerhm>:
     c86:	8f 92       	push	r8
     c88:	9f 92       	push	r9
     c8a:	af 92       	push	r10
     c8c:	bf 92       	push	r11
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	4a 01       	movw	r8, r20
     c9a:	5b 01       	movw	r10, r22
     c9c:	c0 e0       	ldi	r28, 0x00	; 0
     c9e:	d0 e0       	ldi	r29, 0x00	; 0
     ca0:	08 2f       	mov	r16, r24
     ca2:	10 e0       	ldi	r17, 0x00	; 0
     ca4:	80 e4       	ldi	r24, 0x40	; 64
     ca6:	f8 2e       	mov	r15, r24
     ca8:	c0 17       	cp	r28, r16
     caa:	d1 07       	cpc	r29, r17
     cac:	5c f4       	brge	.+22     	; 0xcc4 <_Z6Buzzerhm+0x3e>
     cae:	3e 9a       	sbi	0x07, 6	; 7
     cb0:	98 b1       	in	r25, 0x08	; 8
     cb2:	9f 25       	eor	r25, r15
     cb4:	98 b9       	out	0x08, r25	; 8
     cb6:	c4 01       	movw	r24, r8
     cb8:	da df       	rcall	.-76     	; 0xc6e <_Z11my_delay_msi>
     cba:	98 b1       	in	r25, 0x08	; 8
     cbc:	9f 25       	eor	r25, r15
     cbe:	98 b9       	out	0x08, r25	; 8
     cc0:	21 96       	adiw	r28, 0x01	; 1
     cc2:	f2 cf       	rjmp	.-28     	; 0xca8 <_Z6Buzzerhm+0x22>
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	bf 90       	pop	r11
     cd0:	af 90       	pop	r10
     cd2:	9f 90       	pop	r9
     cd4:	8f 90       	pop	r8
     cd6:	08 95       	ret

00000cd8 <_Z10leggiRighev>:
     cd8:	60 e2       	ldi	r22, 0x20	; 32
     cda:	87 e0       	ldi	r24, 0x07	; 7
     cdc:	9e e0       	ldi	r25, 0x0E	; 14
     cde:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>
     ce2:	63 e0       	ldi	r22, 0x03	; 3
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	87 e0       	ldi	r24, 0x07	; 7
     ce8:	9e e0       	ldi	r25, 0x0E	; 14
     cea:	1e db       	rcall	.-2500   	; 0x328 <_ZN7TwoWire5writeEi>
     cec:	63 ec       	ldi	r22, 0xC3	; 195
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	9e e0       	ldi	r25, 0x0E	; 14
     cf4:	19 db       	rcall	.-2510   	; 0x328 <_ZN7TwoWire5writeEi>
     cf6:	87 e0       	ldi	r24, 0x07	; 7
     cf8:	9e e0       	ldi	r25, 0x0E	; 14
     cfa:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
     cfe:	8f e1       	ldi	r24, 0x1F	; 31
     d00:	9e e4       	ldi	r25, 0x4E	; 78
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	f1 f7       	brne	.-4      	; 0xd02 <_Z10leggiRighev+0x2a>
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <_Z10leggiRighev+0x30>
     d08:	00 00       	nop
     d0a:	08 95       	ret

00000d0c <_Z12leggiColonnev>:
     d0c:	60 e2       	ldi	r22, 0x20	; 32
     d0e:	87 e0       	ldi	r24, 0x07	; 7
     d10:	9e e0       	ldi	r25, 0x0E	; 14
     d12:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>
     d16:	63 e0       	ldi	r22, 0x03	; 3
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	87 e0       	ldi	r24, 0x07	; 7
     d1c:	9e e0       	ldi	r25, 0x0E	; 14
     d1e:	04 db       	rcall	.-2552   	; 0x328 <_ZN7TwoWire5writeEi>
     d20:	6c e3       	ldi	r22, 0x3C	; 60
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	87 e0       	ldi	r24, 0x07	; 7
     d26:	9e e0       	ldi	r25, 0x0E	; 14
     d28:	ff da       	rcall	.-2562   	; 0x328 <_ZN7TwoWire5writeEi>
     d2a:	87 e0       	ldi	r24, 0x07	; 7
     d2c:	9e e0       	ldi	r25, 0x0E	; 14
     d2e:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
     d32:	8f e1       	ldi	r24, 0x1F	; 31
     d34:	9e e4       	ldi	r25, 0x4E	; 78
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <_Z12leggiColonnev+0x2a>
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <_Z12leggiColonnev+0x30>
     d3c:	00 00       	nop
     d3e:	08 95       	ret

00000d40 <_Z17leggi_IP_REGISTERv>:
     d40:	60 e2       	ldi	r22, 0x20	; 32
     d42:	87 e0       	ldi	r24, 0x07	; 7
     d44:	9e e0       	ldi	r25, 0x0E	; 14
     d46:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	9e e0       	ldi	r25, 0x0E	; 14
     d52:	ea da       	rcall	.-2604   	; 0x328 <_ZN7TwoWire5writeEi>
     d54:	87 e0       	ldi	r24, 0x07	; 7
     d56:	9e e0       	ldi	r25, 0x0E	; 14
     d58:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
     d5c:	8f e1       	ldi	r24, 0x1F	; 31
     d5e:	9e e4       	ldi	r25, 0x4E	; 78
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	f1 f7       	brne	.-4      	; 0xd60 <_Z17leggi_IP_REGISTERv+0x20>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <_Z17leggi_IP_REGISTERv+0x26>
     d66:	00 00       	nop
     d68:	08 95       	ret

00000d6a <_Z17leggi_OP_REGISTERv>:
     d6a:	60 e2       	ldi	r22, 0x20	; 32
     d6c:	87 e0       	ldi	r24, 0x07	; 7
     d6e:	9e e0       	ldi	r25, 0x0E	; 14
     d70:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>
     d74:	61 e0       	ldi	r22, 0x01	; 1
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	87 e0       	ldi	r24, 0x07	; 7
     d7a:	9e e0       	ldi	r25, 0x0E	; 14
     d7c:	d5 da       	rcall	.-2646   	; 0x328 <_ZN7TwoWire5writeEi>
     d7e:	87 e0       	ldi	r24, 0x07	; 7
     d80:	9e e0       	ldi	r25, 0x0E	; 14
     d82:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
     d86:	8f e1       	ldi	r24, 0x1F	; 31
     d88:	9e e4       	ldi	r25, 0x4E	; 78
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <_Z17leggi_OP_REGISTERv+0x20>
     d8e:	00 c0       	rjmp	.+0      	; 0xd90 <_Z17leggi_OP_REGISTERv+0x26>
     d90:	00 00       	nop
     d92:	08 95       	ret

00000d94 <_Z10displayLCDP6Stringii>:
     d94:	cf 92       	push	r12
     d96:	df 92       	push	r13
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	2c 97       	sbiw	r28, 0x0c	; 12
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	8c 01       	movw	r16, r24
     db6:	6b 01       	movw	r12, r22
     db8:	7a 01       	movw	r14, r20
     dba:	8e ec       	ldi	r24, 0xCE	; 206
     dbc:	9c e0       	ldi	r25, 0x0C	; 12
     dbe:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN3LCD5clearEv>
     dc2:	83 e0       	ldi	r24, 0x03	; 3
     dc4:	c8 16       	cp	r12, r24
     dc6:	d1 04       	cpc	r13, r1
     dc8:	0c f4       	brge	.+2      	; 0xdcc <_Z10displayLCDP6Stringii+0x38>
     dca:	47 c0       	rjmp	.+142    	; 0xe5a <_Z10displayLCDP6Stringii+0xc6>
     dcc:	40 91 86 0b 	lds	r20, 0x0B86	; 0x800b86 <UltimoPassaggioStato>
     dd0:	50 91 87 0b 	lds	r21, 0x0B87	; 0x800b87 <UltimoPassaggioStato+0x1>
     dd4:	60 91 88 0b 	lds	r22, 0x0B88	; 0x800b88 <UltimoPassaggioStato+0x2>
     dd8:	70 91 89 0b 	lds	r23, 0x0B89	; 0x800b89 <UltimoPassaggioStato+0x3>
     ddc:	80 91 82 0b 	lds	r24, 0x0B82	; 0x800b82 <Timer>
     de0:	90 91 83 0b 	lds	r25, 0x0B83	; 0x800b83 <Timer+0x1>
     de4:	a0 91 84 0b 	lds	r26, 0x0B84	; 0x800b84 <Timer+0x2>
     de8:	b0 91 85 0b 	lds	r27, 0x0B85	; 0x800b85 <Timer+0x3>
     dec:	48 0f       	add	r20, r24
     dee:	59 1f       	adc	r21, r25
     df0:	6a 1f       	adc	r22, r26
     df2:	7b 1f       	adc	r23, r27
     df4:	41 50       	subi	r20, 0x01	; 1
     df6:	51 09       	sbc	r21, r1
     df8:	61 09       	sbc	r22, r1
     dfa:	71 09       	sbc	r23, r1
     dfc:	80 91 8a 0b 	lds	r24, 0x0B8A	; 0x800b8a <secs>
     e00:	90 91 8b 0b 	lds	r25, 0x0B8B	; 0x800b8b <secs+0x1>
     e04:	a0 91 8c 0b 	lds	r26, 0x0B8C	; 0x800b8c <secs+0x2>
     e08:	b0 91 8d 0b 	lds	r27, 0x0B8D	; 0x800b8d <secs+0x3>
     e0c:	48 1b       	sub	r20, r24
     e0e:	59 0b       	sbc	r21, r25
     e10:	6a 0b       	sbc	r22, r26
     e12:	7b 0b       	sbc	r23, r27
     e14:	2a e0       	ldi	r18, 0x0A	; 10
     e16:	ce 01       	movw	r24, r28
     e18:	07 96       	adiw	r24, 0x07	; 7
     e1a:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringC1Emh>
     e1e:	68 e5       	ldi	r22, 0x58	; 88
     e20:	73 e0       	ldi	r23, 0x03	; 3
     e22:	ce 01       	movw	r24, r28
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
     e2a:	be 01       	movw	r22, r28
     e2c:	69 5f       	subi	r22, 0xF9	; 249
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	ce 01       	movw	r24, r28
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
     e38:	60 e6       	ldi	r22, 0x60	; 96
     e3a:	73 e0       	ldi	r23, 0x03	; 3
     e3c:	0e 94 43 3e 	call	0x7c86	; 0x7c86 <_ZplRK15StringSumHelperPKc>
     e40:	bc 01       	movw	r22, r24
     e42:	8e ec       	ldi	r24, 0xCE	; 206
     e44:	9c e0       	ldi	r25, 0x0C	; 12
     e46:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <_ZN5Print5printERK6String>
     e4a:	ce 01       	movw	r24, r28
     e4c:	01 96       	adiw	r24, 0x01	; 1
     e4e:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
     e52:	ce 01       	movw	r24, r28
     e54:	07 96       	adiw	r24, 0x07	; 7
     e56:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
     e5a:	61 e0       	ldi	r22, 0x01	; 1
     e5c:	8e ec       	ldi	r24, 0xCE	; 206
     e5e:	9c e0       	ldi	r25, 0x0C	; 12
     e60:	0e 94 0a 3a 	call	0x7414	; 0x7414 <_ZN5Print5printEc>
     e64:	41 e0       	ldi	r20, 0x01	; 1
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	8e ec       	ldi	r24, 0xCE	; 206
     e6a:	9c e0       	ldi	r25, 0x0C	; 12
     e6c:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN3LCD9setCursorEhh>
     e70:	b8 01       	movw	r22, r16
     e72:	6a 5f       	subi	r22, 0xFA	; 250
     e74:	7f 4f       	sbci	r23, 0xFF	; 255
     e76:	8e ec       	ldi	r24, 0xCE	; 206
     e78:	9c e0       	ldi	r25, 0x0C	; 12
     e7a:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <_ZN5Print5printERK6String>
     e7e:	42 e0       	ldi	r20, 0x02	; 2
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	8e ec       	ldi	r24, 0xCE	; 206
     e84:	9c e0       	ldi	r25, 0x0C	; 12
     e86:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN3LCD9setCursorEhh>
     e8a:	b8 01       	movw	r22, r16
     e8c:	64 5f       	subi	r22, 0xF4	; 244
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	8e ec       	ldi	r24, 0xCE	; 206
     e92:	9c e0       	ldi	r25, 0x0C	; 12
     e94:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <_ZN5Print5printERK6String>
     e98:	43 e0       	ldi	r20, 0x03	; 3
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	8e ec       	ldi	r24, 0xCE	; 206
     e9e:	9c e0       	ldi	r25, 0x0C	; 12
     ea0:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN3LCD9setCursorEhh>
     ea4:	b8 01       	movw	r22, r16
     ea6:	6e 5e       	subi	r22, 0xEE	; 238
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	8e ec       	ldi	r24, 0xCE	; 206
     eac:	9c e0       	ldi	r25, 0x0C	; 12
     eae:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <_ZN5Print5printERK6String>
     eb2:	c7 01       	movw	r24, r14
     eb4:	dc de       	rcall	.-584    	; 0xc6e <_Z11my_delay_msi>
     eb6:	2c 96       	adiw	r28, 0x0c	; 12
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	ff 90       	pop	r15
     ecc:	ef 90       	pop	r14
     ece:	df 90       	pop	r13
     ed0:	cf 90       	pop	r12
     ed2:	08 95       	ret

00000ed4 <_Z11avanzaStatom>:
     ed4:	60 93 82 0b 	sts	0x0B82, r22	; 0x800b82 <Timer>
     ed8:	70 93 83 0b 	sts	0x0B83, r23	; 0x800b83 <Timer+0x1>
     edc:	80 93 84 0b 	sts	0x0B84, r24	; 0x800b84 <Timer+0x2>
     ee0:	90 93 85 0b 	sts	0x0B85, r25	; 0x800b85 <Timer+0x3>
     ee4:	8c e7       	ldi	r24, 0x7C	; 124
     ee6:	9b e0       	ldi	r25, 0x0B	; 11
     ee8:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <_ZNK8DateTime11secondstimeEv>
     eec:	60 93 86 0b 	sts	0x0B86, r22	; 0x800b86 <UltimoPassaggioStato>
     ef0:	70 93 87 0b 	sts	0x0B87, r23	; 0x800b87 <UltimoPassaggioStato+0x1>
     ef4:	80 93 88 0b 	sts	0x0B88, r24	; 0x800b88 <UltimoPassaggioStato+0x2>
     ef8:	90 93 89 0b 	sts	0x0B89, r25	; 0x800b89 <UltimoPassaggioStato+0x3>
     efc:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <stato_procedura>
     f00:	90 91 a6 0c 	lds	r25, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	90 93 a6 0c 	sts	0x0CA6, r25	; 0x800ca6 <stato_procedura+0x1>
     f0a:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <stato_procedura>
     f0e:	08 95       	ret

00000f10 <_Z14leggiTAG_Mezzob>:
     f10:	af 92       	push	r10
     f12:	bf 92       	push	r11
     f14:	cf 92       	push	r12
     f16:	df 92       	push	r13
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	a2 97       	sbiw	r28, 0x22	; 34
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	5c 01       	movw	r10, r24
     f36:	f6 2e       	mov	r15, r22
     f38:	6b eb       	ldi	r22, 0xBB	; 187
     f3a:	71 e0       	ldi	r23, 0x01	; 1
     f3c:	ce 01       	movw	r24, r28
     f3e:	4d 96       	adiw	r24, 0x1d	; 29
     f40:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
     f44:	08 ec       	ldi	r16, 0xC8	; 200
     f46:	10 e0       	ldi	r17, 0x00	; 0
     f48:	2e ee       	ldi	r18, 0xEE	; 238
     f4a:	3c e0       	ldi	r19, 0x0C	; 12
     f4c:	47 ee       	ldi	r20, 0xE7	; 231
     f4e:	5c e0       	ldi	r21, 0x0C	; 12
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	87 eb       	ldi	r24, 0xB7	; 183
     f54:	9c e0       	ldi	r25, 0x0C	; 12
     f56:	0e 94 c0 1a 	call	0x3580	; 0x3580 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j>
     f5a:	80 93 ef 0c 	sts	0x0CEF, r24	; 0x800cef <success>
     f5e:	88 23       	and	r24, r24
     f60:	09 f4       	brne	.+2      	; 0xf64 <_Z14leggiTAG_Mezzob+0x54>
     f62:	9d c0       	rjmp	.+314    	; 0x109e <_Z14leggiTAG_Mezzob+0x18e>
     f64:	4e e1       	ldi	r20, 0x1E	; 30
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	8b de       	rcall	.-746    	; 0xc86 <_Z6Buzzerhm>
     f70:	80 91 ee 0c 	lds	r24, 0x0CEE	; 0x800cee <uidLength>
     f74:	84 30       	cpi	r24, 0x04	; 4
     f76:	09 f0       	breq	.+2      	; 0xf7a <_Z14leggiTAG_Mezzob+0x6a>
     f78:	8c c0       	rjmp	.+280    	; 0x1092 <_Z14leggiTAG_Mezzob+0x182>
     f7a:	86 e0       	ldi	r24, 0x06	; 6
     f7c:	e4 e4       	ldi	r30, 0x44	; 68
     f7e:	f1 e0       	ldi	r31, 0x01	; 1
     f80:	de 01       	movw	r26, r28
     f82:	57 96       	adiw	r26, 0x17	; 23
     f84:	01 90       	ld	r0, Z+
     f86:	0d 92       	st	X+, r0
     f88:	8a 95       	dec	r24
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <_Z14leggiTAG_Mezzob+0x74>
     f8c:	ce 01       	movw	r24, r28
     f8e:	47 96       	adiw	r24, 0x17	; 23
     f90:	6c 01       	movw	r12, r24
     f92:	e1 2c       	mov	r14, r1
     f94:	04 e0       	ldi	r16, 0x04	; 4
     f96:	10 e0       	ldi	r17, 0x00	; 0
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	44 e0       	ldi	r20, 0x04	; 4
     f9e:	67 ee       	ldi	r22, 0xE7	; 231
     fa0:	7c e0       	ldi	r23, 0x0C	; 12
     fa2:	87 eb       	ldi	r24, 0xB7	; 183
     fa4:	9c e0       	ldi	r25, 0x0C	; 12
     fa6:	0e 94 14 1b 	call	0x3628	; 0x3628 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     faa:	80 93 ef 0c 	sts	0x0CEF, r24	; 0x800cef <success>
     fae:	88 23       	and	r24, r24
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <_Z14leggiTAG_Mezzob+0xa4>
     fb2:	5f c0       	rjmp	.+190    	; 0x1072 <_Z14leggiTAG_Mezzob+0x162>
     fb4:	ff 20       	and	r15, r15
     fb6:	99 f0       	breq	.+38     	; 0xfde <_Z14leggiTAG_Mezzob+0xce>
     fb8:	80 e1       	ldi	r24, 0x10	; 16
     fba:	e9 eb       	ldi	r30, 0xB9	; 185
     fbc:	f9 e0       	ldi	r31, 0x09	; 9
     fbe:	de 01       	movw	r26, r28
     fc0:	11 96       	adiw	r26, 0x01	; 1
     fc2:	01 90       	ld	r0, Z+
     fc4:	0d 92       	st	X+, r0
     fc6:	8a 95       	dec	r24
     fc8:	e1 f7       	brne	.-8      	; 0xfc2 <_Z14leggiTAG_Mezzob+0xb2>
     fca:	ae 01       	movw	r20, r28
     fcc:	4f 5f       	subi	r20, 0xFF	; 255
     fce:	5f 4f       	sbci	r21, 0xFF	; 255
     fd0:	64 e0       	ldi	r22, 0x04	; 4
     fd2:	87 eb       	ldi	r24, 0xB7	; 183
     fd4:	9c e0       	ldi	r25, 0x0C	; 12
     fd6:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh>
     fda:	80 93 ef 0c 	sts	0x0CEF, r24	; 0x800cef <success>
     fde:	ae 01       	movw	r20, r28
     fe0:	4f 5f       	subi	r20, 0xFF	; 255
     fe2:	5f 4f       	sbci	r21, 0xFF	; 255
     fe4:	64 e0       	ldi	r22, 0x04	; 4
     fe6:	87 eb       	ldi	r24, 0xB7	; 183
     fe8:	9c e0       	ldi	r25, 0x0C	; 12
     fea:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh>
     fee:	80 93 ef 0c 	sts	0x0CEF, r24	; 0x800cef <success>
     ff2:	88 23       	and	r24, r24
     ff4:	89 f1       	breq	.+98     	; 0x1058 <_Z14leggiTAG_Mezzob+0x148>
     ff6:	66 e6       	ldi	r22, 0x66	; 102
     ff8:	73 e0       	ldi	r23, 0x03	; 3
     ffa:	8d e5       	ldi	r24, 0x5D	; 93
     ffc:	9e e0       	ldi	r25, 0x0E	; 14
     ffe:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
    1002:	be 01       	movw	r22, r28
    1004:	6f 5f       	subi	r22, 0xFF	; 255
    1006:	7f 4f       	sbci	r23, 0xFF	; 255
    1008:	ce 01       	movw	r24, r28
    100a:	41 96       	adiw	r24, 0x11	; 17
    100c:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1010:	be 01       	movw	r22, r28
    1012:	6f 5e       	subi	r22, 0xEF	; 239
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	8d e5       	ldi	r24, 0x5D	; 93
    1018:	9e e0       	ldi	r25, 0x0E	; 14
    101a:	0e 94 24 3a 	call	0x7448	; 0x7448 <_ZN5Print7printlnERK6String>
    101e:	8d 89       	ldd	r24, Y+21	; 0x15
    1020:	9e 89       	ldd	r25, Y+22	; 0x16
    1022:	06 97       	sbiw	r24, 0x06	; 6
    1024:	59 f4       	brne	.+22     	; 0x103c <_Z14leggiTAG_Mezzob+0x12c>
    1026:	be 01       	movw	r22, r28
    1028:	6f 5e       	subi	r22, 0xEF	; 239
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	c5 01       	movw	r24, r10
    102e:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <_ZN6StringC1EOS_>
    1032:	ce 01       	movw	r24, r28
    1034:	41 96       	adiw	r24, 0x11	; 17
    1036:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    103a:	37 c0       	rjmp	.+110    	; 0x10aa <_Z14leggiTAG_Mezzob+0x19a>
    103c:	9f ef       	ldi	r25, 0xFF	; 255
    103e:	21 ee       	ldi	r18, 0xE1	; 225
    1040:	84 e0       	ldi	r24, 0x04	; 4
    1042:	91 50       	subi	r25, 0x01	; 1
    1044:	20 40       	sbci	r18, 0x00	; 0
    1046:	80 40       	sbci	r24, 0x00	; 0
    1048:	e1 f7       	brne	.-8      	; 0x1042 <_Z14leggiTAG_Mezzob+0x132>
    104a:	00 c0       	rjmp	.+0      	; 0x104c <_Z14leggiTAG_Mezzob+0x13c>
    104c:	00 00       	nop
    104e:	ce 01       	movw	r24, r28
    1050:	41 96       	adiw	r24, 0x11	; 17
    1052:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    1056:	1d c0       	rjmp	.+58     	; 0x1092 <_Z14leggiTAG_Mezzob+0x182>
    1058:	8e ec       	ldi	r24, 0xCE	; 206
    105a:	9c e0       	ldi	r25, 0x0C	; 12
    105c:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN3LCD5clearEv>
    1060:	41 e0       	ldi	r20, 0x01	; 1
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	8e ec       	ldi	r24, 0xCE	; 206
    1066:	9c e0       	ldi	r25, 0x0C	; 12
    1068:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN3LCD9setCursorEhh>
    106c:	64 e7       	ldi	r22, 0x74	; 116
    106e:	73 e0       	ldi	r23, 0x03	; 3
    1070:	0c c0       	rjmp	.+24     	; 0x108a <_Z14leggiTAG_Mezzob+0x17a>
    1072:	8e ec       	ldi	r24, 0xCE	; 206
    1074:	9c e0       	ldi	r25, 0x0C	; 12
    1076:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN3LCD5clearEv>
    107a:	41 e0       	ldi	r20, 0x01	; 1
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	8e ec       	ldi	r24, 0xCE	; 206
    1080:	9c e0       	ldi	r25, 0x0C	; 12
    1082:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN3LCD9setCursorEhh>
    1086:	6e e7       	ldi	r22, 0x7E	; 126
    1088:	73 e0       	ldi	r23, 0x03	; 3
    108a:	8e ec       	ldi	r24, 0xCE	; 206
    108c:	9c e0       	ldi	r25, 0x0C	; 12
    108e:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
    1092:	6b eb       	ldi	r22, 0xBB	; 187
    1094:	71 e0       	ldi	r23, 0x01	; 1
    1096:	8d e5       	ldi	r24, 0x5D	; 93
    1098:	9e e0       	ldi	r25, 0x0E	; 14
    109a:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
    109e:	be 01       	movw	r22, r28
    10a0:	63 5e       	subi	r22, 0xE3	; 227
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	c5 01       	movw	r24, r10
    10a6:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <_ZN6StringC1EOS_>
    10aa:	ce 01       	movw	r24, r28
    10ac:	4d 96       	adiw	r24, 0x1d	; 29
    10ae:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    10b2:	c5 01       	movw	r24, r10
    10b4:	a2 96       	adiw	r28, 0x22	; 34
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	cf 90       	pop	r12
    10d0:	bf 90       	pop	r11
    10d2:	af 90       	pop	r10
    10d4:	08 95       	ret

000010d6 <_Z14GetCodeRfidATev>:
    10d6:	cf 92       	push	r12
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	64 97       	sbiw	r28, 0x14	; 20
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	7c 01       	movw	r14, r24
    10f8:	ce 01       	movw	r24, r28
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	6c 01       	movw	r12, r24
    10fe:	87 e0       	ldi	r24, 0x07	; 7
    1100:	f6 01       	movw	r30, r12
    1102:	11 92       	st	Z+, r1
    1104:	8a 95       	dec	r24
    1106:	e9 f7       	brne	.-6      	; 0x1102 <_Z14GetCodeRfidATev+0x2c>
    1108:	66 e8       	ldi	r22, 0x86	; 134
    110a:	73 e0       	ldi	r23, 0x03	; 3
    110c:	c7 01       	movw	r24, r14
    110e:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1112:	00 e0       	ldi	r16, 0x00	; 0
    1114:	10 e0       	ldi	r17, 0x00	; 0
    1116:	9e 01       	movw	r18, r28
    1118:	2c 5e       	subi	r18, 0xEC	; 236
    111a:	3f 4f       	sbci	r19, 0xFF	; 255
    111c:	a6 01       	movw	r20, r12
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	87 eb       	ldi	r24, 0xB7	; 183
    1122:	9c e0       	ldi	r25, 0x0C	; 12
    1124:	0e 94 c0 1a 	call	0x3580	; 0x3580 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j>
    1128:	88 23       	and	r24, r24
    112a:	59 f1       	breq	.+86     	; 0x1182 <_Z14GetCodeRfidATev+0xac>
    112c:	0c 89       	ldd	r16, Y+20	; 0x14
    112e:	10 e0       	ldi	r17, 0x00	; 0
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	a6 01       	movw	r20, r12
    1136:	67 eb       	ldi	r22, 0xB7	; 183
    1138:	7c e0       	ldi	r23, 0x0C	; 12
    113a:	ce 01       	movw	r24, r28
    113c:	0e 96       	adiw	r24, 0x0e	; 14
    113e:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <_ZN14Adafruit_PN53210GetHexCodeEPKhm>
    1142:	ce 01       	movw	r24, r28
    1144:	0e 96       	adiw	r24, 0x0e	; 14
    1146:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <_ZN6String4trimEv>
    114a:	28 e0       	ldi	r18, 0x08	; 8
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	be 01       	movw	r22, r28
    1154:	62 5f       	subi	r22, 0xF2	; 242
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	ce 01       	movw	r24, r28
    115a:	08 96       	adiw	r24, 0x08	; 8
    115c:	0e 94 a6 3e 	call	0x7d4c	; 0x7d4c <_ZNK6String9substringEjj>
    1160:	be 01       	movw	r22, r28
    1162:	68 5f       	subi	r22, 0xF8	; 248
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
    1166:	c7 01       	movw	r24, r14
    1168:	0e 94 4e 3d 	call	0x7a9c	; 0x7a9c <_ZN6StringaSEOS_>
    116c:	ce 01       	movw	r24, r28
    116e:	08 96       	adiw	r24, 0x08	; 8
    1170:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	80 93 e6 0c 	sts	0x0CE6, r24	; 0x800ce6 <alreadyTimbrata>
    117a:	ce 01       	movw	r24, r28
    117c:	0e 96       	adiw	r24, 0x0e	; 14
    117e:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    1182:	c7 01       	movw	r24, r14
    1184:	64 96       	adiw	r28, 0x14	; 20
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	df 90       	pop	r13
    119e:	cf 90       	pop	r12
    11a0:	08 95       	ret

000011a2 <_Z15abilitaPulsantiv>:
    11a2:	57 98       	cbi	0x0a, 7	; 10
    11a4:	56 98       	cbi	0x0a, 6	; 10
    11a6:	88 e0       	ldi	r24, 0x08	; 8
    11a8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    11ac:	80 ec       	ldi	r24, 0xC0	; 192
    11ae:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    11b2:	78 94       	sei
    11b4:	08 95       	ret

000011b6 <_Z22abilitaContattiPistolav>:
    11b6:	09 98       	cbi	0x01, 1	; 1
    11b8:	0a 98       	cbi	0x01, 2	; 1
    11ba:	08 95       	ret

000011bc <_Z13abilitaPulserc>:
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    11c2:	84 34       	cpi	r24, 0x44	; 68
    11c4:	19 f4       	brne	.+6      	; 0x11cc <_Z13abilitaPulserc+0x10>
    11c6:	0d 98       	cbi	0x01, 5	; 1
    11c8:	80 e2       	ldi	r24, 0x20	; 32
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <_Z13abilitaPulserc+0x14>
    11cc:	0e 98       	cbi	0x01, 6	; 1
    11ce:	80 e4       	ldi	r24, 0x40	; 64
    11d0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    11d4:	78 94       	sei
    11d6:	08 95       	ret

000011d8 <_Z14impulsiToLitrii>:
    11d8:	cf 92       	push	r12
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	bc 01       	movw	r22, r24
    11e2:	99 0f       	add	r25, r25
    11e4:	88 0b       	sbc	r24, r24
    11e6:	99 0b       	sbc	r25, r25
    11e8:	0e 94 e2 37 	call	0x6fc4	; 0x6fc4 <__floatsisf>
    11ec:	6b 01       	movw	r12, r22
    11ee:	7c 01       	movw	r14, r24
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	a9 01       	movw	r20, r18
    11f6:	0e 94 74 37 	call	0x6ee8	; 0x6ee8 <__cmpsf2>
    11fa:	87 ff       	sbrs	r24, 7
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <_Z14impulsiToLitrii+0x2c>
    11fe:	c1 2c       	mov	r12, r1
    1200:	d1 2c       	mov	r13, r1
    1202:	76 01       	movw	r14, r12
    1204:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <ImpulsiLitro>
    1208:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <ImpulsiLitro+0x1>
    120c:	07 2e       	mov	r0, r23
    120e:	00 0c       	add	r0, r0
    1210:	88 0b       	sbc	r24, r24
    1212:	99 0b       	sbc	r25, r25
    1214:	0e 94 e2 37 	call	0x6fc4	; 0x6fc4 <__floatsisf>
    1218:	9b 01       	movw	r18, r22
    121a:	ac 01       	movw	r20, r24
    121c:	c7 01       	movw	r24, r14
    121e:	b6 01       	movw	r22, r12
    1220:	0e 94 78 37 	call	0x6ef0	; 0x6ef0 <__divsf3>
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	08 95       	ret

0000122e <_Z18Rele_Abilitazione1ii>:
    122e:	3f 9a       	sbi	0x07, 7	; 7
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	71 f0       	breq	.+28     	; 0x1252 <_Z18Rele_Abilitazione1ii+0x24>
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	91 05       	cpc	r25, r1
    123a:	e1 f0       	breq	.+56     	; 0x1274 <_Z18Rele_Abilitazione1ii+0x46>
    123c:	89 2b       	or	r24, r25
    123e:	89 f5       	brne	.+98     	; 0x12a2 <_Z18Rele_Abilitazione1ii+0x74>
    1240:	47 98       	cbi	0x08, 7	; 8
    1242:	2f ef       	ldi	r18, 0xFF	; 255
    1244:	30 e7       	ldi	r19, 0x70	; 112
    1246:	42 e0       	ldi	r20, 0x02	; 2
    1248:	21 50       	subi	r18, 0x01	; 1
    124a:	30 40       	sbci	r19, 0x00	; 0
    124c:	40 40       	sbci	r20, 0x00	; 0
    124e:	e1 f7       	brne	.-8      	; 0x1248 <_Z18Rele_Abilitazione1ii+0x1a>
    1250:	0e c0       	rjmp	.+28     	; 0x126e <_Z18Rele_Abilitazione1ii+0x40>
    1252:	28 b1       	in	r18, 0x08	; 8
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <_Z18Rele_Abilitazione1ii+0x2a>
    1256:	88 0f       	add	r24, r24
    1258:	6a 95       	dec	r22
    125a:	ea f7       	brpl	.-6      	; 0x1256 <_Z18Rele_Abilitazione1ii+0x28>
    125c:	82 2b       	or	r24, r18
    125e:	88 b9       	out	0x08, r24	; 8
    1260:	8f ef       	ldi	r24, 0xFF	; 255
    1262:	90 e7       	ldi	r25, 0x70	; 112
    1264:	22 e0       	ldi	r18, 0x02	; 2
    1266:	81 50       	subi	r24, 0x01	; 1
    1268:	90 40       	sbci	r25, 0x00	; 0
    126a:	20 40       	sbci	r18, 0x00	; 0
    126c:	e1 f7       	brne	.-8      	; 0x1266 <_Z18Rele_Abilitazione1ii+0x38>
    126e:	00 c0       	rjmp	.+0      	; 0x1270 <_Z18Rele_Abilitazione1ii+0x42>
    1270:	00 00       	nop
    1272:	08 95       	ret
    1274:	28 b1       	in	r18, 0x08	; 8
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	01 c0       	rjmp	.+2      	; 0x127e <_Z18Rele_Abilitazione1ii+0x50>
    127c:	88 0f       	add	r24, r24
    127e:	6a 95       	dec	r22
    1280:	ea f7       	brpl	.-6      	; 0x127c <_Z18Rele_Abilitazione1ii+0x4e>
    1282:	98 2f       	mov	r25, r24
    1284:	90 95       	com	r25
    1286:	92 23       	and	r25, r18
    1288:	98 b9       	out	0x08, r25	; 8
    128a:	3f ef       	ldi	r19, 0xFF	; 255
    128c:	45 ea       	ldi	r20, 0xA5	; 165
    128e:	2e e0       	ldi	r18, 0x0E	; 14
    1290:	31 50       	subi	r19, 0x01	; 1
    1292:	40 40       	sbci	r20, 0x00	; 0
    1294:	20 40       	sbci	r18, 0x00	; 0
    1296:	e1 f7       	brne	.-8      	; 0x1290 <_Z18Rele_Abilitazione1ii+0x62>
    1298:	00 c0       	rjmp	.+0      	; 0x129a <_Z18Rele_Abilitazione1ii+0x6c>
    129a:	00 00       	nop
    129c:	98 b1       	in	r25, 0x08	; 8
    129e:	89 2b       	or	r24, r25
    12a0:	88 b9       	out	0x08, r24	; 8
    12a2:	08 95       	ret

000012a4 <_Z18Rele_Abilitazione2ii>:
    12a4:	0f 9a       	sbi	0x01, 7	; 1
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	91 05       	cpc	r25, r1
    12aa:	b9 f0       	breq	.+46     	; 0x12da <_Z18Rele_Abilitazione2ii+0x36>
    12ac:	82 30       	cpi	r24, 0x02	; 2
    12ae:	91 05       	cpc	r25, r1
    12b0:	29 f1       	breq	.+74     	; 0x12fc <_Z18Rele_Abilitazione2ii+0x58>
    12b2:	89 2b       	or	r24, r25
    12b4:	d1 f5       	brne	.+116    	; 0x132a <_Z18Rele_Abilitazione2ii+0x86>
    12b6:	22 b1       	in	r18, 0x02	; 2
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <_Z18Rele_Abilitazione2ii+0x1c>
    12be:	88 0f       	add	r24, r24
    12c0:	6a 95       	dec	r22
    12c2:	ea f7       	brpl	.-6      	; 0x12be <_Z18Rele_Abilitazione2ii+0x1a>
    12c4:	80 95       	com	r24
    12c6:	82 23       	and	r24, r18
    12c8:	82 b9       	out	0x02, r24	; 2
    12ca:	2f ef       	ldi	r18, 0xFF	; 255
    12cc:	30 e7       	ldi	r19, 0x70	; 112
    12ce:	42 e0       	ldi	r20, 0x02	; 2
    12d0:	21 50       	subi	r18, 0x01	; 1
    12d2:	30 40       	sbci	r19, 0x00	; 0
    12d4:	40 40       	sbci	r20, 0x00	; 0
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <_Z18Rele_Abilitazione2ii+0x2c>
    12d8:	0e c0       	rjmp	.+28     	; 0x12f6 <_Z18Rele_Abilitazione2ii+0x52>
    12da:	22 b1       	in	r18, 0x02	; 2
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <_Z18Rele_Abilitazione2ii+0x3c>
    12de:	88 0f       	add	r24, r24
    12e0:	6a 95       	dec	r22
    12e2:	ea f7       	brpl	.-6      	; 0x12de <_Z18Rele_Abilitazione2ii+0x3a>
    12e4:	82 2b       	or	r24, r18
    12e6:	82 b9       	out	0x02, r24	; 2
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	90 e7       	ldi	r25, 0x70	; 112
    12ec:	22 e0       	ldi	r18, 0x02	; 2
    12ee:	81 50       	subi	r24, 0x01	; 1
    12f0:	90 40       	sbci	r25, 0x00	; 0
    12f2:	20 40       	sbci	r18, 0x00	; 0
    12f4:	e1 f7       	brne	.-8      	; 0x12ee <_Z18Rele_Abilitazione2ii+0x4a>
    12f6:	00 c0       	rjmp	.+0      	; 0x12f8 <_Z18Rele_Abilitazione2ii+0x54>
    12f8:	00 00       	nop
    12fa:	08 95       	ret
    12fc:	22 b1       	in	r18, 0x02	; 2
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	01 c0       	rjmp	.+2      	; 0x1306 <_Z18Rele_Abilitazione2ii+0x62>
    1304:	88 0f       	add	r24, r24
    1306:	6a 95       	dec	r22
    1308:	ea f7       	brpl	.-6      	; 0x1304 <_Z18Rele_Abilitazione2ii+0x60>
    130a:	98 2f       	mov	r25, r24
    130c:	90 95       	com	r25
    130e:	92 23       	and	r25, r18
    1310:	92 b9       	out	0x02, r25	; 2
    1312:	3f ef       	ldi	r19, 0xFF	; 255
    1314:	45 ea       	ldi	r20, 0xA5	; 165
    1316:	2e e0       	ldi	r18, 0x0E	; 14
    1318:	31 50       	subi	r19, 0x01	; 1
    131a:	40 40       	sbci	r20, 0x00	; 0
    131c:	20 40       	sbci	r18, 0x00	; 0
    131e:	e1 f7       	brne	.-8      	; 0x1318 <_Z18Rele_Abilitazione2ii+0x74>
    1320:	00 c0       	rjmp	.+0      	; 0x1322 <_Z18Rele_Abilitazione2ii+0x7e>
    1322:	00 00       	nop
    1324:	92 b1       	in	r25, 0x02	; 2
    1326:	89 2b       	or	r24, r25
    1328:	82 b9       	out	0x02, r24	; 2
    132a:	08 95       	ret

0000132c <_Z12Control_WIFIi>:
    132c:	23 9a       	sbi	0x04, 3	; 4
    132e:	2f ef       	ldi	r18, 0xFF	; 255
    1330:	36 e7       	ldi	r19, 0x76	; 118
    1332:	41 e0       	ldi	r20, 0x01	; 1
    1334:	21 50       	subi	r18, 0x01	; 1
    1336:	30 40       	sbci	r19, 0x00	; 0
    1338:	40 40       	sbci	r20, 0x00	; 0
    133a:	e1 f7       	brne	.-8      	; 0x1334 <_Z12Control_WIFIi+0x8>
    133c:	00 c0       	rjmp	.+0      	; 0x133e <_Z12Control_WIFIi+0x12>
    133e:	00 00       	nop
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	91 05       	cpc	r25, r1
    1344:	11 f4       	brne	.+4      	; 0x134a <_Z12Control_WIFIi+0x1e>
    1346:	2b 9a       	sbi	0x05, 3	; 5
    1348:	08 95       	ret
    134a:	89 2b       	or	r24, r25
    134c:	09 f4       	brne	.+2      	; 0x1350 <_Z12Control_WIFIi+0x24>
    134e:	2b 98       	cbi	0x05, 3	; 5
    1350:	08 95       	ret

00001352 <_Z32CompletoRifornimentoPerInvioDatii>:
    1352:	10 92 a4 0c 	sts	0x0CA4, r1	; 0x800ca4 <impulsi+0x1>
    1356:	10 92 a3 0c 	sts	0x0CA3, r1	; 0x800ca3 <impulsi>
    135a:	10 92 aa 0c 	sts	0x0CAA, r1	; 0x800caa <Litri+0x1>
    135e:	10 92 a9 0c 	sts	0x0CA9, r1	; 0x800ca9 <Litri>
    1362:	68 e8       	ldi	r22, 0x88	; 136
    1364:	77 e0       	ldi	r23, 0x07	; 7
    1366:	8b e5       	ldi	r24, 0x5B	; 91
    1368:	9c e0       	ldi	r25, 0x0C	; 12
    136a:	0e 94 24 3e 	call	0x7c48	; 0x7c48 <_ZN6String6concatEPKc>
    136e:	2f ef       	ldi	r18, 0xFF	; 255
    1370:	81 ee       	ldi	r24, 0xE1	; 225
    1372:	94 e0       	ldi	r25, 0x04	; 4
    1374:	21 50       	subi	r18, 0x01	; 1
    1376:	80 40       	sbci	r24, 0x00	; 0
    1378:	90 40       	sbci	r25, 0x00	; 0
    137a:	e1 f7       	brne	.-8      	; 0x1374 <_Z32CompletoRifornimentoPerInvioDatii+0x22>
    137c:	00 c0       	rjmp	.+0      	; 0x137e <_Z32CompletoRifornimentoPerInvioDatii+0x2c>
    137e:	00 00       	nop
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	44 e6       	ldi	r20, 0x64	; 100
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	6f ed       	ldi	r22, 0xDF	; 223
    138a:	7b e0       	ldi	r23, 0x0B	; 11
    138c:	8b e5       	ldi	r24, 0x5B	; 91
    138e:	9c e0       	ldi	r25, 0x0C	; 12
    1390:	0c 94 78 3e 	jmp	0x7cf0	; 0x7cf0 <_ZNK6String8getBytesEPhjj>

00001394 <__vector_4>:
    1394:	1f 92       	push	r1
    1396:	0f 92       	push	r0
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	0f 92       	push	r0
    139c:	11 24       	eor	r1, r1
    139e:	8f 93       	push	r24
    13a0:	9f 93       	push	r25
    13a2:	05 9b       	sbis	0x00, 5	; 0
    13a4:	09 c0       	rjmp	.+18     	; 0x13b8 <__vector_4+0x24>
    13a6:	80 91 a3 0c 	lds	r24, 0x0CA3	; 0x800ca3 <impulsi>
    13aa:	90 91 a4 0c 	lds	r25, 0x0CA4	; 0x800ca4 <impulsi+0x1>
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	90 93 a4 0c 	sts	0x0CA4, r25	; 0x800ca4 <impulsi+0x1>
    13b4:	80 93 a3 0c 	sts	0x0CA3, r24	; 0x800ca3 <impulsi>
    13b8:	06 9b       	sbis	0x00, 6	; 0
    13ba:	09 c0       	rjmp	.+18     	; 0x13ce <__vector_4+0x3a>
    13bc:	80 91 a3 0c 	lds	r24, 0x0CA3	; 0x800ca3 <impulsi>
    13c0:	90 91 a4 0c 	lds	r25, 0x0CA4	; 0x800ca4 <impulsi+0x1>
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	90 93 a4 0c 	sts	0x0CA4, r25	; 0x800ca4 <impulsi+0x1>
    13ca:	80 93 a3 0c 	sts	0x0CA3, r24	; 0x800ca3 <impulsi>
    13ce:	9f 91       	pop	r25
    13d0:	8f 91       	pop	r24
    13d2:	0f 90       	pop	r0
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	0f 90       	pop	r0
    13d8:	1f 90       	pop	r1
    13da:	18 95       	reti

000013dc <__vector_7>:
    13dc:	1f 92       	push	r1
    13de:	0f 92       	push	r0
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	0f 92       	push	r0
    13e4:	11 24       	eor	r1, r1
    13e6:	0b b6       	in	r0, 0x3b	; 59
    13e8:	0f 92       	push	r0
    13ea:	2f 93       	push	r18
    13ec:	3f 93       	push	r19
    13ee:	4f 93       	push	r20
    13f0:	5f 93       	push	r21
    13f2:	6f 93       	push	r22
    13f4:	7f 93       	push	r23
    13f6:	8f 93       	push	r24
    13f8:	9f 93       	push	r25
    13fa:	af 93       	push	r26
    13fc:	bf 93       	push	r27
    13fe:	ef 93       	push	r30
    1400:	ff 93       	push	r31
    1402:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <stato_procedura>
    1406:	90 91 a6 0c 	lds	r25, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    140a:	04 97       	sbiw	r24, 0x04	; 4
    140c:	09 f0       	breq	.+2      	; 0x1410 <__vector_7+0x34>
    140e:	84 c0       	rjmp	.+264    	; 0x1518 <__vector_7+0x13c>
    1410:	4e 9b       	sbis	0x09, 6	; 9
    1412:	29 c0       	rjmp	.+82     	; 0x1466 <__vector_7+0x8a>
    1414:	80 91 ff 0c 	lds	r24, 0x0CFF	; 0x800cff <intConsecutivePresses>
    1418:	90 91 00 0d 	lds	r25, 0x0D00	; 0x800d00 <intConsecutivePresses+0x1>
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	90 93 00 0d 	sts	0x0D00, r25	; 0x800d00 <intConsecutivePresses+0x1>
    1422:	80 93 ff 0c 	sts	0x0CFF, r24	; 0x800cff <intConsecutivePresses>
    1426:	80 91 ff 0c 	lds	r24, 0x0CFF	; 0x800cff <intConsecutivePresses>
    142a:	90 91 00 0d 	lds	r25, 0x0D00	; 0x800d00 <intConsecutivePresses+0x1>
    142e:	18 16       	cp	r1, r24
    1430:	19 06       	cpc	r1, r25
    1432:	84 f5       	brge	.+96     	; 0x1494 <__vector_7+0xb8>
    1434:	82 e4       	ldi	r24, 0x42	; 66
    1436:	c2 de       	rcall	.-636    	; 0x11bc <_Z13abilitaPulserc>
    1438:	67 e0       	ldi	r22, 0x07	; 7
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	31 df       	rcall	.-414    	; 0x12a4 <_Z18Rele_Abilitazione2ii>
    1442:	61 ee       	ldi	r22, 0xE1	; 225
    1444:	71 e0       	ldi	r23, 0x01	; 1
    1446:	83 e7       	ldi	r24, 0x73	; 115
    1448:	9c e0       	ldi	r25, 0x0C	; 12
    144a:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    144e:	65 e9       	ldi	r22, 0x95	; 149
    1450:	73 e0       	ldi	r23, 0x03	; 3
    1452:	81 eb       	ldi	r24, 0xB1	; 177
    1454:	9c e0       	ldi	r25, 0x0C	; 12
    1456:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    145a:	6a e0       	ldi	r22, 0x0A	; 10
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	38 dd       	rcall	.-1424   	; 0xed4 <_Z11avanzaStatom>
    1464:	0f c0       	rjmp	.+30     	; 0x1484 <__vector_7+0xa8>
    1466:	80 91 fd 0c 	lds	r24, 0x0CFD	; 0x800cfd <intConsecutiveNonPresses>
    146a:	90 91 fe 0c 	lds	r25, 0x0CFE	; 0x800cfe <intConsecutiveNonPresses+0x1>
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	90 93 fe 0c 	sts	0x0CFE, r25	; 0x800cfe <intConsecutiveNonPresses+0x1>
    1474:	80 93 fd 0c 	sts	0x0CFD, r24	; 0x800cfd <intConsecutiveNonPresses>
    1478:	80 91 fd 0c 	lds	r24, 0x0CFD	; 0x800cfd <intConsecutiveNonPresses>
    147c:	90 91 fe 0c 	lds	r25, 0x0CFE	; 0x800cfe <intConsecutiveNonPresses+0x1>
    1480:	02 97       	sbiw	r24, 0x02	; 2
    1482:	44 f0       	brlt	.+16     	; 0x1494 <__vector_7+0xb8>
    1484:	10 92 00 0d 	sts	0x0D00, r1	; 0x800d00 <intConsecutivePresses+0x1>
    1488:	10 92 ff 0c 	sts	0x0CFF, r1	; 0x800cff <intConsecutivePresses>
    148c:	10 92 fe 0c 	sts	0x0CFE, r1	; 0x800cfe <intConsecutiveNonPresses+0x1>
    1490:	10 92 fd 0c 	sts	0x0CFD, r1	; 0x800cfd <intConsecutiveNonPresses>
    1494:	4f 9b       	sbis	0x09, 7	; 9
    1496:	29 c0       	rjmp	.+82     	; 0x14ea <__vector_7+0x10e>
    1498:	80 91 ff 0c 	lds	r24, 0x0CFF	; 0x800cff <intConsecutivePresses>
    149c:	90 91 00 0d 	lds	r25, 0x0D00	; 0x800d00 <intConsecutivePresses+0x1>
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	90 93 00 0d 	sts	0x0D00, r25	; 0x800d00 <intConsecutivePresses+0x1>
    14a6:	80 93 ff 0c 	sts	0x0CFF, r24	; 0x800cff <intConsecutivePresses>
    14aa:	80 91 ff 0c 	lds	r24, 0x0CFF	; 0x800cff <intConsecutivePresses>
    14ae:	90 91 00 0d 	lds	r25, 0x0D00	; 0x800d00 <intConsecutivePresses+0x1>
    14b2:	18 16       	cp	r1, r24
    14b4:	19 06       	cpc	r1, r25
    14b6:	84 f5       	brge	.+96     	; 0x1518 <__vector_7+0x13c>
    14b8:	84 e4       	ldi	r24, 0x44	; 68
    14ba:	80 de       	rcall	.-768    	; 0x11bc <_Z13abilitaPulserc>
    14bc:	67 e0       	ldi	r22, 0x07	; 7
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	b4 de       	rcall	.-664    	; 0x122e <_Z18Rele_Abilitazione1ii>
    14c6:	6d e9       	ldi	r22, 0x9D	; 157
    14c8:	73 e0       	ldi	r23, 0x03	; 3
    14ca:	83 e7       	ldi	r24, 0x73	; 115
    14cc:	9c e0       	ldi	r25, 0x0C	; 12
    14ce:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    14d2:	6f e9       	ldi	r22, 0x9F	; 159
    14d4:	73 e0       	ldi	r23, 0x03	; 3
    14d6:	81 eb       	ldi	r24, 0xB1	; 177
    14d8:	9c e0       	ldi	r25, 0x0C	; 12
    14da:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    14de:	6a e0       	ldi	r22, 0x0A	; 10
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	f6 dc       	rcall	.-1556   	; 0xed4 <_Z11avanzaStatom>
    14e8:	0f c0       	rjmp	.+30     	; 0x1508 <__vector_7+0x12c>
    14ea:	80 91 fd 0c 	lds	r24, 0x0CFD	; 0x800cfd <intConsecutiveNonPresses>
    14ee:	90 91 fe 0c 	lds	r25, 0x0CFE	; 0x800cfe <intConsecutiveNonPresses+0x1>
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	90 93 fe 0c 	sts	0x0CFE, r25	; 0x800cfe <intConsecutiveNonPresses+0x1>
    14f8:	80 93 fd 0c 	sts	0x0CFD, r24	; 0x800cfd <intConsecutiveNonPresses>
    14fc:	80 91 fd 0c 	lds	r24, 0x0CFD	; 0x800cfd <intConsecutiveNonPresses>
    1500:	90 91 fe 0c 	lds	r25, 0x0CFE	; 0x800cfe <intConsecutiveNonPresses+0x1>
    1504:	02 97       	sbiw	r24, 0x02	; 2
    1506:	44 f0       	brlt	.+16     	; 0x1518 <__vector_7+0x13c>
    1508:	10 92 00 0d 	sts	0x0D00, r1	; 0x800d00 <intConsecutivePresses+0x1>
    150c:	10 92 ff 0c 	sts	0x0CFF, r1	; 0x800cff <intConsecutivePresses>
    1510:	10 92 fe 0c 	sts	0x0CFE, r1	; 0x800cfe <intConsecutiveNonPresses+0x1>
    1514:	10 92 fd 0c 	sts	0x0CFD, r1	; 0x800cfd <intConsecutiveNonPresses>
    1518:	ff 91       	pop	r31
    151a:	ef 91       	pop	r30
    151c:	bf 91       	pop	r27
    151e:	af 91       	pop	r26
    1520:	9f 91       	pop	r25
    1522:	8f 91       	pop	r24
    1524:	7f 91       	pop	r23
    1526:	6f 91       	pop	r22
    1528:	5f 91       	pop	r21
    152a:	4f 91       	pop	r20
    152c:	3f 91       	pop	r19
    152e:	2f 91       	pop	r18
    1530:	0f 90       	pop	r0
    1532:	0b be       	out	0x3b, r0	; 59
    1534:	0f 90       	pop	r0
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	0f 90       	pop	r0
    153a:	1f 90       	pop	r1
    153c:	18 95       	reti

0000153e <_GLOBAL__sub_I_intConsecutivePresses>:
    153e:	8f 92       	push	r8
    1540:	af 92       	push	r10
    1542:	cf 92       	push	r12
    1544:	ef 92       	push	r14
    1546:	0f 93       	push	r16
    1548:	00 e0       	ldi	r16, 0x00	; 0
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	40 e0       	ldi	r20, 0x00	; 0
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	9d e0       	ldi	r25, 0x0D	; 13
    1554:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <_ZN9IPAddressC1Ehhhh>
    1558:	6b eb       	ldi	r22, 0xBB	; 187
    155a:	71 e0       	ldi	r23, 0x01	; 1
    155c:	80 ef       	ldi	r24, 0xF0	; 240
    155e:	9c e0       	ldi	r25, 0x0C	; 12
    1560:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1564:	6b eb       	ldi	r22, 0xBB	; 187
    1566:	71 e0       	ldi	r23, 0x01	; 1
    1568:	86 ef       	ldi	r24, 0xF6	; 246
    156a:	9c e0       	ldi	r25, 0x0C	; 12
    156c:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1570:	1f 92       	push	r1
    1572:	83 e0       	ldi	r24, 0x03	; 3
    1574:	8f 93       	push	r24
    1576:	87 e0       	ldi	r24, 0x07	; 7
    1578:	88 2e       	mov	r8, r24
    157a:	96 e0       	ldi	r25, 0x06	; 6
    157c:	a9 2e       	mov	r10, r25
    157e:	25 e0       	ldi	r18, 0x05	; 5
    1580:	c2 2e       	mov	r12, r18
    1582:	34 e0       	ldi	r19, 0x04	; 4
    1584:	e3 2e       	mov	r14, r19
    1586:	21 e0       	ldi	r18, 0x01	; 1
    1588:	42 e0       	ldi	r20, 0x02	; 2
    158a:	67 e2       	ldi	r22, 0x27	; 39
    158c:	8e ec       	ldi	r24, 0xCE	; 206
    158e:	9c e0       	ldi	r25, 0x0C	; 12
    1590:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
    1594:	43 e0       	ldi	r20, 0x03	; 3
    1596:	64 e0       	ldi	r22, 0x04	; 4
    1598:	87 eb       	ldi	r24, 0xB7	; 183
    159a:	9c e0       	ldi	r25, 0x0C	; 12
    159c:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_ZN14Adafruit_PN532C1Ehh>
    15a0:	67 ea       	ldi	r22, 0xA7	; 167
    15a2:	73 e0       	ldi	r23, 0x03	; 3
    15a4:	81 eb       	ldi	r24, 0xB1	; 177
    15a6:	9c e0       	ldi	r25, 0x0C	; 12
    15a8:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    15ac:	6b eb       	ldi	r22, 0xBB	; 187
    15ae:	71 e0       	ldi	r23, 0x01	; 1
    15b0:	8b ea       	ldi	r24, 0xAB	; 171
    15b2:	9c e0       	ldi	r25, 0x0C	; 12
    15b4:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    15b8:	6b eb       	ldi	r22, 0xBB	; 187
    15ba:	71 e0       	ldi	r23, 0x01	; 1
    15bc:	8d e9       	ldi	r24, 0x9D	; 157
    15be:	9c e0       	ldi	r25, 0x0C	; 12
    15c0:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    15c4:	6b eb       	ldi	r22, 0xBB	; 187
    15c6:	71 e0       	ldi	r23, 0x01	; 1
    15c8:	89 e7       	ldi	r24, 0x79	; 121
    15ca:	9c e0       	ldi	r25, 0x0C	; 12
    15cc:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    15d0:	6b eb       	ldi	r22, 0xBB	; 187
    15d2:	71 e0       	ldi	r23, 0x01	; 1
    15d4:	8f e7       	ldi	r24, 0x7F	; 127
    15d6:	9c e0       	ldi	r25, 0x0C	; 12
    15d8:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    15dc:	6b eb       	ldi	r22, 0xBB	; 187
    15de:	71 e0       	ldi	r23, 0x01	; 1
    15e0:	85 e8       	ldi	r24, 0x85	; 133
    15e2:	9c e0       	ldi	r25, 0x0C	; 12
    15e4:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    15e8:	6b eb       	ldi	r22, 0xBB	; 187
    15ea:	71 e0       	ldi	r23, 0x01	; 1
    15ec:	8b e8       	ldi	r24, 0x8B	; 139
    15ee:	9c e0       	ldi	r25, 0x0C	; 12
    15f0:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    15f4:	6b eb       	ldi	r22, 0xBB	; 187
    15f6:	71 e0       	ldi	r23, 0x01	; 1
    15f8:	81 e9       	ldi	r24, 0x91	; 145
    15fa:	9c e0       	ldi	r25, 0x0C	; 12
    15fc:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1600:	6b eb       	ldi	r22, 0xBB	; 187
    1602:	71 e0       	ldi	r23, 0x01	; 1
    1604:	87 e9       	ldi	r24, 0x97	; 151
    1606:	9c e0       	ldi	r25, 0x0C	; 12
    1608:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    160c:	60 eb       	ldi	r22, 0xB0	; 176
    160e:	73 e0       	ldi	r23, 0x03	; 3
    1610:	83 e7       	ldi	r24, 0x73	; 115
    1612:	9c e0       	ldi	r25, 0x0C	; 12
    1614:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1618:	60 eb       	ldi	r22, 0xB0	; 176
    161a:	73 e0       	ldi	r23, 0x03	; 3
    161c:	87 e6       	ldi	r24, 0x67	; 103
    161e:	9c e0       	ldi	r25, 0x0C	; 12
    1620:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1624:	60 eb       	ldi	r22, 0xB0	; 176
    1626:	73 e0       	ldi	r23, 0x03	; 3
    1628:	8d e6       	ldi	r24, 0x6D	; 109
    162a:	9c e0       	ldi	r25, 0x0C	; 12
    162c:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1630:	6b eb       	ldi	r22, 0xBB	; 187
    1632:	71 e0       	ldi	r23, 0x01	; 1
    1634:	81 e6       	ldi	r24, 0x61	; 97
    1636:	9c e0       	ldi	r25, 0x0C	; 12
    1638:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    163c:	6b eb       	ldi	r22, 0xBB	; 187
    163e:	71 e0       	ldi	r23, 0x01	; 1
    1640:	8b e5       	ldi	r24, 0x5B	; 91
    1642:	9c e0       	ldi	r25, 0x0C	; 12
    1644:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1648:	60 eb       	ldi	r22, 0xB0	; 176
    164a:	73 e0       	ldi	r23, 0x03	; 3
    164c:	83 e4       	ldi	r24, 0x43	; 67
    164e:	9c e0       	ldi	r25, 0x0C	; 12
    1650:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1654:	60 eb       	ldi	r22, 0xB0	; 176
    1656:	73 e0       	ldi	r23, 0x03	; 3
    1658:	89 e4       	ldi	r24, 0x49	; 73
    165a:	9c e0       	ldi	r25, 0x0C	; 12
    165c:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1660:	60 eb       	ldi	r22, 0xB0	; 176
    1662:	73 e0       	ldi	r23, 0x03	; 3
    1664:	8f e4       	ldi	r24, 0x4F	; 79
    1666:	9c e0       	ldi	r25, 0x0C	; 12
    1668:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    166c:	60 eb       	ldi	r22, 0xB0	; 176
    166e:	73 e0       	ldi	r23, 0x03	; 3
    1670:	85 e5       	ldi	r24, 0x55	; 85
    1672:	9c e0       	ldi	r25, 0x0C	; 12
    1674:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1678:	09 e0       	ldi	r16, 0x09	; 9
    167a:	25 e0       	ldi	r18, 0x05	; 5
    167c:	48 ea       	ldi	r20, 0xA8	; 168
    167e:	60 ec       	ldi	r22, 0xC0	; 192
    1680:	89 ed       	ldi	r24, 0xD9	; 217
    1682:	9b e0       	ldi	r25, 0x0B	; 11
    1684:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <_ZN9IPAddressC1Ehhhh>
    1688:	05 e1       	ldi	r16, 0x15	; 21
    168a:	21 e0       	ldi	r18, 0x01	; 1
    168c:	48 ea       	ldi	r20, 0xA8	; 168
    168e:	60 ec       	ldi	r22, 0xC0	; 192
    1690:	83 ed       	ldi	r24, 0xD3	; 211
    1692:	9b e0       	ldi	r25, 0x0B	; 11
    1694:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <_ZN9IPAddressC1Ehhhh>
    1698:	01 e0       	ldi	r16, 0x01	; 1
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	48 ea       	ldi	r20, 0xA8	; 168
    169e:	60 ec       	ldi	r22, 0xC0	; 192
    16a0:	8d ec       	ldi	r24, 0xCD	; 205
    16a2:	9b e0       	ldi	r25, 0x0B	; 11
    16a4:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <_ZN9IPAddressC1Ehhhh>
    16a8:	00 e0       	ldi	r16, 0x00	; 0
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	4f ef       	ldi	r20, 0xFF	; 255
    16ae:	6f ef       	ldi	r22, 0xFF	; 255
    16b0:	87 ec       	ldi	r24, 0xC7	; 199
    16b2:	9b e0       	ldi	r25, 0x0B	; 11
    16b4:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <_ZN9IPAddressC1Ehhhh>
    16b8:	8a eb       	ldi	r24, 0xBA	; 186
    16ba:	9b e0       	ldi	r25, 0x0B	; 11
    16bc:	0e 94 a9 23 	call	0x4752	; 0x4752 <_ZN14EthernetClientC1Ev>
    16c0:	8d ea       	ldi	r24, 0xAD	; 173
    16c2:	9b e0       	ldi	r25, 0x0B	; 11
    16c4:	0e 94 a9 23 	call	0x4752	; 0x4752 <_ZN14EthernetClientC1Ev>
    16c8:	69 e1       	ldi	r22, 0x19	; 25
    16ca:	79 e7       	ldi	r23, 0x79	; 121
    16cc:	87 ea       	ldi	r24, 0xA7	; 167
    16ce:	9b e0       	ldi	r25, 0x0B	; 11
    16d0:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <_ZN14EthernetServerC1Ej>
    16d4:	8a e9       	ldi	r24, 0x9A	; 154
    16d6:	9b e0       	ldi	r25, 0x0B	; 11
    16d8:	0e 94 a9 23 	call	0x4752	; 0x4752 <_ZN14EthernetClientC1Ev>
    16dc:	8e e8       	ldi	r24, 0x8E	; 142
    16de:	9b e0       	ldi	r25, 0x0B	; 11
    16e0:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <_ZN13DS3231M_ClassC1Ev>
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	ba 01       	movw	r22, r20
    16ea:	8c e7       	ldi	r24, 0x7C	; 124
    16ec:	9b e0       	ldi	r25, 0x0B	; 11
    16ee:	0e 94 16 1c 	call	0x382c	; 0x382c <_ZN8DateTimeC1Em>
    16f2:	6b eb       	ldi	r22, 0xBB	; 187
    16f4:	71 e0       	ldi	r23, 0x01	; 1
    16f6:	82 e7       	ldi	r24, 0x72	; 114
    16f8:	9b e0       	ldi	r25, 0x0B	; 11
    16fa:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    16fe:	6b eb       	ldi	r22, 0xBB	; 187
    1700:	71 e0       	ldi	r23, 0x01	; 1
    1702:	8c e6       	ldi	r24, 0x6C	; 108
    1704:	9b e0       	ldi	r25, 0x0B	; 11
    1706:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	64 e0       	ldi	r22, 0x04	; 4
    1710:	88 e8       	ldi	r24, 0x88	; 136
    1712:	9a e0       	ldi	r25, 0x0A	; 10
    1714:	0f 91       	pop	r16
    1716:	ef 90       	pop	r14
    1718:	cf 90       	pop	r12
    171a:	af 90       	pop	r10
    171c:	8f 90       	pop	r8
    171e:	0c 94 1f 2e 	jmp	0x5c3e	; 0x5c3e <_ZN8SPIFlashC1Eh>

00001722 <_GLOBAL__sub_D_intConsecutivePresses>:
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	8c e6       	ldi	r24, 0x6C	; 108
    1728:	9b e0       	ldi	r25, 0x0B	; 11
    172a:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    172e:	82 e7       	ldi	r24, 0x72	; 114
    1730:	9b e0       	ldi	r25, 0x0B	; 11
    1732:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    1736:	8e e8       	ldi	r24, 0x8E	; 142
    1738:	9b e0       	ldi	r25, 0x0B	; 11
    173a:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <_ZN13DS3231M_ClassD1Ev>
    173e:	85 e5       	ldi	r24, 0x55	; 85
    1740:	9c e0       	ldi	r25, 0x0C	; 12
    1742:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    1746:	8f e4       	ldi	r24, 0x4F	; 79
    1748:	9c e0       	ldi	r25, 0x0C	; 12
    174a:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    174e:	89 e4       	ldi	r24, 0x49	; 73
    1750:	9c e0       	ldi	r25, 0x0C	; 12
    1752:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    1756:	83 e4       	ldi	r24, 0x43	; 67
    1758:	9c e0       	ldi	r25, 0x0C	; 12
    175a:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    175e:	8b e5       	ldi	r24, 0x5B	; 91
    1760:	9c e0       	ldi	r25, 0x0C	; 12
    1762:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    1766:	81 e6       	ldi	r24, 0x61	; 97
    1768:	9c e0       	ldi	r25, 0x0C	; 12
    176a:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    176e:	8d e6       	ldi	r24, 0x6D	; 109
    1770:	9c e0       	ldi	r25, 0x0C	; 12
    1772:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    1776:	87 e6       	ldi	r24, 0x67	; 103
    1778:	9c e0       	ldi	r25, 0x0C	; 12
    177a:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    177e:	83 e7       	ldi	r24, 0x73	; 115
    1780:	9c e0       	ldi	r25, 0x0C	; 12
    1782:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    1786:	cd e9       	ldi	r28, 0x9D	; 157
    1788:	dc e0       	ldi	r29, 0x0C	; 12
    178a:	26 97       	sbiw	r28, 0x06	; 6
    178c:	ce 01       	movw	r24, r28
    178e:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    1792:	8c e0       	ldi	r24, 0x0C	; 12
    1794:	c9 37       	cpi	r28, 0x79	; 121
    1796:	d8 07       	cpc	r29, r24
    1798:	c1 f7       	brne	.-16     	; 0x178a <_GLOBAL__sub_D_intConsecutivePresses+0x68>
    179a:	8d e9       	ldi	r24, 0x9D	; 157
    179c:	9c e0       	ldi	r25, 0x0C	; 12
    179e:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    17a2:	8b ea       	ldi	r24, 0xAB	; 171
    17a4:	9c e0       	ldi	r25, 0x0C	; 12
    17a6:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    17aa:	81 eb       	ldi	r24, 0xB1	; 177
    17ac:	9c e0       	ldi	r25, 0x0C	; 12
    17ae:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    17b2:	86 ef       	ldi	r24, 0xF6	; 246
    17b4:	9c e0       	ldi	r25, 0x0C	; 12
    17b6:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    17ba:	80 ef       	ldi	r24, 0xF0	; 240
    17bc:	9c e0       	ldi	r25, 0x0C	; 12
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	0c 94 73 3c 	jmp	0x78e6	; 0x78e6 <_ZN6StringD1Ev>

000017c6 <_Z19InizializzaEthernetv>:
    17c6:	cf 92       	push	r12
    17c8:	df 92       	push	r13
    17ca:	ef 92       	push	r14
    17cc:	ff 92       	push	r15
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	68 97       	sbiw	r28, 0x18	; 24
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	88 e6       	ldi	r24, 0x68	; 104
    17e8:	c8 2e       	mov	r12, r24
    17ea:	8a e0       	ldi	r24, 0x0A	; 10
    17ec:	d8 2e       	mov	r13, r24
    17ee:	da 82       	std	Y+2, r13	; 0x02
    17f0:	c9 82       	std	Y+1, r12	; 0x01
    17f2:	80 91 c9 0b 	lds	r24, 0x0BC9	; 0x800bc9 <subnet+0x2>
    17f6:	90 91 ca 0b 	lds	r25, 0x0BCA	; 0x800bca <subnet+0x3>
    17fa:	a0 91 cb 0b 	lds	r26, 0x0BCB	; 0x800bcb <subnet+0x4>
    17fe:	b0 91 cc 0b 	lds	r27, 0x0BCC	; 0x800bcc <subnet+0x5>
    1802:	8b 83       	std	Y+3, r24	; 0x03
    1804:	9c 83       	std	Y+4, r25	; 0x04
    1806:	ad 83       	std	Y+5, r26	; 0x05
    1808:	be 83       	std	Y+6, r27	; 0x06
    180a:	d8 86       	std	Y+8, r13	; 0x08
    180c:	cf 82       	std	Y+7, r12	; 0x07
    180e:	80 91 cf 0b 	lds	r24, 0x0BCF	; 0x800bcf <gateway+0x2>
    1812:	90 91 d0 0b 	lds	r25, 0x0BD0	; 0x800bd0 <gateway+0x3>
    1816:	a0 91 d1 0b 	lds	r26, 0x0BD1	; 0x800bd1 <gateway+0x4>
    181a:	b0 91 d2 0b 	lds	r27, 0x0BD2	; 0x800bd2 <gateway+0x5>
    181e:	89 87       	std	Y+9, r24	; 0x09
    1820:	9a 87       	std	Y+10, r25	; 0x0a
    1822:	ab 87       	std	Y+11, r26	; 0x0b
    1824:	bc 87       	std	Y+12, r27	; 0x0c
    1826:	de 86       	std	Y+14, r13	; 0x0e
    1828:	cd 86       	std	Y+13, r12	; 0x0d
    182a:	80 91 d5 0b 	lds	r24, 0x0BD5	; 0x800bd5 <myDns+0x2>
    182e:	90 91 d6 0b 	lds	r25, 0x0BD6	; 0x800bd6 <myDns+0x3>
    1832:	a0 91 d7 0b 	lds	r26, 0x0BD7	; 0x800bd7 <myDns+0x4>
    1836:	b0 91 d8 0b 	lds	r27, 0x0BD8	; 0x800bd8 <myDns+0x5>
    183a:	8f 87       	std	Y+15, r24	; 0x0f
    183c:	98 8b       	std	Y+16, r25	; 0x10
    183e:	a9 8b       	std	Y+17, r26	; 0x11
    1840:	ba 8b       	std	Y+18, r27	; 0x12
    1842:	68 e2       	ldi	r22, 0x28	; 40
    1844:	71 e0       	ldi	r23, 0x01	; 1
    1846:	ce 01       	movw	r24, r28
    1848:	43 96       	adiw	r24, 0x13	; 19
    184a:	0e 94 76 39 	call	0x72ec	; 0x72ec <_ZN9IPAddressC1EPKh>
    184e:	ce 01       	movw	r24, r28
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	7c 01       	movw	r14, r24
    1854:	8e 01       	movw	r16, r28
    1856:	09 5f       	subi	r16, 0xF9	; 249
    1858:	1f 4f       	sbci	r17, 0xFF	; 255
    185a:	9e 01       	movw	r18, r28
    185c:	23 5f       	subi	r18, 0xF3	; 243
    185e:	3f 4f       	sbci	r19, 0xFF	; 255
    1860:	ae 01       	movw	r20, r28
    1862:	4d 5e       	subi	r20, 0xED	; 237
    1864:	5f 4f       	sbci	r21, 0xFF	; 255
    1866:	62 e2       	ldi	r22, 0x22	; 34
    1868:	71 e0       	ldi	r23, 0x01	; 1
    186a:	83 e5       	ldi	r24, 0x53	; 83
    186c:	9d e0       	ldi	r25, 0x0D	; 13
    186e:	0e 94 55 22 	call	0x44aa	; 0x44aa <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
    1872:	87 ea       	ldi	r24, 0xA7	; 167
    1874:	9b e0       	ldi	r25, 0x0B	; 11
    1876:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN14EthernetServer5beginEv>
    187a:	da 82       	std	Y+2, r13	; 0x02
    187c:	c9 82       	std	Y+1, r12	; 0x01
    187e:	80 91 db 0b 	lds	r24, 0x0BDB	; 0x800bdb <servizio+0x2>
    1882:	90 91 dc 0b 	lds	r25, 0x0BDC	; 0x800bdc <servizio+0x3>
    1886:	a0 91 dd 0b 	lds	r26, 0x0BDD	; 0x800bdd <servizio+0x4>
    188a:	b0 91 de 0b 	lds	r27, 0x0BDE	; 0x800bde <servizio+0x5>
    188e:	8b 83       	std	Y+3, r24	; 0x03
    1890:	9c 83       	std	Y+4, r25	; 0x04
    1892:	ad 83       	std	Y+5, r26	; 0x05
    1894:	be 83       	std	Y+6, r27	; 0x06
    1896:	49 ef       	ldi	r20, 0xF9	; 249
    1898:	5a e2       	ldi	r21, 0x2A	; 42
    189a:	b7 01       	movw	r22, r14
    189c:	8d ea       	ldi	r24, 0xAD	; 173
    189e:	9b e0       	ldi	r25, 0x0B	; 11
    18a0:	0e 94 3a 24 	call	0x4874	; 0x4874 <_ZN14EthernetClient7connectE9IPAddressj>
    18a4:	89 2b       	or	r24, r25
    18a6:	81 f0       	breq	.+32     	; 0x18c8 <_Z19InizializzaEthernetv+0x102>
    18a8:	62 eb       	ldi	r22, 0xB2	; 178
    18aa:	73 e0       	ldi	r23, 0x03	; 3
    18ac:	8d e5       	ldi	r24, 0x5D	; 93
    18ae:	9e e0       	ldi	r25, 0x0E	; 14
    18b0:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
    18b4:	8d ea       	ldi	r24, 0xAD	; 173
    18b6:	9b e0       	ldi	r25, 0x0B	; 11
    18b8:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <_ZN14EthernetClient9connectedEv>
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	90 93 a8 0c 	sts	0x0CA8, r25	; 0x800ca8 <Connected+0x1>
    18c2:	80 93 a7 0c 	sts	0x0CA7, r24	; 0x800ca7 <Connected>
    18c6:	06 c0       	rjmp	.+12     	; 0x18d4 <_Z19InizializzaEthernetv+0x10e>
    18c8:	65 ec       	ldi	r22, 0xC5	; 197
    18ca:	73 e0       	ldi	r23, 0x03	; 3
    18cc:	8d e5       	ldi	r24, 0x5D	; 93
    18ce:	9e e0       	ldi	r25, 0x0E	; 14
    18d0:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
    18d4:	68 96       	adiw	r28, 0x18	; 24
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	df 90       	pop	r13
    18ee:	cf 90       	pop	r12
    18f0:	08 95       	ret

000018f2 <setup>:
    18f2:	cf 92       	push	r12
    18f4:	df 92       	push	r13
    18f6:	ef 92       	push	r14
    18f8:	ff 92       	push	r15
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	00 d0       	rcall	.+0      	; 0x1904 <setup+0x12>
    1904:	00 d0       	rcall	.+0      	; 0x1906 <setup+0x14>
    1906:	00 d0       	rcall	.+0      	; 0x1908 <setup+0x16>
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	69 ed       	ldi	r22, 0xD9	; 217
    190e:	73 e0       	ldi	r23, 0x03	; 3
    1910:	8d e5       	ldi	r24, 0x5D	; 93
    1912:	9e e0       	ldi	r25, 0x0E	; 14
    1914:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
    1918:	3c 9a       	sbi	0x07, 4	; 7
    191a:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    191e:	24 9a       	sbi	0x04, 4	; 4
    1920:	2c 9a       	sbi	0x05, 4	; 5
    1922:	8f e9       	ldi	r24, 0x9F	; 159
    1924:	9f e0       	ldi	r25, 0x0F	; 15
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <setup+0x34>
    192a:	00 c0       	rjmp	.+0      	; 0x192c <setup+0x3a>
    192c:	00 00       	nop
    192e:	3f 9a       	sbi	0x07, 7	; 7
    1930:	0f 9a       	sbi	0x01, 7	; 1
    1932:	8f e3       	ldi	r24, 0x3F	; 63
    1934:	9c e9       	ldi	r25, 0x9C	; 156
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	f1 f7       	brne	.-4      	; 0x1936 <setup+0x44>
    193a:	00 c0       	rjmp	.+0      	; 0x193c <setup+0x4a>
    193c:	00 00       	nop
    193e:	47 9a       	sbi	0x08, 7	; 8
    1940:	8f e3       	ldi	r24, 0x3F	; 63
    1942:	9c e9       	ldi	r25, 0x9C	; 156
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <setup+0x52>
    1948:	00 c0       	rjmp	.+0      	; 0x194a <setup+0x58>
    194a:	00 00       	nop
    194c:	17 9a       	sbi	0x02, 7	; 2
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	44 e0       	ldi	r20, 0x04	; 4
    1952:	64 e1       	ldi	r22, 0x14	; 20
    1954:	8e ec       	ldi	r24, 0xCE	; 206
    1956:	9c e0       	ldi	r25, 0x0C	; 12
    1958:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <_ZN17LiquidCrystal_I2C5beginEhhh>
    195c:	8e ec       	ldi	r24, 0xCE	; 206
    195e:	9c e0       	ldi	r25, 0x0C	; 12
    1960:	0e 94 c8 2b 	call	0x5790	; 0x5790 <_ZN3LCD9backlightEv>
    1964:	9f ef       	ldi	r25, 0xFF	; 255
    1966:	24 e3       	ldi	r18, 0x34	; 52
    1968:	8c e0       	ldi	r24, 0x0C	; 12
    196a:	91 50       	subi	r25, 0x01	; 1
    196c:	20 40       	sbci	r18, 0x00	; 0
    196e:	80 40       	sbci	r24, 0x00	; 0
    1970:	e1 f7       	brne	.-8      	; 0x196a <setup+0x78>
    1972:	00 c0       	rjmp	.+0      	; 0x1974 <setup+0x82>
    1974:	00 00       	nop
    1976:	8e ec       	ldi	r24, 0xCE	; 206
    1978:	9c e0       	ldi	r25, 0x0C	; 12
    197a:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <_ZN3LCD11noBacklightEv>
    197e:	9f ef       	ldi	r25, 0xFF	; 255
    1980:	24 e3       	ldi	r18, 0x34	; 52
    1982:	8c e0       	ldi	r24, 0x0C	; 12
    1984:	91 50       	subi	r25, 0x01	; 1
    1986:	20 40       	sbci	r18, 0x00	; 0
    1988:	80 40       	sbci	r24, 0x00	; 0
    198a:	e1 f7       	brne	.-8      	; 0x1984 <setup+0x92>
    198c:	00 c0       	rjmp	.+0      	; 0x198e <setup+0x9c>
    198e:	00 00       	nop
    1990:	8e ec       	ldi	r24, 0xCE	; 206
    1992:	9c e0       	ldi	r25, 0x0C	; 12
    1994:	0e 94 c8 2b 	call	0x5790	; 0x5790 <_ZN3LCD9backlightEv>
    1998:	9f ef       	ldi	r25, 0xFF	; 255
    199a:	24 e3       	ldi	r18, 0x34	; 52
    199c:	8c e0       	ldi	r24, 0x0C	; 12
    199e:	91 50       	subi	r25, 0x01	; 1
    19a0:	20 40       	sbci	r18, 0x00	; 0
    19a2:	80 40       	sbci	r24, 0x00	; 0
    19a4:	e1 f7       	brne	.-8      	; 0x199e <setup+0xac>
    19a6:	00 c0       	rjmp	.+0      	; 0x19a8 <setup+0xb6>
    19a8:	00 00       	nop
    19aa:	8e ec       	ldi	r24, 0xCE	; 206
    19ac:	9c e0       	ldi	r25, 0x0C	; 12
    19ae:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <_ZN3LCD11noBacklightEv>
    19b2:	9f ef       	ldi	r25, 0xFF	; 255
    19b4:	24 e3       	ldi	r18, 0x34	; 52
    19b6:	8c e0       	ldi	r24, 0x0C	; 12
    19b8:	91 50       	subi	r25, 0x01	; 1
    19ba:	20 40       	sbci	r18, 0x00	; 0
    19bc:	80 40       	sbci	r24, 0x00	; 0
    19be:	e1 f7       	brne	.-8      	; 0x19b8 <setup+0xc6>
    19c0:	00 c0       	rjmp	.+0      	; 0x19c2 <setup+0xd0>
    19c2:	00 00       	nop
    19c4:	4e e2       	ldi	r20, 0x2E	; 46
    19c6:	51 e0       	ldi	r21, 0x01	; 1
    19c8:	61 e0       	ldi	r22, 0x01	; 1
    19ca:	8e ec       	ldi	r24, 0xCE	; 206
    19cc:	9c e0       	ldi	r25, 0x0C	; 12
    19ce:	0e 94 ae 2c 	call	0x595c	; 0x595c <_ZN3LCD10createCharEhPh>
    19d2:	9f ef       	ldi	r25, 0xFF	; 255
    19d4:	29 ef       	ldi	r18, 0xF9	; 249
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	91 50       	subi	r25, 0x01	; 1
    19da:	20 40       	sbci	r18, 0x00	; 0
    19dc:	80 40       	sbci	r24, 0x00	; 0
    19de:	e1 f7       	brne	.-8      	; 0x19d8 <setup+0xe6>
    19e0:	00 c0       	rjmp	.+0      	; 0x19e2 <setup+0xf0>
    19e2:	00 00       	nop
    19e4:	8e ec       	ldi	r24, 0xCE	; 206
    19e6:	9c e0       	ldi	r25, 0x0C	; 12
    19e8:	0e 94 c8 2b 	call	0x5790	; 0x5790 <_ZN3LCD9backlightEv>
    19ec:	03 e4       	ldi	r16, 0x43	; 67
    19ee:	1c e0       	ldi	r17, 0x0C	; 12
    19f0:	6b eb       	ldi	r22, 0xBB	; 187
    19f2:	71 e0       	ldi	r23, 0x01	; 1
    19f4:	c8 01       	movw	r24, r16
    19f6:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    19fa:	0a 5f       	subi	r16, 0xFA	; 250
    19fc:	1f 4f       	sbci	r17, 0xFF	; 255
    19fe:	9c e0       	ldi	r25, 0x0C	; 12
    1a00:	0b 35       	cpi	r16, 0x5B	; 91
    1a02:	19 07       	cpc	r17, r25
    1a04:	a9 f7       	brne	.-22     	; 0x19f0 <setup+0xfe>
    1a06:	87 eb       	ldi	r24, 0xB7	; 183
    1a08:	9c e0       	ldi	r25, 0x0C	; 12
    1a0a:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN14Adafruit_PN5325beginEv>
    1a0e:	2f ef       	ldi	r18, 0xFF	; 255
    1a10:	80 e7       	ldi	r24, 0x70	; 112
    1a12:	92 e0       	ldi	r25, 0x02	; 2
    1a14:	21 50       	subi	r18, 0x01	; 1
    1a16:	80 40       	sbci	r24, 0x00	; 0
    1a18:	90 40       	sbci	r25, 0x00	; 0
    1a1a:	e1 f7       	brne	.-8      	; 0x1a14 <setup+0x122>
    1a1c:	00 c0       	rjmp	.+0      	; 0x1a1e <setup+0x12c>
    1a1e:	00 00       	nop
    1a20:	87 eb       	ldi	r24, 0xB7	; 183
    1a22:	9c e0       	ldi	r25, 0x0C	; 12
    1a24:	0e 94 3a 1a 	call	0x3474	; 0x3474 <_ZN14Adafruit_PN53218getFirmwareVersionEv>
    1a28:	6b 01       	movw	r12, r22
    1a2a:	7c 01       	movw	r14, r24
    1a2c:	67 2b       	or	r22, r23
    1a2e:	68 2b       	or	r22, r24
    1a30:	69 2b       	or	r22, r25
    1a32:	69 f5       	brne	.+90     	; 0x1a8e <setup+0x19c>
    1a34:	6e ee       	ldi	r22, 0xEE	; 238
    1a36:	73 e0       	ldi	r23, 0x03	; 3
    1a38:	8d e5       	ldi	r24, 0x5D	; 93
    1a3a:	9e e0       	ldi	r25, 0x0E	; 14
    1a3c:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
    1a40:	8e ec       	ldi	r24, 0xCE	; 206
    1a42:	9c e0       	ldi	r25, 0x0C	; 12
    1a44:	0e 94 c8 2b 	call	0x5790	; 0x5790 <_ZN3LCD9backlightEv>
    1a48:	2f ef       	ldi	r18, 0xFF	; 255
    1a4a:	84 e3       	ldi	r24, 0x34	; 52
    1a4c:	9c e0       	ldi	r25, 0x0C	; 12
    1a4e:	21 50       	subi	r18, 0x01	; 1
    1a50:	80 40       	sbci	r24, 0x00	; 0
    1a52:	90 40       	sbci	r25, 0x00	; 0
    1a54:	e1 f7       	brne	.-8      	; 0x1a4e <setup+0x15c>
    1a56:	00 c0       	rjmp	.+0      	; 0x1a58 <setup+0x166>
    1a58:	00 00       	nop
    1a5a:	8e ec       	ldi	r24, 0xCE	; 206
    1a5c:	9c e0       	ldi	r25, 0x0C	; 12
    1a5e:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN3LCD5clearEv>
    1a62:	67 e0       	ldi	r22, 0x07	; 7
    1a64:	74 e0       	ldi	r23, 0x04	; 4
    1a66:	8e ec       	ldi	r24, 0xCE	; 206
    1a68:	9c e0       	ldi	r25, 0x0C	; 12
    1a6a:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
    1a6e:	2f ef       	ldi	r18, 0xFF	; 255
    1a70:	87 ea       	ldi	r24, 0xA7	; 167
    1a72:	91 e6       	ldi	r25, 0x61	; 97
    1a74:	21 50       	subi	r18, 0x01	; 1
    1a76:	80 40       	sbci	r24, 0x00	; 0
    1a78:	90 40       	sbci	r25, 0x00	; 0
    1a7a:	e1 f7       	brne	.-8      	; 0x1a74 <setup+0x182>
    1a7c:	00 c0       	rjmp	.+0      	; 0x1a7e <setup+0x18c>
    1a7e:	00 00       	nop
    1a80:	61 e2       	ldi	r22, 0x21	; 33
    1a82:	74 e0       	ldi	r23, 0x04	; 4
    1a84:	81 eb       	ldi	r24, 0xB1	; 177
    1a86:	9c e0       	ldi	r25, 0x0C	; 12
    1a88:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    1a8c:	06 c0       	rjmp	.+12     	; 0x1a9a <setup+0x1a8>
    1a8e:	64 e3       	ldi	r22, 0x34	; 52
    1a90:	74 e0       	ldi	r23, 0x04	; 4
    1a92:	8d e5       	ldi	r24, 0x5D	; 93
    1a94:	9e e0       	ldi	r25, 0x0E	; 14
    1a96:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
    1a9a:	69 e4       	ldi	r22, 0x49	; 73
    1a9c:	74 e0       	ldi	r23, 0x04	; 4
    1a9e:	8d e5       	ldi	r24, 0x5D	; 93
    1aa0:	9e e0       	ldi	r25, 0x0E	; 14
    1aa2:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
    1aa6:	4f 2d       	mov	r20, r15
    1aa8:	55 27       	eor	r21, r21
    1aaa:	66 27       	eor	r22, r22
    1aac:	77 27       	eor	r23, r23
    1aae:	20 e1       	ldi	r18, 0x10	; 16
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	8d e5       	ldi	r24, 0x5D	; 93
    1ab4:	9e e0       	ldi	r25, 0x0E	; 14
    1ab6:	0e 94 ad 3a 	call	0x755a	; 0x755a <_ZN5Print7printlnEmi>
    1aba:	68 e5       	ldi	r22, 0x58	; 88
    1abc:	74 e0       	ldi	r23, 0x04	; 4
    1abe:	8d e5       	ldi	r24, 0x5D	; 93
    1ac0:	9e e0       	ldi	r25, 0x0E	; 14
    1ac2:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
    1ac6:	4e 2d       	mov	r20, r14
    1ac8:	50 e0       	ldi	r21, 0x00	; 0
    1aca:	60 e0       	ldi	r22, 0x00	; 0
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	2a e0       	ldi	r18, 0x0A	; 10
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	8d e5       	ldi	r24, 0x5D	; 93
    1ad4:	9e e0       	ldi	r25, 0x0E	; 14
    1ad6:	0e 94 8b 3a 	call	0x7516	; 0x7516 <_ZN5Print5printEmi>
    1ada:	6e e2       	ldi	r22, 0x2E	; 46
    1adc:	8d e5       	ldi	r24, 0x5D	; 93
    1ade:	9e e0       	ldi	r25, 0x0E	; 14
    1ae0:	0e 94 0a 3a 	call	0x7414	; 0x7414 <_ZN5Print5printEc>
    1ae4:	4d 2d       	mov	r20, r13
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	2a e0       	ldi	r18, 0x0A	; 10
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	8d e5       	ldi	r24, 0x5D	; 93
    1af2:	9e e0       	ldi	r25, 0x0E	; 14
    1af4:	0e 94 ad 3a 	call	0x755a	; 0x755a <_ZN5Print7printlnEmi>
    1af8:	6f ef       	ldi	r22, 0xFF	; 255
    1afa:	87 eb       	ldi	r24, 0xB7	; 183
    1afc:	9c e0       	ldi	r25, 0x0C	; 12
    1afe:	0e 94 b0 1a 	call	0x3560	; 0x3560 <_ZN14Adafruit_PN53227setPassiveActivationRetriesEh>
    1b02:	87 eb       	ldi	r24, 0xB7	; 183
    1b04:	9c e0       	ldi	r25, 0x0C	; 12
    1b06:	0e 94 82 1a 	call	0x3504	; 0x3504 <_ZN14Adafruit_PN5329SAMConfigEv>
    1b0a:	2c 98       	cbi	0x05, 4	; 5
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	88 e8       	ldi	r24, 0x88	; 136
    1b10:	9a e0       	ldi	r25, 0x0A	; 10
    1b12:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <_ZN8SPIFlash5errorEb>
    1b16:	88 23       	and	r24, r24
    1b18:	61 f0       	breq	.+24     	; 0x1b32 <setup+0x240>
    1b1a:	61 e0       	ldi	r22, 0x01	; 1
    1b1c:	88 e8       	ldi	r24, 0x88	; 136
    1b1e:	9a e0       	ldi	r25, 0x0A	; 10
    1b20:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <_ZN8SPIFlash5errorEb>
    1b24:	4a e0       	ldi	r20, 0x0A	; 10
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	68 2f       	mov	r22, r24
    1b2a:	8d e5       	ldi	r24, 0x5D	; 93
    1b2c:	9e e0       	ldi	r25, 0x0E	; 14
    1b2e:	0e 94 9d 3a 	call	0x753a	; 0x753a <_ZN5Print7printlnEhi>
    1b32:	40 e0       	ldi	r20, 0x00	; 0
    1b34:	50 e0       	ldi	r21, 0x00	; 0
    1b36:	ba 01       	movw	r22, r20
    1b38:	88 e8       	ldi	r24, 0x88	; 136
    1b3a:	9a e0       	ldi	r25, 0x0A	; 10
    1b3c:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <_ZN8SPIFlash5beginEm>
    1b40:	0e 94 5e 05 	call	0xabc	; 0xabc <_Z5getIDv>
    1b44:	88 23       	and	r24, r24
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <setup+0x258>
    1b48:	48 c0       	rjmp	.+144    	; 0x1bda <setup+0x2e8>
    1b4a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
    1b4e:	87 e0       	ldi	r24, 0x07	; 7
    1b50:	0e 94 09 02 	call	0x412	; 0x412 <_Z8printTabh>
    1b54:	67 e6       	ldi	r22, 0x67	; 103
    1b56:	74 e0       	ldi	r23, 0x04	; 4
    1b58:	8d e5       	ldi	r24, 0x5D	; 93
    1b5a:	9e e0       	ldi	r25, 0x0E	; 14
    1b5c:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
    1b60:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
    1b64:	83 e0       	ldi	r24, 0x03	; 3
    1b66:	0e 94 09 02 	call	0x412	; 0x412 <_Z8printTabh>
    1b6a:	6c e7       	ldi	r22, 0x7C	; 124
    1b6c:	74 e0       	ldi	r23, 0x04	; 4
    1b6e:	8d e5       	ldi	r24, 0x5D	; 93
    1b70:	9e e0       	ldi	r25, 0x0E	; 14
    1b72:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
    1b76:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	0e 94 09 02 	call	0x412	; 0x412 <_Z8printTabh>
    1b80:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12FlashpowerUpv>
    1b84:	8d e5       	ldi	r24, 0x5D	; 93
    1b86:	9e e0       	ldi	r25, 0x0E	; 14
    1b88:	0e 94 11 3a 	call	0x7422	; 0x7422 <_ZN5Print7printlnEv>
    1b8c:	8d e5       	ldi	r24, 0x5D	; 93
    1b8e:	9e e0       	ldi	r25, 0x0E	; 14
    1b90:	0e 94 11 3a 	call	0x7422	; 0x7422 <_ZN5Print7printlnEv>
    1b94:	0e 94 32 05 	call	0xa64	; 0xa64 <_Z13eraseChipTestv>
    1b98:	8d e5       	ldi	r24, 0x5D	; 93
    1b9a:	9e e0       	ldi	r25, 0x0E	; 14
    1b9c:	0e 94 11 3a 	call	0x7422	; 0x7422 <_ZN5Print7printlnEv>
    1ba0:	65 e8       	ldi	r22, 0x85	; 133
    1ba2:	74 e0       	ldi	r23, 0x04	; 4
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	01 96       	adiw	r24, 0x01	; 1
    1ba8:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1bac:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <addr>
    1bb0:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <addr+0x1>
    1bb4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <addr+0x2>
    1bb8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <addr+0x3>
    1bbc:	ae 01       	movw	r20, r28
    1bbe:	4f 5f       	subi	r20, 0xFF	; 255
    1bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc2:	0e 94 02 03 	call	0x604	; 0x604 <_Z15erogazioniSaverm6String>
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	01 96       	adiw	r24, 0x01	; 1
    1bca:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    1bce:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_Z14FlashpowerDownv>
    1bd2:	8d e5       	ldi	r24, 0x5D	; 93
    1bd4:	9e e0       	ldi	r25, 0x0E	; 14
    1bd6:	0e 94 11 3a 	call	0x7422	; 0x7422 <_ZN5Print7printlnEv>
    1bda:	40 ea       	ldi	r20, 0xA0	; 160
    1bdc:	56 e8       	ldi	r21, 0x86	; 134
    1bde:	61 e0       	ldi	r22, 0x01	; 1
    1be0:	70 e0       	ldi	r23, 0x00	; 0
    1be2:	8e e8       	ldi	r24, 0x8E	; 142
    1be4:	9b e0       	ldi	r25, 0x0B	; 11
    1be6:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <_ZN13DS3231M_Class5beginEm>
    1bea:	81 11       	cpse	r24, r1
    1bec:	10 c0       	rjmp	.+32     	; 0x1c0e <setup+0x31c>
    1bee:	67 ed       	ldi	r22, 0xD7	; 215
    1bf0:	71 e0       	ldi	r23, 0x01	; 1
    1bf2:	8d e5       	ldi	r24, 0x5D	; 93
    1bf4:	9e e0       	ldi	r25, 0x0E	; 14
    1bf6:	0e 94 14 3a 	call	0x7428	; 0x7428 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1bfa:	2f ef       	ldi	r18, 0xFF	; 255
    1bfc:	83 ed       	ldi	r24, 0xD3	; 211
    1bfe:	90 e3       	ldi	r25, 0x30	; 48
    1c00:	21 50       	subi	r18, 0x01	; 1
    1c02:	80 40       	sbci	r24, 0x00	; 0
    1c04:	90 40       	sbci	r25, 0x00	; 0
    1c06:	e1 f7       	brne	.-8      	; 0x1c00 <setup+0x30e>
    1c08:	00 c0       	rjmp	.+0      	; 0x1c0a <setup+0x318>
    1c0a:	00 00       	nop
    1c0c:	e6 cf       	rjmp	.-52     	; 0x1bda <setup+0x2e8>
    1c0e:	2f ef       	ldi	r18, 0xFF	; 255
    1c10:	80 e7       	ldi	r24, 0x70	; 112
    1c12:	92 e0       	ldi	r25, 0x02	; 2
    1c14:	21 50       	subi	r18, 0x01	; 1
    1c16:	80 40       	sbci	r24, 0x00	; 0
    1c18:	90 40       	sbci	r25, 0x00	; 0
    1c1a:	e1 f7       	brne	.-8      	; 0x1c14 <setup+0x322>
    1c1c:	00 c0       	rjmp	.+0      	; 0x1c1e <setup+0x32c>
    1c1e:	00 00       	nop
    1c20:	62 ec       	ldi	r22, 0xC2	; 194
    1c22:	71 e0       	ldi	r23, 0x01	; 1
    1c24:	8d e5       	ldi	r24, 0x5D	; 93
    1c26:	9e e0       	ldi	r25, 0x0E	; 14
    1c28:	0e 94 14 3a 	call	0x7428	; 0x7428 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c2c:	8e e8       	ldi	r24, 0x8E	; 142
    1c2e:	9b e0       	ldi	r25, 0x0B	; 11
    1c30:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <_ZN13DS3231M_Class6adjustEv>
    1c34:	6b e8       	ldi	r22, 0x8B	; 139
    1c36:	74 e0       	ldi	r23, 0x04	; 4
    1c38:	8d e5       	ldi	r24, 0x5D	; 93
    1c3a:	9e e0       	ldi	r25, 0x0E	; 14
    1c3c:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
    1c40:	61 ed       	ldi	r22, 0xD1	; 209
    1c42:	74 e0       	ldi	r23, 0x04	; 4
    1c44:	8d e5       	ldi	r24, 0x5D	; 93
    1c46:	9e e0       	ldi	r25, 0x0E	; 14
    1c48:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
    1c4c:	87 e0       	ldi	r24, 0x07	; 7
    1c4e:	9e e0       	ldi	r25, 0x0E	; 14
    1c50:	0e 94 db 36 	call	0x6db6	; 0x6db6 <_ZN7TwoWire5beginEv>
    1c54:	68 e2       	ldi	r22, 0x28	; 40
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	87 e0       	ldi	r24, 0x07	; 7
    1c5a:	9e e0       	ldi	r25, 0x0E	; 14
    1c5c:	0e 94 f8 36 	call	0x6df0	; 0x6df0 <_ZN7TwoWire17beginTransmissionEi>
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	87 e0       	ldi	r24, 0x07	; 7
    1c64:	9e e0       	ldi	r25, 0x0E	; 14
    1c66:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <_ZN7TwoWire5writeEh>
    1c6a:	62 e3       	ldi	r22, 0x32	; 50
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	87 e0       	ldi	r24, 0x07	; 7
    1c70:	9e e0       	ldi	r25, 0x0E	; 14
    1c72:	0e 94 94 01 	call	0x328	; 0x328 <_ZN7TwoWire5writeEi>
    1c76:	87 e0       	ldi	r24, 0x07	; 7
    1c78:	9e e0       	ldi	r25, 0x0E	; 14
    1c7a:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
    1c7e:	2f ef       	ldi	r18, 0xFF	; 255
    1c80:	80 e7       	ldi	r24, 0x70	; 112
    1c82:	92 e0       	ldi	r25, 0x02	; 2
    1c84:	21 50       	subi	r18, 0x01	; 1
    1c86:	80 40       	sbci	r24, 0x00	; 0
    1c88:	90 40       	sbci	r25, 0x00	; 0
    1c8a:	e1 f7       	brne	.-8      	; 0x1c84 <setup+0x392>
    1c8c:	00 c0       	rjmp	.+0      	; 0x1c8e <setup+0x39c>
    1c8e:	00 00       	nop
    1c90:	62 e5       	ldi	r22, 0x52	; 82
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	87 e0       	ldi	r24, 0x07	; 7
    1c96:	9e e0       	ldi	r25, 0x0E	; 14
    1c98:	0e 94 f8 36 	call	0x6df0	; 0x6df0 <_ZN7TwoWire17beginTransmissionEi>
    1c9c:	60 e0       	ldi	r22, 0x00	; 0
    1c9e:	87 e0       	ldi	r24, 0x07	; 7
    1ca0:	9e e0       	ldi	r25, 0x0E	; 14
    1ca2:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <_ZN7TwoWire5writeEh>
    1ca6:	62 e3       	ldi	r22, 0x32	; 50
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	87 e0       	ldi	r24, 0x07	; 7
    1cac:	9e e0       	ldi	r25, 0x0E	; 14
    1cae:	0e 94 94 01 	call	0x328	; 0x328 <_ZN7TwoWire5writeEi>
    1cb2:	87 e0       	ldi	r24, 0x07	; 7
    1cb4:	9e e0       	ldi	r25, 0x0E	; 14
    1cb6:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
    1cba:	87 e0       	ldi	r24, 0x07	; 7
    1cbc:	9e e0       	ldi	r25, 0x0E	; 14
    1cbe:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <_ZN7TwoWire3endEv>
    1cc2:	65 e0       	ldi	r22, 0x05	; 5
    1cc4:	75 e0       	ldi	r23, 0x05	; 5
    1cc6:	8d e5       	ldi	r24, 0x5D	; 93
    1cc8:	9e e0       	ldi	r25, 0x0E	; 14
    1cca:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
    1cce:	66 e1       	ldi	r22, 0x16	; 22
    1cd0:	75 e0       	ldi	r23, 0x05	; 5
    1cd2:	8d e5       	ldi	r24, 0x5D	; 93
    1cd4:	9e e0       	ldi	r25, 0x0E	; 14
    1cd6:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
    1cda:	6d e4       	ldi	r22, 0x4D	; 77
    1cdc:	75 e0       	ldi	r23, 0x05	; 5
    1cde:	8d e5       	ldi	r24, 0x5D	; 93
    1ce0:	9e e0       	ldi	r25, 0x0E	; 14
    1ce2:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
    1ce6:	2f ef       	ldi	r18, 0xFF	; 255
    1ce8:	80 e7       	ldi	r24, 0x70	; 112
    1cea:	92 e0       	ldi	r25, 0x02	; 2
    1cec:	21 50       	subi	r18, 0x01	; 1
    1cee:	80 40       	sbci	r24, 0x00	; 0
    1cf0:	90 40       	sbci	r25, 0x00	; 0
    1cf2:	e1 f7       	brne	.-8      	; 0x1cec <setup+0x3fa>
    1cf4:	00 c0       	rjmp	.+0      	; 0x1cf6 <setup+0x404>
    1cf6:	00 00       	nop
    1cf8:	0e 94 9b 01 	call	0x336	; 0x336 <_Z14initIOExpanderv>
    1cfc:	2f ef       	ldi	r18, 0xFF	; 255
    1cfe:	80 e7       	ldi	r24, 0x70	; 112
    1d00:	92 e0       	ldi	r25, 0x02	; 2
    1d02:	21 50       	subi	r18, 0x01	; 1
    1d04:	80 40       	sbci	r24, 0x00	; 0
    1d06:	90 40       	sbci	r25, 0x00	; 0
    1d08:	e1 f7       	brne	.-8      	; 0x1d02 <setup+0x410>
    1d0a:	00 c0       	rjmp	.+0      	; 0x1d0c <setup+0x41a>
    1d0c:	00 00       	nop
    1d0e:	8e ef       	ldi	r24, 0xFE	; 254
    1d10:	9f ef       	ldi	r25, 0xFF	; 255
    1d12:	90 93 a6 0c 	sts	0x0CA6, r25	; 0x800ca6 <stato_procedura+0x1>
    1d16:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <stato_procedura>
    1d1a:	68 e6       	ldi	r22, 0x68	; 104
    1d1c:	75 e0       	ldi	r23, 0x05	; 5
    1d1e:	81 eb       	ldi	r24, 0xB1	; 177
    1d20:	9c e0       	ldi	r25, 0x0C	; 12
    1d22:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    1d26:	61 eb       	ldi	r22, 0xB1	; 177
    1d28:	7c e0       	ldi	r23, 0x0C	; 12
    1d2a:	8d e5       	ldi	r24, 0x5D	; 93
    1d2c:	9e e0       	ldi	r25, 0x0E	; 14
    1d2e:	0e 94 24 3a 	call	0x7448	; 0x7448 <_ZN5Print7printlnERK6String>
    1d32:	26 96       	adiw	r28, 0x06	; 6
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	1f 91       	pop	r17
    1d44:	0f 91       	pop	r16
    1d46:	ff 90       	pop	r15
    1d48:	ef 90       	pop	r14
    1d4a:	df 90       	pop	r13
    1d4c:	cf 90       	pop	r12
    1d4e:	08 95       	ret

00001d50 <_Z23getTastoPremuto_x_targav>:
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	62 97       	sbiw	r28, 0x12	; 18
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	87 e0       	ldi	r24, 0x07	; 7
    1d6e:	9e e0       	ldi	r25, 0x0E	; 14
    1d70:	0e 94 3a 36 	call	0x6c74	; 0x6c74 <_ZN7TwoWire5flushEv>
    1d74:	41 e0       	ldi	r20, 0x01	; 1
    1d76:	50 e0       	ldi	r21, 0x00	; 0
    1d78:	60 e2       	ldi	r22, 0x20	; 32
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	87 e0       	ldi	r24, 0x07	; 7
    1d7e:	9e e0       	ldi	r25, 0x0E	; 14
    1d80:	0e 94 6d 37 	call	0x6eda	; 0x6eda <_ZN7TwoWire11requestFromEii>
    1d84:	6b eb       	ldi	r22, 0xBB	; 187
    1d86:	71 e0       	ldi	r23, 0x01	; 1
    1d88:	ce 01       	movw	r24, r28
    1d8a:	0d 96       	adiw	r24, 0x0d	; 13
    1d8c:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1d90:	11 e0       	ldi	r17, 0x01	; 1
    1d92:	02 e0       	ldi	r16, 0x02	; 2
    1d94:	83 e0       	ldi	r24, 0x03	; 3
    1d96:	f8 2e       	mov	r15, r24
    1d98:	94 e0       	ldi	r25, 0x04	; 4
    1d9a:	e9 2e       	mov	r14, r25
    1d9c:	87 e0       	ldi	r24, 0x07	; 7
    1d9e:	9e e0       	ldi	r25, 0x0E	; 14
    1da0:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_ZN7TwoWire9availableEv>
    1da4:	89 2b       	or	r24, r25
    1da6:	09 f4       	brne	.+2      	; 0x1daa <_Z23getTastoPremuto_x_targav+0x5a>
    1da8:	55 c1       	rjmp	.+682    	; 0x2054 <_Z23getTastoPremuto_x_targav+0x304>
    1daa:	87 e0       	ldi	r24, 0x07	; 7
    1dac:	9e e0       	ldi	r25, 0x0E	; 14
    1dae:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <_ZN7TwoWire4readEv>
    1db2:	99 27       	eor	r25, r25
    1db4:	82 3c       	cpi	r24, 0xC2	; 194
    1db6:	91 05       	cpc	r25, r1
    1db8:	49 f1       	breq	.+82     	; 0x1e0c <_Z23getTastoPremuto_x_targav+0xbc>
    1dba:	94 f4       	brge	.+36     	; 0x1de0 <_Z23getTastoPremuto_x_targav+0x90>
    1dbc:	83 34       	cpi	r24, 0x43	; 67
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	41 f1       	breq	.+80     	; 0x1e12 <_Z23getTastoPremuto_x_targav+0xc2>
    1dc2:	24 f4       	brge	.+8      	; 0x1dcc <_Z23getTastoPremuto_x_targav+0x7c>
    1dc4:	cc 97       	sbiw	r24, 0x3c	; 60
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <_Z23getTastoPremuto_x_targav+0x7a>
    1dc8:	49 c0       	rjmp	.+146    	; 0x1e5c <_Z23getTastoPremuto_x_targav+0x10c>
    1dca:	46 c0       	rjmp	.+140    	; 0x1e58 <_Z23getTastoPremuto_x_targav+0x108>
    1dcc:	83 38       	cpi	r24, 0x83	; 131
    1dce:	91 05       	cpc	r25, r1
    1dd0:	81 f1       	breq	.+96     	; 0x1e32 <_Z23getTastoPremuto_x_targav+0xe2>
    1dd2:	81 3c       	cpi	r24, 0xC1	; 193
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <_Z23getTastoPremuto_x_targav+0x8a>
    1dd8:	3f c0       	rjmp	.+126    	; 0x1e58 <_Z23getTastoPremuto_x_targav+0x108>
    1dda:	00 93 7a 0b 	sts	0x0B7A, r16	; 0x800b7a <key_idx>
    1dde:	1b c0       	rjmp	.+54     	; 0x1e16 <_Z23getTastoPremuto_x_targav+0xc6>
    1de0:	8b 3c       	cpi	r24, 0xCB	; 203
    1de2:	91 05       	cpc	r25, r1
    1de4:	49 f1       	breq	.+82     	; 0x1e38 <_Z23getTastoPremuto_x_targav+0xe8>
    1de6:	4c f4       	brge	.+18     	; 0x1dfa <_Z23getTastoPremuto_x_targav+0xaa>
    1de8:	83 3c       	cpi	r24, 0xC3	; 195
    1dea:	91 05       	cpc	r25, r1
    1dec:	b9 f1       	breq	.+110    	; 0x1e5c <_Z23getTastoPremuto_x_targav+0x10c>
    1dee:	87 3c       	cpi	r24, 0xC7	; 199
    1df0:	91 05       	cpc	r25, r1
    1df2:	91 f5       	brne	.+100    	; 0x1e58 <_Z23getTastoPremuto_x_targav+0x108>
    1df4:	10 93 7b 0b 	sts	0x0B7B, r17	; 0x800b7b <key_idx+0x1>
    1df8:	24 c0       	rjmp	.+72     	; 0x1e42 <_Z23getTastoPremuto_x_targav+0xf2>
    1dfa:	83 3d       	cpi	r24, 0xD3	; 211
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	f9 f0       	breq	.+62     	; 0x1e3e <_Z23getTastoPremuto_x_targav+0xee>
    1e00:	83 3e       	cpi	r24, 0xE3	; 227
    1e02:	91 05       	cpc	r25, r1
    1e04:	49 f5       	brne	.+82     	; 0x1e58 <_Z23getTastoPremuto_x_targav+0x108>
    1e06:	e0 92 7b 0b 	sts	0x0B7B, r14	; 0x800b7b <key_idx+0x1>
    1e0a:	1b c0       	rjmp	.+54     	; 0x1e42 <_Z23getTastoPremuto_x_targav+0xf2>
    1e0c:	10 93 7a 0b 	sts	0x0B7A, r17	; 0x800b7a <key_idx>
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <_Z23getTastoPremuto_x_targav+0xc6>
    1e12:	f0 92 7a 0b 	sts	0x0B7A, r15	; 0x800b7a <key_idx>
    1e16:	8f e1       	ldi	r24, 0x1F	; 31
    1e18:	9e e4       	ldi	r25, 0x4E	; 78
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <_Z23getTastoPremuto_x_targav+0xca>
    1e1e:	00 c0       	rjmp	.+0      	; 0x1e20 <_Z23getTastoPremuto_x_targav+0xd0>
    1e20:	00 00       	nop
    1e22:	0e 94 86 06 	call	0xd0c	; 0xd0c <_Z12leggiColonnev>
    1e26:	80 91 79 0b 	lds	r24, 0x0B79	; 0x800b79 <premuto>
    1e2a:	8f 5f       	subi	r24, 0xFF	; 255
    1e2c:	80 93 79 0b 	sts	0x0B79, r24	; 0x800b79 <premuto>
    1e30:	15 c0       	rjmp	.+42     	; 0x1e5c <_Z23getTastoPremuto_x_targav+0x10c>
    1e32:	e0 92 7a 0b 	sts	0x0B7A, r14	; 0x800b7a <key_idx>
    1e36:	ef cf       	rjmp	.-34     	; 0x1e16 <_Z23getTastoPremuto_x_targav+0xc6>
    1e38:	00 93 7b 0b 	sts	0x0B7B, r16	; 0x800b7b <key_idx+0x1>
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <_Z23getTastoPremuto_x_targav+0xf2>
    1e3e:	f0 92 7b 0b 	sts	0x0B7B, r15	; 0x800b7b <key_idx+0x1>
    1e42:	8f e1       	ldi	r24, 0x1F	; 31
    1e44:	9e e4       	ldi	r25, 0x4E	; 78
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <_Z23getTastoPremuto_x_targav+0xf6>
    1e4a:	00 c0       	rjmp	.+0      	; 0x1e4c <_Z23getTastoPremuto_x_targav+0xfc>
    1e4c:	00 00       	nop
    1e4e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <_Z10leggiRighev>
    1e52:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_Z17leggi_OP_REGISTERv>
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <_Z23getTastoPremuto_x_targav+0x10c>
    1e58:	0e 94 86 06 	call	0xd0c	; 0xd0c <_Z12leggiColonnev>
    1e5c:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z17leggi_IP_REGISTERv>
    1e60:	80 91 79 0b 	lds	r24, 0x0B79	; 0x800b79 <premuto>
    1e64:	88 23       	and	r24, r24
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <_Z23getTastoPremuto_x_targav+0x11a>
    1e68:	ee c0       	rjmp	.+476    	; 0x2046 <_Z23getTastoPremuto_x_targav+0x2f6>
    1e6a:	60 91 7a 0b 	lds	r22, 0x0B7A	; 0x800b7a <key_idx>
    1e6e:	94 e0       	ldi	r25, 0x04	; 4
    1e70:	69 9f       	mul	r22, r25
    1e72:	b0 01       	movw	r22, r0
    1e74:	11 24       	eor	r1, r1
    1e76:	6a 5f       	subi	r22, 0xFA	; 250
    1e78:	7e 4f       	sbci	r23, 0xFE	; 254
    1e7a:	82 e7       	ldi	r24, 0x72	; 114
    1e7c:	9b e0       	ldi	r25, 0x0B	; 11
    1e7e:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    1e82:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <key_idx>
    1e86:	84 30       	cpi	r24, 0x04	; 4
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <_Z23getTastoPremuto_x_targav+0x13c>
    1e8a:	69 c0       	rjmp	.+210    	; 0x1f5e <_Z23getTastoPremuto_x_targav+0x20e>
    1e8c:	80 91 7b 0b 	lds	r24, 0x0B7B	; 0x800b7b <key_idx+0x1>
    1e90:	83 30       	cpi	r24, 0x03	; 3
    1e92:	81 f4       	brne	.+32     	; 0x1eb4 <_Z23getTastoPremuto_x_targav+0x164>
    1e94:	80 91 78 0b 	lds	r24, 0x0B78	; 0x800b78 <prolungato>
    1e98:	8f 5f       	subi	r24, 0xFF	; 255
    1e9a:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <prolungato>
    1e9e:	83 30       	cpi	r24, 0x03	; 3
    1ea0:	08 f4       	brcc	.+2      	; 0x1ea4 <_Z23getTastoPremuto_x_targav+0x154>
    1ea2:	cf c0       	rjmp	.+414    	; 0x2042 <_Z23getTastoPremuto_x_targav+0x2f2>
    1ea4:	80 91 70 0b 	lds	r24, 0x0B70	; 0x800b70 <TARGA+0x4>
    1ea8:	90 91 71 0b 	lds	r25, 0x0B71	; 0x800b71 <TARGA+0x5>
    1eac:	05 97       	sbiw	r24, 0x05	; 5
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <_Z23getTastoPremuto_x_targav+0x162>
    1eb0:	c8 c0       	rjmp	.+400    	; 0x2042 <_Z23getTastoPremuto_x_targav+0x2f2>
    1eb2:	4e c1       	rjmp	.+668    	; 0x2150 <_Z23getTastoPremuto_x_targav+0x400>
    1eb4:	81 30       	cpi	r24, 0x01	; 1
    1eb6:	09 f0       	breq	.+2      	; 0x1eba <_Z23getTastoPremuto_x_targav+0x16a>
    1eb8:	5a c0       	rjmp	.+180    	; 0x1f6e <_Z23getTastoPremuto_x_targav+0x21e>
    1eba:	80 91 78 0b 	lds	r24, 0x0B78	; 0x800b78 <prolungato>
    1ebe:	8f 5f       	subi	r24, 0xFF	; 255
    1ec0:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <prolungato>
    1ec4:	83 30       	cpi	r24, 0x03	; 3
    1ec6:	08 f4       	brcc	.+2      	; 0x1eca <_Z23getTastoPremuto_x_targav+0x17a>
    1ec8:	bc c0       	rjmp	.+376    	; 0x2042 <_Z23getTastoPremuto_x_targav+0x2f2>
    1eca:	46 e9       	ldi	r20, 0x96	; 150
    1ecc:	50 e0       	ldi	r21, 0x00	; 0
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	0e 94 43 06 	call	0xc86	; 0xc86 <_Z6Buzzerhm>
    1ed8:	6b eb       	ldi	r22, 0xBB	; 187
    1eda:	71 e0       	ldi	r23, 0x01	; 1
    1edc:	8c e6       	ldi	r24, 0x6C	; 108
    1ede:	9b e0       	ldi	r25, 0x0B	; 11
    1ee0:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    1ee4:	66 e7       	ldi	r22, 0x76	; 118
    1ee6:	75 e0       	ldi	r23, 0x05	; 5
    1ee8:	89 e4       	ldi	r24, 0x49	; 73
    1eea:	9c e0       	ldi	r25, 0x0C	; 12
    1eec:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    1ef0:	6b eb       	ldi	r22, 0xBB	; 187
    1ef2:	71 e0       	ldi	r23, 0x01	; 1
    1ef4:	8f e4       	ldi	r24, 0x4F	; 79
    1ef6:	9c e0       	ldi	r25, 0x0C	; 12
    1ef8:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    1efc:	6a e8       	ldi	r22, 0x8A	; 138
    1efe:	75 e0       	ldi	r23, 0x05	; 5
    1f00:	ce 01       	movw	r24, r28
    1f02:	01 96       	adiw	r24, 0x01	; 1
    1f04:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1f08:	6c e6       	ldi	r22, 0x6C	; 108
    1f0a:	7b e0       	ldi	r23, 0x0B	; 11
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	01 96       	adiw	r24, 0x01	; 1
    1f10:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
    1f14:	bc 01       	movw	r22, r24
    1f16:	85 e5       	ldi	r24, 0x55	; 85
    1f18:	9c e0       	ldi	r25, 0x0C	; 12
    1f1a:	0e 94 31 3d 	call	0x7a62	; 0x7a62 <_ZN6StringaSERKS_>
    1f1e:	ce 01       	movw	r24, r28
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    1f26:	8e ec       	ldi	r24, 0xCE	; 206
    1f28:	9c e0       	ldi	r25, 0x0C	; 12
    1f2a:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN3LCD5clearEv>
    1f2e:	43 e0       	ldi	r20, 0x03	; 3
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	8e ec       	ldi	r24, 0xCE	; 206
    1f34:	9c e0       	ldi	r25, 0x0C	; 12
    1f36:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN3LCD9setCursorEhh>
    1f3a:	6a e8       	ldi	r22, 0x8A	; 138
    1f3c:	75 e0       	ldi	r23, 0x05	; 5
    1f3e:	ce 01       	movw	r24, r28
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1f46:	6c e6       	ldi	r22, 0x6C	; 108
    1f48:	7b e0       	ldi	r23, 0x0B	; 11
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	01 96       	adiw	r24, 0x01	; 1
    1f4e:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
    1f52:	bc 01       	movw	r22, r24
    1f54:	8e ec       	ldi	r24, 0xCE	; 206
    1f56:	9c e0       	ldi	r25, 0x0C	; 12
    1f58:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <_ZN5Print5printERK6String>
    1f5c:	27 c0       	rjmp	.+78     	; 0x1fac <_Z23getTastoPremuto_x_targav+0x25c>
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	21 f0       	breq	.+8      	; 0x1f6a <_Z23getTastoPremuto_x_targav+0x21a>
    1f62:	82 30       	cpi	r24, 0x02	; 2
    1f64:	11 f0       	breq	.+4      	; 0x1f6a <_Z23getTastoPremuto_x_targav+0x21a>
    1f66:	83 30       	cpi	r24, 0x03	; 3
    1f68:	31 f5       	brne	.+76     	; 0x1fb6 <_Z23getTastoPremuto_x_targav+0x266>
    1f6a:	80 91 7b 0b 	lds	r24, 0x0B7B	; 0x800b7b <key_idx+0x1>
    1f6e:	84 30       	cpi	r24, 0x04	; 4
    1f70:	11 f5       	brne	.+68     	; 0x1fb6 <_Z23getTastoPremuto_x_targav+0x266>
    1f72:	66 e7       	ldi	r22, 0x76	; 118
    1f74:	75 e0       	ldi	r23, 0x05	; 5
    1f76:	89 e4       	ldi	r24, 0x49	; 73
    1f78:	9c e0       	ldi	r25, 0x0C	; 12
    1f7a:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    1f7e:	6b eb       	ldi	r22, 0xBB	; 187
    1f80:	71 e0       	ldi	r23, 0x01	; 1
    1f82:	8f e4       	ldi	r24, 0x4F	; 79
    1f84:	9c e0       	ldi	r25, 0x0C	; 12
    1f86:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    1f8a:	6a e8       	ldi	r22, 0x8A	; 138
    1f8c:	75 e0       	ldi	r23, 0x05	; 5
    1f8e:	ce 01       	movw	r24, r28
    1f90:	01 96       	adiw	r24, 0x01	; 1
    1f92:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    1f96:	6c e6       	ldi	r22, 0x6C	; 108
    1f98:	7b e0       	ldi	r23, 0x0B	; 11
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	85 e5       	ldi	r24, 0x55	; 85
    1fa6:	9c e0       	ldi	r25, 0x0C	; 12
    1fa8:	0e 94 31 3d 	call	0x7a62	; 0x7a62 <_ZN6StringaSERKS_>
    1fac:	ce 01       	movw	r24, r28
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    1fb4:	46 c0       	rjmp	.+140    	; 0x2042 <_Z23getTastoPremuto_x_targav+0x2f2>
    1fb6:	80 91 79 0b 	lds	r24, 0x0B79	; 0x800b79 <premuto>
    1fba:	82 30       	cpi	r24, 0x02	; 2
    1fbc:	08 f0       	brcs	.+2      	; 0x1fc0 <_Z23getTastoPremuto_x_targav+0x270>
    1fbe:	41 c0       	rjmp	.+130    	; 0x2042 <_Z23getTastoPremuto_x_targav+0x2f2>
    1fc0:	20 91 7b 0b 	lds	r18, 0x0B7B	; 0x800b7b <key_idx+0x1>
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	a9 01       	movw	r20, r18
    1fc8:	41 50       	subi	r20, 0x01	; 1
    1fca:	51 09       	sbc	r21, r1
    1fcc:	62 e7       	ldi	r22, 0x72	; 114
    1fce:	7b e0       	ldi	r23, 0x0B	; 11
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	01 96       	adiw	r24, 0x01	; 1
    1fd4:	0e 94 a6 3e 	call	0x7d4c	; 0x7d4c <_ZNK6String9substringEjj>
    1fd8:	be 01       	movw	r22, r28
    1fda:	6f 5f       	subi	r22, 0xFF	; 255
    1fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fde:	8c e6       	ldi	r24, 0x6C	; 108
    1fe0:	9b e0       	ldi	r25, 0x0B	; 11
    1fe2:	0e 94 1e 3e 	call	0x7c3c	; 0x7c3c <_ZN6String6concatERKS_>
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	01 96       	adiw	r24, 0x01	; 1
    1fea:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    1fee:	66 e7       	ldi	r22, 0x76	; 118
    1ff0:	75 e0       	ldi	r23, 0x05	; 5
    1ff2:	89 e4       	ldi	r24, 0x49	; 73
    1ff4:	9c e0       	ldi	r25, 0x0C	; 12
    1ff6:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    1ffa:	6b eb       	ldi	r22, 0xBB	; 187
    1ffc:	71 e0       	ldi	r23, 0x01	; 1
    1ffe:	8f e4       	ldi	r24, 0x4F	; 79
    2000:	9c e0       	ldi	r25, 0x0C	; 12
    2002:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    2006:	6a e8       	ldi	r22, 0x8A	; 138
    2008:	75 e0       	ldi	r23, 0x05	; 5
    200a:	ce 01       	movw	r24, r28
    200c:	01 96       	adiw	r24, 0x01	; 1
    200e:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    2012:	6c e6       	ldi	r22, 0x6C	; 108
    2014:	7b e0       	ldi	r23, 0x0B	; 11
    2016:	ce 01       	movw	r24, r28
    2018:	01 96       	adiw	r24, 0x01	; 1
    201a:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
    201e:	bc 01       	movw	r22, r24
    2020:	85 e5       	ldi	r24, 0x55	; 85
    2022:	9c e0       	ldi	r25, 0x0C	; 12
    2024:	0e 94 31 3d 	call	0x7a62	; 0x7a62 <_ZN6StringaSERKS_>
    2028:	ce 01       	movw	r24, r28
    202a:	01 96       	adiw	r24, 0x01	; 1
    202c:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    2030:	10 92 78 0b 	sts	0x0B78, r1	; 0x800b78 <prolungato>
    2034:	4a e0       	ldi	r20, 0x0A	; 10
    2036:	50 e0       	ldi	r21, 0x00	; 0
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	0e 94 43 06 	call	0xc86	; 0xc86 <_Z6Buzzerhm>
    2042:	10 92 79 0b 	sts	0x0B79, r1	; 0x800b79 <premuto>
    2046:	8f e3       	ldi	r24, 0x3F	; 63
    2048:	9f e1       	ldi	r25, 0x1F	; 31
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <_Z23getTastoPremuto_x_targav+0x2fa>
    204e:	00 c0       	rjmp	.+0      	; 0x2050 <_Z23getTastoPremuto_x_targav+0x300>
    2050:	00 00       	nop
    2052:	a4 ce       	rjmp	.-696    	; 0x1d9c <_Z23getTastoPremuto_x_targav+0x4c>
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	8e ec       	ldi	r24, 0xCE	; 206
    205a:	9c e0       	ldi	r25, 0x0C	; 12
    205c:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN3LCD9setCursorEhh>
    2060:	40 91 86 0b 	lds	r20, 0x0B86	; 0x800b86 <UltimoPassaggioStato>
    2064:	50 91 87 0b 	lds	r21, 0x0B87	; 0x800b87 <UltimoPassaggioStato+0x1>
    2068:	60 91 88 0b 	lds	r22, 0x0B88	; 0x800b88 <UltimoPassaggioStato+0x2>
    206c:	70 91 89 0b 	lds	r23, 0x0B89	; 0x800b89 <UltimoPassaggioStato+0x3>
    2070:	80 91 82 0b 	lds	r24, 0x0B82	; 0x800b82 <Timer>
    2074:	90 91 83 0b 	lds	r25, 0x0B83	; 0x800b83 <Timer+0x1>
    2078:	a0 91 84 0b 	lds	r26, 0x0B84	; 0x800b84 <Timer+0x2>
    207c:	b0 91 85 0b 	lds	r27, 0x0B85	; 0x800b85 <Timer+0x3>
    2080:	48 0f       	add	r20, r24
    2082:	59 1f       	adc	r21, r25
    2084:	6a 1f       	adc	r22, r26
    2086:	7b 1f       	adc	r23, r27
    2088:	41 50       	subi	r20, 0x01	; 1
    208a:	51 09       	sbc	r21, r1
    208c:	61 09       	sbc	r22, r1
    208e:	71 09       	sbc	r23, r1
    2090:	80 91 8a 0b 	lds	r24, 0x0B8A	; 0x800b8a <secs>
    2094:	90 91 8b 0b 	lds	r25, 0x0B8B	; 0x800b8b <secs+0x1>
    2098:	a0 91 8c 0b 	lds	r26, 0x0B8C	; 0x800b8c <secs+0x2>
    209c:	b0 91 8d 0b 	lds	r27, 0x0B8D	; 0x800b8d <secs+0x3>
    20a0:	48 1b       	sub	r20, r24
    20a2:	59 0b       	sbc	r21, r25
    20a4:	6a 0b       	sbc	r22, r26
    20a6:	7b 0b       	sbc	r23, r27
    20a8:	2a e0       	ldi	r18, 0x0A	; 10
    20aa:	ce 01       	movw	r24, r28
    20ac:	07 96       	adiw	r24, 0x07	; 7
    20ae:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringC1Emh>
    20b2:	68 e5       	ldi	r22, 0x58	; 88
    20b4:	73 e0       	ldi	r23, 0x03	; 3
    20b6:	ce 01       	movw	r24, r28
    20b8:	01 96       	adiw	r24, 0x01	; 1
    20ba:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    20be:	be 01       	movw	r22, r28
    20c0:	69 5f       	subi	r22, 0xF9	; 249
    20c2:	7f 4f       	sbci	r23, 0xFF	; 255
    20c4:	ce 01       	movw	r24, r28
    20c6:	01 96       	adiw	r24, 0x01	; 1
    20c8:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
    20cc:	60 e6       	ldi	r22, 0x60	; 96
    20ce:	73 e0       	ldi	r23, 0x03	; 3
    20d0:	0e 94 43 3e 	call	0x7c86	; 0x7c86 <_ZplRK15StringSumHelperPKc>
    20d4:	bc 01       	movw	r22, r24
    20d6:	8e ec       	ldi	r24, 0xCE	; 206
    20d8:	9c e0       	ldi	r25, 0x0C	; 12
    20da:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <_ZN5Print5printERK6String>
    20de:	ce 01       	movw	r24, r28
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    20e6:	ce 01       	movw	r24, r28
    20e8:	07 96       	adiw	r24, 0x07	; 7
    20ea:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    20ee:	61 e0       	ldi	r22, 0x01	; 1
    20f0:	8e ec       	ldi	r24, 0xCE	; 206
    20f2:	9c e0       	ldi	r25, 0x0C	; 12
    20f4:	0e 94 0a 3a 	call	0x7414	; 0x7414 <_ZN5Print5printEc>
    20f8:	43 e0       	ldi	r20, 0x03	; 3
    20fa:	60 e0       	ldi	r22, 0x00	; 0
    20fc:	8e ec       	ldi	r24, 0xCE	; 206
    20fe:	9c e0       	ldi	r25, 0x0C	; 12
    2100:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN3LCD9setCursorEhh>
    2104:	6a e8       	ldi	r22, 0x8A	; 138
    2106:	75 e0       	ldi	r23, 0x05	; 5
    2108:	ce 01       	movw	r24, r28
    210a:	01 96       	adiw	r24, 0x01	; 1
    210c:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    2110:	6c e6       	ldi	r22, 0x6C	; 108
    2112:	7b e0       	ldi	r23, 0x0B	; 11
    2114:	ce 01       	movw	r24, r28
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
    211c:	bc 01       	movw	r22, r24
    211e:	8e ec       	ldi	r24, 0xCE	; 206
    2120:	9c e0       	ldi	r25, 0x0C	; 12
    2122:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <_ZN5Print5printERK6String>
    2126:	ce 01       	movw	r24, r28
    2128:	01 96       	adiw	r24, 0x01	; 1
    212a:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    212e:	ce 01       	movw	r24, r28
    2130:	0d 96       	adiw	r24, 0x0d	; 13
    2132:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    2136:	62 96       	adiw	r28, 0x12	; 18
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	de bf       	out	0x3e, r29	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	cd bf       	out	0x3d, r28	; 61
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	1f 91       	pop	r17
    2148:	0f 91       	pop	r16
    214a:	ff 90       	pop	r15
    214c:	ef 90       	pop	r14
    214e:	08 95       	ret
    2150:	44 e6       	ldi	r20, 0x64	; 100
    2152:	50 e0       	ldi	r21, 0x00	; 0
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	70 e0       	ldi	r23, 0x00	; 0
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	0e 94 43 06 	call	0xc86	; 0xc86 <_Z6Buzzerhm>
    215e:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TselDistributore>
    2162:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TselDistributore+0x1>
    2166:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TselDistributore+0x2>
    216a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TselDistributore+0x3>
    216e:	0e 94 6a 07 	call	0xed4	; 0xed4 <_Z11avanzaStatom>
    2172:	67 cf       	rjmp	.-306    	; 0x2042 <_Z23getTastoPremuto_x_targav+0x2f2>

00002174 <_Z6Azzerav>:
   if (azione == 1) {SET_BIT(PORTB,3);} else if (azione == 0) { CLEAR_BIT(PORTB,3); }
}

void Azzera()
{
   RispostaHTTP = "";
    2174:	6b eb       	ldi	r22, 0xBB	; 187
    2176:	71 e0       	ldi	r23, 0x01	; 1
    2178:	8d e9       	ldi	r24, 0x9D	; 157
    217a:	9c e0       	ldi	r25, 0x0C	; 12
    217c:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
   impulsi = 0;
    2180:	10 92 a4 0c 	sts	0x0CA4, r1	; 0x800ca4 <impulsi+0x1>
    2184:	10 92 a3 0c 	sts	0x0CA3, r1	; 0x800ca3 <impulsi>
   alreadyTimbrata = false;
    2188:	10 92 e6 0c 	sts	0x0CE6, r1	; 0x800ce6 <alreadyTimbrata>
   
   Carburante = "X";
    218c:	60 eb       	ldi	r22, 0xB0	; 176
    218e:	73 e0       	ldi	r23, 0x03	; 3
    2190:	83 e7       	ldi	r24, 0x73	; 115
    2192:	9c e0       	ldi	r25, 0x0C	; 12
    2194:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
   SequenzaKeypad[0] = "";
    2198:	6b eb       	ldi	r22, 0xBB	; 187
    219a:	71 e0       	ldi	r23, 0x01	; 1
    219c:	87 e6       	ldi	r24, 0x67	; 103
    219e:	9c e0       	ldi	r25, 0x0C	; 12
    21a0:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
   SequenzaKeypad[1] = "";
    21a4:	6b eb       	ldi	r22, 0xBB	; 187
    21a6:	71 e0       	ldi	r23, 0x01	; 1
    21a8:	8d e6       	ldi	r24, 0x6D	; 109
    21aa:	9c e0       	ldi	r25, 0x0C	; 12
    21ac:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
   
   Rele_Abilitazione1(1,7);
    21b0:	67 e0       	ldi	r22, 0x07	; 7
    21b2:	70 e0       	ldi	r23, 0x00	; 0
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	3a d8       	rcall	.-3980   	; 0x122e <_Z18Rele_Abilitazione1ii>
   Rele_Abilitazione2(1,7);
    21ba:	67 e0       	ldi	r22, 0x07	; 7
    21bc:	70 e0       	ldi	r23, 0x00	; 0
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	70 d8       	rcall	.-3872   	; 0x12a4 <_Z18Rele_Abilitazione2ii>
   Control_WIFI(0);
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	b1 d8       	rcall	.-3742   	; 0x132c <_Z12Control_WIFIi>
   
   clientToServizio.flush();
    21ca:	8d ea       	ldi	r24, 0xAD	; 173
    21cc:	9b e0       	ldi	r25, 0x0B	; 11
    21ce:	0e 94 a6 23 	call	0x474c	; 0x474c <_ZN14EthernetClient5flushEv>
   clientToServizio.stop();
    21d2:	8d ea       	ldi	r24, 0xAD	; 173
    21d4:	9b e0       	ldi	r25, 0x0B	; 11
    21d6:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <_ZN14EthernetClient4stopEv>
   clientREST.flush();
    21da:	8a eb       	ldi	r24, 0xBA	; 186
    21dc:	9b e0       	ldi	r25, 0x0B	; 11
    21de:	0e 94 a6 23 	call	0x474c	; 0x474c <_ZN14EthernetClient5flushEv>
   clientREST.stop();
    21e2:	8a eb       	ldi	r24, 0xBA	; 186
    21e4:	9b e0       	ldi	r25, 0x0B	; 11
    21e6:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <_ZN14EthernetClient4stopEv>
   Connected = false;
    21ea:	10 92 a8 0c 	sts	0x0CA8, r1	; 0x800ca8 <Connected+0x1>
    21ee:	10 92 a7 0c 	sts	0x0CA7, r1	; 0x800ca7 <Connected>
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
    21f2:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21f4:	8f e1       	ldi	r24, 0x1F	; 31
    21f6:	9e e4       	ldi	r25, 0x4E	; 78
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <_Z6Azzerav+0x84>
    21fc:	00 c0       	rjmp	.+0      	; 0x21fe <_Z6Azzerav+0x8a>
    21fe:	00 00       	nop
static inline void disable_ETH()   { PORTC |= (1 << PC4);  } // Set 1 Bit 4 PORTC Register
static inline void disable_FLASH() { PORTB |= (1 << PB4);  } // Set 1 Bit 4 PORTB Register
    2200:	2c 9a       	sbi	0x05, 4	; 5
    2202:	8f e1       	ldi	r24, 0x1F	; 31
    2204:	9e e4       	ldi	r25, 0x4E	; 78
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <_Z6Azzerav+0x92>
    220a:	00 c0       	rjmp	.+0      	; 0x220c <_Z6Azzerav+0x98>
    220c:	00 00       	nop
   
   enable_FLASH();
   _delay_ms(5);
   disable_FLASH();
   _delay_ms(5);
   disable_ETH();
    220e:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    2212:	8f e1       	ldi	r24, 0x1F	; 31
    2214:	9e e4       	ldi	r25, 0x4E	; 78
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	f1 f7       	brne	.-4      	; 0x2216 <_Z6Azzerav+0xa2>
    221a:	00 c0       	rjmp	.+0      	; 0x221c <_Z6Azzerav+0xa8>
    221c:	00 00       	nop
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    221e:	44 98       	cbi	0x08, 4	; 8
   _delay_ms(5);
   disable_ETH();
   _delay_ms(5); 
   enable_ETH(); 
     
   SET_BIT(PORTA,A1);
    2220:	82 b1       	in	r24, 0x02	; 2
    2222:	82 b9       	out	0x02, r24	; 2
   SET_BIT(PORTA,A2);
    2224:	82 b1       	in	r24, 0x02	; 2
    2226:	82 b9       	out	0x02, r24	; 2
   
   righeDisplay[1] =  "";
    2228:	6b eb       	ldi	r22, 0xBB	; 187
    222a:	71 e0       	ldi	r23, 0x01	; 1
    222c:	89 e4       	ldi	r24, 0x49	; 73
    222e:	9c e0       	ldi	r25, 0x0C	; 12
    2230:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    2234:	6b eb       	ldi	r22, 0xBB	; 187
    2236:	71 e0       	ldi	r23, 0x01	; 1
    2238:	8f e4       	ldi	r24, 0x4F	; 79
    223a:	9c e0       	ldi	r25, 0x0C	; 12
    223c:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    2240:	6b eb       	ldi	r22, 0xBB	; 187
    2242:	71 e0       	ldi	r23, 0x01	; 1
    2244:	8f e4       	ldi	r24, 0x4F	; 79
    2246:	9c e0       	ldi	r25, 0x0C	; 12
    2248:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
   
   lcd.noBacklight();
    224c:	8e ec       	ldi	r24, 0xCE	; 206
    224e:	9c e0       	ldi	r25, 0x0C	; 12
    2250:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <_ZN3LCD11noBacklightEv>
   lcd.noDisplay();
    2254:	8e ec       	ldi	r24, 0xCE	; 206
    2256:	9c e0       	ldi	r25, 0x0C	; 12
    2258:	0e 94 28 2c 	call	0x5850	; 0x5850 <_ZN3LCD9noDisplayEv>
   secs = 0;
    225c:	10 92 8a 0b 	sts	0x0B8A, r1	; 0x800b8a <secs>
    2260:	10 92 8b 0b 	sts	0x0B8B, r1	; 0x800b8b <secs+0x1>
    2264:	10 92 8c 0b 	sts	0x0B8C, r1	; 0x800b8c <secs+0x2>
    2268:	10 92 8d 0b 	sts	0x0B8D, r1	; 0x800b8d <secs+0x3>
   UltimoPassaggioStato = 0;
    226c:	10 92 86 0b 	sts	0x0B86, r1	; 0x800b86 <UltimoPassaggioStato>
    2270:	10 92 87 0b 	sts	0x0B87, r1	; 0x800b87 <UltimoPassaggioStato+0x1>
    2274:	10 92 88 0b 	sts	0x0B88, r1	; 0x800b88 <UltimoPassaggioStato+0x2>
    2278:	10 92 89 0b 	sts	0x0B89, r1	; 0x800b89 <UltimoPassaggioStato+0x3>
   
   printLine();
    227c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
   Serial.println("Azzera....... OK");
    2280:	6d eb       	ldi	r22, 0xBD	; 189
    2282:	77 e0       	ldi	r23, 0x07	; 7
    2284:	8d e5       	ldi	r24, 0x5D	; 93
    2286:	9e e0       	ldi	r25, 0x0E	; 14
    2288:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
   printLine();
    228c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
   
   stato_procedura = -2;
    2290:	8e ef       	ldi	r24, 0xFE	; 254
    2292:	9f ef       	ldi	r25, 0xFF	; 255
    2294:	90 93 a6 0c 	sts	0x0CA6, r25	; 0x800ca6 <stato_procedura+0x1>
    2298:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <stato_procedura>
    229c:	08 95       	ret

0000229e <_Z17InviaRifornimentoiiPci6String>:

/********************************************************************/


bool InviaRifornimento(int P_stato,int p_connesso, char P_datiVerifica[],int P_l_buffer,String P_prefisso)
{ 
    229e:	af 92       	push	r10
    22a0:	bf 92       	push	r11
    22a2:	cf 92       	push	r12
    22a4:	df 92       	push	r13
    22a6:	ef 92       	push	r14
    22a8:	ff 92       	push	r15
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <_Z17InviaRifornimentoiiPci6String+0x16>
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <_Z17InviaRifornimentoiiPci6String+0x18>
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <_Z17InviaRifornimentoiiPci6String+0x1a>
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	5b 01       	movw	r10, r22
    22be:	8a 01       	movw	r16, r20
    22c0:	69 01       	movw	r12, r18
    clientToServizio.flush();
    //clientToServizio.stop();
    return true;
  }
  else {return false;};
}
    22c2:	ed b6       	in	r14, 0x3d	; 61
    22c4:	fe b6       	in	r15, 0x3e	; 62


bool InviaRifornimento(int P_stato,int p_connesso, char P_datiVerifica[],int P_l_buffer,String P_prefisso)
{ 
  //Risposta = "999";
  Serial.println("START InviaRifornimento !!");
    22c6:	6e ec       	ldi	r22, 0xCE	; 206
    22c8:	77 e0       	ldi	r23, 0x07	; 7
    22ca:	8d e5       	ldi	r24, 0x5D	; 93
    22cc:	9e e0       	ldi	r25, 0x0E	; 14
    22ce:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
  
  if ((p_connesso))// && (P_stato == 7 ))
    22d2:	ab 28       	or	r10, r11
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <_Z17InviaRifornimentoiiPci6String+0x3a>
    22d6:	4e c0       	rjmp	.+156    	; 0x2374 <_Z17InviaRifornimentoiiPci6String+0xd6>
  {
    Serial.println("Connected to Server -- Invio Erogazione !!");
    22d8:	69 ee       	ldi	r22, 0xE9	; 233
    22da:	77 e0       	ldi	r23, 0x07	; 7
    22dc:	8d e5       	ldi	r24, 0x5D	; 93
    22de:	9e e0       	ldi	r25, 0x0E	; 14
    22e0:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
    stato_procedura++;
    22e4:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <stato_procedura>
    22e8:	90 91 a6 0c 	lds	r25, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    22ec:	01 96       	adiw	r24, 0x01	; 1
    22ee:	90 93 a6 0c 	sts	0x0CA6, r25	; 0x800ca6 <stato_procedura+0x1>
    22f2:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <stato_procedura>
    String TX =  String(P_datiVerifica);
    22f6:	b8 01       	movw	r22, r16
    22f8:	ce 01       	movw	r24, r28
    22fa:	01 96       	adiw	r24, 0x01	; 1
    22fc:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    char Invio[P_l_buffer];
    2300:	8d b7       	in	r24, 0x3d	; 61
    2302:	9e b7       	in	r25, 0x3e	; 62
    2304:	8c 19       	sub	r24, r12
    2306:	9d 09       	sbc	r25, r13
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	9e bf       	out	0x3e, r25	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	8d bf       	out	0x3d, r24	; 61
    2312:	0d b7       	in	r16, 0x3d	; 61
    2314:	1e b7       	in	r17, 0x3e	; 62
    2316:	0f 5f       	subi	r16, 0xFF	; 255
    2318:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	a6 01       	movw	r20, r12
    2320:	b8 01       	movw	r22, r16
    2322:	ce 01       	movw	r24, r28
    2324:	01 96       	adiw	r24, 0x01	; 1
    2326:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <_ZNK6String8getBytesEPhjj>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    232a:	f8 01       	movw	r30, r16
    232c:	01 90       	ld	r0, Z+
    232e:	00 20       	and	r0, r0
    2330:	e9 f7       	brne	.-6      	; 0x232c <_Z17InviaRifornimentoiiPci6String+0x8e>
    2332:	31 97       	sbiw	r30, 0x01	; 1
    2334:	af 01       	movw	r20, r30
    2336:	40 1b       	sub	r20, r16
    2338:	51 0b       	sbc	r21, r17
    233a:	b8 01       	movw	r22, r16
    233c:	8d ea       	ldi	r24, 0xAD	; 173
    233e:	9b e0       	ldi	r25, 0x0B	; 11
    2340:	0e 94 41 23 	call	0x4682	; 0x4682 <_ZN14EthernetClient5writeEPKhj>
    2344:	9f ef       	ldi	r25, 0xFF	; 255
    2346:	29 ef       	ldi	r18, 0xF9	; 249
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	91 50       	subi	r25, 0x01	; 1
    234c:	20 40       	sbci	r18, 0x00	; 0
    234e:	80 40       	sbci	r24, 0x00	; 0
    2350:	e1 f7       	brne	.-8      	; 0x234a <_Z17InviaRifornimentoiiPci6String+0xac>
    2352:	00 c0       	rjmp	.+0      	; 0x2354 <_Z17InviaRifornimentoiiPci6String+0xb6>
    2354:	00 00       	nop
    TX.toCharArray(Invio,P_l_buffer);
    clientToServizio.write(Invio);
    _delay_ms(20);
    clientToServizio.flush();
    2356:	8d ea       	ldi	r24, 0xAD	; 173
    2358:	9b e0       	ldi	r25, 0x0B	; 11
    235a:	0e 94 a6 23 	call	0x474c	; 0x474c <_ZN14EthernetClient5flushEv>
  
  if ((p_connesso))// && (P_stato == 7 ))
  {
    Serial.println("Connected to Server -- Invio Erogazione !!");
    stato_procedura++;
    String TX =  String(P_datiVerifica);
    235e:	ce 01       	movw	r24, r28
    2360:	01 96       	adiw	r24, 0x01	; 1
    2362:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	fe be       	out	0x3e, r15	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	ed be       	out	0x3d, r14	; 61
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	01 c0       	rjmp	.+2      	; 0x2376 <_Z17InviaRifornimentoiiPci6String+0xd8>
    _delay_ms(20);
    clientToServizio.flush();
    //clientToServizio.stop();
    return true;
  }
  else {return false;};
    2374:	80 e0       	ldi	r24, 0x00	; 0
}
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	fe be       	out	0x3e, r15	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	ed be       	out	0x3d, r14	; 61
    2380:	26 96       	adiw	r28, 0x06	; 6
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	1f 91       	pop	r17
    2392:	0f 91       	pop	r16
    2394:	ff 90       	pop	r15
    2396:	ef 90       	pop	r14
    2398:	df 90       	pop	r13
    239a:	cf 90       	pop	r12
    239c:	bf 90       	pop	r11
    239e:	af 90       	pop	r10
    23a0:	08 95       	ret

000023a2 <loop>:
    _delay_ms(100);
    Messaggio.toCharArray(MessaggioToServer, 100);  
}

/**************************LOOP PROCEDURA************************************/
void loop() {
    23a2:	cf 92       	push	r12
    23a4:	df 92       	push	r13
    23a6:	ef 92       	push	r14
    23a8:	ff 92       	push	r15
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	6e 97       	sbiw	r28, 0x1e	; 30
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
      
  switch (stato_procedura) {
    23c2:	e0 91 a5 0c 	lds	r30, 0x0CA5	; 0x800ca5 <stato_procedura>
    23c6:	f0 91 a6 0c 	lds	r31, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    23ca:	32 96       	adiw	r30, 0x02	; 2
    23cc:	eb 30       	cpi	r30, 0x0B	; 11
    23ce:	f1 05       	cpc	r31, r1
    23d0:	08 f0       	brcs	.+2      	; 0x23d4 <loop+0x32>
    23d2:	71 c3       	rjmp	.+1762   	; 0x2ab6 <loop+0x714>
    23d4:	ea 5b       	subi	r30, 0xBA	; 186
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	0c 94 5e 40 	jmp	0x80bc	; 0x80bc <__tablejump2__>
    case -2:
    { //cli(); // disable interrupt      
            
      righeDisplay[1] =  "";
    23dc:	6b eb       	ldi	r22, 0xBB	; 187
    23de:	71 e0       	ldi	r23, 0x01	; 1
    23e0:	89 e4       	ldi	r24, 0x49	; 73
    23e2:	9c e0       	ldi	r25, 0x0C	; 12
    23e4:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
        righeDisplay[2] = "Setting....";
    23e8:	64 e1       	ldi	r22, 0x14	; 20
    23ea:	78 e0       	ldi	r23, 0x08	; 8
    23ec:	8f e4       	ldi	r24, 0x4F	; 79
    23ee:	9c e0       	ldi	r25, 0x0C	; 12
    23f0:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    23f4:	6b eb       	ldi	r22, 0xBB	; 187
    23f6:	71 e0       	ldi	r23, 0x01	; 1
    23f8:	85 e5       	ldi	r24, 0x55	; 85
    23fa:	9c e0       	ldi	r25, 0x0C	; 12
    23fc:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      
      displayLCD(righeDisplay,stato_procedura,100);
    2400:	60 91 a5 0c 	lds	r22, 0x0CA5	; 0x800ca5 <stato_procedura>
    2404:	70 91 a6 0c 	lds	r23, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    2408:	44 e6       	ldi	r20, 0x64	; 100
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	83 e4       	ldi	r24, 0x43	; 67
    240e:	9c e0       	ldi	r25, 0x0C	; 12
    2410:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z10displayLCDP6Stringii>
    2414:	2f ef       	ldi	r18, 0xFF	; 255
    2416:	83 ec       	ldi	r24, 0xC3	; 195
    2418:	99 e0       	ldi	r25, 0x09	; 9
    241a:	21 50       	subi	r18, 0x01	; 1
    241c:	80 40       	sbci	r24, 0x00	; 0
    241e:	90 40       	sbci	r25, 0x00	; 0
    2420:	e1 f7       	brne	.-8      	; 0x241a <loop+0x78>
    2422:	00 c0       	rjmp	.+0      	; 0x2424 <loop+0x82>
    2424:	00 00       	nop
    2426:	1f c0       	rjmp	.+62     	; 0x2466 <loop+0xc4>
      stato_procedura++;
    }
    break;
    case -1:
    {   
      righeDisplay[1] =  "";
    2428:	6b eb       	ldi	r22, 0xBB	; 187
    242a:	71 e0       	ldi	r23, 0x01	; 1
    242c:	89 e4       	ldi	r24, 0x49	; 73
    242e:	9c e0       	ldi	r25, 0x0C	; 12
    2430:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    2434:	6b eb       	ldi	r22, 0xBB	; 187
    2436:	71 e0       	ldi	r23, 0x01	; 1
    2438:	8f e4       	ldi	r24, 0x4F	; 79
    243a:	9c e0       	ldi	r25, 0x0C	; 12
    243c:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    2440:	6b eb       	ldi	r22, 0xBB	; 187
    2442:	71 e0       	ldi	r23, 0x01	; 1
    2444:	85 e5       	ldi	r24, 0x55	; 85
    2446:	9c e0       	ldi	r25, 0x0C	; 12
    2448:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      
      abilitaPulsanti();
    244c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <_Z15abilitaPulsantiv>
    2450:	2f ef       	ldi	r18, 0xFF	; 255
    2452:	89 ef       	ldi	r24, 0xF9	; 249
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	21 50       	subi	r18, 0x01	; 1
    2458:	80 40       	sbci	r24, 0x00	; 0
    245a:	90 40       	sbci	r25, 0x00	; 0
    245c:	e1 f7       	brne	.-8      	; 0x2456 <loop+0xb4>
    245e:	00 c0       	rjmp	.+0      	; 0x2460 <loop+0xbe>
    2460:	00 00       	nop
      _delay_ms(20);
      abilitaContattiPistola();
    2462:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_Z22abilitaContattiPistolav>
      stato_procedura++;
    2466:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <stato_procedura>
    246a:	90 91 a6 0c 	lds	r25, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    246e:	01 96       	adiw	r24, 0x01	; 1
    2470:	90 93 a6 0c 	sts	0x0CA6, r25	; 0x800ca6 <stato_procedura+0x1>
    2474:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <stato_procedura>
    }
    break;
    2478:	1e c3       	rjmp	.+1596   	; 0x2ab6 <loop+0x714>
    case 0:
    { 
      righeDisplay[1] =  "";
    247a:	6b eb       	ldi	r22, 0xBB	; 187
    247c:	71 e0       	ldi	r23, 0x01	; 1
    247e:	89 e4       	ldi	r24, 0x49	; 73
    2480:	9c e0       	ldi	r25, 0x0C	; 12
    2482:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    2486:	6b eb       	ldi	r22, 0xBB	; 187
    2488:	71 e0       	ldi	r23, 0x01	; 1
    248a:	8f e4       	ldi	r24, 0x4F	; 79
    248c:	9c e0       	ldi	r25, 0x0C	; 12
    248e:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    2492:	6b eb       	ldi	r22, 0xBB	; 187
    2494:	71 e0       	ldi	r23, 0x01	; 1
    2496:	85 e5       	ldi	r24, 0x55	; 85
    2498:	9c e0       	ldi	r25, 0x0C	; 12
    249a:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
          
      displayLCD(righeDisplay,stato_procedura,100);
    249e:	60 91 a5 0c 	lds	r22, 0x0CA5	; 0x800ca5 <stato_procedura>
    24a2:	70 91 a6 0c 	lds	r23, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    24a6:	44 e6       	ldi	r20, 0x64	; 100
    24a8:	50 e0       	ldi	r21, 0x00	; 0
    24aa:	83 e4       	ldi	r24, 0x43	; 67
    24ac:	9c e0       	ldi	r25, 0x0C	; 12
    24ae:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z10displayLCDP6Stringii>
    24b2:	2f ef       	ldi	r18, 0xFF	; 255
    24b4:	83 ec       	ldi	r24, 0xC3	; 195
    24b6:	99 e0       	ldi	r25, 0x09	; 9
    24b8:	21 50       	subi	r18, 0x01	; 1
    24ba:	80 40       	sbci	r24, 0x00	; 0
    24bc:	90 40       	sbci	r25, 0x00	; 0
    24be:	e1 f7       	brne	.-8      	; 0x24b8 <loop+0x116>
    24c0:	00 c0       	rjmp	.+0      	; 0x24c2 <loop+0x120>
    24c2:	00 00       	nop
      _delay_ms(200);
      alreadyTimbrata = false;  
    24c4:	10 92 e6 0c 	sts	0x0CE6, r1	; 0x800ce6 <alreadyTimbrata>
    24c8:	ce cf       	rjmp	.-100    	; 0x2466 <loop+0xc4>
      stato_procedura++;
    }
    break;
    case 1:
    {   
      righeDisplay[1] = " * AUTENTICAZIONE *";
    24ca:	60 e2       	ldi	r22, 0x20	; 32
    24cc:	78 e0       	ldi	r23, 0x08	; 8
    24ce:	89 e4       	ldi	r24, 0x49	; 73
    24d0:	9c e0       	ldi	r25, 0x0C	; 12
    24d2:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      righeDisplay[2] = "";
    24d6:	6b eb       	ldi	r22, 0xBB	; 187
    24d8:	71 e0       	ldi	r23, 0x01	; 1
    24da:	8f e4       	ldi	r24, 0x4F	; 79
    24dc:	9c e0       	ldi	r25, 0x0C	; 12
    24de:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      righeDisplay[3] = "    Avvicina ATE  ";
    24e2:	64 e3       	ldi	r22, 0x34	; 52
    24e4:	78 e0       	ldi	r23, 0x08	; 8
    24e6:	85 e5       	ldi	r24, 0x55	; 85
    24e8:	9c e0       	ldi	r25, 0x0C	; 12
    24ea:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
     
      
      displayLCD(righeDisplay,stato_procedura,100);     
    24ee:	60 91 a5 0c 	lds	r22, 0x0CA5	; 0x800ca5 <stato_procedura>
    24f2:	70 91 a6 0c 	lds	r23, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    24f6:	44 e6       	ldi	r20, 0x64	; 100
    24f8:	50 e0       	ldi	r21, 0x00	; 0
    24fa:	83 e4       	ldi	r24, 0x43	; 67
    24fc:	9c e0       	ldi	r25, 0x0C	; 12
    24fe:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z10displayLCDP6Stringii>
      
      String ATe = "ERRORE";
    2502:	66 e8       	ldi	r22, 0x86	; 134
    2504:	73 e0       	ldi	r23, 0x03	; 3
    2506:	ce 01       	movw	r24, r28
    2508:	49 96       	adiw	r24, 0x19	; 25
    250a:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>

      if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
    250e:	80 91 e6 0c 	lds	r24, 0x0CE6	; 0x800ce6 <alreadyTimbrata>
    2512:	81 11       	cpse	r24, r1
    2514:	16 c0       	rjmp	.+44     	; 0x2542 <loop+0x1a0>
    2516:	ce 01       	movw	r24, r28
    2518:	01 96       	adiw	r24, 0x01	; 1
    251a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_Z14GetCodeRfidATev>
    251e:	be 01       	movw	r22, r28
    2520:	6f 5f       	subi	r22, 0xFF	; 255
    2522:	7f 4f       	sbci	r23, 0xFF	; 255
    2524:	ce 01       	movw	r24, r28
    2526:	49 96       	adiw	r24, 0x19	; 25
    2528:	0e 94 4e 3d 	call	0x7a9c	; 0x7a9c <_ZN6StringaSEOS_>
    252c:	ce 01       	movw	r24, r28
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    2534:	44 e6       	ldi	r20, 0x64	; 100
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	82 e0       	ldi	r24, 0x02	; 2
    253e:	0e 94 43 06 	call	0xc86	; 0xc86 <_Z6Buzzerhm>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    2542:	66 e8       	ldi	r22, 0x86	; 134
    2544:	73 e0       	ldi	r23, 0x03	; 3
    2546:	ce 01       	movw	r24, r28
    2548:	49 96       	adiw	r24, 0x19	; 25
    254a:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <_ZNK6String6equalsEPKc>
      
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
    254e:	81 11       	cpse	r24, r1
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <loop+0x1b4>
    2552:	44 9b       	sbis	0x08, 4	; 8
    2554:	ed c2       	rjmp	.+1498   	; 0x2b30 <loop+0x78e>

         // Effettua chiamata REST per validare CARD NFC
         // Se la CARD è valida memorizza in memorria l'operazione e prosegui
         // Altrimenti Memorizza in Memoria e Azzera la procedura.
      
         stato_procedura++; // da commentare
    2556:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <stato_procedura>
    255a:	90 91 a6 0c 	lds	r25, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	90 93 a6 0c 	sts	0x0CA6, r25	; 0x800ca6 <stato_procedura+0x1>
    2564:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <stato_procedura>
      righeDisplay[3] = "    Avvicina ATE  ";
     
      
      displayLCD(righeDisplay,stato_procedura,100);     
      
      String ATe = "ERRORE";
    2568:	ce 01       	movw	r24, r28
    256a:	49 96       	adiw	r24, 0x19	; 25
    256c:	bd c0       	rjmp	.+378    	; 0x26e8 <loop+0x346>
          *****************************************************/
    }
    break;
    case 2:
    {   
      disable_ETH();
    256e:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    2572:	8f e3       	ldi	r24, 0x3F	; 63
    2574:	9f e1       	ldi	r25, 0x1F	; 31
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <loop+0x1d4>
    257a:	00 c0       	rjmp	.+0      	; 0x257c <loop+0x1da>
    257c:	00 00       	nop
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    257e:	44 98       	cbi	0x08, 4	; 8
      // da commentare
      // Carburante = "D"; // Simulo Abilitazione Diesel
      // da commentare
      // Carburante = "B"; // Simulo Abilitazione Benzina
      
      TARGA = "";
    2580:	6b eb       	ldi	r22, 0xBB	; 187
    2582:	71 e0       	ldi	r23, 0x01	; 1
    2584:	8c e6       	ldi	r24, 0x6C	; 108
    2586:	9b e0       	ldi	r25, 0x0B	; 11
    2588:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      righeDisplay[1] =  "****** TARGA ******";
    258c:	66 e7       	ldi	r22, 0x76	; 118
    258e:	75 e0       	ldi	r23, 0x05	; 5
    2590:	89 e4       	ldi	r24, 0x49	; 73
    2592:	9c e0       	ldi	r25, 0x0C	; 12
    2594:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    2598:	6b eb       	ldi	r22, 0xBB	; 187
    259a:	71 e0       	ldi	r23, 0x01	; 1
    259c:	8f e4       	ldi	r24, 0x4F	; 79
    259e:	9c e0       	ldi	r25, 0x0C	; 12
    25a0:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      righeDisplay[3] = "TARGA:";
    25a4:	6a e8       	ldi	r22, 0x8A	; 138
    25a6:	75 e0       	ldi	r23, 0x05	; 5
    25a8:	85 e5       	ldi	r24, 0x55	; 85
    25aa:	9c e0       	ldi	r25, 0x0C	; 12
    25ac:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      displayLCD(righeDisplay,stato_procedura,10);
    25b0:	60 91 a5 0c 	lds	r22, 0x0CA5	; 0x800ca5 <stato_procedura>
    25b4:	70 91 a6 0c 	lds	r23, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    25b8:	4a e0       	ldi	r20, 0x0A	; 10
    25ba:	50 e0       	ldi	r21, 0x00	; 0
    25bc:	83 e4       	ldi	r24, 0x43	; 67
    25be:	9c e0       	ldi	r25, 0x0C	; 12
    25c0:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z10displayLCDP6Stringii>
      
      avanzaStato(TinputTarga);
    25c4:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TinputTarga>
    25c8:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TinputTarga+0x1>
    25cc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TinputTarga+0x2>
    25d0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TinputTarga+0x3>
    25d4:	d8 c3       	rjmp	.+1968   	; 0x2d86 <loop+0x9e4>
    }
    break;
    case 3:
    {       
       getTastoPremuto_x_targa();
    25d6:	bc db       	rcall	.-2184   	; 0x1d50 <_Z23getTastoPremuto_x_targav>
      String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC
    25d8:	60 e0       	ldi	r22, 0x00	; 0
    25da:	ce 01       	movw	r24, r28
    25dc:	07 96       	adiw	r24, 0x07	; 7
    25de:	0e 94 88 07 	call	0xf10	; 0xf10 <_Z14leggiTAG_Mezzob>
    25e2:	8f e3       	ldi	r24, 0x3F	; 63
    25e4:	9c e9       	ldi	r25, 0x9C	; 156
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <loop+0x244>
    25ea:	00 c0       	rjmp	.+0      	; 0x25ec <loop+0x24a>
    25ec:	00 00       	nop
      _delay_ms(10);

      Serial.println(mezzoString);
    25ee:	be 01       	movw	r22, r28
    25f0:	69 5f       	subi	r22, 0xF9	; 249
    25f2:	7f 4f       	sbci	r23, 0xFF	; 255
    25f4:	8d e5       	ldi	r24, 0x5D	; 93
    25f6:	9e e0       	ldi	r25, 0x0E	; 14
    25f8:	0e 94 24 3a 	call	0x7448	; 0x7448 <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    25fc:	2b 85       	ldd	r18, Y+11	; 0x0b
    25fe:	3c 85       	ldd	r19, Y+12	; 0x0c
    2600:	45 e0       	ldi	r20, 0x05	; 5
    2602:	50 e0       	ldi	r21, 0x00	; 0
    2604:	be 01       	movw	r22, r28
    2606:	69 5f       	subi	r22, 0xF9	; 249
    2608:	7f 4f       	sbci	r23, 0xFF	; 255
    260a:	ce 01       	movw	r24, r28
    260c:	01 96       	adiw	r24, 0x01	; 1
    260e:	0e 94 a6 3e 	call	0x7d4c	; 0x7d4c <_ZNK6String9substringEjj>
      
      mezzo.Carb = mezzoString.substring(5);
    2612:	be 01       	movw	r22, r28
    2614:	6f 5f       	subi	r22, 0xFF	; 255
    2616:	7f 4f       	sbci	r23, 0xFF	; 255
    2618:	80 ef       	ldi	r24, 0xF0	; 240
    261a:	9c e0       	ldi	r25, 0x0C	; 12
    261c:	0e 94 4e 3d 	call	0x7a9c	; 0x7a9c <_ZN6StringaSEOS_>
    2620:	ce 01       	movw	r24, r28
    2622:	01 96       	adiw	r24, 0x01	; 1
    2624:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
      mezzo.TARGA = mezzoString.substring(0,5);
    2628:	25 e0       	ldi	r18, 0x05	; 5
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	50 e0       	ldi	r21, 0x00	; 0
    2630:	be 01       	movw	r22, r28
    2632:	69 5f       	subi	r22, 0xF9	; 249
    2634:	7f 4f       	sbci	r23, 0xFF	; 255
    2636:	ce 01       	movw	r24, r28
    2638:	01 96       	adiw	r24, 0x01	; 1
    263a:	0e 94 a6 3e 	call	0x7d4c	; 0x7d4c <_ZNK6String9substringEjj>
    263e:	be 01       	movw	r22, r28
    2640:	6f 5f       	subi	r22, 0xFF	; 255
    2642:	7f 4f       	sbci	r23, 0xFF	; 255
    2644:	86 ef       	ldi	r24, 0xF6	; 246
    2646:	9c e0       	ldi	r25, 0x0C	; 12
    2648:	0e 94 4e 3d 	call	0x7a9c	; 0x7a9c <_ZN6StringaSEOS_>
    264c:	ce 01       	movw	r24, r28
    264e:	01 96       	adiw	r24, 0x01	; 1
    2650:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
      mezzo.KM = 0;
    2654:	10 92 fc 0c 	sts	0x0CFC, r1	; 0x800cfc <mezzo+0xc>

      Serial.println("MEZZO INSERITO : ");
    2658:	67 e4       	ldi	r22, 0x47	; 71
    265a:	78 e0       	ldi	r23, 0x08	; 8
    265c:	8d e5       	ldi	r24, 0x5D	; 93
    265e:	9e e0       	ldi	r25, 0x0E	; 14
    2660:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2664:	69 e5       	ldi	r22, 0x59	; 89
    2666:	78 e0       	ldi	r23, 0x08	; 8
    2668:	ce 01       	movw	r24, r28
    266a:	01 96       	adiw	r24, 0x01	; 1
    266c:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
      Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
    2670:	60 ef       	ldi	r22, 0xF0	; 240
    2672:	7c e0       	ldi	r23, 0x0C	; 12
    2674:	ce 01       	movw	r24, r28
    2676:	01 96       	adiw	r24, 0x01	; 1
    2678:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
    267c:	bc 01       	movw	r22, r24
    267e:	8d e5       	ldi	r24, 0x5D	; 93
    2680:	9e e0       	ldi	r25, 0x0E	; 14
    2682:	0e 94 24 3a 	call	0x7448	; 0x7448 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2686:	ce 01       	movw	r24, r28
    2688:	01 96       	adiw	r24, 0x01	; 1
    268a:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    268e:	6b e6       	ldi	r22, 0x6B	; 107
    2690:	78 e0       	ldi	r23, 0x08	; 8
    2692:	ce 01       	movw	r24, r28
    2694:	01 96       	adiw	r24, 0x01	; 1
    2696:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
      Serial.println("TARGA: " + mezzo.TARGA);              
    269a:	66 ef       	ldi	r22, 0xF6	; 246
    269c:	7c e0       	ldi	r23, 0x0C	; 12
    269e:	ce 01       	movw	r24, r28
    26a0:	01 96       	adiw	r24, 0x01	; 1
    26a2:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
    26a6:	bc 01       	movw	r22, r24
    26a8:	8d e5       	ldi	r24, 0x5D	; 93
    26aa:	9e e0       	ldi	r25, 0x0E	; 14
    26ac:	0e 94 24 3a 	call	0x7448	; 0x7448 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    26b0:	ce 01       	movw	r24, r28
    26b2:	01 96       	adiw	r24, 0x01	; 1
    26b4:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>

      Carburante = mezzo.Carb;                 
    26b8:	60 ef       	ldi	r22, 0xF0	; 240
    26ba:	7c e0       	ldi	r23, 0x0C	; 12
    26bc:	83 e7       	ldi	r24, 0x73	; 115
    26be:	9c e0       	ldi	r25, 0x0C	; 12
    26c0:	0e 94 31 3d 	call	0x7a62	; 0x7a62 <_ZN6StringaSERKS_>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    26c4:	61 ee       	ldi	r22, 0xE1	; 225
    26c6:	71 e0       	ldi	r23, 0x01	; 1
    26c8:	80 ef       	ldi	r24, 0xF0	; 240
    26ca:	9c e0       	ldi	r25, 0x0C	; 12
    26cc:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <_ZNK6String6equalsEPKc>
      if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    26d0:	81 11       	cpse	r24, r1
    26d2:	eb c2       	rjmp	.+1494   	; 0x2caa <loop+0x908>
    26d4:	6d e9       	ldi	r22, 0x9D	; 157
    26d6:	73 e0       	ldi	r23, 0x03	; 3
    26d8:	80 ef       	ldi	r24, 0xF0	; 240
    26da:	9c e0       	ldi	r25, 0x0C	; 12
    26dc:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <_ZNK6String6equalsEPKc>
    26e0:	81 11       	cpse	r24, r1
    26e2:	e3 c2       	rjmp	.+1478   	; 0x2caa <loop+0x908>
    }
    break;
    case 3:
    {       
       getTastoPremuto_x_targa();
      String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC
    26e4:	ce 01       	movw	r24, r28
    26e6:	07 96       	adiw	r24, 0x07	; 7
    26e8:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
      }     
      
      // da commentare
      // avanzaStato(TselDistributore);  
    }
    break;
    26ec:	e4 c1       	rjmp	.+968    	; 0x2ab6 <loop+0x714>
    case 4:
    { 
    righeDisplay[1] =  "****** DISTRIBUTORE ******";
    26ee:	63 e7       	ldi	r22, 0x73	; 115
    26f0:	78 e0       	ldi	r23, 0x08	; 8
    26f2:	89 e4       	ldi	r24, 0x49	; 73
    26f4:	9c e0       	ldi	r25, 0x0C	; 12
    26f6:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    righeDisplay[2] =  "";
    26fa:	6b eb       	ldi	r22, 0xBB	; 187
    26fc:	71 e0       	ldi	r23, 0x01	; 1
    26fe:	8f e4       	ldi	r24, 0x4F	; 79
    2700:	9c e0       	ldi	r25, 0x0C	; 12
    2702:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    righeDisplay[3] = "**** SCEGLI ****";
    2706:	6e e8       	ldi	r22, 0x8E	; 142
    2708:	78 e0       	ldi	r23, 0x08	; 8
    270a:	85 e5       	ldi	r24, 0x55	; 85
    270c:	9c e0       	ldi	r25, 0x0C	; 12
    270e:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>

    displayLCD(righeDisplay,stato_procedura,100);
    2712:	60 91 a5 0c 	lds	r22, 0x0CA5	; 0x800ca5 <stato_procedura>
    2716:	70 91 a6 0c 	lds	r23, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    271a:	44 e6       	ldi	r20, 0x64	; 100
    271c:	50 e0       	ldi	r21, 0x00	; 0
    271e:	83 e4       	ldi	r24, 0x43	; 67
    2720:	9c e0       	ldi	r25, 0x0C	; 12
    2722:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z10displayLCDP6Stringii>
    2726:	61 ee       	ldi	r22, 0xE1	; 225
    2728:	71 e0       	ldi	r23, 0x01	; 1
    272a:	80 ef       	ldi	r24, 0xF0	; 240
    272c:	9c e0       	ldi	r25, 0x0C	; 12
    272e:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <_ZNK6String6equalsEPKc>

    // Verifica scelta distributore
    
      if (mezzo.Carb == "B")
    2732:	88 23       	and	r24, r24
    2734:	61 f0       	breq	.+24     	; 0x274e <loop+0x3ac>
      {
        abilitaPulser('B');
    2736:	82 e4       	ldi	r24, 0x42	; 66
    2738:	0e 94 de 08 	call	0x11bc	; 0x11bc <_Z13abilitaPulserc>
        Rele_Abilitazione2(0,7); // chiudi relè
    273c:	67 e0       	ldi	r22, 0x07	; 7
    273e:	70 e0       	ldi	r23, 0x00	; 0
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_Z18Rele_Abilitazione2ii>
        StatoAttuale = "BENZINA";
    2748:	65 e9       	ldi	r22, 0x95	; 149
    274a:	73 e0       	ldi	r23, 0x03	; 3
    274c:	14 c0       	rjmp	.+40     	; 0x2776 <loop+0x3d4>
    274e:	6d e9       	ldi	r22, 0x9D	; 157
    2750:	73 e0       	ldi	r23, 0x03	; 3
    2752:	80 ef       	ldi	r24, 0xF0	; 240
    2754:	9c e0       	ldi	r25, 0x0C	; 12
    2756:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <_ZNK6String6equalsEPKc>
        avanzaStato(10);
      }
      else if (mezzo.Carb == "D")
    275a:	88 23       	and	r24, r24
    275c:	09 f4       	brne	.+2      	; 0x2760 <loop+0x3be>
    275e:	ab c1       	rjmp	.+854    	; 0x2ab6 <loop+0x714>
      {
        abilitaPulser('D');
    2760:	84 e4       	ldi	r24, 0x44	; 68
    2762:	0e 94 de 08 	call	0x11bc	; 0x11bc <_Z13abilitaPulserc>
        Rele_Abilitazione1(0,7); // chiudi relè
    2766:	67 e0       	ldi	r22, 0x07	; 7
    2768:	70 e0       	ldi	r23, 0x00	; 0
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	0e 94 17 09 	call	0x122e	; 0x122e <_Z18Rele_Abilitazione1ii>
        StatoAttuale = "GASOLIO";
    2772:	6f e9       	ldi	r22, 0x9F	; 159
    2774:	73 e0       	ldi	r23, 0x03	; 3
    2776:	81 eb       	ldi	r24, 0xB1	; 177
    2778:	9c e0       	ldi	r25, 0x0C	; 12
    277a:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    277e:	ff c2       	rjmp	.+1534   	; 0x2d7e <loop+0x9dc>
            _delay_ms(1000);
            Azzera();
           }   
      */
      
      impulsi = 0;
    2780:	10 92 a4 0c 	sts	0x0CA4, r1	; 0x800ca4 <impulsi+0x1>
    2784:	10 92 a3 0c 	sts	0x0CA3, r1	; 0x800ca3 <impulsi>
      
      righeDisplay[1] = "**** Distributore ****";
    2788:	6f e9       	ldi	r22, 0x9F	; 159
    278a:	78 e0       	ldi	r23, 0x08	; 8
    278c:	89 e4       	ldi	r24, 0x49	; 73
    278e:	9c e0       	ldi	r25, 0x0C	; 12
    2790:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    2794:	6b eb       	ldi	r22, 0xBB	; 187
    2796:	71 e0       	ldi	r23, 0x01	; 1
    2798:	8f e4       	ldi	r24, 0x4F	; 79
    279a:	9c e0       	ldi	r25, 0x0C	; 12
    279c:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    27a0:	66 eb       	ldi	r22, 0xB6	; 182
    27a2:	78 e0       	ldi	r23, 0x08	; 8
    27a4:	ce 01       	movw	r24, r28
    27a6:	01 96       	adiw	r24, 0x01	; 1
    27a8:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
      righeDisplay[3] = "***** " + StatoAttuale + " *****";
    27ac:	61 eb       	ldi	r22, 0xB1	; 177
    27ae:	7c e0       	ldi	r23, 0x0C	; 12
    27b0:	ce 01       	movw	r24, r28
    27b2:	01 96       	adiw	r24, 0x01	; 1
    27b4:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
    27b8:	6d eb       	ldi	r22, 0xBD	; 189
    27ba:	78 e0       	ldi	r23, 0x08	; 8
    27bc:	0e 94 43 3e 	call	0x7c86	; 0x7c86 <_ZplRK15StringSumHelperPKc>
    27c0:	bc 01       	movw	r22, r24
    27c2:	85 e5       	ldi	r24, 0x55	; 85
    27c4:	9c e0       	ldi	r25, 0x0C	; 12
    27c6:	0e 94 31 3d 	call	0x7a62	; 0x7a62 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    27ca:	ce 01       	movw	r24, r28
    27cc:	01 96       	adiw	r24, 0x01	; 1
    27ce:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
      
      displayLCD(righeDisplay,stato_procedura,100);
    27d2:	60 91 a5 0c 	lds	r22, 0x0CA5	; 0x800ca5 <stato_procedura>
    27d6:	70 91 a6 0c 	lds	r23, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    27da:	44 e6       	ldi	r20, 0x64	; 100
    27dc:	50 e0       	ldi	r21, 0x00	; 0
    27de:	83 e4       	ldi	r24, 0x43	; 67
    27e0:	9c e0       	ldi	r25, 0x0C	; 12
    27e2:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z10displayLCDP6Stringii>

      avanzaStato(20);
    27e6:	64 e1       	ldi	r22, 0x14	; 20
    27e8:	70 e0       	ldi	r23, 0x00	; 0
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	cb c2       	rjmp	.+1430   	; 0x2d86 <loop+0x9e4>
    }
    break;
    case 6:
    { 
      double lt = impulsiToLitri(impulsi);      
    27f0:	80 91 a3 0c 	lds	r24, 0x0CA3	; 0x800ca3 <impulsi>
    27f4:	90 91 a4 0c 	lds	r25, 0x0CA4	; 0x800ca4 <impulsi+0x1>
    27f8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_Z14impulsiToLitrii>
    27fc:	6b 01       	movw	r12, r22
    27fe:	7c 01       	movw	r14, r24
      
      righeDisplay[1] = "LITRI :" + String(lt);
    2800:	22 e0       	ldi	r18, 0x02	; 2
    2802:	ab 01       	movw	r20, r22
    2804:	bc 01       	movw	r22, r24
    2806:	ce 01       	movw	r24, r28
    2808:	07 96       	adiw	r24, 0x07	; 7
    280a:	0e 94 c4 3d 	call	0x7b88	; 0x7b88 <_ZN6StringC1Edh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    280e:	64 ec       	ldi	r22, 0xC4	; 196
    2810:	78 e0       	ldi	r23, 0x08	; 8
    2812:	ce 01       	movw	r24, r28
    2814:	01 96       	adiw	r24, 0x01	; 1
    2816:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    281a:	be 01       	movw	r22, r28
    281c:	69 5f       	subi	r22, 0xF9	; 249
    281e:	7f 4f       	sbci	r23, 0xFF	; 255
    2820:	ce 01       	movw	r24, r28
    2822:	01 96       	adiw	r24, 0x01	; 1
    2824:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
    2828:	bc 01       	movw	r22, r24
    282a:	89 e4       	ldi	r24, 0x49	; 73
    282c:	9c e0       	ldi	r25, 0x0C	; 12
    282e:	0e 94 31 3d 	call	0x7a62	; 0x7a62 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2832:	ce 01       	movw	r24, r28
    2834:	01 96       	adiw	r24, 0x01	; 1
    2836:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    283a:	ce 01       	movw	r24, r28
    283c:	07 96       	adiw	r24, 0x07	; 7
    283e:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
      righeDisplay[2] = "";     
    2842:	6b eb       	ldi	r22, 0xBB	; 187
    2844:	71 e0       	ldi	r23, 0x01	; 1
    2846:	8f e4       	ldi	r24, 0x4F	; 79
    2848:	9c e0       	ldi	r25, 0x0C	; 12
    284a:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    284e:	6c ec       	ldi	r22, 0xCC	; 204
    2850:	78 e0       	ldi	r23, 0x08	; 8
    2852:	ce 01       	movw	r24, r28
    2854:	01 96       	adiw	r24, 0x01	; 1
    2856:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
      righeDisplay[3] = "Erogazione: " + StatoAttuale;
    285a:	61 eb       	ldi	r22, 0xB1	; 177
    285c:	7c e0       	ldi	r23, 0x0C	; 12
    285e:	ce 01       	movw	r24, r28
    2860:	01 96       	adiw	r24, 0x01	; 1
    2862:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
    2866:	bc 01       	movw	r22, r24
    2868:	85 e5       	ldi	r24, 0x55	; 85
    286a:	9c e0       	ldi	r25, 0x0C	; 12
    286c:	0e 94 31 3d 	call	0x7a62	; 0x7a62 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2870:	ce 01       	movw	r24, r28
    2872:	01 96       	adiw	r24, 0x01	; 1
    2874:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
      
      displayLCD(righeDisplay,stato_procedura,100);   
    2878:	60 91 a5 0c 	lds	r22, 0x0CA5	; 0x800ca5 <stato_procedura>
    287c:	70 91 a6 0c 	lds	r23, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    2880:	44 e6       	ldi	r20, 0x64	; 100
    2882:	50 e0       	ldi	r21, 0x00	; 0
    2884:	83 e4       	ldi	r24, 0x43	; 67
    2886:	9c e0       	ldi	r25, 0x0C	; 12
    2888:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z10displayLCDP6Stringii>

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
    288c:	01 9b       	sbis	0x00, 1	; 0
    288e:	08 c0       	rjmp	.+16     	; 0x28a0 <loop+0x4fe>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2890:	6d e9       	ldi	r22, 0x9D	; 157
    2892:	73 e0       	ldi	r23, 0x03	; 3
    2894:	83 e7       	ldi	r24, 0x73	; 115
    2896:	9c e0       	ldi	r25, 0x0C	; 12
    2898:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <_ZNK6String6equalsEPKc>
    289c:	81 11       	cpse	r24, r1
    289e:	1c c2       	rjmp	.+1080   	; 0x2cd8 <loop+0x936>
        avanzaStato(10);
      }
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
    28a0:	19 9b       	sbis	0x03, 1	; 3
    28a2:	09 c1       	rjmp	.+530    	; 0x2ab6 <loop+0x714>
    28a4:	61 ee       	ldi	r22, 0xE1	; 225
    28a6:	71 e0       	ldi	r23, 0x01	; 1
    28a8:	83 e7       	ldi	r24, 0x73	; 115
    28aa:	9c e0       	ldi	r25, 0x0C	; 12
    28ac:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <_ZNK6String6equalsEPKc>
    28b0:	81 11       	cpse	r24, r1
    28b2:	41 c2       	rjmp	.+1154   	; 0x2d36 <loop+0x994>
    28b4:	00 c1       	rjmp	.+512    	; 0x2ab6 <loop+0x714>
      /**************************************
       Control_WIFI(1);
       _delay_ms(2000);
      /**************************************/
      
      righeDisplay[1] =  "";      
    28b6:	6b eb       	ldi	r22, 0xBB	; 187
    28b8:	71 e0       	ldi	r23, 0x01	; 1
    28ba:	89 e4       	ldi	r24, 0x49	; 73
    28bc:	9c e0       	ldi	r25, 0x0C	; 12
    28be:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      righeDisplay[2] = "Invio........";
    28c2:	69 ed       	ldi	r22, 0xD9	; 217
    28c4:	78 e0       	ldi	r23, 0x08	; 8
    28c6:	8f e4       	ldi	r24, 0x4F	; 79
    28c8:	9c e0       	ldi	r25, 0x0C	; 12
    28ca:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    28ce:	6b eb       	ldi	r22, 0xBB	; 187
    28d0:	71 e0       	ldi	r23, 0x01	; 1
    28d2:	85 e5       	ldi	r24, 0x55	; 85
    28d4:	9c e0       	ldi	r25, 0x0C	; 12
    28d6:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
          
      if (BIT_IS_CLEAR(PORTC,4)) 
    28da:	44 99       	sbic	0x08, 4	; 8
    28dc:	ec c0       	rjmp	.+472    	; 0x2ab6 <loop+0x714>
      {
        displayLCD(righeDisplay,stato_procedura,10);  
    28de:	60 91 a5 0c 	lds	r22, 0x0CA5	; 0x800ca5 <stato_procedura>
    28e2:	70 91 a6 0c 	lds	r23, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    28e6:	4a e0       	ldi	r20, 0x0A	; 10
    28e8:	50 e0       	ldi	r21, 0x00	; 0
    28ea:	83 e4       	ldi	r24, 0x43	; 67
    28ec:	9c e0       	ldi	r25, 0x0C	; 12
    28ee:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z10displayLCDP6Stringii>
        InizializzaEthernet();
    28f2:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_Z19InizializzaEthernetv>
    28f6:	9f ef       	ldi	r25, 0xFF	; 255
    28f8:	23 ed       	ldi	r18, 0xD3	; 211
    28fa:	80 e3       	ldi	r24, 0x30	; 48
    28fc:	91 50       	subi	r25, 0x01	; 1
    28fe:	20 40       	sbci	r18, 0x00	; 0
    2900:	80 40       	sbci	r24, 0x00	; 0
    2902:	e1 f7       	brne	.-8      	; 0x28fc <loop+0x55a>
    2904:	00 c0       	rjmp	.+0      	; 0x2906 <loop+0x564>
    2906:	00 00       	nop
        _delay_ms(1000);
        //Control_WIFI(0);
        
        Messaggio = ""; 
    2908:	6b eb       	ldi	r22, 0xBB	; 187
    290a:	71 e0       	ldi	r23, 0x01	; 1
    290c:	8b e5       	ldi	r24, 0x5B	; 91
    290e:	9c e0       	ldi	r25, 0x0C	; 12
    2910:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
    2914:	09 e7       	ldi	r16, 0x79	; 121
    2916:	1c e0       	ldi	r17, 0x0C	; 12
    2918:	81 e9       	ldi	r24, 0x91	; 145
    291a:	e8 2e       	mov	r14, r24
    291c:	8c e0       	ldi	r24, 0x0C	; 12
    291e:	f8 2e       	mov	r15, r24
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2920:	b8 01       	movw	r22, r16
    2922:	ce 01       	movw	r24, r28
    2924:	01 96       	adiw	r24, 0x01	; 1
    2926:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <_ZN6StringC1ERKS_>
        
        for (int k = 0;k<4;k++)
          Messaggio.concat(RaccoltaDati[k]+";");        
    292a:	67 ee       	ldi	r22, 0xE7	; 231
    292c:	78 e0       	ldi	r23, 0x08	; 8
    292e:	ce 01       	movw	r24, r28
    2930:	01 96       	adiw	r24, 0x01	; 1
    2932:	0e 94 43 3e 	call	0x7c86	; 0x7c86 <_ZplRK15StringSumHelperPKc>
    2936:	bc 01       	movw	r22, r24
    2938:	8b e5       	ldi	r24, 0x5B	; 91
    293a:	9c e0       	ldi	r25, 0x0C	; 12
    293c:	0e 94 1e 3e 	call	0x7c3c	; 0x7c3c <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2940:	ce 01       	movw	r24, r28
    2942:	01 96       	adiw	r24, 0x01	; 1
    2944:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    2948:	0a 5f       	subi	r16, 0xFA	; 250
    294a:	1f 4f       	sbci	r17, 0xFF	; 255
        _delay_ms(1000);
        //Control_WIFI(0);
        
        Messaggio = ""; 
        
        for (int k = 0;k<4;k++)
    294c:	e0 16       	cp	r14, r16
    294e:	f1 06       	cpc	r15, r17
    2950:	39 f7       	brne	.-50     	; 0x2920 <loop+0x57e>
          Messaggio.concat(RaccoltaDati[k]+";");        
        
        //Messaggio = "000;2149016745;00001;2658;Diesel;70.00";
        CompletoRifornimentoPerInvioDati(stato_procedura);
    2952:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <stato_procedura>
    2956:	90 91 a6 0c 	lds	r25, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    295a:	0e 94 a9 09 	call	0x1352	; 0x1352 <_Z32CompletoRifornimentoPerInvioDatii>
        
        if(InviaRifornimento(stato_procedura,Connected,MessaggioToServer,100,""))
    295e:	6b eb       	ldi	r22, 0xBB	; 187
    2960:	71 e0       	ldi	r23, 0x01	; 1
    2962:	ce 01       	movw	r24, r28
    2964:	01 96       	adiw	r24, 0x01	; 1
    2966:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    296a:	60 91 a7 0c 	lds	r22, 0x0CA7	; 0x800ca7 <Connected>
    296e:	70 91 a8 0c 	lds	r23, 0x0CA8	; 0x800ca8 <Connected+0x1>
    2972:	8e 01       	movw	r16, r28
    2974:	0f 5f       	subi	r16, 0xFF	; 255
    2976:	1f 4f       	sbci	r17, 0xFF	; 255
    2978:	24 e6       	ldi	r18, 0x64	; 100
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	4f ed       	ldi	r20, 0xDF	; 223
    297e:	5b e0       	ldi	r21, 0x0B	; 11
    2980:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <stato_procedura>
    2984:	90 91 a6 0c 	lds	r25, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    2988:	8a dc       	rcall	.-1772   	; 0x229e <_Z17InviaRifornimentoiiPci6String>
    298a:	18 2f       	mov	r17, r24
    298c:	ce 01       	movw	r24, r28
    298e:	01 96       	adiw	r24, 0x01	; 1
    2990:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    2994:	11 23       	and	r17, r17
    2996:	09 f4       	brne	.+2      	; 0x299a <loop+0x5f8>
    2998:	66 cd       	rjmp	.-1332   	; 0x2466 <loop+0xc4>
        { 
          // SET_BIT(PORTC,PC4);

          disable_ETH();
    299a:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
          
          righeDisplay[1] = "";
    299e:	6b eb       	ldi	r22, 0xBB	; 187
    29a0:	71 e0       	ldi	r23, 0x01	; 1
    29a2:	89 e4       	ldi	r24, 0x49	; 73
    29a4:	9c e0       	ldi	r25, 0x0C	; 12
    29a6:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
          righeDisplay[2] = " Dati Inviati ";
    29aa:	69 ee       	ldi	r22, 0xE9	; 233
    29ac:	78 e0       	ldi	r23, 0x08	; 8
    29ae:	8f e4       	ldi	r24, 0x4F	; 79
    29b0:	9c e0       	ldi	r25, 0x0C	; 12
    29b2:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
          righeDisplay[3] =  "";
    29b6:	6b eb       	ldi	r22, 0xBB	; 187
    29b8:	71 e0       	ldi	r23, 0x01	; 1
    29ba:	85 e5       	ldi	r24, 0x55	; 85
    29bc:	9c e0       	ldi	r25, 0x0C	; 12
    29be:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
          
          displayLCD(righeDisplay,stato_procedura,100);
    29c2:	60 91 a5 0c 	lds	r22, 0x0CA5	; 0x800ca5 <stato_procedura>
    29c6:	70 91 a6 0c 	lds	r23, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    29ca:	44 e6       	ldi	r20, 0x64	; 100
    29cc:	50 e0       	ldi	r21, 0x00	; 0
    29ce:	83 e4       	ldi	r24, 0x43	; 67
    29d0:	9c e0       	ldi	r25, 0x0C	; 12
    29d2:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z10displayLCDP6Stringii>
    29d6:	9f ef       	ldi	r25, 0xFF	; 255
    29d8:	29 ef       	ldi	r18, 0xF9	; 249
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	91 50       	subi	r25, 0x01	; 1
    29de:	20 40       	sbci	r18, 0x00	; 0
    29e0:	80 40       	sbci	r24, 0x00	; 0
    29e2:	e1 f7       	brne	.-8      	; 0x29dc <loop+0x63a>
    29e4:	00 c0       	rjmp	.+0      	; 0x29e6 <loop+0x644>
    29e6:	00 00       	nop
    29e8:	65 c0       	rjmp	.+202    	; 0x2ab4 <loop+0x712>
      }
    }
    break;
    case 8:
    { 
          righeDisplay[1] =  "";
    29ea:	6b eb       	ldi	r22, 0xBB	; 187
    29ec:	71 e0       	ldi	r23, 0x01	; 1
    29ee:	89 e4       	ldi	r24, 0x49	; 73
    29f0:	9c e0       	ldi	r25, 0x0C	; 12
    29f2:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
          righeDisplay[2] = "Salvo Dati........";
    29f6:	68 ef       	ldi	r22, 0xF8	; 248
    29f8:	78 e0       	ldi	r23, 0x08	; 8
    29fa:	8f e4       	ldi	r24, 0x4F	; 79
    29fc:	9c e0       	ldi	r25, 0x0C	; 12
    29fe:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
          righeDisplay[3] =  "";  
    2a02:	6b eb       	ldi	r22, 0xBB	; 187
    2a04:	71 e0       	ldi	r23, 0x01	; 1
    2a06:	85 e5       	ldi	r24, 0x55	; 85
    2a08:	9c e0       	ldi	r25, 0x0C	; 12
    2a0a:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
          displayLCD(righeDisplay,stato_procedura,10);
    2a0e:	60 91 a5 0c 	lds	r22, 0x0CA5	; 0x800ca5 <stato_procedura>
    2a12:	70 91 a6 0c 	lds	r23, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    2a16:	4a e0       	ldi	r20, 0x0A	; 10
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	83 e4       	ldi	r24, 0x43	; 67
    2a1c:	9c e0       	ldi	r25, 0x0C	; 12
    2a1e:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z10displayLCDP6Stringii>
    2a22:	8f e1       	ldi	r24, 0x1F	; 31
    2a24:	9e e4       	ldi	r25, 0x4E	; 78
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <loop+0x684>
    2a2a:	00 c0       	rjmp	.+0      	; 0x2a2c <loop+0x68a>
    2a2c:	00 00       	nop
          /*******************************/
          _delay_ms(5);
          disable_ETH();
    2a2e:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
          Serial.println("ETH Disabilitata");
    2a32:	6b e0       	ldi	r22, 0x0B	; 11
    2a34:	79 e0       	ldi	r23, 0x09	; 9
    2a36:	8d e5       	ldi	r24, 0x5D	; 93
    2a38:	9e e0       	ldi	r25, 0x0E	; 14
    2a3a:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
    2a3e:	9f ef       	ldi	r25, 0xFF	; 255
    2a40:	20 e7       	ldi	r18, 0x70	; 112
    2a42:	82 e0       	ldi	r24, 0x02	; 2
    2a44:	91 50       	subi	r25, 0x01	; 1
    2a46:	20 40       	sbci	r18, 0x00	; 0
    2a48:	80 40       	sbci	r24, 0x00	; 0
    2a4a:	e1 f7       	brne	.-8      	; 0x2a44 <loop+0x6a2>
    2a4c:	00 c0       	rjmp	.+0      	; 0x2a4e <loop+0x6ac>
    2a4e:	00 00       	nop
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
    2a50:	2c 98       	cbi	0x05, 4	; 5
          disable_ETH();
          Serial.println("ETH Disabilitata");
          /*******************************/
          _delay_ms(50);
          enable_FLASH();
          Serial.println("FLASH Ablitata");
    2a52:	6c e1       	ldi	r22, 0x1C	; 28
    2a54:	79 e0       	ldi	r23, 0x09	; 9
    2a56:	8d e5       	ldi	r24, 0x5D	; 93
    2a58:	9e e0       	ldi	r25, 0x0E	; 14
    2a5a:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
          printLine();
    2a5e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
          /******************************/        
          FlashpowerUp(); 
    2a62:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12FlashpowerUpv>
    2a66:	8f e1       	ldi	r24, 0x1F	; 31
    2a68:	9e e4       	ldi	r25, 0x4E	; 78
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <loop+0x6c8>
    2a6e:	00 c0       	rjmp	.+0      	; 0x2a70 <loop+0x6ce>
    2a70:	00 00       	nop
          _delay_ms(5); 
          //FlasheraseSector(addr);
          //_delay_ms(5);   
          erogazioniSaver(addr,Messaggio);
    2a72:	6b e5       	ldi	r22, 0x5B	; 91
    2a74:	7c e0       	ldi	r23, 0x0C	; 12
    2a76:	ce 01       	movw	r24, r28
    2a78:	01 96       	adiw	r24, 0x01	; 1
    2a7a:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <_ZN6StringC1ERKS_>
    2a7e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <addr>
    2a82:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <addr+0x1>
    2a86:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <addr+0x2>
    2a8a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <addr+0x3>
    2a8e:	ae 01       	movw	r20, r28
    2a90:	4f 5f       	subi	r20, 0xFF	; 255
    2a92:	5f 4f       	sbci	r21, 0xFF	; 255
    2a94:	0e 94 02 03 	call	0x604	; 0x604 <_Z15erogazioniSaverm6String>
    2a98:	ce 01       	movw	r24, r28
    2a9a:	01 96       	adiw	r24, 0x01	; 1
    2a9c:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    2aa0:	8f e1       	ldi	r24, 0x1F	; 31
    2aa2:	9e e4       	ldi	r25, 0x4E	; 78
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	f1 f7       	brne	.-4      	; 0x2aa4 <loop+0x702>
    2aa8:	00 c0       	rjmp	.+0      	; 0x2aaa <loop+0x708>
    2aaa:	00 00       	nop
          _delay_ms(5);
          FlashpowerDown();          
    2aac:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_Z14FlashpowerDownv>
          printLine();
    2ab0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
          /*****************************/
          Azzera();
    2ab4:	5f db       	rcall	.-2370   	; 0x2174 <_Z6Azzerav>
    {      
    }
    break;
  }

  nowTimer = DS3231M.now();
    2ab6:	6e e8       	ldi	r22, 0x8E	; 142
    2ab8:	7b e0       	ldi	r23, 0x0B	; 11
    2aba:	ce 01       	movw	r24, r28
    2abc:	01 96       	adiw	r24, 0x01	; 1
    2abe:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <_ZN13DS3231M_Class3nowEv>
    2ac2:	86 e0       	ldi	r24, 0x06	; 6
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	31 96       	adiw	r30, 0x01	; 1
    2ac8:	ac e7       	ldi	r26, 0x7C	; 124
    2aca:	bb e0       	ldi	r27, 0x0B	; 11
    2acc:	01 90       	ld	r0, Z+
    2ace:	0d 92       	st	X+, r0
    2ad0:	8a 95       	dec	r24
  secs = nowTimer.secondstime();
    2ad2:	e1 f7       	brne	.-8      	; 0x2acc <loop+0x72a>
    2ad4:	8c e7       	ldi	r24, 0x7C	; 124
    2ad6:	9b e0       	ldi	r25, 0x0B	; 11
    2ad8:	e0 d7       	rcall	.+4032   	; 0x3a9a <_ZNK8DateTime11secondstimeEv>
    2ada:	60 93 8a 0b 	sts	0x0B8A, r22	; 0x800b8a <secs>
    2ade:	70 93 8b 0b 	sts	0x0B8B, r23	; 0x800b8b <secs+0x1>
    2ae2:	80 93 8c 0b 	sts	0x0B8C, r24	; 0x800b8c <secs+0x2>
    2ae6:	90 93 8d 0b 	sts	0x0B8D, r25	; 0x800b8d <secs+0x3>
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();
    2aea:	00 91 86 0b 	lds	r16, 0x0B86	; 0x800b86 <UltimoPassaggioStato>
    2aee:	10 91 87 0b 	lds	r17, 0x0B87	; 0x800b87 <UltimoPassaggioStato+0x1>
    2af2:	20 91 88 0b 	lds	r18, 0x0B88	; 0x800b88 <UltimoPassaggioStato+0x2>
    2af6:	30 91 89 0b 	lds	r19, 0x0B89	; 0x800b89 <UltimoPassaggioStato+0x3>
    2afa:	c0 90 82 0b 	lds	r12, 0x0B82	; 0x800b82 <Timer>
    2afe:	d0 90 83 0b 	lds	r13, 0x0B83	; 0x800b83 <Timer+0x1>
    2b02:	e0 90 84 0b 	lds	r14, 0x0B84	; 0x800b84 <Timer+0x2>
    2b06:	f0 90 85 0b 	lds	r15, 0x0B85	; 0x800b85 <Timer+0x3>
    2b0a:	0c 0d       	add	r16, r12
    2b0c:	1d 1d       	adc	r17, r13
    2b0e:	2e 1d       	adc	r18, r14
    2b10:	3f 1d       	adc	r19, r15
    2b12:	68 01       	movw	r12, r16
    2b14:	79 01       	movw	r14, r18
    2b16:	c6 1a       	sub	r12, r22
    2b18:	d7 0a       	sbc	r13, r23
    2b1a:	e8 0a       	sbc	r14, r24
    2b1c:	f9 0a       	sbc	r15, r25
    2b1e:	d7 01       	movw	r26, r14
    2b20:	c6 01       	movw	r24, r12
    2b22:	02 97       	sbiw	r24, 0x02	; 2
    2b24:	a1 05       	cpc	r26, r1
    2b26:	b1 05       	cpc	r27, r1
    2b28:	08 f0       	brcs	.+2      	; 0x2b2c <loop+0x78a>
    2b2a:	30 c1       	rjmp	.+608    	; 0x2d8c <loop+0x9ea>
    2b2c:	23 db       	rcall	.-2490   	; 0x2174 <_Z6Azzerav>

}
    2b2e:	2e c1       	rjmp	.+604    	; 0x2d8c <loop+0x9ea>

      if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
      
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
        { 
           Serial.println("");
    2b30:	6b eb       	ldi	r22, 0xBB	; 187
    2b32:	71 e0       	ldi	r23, 0x01	; 1
    2b34:	8d e5       	ldi	r24, 0x5D	; 93
    2b36:	9e e0       	ldi	r25, 0x0E	; 14
    2b38:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
           Serial.print("***************************************************************");
    2b3c:	6b e2       	ldi	r22, 0x2B	; 43
    2b3e:	79 e0       	ldi	r23, 0x09	; 9
    2b40:	8d e5       	ldi	r24, 0x5D	; 93
    2b42:	9e e0       	ldi	r25, 0x0E	; 14
    2b44:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2b48:	6b e6       	ldi	r22, 0x6B	; 107
    2b4a:	79 e0       	ldi	r23, 0x09	; 9
    2b4c:	ce 01       	movw	r24, r28
    2b4e:	01 96       	adiw	r24, 0x01	; 1
    2b50:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
           Serial.println(" Tessera ID : " + ATe);
    2b54:	be 01       	movw	r22, r28
    2b56:	67 5e       	subi	r22, 0xE7	; 231
    2b58:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	01 96       	adiw	r24, 0x01	; 1
    2b5e:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
    2b62:	bc 01       	movw	r22, r24
    2b64:	8d e5       	ldi	r24, 0x5D	; 93
    2b66:	9e e0       	ldi	r25, 0x0E	; 14
    2b68:	0e 94 24 3a 	call	0x7448	; 0x7448 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2b6c:	ce 01       	movw	r24, r28
    2b6e:	01 96       	adiw	r24, 0x01	; 1
    2b70:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
           Serial.print("***************************************************************");
    2b74:	6b e2       	ldi	r22, 0x2B	; 43
    2b76:	79 e0       	ldi	r23, 0x09	; 9
    2b78:	8d e5       	ldi	r24, 0x5D	; 93
    2b7a:	9e e0       	ldi	r25, 0x0E	; 14
    2b7c:	0e 94 09 3a 	call	0x7412	; 0x7412 <_ZN5Print5printEPKc>
           Serial.println("Riconoscimento Tessera .............");
    2b80:	6a e7       	ldi	r22, 0x7A	; 122
    2b82:	79 e0       	ldi	r23, 0x09	; 9
    2b84:	8d e5       	ldi	r24, 0x5D	; 93
    2b86:	9e e0       	ldi	r25, 0x0E	; 14
    2b88:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
                     
           RaccoltaDati[0] = ATe;
    2b8c:	be 01       	movw	r22, r28
    2b8e:	67 5e       	subi	r22, 0xE7	; 231
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255
    2b92:	89 e7       	ldi	r24, 0x79	; 121
    2b94:	9c e0       	ldi	r25, 0x0C	; 12
    2b96:	0e 94 31 3d 	call	0x7a62	; 0x7a62 <_ZN6StringaSERKS_>
           
           lcd.backlight();
    2b9a:	8e ec       	ldi	r24, 0xCE	; 206
    2b9c:	9c e0       	ldi	r25, 0x0C	; 12
    2b9e:	0e 94 c8 2b 	call	0x5790	; 0x5790 <_ZN3LCD9backlightEv>
           lcd.display();          
    2ba2:	8e ec       	ldi	r24, 0xCE	; 206
    2ba4:	9c e0       	ldi	r25, 0x0C	; 12
    2ba6:	0e 94 2e 2c 	call	0x585c	; 0x585c <_ZN3LCD7displayEv>
    2baa:	8f e3       	ldi	r24, 0x3F	; 63
    2bac:	9c e9       	ldi	r25, 0x9C	; 156
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <loop+0x80c>
    2bb2:	00 c0       	rjmp	.+0      	; 0x2bb4 <loop+0x812>
    2bb4:	00 00       	nop
           _delay_ms(10);
            
           righeDisplay[1] = " * AUTENTICAZIONE *";
    2bb6:	60 e2       	ldi	r22, 0x20	; 32
    2bb8:	78 e0       	ldi	r23, 0x08	; 8
    2bba:	89 e4       	ldi	r24, 0x49	; 73
    2bbc:	9c e0       	ldi	r25, 0x0C	; 12
    2bbe:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
           righeDisplay[2] = "";
    2bc2:	6b eb       	ldi	r22, 0xBB	; 187
    2bc4:	71 e0       	ldi	r23, 0x01	; 1
    2bc6:	8f e4       	ldi	r24, 0x4F	; 79
    2bc8:	9c e0       	ldi	r25, 0x0C	; 12
    2bca:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2bce:	6f e9       	ldi	r22, 0x9F	; 159
    2bd0:	79 e0       	ldi	r23, 0x09	; 9
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	01 96       	adiw	r24, 0x01	; 1
    2bd6:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
           righeDisplay[3] = "   Rfid: " + ATe;
    2bda:	be 01       	movw	r22, r28
    2bdc:	67 5e       	subi	r22, 0xE7	; 231
    2bde:	7f 4f       	sbci	r23, 0xFF	; 255
    2be0:	ce 01       	movw	r24, r28
    2be2:	01 96       	adiw	r24, 0x01	; 1
    2be4:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
    2be8:	bc 01       	movw	r22, r24
    2bea:	85 e5       	ldi	r24, 0x55	; 85
    2bec:	9c e0       	ldi	r25, 0x0C	; 12
    2bee:	0e 94 31 3d 	call	0x7a62	; 0x7a62 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2bf2:	ce 01       	movw	r24, r28
    2bf4:	01 96       	adiw	r24, 0x01	; 1
    2bf6:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
         
             displayLCD(righeDisplay,stato_procedura,100);
    2bfa:	60 91 a5 0c 	lds	r22, 0x0CA5	; 0x800ca5 <stato_procedura>
    2bfe:	70 91 a6 0c 	lds	r23, 0x0CA6	; 0x800ca6 <stato_procedura+0x1>
    2c02:	44 e6       	ldi	r20, 0x64	; 100
    2c04:	50 e0       	ldi	r21, 0x00	; 0
    2c06:	83 e4       	ldi	r24, 0x43	; 67
    2c08:	9c e0       	ldi	r25, 0x0C	; 12
    2c0a:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z10displayLCDP6Stringii>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    2c0e:	88 e6       	ldi	r24, 0x68	; 104
    2c10:	9a e0       	ldi	r25, 0x0A	; 10
    2c12:	9a 83       	std	Y+2, r25	; 0x02
    2c14:	89 83       	std	Y+1, r24	; 0x01
    2c16:	40 91 c9 0b 	lds	r20, 0x0BC9	; 0x800bc9 <subnet+0x2>
    2c1a:	50 91 ca 0b 	lds	r21, 0x0BCA	; 0x800bca <subnet+0x3>
    2c1e:	60 91 cb 0b 	lds	r22, 0x0BCB	; 0x800bcb <subnet+0x4>
    2c22:	70 91 cc 0b 	lds	r23, 0x0BCC	; 0x800bcc <subnet+0x5>
    2c26:	4b 83       	std	Y+3, r20	; 0x03
    2c28:	5c 83       	std	Y+4, r21	; 0x04
    2c2a:	6d 83       	std	Y+5, r22	; 0x05
    2c2c:	7e 83       	std	Y+6, r23	; 0x06
    2c2e:	98 87       	std	Y+8, r25	; 0x08
    2c30:	8f 83       	std	Y+7, r24	; 0x07
    2c32:	40 91 cf 0b 	lds	r20, 0x0BCF	; 0x800bcf <gateway+0x2>
    2c36:	50 91 d0 0b 	lds	r21, 0x0BD0	; 0x800bd0 <gateway+0x3>
    2c3a:	60 91 d1 0b 	lds	r22, 0x0BD1	; 0x800bd1 <gateway+0x4>
    2c3e:	70 91 d2 0b 	lds	r23, 0x0BD2	; 0x800bd2 <gateway+0x5>
    2c42:	49 87       	std	Y+9, r20	; 0x09
    2c44:	5a 87       	std	Y+10, r21	; 0x0a
    2c46:	6b 87       	std	Y+11, r22	; 0x0b
    2c48:	7c 87       	std	Y+12, r23	; 0x0c
    2c4a:	9e 87       	std	Y+14, r25	; 0x0e
    2c4c:	8d 87       	std	Y+13, r24	; 0x0d
    2c4e:	80 91 d5 0b 	lds	r24, 0x0BD5	; 0x800bd5 <myDns+0x2>
    2c52:	90 91 d6 0b 	lds	r25, 0x0BD6	; 0x800bd6 <myDns+0x3>
    2c56:	a0 91 d7 0b 	lds	r26, 0x0BD7	; 0x800bd7 <myDns+0x4>
    2c5a:	b0 91 d8 0b 	lds	r27, 0x0BD8	; 0x800bd8 <myDns+0x5>
    2c5e:	8f 87       	std	Y+15, r24	; 0x0f
    2c60:	98 8b       	std	Y+16, r25	; 0x10
    2c62:	a9 8b       	std	Y+17, r26	; 0x11
    2c64:	ba 8b       	std	Y+18, r27	; 0x12
           Ethernet.begin(mac, ip, myDns, gateway, subnet);
    2c66:	68 e2       	ldi	r22, 0x28	; 40
    2c68:	71 e0       	ldi	r23, 0x01	; 1
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	43 96       	adiw	r24, 0x13	; 19
    2c6e:	0e 94 76 39 	call	0x72ec	; 0x72ec <_ZN9IPAddressC1EPKh>
    2c72:	ce 01       	movw	r24, r28
    2c74:	01 96       	adiw	r24, 0x01	; 1
    2c76:	7c 01       	movw	r14, r24
    2c78:	8e 01       	movw	r16, r28
    2c7a:	09 5f       	subi	r16, 0xF9	; 249
    2c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7e:	9e 01       	movw	r18, r28
    2c80:	23 5f       	subi	r18, 0xF3	; 243
    2c82:	3f 4f       	sbci	r19, 0xFF	; 255
    2c84:	ae 01       	movw	r20, r28
    2c86:	4d 5e       	subi	r20, 0xED	; 237
    2c88:	5f 4f       	sbci	r21, 0xFF	; 255
    2c8a:	62 e2       	ldi	r22, 0x22	; 34
    2c8c:	71 e0       	ldi	r23, 0x01	; 1
    2c8e:	83 e5       	ldi	r24, 0x53	; 83
    2c90:	9d e0       	ldi	r25, 0x0D	; 13
    2c92:	0e 94 55 22 	call	0x44aa	; 0x44aa <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
    2c96:	9f ef       	ldi	r25, 0xFF	; 255
    2c98:	23 ed       	ldi	r18, 0xD3	; 211
    2c9a:	80 e3       	ldi	r24, 0x30	; 48
    2c9c:	91 50       	subi	r25, 0x01	; 1
    2c9e:	20 40       	sbci	r18, 0x00	; 0
    2ca0:	80 40       	sbci	r24, 0x00	; 0
    2ca2:	e1 f7       	brne	.-8      	; 0x2c9c <loop+0x8fa>
    2ca4:	00 c0       	rjmp	.+0      	; 0x2ca6 <loop+0x904>
    2ca6:	00 00       	nop
    2ca8:	56 cc       	rjmp	.-1876   	; 0x2556 <loop+0x1b4>
      Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
      Serial.println("TARGA: " + mezzo.TARGA);              

      Carburante = mezzo.Carb;                 
      if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
        RaccoltaDati[1] = mezzo.TARGA;
    2caa:	66 ef       	ldi	r22, 0xF6	; 246
    2cac:	7c e0       	ldi	r23, 0x0C	; 12
    2cae:	8f e7       	ldi	r24, 0x7F	; 127
    2cb0:	9c e0       	ldi	r25, 0x0C	; 12
    2cb2:	0e 94 31 3d 	call	0x7a62	; 0x7a62 <_ZN6StringaSERKS_>
        RaccoltaDati[2] = mezzo.Carb;
    2cb6:	60 ef       	ldi	r22, 0xF0	; 240
    2cb8:	7c e0       	ldi	r23, 0x0C	; 12
    2cba:	85 e8       	ldi	r24, 0x85	; 133
    2cbc:	9c e0       	ldi	r25, 0x0C	; 12
    2cbe:	0e 94 31 3d 	call	0x7a62	; 0x7a62 <_ZN6StringaSERKS_>
        avanzaStato(TselDistributore); 
    2cc2:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TselDistributore>
    2cc6:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TselDistributore+0x1>
    2cca:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TselDistributore+0x2>
    2cce:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TselDistributore+0x3>
    2cd2:	0e 94 6a 07 	call	0xed4	; 0xed4 <_Z11avanzaStatom>
    2cd6:	06 cd       	rjmp	.-1524   	; 0x26e4 <loop+0x342>

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
      {       
        RaccoltaDati[3] = String(lt);
    2cd8:	22 e0       	ldi	r18, 0x02	; 2
    2cda:	b7 01       	movw	r22, r14
    2cdc:	a6 01       	movw	r20, r12
    2cde:	ce 01       	movw	r24, r28
    2ce0:	01 96       	adiw	r24, 0x01	; 1
    2ce2:	0e 94 c4 3d 	call	0x7b88	; 0x7b88 <_ZN6StringC1Edh>
    2ce6:	be 01       	movw	r22, r28
    2ce8:	6f 5f       	subi	r22, 0xFF	; 255
    2cea:	7f 4f       	sbci	r23, 0xFF	; 255
    2cec:	8b e8       	ldi	r24, 0x8B	; 139
    2cee:	9c e0       	ldi	r25, 0x0C	; 12
    2cf0:	0e 94 4e 3d 	call	0x7a9c	; 0x7a9c <_ZN6StringaSEOS_>
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	01 96       	adiw	r24, 0x01	; 1
    2cf8:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
        
        StatoAttuale = "STOP EROGAZIONE";
    2cfc:	69 ea       	ldi	r22, 0xA9	; 169
    2cfe:	79 e0       	ldi	r23, 0x09	; 9
    2d00:	81 eb       	ldi	r24, 0xB1	; 177
    2d02:	9c e0       	ldi	r25, 0x0C	; 12
    2d04:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
        Rele_Abilitazione2(1,7); //  apri relè
    2d08:	67 e0       	ldi	r22, 0x07	; 7
    2d0a:	70 e0       	ldi	r23, 0x00	; 0
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_Z18Rele_Abilitazione2ii>
        Rele_Abilitazione1(1,7); //  apri relè  
    2d14:	67 e0       	ldi	r22, 0x07	; 7
    2d16:	70 e0       	ldi	r23, 0x00	; 0
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	0e 94 17 09 	call	0x122e	; 0x122e <_Z18Rele_Abilitazione1ii>
        TOGGLE_BIT(PORTA,1);      
    2d20:	92 b1       	in	r25, 0x02	; 2
    2d22:	82 e0       	ldi	r24, 0x02	; 2
    2d24:	89 27       	eor	r24, r25
    2d26:	82 b9       	out	0x02, r24	; 2
        avanzaStato(10);
    2d28:	6a e0       	ldi	r22, 0x0A	; 10
    2d2a:	70 e0       	ldi	r23, 0x00	; 0
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	0e 94 6a 07 	call	0xed4	; 0xed4 <_Z11avanzaStatom>
    2d34:	b5 cd       	rjmp	.-1174   	; 0x28a0 <loop+0x4fe>
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
      {
        RaccoltaDati[3] = String(lt);
    2d36:	22 e0       	ldi	r18, 0x02	; 2
    2d38:	b7 01       	movw	r22, r14
    2d3a:	a6 01       	movw	r20, r12
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	01 96       	adiw	r24, 0x01	; 1
    2d40:	0e 94 c4 3d 	call	0x7b88	; 0x7b88 <_ZN6StringC1Edh>
    2d44:	be 01       	movw	r22, r28
    2d46:	6f 5f       	subi	r22, 0xFF	; 255
    2d48:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4a:	8b e8       	ldi	r24, 0x8B	; 139
    2d4c:	9c e0       	ldi	r25, 0x0C	; 12
    2d4e:	0e 94 4e 3d 	call	0x7a9c	; 0x7a9c <_ZN6StringaSEOS_>
    2d52:	ce 01       	movw	r24, r28
    2d54:	01 96       	adiw	r24, 0x01	; 1
    2d56:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
        
        StatoAttuale = "STOP EROGAZIONE";
    2d5a:	69 ea       	ldi	r22, 0xA9	; 169
    2d5c:	79 e0       	ldi	r23, 0x09	; 9
    2d5e:	81 eb       	ldi	r24, 0xB1	; 177
    2d60:	9c e0       	ldi	r25, 0x0C	; 12
    2d62:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <_ZN6StringaSEPKc>
        Rele_Abilitazione2(1,7); //  apri relè
    2d66:	67 e0       	ldi	r22, 0x07	; 7
    2d68:	70 e0       	ldi	r23, 0x00	; 0
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_Z18Rele_Abilitazione2ii>
        Rele_Abilitazione1(1,7); //  apri relè        
    2d72:	67 e0       	ldi	r22, 0x07	; 7
    2d74:	70 e0       	ldi	r23, 0x00	; 0
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	0e 94 17 09 	call	0x122e	; 0x122e <_Z18Rele_Abilitazione1ii>
        avanzaStato(10);
    2d7e:	6a e0       	ldi	r22, 0x0A	; 10
    2d80:	70 e0       	ldi	r23, 0x00	; 0
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	0e 94 6a 07 	call	0xed4	; 0xed4 <_Z11avanzaStatom>
    2d8a:	95 ce       	rjmp	.-726    	; 0x2ab6 <loop+0x714>

  nowTimer = DS3231M.now();
  secs = nowTimer.secondstime();
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();

}
    2d8c:	6e 96       	adiw	r28, 0x1e	; 30
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	df 91       	pop	r29
    2d9a:	cf 91       	pop	r28
    2d9c:	1f 91       	pop	r17
    2d9e:	0f 91       	pop	r16
    2da0:	ff 90       	pop	r15
    2da2:	ef 90       	pop	r14
    2da4:	df 90       	pop	r13
    2da6:	cf 90       	pop	r12
    2da8:	08 95       	ret

00002daa <_ZN8SPIClass16beginTransactionE11SPISettings>:
    #endif
    return false;
  }

  return true;
}
    2daa:	20 91 97 0d 	lds	r18, 0x0D97	; 0x800d97 <_ZN8SPIClass13interruptModeE>
    2dae:	22 23       	and	r18, r18
    2db0:	99 f0       	breq	.+38     	; 0x2dd8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    2db2:	4f b7       	in	r20, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	20 91 97 0d 	lds	r18, 0x0D97	; 0x800d97 <_ZN8SPIClass13interruptModeE>
    2dba:	21 30       	cpi	r18, 0x01	; 1
    2dbc:	59 f4       	brne	.+22     	; 0x2dd4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    2dbe:	2d b3       	in	r18, 0x1d	; 29
    2dc0:	20 93 95 0d 	sts	0x0D95, r18	; 0x800d95 <_ZN8SPIClass13interruptSaveE>
    2dc4:	3d b3       	in	r19, 0x1d	; 29
    2dc6:	20 91 96 0d 	lds	r18, 0x0D96	; 0x800d96 <_ZN8SPIClass13interruptMaskE>
    2dca:	20 95       	com	r18
    2dcc:	23 23       	and	r18, r19
    2dce:	2d bb       	out	0x1d, r18	; 29
    2dd0:	4f bf       	out	0x3f, r20	; 63
    2dd2:	02 c0       	rjmp	.+4      	; 0x2dd8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    2dd4:	40 93 95 0d 	sts	0x0D95, r20	; 0x800d95 <_ZN8SPIClass13interruptSaveE>
    2dd8:	8c bd       	out	0x2c, r24	; 44
    2dda:	9d bd       	out	0x2d, r25	; 45
    2ddc:	08 95       	ret

00002dde <_ZN8SPIClass14endTransactionEv>:
    2dde:	80 91 97 0d 	lds	r24, 0x0D97	; 0x800d97 <_ZN8SPIClass13interruptModeE>
    2de2:	88 23       	and	r24, r24
    2de4:	61 f0       	breq	.+24     	; 0x2dfe <_ZN8SPIClass14endTransactionEv+0x20>
    2de6:	9f b7       	in	r25, 0x3f	; 63
    2de8:	f8 94       	cli
    2dea:	20 91 97 0d 	lds	r18, 0x0D97	; 0x800d97 <_ZN8SPIClass13interruptModeE>
    2dee:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <_ZN8SPIClass13interruptSaveE>
    2df2:	21 30       	cpi	r18, 0x01	; 1
    2df4:	19 f4       	brne	.+6      	; 0x2dfc <_ZN8SPIClass14endTransactionEv+0x1e>
    2df6:	8d bb       	out	0x1d, r24	; 29
    2df8:	9f bf       	out	0x3f, r25	; 63
    2dfa:	08 95       	ret
    2dfc:	8f bf       	out	0x3f, r24	; 63
    2dfe:	08 95       	ret

00002e00 <_ZN14Adafruit_PN532C1Ehh>:
    2e00:	cf 93       	push	r28
    2e02:	df 93       	push	r29
    2e04:	ec 01       	movw	r28, r24
    2e06:	86 2f       	mov	r24, r22
    2e08:	18 82       	st	Y, r1
    2e0a:	19 82       	std	Y+1, r1	; 0x01
    2e0c:	1a 82       	std	Y+2, r1	; 0x02
    2e0e:	1b 82       	std	Y+3, r1	; 0x03
    2e10:	6c 83       	std	Y+4, r22	; 0x04
    2e12:	4d 83       	std	Y+5, r20	; 0x05
    2e14:	1d 8a       	std	Y+21, r1	; 0x15
    2e16:	1e 8a       	std	Y+22, r1	; 0x16
    2e18:	60 e0       	ldi	r22, 0x00	; 0
    2e1a:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <pinMode>
    2e1e:	61 e0       	ldi	r22, 0x01	; 1
    2e20:	8d 81       	ldd	r24, Y+5	; 0x05
    2e22:	df 91       	pop	r29
    2e24:	cf 91       	pop	r28
    2e26:	0c 94 e0 3b 	jmp	0x77c0	; 0x77c0 <pinMode>

00002e2a <_ZN14Adafruit_PN53210GetHexCodeEPKhm>:
    2e2a:	4f 92       	push	r4
    2e2c:	5f 92       	push	r5
    2e2e:	6f 92       	push	r6
    2e30:	7f 92       	push	r7
    2e32:	8f 92       	push	r8
    2e34:	9f 92       	push	r9
    2e36:	af 92       	push	r10
    2e38:	bf 92       	push	r11
    2e3a:	ef 92       	push	r14
    2e3c:	ff 92       	push	r15
    2e3e:	0f 93       	push	r16
    2e40:	1f 93       	push	r17
    2e42:	cf 93       	push	r28
    2e44:	df 93       	push	r29
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	2c 97       	sbiw	r28, 0x0c	; 12
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	7c 01       	movw	r14, r24
    2e58:	5a 01       	movw	r10, r20
    2e5a:	28 01       	movw	r4, r16
    2e5c:	39 01       	movw	r6, r18
    2e5e:	6b eb       	ldi	r22, 0xBB	; 187
    2e60:	71 e0       	ldi	r23, 0x01	; 1
    2e62:	0e 94 da 3c 	call	0x79b4	; 0x79b4 <_ZN6StringC1EPKc>
    2e66:	85 01       	movw	r16, r10
    2e68:	81 2c       	mov	r8, r1
    2e6a:	91 2c       	mov	r9, r1
    2e6c:	54 01       	movw	r10, r8
    2e6e:	84 14       	cp	r8, r4
    2e70:	95 04       	cpc	r9, r5
    2e72:	a6 04       	cpc	r10, r6
    2e74:	b7 04       	cpc	r11, r7
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0x50>
    2e78:	46 c0       	rjmp	.+140    	; 0x2f06 <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0xdc>
    2e7a:	f8 01       	movw	r30, r16
    2e7c:	61 91       	ld	r22, Z+
    2e7e:	8f 01       	movw	r16, r30
    2e80:	40 e1       	ldi	r20, 0x10	; 16
    2e82:	ce 01       	movw	r24, r28
    2e84:	60 31       	cpi	r22, 0x10	; 16
    2e86:	f0 f4       	brcc	.+60     	; 0x2ec4 <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0x9a>
    2e88:	01 96       	adiw	r24, 0x01	; 1
    2e8a:	0e 94 6e 3d 	call	0x7adc	; 0x7adc <_ZN6StringC1Ehh>
    2e8e:	b7 01       	movw	r22, r14
    2e90:	ce 01       	movw	r24, r28
    2e92:	07 96       	adiw	r24, 0x07	; 7
    2e94:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <_ZN6StringC1ERKS_>
    2e98:	64 e4       	ldi	r22, 0x44	; 68
    2e9a:	77 e0       	ldi	r23, 0x07	; 7
    2e9c:	ce 01       	movw	r24, r28
    2e9e:	07 96       	adiw	r24, 0x07	; 7
    2ea0:	0e 94 43 3e 	call	0x7c86	; 0x7c86 <_ZplRK15StringSumHelperPKc>
    2ea4:	be 01       	movw	r22, r28
    2ea6:	6f 5f       	subi	r22, 0xFF	; 255
    2ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eaa:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
    2eae:	bc 01       	movw	r22, r24
    2eb0:	c7 01       	movw	r24, r14
    2eb2:	0e 94 31 3d 	call	0x7a62	; 0x7a62 <_ZN6StringaSERKS_>
    2eb6:	ce 01       	movw	r24, r28
    2eb8:	07 96       	adiw	r24, 0x07	; 7
    2eba:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    2ebe:	ce 01       	movw	r24, r28
    2ec0:	01 96       	adiw	r24, 0x01	; 1
    2ec2:	19 c0       	rjmp	.+50     	; 0x2ef6 <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0xcc>
    2ec4:	07 96       	adiw	r24, 0x07	; 7
    2ec6:	0e 94 6e 3d 	call	0x7adc	; 0x7adc <_ZN6StringC1Ehh>
    2eca:	b7 01       	movw	r22, r14
    2ecc:	ce 01       	movw	r24, r28
    2ece:	01 96       	adiw	r24, 0x01	; 1
    2ed0:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <_ZN6StringC1ERKS_>
    2ed4:	be 01       	movw	r22, r28
    2ed6:	69 5f       	subi	r22, 0xF9	; 249
    2ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eda:	ce 01       	movw	r24, r28
    2edc:	01 96       	adiw	r24, 0x01	; 1
    2ede:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <_ZplRK15StringSumHelperRK6String>
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	c7 01       	movw	r24, r14
    2ee6:	0e 94 31 3d 	call	0x7a62	; 0x7a62 <_ZN6StringaSERKS_>
    2eea:	ce 01       	movw	r24, r28
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	07 96       	adiw	r24, 0x07	; 7
    2ef6:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <_ZN6StringD1Ev>
    2efa:	ff ef       	ldi	r31, 0xFF	; 255
    2efc:	8f 1a       	sub	r8, r31
    2efe:	9f 0a       	sbc	r9, r31
    2f00:	af 0a       	sbc	r10, r31
    2f02:	bf 0a       	sbc	r11, r31
    2f04:	b4 cf       	rjmp	.-152    	; 0x2e6e <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0x44>
    2f06:	8d e5       	ldi	r24, 0x5D	; 93
    2f08:	9e e0       	ldi	r25, 0x0E	; 14
    2f0a:	0e 94 11 3a 	call	0x7422	; 0x7422 <_ZN5Print7printlnEv>
    2f0e:	c7 01       	movw	r24, r14
    2f10:	2c 96       	adiw	r28, 0x0c	; 12
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	f8 94       	cli
    2f16:	de bf       	out	0x3e, r29	; 62
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	cd bf       	out	0x3d, r28	; 61
    2f1c:	df 91       	pop	r29
    2f1e:	cf 91       	pop	r28
    2f20:	1f 91       	pop	r17
    2f22:	0f 91       	pop	r16
    2f24:	ff 90       	pop	r15
    2f26:	ef 90       	pop	r14
    2f28:	bf 90       	pop	r11
    2f2a:	af 90       	pop	r10
    2f2c:	9f 90       	pop	r9
    2f2e:	8f 90       	pop	r8
    2f30:	7f 90       	pop	r7
    2f32:	6f 90       	pop	r6
    2f34:	5f 90       	pop	r5
    2f36:	4f 90       	pop	r4
    2f38:	08 95       	ret

00002f3a <_ZN14Adafruit_PN5329spi_writeEh>:
    2f3a:	ef 92       	push	r14
    2f3c:	ff 92       	push	r15
    2f3e:	0f 93       	push	r16
    2f40:	1f 93       	push	r17
    2f42:	cf 93       	push	r28
    2f44:	df 93       	push	r29
    2f46:	fc 01       	movw	r30, r24
    2f48:	26 89       	ldd	r18, Z+22	; 0x16
    2f4a:	22 23       	and	r18, r18
    2f4c:	39 f0       	breq	.+14     	; 0x2f5c <_ZN14Adafruit_PN5329spi_writeEh+0x22>
    2f4e:	6e bd       	out	0x2e, r22	; 46
    2f50:	00 00       	nop
    2f52:	0d b4       	in	r0, 0x2d	; 45
    2f54:	07 fe       	sbrs	r0, 7
    2f56:	fd cf       	rjmp	.-6      	; 0x2f52 <_ZN14Adafruit_PN5329spi_writeEh+0x18>
    2f58:	8e b5       	in	r24, 0x2e	; 46
    2f5a:	27 c0       	rjmp	.+78     	; 0x2faa <_ZN14Adafruit_PN5329spi_writeEh+0x70>
    2f5c:	06 2f       	mov	r16, r22
    2f5e:	ec 01       	movw	r28, r24
    2f60:	61 e0       	ldi	r22, 0x01	; 1
    2f62:	81 81       	ldd	r24, Z+1	; 0x01
    2f64:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    2f68:	e1 2c       	mov	r14, r1
    2f6a:	f1 2c       	mov	r15, r1
    2f6c:	10 e0       	ldi	r17, 0x00	; 0
    2f6e:	60 e0       	ldi	r22, 0x00	; 0
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    2f76:	c8 01       	movw	r24, r16
    2f78:	0e 2c       	mov	r0, r14
    2f7a:	02 c0       	rjmp	.+4      	; 0x2f80 <_ZN14Adafruit_PN5329spi_writeEh+0x46>
    2f7c:	95 95       	asr	r25
    2f7e:	87 95       	ror	r24
    2f80:	0a 94       	dec	r0
    2f82:	e2 f7       	brpl	.-8      	; 0x2f7c <_ZN14Adafruit_PN5329spi_writeEh+0x42>
    2f84:	80 ff       	sbrs	r24, 0
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <_ZN14Adafruit_PN5329spi_writeEh+0x52>
    2f88:	61 e0       	ldi	r22, 0x01	; 1
    2f8a:	01 c0       	rjmp	.+2      	; 0x2f8e <_ZN14Adafruit_PN5329spi_writeEh+0x54>
    2f8c:	60 e0       	ldi	r22, 0x00	; 0
    2f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f90:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    2f94:	61 e0       	ldi	r22, 0x01	; 1
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    2f9c:	ff ef       	ldi	r31, 0xFF	; 255
    2f9e:	ef 1a       	sub	r14, r31
    2fa0:	ff 0a       	sbc	r15, r31
    2fa2:	88 e0       	ldi	r24, 0x08	; 8
    2fa4:	e8 16       	cp	r14, r24
    2fa6:	f1 04       	cpc	r15, r1
    2fa8:	11 f7       	brne	.-60     	; 0x2f6e <_ZN14Adafruit_PN5329spi_writeEh+0x34>
    2faa:	df 91       	pop	r29
    2fac:	cf 91       	pop	r28
    2fae:	1f 91       	pop	r17
    2fb0:	0f 91       	pop	r16
    2fb2:	ff 90       	pop	r15
    2fb4:	ef 90       	pop	r14
    2fb6:	08 95       	ret

00002fb8 <_ZN14Adafruit_PN5328spi_readEv>:
    2fb8:	cf 92       	push	r12
    2fba:	df 92       	push	r13
    2fbc:	ef 92       	push	r14
    2fbe:	ff 92       	push	r15
    2fc0:	1f 93       	push	r17
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	26 89       	ldd	r18, Z+22	; 0x16
    2fca:	22 23       	and	r18, r18
    2fcc:	39 f0       	breq	.+14     	; 0x2fdc <_ZN14Adafruit_PN5328spi_readEv+0x24>
    2fce:	1e bc       	out	0x2e, r1	; 46
    2fd0:	00 00       	nop
    2fd2:	0d b4       	in	r0, 0x2d	; 45
    2fd4:	07 fe       	sbrs	r0, 7
    2fd6:	fd cf       	rjmp	.-6      	; 0x2fd2 <_ZN14Adafruit_PN5328spi_readEv+0x1a>
    2fd8:	1e b5       	in	r17, 0x2e	; 46
    2fda:	26 c0       	rjmp	.+76     	; 0x3028 <_ZN14Adafruit_PN5328spi_readEv+0x70>
    2fdc:	ec 01       	movw	r28, r24
    2fde:	61 e0       	ldi	r22, 0x01	; 1
    2fe0:	81 81       	ldd	r24, Z+1	; 0x01
    2fe2:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    2fe6:	e1 2c       	mov	r14, r1
    2fe8:	f1 2c       	mov	r15, r1
    2fea:	10 e0       	ldi	r17, 0x00	; 0
    2fec:	cc 24       	eor	r12, r12
    2fee:	c3 94       	inc	r12
    2ff0:	d1 2c       	mov	r13, r1
    2ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff4:	0e 94 4a 3c 	call	0x7894	; 0x7894 <digitalRead>
    2ff8:	89 2b       	or	r24, r25
    2ffa:	39 f0       	breq	.+14     	; 0x300a <_ZN14Adafruit_PN5328spi_readEv+0x52>
    2ffc:	c6 01       	movw	r24, r12
    2ffe:	0e 2c       	mov	r0, r14
    3000:	01 c0       	rjmp	.+2      	; 0x3004 <_ZN14Adafruit_PN5328spi_readEv+0x4c>
    3002:	88 0f       	add	r24, r24
    3004:	0a 94       	dec	r0
    3006:	ea f7       	brpl	.-6      	; 0x3002 <_ZN14Adafruit_PN5328spi_readEv+0x4a>
    3008:	18 2b       	or	r17, r24
    300a:	60 e0       	ldi	r22, 0x00	; 0
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    3012:	61 e0       	ldi	r22, 0x01	; 1
    3014:	89 81       	ldd	r24, Y+1	; 0x01
    3016:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    301a:	ff ef       	ldi	r31, 0xFF	; 255
    301c:	ef 1a       	sub	r14, r31
    301e:	ff 0a       	sbc	r15, r31
    3020:	88 e0       	ldi	r24, 0x08	; 8
    3022:	e8 16       	cp	r14, r24
    3024:	f1 04       	cpc	r15, r1
    3026:	29 f7       	brne	.-54     	; 0x2ff2 <_ZN14Adafruit_PN5328spi_readEv+0x3a>
    3028:	81 2f       	mov	r24, r17
    302a:	df 91       	pop	r29
    302c:	cf 91       	pop	r28
    302e:	1f 91       	pop	r17
    3030:	ff 90       	pop	r15
    3032:	ef 90       	pop	r14
    3034:	df 90       	pop	r13
    3036:	cf 90       	pop	r12
    3038:	08 95       	ret

0000303a <_ZN14Adafruit_PN5327isreadyEv>:
    303a:	1f 93       	push	r17
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	ec 01       	movw	r28, r24
    3042:	8d 89       	ldd	r24, Y+21	; 0x15
    3044:	88 23       	and	r24, r24
    3046:	09 f1       	breq	.+66     	; 0x308a <_ZN14Adafruit_PN5327isreadyEv+0x50>
    3048:	8e 89       	ldd	r24, Y+22	; 0x16
    304a:	88 23       	and	r24, r24
    304c:	19 f0       	breq	.+6      	; 0x3054 <_ZN14Adafruit_PN5327isreadyEv+0x1a>
    304e:	81 e7       	ldi	r24, 0x71	; 113
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	ab de       	rcall	.-682    	; 0x2daa <_ZN8SPIClass16beginTransactionE11SPISettings>
    3054:	60 e0       	ldi	r22, 0x00	; 0
    3056:	88 81       	ld	r24, Y
    3058:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    305c:	62 e0       	ldi	r22, 0x02	; 2
    305e:	70 e0       	ldi	r23, 0x00	; 0
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>
    3068:	62 e0       	ldi	r22, 0x02	; 2
    306a:	ce 01       	movw	r24, r28
    306c:	66 df       	rcall	.-308    	; 0x2f3a <_ZN14Adafruit_PN5329spi_writeEh>
    306e:	ce 01       	movw	r24, r28
    3070:	a3 df       	rcall	.-186    	; 0x2fb8 <_ZN14Adafruit_PN5328spi_readEv>
    3072:	18 2f       	mov	r17, r24
    3074:	61 e0       	ldi	r22, 0x01	; 1
    3076:	88 81       	ld	r24, Y
    3078:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    307c:	8e 89       	ldd	r24, Y+22	; 0x16
    307e:	81 11       	cpse	r24, r1
    3080:	ae de       	rcall	.-676    	; 0x2dde <_ZN8SPIClass14endTransactionEv>
    3082:	91 e0       	ldi	r25, 0x01	; 1
    3084:	11 30       	cpi	r17, 0x01	; 1
    3086:	31 f4       	brne	.+12     	; 0x3094 <_ZN14Adafruit_PN5327isreadyEv+0x5a>
    3088:	06 c0       	rjmp	.+12     	; 0x3096 <_ZN14Adafruit_PN5327isreadyEv+0x5c>
    308a:	8c 81       	ldd	r24, Y+4	; 0x04
    308c:	0e 94 4a 3c 	call	0x7894	; 0x7894 <digitalRead>
    3090:	91 e0       	ldi	r25, 0x01	; 1
    3092:	81 11       	cpse	r24, r1
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	89 2f       	mov	r24, r25
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	1f 91       	pop	r17
    309e:	08 95       	ret

000030a0 <_ZN14Adafruit_PN5329waitreadyEj>:
    30a0:	cf 92       	push	r12
    30a2:	df 92       	push	r13
    30a4:	ef 92       	push	r14
    30a6:	ff 92       	push	r15
    30a8:	1f 93       	push	r17
    30aa:	cf 93       	push	r28
    30ac:	df 93       	push	r29
    30ae:	6c 01       	movw	r12, r24
    30b0:	7b 01       	movw	r14, r22
    30b2:	c0 e0       	ldi	r28, 0x00	; 0
    30b4:	d0 e0       	ldi	r29, 0x00	; 0
    30b6:	c6 01       	movw	r24, r12
    30b8:	c0 df       	rcall	.-128    	; 0x303a <_ZN14Adafruit_PN5327isreadyEv>
    30ba:	18 2f       	mov	r17, r24
    30bc:	81 11       	cpse	r24, r1
    30be:	15 c0       	rjmp	.+42     	; 0x30ea <_ZN14Adafruit_PN5329waitreadyEj+0x4a>
    30c0:	e1 14       	cp	r14, r1
    30c2:	f1 04       	cpc	r15, r1
    30c4:	59 f0       	breq	.+22     	; 0x30dc <_ZN14Adafruit_PN5329waitreadyEj+0x3c>
    30c6:	2a 96       	adiw	r28, 0x0a	; 10
    30c8:	ec 16       	cp	r14, r28
    30ca:	fd 06       	cpc	r15, r29
    30cc:	38 f4       	brcc	.+14     	; 0x30dc <_ZN14Adafruit_PN5329waitreadyEj+0x3c>
    30ce:	69 ec       	ldi	r22, 0xC9	; 201
    30d0:	79 e0       	ldi	r23, 0x09	; 9
    30d2:	8d e5       	ldi	r24, 0x5D	; 93
    30d4:	9e e0       	ldi	r25, 0x0E	; 14
    30d6:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN5Print7printlnEPKc>
    30da:	07 c0       	rjmp	.+14     	; 0x30ea <_ZN14Adafruit_PN5329waitreadyEj+0x4a>
    30dc:	6a e0       	ldi	r22, 0x0A	; 10
    30de:	70 e0       	ldi	r23, 0x00	; 0
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>
    30e8:	e6 cf       	rjmp	.-52     	; 0x30b6 <_ZN14Adafruit_PN5329waitreadyEj+0x16>
    30ea:	81 2f       	mov	r24, r17
    30ec:	df 91       	pop	r29
    30ee:	cf 91       	pop	r28
    30f0:	1f 91       	pop	r17
    30f2:	ff 90       	pop	r15
    30f4:	ef 90       	pop	r14
    30f6:	df 90       	pop	r13
    30f8:	cf 90       	pop	r12
    30fa:	08 95       	ret

000030fc <_ZN14Adafruit_PN5328readdataEPhh>:
    30fc:	cf 92       	push	r12
    30fe:	df 92       	push	r13
    3100:	ef 92       	push	r14
    3102:	ff 92       	push	r15
    3104:	0f 93       	push	r16
    3106:	1f 93       	push	r17
    3108:	cf 93       	push	r28
    310a:	df 93       	push	r29
    310c:	ec 01       	movw	r28, r24
    310e:	6b 01       	movw	r12, r22
    3110:	f4 2e       	mov	r15, r20
    3112:	8d 89       	ldd	r24, Y+21	; 0x15
    3114:	04 2f       	mov	r16, r20
    3116:	10 e0       	ldi	r17, 0x00	; 0
    3118:	88 23       	and	r24, r24
    311a:	a9 f1       	breq	.+106    	; 0x3186 <_ZN14Adafruit_PN5328readdataEPhh+0x8a>
    311c:	8e 89       	ldd	r24, Y+22	; 0x16
    311e:	88 23       	and	r24, r24
    3120:	19 f0       	breq	.+6      	; 0x3128 <_ZN14Adafruit_PN5328readdataEPhh+0x2c>
    3122:	81 e7       	ldi	r24, 0x71	; 113
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	41 de       	rcall	.-894    	; 0x2daa <_ZN8SPIClass16beginTransactionE11SPISettings>
    3128:	60 e0       	ldi	r22, 0x00	; 0
    312a:	88 81       	ld	r24, Y
    312c:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    3130:	62 e0       	ldi	r22, 0x02	; 2
    3132:	70 e0       	ldi	r23, 0x00	; 0
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>
    313c:	63 e0       	ldi	r22, 0x03	; 3
    313e:	ce 01       	movw	r24, r28
    3140:	fc de       	rcall	.-520    	; 0x2f3a <_ZN14Adafruit_PN5329spi_writeEh>
    3142:	76 01       	movw	r14, r12
    3144:	0c 0d       	add	r16, r12
    3146:	1d 1d       	adc	r17, r13
    3148:	0e 15       	cp	r16, r14
    314a:	1f 05       	cpc	r17, r15
    314c:	61 f0       	breq	.+24     	; 0x3166 <_ZN14Adafruit_PN5328readdataEPhh+0x6a>
    314e:	61 e0       	ldi	r22, 0x01	; 1
    3150:	70 e0       	ldi	r23, 0x00	; 0
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>
    315a:	ce 01       	movw	r24, r28
    315c:	2d df       	rcall	.-422    	; 0x2fb8 <_ZN14Adafruit_PN5328spi_readEv>
    315e:	f7 01       	movw	r30, r14
    3160:	81 93       	st	Z+, r24
    3162:	7f 01       	movw	r14, r30
    3164:	f1 cf       	rjmp	.-30     	; 0x3148 <_ZN14Adafruit_PN5328readdataEPhh+0x4c>
    3166:	61 e0       	ldi	r22, 0x01	; 1
    3168:	88 81       	ld	r24, Y
    316a:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    316e:	8e 89       	ldd	r24, Y+22	; 0x16
    3170:	88 23       	and	r24, r24
    3172:	61 f1       	breq	.+88     	; 0x31cc <_ZN14Adafruit_PN5328readdataEPhh+0xd0>
    3174:	df 91       	pop	r29
    3176:	cf 91       	pop	r28
    3178:	1f 91       	pop	r17
    317a:	0f 91       	pop	r16
    317c:	ff 90       	pop	r15
    317e:	ef 90       	pop	r14
    3180:	df 90       	pop	r13
    3182:	cf 90       	pop	r12
    3184:	2c ce       	rjmp	.-936    	; 0x2dde <_ZN8SPIClass14endTransactionEv>
    3186:	62 e0       	ldi	r22, 0x02	; 2
    3188:	70 e0       	ldi	r23, 0x00	; 0
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>
    3192:	42 e0       	ldi	r20, 0x02	; 2
    3194:	4f 0d       	add	r20, r15
    3196:	64 e2       	ldi	r22, 0x24	; 36
    3198:	87 e0       	ldi	r24, 0x07	; 7
    319a:	9e e0       	ldi	r25, 0x0E	; 14
    319c:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <_ZN7TwoWire11requestFromEhh>
    31a0:	87 e0       	ldi	r24, 0x07	; 7
    31a2:	9e e0       	ldi	r25, 0x0E	; 14
    31a4:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <_ZN7TwoWire4readEv>
    31a8:	e6 01       	movw	r28, r12
    31aa:	0c 0d       	add	r16, r12
    31ac:	1d 1d       	adc	r17, r13
    31ae:	c0 17       	cp	r28, r16
    31b0:	d1 07       	cpc	r29, r17
    31b2:	61 f0       	breq	.+24     	; 0x31cc <_ZN14Adafruit_PN5328readdataEPhh+0xd0>
    31b4:	61 e0       	ldi	r22, 0x01	; 1
    31b6:	70 e0       	ldi	r23, 0x00	; 0
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>
    31c0:	87 e0       	ldi	r24, 0x07	; 7
    31c2:	9e e0       	ldi	r25, 0x0E	; 14
    31c4:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <_ZN7TwoWire4readEv>
    31c8:	89 93       	st	Y+, r24
    31ca:	f1 cf       	rjmp	.-30     	; 0x31ae <_ZN14Adafruit_PN5328readdataEPhh+0xb2>
    31cc:	df 91       	pop	r29
    31ce:	cf 91       	pop	r28
    31d0:	1f 91       	pop	r17
    31d2:	0f 91       	pop	r16
    31d4:	ff 90       	pop	r15
    31d6:	ef 90       	pop	r14
    31d8:	df 90       	pop	r13
    31da:	cf 90       	pop	r12
    31dc:	08 95       	ret

000031de <_ZN14Adafruit_PN5327readackEv>:
    31de:	cf 93       	push	r28
    31e0:	df 93       	push	r29
    31e2:	00 d0       	rcall	.+0      	; 0x31e4 <_ZN14Adafruit_PN5327readackEv+0x6>
    31e4:	00 d0       	rcall	.+0      	; 0x31e6 <_ZN14Adafruit_PN5327readackEv+0x8>
    31e6:	00 d0       	rcall	.+0      	; 0x31e8 <_ZN14Adafruit_PN5327readackEv+0xa>
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	46 e0       	ldi	r20, 0x06	; 6
    31ee:	be 01       	movw	r22, r28
    31f0:	6f 5f       	subi	r22, 0xFF	; 255
    31f2:	7f 4f       	sbci	r23, 0xFF	; 255
    31f4:	83 df       	rcall	.-250    	; 0x30fc <_ZN14Adafruit_PN5328readdataEPhh>
    31f6:	46 e0       	ldi	r20, 0x06	; 6
    31f8:	50 e0       	ldi	r21, 0x00	; 0
    31fa:	6c e3       	ldi	r22, 0x3C	; 60
    31fc:	71 e0       	ldi	r23, 0x01	; 1
    31fe:	ce 01       	movw	r24, r28
    3200:	01 96       	adiw	r24, 0x01	; 1
    3202:	0e 94 ea 43 	call	0x87d4	; 0x87d4 <strncmp>
    3206:	21 e0       	ldi	r18, 0x01	; 1
    3208:	89 2b       	or	r24, r25
    320a:	09 f0       	breq	.+2      	; 0x320e <_ZN14Adafruit_PN5327readackEv+0x30>
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	82 2f       	mov	r24, r18
    3210:	26 96       	adiw	r28, 0x06	; 6
    3212:	0f b6       	in	r0, 0x3f	; 63
    3214:	f8 94       	cli
    3216:	de bf       	out	0x3e, r29	; 62
    3218:	0f be       	out	0x3f, r0	; 63
    321a:	cd bf       	out	0x3d, r28	; 61
    321c:	df 91       	pop	r29
    321e:	cf 91       	pop	r28
    3220:	08 95       	ret

00003222 <_ZL8i2c_sendh>:
    3222:	68 2f       	mov	r22, r24
    3224:	87 e0       	ldi	r24, 0x07	; 7
    3226:	9e e0       	ldi	r25, 0x0E	; 14
    3228:	0c 94 9d 36 	jmp	0x6d3a	; 0x6d3a <_ZN7TwoWire5writeEh>

0000322c <_ZN14Adafruit_PN53212writecommandEPhh>:
    322c:	af 92       	push	r10
    322e:	bf 92       	push	r11
    3230:	cf 92       	push	r12
    3232:	df 92       	push	r13
    3234:	ef 92       	push	r14
    3236:	ff 92       	push	r15
    3238:	0f 93       	push	r16
    323a:	1f 93       	push	r17
    323c:	cf 93       	push	r28
    323e:	df 93       	push	r29
    3240:	7c 01       	movw	r14, r24
    3242:	8b 01       	movw	r16, r22
    3244:	fc 01       	movw	r30, r24
    3246:	85 89       	ldd	r24, Z+21	; 0x15
    3248:	c1 e0       	ldi	r28, 0x01	; 1
    324a:	c4 0f       	add	r28, r20
    324c:	88 23       	and	r24, r24
    324e:	09 f4       	brne	.+2      	; 0x3252 <_ZN14Adafruit_PN53212writecommandEPhh+0x26>
    3250:	58 c0       	rjmp	.+176    	; 0x3302 <_ZN14Adafruit_PN53212writecommandEPhh+0xd6>
    3252:	86 89       	ldd	r24, Z+22	; 0x16
    3254:	88 23       	and	r24, r24
    3256:	19 f0       	breq	.+6      	; 0x325e <_ZN14Adafruit_PN53212writecommandEPhh+0x32>
    3258:	81 e7       	ldi	r24, 0x71	; 113
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	a6 dd       	rcall	.-1204   	; 0x2daa <_ZN8SPIClass16beginTransactionE11SPISettings>
    325e:	60 e0       	ldi	r22, 0x00	; 0
    3260:	f7 01       	movw	r30, r14
    3262:	80 81       	ld	r24, Z
    3264:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    3268:	62 e0       	ldi	r22, 0x02	; 2
    326a:	70 e0       	ldi	r23, 0x00	; 0
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>
    3274:	61 e0       	ldi	r22, 0x01	; 1
    3276:	c7 01       	movw	r24, r14
    3278:	60 de       	rcall	.-832    	; 0x2f3a <_ZN14Adafruit_PN5329spi_writeEh>
    327a:	60 e0       	ldi	r22, 0x00	; 0
    327c:	c7 01       	movw	r24, r14
    327e:	5d de       	rcall	.-838    	; 0x2f3a <_ZN14Adafruit_PN5329spi_writeEh>
    3280:	60 e0       	ldi	r22, 0x00	; 0
    3282:	c7 01       	movw	r24, r14
    3284:	5a de       	rcall	.-844    	; 0x2f3a <_ZN14Adafruit_PN5329spi_writeEh>
    3286:	6f ef       	ldi	r22, 0xFF	; 255
    3288:	c7 01       	movw	r24, r14
    328a:	57 de       	rcall	.-850    	; 0x2f3a <_ZN14Adafruit_PN5329spi_writeEh>
    328c:	6c 2f       	mov	r22, r28
    328e:	c7 01       	movw	r24, r14
    3290:	54 de       	rcall	.-856    	; 0x2f3a <_ZN14Adafruit_PN5329spi_writeEh>
    3292:	6c 2f       	mov	r22, r28
    3294:	61 95       	neg	r22
    3296:	c7 01       	movw	r24, r14
    3298:	50 de       	rcall	.-864    	; 0x2f3a <_ZN14Adafruit_PN5329spi_writeEh>
    329a:	64 ed       	ldi	r22, 0xD4	; 212
    329c:	c7 01       	movw	r24, r14
    329e:	4d de       	rcall	.-870    	; 0x2f3a <_ZN14Adafruit_PN5329spi_writeEh>
    32a0:	c1 2c       	mov	r12, r1
    32a2:	93 ed       	ldi	r25, 0xD3	; 211
    32a4:	d9 2e       	mov	r13, r25
    32a6:	d0 e0       	ldi	r29, 0x00	; 0
    32a8:	21 97       	sbiw	r28, 0x01	; 1
    32aa:	ac 2c       	mov	r10, r12
    32ac:	b1 2c       	mov	r11, r1
    32ae:	ac 16       	cp	r10, r28
    32b0:	bd 06       	cpc	r11, r29
    32b2:	5c f4       	brge	.+22     	; 0x32ca <_ZN14Adafruit_PN53212writecommandEPhh+0x9e>
    32b4:	a0 0e       	add	r10, r16
    32b6:	b1 1e       	adc	r11, r17
    32b8:	f5 01       	movw	r30, r10
    32ba:	60 81       	ld	r22, Z
    32bc:	c7 01       	movw	r24, r14
    32be:	3d de       	rcall	.-902    	; 0x2f3a <_ZN14Adafruit_PN5329spi_writeEh>
    32c0:	f5 01       	movw	r30, r10
    32c2:	80 81       	ld	r24, Z
    32c4:	d8 0e       	add	r13, r24
    32c6:	c3 94       	inc	r12
    32c8:	f0 cf       	rjmp	.-32     	; 0x32aa <_ZN14Adafruit_PN53212writecommandEPhh+0x7e>
    32ca:	6d 2d       	mov	r22, r13
    32cc:	60 95       	com	r22
    32ce:	c7 01       	movw	r24, r14
    32d0:	34 de       	rcall	.-920    	; 0x2f3a <_ZN14Adafruit_PN5329spi_writeEh>
    32d2:	60 e0       	ldi	r22, 0x00	; 0
    32d4:	c7 01       	movw	r24, r14
    32d6:	31 de       	rcall	.-926    	; 0x2f3a <_ZN14Adafruit_PN5329spi_writeEh>
    32d8:	61 e0       	ldi	r22, 0x01	; 1
    32da:	f7 01       	movw	r30, r14
    32dc:	80 81       	ld	r24, Z
    32de:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    32e2:	f7 01       	movw	r30, r14
    32e4:	86 89       	ldd	r24, Z+22	; 0x16
    32e6:	88 23       	and	r24, r24
    32e8:	09 f4       	brne	.+2      	; 0x32ec <_ZN14Adafruit_PN53212writecommandEPhh+0xc0>
    32ea:	4b c0       	rjmp	.+150    	; 0x3382 <_ZN14Adafruit_PN53212writecommandEPhh+0x156>
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	1f 91       	pop	r17
    32f2:	0f 91       	pop	r16
    32f4:	ff 90       	pop	r15
    32f6:	ef 90       	pop	r14
    32f8:	df 90       	pop	r13
    32fa:	cf 90       	pop	r12
    32fc:	bf 90       	pop	r11
    32fe:	af 90       	pop	r10
    3300:	6e cd       	rjmp	.-1316   	; 0x2dde <_ZN8SPIClass14endTransactionEv>
    3302:	62 e0       	ldi	r22, 0x02	; 2
    3304:	70 e0       	ldi	r23, 0x00	; 0
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>
    330e:	64 e2       	ldi	r22, 0x24	; 36
    3310:	70 e0       	ldi	r23, 0x00	; 0
    3312:	87 e0       	ldi	r24, 0x07	; 7
    3314:	9e e0       	ldi	r25, 0x0E	; 14
    3316:	0e 94 f8 36 	call	0x6df0	; 0x6df0 <_ZN7TwoWire17beginTransmissionEi>
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	82 df       	rcall	.-252    	; 0x3222 <_ZL8i2c_sendh>
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	80 df       	rcall	.-256    	; 0x3222 <_ZL8i2c_sendh>
    3322:	8f ef       	ldi	r24, 0xFF	; 255
    3324:	7e df       	rcall	.-260    	; 0x3222 <_ZL8i2c_sendh>
    3326:	8c 2f       	mov	r24, r28
    3328:	7c df       	rcall	.-264    	; 0x3222 <_ZL8i2c_sendh>
    332a:	8c 2f       	mov	r24, r28
    332c:	81 95       	neg	r24
    332e:	79 df       	rcall	.-270    	; 0x3222 <_ZL8i2c_sendh>
    3330:	84 ed       	ldi	r24, 0xD4	; 212
    3332:	77 df       	rcall	.-274    	; 0x3222 <_ZL8i2c_sendh>
    3334:	b1 2c       	mov	r11, r1
    3336:	83 ed       	ldi	r24, 0xD3	; 211
    3338:	d8 2e       	mov	r13, r24
    333a:	d0 e0       	ldi	r29, 0x00	; 0
    333c:	21 97       	sbiw	r28, 0x01	; 1
    333e:	eb 2c       	mov	r14, r11
    3340:	f1 2c       	mov	r15, r1
    3342:	ec 16       	cp	r14, r28
    3344:	fd 06       	cpc	r15, r29
    3346:	54 f4       	brge	.+20     	; 0x335c <_ZN14Adafruit_PN53212writecommandEPhh+0x130>
    3348:	e0 0e       	add	r14, r16
    334a:	f1 1e       	adc	r15, r17
    334c:	f7 01       	movw	r30, r14
    334e:	80 81       	ld	r24, Z
    3350:	68 df       	rcall	.-304    	; 0x3222 <_ZL8i2c_sendh>
    3352:	f7 01       	movw	r30, r14
    3354:	80 81       	ld	r24, Z
    3356:	d8 0e       	add	r13, r24
    3358:	b3 94       	inc	r11
    335a:	f1 cf       	rjmp	.-30     	; 0x333e <_ZN14Adafruit_PN53212writecommandEPhh+0x112>
    335c:	8d 2d       	mov	r24, r13
    335e:	80 95       	com	r24
    3360:	60 df       	rcall	.-320    	; 0x3222 <_ZL8i2c_sendh>
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	5e df       	rcall	.-324    	; 0x3222 <_ZL8i2c_sendh>
    3366:	87 e0       	ldi	r24, 0x07	; 7
    3368:	9e e0       	ldi	r25, 0x0E	; 14
    336a:	df 91       	pop	r29
    336c:	cf 91       	pop	r28
    336e:	1f 91       	pop	r17
    3370:	0f 91       	pop	r16
    3372:	ff 90       	pop	r15
    3374:	ef 90       	pop	r14
    3376:	df 90       	pop	r13
    3378:	cf 90       	pop	r12
    337a:	bf 90       	pop	r11
    337c:	af 90       	pop	r10
    337e:	0c 94 6f 37 	jmp	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	1f 91       	pop	r17
    3388:	0f 91       	pop	r16
    338a:	ff 90       	pop	r15
    338c:	ef 90       	pop	r14
    338e:	df 90       	pop	r13
    3390:	cf 90       	pop	r12
    3392:	bf 90       	pop	r11
    3394:	af 90       	pop	r10
    3396:	08 95       	ret

00003398 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>:
    3398:	0f 93       	push	r16
    339a:	1f 93       	push	r17
    339c:	cf 93       	push	r28
    339e:	df 93       	push	r29
    33a0:	ec 01       	movw	r28, r24
    33a2:	89 01       	movw	r16, r18
    33a4:	43 df       	rcall	.-378    	; 0x322c <_ZN14Adafruit_PN53212writecommandEPhh>
    33a6:	b8 01       	movw	r22, r16
    33a8:	ce 01       	movw	r24, r28
    33aa:	7a de       	rcall	.-780    	; 0x30a0 <_ZN14Adafruit_PN5329waitreadyEj>
    33ac:	81 11       	cpse	r24, r1
    33ae:	02 c0       	rjmp	.+4      	; 0x33b4 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x1c>
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	0e c0       	rjmp	.+28     	; 0x33d0 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x38>
    33b4:	ce 01       	movw	r24, r28
    33b6:	13 df       	rcall	.-474    	; 0x31de <_ZN14Adafruit_PN5327readackEv>
    33b8:	88 23       	and	r24, r24
    33ba:	d1 f3       	breq	.-12     	; 0x33b0 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x18>
    33bc:	9d 89       	ldd	r25, Y+21	; 0x15
    33be:	99 23       	and	r25, r25
    33c0:	39 f0       	breq	.+14     	; 0x33d0 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x38>
    33c2:	b8 01       	movw	r22, r16
    33c4:	ce 01       	movw	r24, r28
    33c6:	df 91       	pop	r29
    33c8:	cf 91       	pop	r28
    33ca:	1f 91       	pop	r17
    33cc:	0f 91       	pop	r16
    33ce:	68 ce       	rjmp	.-816    	; 0x30a0 <_ZN14Adafruit_PN5329waitreadyEj>
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	1f 91       	pop	r17
    33d6:	0f 91       	pop	r16
    33d8:	08 95       	ret

000033da <_ZN14Adafruit_PN5325beginEv>:
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
    33de:	ec 01       	movw	r28, r24
    33e0:	8d 89       	ldd	r24, Y+21	; 0x15
    33e2:	88 23       	and	r24, r24
    33e4:	31 f1       	breq	.+76     	; 0x3432 <_ZN14Adafruit_PN5325beginEv+0x58>
    33e6:	8e 89       	ldd	r24, Y+22	; 0x16
    33e8:	88 23       	and	r24, r24
    33ea:	29 f0       	breq	.+10     	; 0x33f6 <_ZN14Adafruit_PN5325beginEv+0x1c>
    33ec:	0e 94 8c 33 	call	0x6718	; 0x6718 <_ZN8SPIClass5beginEv>
    33f0:	81 e7       	ldi	r24, 0x71	; 113
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	da dc       	rcall	.-1612   	; 0x2daa <_ZN8SPIClass16beginTransactionE11SPISettings>
    33f6:	60 e0       	ldi	r22, 0x00	; 0
    33f8:	88 81       	ld	r24, Y
    33fa:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    33fe:	68 ee       	ldi	r22, 0xE8	; 232
    3400:	73 e0       	ldi	r23, 0x03	; 3
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>
    340a:	82 e0       	ldi	r24, 0x02	; 2
    340c:	80 93 07 0d 	sts	0x0D07, r24	; 0x800d07 <pn532_packetbuffer>
    3410:	28 ee       	ldi	r18, 0xE8	; 232
    3412:	33 e0       	ldi	r19, 0x03	; 3
    3414:	41 e0       	ldi	r20, 0x01	; 1
    3416:	67 e0       	ldi	r22, 0x07	; 7
    3418:	7d e0       	ldi	r23, 0x0D	; 13
    341a:	ce 01       	movw	r24, r28
    341c:	bd df       	rcall	.-134    	; 0x3398 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    341e:	61 e0       	ldi	r22, 0x01	; 1
    3420:	88 81       	ld	r24, Y
    3422:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    3426:	8e 89       	ldd	r24, Y+22	; 0x16
    3428:	88 23       	and	r24, r24
    342a:	09 f1       	breq	.+66     	; 0x346e <_ZN14Adafruit_PN5325beginEv+0x94>
    342c:	df 91       	pop	r29
    342e:	cf 91       	pop	r28
    3430:	d6 cc       	rjmp	.-1620   	; 0x2dde <_ZN8SPIClass14endTransactionEv>
    3432:	87 e0       	ldi	r24, 0x07	; 7
    3434:	9e e0       	ldi	r25, 0x0E	; 14
    3436:	0e 94 db 36 	call	0x6db6	; 0x6db6 <_ZN7TwoWire5beginEv>
    343a:	61 e0       	ldi	r22, 0x01	; 1
    343c:	8d 81       	ldd	r24, Y+5	; 0x05
    343e:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    3442:	60 e0       	ldi	r22, 0x00	; 0
    3444:	8d 81       	ldd	r24, Y+5	; 0x05
    3446:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    344a:	60 e9       	ldi	r22, 0x90	; 144
    344c:	71 e0       	ldi	r23, 0x01	; 1
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>
    3456:	61 e0       	ldi	r22, 0x01	; 1
    3458:	8d 81       	ldd	r24, Y+5	; 0x05
    345a:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    345e:	6a e0       	ldi	r22, 0x0A	; 10
    3460:	70 e0       	ldi	r23, 0x00	; 0
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	df 91       	pop	r29
    3468:	cf 91       	pop	r28
    346a:	0c 94 38 3b 	jmp	0x7670	; 0x7670 <delay>
    346e:	df 91       	pop	r29
    3470:	cf 91       	pop	r28
    3472:	08 95       	ret

00003474 <_ZN14Adafruit_PN53218getFirmwareVersionEv>:
    3474:	cf 93       	push	r28
    3476:	df 93       	push	r29
    3478:	ec 01       	movw	r28, r24
    347a:	82 e0       	ldi	r24, 0x02	; 2
    347c:	80 93 07 0d 	sts	0x0D07, r24	; 0x800d07 <pn532_packetbuffer>
    3480:	28 ee       	ldi	r18, 0xE8	; 232
    3482:	33 e0       	ldi	r19, 0x03	; 3
    3484:	41 e0       	ldi	r20, 0x01	; 1
    3486:	67 e0       	ldi	r22, 0x07	; 7
    3488:	7d e0       	ldi	r23, 0x0D	; 13
    348a:	ce 01       	movw	r24, r28
    348c:	85 df       	rcall	.-246    	; 0x3398 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    348e:	81 11       	cpse	r24, r1
    3490:	04 c0       	rjmp	.+8      	; 0x349a <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x26>
    3492:	60 e0       	ldi	r22, 0x00	; 0
    3494:	70 e0       	ldi	r23, 0x00	; 0
    3496:	cb 01       	movw	r24, r22
    3498:	32 c0       	rjmp	.+100    	; 0x34fe <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x8a>
    349a:	4c e0       	ldi	r20, 0x0C	; 12
    349c:	67 e0       	ldi	r22, 0x07	; 7
    349e:	7d e0       	ldi	r23, 0x0D	; 13
    34a0:	ce 01       	movw	r24, r28
    34a2:	2c de       	rcall	.-936    	; 0x30fc <_ZN14Adafruit_PN5328readdataEPhh>
    34a4:	46 e0       	ldi	r20, 0x06	; 6
    34a6:	50 e0       	ldi	r21, 0x00	; 0
    34a8:	66 e3       	ldi	r22, 0x36	; 54
    34aa:	71 e0       	ldi	r23, 0x01	; 1
    34ac:	87 e0       	ldi	r24, 0x07	; 7
    34ae:	9d e0       	ldi	r25, 0x0D	; 13
    34b0:	0e 94 ea 43 	call	0x87d4	; 0x87d4 <strncmp>
    34b4:	89 2b       	or	r24, r25
    34b6:	69 f7       	brne	.-38     	; 0x3492 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x1e>
    34b8:	8d 89       	ldd	r24, Y+21	; 0x15
    34ba:	81 11       	cpse	r24, r1
    34bc:	03 c0       	rjmp	.+6      	; 0x34c4 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x50>
    34be:	e7 e0       	ldi	r30, 0x07	; 7
    34c0:	f0 e0       	ldi	r31, 0x00	; 0
    34c2:	02 c0       	rjmp	.+4      	; 0x34c8 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x54>
    34c4:	e6 e0       	ldi	r30, 0x06	; 6
    34c6:	f0 e0       	ldi	r31, 0x00	; 0
    34c8:	e9 5f       	subi	r30, 0xF9	; 249
    34ca:	f2 4f       	sbci	r31, 0xF2	; 242
    34cc:	60 81       	ld	r22, Z
    34ce:	86 2f       	mov	r24, r22
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	a0 e0       	ldi	r26, 0x00	; 0
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	ba 2f       	mov	r27, r26
    34d8:	a9 2f       	mov	r26, r25
    34da:	98 2f       	mov	r25, r24
    34dc:	88 27       	eor	r24, r24
    34de:	21 81       	ldd	r18, Z+1	; 0x01
    34e0:	82 2b       	or	r24, r18
    34e2:	ba 2f       	mov	r27, r26
    34e4:	a9 2f       	mov	r26, r25
    34e6:	98 2f       	mov	r25, r24
    34e8:	88 27       	eor	r24, r24
    34ea:	22 81       	ldd	r18, Z+2	; 0x02
    34ec:	82 2b       	or	r24, r18
    34ee:	ba 2f       	mov	r27, r26
    34f0:	a9 2f       	mov	r26, r25
    34f2:	98 2f       	mov	r25, r24
    34f4:	88 27       	eor	r24, r24
    34f6:	23 81       	ldd	r18, Z+3	; 0x03
    34f8:	bc 01       	movw	r22, r24
    34fa:	cd 01       	movw	r24, r26
    34fc:	62 2b       	or	r22, r18
    34fe:	df 91       	pop	r29
    3500:	cf 91       	pop	r28
    3502:	08 95       	ret

00003504 <_ZN14Adafruit_PN5329SAMConfigEv>:
    3504:	cf 93       	push	r28
    3506:	df 93       	push	r29
    3508:	ec 01       	movw	r28, r24
    350a:	94 e1       	ldi	r25, 0x14	; 20
    350c:	90 93 07 0d 	sts	0x0D07, r25	; 0x800d07 <pn532_packetbuffer>
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	80 93 08 0d 	sts	0x0D08, r24	; 0x800d08 <pn532_packetbuffer+0x1>
    3516:	90 93 09 0d 	sts	0x0D09, r25	; 0x800d09 <pn532_packetbuffer+0x2>
    351a:	80 93 0a 0d 	sts	0x0D0A, r24	; 0x800d0a <pn532_packetbuffer+0x3>
    351e:	28 ee       	ldi	r18, 0xE8	; 232
    3520:	33 e0       	ldi	r19, 0x03	; 3
    3522:	44 e0       	ldi	r20, 0x04	; 4
    3524:	67 e0       	ldi	r22, 0x07	; 7
    3526:	7d e0       	ldi	r23, 0x0D	; 13
    3528:	ce 01       	movw	r24, r28
    352a:	36 df       	rcall	.-404    	; 0x3398 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    352c:	88 23       	and	r24, r24
    352e:	a9 f0       	breq	.+42     	; 0x355a <_ZN14Adafruit_PN5329SAMConfigEv+0x56>
    3530:	48 e0       	ldi	r20, 0x08	; 8
    3532:	67 e0       	ldi	r22, 0x07	; 7
    3534:	7d e0       	ldi	r23, 0x0D	; 13
    3536:	ce 01       	movw	r24, r28
    3538:	e1 dd       	rcall	.-1086   	; 0x30fc <_ZN14Adafruit_PN5328readdataEPhh>
    353a:	8d 89       	ldd	r24, Y+21	; 0x15
    353c:	81 11       	cpse	r24, r1
    353e:	03 c0       	rjmp	.+6      	; 0x3546 <_ZN14Adafruit_PN5329SAMConfigEv+0x42>
    3540:	86 e0       	ldi	r24, 0x06	; 6
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	02 c0       	rjmp	.+4      	; 0x354a <_ZN14Adafruit_PN5329SAMConfigEv+0x46>
    3546:	85 e0       	ldi	r24, 0x05	; 5
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	fc 01       	movw	r30, r24
    354c:	e9 5f       	subi	r30, 0xF9	; 249
    354e:	f2 4f       	sbci	r31, 0xF2	; 242
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	90 81       	ld	r25, Z
    3554:	95 31       	cpi	r25, 0x15	; 21
    3556:	09 f0       	breq	.+2      	; 0x355a <_ZN14Adafruit_PN5329SAMConfigEv+0x56>
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	df 91       	pop	r29
    355c:	cf 91       	pop	r28
    355e:	08 95       	ret

00003560 <_ZN14Adafruit_PN53227setPassiveActivationRetriesEh>:
    3560:	e7 e0       	ldi	r30, 0x07	; 7
    3562:	fd e0       	ldi	r31, 0x0D	; 13
    3564:	22 e3       	ldi	r18, 0x32	; 50
    3566:	20 83       	st	Z, r18
    3568:	25 e0       	ldi	r18, 0x05	; 5
    356a:	21 83       	std	Z+1, r18	; 0x01
    356c:	2f ef       	ldi	r18, 0xFF	; 255
    356e:	22 83       	std	Z+2, r18	; 0x02
    3570:	21 e0       	ldi	r18, 0x01	; 1
    3572:	23 83       	std	Z+3, r18	; 0x03
    3574:	64 83       	std	Z+4, r22	; 0x04
    3576:	28 ee       	ldi	r18, 0xE8	; 232
    3578:	33 e0       	ldi	r19, 0x03	; 3
    357a:	45 e0       	ldi	r20, 0x05	; 5
    357c:	bf 01       	movw	r22, r30
    357e:	0c cf       	rjmp	.-488    	; 0x3398 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>

00003580 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j>:
    3580:	af 92       	push	r10
    3582:	bf 92       	push	r11
    3584:	cf 92       	push	r12
    3586:	df 92       	push	r13
    3588:	ef 92       	push	r14
    358a:	ff 92       	push	r15
    358c:	0f 93       	push	r16
    358e:	1f 93       	push	r17
    3590:	cf 93       	push	r28
    3592:	df 93       	push	r29
    3594:	ec 01       	movw	r28, r24
    3596:	7a 01       	movw	r14, r20
    3598:	59 01       	movw	r10, r18
    359a:	68 01       	movw	r12, r16
    359c:	8a e4       	ldi	r24, 0x4A	; 74
    359e:	80 93 07 0d 	sts	0x0D07, r24	; 0x800d07 <pn532_packetbuffer>
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	80 93 08 0d 	sts	0x0D08, r24	; 0x800d08 <pn532_packetbuffer+0x1>
    35a8:	60 93 09 0d 	sts	0x0D09, r22	; 0x800d09 <pn532_packetbuffer+0x2>
    35ac:	98 01       	movw	r18, r16
    35ae:	43 e0       	ldi	r20, 0x03	; 3
    35b0:	67 e0       	ldi	r22, 0x07	; 7
    35b2:	7d e0       	ldi	r23, 0x0D	; 13
    35b4:	ce 01       	movw	r24, r28
    35b6:	f0 de       	rcall	.-544    	; 0x3398 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    35b8:	18 2f       	mov	r17, r24
    35ba:	88 23       	and	r24, r24
    35bc:	41 f1       	breq	.+80     	; 0x360e <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    35be:	8d 89       	ldd	r24, Y+21	; 0x15
    35c0:	88 23       	and	r24, r24
    35c2:	79 f0       	breq	.+30     	; 0x35e2 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x62>
    35c4:	44 e1       	ldi	r20, 0x14	; 20
    35c6:	67 e0       	ldi	r22, 0x07	; 7
    35c8:	7d e0       	ldi	r23, 0x0D	; 13
    35ca:	ce 01       	movw	r24, r28
    35cc:	97 dd       	rcall	.-1234   	; 0x30fc <_ZN14Adafruit_PN5328readdataEPhh>
    35ce:	80 91 0e 0d 	lds	r24, 0x0D0E	; 0x800d0e <pn532_packetbuffer+0x7>
    35d2:	81 30       	cpi	r24, 0x01	; 1
    35d4:	e1 f4       	brne	.+56     	; 0x360e <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    35d6:	80 91 13 0d 	lds	r24, 0x0D13	; 0x800d13 <pn532_packetbuffer+0xc>
    35da:	f5 01       	movw	r30, r10
    35dc:	80 83       	st	Z, r24
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	06 c0       	rjmp	.+12     	; 0x35ee <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    35e2:	b6 01       	movw	r22, r12
    35e4:	ce 01       	movw	r24, r28
    35e6:	5c dd       	rcall	.-1352   	; 0x30a0 <_ZN14Adafruit_PN5329waitreadyEj>
    35e8:	81 11       	cpse	r24, r1
    35ea:	ec cf       	rjmp	.-40     	; 0x35c4 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x44>
    35ec:	10 c0       	rjmp	.+32     	; 0x360e <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    35ee:	90 91 13 0d 	lds	r25, 0x0D13	; 0x800d13 <pn532_packetbuffer+0xc>
    35f2:	89 17       	cp	r24, r25
    35f4:	68 f4       	brcc	.+26     	; 0x3610 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x90>
    35f6:	28 2f       	mov	r18, r24
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	f9 01       	movw	r30, r18
    35fc:	e9 5f       	subi	r30, 0xF9	; 249
    35fe:	f2 4f       	sbci	r31, 0xF2	; 242
    3600:	95 85       	ldd	r25, Z+13	; 0x0d
    3602:	f7 01       	movw	r30, r14
    3604:	e2 0f       	add	r30, r18
    3606:	f3 1f       	adc	r31, r19
    3608:	90 83       	st	Z, r25
    360a:	8f 5f       	subi	r24, 0xFF	; 255
    360c:	f0 cf       	rjmp	.-32     	; 0x35ee <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    360e:	10 e0       	ldi	r17, 0x00	; 0
    3610:	81 2f       	mov	r24, r17
    3612:	df 91       	pop	r29
    3614:	cf 91       	pop	r28
    3616:	1f 91       	pop	r17
    3618:	0f 91       	pop	r16
    361a:	ff 90       	pop	r15
    361c:	ef 90       	pop	r14
    361e:	df 90       	pop	r13
    3620:	cf 90       	pop	r12
    3622:	bf 90       	pop	r11
    3624:	af 90       	pop	r10
    3626:	08 95       	ret

00003628 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t Adafruit_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    3628:	af 92       	push	r10
    362a:	bf 92       	push	r11
    362c:	cf 92       	push	r12
    362e:	df 92       	push	r13
    3630:	ef 92       	push	r14
    3632:	0f 93       	push	r16
    3634:	1f 93       	push	r17
    3636:	cf 93       	push	r28
    3638:	df 93       	push	r29
    363a:	ec 01       	movw	r28, r24
    363c:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    363e:	5c 01       	movw	r10, r24
    3640:	8e e0       	ldi	r24, 0x0E	; 14
    3642:	a8 0e       	add	r10, r24
    3644:	b1 1c       	adc	r11, r1
    3646:	86 e0       	ldi	r24, 0x06	; 6
    3648:	f6 01       	movw	r30, r12
    364a:	d5 01       	movw	r26, r10
    364c:	01 90       	ld	r0, Z+
    364e:	0d 92       	st	X+, r0
    3650:	8a 95       	dec	r24
    3652:	e1 f7       	brne	.-8      	; 0x364c <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    3654:	50 e0       	ldi	r21, 0x00	; 0
    3656:	ce 01       	movw	r24, r28
    3658:	06 96       	adiw	r24, 0x06	; 6
    365a:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <memcpy>
  _uidLen = uidLen;
    365e:	1d 87       	std	Y+13, r17	; 0x0d
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    Adafruit_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    3660:	80 e4       	ldi	r24, 0x40	; 64
    3662:	80 93 07 0d 	sts	0x0D07, r24	; 0x800d07 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	80 93 08 0d 	sts	0x0D08, r24	; 0x800d08 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    366c:	e1 10       	cpse	r14, r1
    366e:	02 c0       	rjmp	.+4      	; 0x3674 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    3670:	80 e6       	ldi	r24, 0x60	; 96
    3672:	01 c0       	rjmp	.+2      	; 0x3676 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    3674:	81 e6       	ldi	r24, 0x61	; 97
    3676:	80 93 09 0d 	sts	0x0D09, r24	; 0x800d09 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    367a:	00 93 0a 0d 	sts	0x0D0A, r16	; 0x800d0a <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    367e:	86 e0       	ldi	r24, 0x06	; 6
    3680:	f5 01       	movw	r30, r10
    3682:	ab e0       	ldi	r26, 0x0B	; 11
    3684:	bd e0       	ldi	r27, 0x0D	; 13
    3686:	01 90       	ld	r0, Z+
    3688:	0d 92       	st	X+, r0
    368a:	8a 95       	dec	r24
    368c:	e1 f7       	brne	.-8      	; 0x3686 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    368e:	80 e0       	ldi	r24, 0x00	; 0
    3690:	4d 85       	ldd	r20, Y+13	; 0x0d
    3692:	84 17       	cp	r24, r20
    3694:	60 f4       	brcc	.+24     	; 0x36ae <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    3696:	28 2f       	mov	r18, r24
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	fe 01       	movw	r30, r28
    369c:	e2 0f       	add	r30, r18
    369e:	f3 1f       	adc	r31, r19
    36a0:	96 81       	ldd	r25, Z+6	; 0x06
    36a2:	f9 01       	movw	r30, r18
    36a4:	e9 5f       	subi	r30, 0xF9	; 249
    36a6:	f2 4f       	sbci	r31, 0xF2	; 242
    36a8:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    36aa:	8f 5f       	subi	r24, 0xFF	; 255
    36ac:	f1 cf       	rjmp	.-30     	; 0x3690 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    36ae:	46 5f       	subi	r20, 0xF6	; 246
    36b0:	28 ee       	ldi	r18, 0xE8	; 232
    36b2:	33 e0       	ldi	r19, 0x03	; 3
    36b4:	67 e0       	ldi	r22, 0x07	; 7
    36b6:	7d e0       	ldi	r23, 0x0D	; 13
    36b8:	ce 01       	movw	r24, r28
    36ba:	6e de       	rcall	.-804    	; 0x3398 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    36bc:	88 23       	and	r24, r24
    36be:	49 f0       	breq	.+18     	; 0x36d2 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    36c0:	4c e0       	ldi	r20, 0x0C	; 12
    36c2:	67 e0       	ldi	r22, 0x07	; 7
    36c4:	7d e0       	ldi	r23, 0x0D	; 13
    36c6:	ce 01       	movw	r24, r28
    36c8:	19 dd       	rcall	.-1486   	; 0x30fc <_ZN14Adafruit_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    36ca:	81 e0       	ldi	r24, 0x01	; 1
    36cc:	90 91 0e 0d 	lds	r25, 0x0D0E	; 0x800d0e <pn532_packetbuffer+0x7>
    36d0:	91 11       	cpse	r25, r1
    36d2:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    36d4:	df 91       	pop	r29
    36d6:	cf 91       	pop	r28
    36d8:	1f 91       	pop	r17
    36da:	0f 91       	pop	r16
    36dc:	ef 90       	pop	r14
    36de:	df 90       	pop	r13
    36e0:	cf 90       	pop	r12
    36e2:	bf 90       	pop	r11
    36e4:	af 90       	pop	r10
    36e6:	08 95       	ret

000036e8 <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t Adafruit_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    36e8:	0f 93       	push	r16
    36ea:	1f 93       	push	r17
    36ec:	cf 93       	push	r28
    36ee:	df 93       	push	r29
    36f0:	ec 01       	movw	r28, r24
    36f2:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    36f4:	80 e4       	ldi	r24, 0x40	; 64
    36f6:	80 93 07 0d 	sts	0x0D07, r24	; 0x800d07 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	80 93 08 0d 	sts	0x0D08, r24	; 0x800d08 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    3700:	80 e3       	ldi	r24, 0x30	; 48
    3702:	80 93 09 0d 	sts	0x0D09, r24	; 0x800d09 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    3706:	60 93 0a 0d 	sts	0x0D0A, r22	; 0x800d0a <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    370a:	28 ee       	ldi	r18, 0xE8	; 232
    370c:	33 e0       	ldi	r19, 0x03	; 3
    370e:	44 e0       	ldi	r20, 0x04	; 4
    3710:	67 e0       	ldi	r22, 0x07	; 7
    3712:	7d e0       	ldi	r23, 0x0D	; 13
    3714:	ce 01       	movw	r24, r28
    3716:	40 de       	rcall	.-896    	; 0x3398 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    3718:	81 11       	cpse	r24, r1
    371a:	02 c0       	rjmp	.+4      	; 0x3720 <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	12 c0       	rjmp	.+36     	; 0x3744 <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x5c>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    3720:	4a e1       	ldi	r20, 0x1A	; 26
    3722:	67 e0       	ldi	r22, 0x07	; 7
    3724:	7d e0       	ldi	r23, 0x0D	; 13
    3726:	ce 01       	movw	r24, r28
    3728:	e9 dc       	rcall	.-1582   	; 0x30fc <_ZN14Adafruit_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    372a:	80 91 0e 0d 	lds	r24, 0x0D0E	; 0x800d0e <pn532_packetbuffer+0x7>
    372e:	81 11       	cpse	r24, r1
    3730:	f5 cf       	rjmp	.-22     	; 0x371c <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    3732:	80 e1       	ldi	r24, 0x10	; 16
    3734:	ef e0       	ldi	r30, 0x0F	; 15
    3736:	fd e0       	ldi	r31, 0x0D	; 13
    3738:	d8 01       	movw	r26, r16
    373a:	01 90       	ld	r0, Z+
    373c:	0d 92       	st	X+, r0
    373e:	8a 95       	dec	r24
    3740:	e1 f7       	brne	.-8      	; 0x373a <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x52>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    Adafruit_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    3742:	81 e0       	ldi	r24, 0x01	; 1
}
    3744:	df 91       	pop	r29
    3746:	cf 91       	pop	r28
    3748:	1f 91       	pop	r17
    374a:	0f 91       	pop	r16
    374c:	08 95       	ret

0000374e <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t Adafruit_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    374e:	cf 93       	push	r28
    3750:	df 93       	push	r29
    3752:	ec 01       	movw	r28, r24
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    3754:	80 e4       	ldi	r24, 0x40	; 64
    3756:	80 93 07 0d 	sts	0x0D07, r24	; 0x800d07 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	80 93 08 0d 	sts	0x0D08, r24	; 0x800d08 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    3760:	80 ea       	ldi	r24, 0xA0	; 160
    3762:	80 93 09 0d 	sts	0x0D09, r24	; 0x800d09 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    3766:	60 93 0a 0d 	sts	0x0D0A, r22	; 0x800d0a <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);          /* Data Payload */
    376a:	80 e1       	ldi	r24, 0x10	; 16
    376c:	fa 01       	movw	r30, r20
    376e:	ab e0       	ldi	r26, 0x0B	; 11
    3770:	bd e0       	ldi	r27, 0x0D	; 13
    3772:	01 90       	ld	r0, Z+
    3774:	0d 92       	st	X+, r0
    3776:	8a 95       	dec	r24
    3778:	e1 f7       	brne	.-8      	; 0x3772 <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    377a:	28 ee       	ldi	r18, 0xE8	; 232
    377c:	33 e0       	ldi	r19, 0x03	; 3
    377e:	44 e1       	ldi	r20, 0x14	; 20
    3780:	67 e0       	ldi	r22, 0x07	; 7
    3782:	7d e0       	ldi	r23, 0x0D	; 13
    3784:	ce 01       	movw	r24, r28
    3786:	08 de       	rcall	.-1008   	; 0x3398 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    3788:	88 23       	and	r24, r24
    378a:	69 f0       	breq	.+26     	; 0x37a6 <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    #endif

    // Return Failed Signal
    return 0;
  }
  delay(10);
    378c:	6a e0       	ldi	r22, 0x0A	; 10
    378e:	70 e0       	ldi	r23, 0x00	; 0
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    3798:	4a e1       	ldi	r20, 0x1A	; 26
    379a:	67 e0       	ldi	r22, 0x07	; 7
    379c:	7d e0       	ldi	r23, 0x0D	; 13
    379e:	ce 01       	movw	r24, r28
    37a0:	ad dc       	rcall	.-1702   	; 0x30fc <_ZN14Adafruit_PN5328readdataEPhh>
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	01 c0       	rjmp	.+2      	; 0x37a8 <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
    #endif
    return 0;
    37a6:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    37a8:	df 91       	pop	r29
    37aa:	cf 91       	pop	r28
    37ac:	08 95       	ret

000037ae <_ZL9date2daysjhh>:
} // of method pinAlarm()                                                     //                                  //
/*******************************************************************************************************************
** Method pinSquareWave() will set the control register flag to make the INT/SQW Pin produce a 1Hz signal         **
*******************************************************************************************************************/
void DS3231M_Class::pinSquareWave() {                                         //                                  //
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)|0x4);                   // Set bit 3 to off                 //
    37ae:	80 3d       	cpi	r24, 0xD0	; 208
    37b0:	27 e0       	ldi	r18, 0x07	; 7
    37b2:	92 07       	cpc	r25, r18
    37b4:	10 f0       	brcs	.+4      	; 0x37ba <_ZL9date2daysjhh+0xc>
    37b6:	80 5d       	subi	r24, 0xD0	; 208
    37b8:	97 40       	sbci	r25, 0x07	; 7
    37ba:	50 e0       	ldi	r21, 0x00	; 0
    37bc:	eb e1       	ldi	r30, 0x1B	; 27
    37be:	f2 e0       	ldi	r31, 0x02	; 2
    37c0:	21 e0       	ldi	r18, 0x01	; 1
    37c2:	26 17       	cp	r18, r22
    37c4:	30 f4       	brcc	.+12     	; 0x37d2 <_ZL9date2daysjhh+0x24>
    37c6:	34 91       	lpm	r19, Z
    37c8:	43 0f       	add	r20, r19
    37ca:	51 1d       	adc	r21, r1
    37cc:	2f 5f       	subi	r18, 0xFF	; 255
    37ce:	31 96       	adiw	r30, 0x01	; 1
    37d0:	f8 cf       	rjmp	.-16     	; 0x37c2 <_ZL9date2daysjhh+0x14>
    37d2:	63 30       	cpi	r22, 0x03	; 3
    37d4:	38 f0       	brcs	.+14     	; 0x37e4 <_ZL9date2daysjhh+0x36>
    37d6:	9c 01       	movw	r18, r24
    37d8:	23 70       	andi	r18, 0x03	; 3
    37da:	33 27       	eor	r19, r19
    37dc:	23 2b       	or	r18, r19
    37de:	11 f4       	brne	.+4      	; 0x37e4 <_ZL9date2daysjhh+0x36>
    37e0:	4f 5f       	subi	r20, 0xFF	; 255
    37e2:	5f 4f       	sbci	r21, 0xFF	; 255
    37e4:	bc 01       	movw	r22, r24
    37e6:	6d 5f       	subi	r22, 0xFD	; 253
    37e8:	7f 4f       	sbci	r23, 0xFF	; 255
    37ea:	76 95       	lsr	r23
    37ec:	67 95       	ror	r22
    37ee:	76 95       	lsr	r23
    37f0:	67 95       	ror	r22
    37f2:	ed e6       	ldi	r30, 0x6D	; 109
    37f4:	f1 e0       	ldi	r31, 0x01	; 1
    37f6:	8e 9f       	mul	r24, r30
    37f8:	90 01       	movw	r18, r0
    37fa:	8f 9f       	mul	r24, r31
    37fc:	30 0d       	add	r19, r0
    37fe:	9e 9f       	mul	r25, r30
    3800:	30 0d       	add	r19, r0
    3802:	11 24       	eor	r1, r1
    3804:	c9 01       	movw	r24, r18
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	86 0f       	add	r24, r22
    380a:	97 1f       	adc	r25, r23
    380c:	84 0f       	add	r24, r20
    380e:	95 1f       	adc	r25, r21
    3810:	08 95       	ret

00003812 <_ZL6conv2dPKc>:
    3812:	fc 01       	movw	r30, r24
    3814:	90 81       	ld	r25, Z
    3816:	90 53       	subi	r25, 0x30	; 48
    3818:	9a 30       	cpi	r25, 0x0A	; 10
    381a:	08 f0       	brcs	.+2      	; 0x381e <_ZL6conv2dPKc+0xc>
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	81 81       	ldd	r24, Z+1	; 0x01
    3820:	80 53       	subi	r24, 0x30	; 48
    3822:	2a e0       	ldi	r18, 0x0A	; 10
    3824:	92 9f       	mul	r25, r18
    3826:	80 0d       	add	r24, r0
    3828:	11 24       	eor	r1, r1
    382a:	08 95       	ret

0000382c <_ZN8DateTimeC1Em>:
    382c:	8f 92       	push	r8
    382e:	9f 92       	push	r9
    3830:	af 92       	push	r10
    3832:	bf 92       	push	r11
    3834:	cf 92       	push	r12
    3836:	df 92       	push	r13
    3838:	ef 92       	push	r14
    383a:	ff 92       	push	r15
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29
    3840:	ec 01       	movw	r28, r24
    3842:	6a 01       	movw	r12, r20
    3844:	7b 01       	movw	r14, r22
    3846:	80 e8       	ldi	r24, 0x80	; 128
    3848:	c8 1a       	sub	r12, r24
    384a:	83 e4       	ldi	r24, 0x43	; 67
    384c:	d8 0a       	sbc	r13, r24
    384e:	8d e6       	ldi	r24, 0x6D	; 109
    3850:	e8 0a       	sbc	r14, r24
    3852:	88 e3       	ldi	r24, 0x38	; 56
    3854:	f8 0a       	sbc	r15, r24
    3856:	8c e3       	ldi	r24, 0x3C	; 60
    3858:	88 2e       	mov	r8, r24
    385a:	91 2c       	mov	r9, r1
    385c:	a1 2c       	mov	r10, r1
    385e:	b1 2c       	mov	r11, r1
    3860:	c7 01       	movw	r24, r14
    3862:	b6 01       	movw	r22, r12
    3864:	a5 01       	movw	r20, r10
    3866:	94 01       	movw	r18, r8
    3868:	0e 94 3c 40 	call	0x8078	; 0x8078 <__udivmodsi4>
    386c:	6d 83       	std	Y+5, r22	; 0x05
    386e:	ca 01       	movw	r24, r20
    3870:	b9 01       	movw	r22, r18
    3872:	a5 01       	movw	r20, r10
    3874:	94 01       	movw	r18, r8
    3876:	0e 94 3c 40 	call	0x8078	; 0x8078 <__udivmodsi4>
    387a:	6c 83       	std	Y+4, r22	; 0x04
    387c:	c7 01       	movw	r24, r14
    387e:	b6 01       	movw	r22, r12
    3880:	20 e1       	ldi	r18, 0x10	; 16
    3882:	3e e0       	ldi	r19, 0x0E	; 14
    3884:	40 e0       	ldi	r20, 0x00	; 0
    3886:	50 e0       	ldi	r21, 0x00	; 0
    3888:	0e 94 3c 40 	call	0x8078	; 0x8078 <__udivmodsi4>
    388c:	ca 01       	movw	r24, r20
    388e:	b9 01       	movw	r22, r18
    3890:	28 e1       	ldi	r18, 0x18	; 24
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	40 e0       	ldi	r20, 0x00	; 0
    3896:	50 e0       	ldi	r21, 0x00	; 0
    3898:	0e 94 3c 40 	call	0x8078	; 0x8078 <__udivmodsi4>
    389c:	6b 83       	std	Y+3, r22	; 0x03
    389e:	c7 01       	movw	r24, r14
    38a0:	b6 01       	movw	r22, r12
    38a2:	20 e8       	ldi	r18, 0x80	; 128
    38a4:	31 e5       	ldi	r19, 0x51	; 81
    38a6:	41 e0       	ldi	r20, 0x01	; 1
    38a8:	50 e0       	ldi	r21, 0x00	; 0
    38aa:	0e 94 3c 40 	call	0x8078	; 0x8078 <__udivmodsi4>
    38ae:	18 82       	st	Y, r1
    38b0:	88 81       	ld	r24, Y
    38b2:	98 2f       	mov	r25, r24
    38b4:	93 70       	andi	r25, 0x03	; 3
    38b6:	41 e0       	ldi	r20, 0x01	; 1
    38b8:	50 e0       	ldi	r21, 0x00	; 0
    38ba:	11 f0       	breq	.+4      	; 0x38c0 <_ZN8DateTimeC1Em+0x94>
    38bc:	40 e0       	ldi	r20, 0x00	; 0
    38be:	50 e0       	ldi	r21, 0x00	; 0
    38c0:	ba 01       	movw	r22, r20
    38c2:	63 59       	subi	r22, 0x93	; 147
    38c4:	7e 4f       	sbci	r23, 0xFE	; 254
    38c6:	26 17       	cp	r18, r22
    38c8:	37 07       	cpc	r19, r23
    38ca:	38 f0       	brcs	.+14     	; 0x38da <_ZN8DateTimeC1Em+0xae>
    38cc:	24 1b       	sub	r18, r20
    38ce:	35 0b       	sbc	r19, r21
    38d0:	2d 56       	subi	r18, 0x6D	; 109
    38d2:	31 40       	sbci	r19, 0x01	; 1
    38d4:	8f 5f       	subi	r24, 0xFF	; 255
    38d6:	88 83       	st	Y, r24
    38d8:	eb cf       	rjmp	.-42     	; 0x38b0 <_ZN8DateTimeC1Em+0x84>
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	89 83       	std	Y+1, r24	; 0x01
    38de:	89 81       	ldd	r24, Y+1	; 0x01
    38e0:	e8 2f       	mov	r30, r24
    38e2:	f0 e0       	ldi	r31, 0x00	; 0
    38e4:	e6 5e       	subi	r30, 0xE6	; 230
    38e6:	fd 4f       	sbci	r31, 0xFD	; 253
    38e8:	e4 91       	lpm	r30, Z
    38ea:	91 11       	cpse	r25, r1
    38ec:	03 c0       	rjmp	.+6      	; 0x38f4 <_ZN8DateTimeC1Em+0xc8>
    38ee:	82 30       	cpi	r24, 0x02	; 2
    38f0:	09 f4       	brne	.+2      	; 0x38f4 <_ZN8DateTimeC1Em+0xc8>
    38f2:	ef 5f       	subi	r30, 0xFF	; 255
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	2e 17       	cp	r18, r30
    38f8:	3f 07       	cpc	r19, r31
    38fa:	20 f0       	brcs	.+8      	; 0x3904 <_ZN8DateTimeC1Em+0xd8>
    38fc:	2e 1b       	sub	r18, r30
    38fe:	3f 0b       	sbc	r19, r31
    3900:	8f 5f       	subi	r24, 0xFF	; 255
    3902:	ec cf       	rjmp	.-40     	; 0x38dc <_ZN8DateTimeC1Em+0xb0>
    3904:	2f 5f       	subi	r18, 0xFF	; 255
    3906:	2a 83       	std	Y+2, r18	; 0x02
    3908:	df 91       	pop	r29
    390a:	cf 91       	pop	r28
    390c:	ff 90       	pop	r15
    390e:	ef 90       	pop	r14
    3910:	df 90       	pop	r13
    3912:	cf 90       	pop	r12
    3914:	bf 90       	pop	r11
    3916:	af 90       	pop	r10
    3918:	9f 90       	pop	r9
    391a:	8f 90       	pop	r8
    391c:	08 95       	ret

0000391e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    391e:	ef 92       	push	r14
    3920:	ff 92       	push	r15
    3922:	0f 93       	push	r16
    3924:	1f 93       	push	r17
    3926:	cf 93       	push	r28
    3928:	df 93       	push	r29
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
    392e:	2b 97       	sbiw	r28, 0x0b	; 11
    3930:	0f b6       	in	r0, 0x3f	; 63
    3932:	f8 94       	cli
    3934:	de bf       	out	0x3e, r29	; 62
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	cd bf       	out	0x3d, r28	; 61
    393a:	8c 01       	movw	r16, r24
    393c:	7a 01       	movw	r14, r20
    393e:	4b e0       	ldi	r20, 0x0B	; 11
    3940:	50 e0       	ldi	r21, 0x00	; 0
    3942:	ce 01       	movw	r24, r28
    3944:	01 96       	adiw	r24, 0x01	; 1
    3946:	0e 94 c8 43 	call	0x8790	; 0x8790 <memcpy_P>
    394a:	ce 01       	movw	r24, r28
    394c:	0a 96       	adiw	r24, 0x0a	; 10
    394e:	61 df       	rcall	.-318    	; 0x3812 <_ZL6conv2dPKc>
    3950:	f8 01       	movw	r30, r16
    3952:	80 83       	st	Z, r24
    3954:	e9 81       	ldd	r30, Y+1	; 0x01
    3956:	8e 2f       	mov	r24, r30
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	fc 01       	movw	r30, r24
    395c:	e1 54       	subi	r30, 0x41	; 65
    395e:	f1 09       	sbc	r31, r1
    3960:	e3 31       	cpi	r30, 0x13	; 19
    3962:	f1 05       	cpc	r31, r1
    3964:	48 f5       	brcc	.+82     	; 0x39b8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    3966:	ef 5a       	subi	r30, 0xAF	; 175
    3968:	ff 4f       	sbci	r31, 0xFF	; 255
    396a:	0c 94 5e 40 	jmp	0x80bc	; 0x80bc <__tablejump2__>
    396e:	8a 81       	ldd	r24, Y+2	; 0x02
    3970:	81 36       	cpi	r24, 0x61	; 97
    3972:	29 f0       	breq	.+10     	; 0x397e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    3974:	8b 81       	ldd	r24, Y+3	; 0x03
    3976:	8e 36       	cpi	r24, 0x6E	; 110
    3978:	21 f0       	breq	.+8      	; 0x3982 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    397a:	87 e0       	ldi	r24, 0x07	; 7
    397c:	1b c0       	rjmp	.+54     	; 0x39b4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	19 c0       	rjmp	.+50     	; 0x39b4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3982:	86 e0       	ldi	r24, 0x06	; 6
    3984:	17 c0       	rjmp	.+46     	; 0x39b4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3986:	82 e0       	ldi	r24, 0x02	; 2
    3988:	15 c0       	rjmp	.+42     	; 0x39b4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    398a:	8b 81       	ldd	r24, Y+3	; 0x03
    398c:	82 37       	cpi	r24, 0x72	; 114
    398e:	11 f0       	breq	.+4      	; 0x3994 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    3990:	88 e0       	ldi	r24, 0x08	; 8
    3992:	10 c0       	rjmp	.+32     	; 0x39b4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3994:	84 e0       	ldi	r24, 0x04	; 4
    3996:	0e c0       	rjmp	.+28     	; 0x39b4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3998:	8b 81       	ldd	r24, Y+3	; 0x03
    399a:	82 37       	cpi	r24, 0x72	; 114
    399c:	11 f0       	breq	.+4      	; 0x39a2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    399e:	85 e0       	ldi	r24, 0x05	; 5
    39a0:	09 c0       	rjmp	.+18     	; 0x39b4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    39a2:	83 e0       	ldi	r24, 0x03	; 3
    39a4:	07 c0       	rjmp	.+14     	; 0x39b4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    39a6:	89 e0       	ldi	r24, 0x09	; 9
    39a8:	05 c0       	rjmp	.+10     	; 0x39b4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    39aa:	8a e0       	ldi	r24, 0x0A	; 10
    39ac:	03 c0       	rjmp	.+6      	; 0x39b4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    39ae:	8b e0       	ldi	r24, 0x0B	; 11
    39b0:	01 c0       	rjmp	.+2      	; 0x39b4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    39b2:	8c e0       	ldi	r24, 0x0C	; 12
    39b4:	f8 01       	movw	r30, r16
    39b6:	81 83       	std	Z+1, r24	; 0x01
    39b8:	ce 01       	movw	r24, r28
    39ba:	05 96       	adiw	r24, 0x05	; 5
    39bc:	2a df       	rcall	.-428    	; 0x3812 <_ZL6conv2dPKc>
    39be:	f8 01       	movw	r30, r16
    39c0:	82 83       	std	Z+2, r24	; 0x02
    39c2:	48 e0       	ldi	r20, 0x08	; 8
    39c4:	50 e0       	ldi	r21, 0x00	; 0
    39c6:	b7 01       	movw	r22, r14
    39c8:	ce 01       	movw	r24, r28
    39ca:	01 96       	adiw	r24, 0x01	; 1
    39cc:	0e 94 c8 43 	call	0x8790	; 0x8790 <memcpy_P>
    39d0:	ce 01       	movw	r24, r28
    39d2:	01 96       	adiw	r24, 0x01	; 1
    39d4:	1e df       	rcall	.-452    	; 0x3812 <_ZL6conv2dPKc>
    39d6:	f8 01       	movw	r30, r16
    39d8:	83 83       	std	Z+3, r24	; 0x03
    39da:	ce 01       	movw	r24, r28
    39dc:	04 96       	adiw	r24, 0x04	; 4
    39de:	19 df       	rcall	.-462    	; 0x3812 <_ZL6conv2dPKc>
    39e0:	f8 01       	movw	r30, r16
    39e2:	84 83       	std	Z+4, r24	; 0x04
    39e4:	ce 01       	movw	r24, r28
    39e6:	07 96       	adiw	r24, 0x07	; 7
    39e8:	14 df       	rcall	.-472    	; 0x3812 <_ZL6conv2dPKc>
    39ea:	f8 01       	movw	r30, r16
    39ec:	85 83       	std	Z+5, r24	; 0x05
    39ee:	2b 96       	adiw	r28, 0x0b	; 11
    39f0:	0f b6       	in	r0, 0x3f	; 63
    39f2:	f8 94       	cli
    39f4:	de bf       	out	0x3e, r29	; 62
    39f6:	0f be       	out	0x3f, r0	; 63
    39f8:	cd bf       	out	0x3d, r28	; 61
    39fa:	df 91       	pop	r29
    39fc:	cf 91       	pop	r28
    39fe:	1f 91       	pop	r17
    3a00:	0f 91       	pop	r16
    3a02:	ff 90       	pop	r15
    3a04:	ef 90       	pop	r14
    3a06:	08 95       	ret

00003a08 <_ZNK8DateTime12dayOfTheWeekEv>:
    3a08:	fc 01       	movw	r30, r24
    3a0a:	80 81       	ld	r24, Z
    3a0c:	42 81       	ldd	r20, Z+2	; 0x02
    3a0e:	61 81       	ldd	r22, Z+1	; 0x01
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	cd de       	rcall	.-614    	; 0x37ae <_ZL9date2daysjhh>
    3a14:	06 96       	adiw	r24, 0x06	; 6
    3a16:	67 e0       	ldi	r22, 0x07	; 7
    3a18:	70 e0       	ldi	r23, 0x00	; 0
    3a1a:	0c 94 28 40 	jmp	0x8050	; 0x8050 <__udivmodhi4>
    3a1e:	08 95       	ret

00003a20 <_ZNK8DateTime8unixtimeEv>:
    3a20:	ef 92       	push	r14
    3a22:	ff 92       	push	r15
    3a24:	0f 93       	push	r16
    3a26:	1f 93       	push	r17
    3a28:	cf 93       	push	r28
    3a2a:	df 93       	push	r29
    3a2c:	ec 01       	movw	r28, r24
    3a2e:	88 81       	ld	r24, Y
    3a30:	4a 81       	ldd	r20, Y+2	; 0x02
    3a32:	69 81       	ldd	r22, Y+1	; 0x01
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	bb de       	rcall	.-650    	; 0x37ae <_ZL9date2daysjhh>
    3a38:	9c 01       	movw	r18, r24
    3a3a:	a8 e1       	ldi	r26, 0x18	; 24
    3a3c:	b0 e0       	ldi	r27, 0x00	; 0
    3a3e:	0e 94 67 40 	call	0x80ce	; 0x80ce <__umulhisi3>
    3a42:	2b 81       	ldd	r18, Y+3	; 0x03
    3a44:	7b 01       	movw	r14, r22
    3a46:	8c 01       	movw	r16, r24
    3a48:	e2 0e       	add	r14, r18
    3a4a:	f1 1c       	adc	r15, r1
    3a4c:	01 1d       	adc	r16, r1
    3a4e:	11 1d       	adc	r17, r1
    3a50:	a8 01       	movw	r20, r16
    3a52:	97 01       	movw	r18, r14
    3a54:	ac e3       	ldi	r26, 0x3C	; 60
    3a56:	b0 e0       	ldi	r27, 0x00	; 0
    3a58:	0e 94 76 40 	call	0x80ec	; 0x80ec <__muluhisi3>
    3a5c:	2c 81       	ldd	r18, Y+4	; 0x04
    3a5e:	7b 01       	movw	r14, r22
    3a60:	8c 01       	movw	r16, r24
    3a62:	e2 0e       	add	r14, r18
    3a64:	f1 1c       	adc	r15, r1
    3a66:	01 1d       	adc	r16, r1
    3a68:	11 1d       	adc	r17, r1
    3a6a:	a8 01       	movw	r20, r16
    3a6c:	97 01       	movw	r18, r14
    3a6e:	0e 94 76 40 	call	0x80ec	; 0x80ec <__muluhisi3>
    3a72:	2d 81       	ldd	r18, Y+5	; 0x05
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	82 0f       	add	r24, r18
    3a7a:	91 1d       	adc	r25, r1
    3a7c:	a1 1d       	adc	r26, r1
    3a7e:	b1 1d       	adc	r27, r1
    3a80:	bc 01       	movw	r22, r24
    3a82:	cd 01       	movw	r24, r26
    3a84:	60 58       	subi	r22, 0x80	; 128
    3a86:	7c 4b       	sbci	r23, 0xBC	; 188
    3a88:	82 49       	sbci	r24, 0x92	; 146
    3a8a:	97 4c       	sbci	r25, 0xC7	; 199
    3a8c:	df 91       	pop	r29
    3a8e:	cf 91       	pop	r28
    3a90:	1f 91       	pop	r17
    3a92:	0f 91       	pop	r16
    3a94:	ff 90       	pop	r15
    3a96:	ef 90       	pop	r14
    3a98:	08 95       	ret

00003a9a <_ZNK8DateTime11secondstimeEv>:
    3a9a:	ef 92       	push	r14
    3a9c:	ff 92       	push	r15
    3a9e:	0f 93       	push	r16
    3aa0:	1f 93       	push	r17
    3aa2:	cf 93       	push	r28
    3aa4:	df 93       	push	r29
    3aa6:	ec 01       	movw	r28, r24
    3aa8:	88 81       	ld	r24, Y
    3aaa:	4a 81       	ldd	r20, Y+2	; 0x02
    3aac:	69 81       	ldd	r22, Y+1	; 0x01
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	7e de       	rcall	.-772    	; 0x37ae <_ZL9date2daysjhh>
    3ab2:	9c 01       	movw	r18, r24
    3ab4:	a8 e1       	ldi	r26, 0x18	; 24
    3ab6:	b0 e0       	ldi	r27, 0x00	; 0
    3ab8:	0e 94 67 40 	call	0x80ce	; 0x80ce <__umulhisi3>
    3abc:	2b 81       	ldd	r18, Y+3	; 0x03
    3abe:	7b 01       	movw	r14, r22
    3ac0:	8c 01       	movw	r16, r24
    3ac2:	e2 0e       	add	r14, r18
    3ac4:	f1 1c       	adc	r15, r1
    3ac6:	01 1d       	adc	r16, r1
    3ac8:	11 1d       	adc	r17, r1
    3aca:	a8 01       	movw	r20, r16
    3acc:	97 01       	movw	r18, r14
    3ace:	ac e3       	ldi	r26, 0x3C	; 60
    3ad0:	b0 e0       	ldi	r27, 0x00	; 0
    3ad2:	0e 94 76 40 	call	0x80ec	; 0x80ec <__muluhisi3>
    3ad6:	2c 81       	ldd	r18, Y+4	; 0x04
    3ad8:	7b 01       	movw	r14, r22
    3ada:	8c 01       	movw	r16, r24
    3adc:	e2 0e       	add	r14, r18
    3ade:	f1 1c       	adc	r15, r1
    3ae0:	01 1d       	adc	r16, r1
    3ae2:	11 1d       	adc	r17, r1
    3ae4:	a8 01       	movw	r20, r16
    3ae6:	97 01       	movw	r18, r14
    3ae8:	0e 94 76 40 	call	0x80ec	; 0x80ec <__muluhisi3>
    3aec:	2d 81       	ldd	r18, Y+5	; 0x05
    3aee:	62 0f       	add	r22, r18
    3af0:	71 1d       	adc	r23, r1
    3af2:	81 1d       	adc	r24, r1
    3af4:	91 1d       	adc	r25, r1
    3af6:	df 91       	pop	r29
    3af8:	cf 91       	pop	r28
    3afa:	1f 91       	pop	r17
    3afc:	0f 91       	pop	r16
    3afe:	ff 90       	pop	r15
    3b00:	ef 90       	pop	r14
    3b02:	08 95       	ret

00003b04 <_ZN13DS3231M_ClassC1Ev>:
    3b04:	fc 01       	movw	r30, r24
    3b06:	10 82       	st	Z, r1
    3b08:	11 82       	std	Z+1, r1	; 0x01
    3b0a:	12 82       	std	Z+2, r1	; 0x02
    3b0c:	13 82       	std	Z+3, r1	; 0x03
    3b0e:	14 82       	std	Z+4, r1	; 0x04
    3b10:	08 95       	ret

00003b12 <_ZN13DS3231M_ClassD1Ev>:
    3b12:	08 95       	ret

00003b14 <_ZN13DS3231M_Class9writeByteEhh>:
    3b14:	0f 93       	push	r16
    3b16:	1f 93       	push	r17
    3b18:	cf 93       	push	r28
    3b1a:	df 93       	push	r29
    3b1c:	ec 01       	movw	r28, r24
    3b1e:	06 2f       	mov	r16, r22
    3b20:	14 2f       	mov	r17, r20
    3b22:	68 e6       	ldi	r22, 0x68	; 104
    3b24:	87 e0       	ldi	r24, 0x07	; 7
    3b26:	9e e0       	ldi	r25, 0x0E	; 14
    3b28:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>
    3b2c:	60 2f       	mov	r22, r16
    3b2e:	87 e0       	ldi	r24, 0x07	; 7
    3b30:	9e e0       	ldi	r25, 0x0E	; 14
    3b32:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <_ZN7TwoWire5writeEh>
    3b36:	61 2f       	mov	r22, r17
    3b38:	87 e0       	ldi	r24, 0x07	; 7
    3b3a:	9e e0       	ldi	r25, 0x0E	; 14
    3b3c:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <_ZN7TwoWire5writeEh>
    3b40:	87 e0       	ldi	r24, 0x07	; 7
    3b42:	9e e0       	ldi	r25, 0x0E	; 14
    3b44:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
    3b48:	88 83       	st	Y, r24
    3b4a:	df 91       	pop	r29
    3b4c:	cf 91       	pop	r28
    3b4e:	1f 91       	pop	r17
    3b50:	0f 91       	pop	r16
    3b52:	08 95       	ret

00003b54 <_ZN13DS3231M_Class8readByteEh>:
    3b54:	1f 93       	push	r17
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
    3b5a:	ec 01       	movw	r28, r24
    3b5c:	16 2f       	mov	r17, r22
    3b5e:	68 e6       	ldi	r22, 0x68	; 104
    3b60:	87 e0       	ldi	r24, 0x07	; 7
    3b62:	9e e0       	ldi	r25, 0x0E	; 14
    3b64:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>
    3b68:	61 2f       	mov	r22, r17
    3b6a:	87 e0       	ldi	r24, 0x07	; 7
    3b6c:	9e e0       	ldi	r25, 0x0E	; 14
    3b6e:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <_ZN7TwoWire5writeEh>
    3b72:	87 e0       	ldi	r24, 0x07	; 7
    3b74:	9e e0       	ldi	r25, 0x0E	; 14
    3b76:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
    3b7a:	88 83       	st	Y, r24
    3b7c:	41 e0       	ldi	r20, 0x01	; 1
    3b7e:	68 e6       	ldi	r22, 0x68	; 104
    3b80:	87 e0       	ldi	r24, 0x07	; 7
    3b82:	9e e0       	ldi	r25, 0x0E	; 14
    3b84:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <_ZN7TwoWire11requestFromEhh>
    3b88:	87 e0       	ldi	r24, 0x07	; 7
    3b8a:	9e e0       	ldi	r25, 0x0E	; 14
    3b8c:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <_ZN7TwoWire4readEv>
    3b90:	df 91       	pop	r29
    3b92:	cf 91       	pop	r28
    3b94:	1f 91       	pop	r17
    3b96:	08 95       	ret

00003b98 <_ZN13DS3231M_Class5beginEm>:
    3b98:	cf 92       	push	r12
    3b9a:	df 92       	push	r13
    3b9c:	ef 92       	push	r14
    3b9e:	ff 92       	push	r15
    3ba0:	cf 93       	push	r28
    3ba2:	df 93       	push	r29
    3ba4:	ec 01       	movw	r28, r24
    3ba6:	6a 01       	movw	r12, r20
    3ba8:	7b 01       	movw	r14, r22
    3baa:	87 e0       	ldi	r24, 0x07	; 7
    3bac:	9e e0       	ldi	r25, 0x0E	; 14
    3bae:	0e 94 db 36 	call	0x6db6	; 0x6db6 <_ZN7TwoWire5beginEv>
    3bb2:	b7 01       	movw	r22, r14
    3bb4:	a6 01       	movw	r20, r12
    3bb6:	87 e0       	ldi	r24, 0x07	; 7
    3bb8:	9e e0       	ldi	r25, 0x0E	; 14
    3bba:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <_ZN7TwoWire8setClockEm>
    3bbe:	68 e6       	ldi	r22, 0x68	; 104
    3bc0:	87 e0       	ldi	r24, 0x07	; 7
    3bc2:	9e e0       	ldi	r25, 0x0E	; 14
    3bc4:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>
    3bc8:	87 e0       	ldi	r24, 0x07	; 7
    3bca:	9e e0       	ldi	r25, 0x0E	; 14
    3bcc:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
    3bd0:	81 11       	cpse	r24, r1
    3bd2:	0a c0       	rjmp	.+20     	; 0x3be8 <_ZN13DS3231M_Class5beginEm+0x50>
    3bd4:	62 e0       	ldi	r22, 0x02	; 2
    3bd6:	ce 01       	movw	r24, r28
    3bd8:	bd df       	rcall	.-134    	; 0x3b54 <_ZN13DS3231M_Class8readByteEh>
    3bda:	48 2f       	mov	r20, r24
    3bdc:	4f 7b       	andi	r20, 0xBF	; 191
    3bde:	62 e0       	ldi	r22, 0x02	; 2
    3be0:	ce 01       	movw	r24, r28
    3be2:	98 df       	rcall	.-208    	; 0x3b14 <_ZN13DS3231M_Class9writeByteEhh>
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	01 c0       	rjmp	.+2      	; 0x3bea <_ZN13DS3231M_Class5beginEm+0x52>
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	df 91       	pop	r29
    3bec:	cf 91       	pop	r28
    3bee:	ff 90       	pop	r15
    3bf0:	ef 90       	pop	r14
    3bf2:	df 90       	pop	r13
    3bf4:	cf 90       	pop	r12
    3bf6:	08 95       	ret

00003bf8 <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    3bf8:	0f 93       	push	r16
    3bfa:	1f 93       	push	r17
    3bfc:	cf 93       	push	r28
    3bfe:	df 93       	push	r29
    3c00:	8c 01       	movw	r16, r24
    3c02:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    3c04:	68 e6       	ldi	r22, 0x68	; 104
    3c06:	87 e0       	ldi	r24, 0x07	; 7
    3c08:	9e e0       	ldi	r25, 0x0E	; 14
    3c0a:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    3c0e:	60 e0       	ldi	r22, 0x00	; 0
    3c10:	87 e0       	ldi	r24, 0x07	; 7
    3c12:	9e e0       	ldi	r25, 0x0E	; 14
    3c14:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    3c18:	87 e0       	ldi	r24, 0x07	; 7
    3c1a:	9e e0       	ldi	r25, 0x0E	; 14
    3c1c:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
    3c20:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    3c22:	47 e0       	ldi	r20, 0x07	; 7
    3c24:	68 e6       	ldi	r22, 0x68	; 104
    3c26:	87 e0       	ldi	r24, 0x07	; 7
    3c28:	9e e0       	ldi	r25, 0x0E	; 14
    3c2a:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    3c2e:	87 e0       	ldi	r24, 0x07	; 7
    3c30:	9e e0       	ldi	r25, 0x0E	; 14
    3c32:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_ZN7TwoWire9availableEv>
    3c36:	07 97       	sbiw	r24, 0x07	; 7
    3c38:	09 f0       	breq	.+2      	; 0x3c3c <_ZN13DS3231M_Class3nowEv+0x44>
    3c3a:	64 c0       	rjmp	.+200    	; 0x3d04 <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    3c3c:	87 e0       	ldi	r24, 0x07	; 7
    3c3e:	9e e0       	ldi	r25, 0x0E	; 14
    3c40:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <_ZN7TwoWire4readEv>
    3c44:	98 2f       	mov	r25, r24
    3c46:	96 95       	lsr	r25
    3c48:	96 95       	lsr	r25
    3c4a:	96 95       	lsr	r25
    3c4c:	9e 70       	andi	r25, 0x0E	; 14
    3c4e:	29 2f       	mov	r18, r25
    3c50:	22 0f       	add	r18, r18
    3c52:	22 0f       	add	r18, r18
    3c54:	92 0f       	add	r25, r18
    3c56:	8f 70       	andi	r24, 0x0F	; 15
    3c58:	89 0f       	add	r24, r25
    3c5a:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    3c5c:	87 e0       	ldi	r24, 0x07	; 7
    3c5e:	9e e0       	ldi	r25, 0x0E	; 14
    3c60:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <_ZN7TwoWire4readEv>
    3c64:	98 2f       	mov	r25, r24
    3c66:	96 95       	lsr	r25
    3c68:	96 95       	lsr	r25
    3c6a:	96 95       	lsr	r25
    3c6c:	9e 70       	andi	r25, 0x0E	; 14
    3c6e:	29 2f       	mov	r18, r25
    3c70:	22 0f       	add	r18, r18
    3c72:	22 0f       	add	r18, r18
    3c74:	92 0f       	add	r25, r18
    3c76:	8f 70       	andi	r24, 0x0F	; 15
    3c78:	89 0f       	add	r24, r25
    3c7a:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    3c7c:	87 e0       	ldi	r24, 0x07	; 7
    3c7e:	9e e0       	ldi	r25, 0x0E	; 14
    3c80:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <_ZN7TwoWire4readEv>
    3c84:	98 2f       	mov	r25, r24
    3c86:	96 95       	lsr	r25
    3c88:	96 95       	lsr	r25
    3c8a:	96 95       	lsr	r25
    3c8c:	9e 70       	andi	r25, 0x0E	; 14
    3c8e:	29 2f       	mov	r18, r25
    3c90:	22 0f       	add	r18, r18
    3c92:	22 0f       	add	r18, r18
    3c94:	92 0f       	add	r25, r18
    3c96:	8f 70       	andi	r24, 0x0F	; 15
    3c98:	89 0f       	add	r24, r25
    3c9a:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    3c9c:	87 e0       	ldi	r24, 0x07	; 7
    3c9e:	9e e0       	ldi	r25, 0x0E	; 14
    3ca0:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    3ca4:	87 e0       	ldi	r24, 0x07	; 7
    3ca6:	9e e0       	ldi	r25, 0x0E	; 14
    3ca8:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <_ZN7TwoWire4readEv>
    3cac:	98 2f       	mov	r25, r24
    3cae:	96 95       	lsr	r25
    3cb0:	96 95       	lsr	r25
    3cb2:	96 95       	lsr	r25
    3cb4:	96 70       	andi	r25, 0x06	; 6
    3cb6:	29 2f       	mov	r18, r25
    3cb8:	22 0f       	add	r18, r18
    3cba:	22 0f       	add	r18, r18
    3cbc:	92 0f       	add	r25, r18
    3cbe:	8f 70       	andi	r24, 0x0F	; 15
    3cc0:	89 0f       	add	r24, r25
    3cc2:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    3cc4:	87 e0       	ldi	r24, 0x07	; 7
    3cc6:	9e e0       	ldi	r25, 0x0E	; 14
    3cc8:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <_ZN7TwoWire4readEv>
    3ccc:	84 fb       	bst	r24, 4
    3cce:	99 27       	eor	r25, r25
    3cd0:	90 f9       	bld	r25, 0
    3cd2:	99 0f       	add	r25, r25
    3cd4:	29 2f       	mov	r18, r25
    3cd6:	22 0f       	add	r18, r18
    3cd8:	22 0f       	add	r18, r18
    3cda:	92 0f       	add	r25, r18
    3cdc:	8f 70       	andi	r24, 0x0F	; 15
    3cde:	89 0f       	add	r24, r25
    3ce0:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    3ce2:	87 e0       	ldi	r24, 0x07	; 7
    3ce4:	9e e0       	ldi	r25, 0x0E	; 14
    3ce6:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <_ZN7TwoWire4readEv>
    3cea:	98 2f       	mov	r25, r24
    3cec:	92 95       	swap	r25
    3cee:	9f 70       	andi	r25, 0x0F	; 15
    3cf0:	8f 70       	andi	r24, 0x0F	; 15
    3cf2:	2a e0       	ldi	r18, 0x0A	; 10
    3cf4:	92 9f       	mul	r25, r18
    3cf6:	80 0d       	add	r24, r0
    3cf8:	11 24       	eor	r1, r1
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	80 53       	subi	r24, 0x30	; 48
    3cfe:	98 4f       	sbci	r25, 0xF8	; 248
    3d00:	9b 87       	std	Y+11, r25	; 0x0b
    3d02:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    3d04:	2d 81       	ldd	r18, Y+5	; 0x05
    3d06:	3e 81       	ldd	r19, Y+6	; 0x06
    3d08:	4f 81       	ldd	r20, Y+7	; 0x07
    3d0a:	58 85       	ldd	r21, Y+8	; 0x08
    3d0c:	69 85       	ldd	r22, Y+9	; 0x09
    3d0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d10:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    3d12:	80 3d       	cpi	r24, 0xD0	; 208
    3d14:	77 e0       	ldi	r23, 0x07	; 7
    3d16:	97 07       	cpc	r25, r23
    3d18:	10 f0       	brcs	.+4      	; 0x3d1e <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    3d1a:	80 5d       	subi	r24, 0xD0	; 208
    3d1c:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    3d1e:	f8 01       	movw	r30, r16
    3d20:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    3d22:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    3d24:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    3d26:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    3d28:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    3d2a:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    3d2c:	c8 01       	movw	r24, r16
    3d2e:	df 91       	pop	r29
    3d30:	cf 91       	pop	r28
    3d32:	1f 91       	pop	r17
    3d34:	0f 91       	pop	r16
    3d36:	08 95       	ret

00003d38 <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    3d38:	df 92       	push	r13
    3d3a:	ef 92       	push	r14
    3d3c:	ff 92       	push	r15
    3d3e:	0f 93       	push	r16
    3d40:	1f 93       	push	r17
    3d42:	cf 93       	push	r28
    3d44:	df 93       	push	r29
    3d46:	00 d0       	rcall	.+0      	; 0x3d48 <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    3d48:	00 d0       	rcall	.+0      	; 0x3d4a <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    3d4a:	00 d0       	rcall	.+0      	; 0x3d4c <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    3d4c:	cd b7       	in	r28, 0x3d	; 61
    3d4e:	de b7       	in	r29, 0x3e	; 62
    3d50:	8c 01       	movw	r16, r24
    3d52:	7b 01       	movw	r14, r22
    3d54:	fb 01       	movw	r30, r22
    3d56:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    3d58:	9a e0       	ldi	r25, 0x0A	; 10
    3d5a:	d9 2e       	mov	r13, r25
    3d5c:	6d 2d       	mov	r22, r13
    3d5e:	0e 94 1c 40 	call	0x8038	; 0x8038 <__udivmodqi4>
    3d62:	49 2f       	mov	r20, r25
    3d64:	f0 e1       	ldi	r31, 0x10	; 16
    3d66:	8f 9f       	mul	r24, r31
    3d68:	40 0d       	add	r20, r0
    3d6a:	11 24       	eor	r1, r1
    3d6c:	60 e0       	ldi	r22, 0x00	; 0
    3d6e:	c8 01       	movw	r24, r16
    3d70:	d1 de       	rcall	.-606    	; 0x3b14 <_ZN13DS3231M_Class9writeByteEhh>
    3d72:	f7 01       	movw	r30, r14
    3d74:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    3d76:	6d 2d       	mov	r22, r13
    3d78:	0e 94 1c 40 	call	0x8038	; 0x8038 <__udivmodqi4>
    3d7c:	49 2f       	mov	r20, r25
    3d7e:	f0 e1       	ldi	r31, 0x10	; 16
    3d80:	8f 9f       	mul	r24, r31
    3d82:	40 0d       	add	r20, r0
    3d84:	11 24       	eor	r1, r1
    3d86:	61 e0       	ldi	r22, 0x01	; 1
    3d88:	c8 01       	movw	r24, r16
    3d8a:	c4 de       	rcall	.-632    	; 0x3b14 <_ZN13DS3231M_Class9writeByteEhh>
    3d8c:	f7 01       	movw	r30, r14
    3d8e:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    3d90:	6d 2d       	mov	r22, r13
    3d92:	0e 94 1c 40 	call	0x8038	; 0x8038 <__udivmodqi4>
    3d96:	49 2f       	mov	r20, r25
    3d98:	f0 e1       	ldi	r31, 0x10	; 16
    3d9a:	8f 9f       	mul	r24, r31
    3d9c:	40 0d       	add	r20, r0
    3d9e:	11 24       	eor	r1, r1
    3da0:	62 e0       	ldi	r22, 0x02	; 2
    3da2:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    3da4:	b7 de       	rcall	.-658    	; 0x3b14 <_ZN13DS3231M_Class9writeByteEhh>
    3da6:	c7 01       	movw	r24, r14
    3da8:	2f de       	rcall	.-930    	; 0x3a08 <_ZNK8DateTime12dayOfTheWeekEv>
    3daa:	48 2f       	mov	r20, r24
    3dac:	63 e0       	ldi	r22, 0x03	; 3
    3dae:	c8 01       	movw	r24, r16
    3db0:	b1 de       	rcall	.-670    	; 0x3b14 <_ZN13DS3231M_Class9writeByteEhh>
    3db2:	f7 01       	movw	r30, r14
    3db4:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    3db6:	6d 2d       	mov	r22, r13
    3db8:	0e 94 1c 40 	call	0x8038	; 0x8038 <__udivmodqi4>
    3dbc:	49 2f       	mov	r20, r25
    3dbe:	f0 e1       	ldi	r31, 0x10	; 16
    3dc0:	8f 9f       	mul	r24, r31
    3dc2:	40 0d       	add	r20, r0
    3dc4:	11 24       	eor	r1, r1
    3dc6:	64 e0       	ldi	r22, 0x04	; 4
    3dc8:	c8 01       	movw	r24, r16
    3dca:	a4 de       	rcall	.-696    	; 0x3b14 <_ZN13DS3231M_Class9writeByteEhh>
    3dcc:	f7 01       	movw	r30, r14
    3dce:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    3dd0:	6d 2d       	mov	r22, r13
    3dd2:	0e 94 1c 40 	call	0x8038	; 0x8038 <__udivmodqi4>
    3dd6:	49 2f       	mov	r20, r25
    3dd8:	f0 e1       	ldi	r31, 0x10	; 16
    3dda:	8f 9f       	mul	r24, r31
    3ddc:	40 0d       	add	r20, r0
    3dde:	11 24       	eor	r1, r1
    3de0:	65 e0       	ldi	r22, 0x05	; 5
    3de2:	c8 01       	movw	r24, r16
    3de4:	97 de       	rcall	.-722    	; 0x3b14 <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    3de6:	f7 01       	movw	r30, r14
    3de8:	80 81       	ld	r24, Z
    3dea:	6d 2d       	mov	r22, r13
    3dec:	0e 94 1c 40 	call	0x8038	; 0x8038 <__udivmodqi4>
    3df0:	49 2f       	mov	r20, r25
    3df2:	f0 e1       	ldi	r31, 0x10	; 16
    3df4:	8f 9f       	mul	r24, r31
    3df6:	40 0d       	add	r20, r0
    3df8:	11 24       	eor	r1, r1
    3dfa:	66 e0       	ldi	r22, 0x06	; 6
    3dfc:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    3dfe:	8a de       	rcall	.-748    	; 0x3b14 <_ZN13DS3231M_Class9writeByteEhh>
    3e00:	6f e0       	ldi	r22, 0x0F	; 15
    3e02:	c8 01       	movw	r24, r16
    3e04:	a7 de       	rcall	.-690    	; 0x3b54 <_ZN13DS3231M_Class8readByteEh>
    3e06:	48 2f       	mov	r20, r24
    3e08:	4f 77       	andi	r20, 0x7F	; 127
    3e0a:	6f e0       	ldi	r22, 0x0F	; 15
    3e0c:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    3e0e:	82 de       	rcall	.-764    	; 0x3b14 <_ZN13DS3231M_Class9writeByteEhh>
    3e10:	6e e0       	ldi	r22, 0x0E	; 14
    3e12:	c8 01       	movw	r24, r16
    3e14:	9f de       	rcall	.-706    	; 0x3b54 <_ZN13DS3231M_Class8readByteEh>
    3e16:	48 2f       	mov	r20, r24
    3e18:	4f 77       	andi	r20, 0x7F	; 127
    3e1a:	6e e0       	ldi	r22, 0x0E	; 14
    3e1c:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    3e1e:	7a de       	rcall	.-780    	; 0x3b14 <_ZN13DS3231M_Class9writeByteEhh>
    3e20:	b8 01       	movw	r22, r16
    3e22:	ce 01       	movw	r24, r28
    3e24:	01 96       	adiw	r24, 0x01	; 1
    3e26:	e8 de       	rcall	.-560    	; 0x3bf8 <_ZN13DS3231M_Class3nowEv>
    3e28:	ce 01       	movw	r24, r28
    3e2a:	01 96       	adiw	r24, 0x01	; 1
    3e2c:	f9 dd       	rcall	.-1038   	; 0x3a20 <_ZNK8DateTime8unixtimeEv>
    3e2e:	f8 01       	movw	r30, r16
    3e30:	61 83       	std	Z+1, r22	; 0x01
    3e32:	72 83       	std	Z+2, r23	; 0x02
    3e34:	83 83       	std	Z+3, r24	; 0x03
    3e36:	94 83       	std	Z+4, r25	; 0x04
    3e38:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    3e3a:	0f b6       	in	r0, 0x3f	; 63
    3e3c:	f8 94       	cli
    3e3e:	de bf       	out	0x3e, r29	; 62
    3e40:	0f be       	out	0x3f, r0	; 63
    3e42:	cd bf       	out	0x3d, r28	; 61
    3e44:	df 91       	pop	r29
    3e46:	cf 91       	pop	r28
    3e48:	1f 91       	pop	r17
    3e4a:	0f 91       	pop	r16
    3e4c:	ff 90       	pop	r15
    3e4e:	ef 90       	pop	r14
    3e50:	df 90       	pop	r13
    3e52:	08 95       	ret

00003e54 <_ZN13DS3231M_Class6adjustEv>:
    3e54:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    3e56:	1f 93       	push	r17
    3e58:	cf 93       	push	r28
    3e5a:	df 93       	push	r29
    3e5c:	00 d0       	rcall	.+0      	; 0x3e5e <_ZN13DS3231M_Class6adjustEv+0xa>
    3e5e:	00 d0       	rcall	.+0      	; 0x3e60 <_ZN13DS3231M_Class6adjustEv+0xc>
    3e60:	00 d0       	rcall	.+0      	; 0x3e62 <_ZN13DS3231M_Class6adjustEv+0xe>
    3e62:	cd b7       	in	r28, 0x3d	; 61
    3e64:	de b7       	in	r29, 0x3e	; 62
    3e66:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    3e68:	42 e1       	ldi	r20, 0x12	; 18
    3e6a:	52 e0       	ldi	r21, 0x02	; 2
    3e6c:	66 e0       	ldi	r22, 0x06	; 6
    3e6e:	72 e0       	ldi	r23, 0x02	; 2
    3e70:	ce 01       	movw	r24, r28
    3e72:	01 96       	adiw	r24, 0x01	; 1
    3e74:	54 dd       	rcall	.-1368   	; 0x391e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    3e76:	be 01       	movw	r22, r28
    3e78:	6f 5f       	subi	r22, 0xFF	; 255
    3e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e7c:	c8 01       	movw	r24, r16
    3e7e:	5c df       	rcall	.-328    	; 0x3d38 <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    3e80:	26 96       	adiw	r28, 0x06	; 6
    3e82:	0f b6       	in	r0, 0x3f	; 63
    3e84:	f8 94       	cli
    3e86:	de bf       	out	0x3e, r29	; 62
    3e88:	0f be       	out	0x3f, r0	; 63
    3e8a:	cd bf       	out	0x3d, r28	; 61
    3e8c:	df 91       	pop	r29
    3e8e:	cf 91       	pop	r28
    3e90:	1f 91       	pop	r17
    3e92:	0f 91       	pop	r16
    3e94:	08 95       	ret

00003e96 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    3e96:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3e98:	00 e0       	ldi	r16, 0x00	; 0
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	40 e0       	ldi	r20, 0x00	; 0
    3e9e:	60 e0       	ldi	r22, 0x00	; 0
    3ea0:	87 e4       	ldi	r24, 0x47	; 71
    3ea2:	9d e0       	ldi	r25, 0x0D	; 13
    3ea4:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <_ZN9IPAddressC1Ehhhh>
    3ea8:	0f 91       	pop	r16
    3eaa:	08 95       	ret

00003eac <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3eac:	fb 01       	movw	r30, r22
    3eae:	42 81       	ldd	r20, Z+2	; 0x02
    3eb0:	53 81       	ldd	r21, Z+3	; 0x03
    3eb2:	64 81       	ldd	r22, Z+4	; 0x04
    3eb4:	75 81       	ldd	r23, Z+5	; 0x05
    3eb6:	fc 01       	movw	r30, r24
    3eb8:	42 83       	std	Z+2, r20	; 0x02
    3eba:	53 83       	std	Z+3, r21	; 0x03
    3ebc:	64 83       	std	Z+4, r22	; 0x04
    3ebe:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    3ec0:	17 82       	std	Z+7, r1	; 0x07
    3ec2:	16 82       	std	Z+6, r1	; 0x06
    3ec4:	08 95       	ret

00003ec6 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    3ec6:	cf 93       	push	r28
    3ec8:	df 93       	push	r29
    3eca:	da 01       	movw	r26, r20
    3ecc:	fb 01       	movw	r30, r22
    3ece:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    3ed0:	89 91       	ld	r24, Y+
    3ed2:	81 11       	cpse	r24, r1
    3ed4:	fd cf       	rjmp	.-6      	; 0x3ed0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    3ed6:	80 e0       	ldi	r24, 0x00	; 0
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	20 e0       	ldi	r18, 0x00	; 0
    3edc:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    3ede:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    3ee0:	51 91       	ld	r21, Z+
    3ee2:	55 23       	and	r21, r21
    3ee4:	e9 f0       	breq	.+58     	; 0x3f20 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    3ee6:	24 30       	cpi	r18, 0x04	; 4
    3ee8:	31 05       	cpc	r19, r1
    3eea:	44 f5       	brge	.+80     	; 0x3f3c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    3eec:	5e 32       	cpi	r21, 0x2E	; 46
    3eee:	69 f4       	brne	.+26     	; 0x3f0a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    3ef0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ef2:	91 05       	cpc	r25, r1
    3ef4:	09 f0       	breq	.+2      	; 0x3ef8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    3ef6:	14 f5       	brge	.+68     	; 0x3f3c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    3ef8:	ed 01       	movw	r28, r26
    3efa:	c2 0f       	add	r28, r18
    3efc:	d3 1f       	adc	r29, r19
    3efe:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    3f00:	2f 5f       	subi	r18, 0xFF	; 255
    3f02:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	eb cf       	rjmp	.-42     	; 0x3ee0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    3f0a:	48 9f       	mul	r20, r24
    3f0c:	b0 01       	movw	r22, r0
    3f0e:	49 9f       	mul	r20, r25
    3f10:	70 0d       	add	r23, r0
    3f12:	11 24       	eor	r1, r1
    3f14:	85 2f       	mov	r24, r21
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	c0 97       	sbiw	r24, 0x30	; 48
    3f1a:	86 0f       	add	r24, r22
    3f1c:	97 1f       	adc	r25, r23
    3f1e:	e0 cf       	rjmp	.-64     	; 0x3ee0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    3f20:	8f 3f       	cpi	r24, 0xFF	; 255
    3f22:	91 05       	cpc	r25, r1
    3f24:	09 f0       	breq	.+2      	; 0x3f28 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    3f26:	54 f4       	brge	.+20     	; 0x3f3c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    3f28:	24 30       	cpi	r18, 0x04	; 4
    3f2a:	31 05       	cpc	r19, r1
    3f2c:	3c f4       	brge	.+14     	; 0x3f3c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    3f2e:	fd 01       	movw	r30, r26
    3f30:	e2 0f       	add	r30, r18
    3f32:	f3 1f       	adc	r31, r19
    3f34:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	02 c0       	rjmp	.+4      	; 0x3f40 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    3f3c:	80 e0       	ldi	r24, 0x00	; 0
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    3f40:	df 91       	pop	r29
    3f42:	cf 91       	pop	r28
    3f44:	08 95       	ret

00003f46 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    3f46:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3f48:	00 e0       	ldi	r16, 0x00	; 0
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	40 e0       	ldi	r20, 0x00	; 0
    3f4e:	60 e0       	ldi	r22, 0x00	; 0
    3f50:	8d e4       	ldi	r24, 0x4D	; 77
    3f52:	9d e0       	ldi	r25, 0x0D	; 13
    3f54:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <_ZN9IPAddressC1Ehhhh>
    3f58:	0f 91       	pop	r16
    3f5a:	08 95       	ret

00003f5c <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    3f5c:	8f 92       	push	r8
    3f5e:	9f 92       	push	r9
    3f60:	af 92       	push	r10
    3f62:	bf 92       	push	r11
    3f64:	cf 92       	push	r12
    3f66:	df 92       	push	r13
    3f68:	ef 92       	push	r14
    3f6a:	ff 92       	push	r15
    3f6c:	0f 93       	push	r16
    3f6e:	1f 93       	push	r17
    3f70:	cf 93       	push	r28
    3f72:	df 93       	push	r29
    3f74:	00 d0       	rcall	.+0      	; 0x3f76 <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    3f76:	1f 92       	push	r1
    3f78:	cd b7       	in	r28, 0x3d	; 61
    3f7a:	de b7       	in	r29, 0x3e	; 62
    3f7c:	6c 01       	movw	r12, r24
    3f7e:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    3f80:	0e 94 07 3b 	call	0x760e	; 0x760e <millis>
    3f84:	f6 01       	movw	r30, r12
    3f86:	77 83       	std	Z+7, r23	; 0x07
    3f88:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    3f8a:	86 01       	movw	r16, r12
    3f8c:	08 5f       	subi	r16, 0xF8	; 248
    3f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f90:	b6 01       	movw	r22, r12
    3f92:	6a 5f       	subi	r22, 0xFA	; 250
    3f94:	7f 4f       	sbci	r23, 0xFF	; 255
    3f96:	42 e0       	ldi	r20, 0x02	; 2
    3f98:	50 e0       	ldi	r21, 0x00	; 0
    3f9a:	c8 01       	movw	r24, r16
    3f9c:	55 d6       	rcall	.+3242   	; 0x4c48 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    3f9e:	81 e0       	ldi	r24, 0x01	; 1
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	9a 83       	std	Y+2, r25	; 0x02
    3fa4:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3fa6:	42 e0       	ldi	r20, 0x02	; 2
    3fa8:	50 e0       	ldi	r21, 0x00	; 0
    3faa:	be 01       	movw	r22, r28
    3fac:	6f 5f       	subi	r22, 0xFF	; 255
    3fae:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb0:	c8 01       	movw	r24, r16
    3fb2:	4a d6       	rcall	.+3220   	; 0x4c48 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    3fb4:	80 e0       	ldi	r24, 0x00	; 0
    3fb6:	91 e0       	ldi	r25, 0x01	; 1
    3fb8:	9a 83       	std	Y+2, r25	; 0x02
    3fba:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3fbc:	42 e0       	ldi	r20, 0x02	; 2
    3fbe:	50 e0       	ldi	r21, 0x00	; 0
    3fc0:	be 01       	movw	r22, r28
    3fc2:	6f 5f       	subi	r22, 0xFF	; 255
    3fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc6:	c8 01       	movw	r24, r16
    3fc8:	3f d6       	rcall	.+3198   	; 0x4c48 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    3fca:	1a 82       	std	Y+2, r1	; 0x02
    3fcc:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3fce:	42 e0       	ldi	r20, 0x02	; 2
    3fd0:	50 e0       	ldi	r21, 0x00	; 0
    3fd2:	be 01       	movw	r22, r28
    3fd4:	6f 5f       	subi	r22, 0xFF	; 255
    3fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fd8:	c8 01       	movw	r24, r16
    3fda:	36 d6       	rcall	.+3180   	; 0x4c48 <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3fdc:	42 e0       	ldi	r20, 0x02	; 2
    3fde:	50 e0       	ldi	r21, 0x00	; 0
    3fe0:	be 01       	movw	r22, r28
    3fe2:	6f 5f       	subi	r22, 0xFF	; 255
    3fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe6:	c8 01       	movw	r24, r16
    3fe8:	2f d6       	rcall	.+3166   	; 0x4c48 <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3fea:	42 e0       	ldi	r20, 0x02	; 2
    3fec:	50 e0       	ldi	r21, 0x00	; 0
    3fee:	be 01       	movw	r22, r28
    3ff0:	6f 5f       	subi	r22, 0xFF	; 255
    3ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff4:	c8 01       	movw	r24, r16
    3ff6:	28 d6       	rcall	.+3152   	; 0x4c48 <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    3ff8:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    3ffa:	f5 01       	movw	r30, r10
    3ffc:	80 81       	ld	r24, Z
    3ffe:	88 23       	and	r24, r24
    4000:	f9 f0       	breq	.+62     	; 0x4040 <_ZN9DNSClient12BuildRequestEPKc+0xe4>
    4002:	a7 01       	movw	r20, r14
    4004:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    4006:	f5 01       	movw	r30, r10
    4008:	81 91       	ld	r24, Z+
    400a:	6f 01       	movw	r12, r30
    400c:	88 23       	and	r24, r24
    400e:	21 f0       	breq	.+8      	; 0x4018 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    4010:	8e 32       	cpi	r24, 0x2E	; 46
    4012:	11 f0       	breq	.+4      	; 0x4018 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    4014:	a6 01       	movw	r20, r12
    4016:	f6 cf       	rjmp	.-20     	; 0x4004 <_ZN9DNSClient12BuildRequestEPKc+0xa8>
        {
            end++;
        }

        if (end-start > 0)
    4018:	4a 01       	movw	r8, r20
    401a:	8e 18       	sub	r8, r14
    401c:	9f 08       	sbc	r9, r15
    401e:	18 14       	cp	r1, r8
    4020:	19 04       	cpc	r1, r9
    4022:	64 f4       	brge	.+24     	; 0x403c <_ZN9DNSClient12BuildRequestEPKc+0xe0>
        {
            // Write out the size of this section
            len = end-start;
    4024:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    4026:	41 e0       	ldi	r20, 0x01	; 1
    4028:	50 e0       	ldi	r21, 0x00	; 0
    402a:	be 01       	movw	r22, r28
    402c:	6d 5f       	subi	r22, 0xFD	; 253
    402e:	7f 4f       	sbci	r23, 0xFF	; 255
    4030:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    4032:	0a d6       	rcall	.+3092   	; 0x4c48 <_ZN11EthernetUDP5writeEPKhj>
    4034:	a4 01       	movw	r20, r8
    4036:	b7 01       	movw	r22, r14
    4038:	c8 01       	movw	r24, r16
    403a:	06 d6       	rcall	.+3084   	; 0x4c48 <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    403c:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    403e:	dd cf       	rjmp	.-70     	; 0x3ffa <_ZN9DNSClient12BuildRequestEPKc+0x9e>
    iUdp.write(&len, sizeof(len));
    4040:	1b 82       	std	Y+3, r1	; 0x03
    4042:	41 e0       	ldi	r20, 0x01	; 1
    4044:	50 e0       	ldi	r21, 0x00	; 0
    4046:	be 01       	movw	r22, r28
    4048:	6d 5f       	subi	r22, 0xFD	; 253
    404a:	7f 4f       	sbci	r23, 0xFF	; 255
    404c:	c8 01       	movw	r24, r16
    404e:	fc d5       	rcall	.+3064   	; 0x4c48 <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    4050:	e1 2c       	mov	r14, r1
    4052:	ff 24       	eor	r15, r15
    4054:	f3 94       	inc	r15
    4056:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4058:	e9 82       	std	Y+1, r14	; 0x01
    405a:	42 e0       	ldi	r20, 0x02	; 2
    405c:	50 e0       	ldi	r21, 0x00	; 0
    405e:	be 01       	movw	r22, r28
    4060:	6f 5f       	subi	r22, 0xFF	; 255
    4062:	7f 4f       	sbci	r23, 0xFF	; 255
    4064:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    4066:	f0 d5       	rcall	.+3040   	; 0x4c48 <_ZN11EthernetUDP5writeEPKhj>
    4068:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    406a:	e9 82       	std	Y+1, r14	; 0x01
    406c:	42 e0       	ldi	r20, 0x02	; 2
    406e:	50 e0       	ldi	r21, 0x00	; 0
    4070:	be 01       	movw	r22, r28
    4072:	6f 5f       	subi	r22, 0xFF	; 255
    4074:	7f 4f       	sbci	r23, 0xFF	; 255
    4076:	c8 01       	movw	r24, r16
    4078:	e7 d5       	rcall	.+3022   	; 0x4c48 <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	0f 90       	pop	r0
    4080:	0f 90       	pop	r0
    4082:	0f 90       	pop	r0
    4084:	df 91       	pop	r29
    4086:	cf 91       	pop	r28
    4088:	1f 91       	pop	r17
    408a:	0f 91       	pop	r16
    408c:	ff 90       	pop	r15
    408e:	ef 90       	pop	r14
    4090:	df 90       	pop	r13
    4092:	cf 90       	pop	r12
    4094:	bf 90       	pop	r11
    4096:	af 90       	pop	r10
    4098:	9f 90       	pop	r9
    409a:	8f 90       	pop	r8
    409c:	08 95       	ret

0000409e <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    409e:	2f 92       	push	r2
    40a0:	3f 92       	push	r3
    40a2:	4f 92       	push	r4
    40a4:	5f 92       	push	r5
    40a6:	6f 92       	push	r6
    40a8:	7f 92       	push	r7
    40aa:	8f 92       	push	r8
    40ac:	9f 92       	push	r9
    40ae:	af 92       	push	r10
    40b0:	bf 92       	push	r11
    40b2:	cf 92       	push	r12
    40b4:	df 92       	push	r13
    40b6:	ef 92       	push	r14
    40b8:	ff 92       	push	r15
    40ba:	0f 93       	push	r16
    40bc:	1f 93       	push	r17
    40be:	cf 93       	push	r28
    40c0:	df 93       	push	r29
    40c2:	cd b7       	in	r28, 0x3d	; 61
    40c4:	de b7       	in	r29, 0x3e	; 62
    40c6:	63 97       	sbiw	r28, 0x13	; 19
    40c8:	0f b6       	in	r0, 0x3f	; 63
    40ca:	f8 94       	cli
    40cc:	de bf       	out	0x3e, r29	; 62
    40ce:	0f be       	out	0x3f, r0	; 63
    40d0:	cd bf       	out	0x3d, r28	; 61
    40d2:	7c 01       	movw	r14, r24
    40d4:	6b 01       	movw	r12, r22
    40d6:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    40d8:	0e 94 07 3b 	call	0x760e	; 0x760e <millis>
    40dc:	4b 01       	movw	r8, r22
    40de:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    40e0:	87 01       	movw	r16, r14
    40e2:	08 5f       	subi	r16, 0xF8	; 248
    40e4:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    40e6:	26 01       	movw	r4, r12
    40e8:	61 2c       	mov	r6, r1
    40ea:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    40ec:	c8 01       	movw	r24, r16
    40ee:	4e d6       	rcall	.+3228   	; 0x4d8c <_ZN11EthernetUDP11parsePacketEv>
    40f0:	18 16       	cp	r1, r24
    40f2:	19 06       	cpc	r1, r25
    40f4:	a4 f0       	brlt	.+40     	; 0x411e <__stack+0x1f>
    {
        if((millis() - startTime) > aTimeout)
    40f6:	0e 94 07 3b 	call	0x760e	; 0x760e <millis>
    40fa:	dc 01       	movw	r26, r24
    40fc:	cb 01       	movw	r24, r22
    40fe:	88 19       	sub	r24, r8
    4100:	99 09       	sbc	r25, r9
    4102:	aa 09       	sbc	r26, r10
    4104:	bb 09       	sbc	r27, r11
    4106:	48 16       	cp	r4, r24
    4108:	59 06       	cpc	r5, r25
    410a:	6a 06       	cpc	r6, r26
    410c:	7b 06       	cpc	r7, r27
    410e:	d0 f0       	brcs	.+52     	; 0x4144 <__stack+0x45>
            return TIMED_OUT;
        delay(50);
    4110:	62 e3       	ldi	r22, 0x32	; 50
    4112:	70 e0       	ldi	r23, 0x00	; 0
    4114:	80 e0       	ldi	r24, 0x00	; 0
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    411c:	e7 cf       	rjmp	.-50     	; 0x40ec <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    411e:	f7 01       	movw	r30, r14
    4120:	42 81       	ldd	r20, Z+2	; 0x02
    4122:	53 81       	ldd	r21, Z+3	; 0x03
    4124:	64 81       	ldd	r22, Z+4	; 0x04
    4126:	75 81       	ldd	r23, Z+5	; 0x05
    4128:	81 8d       	ldd	r24, Z+25	; 0x19
    412a:	92 8d       	ldd	r25, Z+26	; 0x1a
    412c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    412e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4130:	48 17       	cp	r20, r24
    4132:	59 07       	cpc	r21, r25
    4134:	6a 07       	cpc	r22, r26
    4136:	7b 07       	cpc	r23, r27
    4138:	49 f4       	brne	.+18     	; 0x414c <__stack+0x4d>
    413a:	85 8d       	ldd	r24, Z+29	; 0x1d
    413c:	96 8d       	ldd	r25, Z+30	; 0x1e
    413e:	c5 97       	sbiw	r24, 0x35	; 53
    4140:	29 f4       	brne	.+10     	; 0x414c <__stack+0x4d>
    4142:	09 c0       	rjmp	.+18     	; 0x4156 <__stack+0x57>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    4144:	ee 24       	eor	r14, r14
    4146:	ea 94       	dec	r14
    4148:	fe 2c       	mov	r15, r14
    414a:	f0 c0       	rjmp	.+480    	; 0x432c <__stack+0x22d>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    414c:	9e ef       	ldi	r25, 0xFE	; 254
    414e:	e9 2e       	mov	r14, r25
    4150:	ff 24       	eor	r15, r15
    4152:	fa 94       	dec	r15
    4154:	eb c0       	rjmp	.+470    	; 0x432c <__stack+0x22d>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    4156:	c8 01       	movw	r24, r16
    4158:	2d d5       	rcall	.+2650   	; 0x4bb4 <_ZN11EthernetUDP9availableEv>
    415a:	0c 97       	sbiw	r24, 0x0c	; 12
    415c:	0c f4       	brge	.+2      	; 0x4160 <__stack+0x61>
    415e:	e2 c0       	rjmp	.+452    	; 0x4324 <__stack+0x225>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    4160:	4c e0       	ldi	r20, 0x0C	; 12
    4162:	50 e0       	ldi	r21, 0x00	; 0
    4164:	be 01       	movw	r22, r28
    4166:	6f 5f       	subi	r22, 0xFF	; 255
    4168:	7f 4f       	sbci	r23, 0xFF	; 255
    416a:	c8 01       	movw	r24, r16
    416c:	a8 d5       	rcall	.+2896   	; 0x4cbe <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    416e:	8b 81       	ldd	r24, Y+3	; 0x03
    4170:	9c 81       	ldd	r25, Y+4	; 0x04
    4172:	98 27       	eor	r25, r24
    4174:	89 27       	eor	r24, r25
    4176:	98 27       	eor	r25, r24
    4178:	9a 8b       	std	Y+18, r25	; 0x12
    417a:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    417c:	f7 01       	movw	r30, r14
    417e:	46 81       	ldd	r20, Z+6	; 0x06
    4180:	57 81       	ldd	r21, Z+7	; 0x07
    4182:	29 81       	ldd	r18, Y+1	; 0x01
    4184:	3a 81       	ldd	r19, Y+2	; 0x02
    4186:	42 17       	cp	r20, r18
    4188:	53 07       	cpc	r21, r19
    418a:	11 f4       	brne	.+4      	; 0x4190 <__stack+0x91>
    418c:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    418e:	07 c0       	rjmp	.+14     	; 0x419e <__stack+0x9f>
    4190:	c8 01       	movw	r24, r16
    4192:	2a d5       	rcall	.+2644   	; 0x4be8 <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    4194:	7c ef       	ldi	r23, 0xFC	; 252
    4196:	e7 2e       	mov	r14, r23
    4198:	ff 24       	eor	r15, r15
    419a:	fa 94       	dec	r15
    419c:	c7 c0       	rjmp	.+398    	; 0x432c <__stack+0x22d>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    419e:	8f 70       	andi	r24, 0x0F	; 15
    41a0:	92 70       	andi	r25, 0x02	; 2
    41a2:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    41a4:	39 f0       	breq	.+14     	; 0x41b4 <__stack+0xb5>
    41a6:	c8 01       	movw	r24, r16
    41a8:	1f d5       	rcall	.+2622   	; 0x4be8 <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    41aa:	6b ef       	ldi	r22, 0xFB	; 251
    41ac:	e6 2e       	mov	r14, r22
    41ae:	ff 24       	eor	r15, r15
    41b0:	fa 94       	dec	r15
    41b2:	bc c0       	rjmp	.+376    	; 0x432c <__stack+0x22d>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    41b4:	cf 80       	ldd	r12, Y+7	; 0x07
    41b6:	d8 84       	ldd	r13, Y+8	; 0x08
    41b8:	dc 24       	eor	r13, r12
    41ba:	cd 24       	eor	r12, r13
    41bc:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    41be:	c1 14       	cp	r12, r1
    41c0:	d1 04       	cpc	r13, r1
    41c2:	19 f0       	breq	.+6      	; 0x41ca <__stack+0xcb>
    41c4:	e1 2c       	mov	r14, r1
    41c6:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    41c8:	1f c0       	rjmp	.+62     	; 0x4208 <__stack+0x109>
    41ca:	c8 01       	movw	r24, r16
    41cc:	0d d5       	rcall	.+2586   	; 0x4be8 <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    41ce:	5a ef       	ldi	r21, 0xFA	; 250
    41d0:	e5 2e       	mov	r14, r21
    41d2:	ff 24       	eor	r15, r15
    41d4:	fa 94       	dec	r15
    41d6:	aa c0       	rjmp	.+340    	; 0x432c <__stack+0x22d>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    41d8:	41 e0       	ldi	r20, 0x01	; 1
    41da:	50 e0       	ldi	r21, 0x00	; 0
    41dc:	be 01       	movw	r22, r28
    41de:	63 5f       	subi	r22, 0xF3	; 243
    41e0:	7f 4f       	sbci	r23, 0xFF	; 255
    41e2:	c8 01       	movw	r24, r16
    41e4:	6c d5       	rcall	.+2776   	; 0x4cbe <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    41e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    41e8:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    41ea:	17 c0       	rjmp	.+46     	; 0x421a <__stack+0x11b>
    41ec:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    41ee:	81 11       	cpse	r24, r1
    41f0:	f3 cf       	rjmp	.-26     	; 0x41d8 <__stack+0xd9>
    41f2:	c8 01       	movw	r24, r16
    41f4:	3c d5       	rcall	.+2680   	; 0x4c6e <_ZN11EthernetUDP4readEv>
    41f6:	c8 01       	movw	r24, r16
    41f8:	3a d5       	rcall	.+2676   	; 0x4c6e <_ZN11EthernetUDP4readEv>
    41fa:	c8 01       	movw	r24, r16
    41fc:	38 d5       	rcall	.+2672   	; 0x4c6e <_ZN11EthernetUDP4readEv>
    41fe:	c8 01       	movw	r24, r16
    4200:	36 d5       	rcall	.+2668   	; 0x4c6e <_ZN11EthernetUDP4readEv>
    4202:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    4204:	ef 1a       	sub	r14, r31
    4206:	ff 0a       	sbc	r15, r31
    4208:	8d 81       	ldd	r24, Y+5	; 0x05
    420a:	9e 81       	ldd	r25, Y+6	; 0x06
    420c:	98 27       	eor	r25, r24
    420e:	89 27       	eor	r24, r25
    4210:	98 27       	eor	r25, r24
    4212:	e8 16       	cp	r14, r24
    4214:	f9 06       	cpc	r15, r25
    4216:	00 f3       	brcs	.-64     	; 0x41d8 <__stack+0xd9>
    4218:	09 c0       	rjmp	.+18     	; 0x422c <__stack+0x12d>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    421a:	8d 85       	ldd	r24, Y+13	; 0x0d
    421c:	9f ef       	ldi	r25, 0xFF	; 255
    421e:	98 0f       	add	r25, r24
    4220:	9d 87       	std	Y+13, r25	; 0x0d
    4222:	88 23       	and	r24, r24
    4224:	19 f3       	breq	.-58     	; 0x41ec <__stack+0xed>
                {
                    iUdp.read(); // we don't care about the returned byte
    4226:	c8 01       	movw	r24, r16
    4228:	22 d5       	rcall	.+2628   	; 0x4c6e <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    422a:	f7 cf       	rjmp	.-18     	; 0x421a <__stack+0x11b>
    422c:	a1 2c       	mov	r10, r1
    422e:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    4230:	41 e0       	ldi	r20, 0x01	; 1
    4232:	50 e0       	ldi	r21, 0x00	; 0
    4234:	be 01       	movw	r22, r28
    4236:	6d 5e       	subi	r22, 0xED	; 237
    4238:	7f 4f       	sbci	r23, 0xFF	; 255
    423a:	c8 01       	movw	r24, r16
    423c:	40 d5       	rcall	.+2688   	; 0x4cbe <_ZN11EthernetUDP4readEPhj>
    423e:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    4240:	98 2f       	mov	r25, r24
    4242:	90 7c       	andi	r25, 0xC0	; 192
    4244:	59 f4       	brne	.+22     	; 0x425c <__stack+0x15d>
            {
                // It's just a normal label
                if (len > 0)
    4246:	88 23       	and	r24, r24
    4248:	79 f0       	breq	.+30     	; 0x4268 <__stack+0x169>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    424a:	8b 89       	ldd	r24, Y+19	; 0x13
    424c:	9f ef       	ldi	r25, 0xFF	; 255
    424e:	98 0f       	add	r25, r24
    4250:	9b 8b       	std	Y+19, r25	; 0x13
    4252:	88 23       	and	r24, r24
    4254:	31 f0       	breq	.+12     	; 0x4262 <__stack+0x163>
                    {
                        iUdp.read(); // we don't care about the returned byte
    4256:	c8 01       	movw	r24, r16
    4258:	0a d5       	rcall	.+2580   	; 0x4c6e <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    425a:	f7 cf       	rjmp	.-18     	; 0x424a <__stack+0x14b>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    425c:	c8 01       	movw	r24, r16
    425e:	07 d5       	rcall	.+2574   	; 0x4c6e <_ZN11EthernetUDP4readEv>
    4260:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    4262:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    4264:	81 11       	cpse	r24, r1
    4266:	e4 cf       	rjmp	.-56     	; 0x4230 <__stack+0x131>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    4268:	42 e0       	ldi	r20, 0x02	; 2
    426a:	50 e0       	ldi	r21, 0x00	; 0
    426c:	be 01       	movw	r22, r28
    426e:	61 5f       	subi	r22, 0xF1	; 241
    4270:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    4272:	c8 01       	movw	r24, r16
    4274:	24 d5       	rcall	.+2632   	; 0x4cbe <_ZN11EthernetUDP4readEPhj>
    4276:	42 e0       	ldi	r20, 0x02	; 2
    4278:	50 e0       	ldi	r21, 0x00	; 0
    427a:	be 01       	movw	r22, r28
    427c:	63 5f       	subi	r22, 0xF3	; 243
    427e:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4280:	c8 01       	movw	r24, r16
    4282:	1d d5       	rcall	.+2618   	; 0x4cbe <_ZN11EthernetUDP4readEPhj>
    4284:	c8 01       	movw	r24, r16
    4286:	f3 d4       	rcall	.+2534   	; 0x4c6e <_ZN11EthernetUDP4readEv>
    4288:	c8 01       	movw	r24, r16
    428a:	f1 d4       	rcall	.+2530   	; 0x4c6e <_ZN11EthernetUDP4readEv>
    428c:	c8 01       	movw	r24, r16
    428e:	ef d4       	rcall	.+2526   	; 0x4c6e <_ZN11EthernetUDP4readEv>
    4290:	c8 01       	movw	r24, r16
    4292:	ed d4       	rcall	.+2522   	; 0x4c6e <_ZN11EthernetUDP4readEv>
    4294:	42 e0       	ldi	r20, 0x02	; 2
    4296:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    4298:	be 01       	movw	r22, r28
    429a:	6f 5e       	subi	r22, 0xEF	; 239
    429c:	7f 4f       	sbci	r23, 0xFF	; 255
    429e:	c8 01       	movw	r24, r16
    42a0:	0e d5       	rcall	.+2588   	; 0x4cbe <_ZN11EthernetUDP4readEPhj>
    42a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    42a4:	98 89       	ldd	r25, Y+16	; 0x10
    42a6:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    42a8:	91 40       	sbci	r25, 0x01	; 1
    42aa:	49 f4       	brne	.+18     	; 0x42be <__stack+0x1bf>
    42ac:	ed 84       	ldd	r14, Y+13	; 0x0d
    42ae:	fe 84       	ldd	r15, Y+14	; 0x0e
    42b0:	fe 24       	eor	r15, r14
    42b2:	ef 24       	eor	r14, r15
    42b4:	fe 24       	eor	r15, r14
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	e8 16       	cp	r14, r24
    42ba:	f1 04       	cpc	r15, r1
    42bc:	19 f0       	breq	.+6      	; 0x42c4 <__stack+0x1c5>
    42be:	e1 2c       	mov	r14, r1
    42c0:	f1 2c       	mov	r15, r1
    42c2:	14 c0       	rjmp	.+40     	; 0x42ec <__stack+0x1ed>
    42c4:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    42c6:	9a 89       	ldd	r25, Y+18	; 0x12
    42c8:	81 15       	cp	r24, r1
    42ca:	94 40       	sbci	r25, 0x04	; 4
    42cc:	39 f0       	breq	.+14     	; 0x42dc <__stack+0x1dd>
    42ce:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    42d0:	8b d4       	rcall	.+2326   	; 0x4be8 <_ZN11EthernetUDP5flushEv>
    42d2:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    42d4:	e4 2e       	mov	r14, r20
    42d6:	ff 24       	eor	r15, r15
    42d8:	fa 94       	dec	r15
    42da:	28 c0       	rjmp	.+80     	; 0x432c <__stack+0x22d>
    42dc:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    42de:	6e 5f       	subi	r22, 0xFE	; 254
    42e0:	7f 4f       	sbci	r23, 0xFF	; 255
    42e2:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    42e4:	50 e0       	ldi	r21, 0x00	; 0
    42e6:	c8 01       	movw	r24, r16
    42e8:	ea d4       	rcall	.+2516   	; 0x4cbe <_ZN11EthernetUDP4readEPhj>
    42ea:	20 c0       	rjmp	.+64     	; 0x432c <__stack+0x22d>
            return SUCCESS;
    42ec:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    42ee:	9a 89       	ldd	r25, Y+18	; 0x12
    42f0:	98 27       	eor	r25, r24
    42f2:	89 27       	eor	r24, r25
    42f4:	98 27       	eor	r25, r24
    42f6:	e8 16       	cp	r14, r24
    42f8:	f9 06       	cpc	r15, r25
    42fa:	30 f4       	brcc	.+12     	; 0x4308 <__stack+0x209>
    42fc:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    42fe:	b7 d4       	rcall	.+2414   	; 0x4c6e <_ZN11EthernetUDP4readEv>
    4300:	ff ef       	ldi	r31, 0xFF	; 255
    4302:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    4304:	ff 0a       	sbc	r15, r31
    4306:	f2 cf       	rjmp	.-28     	; 0x42ec <__stack+0x1ed>
    4308:	2f ef       	ldi	r18, 0xFF	; 255
    430a:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    430c:	b2 0a       	sbc	r11, r18
    430e:	ca 14       	cp	r12, r10
    4310:	db 04       	cpc	r13, r11
    4312:	09 f0       	breq	.+2      	; 0x4316 <__stack+0x217>
    4314:	8d cf       	rjmp	.-230    	; 0x4230 <__stack+0x131>
    4316:	c8 01       	movw	r24, r16
    4318:	67 d4       	rcall	.+2254   	; 0x4be8 <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    431a:	36 ef       	ldi	r19, 0xF6	; 246
    431c:	e3 2e       	mov	r14, r19
    431e:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    4320:	fa 94       	dec	r15
    4322:	04 c0       	rjmp	.+8      	; 0x432c <__stack+0x22d>
    4324:	8d ef       	ldi	r24, 0xFD	; 253
    4326:	e8 2e       	mov	r14, r24
    4328:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    432a:	fa 94       	dec	r15
    432c:	c7 01       	movw	r24, r14
    432e:	63 96       	adiw	r28, 0x13	; 19
    4330:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    4332:	f8 94       	cli
    4334:	de bf       	out	0x3e, r29	; 62
    4336:	0f be       	out	0x3f, r0	; 63
    4338:	cd bf       	out	0x3d, r28	; 61
    433a:	df 91       	pop	r29
    433c:	cf 91       	pop	r28
    433e:	1f 91       	pop	r17
    4340:	0f 91       	pop	r16
    4342:	ff 90       	pop	r15
    4344:	ef 90       	pop	r14
    4346:	df 90       	pop	r13
    4348:	cf 90       	pop	r12
    434a:	bf 90       	pop	r11
    434c:	af 90       	pop	r10
    434e:	9f 90       	pop	r9
    4350:	8f 90       	pop	r8
    4352:	7f 90       	pop	r7
    4354:	6f 90       	pop	r6
    4356:	5f 90       	pop	r5
    4358:	4f 90       	pop	r4
    435a:	3f 90       	pop	r3
    435c:	2f 90       	pop	r2
    435e:	08 95       	ret

00004360 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    4360:	8f 92       	push	r8
    4362:	9f 92       	push	r9
    4364:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    4366:	bf 92       	push	r11
    4368:	cf 92       	push	r12
    436a:	df 92       	push	r13
    436c:	ef 92       	push	r14
    436e:	ff 92       	push	r15
    4370:	0f 93       	push	r16
    4372:	1f 93       	push	r17
    4374:	cf 93       	push	r28
    4376:	df 93       	push	r29
    4378:	00 d0       	rcall	.+0      	; 0x437a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    437a:	00 d0       	rcall	.+0      	; 0x437c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    437c:	00 d0       	rcall	.+0      	; 0x437e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    437e:	cd b7       	in	r28, 0x3d	; 61
    4380:	de b7       	in	r29, 0x3e	; 62
    4382:	7c 01       	movw	r14, r24
    4384:	4b 01       	movw	r8, r22
    4386:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    4388:	9e dd       	rcall	.-1220   	; 0x3ec6 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    438a:	8c 01       	movw	r16, r24
    438c:	89 2b       	or	r24, r25
    438e:	09 f0       	breq	.+2      	; 0x4392 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    4390:	57 c0       	rjmp	.+174    	; 0x4440 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    4392:	f7 01       	movw	r30, r14
    4394:	42 81       	ldd	r20, Z+2	; 0x02
    4396:	53 81       	ldd	r21, Z+3	; 0x03
    4398:	64 81       	ldd	r22, Z+4	; 0x04
    439a:	75 81       	ldd	r23, Z+5	; 0x05
    439c:	80 91 4f 0d 	lds	r24, 0x0D4F	; 0x800d4f <_ZL11INADDR_NONE+0x2>
    43a0:	90 91 50 0d 	lds	r25, 0x0D50	; 0x800d50 <_ZL11INADDR_NONE+0x3>
    43a4:	a0 91 51 0d 	lds	r26, 0x0D51	; 0x800d51 <_ZL11INADDR_NONE+0x4>
    43a8:	b0 91 52 0d 	lds	r27, 0x0D52	; 0x800d52 <_ZL11INADDR_NONE+0x5>
    43ac:	48 17       	cp	r20, r24
    43ae:	59 07       	cpc	r21, r25
    43b0:	6a 07       	cpc	r22, r26
    43b2:	7b 07       	cpc	r23, r27
    43b4:	09 f4       	brne	.+2      	; 0x43b8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    43b6:	47 c0       	rjmp	.+142    	; 0x4446 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    43b8:	0e 94 07 3b 	call	0x760e	; 0x760e <millis>
    43bc:	67 01       	movw	r12, r14
    43be:	f8 e0       	ldi	r31, 0x08	; 8
    43c0:	cf 0e       	add	r12, r31
    43c2:	d1 1c       	adc	r13, r1
    43c4:	6f 70       	andi	r22, 0x0F	; 15
    43c6:	77 27       	eor	r23, r23
    43c8:	7c 5f       	subi	r23, 0xFC	; 252
    43ca:	c6 01       	movw	r24, r12
    43cc:	ae d4       	rcall	.+2396   	; 0x4d2a <_ZN11EthernetUDP5beginEj>
    43ce:	81 30       	cpi	r24, 0x01	; 1
    43d0:	09 f0       	breq	.+2      	; 0x43d4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x74>
    43d2:	3b c0       	rjmp	.+118    	; 0x444a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    43d4:	88 e6       	ldi	r24, 0x68	; 104
    43d6:	9a e0       	ldi	r25, 0x0A	; 10
    43d8:	9a 83       	std	Y+2, r25	; 0x02
    43da:	89 83       	std	Y+1, r24	; 0x01
    43dc:	f7 01       	movw	r30, r14
    43de:	82 81       	ldd	r24, Z+2	; 0x02
    43e0:	93 81       	ldd	r25, Z+3	; 0x03
    43e2:	a4 81       	ldd	r26, Z+4	; 0x04
    43e4:	b5 81       	ldd	r27, Z+5	; 0x05
    43e6:	8b 83       	std	Y+3, r24	; 0x03
    43e8:	9c 83       	std	Y+4, r25	; 0x04
    43ea:	ad 83       	std	Y+5, r26	; 0x05
    43ec:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    43ee:	45 e3       	ldi	r20, 0x35	; 53
    43f0:	50 e0       	ldi	r21, 0x00	; 0
    43f2:	be 01       	movw	r22, r28
    43f4:	6f 5f       	subi	r22, 0xFF	; 255
    43f6:	7f 4f       	sbci	r23, 0xFF	; 255
    43f8:	c6 01       	movw	r24, r12
    43fa:	1c d4       	rcall	.+2104   	; 0x4c34 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    43fc:	89 2b       	or	r24, r25
    43fe:	19 f4       	brne	.+6      	; 0x4406 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa6>
    4400:	00 e0       	ldi	r16, 0x00	; 0
    4402:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    4404:	1a c0       	rjmp	.+52     	; 0x443a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    4406:	b4 01       	movw	r22, r8
    4408:	c7 01       	movw	r24, r14
                if (ret != 0)
    440a:	a8 dd       	rcall	.-1200   	; 0x3f5c <_ZN9DNSClient12BuildRequestEPKc>
    440c:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    440e:	c1 f3       	breq	.-16     	; 0x4400 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    4410:	c6 01       	movw	r24, r12
    4412:	17 d4       	rcall	.+2094   	; 0x4c42 <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    4414:	89 2b       	or	r24, r25
    4416:	a1 f3       	breq	.-24     	; 0x4400 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    4418:	83 e0       	ldi	r24, 0x03	; 3
    441a:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    441c:	91 2c       	mov	r9, r1
    441e:	a5 01       	movw	r20, r10
    4420:	68 e8       	ldi	r22, 0x88	; 136
    4422:	73 e1       	ldi	r23, 0x13	; 19
    4424:	c7 01       	movw	r24, r14
    4426:	3b de       	rcall	.-906    	; 0x409e <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    4428:	8c 01       	movw	r16, r24
    442a:	21 e0       	ldi	r18, 0x01	; 1
    442c:	82 1a       	sub	r8, r18
    442e:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    4430:	21 f0       	breq	.+8      	; 0x443a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    4432:	0f 3f       	cpi	r16, 0xFF	; 255
    4434:	ff ef       	ldi	r31, 0xFF	; 255
    4436:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    4438:	91 f3       	breq	.-28     	; 0x441e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbe>
    443a:	c6 01       	movw	r24, r12
    443c:	e7 d3       	rcall	.+1998   	; 0x4c0c <_ZN11EthernetUDP4stopEv>
    443e:	05 c0       	rjmp	.+10     	; 0x444a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    4440:	01 e0       	ldi	r16, 0x01	; 1
    4442:	10 e0       	ldi	r17, 0x00	; 0
    4444:	02 c0       	rjmp	.+4      	; 0x444a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    4446:	0e ef       	ldi	r16, 0xFE	; 254
    4448:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    444a:	c8 01       	movw	r24, r16
    444c:	26 96       	adiw	r28, 0x06	; 6
    444e:	0f b6       	in	r0, 0x3f	; 63
    4450:	f8 94       	cli
    4452:	de bf       	out	0x3e, r29	; 62
    4454:	0f be       	out	0x3f, r0	; 63
    4456:	cd bf       	out	0x3d, r28	; 61
    4458:	df 91       	pop	r29
    445a:	cf 91       	pop	r28
    445c:	1f 91       	pop	r17
    445e:	0f 91       	pop	r16
    4460:	ff 90       	pop	r15
    4462:	ef 90       	pop	r14
    4464:	df 90       	pop	r13
    4466:	cf 90       	pop	r12
    4468:	bf 90       	pop	r11
    446a:	af 90       	pop	r10
    446c:	9f 90       	pop	r9
    446e:	8f 90       	pop	r8
    4470:	08 95       	ret

00004472 <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    4472:	24 e0       	ldi	r18, 0x04	; 4
    4474:	30 e0       	ldi	r19, 0x00	; 0
    4476:	ac 01       	movw	r20, r24
    4478:	64 e0       	ldi	r22, 0x04	; 4
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	4d c7       	rjmp	.+3738   	; 0x531a <_ZN10W5500Class5writeEjhPKhj>

00004480 <_ZN10W5500Class9writeSUBREPh>:
    4480:	24 e0       	ldi	r18, 0x04	; 4
    4482:	30 e0       	ldi	r19, 0x00	; 0
    4484:	ac 01       	movw	r20, r24
    4486:	64 e0       	ldi	r22, 0x04	; 4
    4488:	85 e0       	ldi	r24, 0x05	; 5
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	46 c7       	rjmp	.+3724   	; 0x531a <_ZN10W5500Class5writeEjhPKhj>

0000448e <_ZN10W5500Class9writeSHAREPh>:
    448e:	26 e0       	ldi	r18, 0x06	; 6
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	ac 01       	movw	r20, r24
    4494:	64 e0       	ldi	r22, 0x04	; 4
    4496:	89 e0       	ldi	r24, 0x09	; 9
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	3f c7       	rjmp	.+3710   	; 0x531a <_ZN10W5500Class5writeEjhPKhj>

0000449c <_ZN10W5500Class9writeSIPREPh>:
    449c:	24 e0       	ldi	r18, 0x04	; 4
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	ac 01       	movw	r20, r24
    44a2:	64 e0       	ldi	r22, 0x04	; 4
    44a4:	8f e0       	ldi	r24, 0x0F	; 15
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	38 c7       	rjmp	.+3696   	; 0x531a <_ZN10W5500Class5writeEjhPKhj>

000044aa <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    44aa:	8f 92       	push	r8
    44ac:	9f 92       	push	r9
    44ae:	af 92       	push	r10
    44b0:	bf 92       	push	r11
    44b2:	cf 92       	push	r12
    44b4:	df 92       	push	r13
    44b6:	ef 92       	push	r14
    44b8:	ff 92       	push	r15
    44ba:	0f 93       	push	r16
    44bc:	1f 93       	push	r17
    44be:	cf 93       	push	r28
    44c0:	df 93       	push	r29
    44c2:	4c 01       	movw	r8, r24
    44c4:	5b 01       	movw	r10, r22
    44c6:	6a 01       	movw	r12, r20
    44c8:	e9 01       	movw	r28, r18
    44ca:	fc 01       	movw	r30, r24
    44cc:	64 85       	ldd	r22, Z+12	; 0x0c
    44ce:	83 e9       	ldi	r24, 0x93	; 147
    44d0:	9d e0       	ldi	r25, 0x0D	; 13
    44d2:	6f d7       	rcall	.+3806   	; 0x53b2 <_ZN10W5500Class4initEh>
    44d4:	c5 01       	movw	r24, r10
    44d6:	db df       	rcall	.-74     	; 0x448e <_ZN10W5500Class9writeSHAREPh>
    44d8:	c6 01       	movw	r24, r12
    44da:	02 96       	adiw	r24, 0x02	; 2
    44dc:	df df       	rcall	.-66     	; 0x449c <_ZN10W5500Class9writeSIPREPh>
    44de:	c8 01       	movw	r24, r16
    44e0:	02 96       	adiw	r24, 0x02	; 2
    44e2:	c7 df       	rcall	.-114    	; 0x4472 <_ZN10W5500Class8writeGAREPh>
    44e4:	c7 01       	movw	r24, r14
    44e6:	02 96       	adiw	r24, 0x02	; 2
    44e8:	cb df       	rcall	.-106    	; 0x4480 <_ZN10W5500Class9writeSUBREPh>
    44ea:	8a 81       	ldd	r24, Y+2	; 0x02
    44ec:	9b 81       	ldd	r25, Y+3	; 0x03
    44ee:	ac 81       	ldd	r26, Y+4	; 0x04
    44f0:	bd 81       	ldd	r27, Y+5	; 0x05
    44f2:	f4 01       	movw	r30, r8
    44f4:	82 83       	std	Z+2, r24	; 0x02
    44f6:	93 83       	std	Z+3, r25	; 0x03
    44f8:	a4 83       	std	Z+4, r26	; 0x04
    44fa:	b5 83       	std	Z+5, r27	; 0x05
    44fc:	df 91       	pop	r29
    44fe:	cf 91       	pop	r28
    4500:	1f 91       	pop	r17
    4502:	0f 91       	pop	r16
    4504:	ff 90       	pop	r15
    4506:	ef 90       	pop	r14
    4508:	df 90       	pop	r13
    450a:	cf 90       	pop	r12
    450c:	bf 90       	pop	r11
    450e:	af 90       	pop	r10
    4510:	9f 90       	pop	r9
    4512:	8f 90       	pop	r8
    4514:	08 95       	ret

00004516 <_ZN13EthernetClass11dnsServerIPEv>:
    4516:	28 e6       	ldi	r18, 0x68	; 104
    4518:	3a e0       	ldi	r19, 0x0A	; 10
    451a:	fc 01       	movw	r30, r24
    451c:	31 83       	std	Z+1, r19	; 0x01
    451e:	20 83       	st	Z, r18
    4520:	fb 01       	movw	r30, r22
    4522:	42 81       	ldd	r20, Z+2	; 0x02
    4524:	53 81       	ldd	r21, Z+3	; 0x03
    4526:	64 81       	ldd	r22, Z+4	; 0x04
    4528:	75 81       	ldd	r23, Z+5	; 0x05
    452a:	fc 01       	movw	r30, r24
    452c:	42 83       	std	Z+2, r20	; 0x02
    452e:	53 83       	std	Z+3, r21	; 0x03
    4530:	64 83       	std	Z+4, r22	; 0x04
    4532:	75 83       	std	Z+5, r23	; 0x05
    4534:	08 95       	ret

00004536 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    4536:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4538:	00 e0       	ldi	r16, 0x00	; 0
    453a:	20 e0       	ldi	r18, 0x00	; 0
    453c:	40 e0       	ldi	r20, 0x00	; 0
    453e:	60 e0       	ldi	r22, 0x00	; 0
    4540:	80 e7       	ldi	r24, 0x70	; 112
    4542:	9d e0       	ldi	r25, 0x0D	; 13
    4544:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    4548:	83 e5       	ldi	r24, 0x53	; 83
    454a:	9d e0       	ldi	r25, 0x0D	; 13
    454c:	0e 94 60 39 	call	0x72c0	; 0x72c0 <_ZN9IPAddressC1Ev>
    4550:	e3 e5       	ldi	r30, 0x53	; 83
    4552:	fd e0       	ldi	r31, 0x0D	; 13
    4554:	13 86       	std	Z+11, r1	; 0x0b
    4556:	12 86       	std	Z+10, r1	; 0x0a
    4558:	8a e0       	ldi	r24, 0x0A	; 10
    455a:	84 87       	std	Z+12, r24	; 0x0c
    455c:	0f 91       	pop	r16
    455e:	08 95       	ret

00004560 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    4560:	80 e0       	ldi	r24, 0x00	; 0
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	08 95       	ret

00004566 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    4566:	08 95       	ret

00004568 <_ZN14EthernetClientneERKS_>:
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    4568:	dc 01       	movw	r26, r24
    456a:	ed 91       	ld	r30, X+
    456c:	fc 91       	ld	r31, X
    456e:	02 8c       	ldd	r0, Z+26	; 0x1a
    4570:	f3 8d       	ldd	r31, Z+27	; 0x1b
    4572:	e0 2d       	mov	r30, r0
    4574:	09 95       	icall
    4576:	91 e0       	ldi	r25, 0x01	; 1
    4578:	89 27       	eor	r24, r25
    457a:	08 95       	ret

0000457c <_ZN14EthernetClient5writeEh>:
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    457c:	cf 93       	push	r28
    457e:	df 93       	push	r29
    4580:	1f 92       	push	r1
    4582:	cd b7       	in	r28, 0x3d	; 61
    4584:	de b7       	in	r29, 0x3e	; 62
    4586:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    4588:	dc 01       	movw	r26, r24
    458a:	ed 91       	ld	r30, X+
    458c:	fc 91       	ld	r31, X
    458e:	02 80       	ldd	r0, Z+2	; 0x02
    4590:	f3 81       	ldd	r31, Z+3	; 0x03
    4592:	e0 2d       	mov	r30, r0
    4594:	41 e0       	ldi	r20, 0x01	; 1
    4596:	50 e0       	ldi	r21, 0x00	; 0
    4598:	be 01       	movw	r22, r28
    459a:	6f 5f       	subi	r22, 0xFF	; 255
    459c:	7f 4f       	sbci	r23, 0xFF	; 255
    459e:	09 95       	icall
}
    45a0:	0f 90       	pop	r0
    45a2:	df 91       	pop	r29
    45a4:	cf 91       	pop	r28
    45a6:	08 95       	ret

000045a8 <_ZN14EthernetClientcvbEv>:

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
    45a8:	21 e0       	ldi	r18, 0x01	; 1
    45aa:	fc 01       	movw	r30, r24
    45ac:	84 85       	ldd	r24, Z+12	; 0x0c
    45ae:	88 30       	cpi	r24, 0x08	; 8
    45b0:	09 f4       	brne	.+2      	; 0x45b4 <_ZN14EthernetClientcvbEv+0xc>
    45b2:	20 e0       	ldi	r18, 0x00	; 0
}
    45b4:	82 2f       	mov	r24, r18
    45b6:	08 95       	ret

000045b8 <_ZN14EthernetClienteqERKS_>:

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
    45b8:	fc 01       	movw	r30, r24
    45ba:	94 85       	ldd	r25, Z+12	; 0x0c
    45bc:	fb 01       	movw	r30, r22
    45be:	84 85       	ldd	r24, Z+12	; 0x0c
    45c0:	98 13       	cpse	r25, r24
    45c2:	03 c0       	rjmp	.+6      	; 0x45ca <_ZN14EthernetClienteqERKS_+0x12>
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	98 30       	cpi	r25, 0x08	; 8
    45c8:	09 f4       	brne	.+2      	; 0x45cc <_ZN14EthernetClienteqERKS_+0x14>
    45ca:	80 e0       	ldi	r24, 0x00	; 0
}
    45cc:	08 95       	ret

000045ce <_ZN14EthernetClient7connectEPKcj>:
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    45ce:	cf 92       	push	r12
    45d0:	df 92       	push	r13
    45d2:	ef 92       	push	r14
    45d4:	ff 92       	push	r15
    45d6:	0f 93       	push	r16
    45d8:	1f 93       	push	r17
    45da:	cf 93       	push	r28
    45dc:	df 93       	push	r29
    45de:	cd b7       	in	r28, 0x3d	; 61
    45e0:	de b7       	in	r29, 0x3e	; 62
    45e2:	af 97       	sbiw	r28, 0x2f	; 47
    45e4:	0f b6       	in	r0, 0x3f	; 63
    45e6:	f8 94       	cli
    45e8:	de bf       	out	0x3e, r29	; 62
    45ea:	0f be       	out	0x3f, r0	; 63
    45ec:	cd bf       	out	0x3d, r28	; 61
    45ee:	8c 01       	movw	r16, r24
    45f0:	6b 01       	movw	r12, r22
    45f2:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    45f4:	ce 01       	movw	r24, r28
    45f6:	01 96       	adiw	r24, 0x01	; 1
    45f8:	0e 94 60 39 	call	0x72c0	; 0x72c0 <_ZN9IPAddressC1Ev>
    45fc:	ce 01       	movw	r24, r28
    45fe:	09 96       	adiw	r24, 0x09	; 9
    4600:	14 d4       	rcall	.+2088   	; 0x4e2a <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    4602:	ce 01       	movw	r24, r28
    4604:	8a 96       	adiw	r24, 0x2a	; 42
    4606:	0e 94 60 39 	call	0x72c0	; 0x72c0 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    460a:	63 e5       	ldi	r22, 0x53	; 83
    460c:	7d e0       	ldi	r23, 0x0D	; 13
    460e:	ce 01       	movw	r24, r28
    4610:	84 96       	adiw	r24, 0x24	; 36
    4612:	81 df       	rcall	.-254    	; 0x4516 <_ZN13EthernetClass11dnsServerIPEv>
    4614:	be 01       	movw	r22, r28
    4616:	6c 5d       	subi	r22, 0xDC	; 220
    4618:	7f 4f       	sbci	r23, 0xFF	; 255
    461a:	ce 01       	movw	r24, r28
    461c:	01 96       	adiw	r24, 0x01	; 1
    461e:	46 dc       	rcall	.-1908   	; 0x3eac <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    4620:	ae 01       	movw	r20, r28
    4622:	46 5d       	subi	r20, 0xD6	; 214
    4624:	5f 4f       	sbci	r21, 0xFF	; 255
    4626:	b6 01       	movw	r22, r12
    4628:	ce 01       	movw	r24, r28
    462a:	01 96       	adiw	r24, 0x01	; 1
    462c:	99 de       	rcall	.-718    	; 0x4360 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    462e:	81 30       	cpi	r24, 0x01	; 1
    4630:	91 05       	cpc	r25, r1
    4632:	c1 f4       	brne	.+48     	; 0x4664 <_ZN14EthernetClient7connectEPKcj+0x96>
    return connect(remote_addr, port);
    4634:	d8 01       	movw	r26, r16
    4636:	ed 91       	ld	r30, X+
    4638:	fc 91       	ld	r31, X
    463a:	06 84       	ldd	r0, Z+14	; 0x0e
    463c:	f7 85       	ldd	r31, Z+15	; 0x0f
    463e:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4640:	88 e6       	ldi	r24, 0x68	; 104
    4642:	9a e0       	ldi	r25, 0x0A	; 10
    4644:	9d a3       	std	Y+37, r25	; 0x25
    4646:	8c a3       	std	Y+36, r24	; 0x24
    4648:	8c a5       	ldd	r24, Y+44	; 0x2c
    464a:	9d a5       	ldd	r25, Y+45	; 0x2d
    464c:	ae a5       	ldd	r26, Y+46	; 0x2e
    464e:	bf a5       	ldd	r27, Y+47	; 0x2f
    4650:	8e a3       	std	Y+38, r24	; 0x26
    4652:	9f a3       	std	Y+39, r25	; 0x27
    4654:	a8 a7       	std	Y+40, r26	; 0x28
    4656:	b9 a7       	std	Y+41, r27	; 0x29
    4658:	a7 01       	movw	r20, r14
    465a:	be 01       	movw	r22, r28
    465c:	6c 5d       	subi	r22, 0xDC	; 220
    465e:	7f 4f       	sbci	r23, 0xFF	; 255
    4660:	c8 01       	movw	r24, r16
    4662:	09 95       	icall
  } else {
    return ret;
  }
}
    4664:	af 96       	adiw	r28, 0x2f	; 47
    4666:	0f b6       	in	r0, 0x3f	; 63
    4668:	f8 94       	cli
    466a:	de bf       	out	0x3e, r29	; 62
    466c:	0f be       	out	0x3f, r0	; 63
    466e:	cd bf       	out	0x3d, r28	; 61
    4670:	df 91       	pop	r29
    4672:	cf 91       	pop	r28
    4674:	1f 91       	pop	r17
    4676:	0f 91       	pop	r16
    4678:	ff 90       	pop	r15
    467a:	ef 90       	pop	r14
    467c:	df 90       	pop	r13
    467e:	cf 90       	pop	r12
    4680:	08 95       	ret

00004682 <_ZN14EthernetClient5writeEPKhj>:

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    4682:	0f 93       	push	r16
    4684:	1f 93       	push	r17
    4686:	cf 93       	push	r28
    4688:	df 93       	push	r29
    468a:	8c 01       	movw	r16, r24
    468c:	d4 2f       	mov	r29, r20
    468e:	c5 2f       	mov	r28, r21
  if (_sock == MAX_SOCK_NUM) {
    4690:	fc 01       	movw	r30, r24
    4692:	84 85       	ldd	r24, Z+12	; 0x0c
    4694:	88 30       	cpi	r24, 0x08	; 8
    4696:	41 f4       	brne	.+16     	; 0x46a8 <_ZN14EthernetClient5writeEPKhj+0x26>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    4698:	81 e0       	ldi	r24, 0x01	; 1
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	f8 01       	movw	r30, r16
    469e:	93 83       	std	Z+3, r25	; 0x03
    46a0:	82 83       	std	Z+2, r24	; 0x02
    setWriteError();
    return 0;
    46a2:	80 e0       	ldi	r24, 0x00	; 0
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	05 c0       	rjmp	.+10     	; 0x46b2 <_ZN14EthernetClient5writeEPKhj+0x30>
  }
  if (!send(_sock, buf, size)) {
    46a8:	0c d5       	rcall	.+2584   	; 0x50c2 <_Z4sendhPKhj>
    46aa:	89 2b       	or	r24, r25
    46ac:	a9 f3       	breq	.-22     	; 0x4698 <_ZN14EthernetClient5writeEPKhj+0x16>
    setWriteError();
    return 0;
  }
  return size;
    46ae:	8d 2f       	mov	r24, r29
    46b0:	9c 2f       	mov	r25, r28
}
    46b2:	df 91       	pop	r29
    46b4:	cf 91       	pop	r28
    46b6:	1f 91       	pop	r17
    46b8:	0f 91       	pop	r16
    46ba:	08 95       	ret

000046bc <_ZN14EthernetClient9availableEv>:

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    46bc:	fc 01       	movw	r30, r24
    46be:	64 85       	ldd	r22, Z+12	; 0x0c
    46c0:	68 30       	cpi	r22, 0x08	; 8
    46c2:	19 f0       	breq	.+6      	; 0x46ca <_ZN14EthernetClient9availableEv+0xe>
    return w5500.getRXReceivedSize(_sock);
    46c4:	83 e9       	ldi	r24, 0x93	; 147
    46c6:	9d e0       	ldi	r25, 0x0D	; 13
    46c8:	e9 c6       	rjmp	.+3538   	; 0x549c <_ZN10W5500Class17getRXReceivedSizeEh>
  return 0;
}
    46ca:	80 e0       	ldi	r24, 0x00	; 0
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	08 95       	ret

000046d0 <_ZN14EthernetClient4readEv>:

int EthernetClient::read() {
    46d0:	cf 93       	push	r28
    46d2:	df 93       	push	r29
    46d4:	1f 92       	push	r1
    46d6:	cd b7       	in	r28, 0x3d	; 61
    46d8:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    46da:	41 e0       	ldi	r20, 0x01	; 1
    46dc:	50 e0       	ldi	r21, 0x00	; 0
    46de:	be 01       	movw	r22, r28
    46e0:	6f 5f       	subi	r22, 0xFF	; 255
    46e2:	7f 4f       	sbci	r23, 0xFF	; 255
    46e4:	fc 01       	movw	r30, r24
    46e6:	84 85       	ldd	r24, Z+12	; 0x0c
    46e8:	34 d5       	rcall	.+2664   	; 0x5152 <_Z4recvhPhi>
    46ea:	18 16       	cp	r1, r24
    46ec:	19 06       	cpc	r1, r25
    46ee:	1c f4       	brge	.+6      	; 0x46f6 <_ZN14EthernetClient4readEv+0x26>
  {
    // recv worked
    return b;
    46f0:	89 81       	ldd	r24, Y+1	; 0x01
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	02 c0       	rjmp	.+4      	; 0x46fa <_ZN14EthernetClient4readEv+0x2a>
  }
  else
  {
    // No data available
    return -1;
    46f6:	8f ef       	ldi	r24, 0xFF	; 255
    46f8:	9f ef       	ldi	r25, 0xFF	; 255
  }
}
    46fa:	0f 90       	pop	r0
    46fc:	df 91       	pop	r29
    46fe:	cf 91       	pop	r28
    4700:	08 95       	ret

00004702 <_ZN14EthernetClient4readEPhj>:

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    4702:	fc 01       	movw	r30, r24
    4704:	84 85       	ldd	r24, Z+12	; 0x0c
    4706:	25 c5       	rjmp	.+2634   	; 0x5152 <_Z4recvhPhi>

00004708 <_ZN14EthernetClient4peekEv>:
}

int EthernetClient::peek() {
    4708:	0f 93       	push	r16
    470a:	1f 93       	push	r17
    470c:	cf 93       	push	r28
    470e:	df 93       	push	r29
    4710:	1f 92       	push	r1
    4712:	cd b7       	in	r28, 0x3d	; 61
    4714:	de b7       	in	r29, 0x3e	; 62
    4716:	8c 01       	movw	r16, r24
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    4718:	dc 01       	movw	r26, r24
    471a:	ed 91       	ld	r30, X+
    471c:	fc 91       	ld	r31, X
    471e:	00 84       	ldd	r0, Z+8	; 0x08
    4720:	f1 85       	ldd	r31, Z+9	; 0x09
    4722:	e0 2d       	mov	r30, r0
    4724:	09 95       	icall
    4726:	89 2b       	or	r24, r25
    4728:	49 f0       	breq	.+18     	; 0x473c <_ZN14EthernetClient4peekEv+0x34>
    return -1;
  ::peek(_sock, &b);
    472a:	be 01       	movw	r22, r28
    472c:	6f 5f       	subi	r22, 0xFF	; 255
    472e:	7f 4f       	sbci	r23, 0xFF	; 255
    4730:	f8 01       	movw	r30, r16
    4732:	84 85       	ldd	r24, Z+12	; 0x0c
    4734:	4f d5       	rcall	.+2718   	; 0x51d4 <_Z4peekhPh>
  return b;
    4736:	89 81       	ldd	r24, Y+1	; 0x01
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	02 c0       	rjmp	.+4      	; 0x4740 <_ZN14EthernetClient4peekEv+0x38>

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    473c:	8f ef       	ldi	r24, 0xFF	; 255
    473e:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    4740:	0f 90       	pop	r0
    4742:	df 91       	pop	r29
    4744:	cf 91       	pop	r28
    4746:	1f 91       	pop	r17
    4748:	0f 91       	pop	r16
    474a:	08 95       	ret

0000474c <_ZN14EthernetClient5flushEv>:

void EthernetClient::flush() {
  ::flush(_sock);
    474c:	fc 01       	movw	r30, r24
    474e:	84 85       	ldd	r24, Z+12	; 0x0c
    4750:	4e c5       	rjmp	.+2716   	; 0x51ee <_Z5flushh>

00004752 <_ZN14EthernetClientC1Ev>:
#include "EthernetServer.h"
#include "Dns.h"

uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
    4752:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    4754:	13 82       	std	Z+3, r1	; 0x03
    4756:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    4758:	88 ee       	ldi	r24, 0xE8	; 232
    475a:	93 e0       	ldi	r25, 0x03	; 3
    475c:	a0 e0       	ldi	r26, 0x00	; 0
    475e:	b0 e0       	ldi	r27, 0x00	; 0
    4760:	84 83       	std	Z+4, r24	; 0x04
    4762:	95 83       	std	Z+5, r25	; 0x05
    4764:	a6 83       	std	Z+6, r26	; 0x06
    4766:	b7 83       	std	Z+7, r27	; 0x07
    4768:	86 ed       	ldi	r24, 0xD6	; 214
    476a:	99 e0       	ldi	r25, 0x09	; 9
    476c:	91 83       	std	Z+1, r25	; 0x01
    476e:	80 83       	st	Z, r24
    4770:	88 e0       	ldi	r24, 0x08	; 8
    4772:	84 87       	std	Z+12, r24	; 0x0c
    4774:	08 95       	ret

00004776 <_ZN14EthernetClientC1Eh>:
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    4776:	fc 01       	movw	r30, r24
    4778:	13 82       	std	Z+3, r1	; 0x03
    477a:	12 82       	std	Z+2, r1	; 0x02
    477c:	88 ee       	ldi	r24, 0xE8	; 232
    477e:	93 e0       	ldi	r25, 0x03	; 3
    4780:	a0 e0       	ldi	r26, 0x00	; 0
    4782:	b0 e0       	ldi	r27, 0x00	; 0
    4784:	84 83       	std	Z+4, r24	; 0x04
    4786:	95 83       	std	Z+5, r25	; 0x05
    4788:	a6 83       	std	Z+6, r26	; 0x06
    478a:	b7 83       	std	Z+7, r27	; 0x07
    478c:	86 ed       	ldi	r24, 0xD6	; 214
    478e:	99 e0       	ldi	r25, 0x09	; 9
    4790:	91 83       	std	Z+1, r25	; 0x01
    4792:	80 83       	st	Z, r24
    4794:	64 87       	std	Z+12, r22	; 0x0c
    4796:	08 95       	ret

00004798 <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    4798:	fc 01       	movw	r30, r24
    479a:	64 85       	ldd	r22, Z+12	; 0x0c
    479c:	68 30       	cpi	r22, 0x08	; 8
    479e:	39 f0       	breq	.+14     	; 0x47ae <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    47a0:	62 95       	swap	r22
    47a2:	66 0f       	add	r22, r22
    47a4:	60 7e       	andi	r22, 0xE0	; 224
    47a6:	68 5f       	subi	r22, 0xF8	; 248
    47a8:	83 e0       	ldi	r24, 0x03	; 3
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	e4 c5       	rjmp	.+3016   	; 0x5376 <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    47ae:	80 e0       	ldi	r24, 0x00	; 0
    47b0:	08 95       	ret

000047b2 <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    47b2:	cf 93       	push	r28
    47b4:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    47b6:	fc 01       	movw	r30, r24
    47b8:	24 85       	ldd	r18, Z+12	; 0x0c
    47ba:	28 30       	cpi	r18, 0x08	; 8
    47bc:	c9 f0       	breq	.+50     	; 0x47f0 <_ZN14EthernetClient9connectedEv+0x3e>
    47be:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    47c0:	eb df       	rcall	.-42     	; 0x4798 <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    47c2:	84 31       	cpi	r24, 0x14	; 20
    47c4:	81 f0       	breq	.+32     	; 0x47e6 <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    47c6:	88 23       	and	r24, r24
    47c8:	71 f0       	breq	.+28     	; 0x47e6 <_ZN14EthernetClient9connectedEv+0x34>
    47ca:	88 31       	cpi	r24, 0x18	; 24
    47cc:	61 f0       	breq	.+24     	; 0x47e6 <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    47ce:	8c 31       	cpi	r24, 0x1C	; 28
    47d0:	61 f4       	brne	.+24     	; 0x47ea <_ZN14EthernetClient9connectedEv+0x38>
    47d2:	e8 81       	ld	r30, Y
    47d4:	f9 81       	ldd	r31, Y+1	; 0x01
    47d6:	00 84       	ldd	r0, Z+8	; 0x08
    47d8:	f1 85       	ldd	r31, Z+9	; 0x09
    47da:	e0 2d       	mov	r30, r0
    47dc:	ce 01       	movw	r24, r28
    47de:	09 95       	icall
    47e0:	21 e0       	ldi	r18, 0x01	; 1
    47e2:	89 2b       	or	r24, r25
    47e4:	19 f4       	brne	.+6      	; 0x47ec <_ZN14EthernetClient9connectedEv+0x3a>
    47e6:	20 e0       	ldi	r18, 0x00	; 0
    47e8:	01 c0       	rjmp	.+2      	; 0x47ec <_ZN14EthernetClient9connectedEv+0x3a>
    47ea:	21 e0       	ldi	r18, 0x01	; 1
    47ec:	82 2f       	mov	r24, r18
    47ee:	01 c0       	rjmp	.+2      	; 0x47f2 <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    47f0:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    47f2:	df 91       	pop	r29
    47f4:	cf 91       	pop	r28
    47f6:	08 95       	ret

000047f8 <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    47f8:	cf 92       	push	r12
    47fa:	df 92       	push	r13
    47fc:	ef 92       	push	r14
    47fe:	ff 92       	push	r15
    4800:	cf 93       	push	r28
    4802:	df 93       	push	r29
    4804:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    4806:	8c 85       	ldd	r24, Y+12	; 0x0c
    4808:	88 30       	cpi	r24, 0x08	; 8
    480a:	69 f1       	breq	.+90     	; 0x4866 <_ZN14EthernetClient4stopEv+0x6e>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    480c:	55 d4       	rcall	.+2218   	; 0x50b8 <_Z10disconnecth>
  unsigned long start = millis();
    480e:	0e 94 07 3b 	call	0x760e	; 0x760e <millis>
    4812:	6b 01       	movw	r12, r22
    4814:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    4816:	ce 01       	movw	r24, r28
    4818:	bf df       	rcall	.-130    	; 0x4798 <_ZN14EthernetClient6statusEv>
    481a:	88 23       	and	r24, r24
    481c:	a1 f0       	breq	.+40     	; 0x4846 <_ZN14EthernetClient4stopEv+0x4e>
    481e:	0e 94 07 3b 	call	0x760e	; 0x760e <millis>
    4822:	dc 01       	movw	r26, r24
    4824:	cb 01       	movw	r24, r22
    4826:	8c 19       	sub	r24, r12
    4828:	9d 09       	sbc	r25, r13
    482a:	ae 09       	sbc	r26, r14
    482c:	bf 09       	sbc	r27, r15
    482e:	88 3e       	cpi	r24, 0xE8	; 232
    4830:	93 40       	sbci	r25, 0x03	; 3
    4832:	a1 05       	cpc	r26, r1
    4834:	b1 05       	cpc	r27, r1
    4836:	38 f4       	brcc	.+14     	; 0x4846 <_ZN14EthernetClient4stopEv+0x4e>
    delay(1);
    4838:	61 e0       	ldi	r22, 0x01	; 1
    483a:	70 e0       	ldi	r23, 0x00	; 0
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    4844:	e8 cf       	rjmp	.-48     	; 0x4816 <_ZN14EthernetClient4stopEv+0x1e>
    4846:	ce 01       	movw	r24, r28
    4848:	a7 df       	rcall	.-178    	; 0x4798 <_ZN14EthernetClient6statusEv>
    484a:	88 23       	and	r24, r24
    close(_sock);
    484c:	11 f0       	breq	.+4      	; 0x4852 <_ZN14EthernetClient4stopEv+0x5a>
    484e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4850:	b1 d3       	rcall	.+1890   	; 0x4fb4 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    4852:	ec 85       	ldd	r30, Y+12	; 0x0c
    4854:	f0 e0       	ldi	r31, 0x00	; 0
    4856:	ee 0f       	add	r30, r30
    4858:	ff 1f       	adc	r31, r31
    485a:	e0 5a       	subi	r30, 0xA0	; 160
    485c:	f2 4f       	sbci	r31, 0xF2	; 242
    485e:	11 82       	std	Z+1, r1	; 0x01
    4860:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    4862:	88 e0       	ldi	r24, 0x08	; 8
    4864:	8c 87       	std	Y+12, r24	; 0x0c
}
    4866:	df 91       	pop	r29
    4868:	cf 91       	pop	r28
    486a:	ff 90       	pop	r15
    486c:	ef 90       	pop	r14
    486e:	df 90       	pop	r13
    4870:	cf 90       	pop	r12
    4872:	08 95       	ret

00004874 <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    4874:	cf 92       	push	r12
    4876:	df 92       	push	r13
    4878:	ff 92       	push	r15
    487a:	0f 93       	push	r16
    487c:	1f 93       	push	r17
    487e:	cf 93       	push	r28
    4880:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    4882:	fc 01       	movw	r30, r24
    4884:	24 85       	ldd	r18, Z+12	; 0x0c
    4886:	28 30       	cpi	r18, 0x08	; 8
    4888:	c1 f5       	brne	.+112    	; 0x48fa <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    488a:	6a 01       	movw	r12, r20
    488c:	8b 01       	movw	r16, r22
    488e:	ec 01       	movw	r28, r24
    4890:	f1 2c       	mov	r15, r1
    4892:	6f 2d       	mov	r22, r15
    4894:	62 95       	swap	r22
    4896:	66 0f       	add	r22, r22
    4898:	60 7e       	andi	r22, 0xE0	; 224
    489a:	68 5f       	subi	r22, 0xF8	; 248
    489c:	83 e0       	ldi	r24, 0x03	; 3
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	6a d5       	rcall	.+2772   	; 0x5376 <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    48a2:	81 11       	cpse	r24, r1
    48a4:	02 c0       	rjmp	.+4      	; 0x48aa <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    48a6:	fc 86       	std	Y+12, r15	; 0x0c
    48a8:	07 c0       	rjmp	.+14     	; 0x48b8 <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    48aa:	8b 7f       	andi	r24, 0xFB	; 251
    48ac:	88 31       	cpi	r24, 0x18	; 24
    48ae:	d9 f3       	breq	.-10     	; 0x48a6 <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    48b0:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    48b2:	f8 e0       	ldi	r31, 0x08	; 8
    48b4:	ff 12       	cpse	r15, r31
    48b6:	ed cf       	rjmp	.-38     	; 0x4892 <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    48b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    48ba:	88 30       	cpi	r24, 0x08	; 8
    48bc:	f1 f0       	breq	.+60     	; 0x48fa <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    48be:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <_ZN14EthernetClient8_srcportE>
    48c2:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <_ZN14EthernetClient8_srcportE+0x1>
    48c6:	2f 5f       	subi	r18, 0xFF	; 255
    48c8:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    48ca:	11 f4       	brne	.+4      	; 0x48d0 <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    48cc:	20 e0       	ldi	r18, 0x00	; 0
    48ce:	34 e0       	ldi	r19, 0x04	; 4
    48d0:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <_ZN14EthernetClient8_srcportE+0x1>
    48d4:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    48d8:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <_ZN14EthernetClient8_srcportE>
    48dc:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <_ZN14EthernetClient8_srcportE+0x1>
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	61 e0       	ldi	r22, 0x01	; 1
    48e4:	72 d3       	rcall	.+1764   	; 0x4fca <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    48e6:	b8 01       	movw	r22, r16
    48e8:	6e 5f       	subi	r22, 0xFE	; 254
    48ea:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    48ec:	a6 01       	movw	r20, r12
    48ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    48f0:	b0 d3       	rcall	.+1888   	; 0x5052 <_Z7connecthPhj>
    48f2:	81 11       	cpse	r24, r1
    48f4:	05 c0       	rjmp	.+10     	; 0x4900 <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    48f6:	88 e0       	ldi	r24, 0x08	; 8
    48f8:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    48fa:	80 e0       	ldi	r24, 0x00	; 0
    48fc:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    48fe:	0f c0       	rjmp	.+30     	; 0x491e <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    4900:	ce 01       	movw	r24, r28
    4902:	4a df       	rcall	.-364    	; 0x4798 <_ZN14EthernetClient6statusEv>
    4904:	87 31       	cpi	r24, 0x17	; 23
    4906:	49 f0       	breq	.+18     	; 0x491a <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    4908:	61 e0       	ldi	r22, 0x01	; 1
    490a:	70 e0       	ldi	r23, 0x00	; 0
    490c:	80 e0       	ldi	r24, 0x00	; 0
    490e:	90 e0       	ldi	r25, 0x00	; 0
    4910:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>
    if (status() == SnSR::CLOSED) {
    4914:	ce 01       	movw	r24, r28
    4916:	40 df       	rcall	.-384    	; 0x4798 <_ZN14EthernetClient6statusEv>
    4918:	ec cf       	rjmp	.-40     	; 0x48f2 <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    491a:	81 e0       	ldi	r24, 0x01	; 1
    491c:	90 e0       	ldi	r25, 0x00	; 0
}
    491e:	df 91       	pop	r29
    4920:	cf 91       	pop	r28
    4922:	1f 91       	pop	r17
    4924:	0f 91       	pop	r16
    4926:	ff 90       	pop	r15
    4928:	df 90       	pop	r13
    492a:	cf 90       	pop	r12
    492c:	08 95       	ret

0000492e <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    492e:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4930:	00 e0       	ldi	r16, 0x00	; 0
    4932:	20 e0       	ldi	r18, 0x00	; 0
    4934:	40 e0       	ldi	r20, 0x00	; 0
    4936:	60 e0       	ldi	r22, 0x00	; 0
    4938:	86 e7       	ldi	r24, 0x76	; 118
    493a:	9d e0       	ldi	r25, 0x0D	; 13
    493c:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <_ZN9IPAddressC1Ehhhh>
    4940:	0f 91       	pop	r16
    4942:	08 95       	ret

00004944 <_ZN14EthernetServer5writeEh>:
      }
    }
  }

  return EthernetClient(MAX_SOCK_NUM);
}
    4944:	cf 93       	push	r28
    4946:	df 93       	push	r29
    4948:	1f 92       	push	r1
    494a:	cd b7       	in	r28, 0x3d	; 61
    494c:	de b7       	in	r29, 0x3e	; 62
    494e:	69 83       	std	Y+1, r22	; 0x01
    4950:	dc 01       	movw	r26, r24
    4952:	ed 91       	ld	r30, X+
    4954:	fc 91       	ld	r31, X
    4956:	02 80       	ldd	r0, Z+2	; 0x02
    4958:	f3 81       	ldd	r31, Z+3	; 0x03
    495a:	e0 2d       	mov	r30, r0
    495c:	41 e0       	ldi	r20, 0x01	; 1
    495e:	50 e0       	ldi	r21, 0x00	; 0
    4960:	be 01       	movw	r22, r28
    4962:	6f 5f       	subi	r22, 0xFF	; 255
    4964:	7f 4f       	sbci	r23, 0xFF	; 255
    4966:	09 95       	icall
    4968:	0f 90       	pop	r0
    496a:	df 91       	pop	r29
    496c:	cf 91       	pop	r28
    496e:	08 95       	ret

00004970 <_ZN14EthernetServer5beginEv>:
    4970:	ef 92       	push	r14
    4972:	ff 92       	push	r15
    4974:	0f 93       	push	r16
    4976:	1f 93       	push	r17
    4978:	cf 93       	push	r28
    497a:	df 93       	push	r29
    497c:	cd b7       	in	r28, 0x3d	; 61
    497e:	de b7       	in	r29, 0x3e	; 62
    4980:	2d 97       	sbiw	r28, 0x0d	; 13
    4982:	0f b6       	in	r0, 0x3f	; 63
    4984:	f8 94       	cli
    4986:	de bf       	out	0x3e, r29	; 62
    4988:	0f be       	out	0x3f, r0	; 63
    498a:	cd bf       	out	0x3d, r28	; 61
    498c:	7c 01       	movw	r14, r24
    498e:	00 e0       	ldi	r16, 0x00	; 0
    4990:	10 e0       	ldi	r17, 0x00	; 0
    4992:	60 2f       	mov	r22, r16
    4994:	ce 01       	movw	r24, r28
    4996:	01 96       	adiw	r24, 0x01	; 1
    4998:	ee de       	rcall	.-548    	; 0x4776 <_ZN14EthernetClientC1Eh>
    499a:	ce 01       	movw	r24, r28
    499c:	01 96       	adiw	r24, 0x01	; 1
    499e:	fc de       	rcall	.-520    	; 0x4798 <_ZN14EthernetClient6statusEv>
    49a0:	81 11       	cpse	r24, r1
    49a2:	14 c0       	rjmp	.+40     	; 0x49cc <_ZN14EthernetServer5beginEv+0x5c>
    49a4:	f7 01       	movw	r30, r14
    49a6:	44 81       	ldd	r20, Z+4	; 0x04
    49a8:	55 81       	ldd	r21, Z+5	; 0x05
    49aa:	20 e0       	ldi	r18, 0x00	; 0
    49ac:	61 e0       	ldi	r22, 0x01	; 1
    49ae:	80 2f       	mov	r24, r16
    49b0:	0c d3       	rcall	.+1560   	; 0x4fca <_Z6sockethhjh>
    49b2:	80 2f       	mov	r24, r16
    49b4:	3d d3       	rcall	.+1658   	; 0x5030 <_Z6listenh>
    49b6:	f7 01       	movw	r30, r14
    49b8:	84 81       	ldd	r24, Z+4	; 0x04
    49ba:	95 81       	ldd	r25, Z+5	; 0x05
    49bc:	00 0f       	add	r16, r16
    49be:	11 1f       	adc	r17, r17
    49c0:	f8 01       	movw	r30, r16
    49c2:	e0 5a       	subi	r30, 0xA0	; 160
    49c4:	f2 4f       	sbci	r31, 0xF2	; 242
    49c6:	91 83       	std	Z+1, r25	; 0x01
    49c8:	80 83       	st	Z, r24
    49ca:	05 c0       	rjmp	.+10     	; 0x49d6 <_ZN14EthernetServer5beginEv+0x66>
    49cc:	0f 5f       	subi	r16, 0xFF	; 255
    49ce:	1f 4f       	sbci	r17, 0xFF	; 255
    49d0:	08 30       	cpi	r16, 0x08	; 8
    49d2:	11 05       	cpc	r17, r1
    49d4:	f1 f6       	brne	.-68     	; 0x4992 <_ZN14EthernetServer5beginEv+0x22>
    49d6:	2d 96       	adiw	r28, 0x0d	; 13
    49d8:	0f b6       	in	r0, 0x3f	; 63
    49da:	f8 94       	cli
    49dc:	de bf       	out	0x3e, r29	; 62
    49de:	0f be       	out	0x3f, r0	; 63
    49e0:	cd bf       	out	0x3d, r28	; 61
    49e2:	df 91       	pop	r29
    49e4:	cf 91       	pop	r28
    49e6:	1f 91       	pop	r17
    49e8:	0f 91       	pop	r16
    49ea:	ff 90       	pop	r15
    49ec:	ef 90       	pop	r14
    49ee:	08 95       	ret

000049f0 <_ZN14EthernetServerC1Ej>:
    49f0:	fc 01       	movw	r30, r24
    49f2:	13 82       	std	Z+3, r1	; 0x03
    49f4:	12 82       	std	Z+2, r1	; 0x02
    49f6:	88 ef       	ldi	r24, 0xF8	; 248
    49f8:	99 e0       	ldi	r25, 0x09	; 9
    49fa:	91 83       	std	Z+1, r25	; 0x01
    49fc:	80 83       	st	Z, r24
    49fe:	75 83       	std	Z+5, r23	; 0x05
    4a00:	64 83       	std	Z+4, r22	; 0x04
    4a02:	08 95       	ret

00004a04 <_ZN14EthernetServer6acceptEv>:
    4a04:	af 92       	push	r10
    4a06:	bf 92       	push	r11
    4a08:	cf 92       	push	r12
    4a0a:	df 92       	push	r13
    4a0c:	ef 92       	push	r14
    4a0e:	ff 92       	push	r15
    4a10:	1f 93       	push	r17
    4a12:	cf 93       	push	r28
    4a14:	df 93       	push	r29
    4a16:	cd b7       	in	r28, 0x3d	; 61
    4a18:	de b7       	in	r29, 0x3e	; 62
    4a1a:	2d 97       	sbiw	r28, 0x0d	; 13
    4a1c:	0f b6       	in	r0, 0x3f	; 63
    4a1e:	f8 94       	cli
    4a20:	de bf       	out	0x3e, r29	; 62
    4a22:	0f be       	out	0x3f, r0	; 63
    4a24:	cd bf       	out	0x3d, r28	; 61
    4a26:	7c 01       	movw	r14, r24
    4a28:	90 e6       	ldi	r25, 0x60	; 96
    4a2a:	a9 2e       	mov	r10, r25
    4a2c:	9d e0       	ldi	r25, 0x0D	; 13
    4a2e:	b9 2e       	mov	r11, r25
    4a30:	10 e0       	ldi	r17, 0x00	; 0
    4a32:	c1 2c       	mov	r12, r1
    4a34:	d1 2c       	mov	r13, r1
    4a36:	61 2f       	mov	r22, r17
    4a38:	ce 01       	movw	r24, r28
    4a3a:	01 96       	adiw	r24, 0x01	; 1
    4a3c:	9c de       	rcall	.-712    	; 0x4776 <_ZN14EthernetClientC1Eh>
    4a3e:	d5 01       	movw	r26, r10
    4a40:	2d 91       	ld	r18, X+
    4a42:	3d 91       	ld	r19, X+
    4a44:	5d 01       	movw	r10, r26
    4a46:	f7 01       	movw	r30, r14
    4a48:	84 81       	ldd	r24, Z+4	; 0x04
    4a4a:	95 81       	ldd	r25, Z+5	; 0x05
    4a4c:	28 17       	cp	r18, r24
    4a4e:	39 07       	cpc	r19, r25
    4a50:	99 f4       	brne	.+38     	; 0x4a78 <_ZN14EthernetServer6acceptEv+0x74>
    4a52:	ce 01       	movw	r24, r28
    4a54:	01 96       	adiw	r24, 0x01	; 1
    4a56:	a0 de       	rcall	.-704    	; 0x4798 <_ZN14EthernetClient6statusEv>
    4a58:	84 31       	cpi	r24, 0x14	; 20
    4a5a:	59 f0       	breq	.+22     	; 0x4a72 <_ZN14EthernetServer6acceptEv+0x6e>
    4a5c:	ce 01       	movw	r24, r28
    4a5e:	01 96       	adiw	r24, 0x01	; 1
    4a60:	9b de       	rcall	.-714    	; 0x4798 <_ZN14EthernetClient6statusEv>
    4a62:	8c 31       	cpi	r24, 0x1C	; 28
    4a64:	49 f4       	brne	.+18     	; 0x4a78 <_ZN14EthernetServer6acceptEv+0x74>
    4a66:	ce 01       	movw	r24, r28
    4a68:	01 96       	adiw	r24, 0x01	; 1
    4a6a:	28 de       	rcall	.-944    	; 0x46bc <_ZN14EthernetClient9availableEv>
    4a6c:	89 2b       	or	r24, r25
    4a6e:	91 f0       	breq	.+36     	; 0x4a94 <_ZN14EthernetServer6acceptEv+0x90>
    4a70:	03 c0       	rjmp	.+6      	; 0x4a78 <_ZN14EthernetServer6acceptEv+0x74>
    4a72:	cc 24       	eor	r12, r12
    4a74:	c3 94       	inc	r12
    4a76:	d1 2c       	mov	r13, r1
    4a78:	1f 5f       	subi	r17, 0xFF	; 255
    4a7a:	18 30       	cpi	r17, 0x08	; 8
    4a7c:	e1 f6       	brne	.-72     	; 0x4a36 <_ZN14EthernetServer6acceptEv+0x32>
    4a7e:	cd 28       	or	r12, r13
    4a80:	69 f4       	brne	.+26     	; 0x4a9c <_ZN14EthernetServer6acceptEv+0x98>
    4a82:	d7 01       	movw	r26, r14
    4a84:	ed 91       	ld	r30, X+
    4a86:	fc 91       	ld	r31, X
    4a88:	00 84       	ldd	r0, Z+8	; 0x08
    4a8a:	f1 85       	ldd	r31, Z+9	; 0x09
    4a8c:	e0 2d       	mov	r30, r0
    4a8e:	c7 01       	movw	r24, r14
    4a90:	09 95       	icall
    4a92:	04 c0       	rjmp	.+8      	; 0x4a9c <_ZN14EthernetServer6acceptEv+0x98>
    4a94:	ce 01       	movw	r24, r28
    4a96:	01 96       	adiw	r24, 0x01	; 1
    4a98:	af de       	rcall	.-674    	; 0x47f8 <_ZN14EthernetClient4stopEv>
    4a9a:	ee cf       	rjmp	.-36     	; 0x4a78 <_ZN14EthernetServer6acceptEv+0x74>
    4a9c:	2d 96       	adiw	r28, 0x0d	; 13
    4a9e:	0f b6       	in	r0, 0x3f	; 63
    4aa0:	f8 94       	cli
    4aa2:	de bf       	out	0x3e, r29	; 62
    4aa4:	0f be       	out	0x3f, r0	; 63
    4aa6:	cd bf       	out	0x3d, r28	; 61
    4aa8:	df 91       	pop	r29
    4aaa:	cf 91       	pop	r28
    4aac:	1f 91       	pop	r17
    4aae:	ff 90       	pop	r15
    4ab0:	ef 90       	pop	r14
    4ab2:	df 90       	pop	r13
    4ab4:	cf 90       	pop	r12
    4ab6:	bf 90       	pop	r11
    4ab8:	af 90       	pop	r10
    4aba:	08 95       	ret

00004abc <_ZN14EthernetServer5writeEPKhj>:
    4abc:	7f 92       	push	r7
    4abe:	8f 92       	push	r8
    4ac0:	9f 92       	push	r9
    4ac2:	af 92       	push	r10
    4ac4:	bf 92       	push	r11
    4ac6:	cf 92       	push	r12
    4ac8:	df 92       	push	r13
    4aca:	ef 92       	push	r14
    4acc:	ff 92       	push	r15
    4ace:	0f 93       	push	r16
    4ad0:	1f 93       	push	r17
    4ad2:	cf 93       	push	r28
    4ad4:	df 93       	push	r29
    4ad6:	cd b7       	in	r28, 0x3d	; 61
    4ad8:	de b7       	in	r29, 0x3e	; 62
    4ada:	2d 97       	sbiw	r28, 0x0d	; 13
    4adc:	0f b6       	in	r0, 0x3f	; 63
    4ade:	f8 94       	cli
    4ae0:	de bf       	out	0x3e, r29	; 62
    4ae2:	0f be       	out	0x3f, r0	; 63
    4ae4:	cd bf       	out	0x3d, r28	; 61
    4ae6:	6c 01       	movw	r12, r24
    4ae8:	5b 01       	movw	r10, r22
    4aea:	4a 01       	movw	r8, r20
    4aec:	8b df       	rcall	.-234    	; 0x4a04 <_ZN14EthernetServer6acceptEv>
    4aee:	80 e6       	ldi	r24, 0x60	; 96
    4af0:	e8 2e       	mov	r14, r24
    4af2:	8d e0       	ldi	r24, 0x0D	; 13
    4af4:	f8 2e       	mov	r15, r24
    4af6:	71 2c       	mov	r7, r1
    4af8:	00 e0       	ldi	r16, 0x00	; 0
    4afa:	10 e0       	ldi	r17, 0x00	; 0
    4afc:	67 2d       	mov	r22, r7
    4afe:	ce 01       	movw	r24, r28
    4b00:	01 96       	adiw	r24, 0x01	; 1
    4b02:	39 de       	rcall	.-910    	; 0x4776 <_ZN14EthernetClientC1Eh>
    4b04:	f7 01       	movw	r30, r14
    4b06:	21 91       	ld	r18, Z+
    4b08:	31 91       	ld	r19, Z+
    4b0a:	7f 01       	movw	r14, r30
    4b0c:	f6 01       	movw	r30, r12
    4b0e:	84 81       	ldd	r24, Z+4	; 0x04
    4b10:	95 81       	ldd	r25, Z+5	; 0x05
    4b12:	28 17       	cp	r18, r24
    4b14:	39 07       	cpc	r19, r25
    4b16:	29 f4       	brne	.+10     	; 0x4b22 <_ZN14EthernetServer5writeEPKhj+0x66>
    4b18:	ce 01       	movw	r24, r28
    4b1a:	01 96       	adiw	r24, 0x01	; 1
    4b1c:	3d de       	rcall	.-902    	; 0x4798 <_ZN14EthernetClient6statusEv>
    4b1e:	87 31       	cpi	r24, 0x17	; 23
    4b20:	c9 f0       	breq	.+50     	; 0x4b54 <_ZN14EthernetServer5writeEPKhj+0x98>
    4b22:	73 94       	inc	r7
    4b24:	f8 e0       	ldi	r31, 0x08	; 8
    4b26:	7f 12       	cpse	r7, r31
    4b28:	e9 cf       	rjmp	.-46     	; 0x4afc <_ZN14EthernetServer5writeEPKhj+0x40>
    4b2a:	c8 01       	movw	r24, r16
    4b2c:	2d 96       	adiw	r28, 0x0d	; 13
    4b2e:	0f b6       	in	r0, 0x3f	; 63
    4b30:	f8 94       	cli
    4b32:	de bf       	out	0x3e, r29	; 62
    4b34:	0f be       	out	0x3f, r0	; 63
    4b36:	cd bf       	out	0x3d, r28	; 61
    4b38:	df 91       	pop	r29
    4b3a:	cf 91       	pop	r28
    4b3c:	1f 91       	pop	r17
    4b3e:	0f 91       	pop	r16
    4b40:	ff 90       	pop	r15
    4b42:	ef 90       	pop	r14
    4b44:	df 90       	pop	r13
    4b46:	cf 90       	pop	r12
    4b48:	bf 90       	pop	r11
    4b4a:	af 90       	pop	r10
    4b4c:	9f 90       	pop	r9
    4b4e:	8f 90       	pop	r8
    4b50:	7f 90       	pop	r7
    4b52:	08 95       	ret
    4b54:	a4 01       	movw	r20, r8
    4b56:	b5 01       	movw	r22, r10
    4b58:	ce 01       	movw	r24, r28
    4b5a:	01 96       	adiw	r24, 0x01	; 1
    4b5c:	92 dd       	rcall	.-1244   	; 0x4682 <_ZN14EthernetClient5writeEPKhj>
    4b5e:	08 0f       	add	r16, r24
    4b60:	19 1f       	adc	r17, r25
    4b62:	df cf       	rjmp	.-66     	; 0x4b22 <_ZN14EthernetServer5writeEPKhj+0x66>

00004b64 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    4b64:	0f 93       	push	r16
    4b66:	00 e0       	ldi	r16, 0x00	; 0
    4b68:	20 e0       	ldi	r18, 0x00	; 0
    4b6a:	40 e0       	ldi	r20, 0x00	; 0
    4b6c:	60 e0       	ldi	r22, 0x00	; 0
    4b6e:	8c e7       	ldi	r24, 0x7C	; 124
    4b70:	9d e0       	ldi	r25, 0x0D	; 13
    4b72:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <_ZN9IPAddressC1Ehhhh>
    4b76:	0f 91       	pop	r16
    4b78:	08 95       	ret

00004b7a <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    4b7a:	80 e0       	ldi	r24, 0x00	; 0
    4b7c:	08 95       	ret

00004b7e <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    4b7e:	dc 01       	movw	r26, r24
    4b80:	ed 91       	ld	r30, X+
    4b82:	fc 91       	ld	r31, X
    4b84:	04 8c       	ldd	r0, Z+28	; 0x1c
    4b86:	f5 8d       	ldd	r31, Z+29	; 0x1d
    4b88:	e0 2d       	mov	r30, r0
    4b8a:	09 94       	ijmp

00004b8c <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4b8c:	28 e6       	ldi	r18, 0x68	; 104
    4b8e:	3a e0       	ldi	r19, 0x0A	; 10
    4b90:	fc 01       	movw	r30, r24
    4b92:	31 83       	std	Z+1, r19	; 0x01
    4b94:	20 83       	st	Z, r18
    4b96:	fb 01       	movw	r30, r22
    4b98:	41 89       	ldd	r20, Z+17	; 0x11
    4b9a:	52 89       	ldd	r21, Z+18	; 0x12
    4b9c:	63 89       	ldd	r22, Z+19	; 0x13
    4b9e:	74 89       	ldd	r23, Z+20	; 0x14
    4ba0:	fc 01       	movw	r30, r24
    4ba2:	42 83       	std	Z+2, r20	; 0x02
    4ba4:	53 83       	std	Z+3, r21	; 0x03
    4ba6:	64 83       	std	Z+4, r22	; 0x04
    4ba8:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    4baa:	08 95       	ret

00004bac <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    4bac:	fc 01       	movw	r30, r24
    4bae:	85 89       	ldd	r24, Z+21	; 0x15
    4bb0:	96 89       	ldd	r25, Z+22	; 0x16
    4bb2:	08 95       	ret

00004bb4 <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    4bb4:	fc 01       	movw	r30, r24
    4bb6:	81 8d       	ldd	r24, Z+25	; 0x19
    4bb8:	92 8d       	ldd	r25, Z+26	; 0x1a
    4bba:	08 95       	ret

00004bbc <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    4bbc:	cf 93       	push	r28
    4bbe:	df 93       	push	r29
    4bc0:	1f 92       	push	r1
    4bc2:	cd b7       	in	r28, 0x3d	; 61
    4bc4:	de b7       	in	r29, 0x3e	; 62
    4bc6:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    4bc8:	dc 01       	movw	r26, r24
    4bca:	ed 91       	ld	r30, X+
    4bcc:	fc 91       	ld	r31, X
    4bce:	02 80       	ldd	r0, Z+2	; 0x02
    4bd0:	f3 81       	ldd	r31, Z+3	; 0x03
    4bd2:	e0 2d       	mov	r30, r0
    4bd4:	41 e0       	ldi	r20, 0x01	; 1
    4bd6:	50 e0       	ldi	r21, 0x00	; 0
    4bd8:	be 01       	movw	r22, r28
    4bda:	6f 5f       	subi	r22, 0xFF	; 255
    4bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    4bde:	09 95       	icall
}
    4be0:	0f 90       	pop	r0
    4be2:	df 91       	pop	r29
    4be4:	cf 91       	pop	r28
    4be6:	08 95       	ret

00004be8 <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    4be8:	cf 93       	push	r28
    4bea:	df 93       	push	r29
    4bec:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    4bee:	89 8d       	ldd	r24, Y+25	; 0x19
    4bf0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4bf2:	89 2b       	or	r24, r25
    4bf4:	41 f0       	breq	.+16     	; 0x4c06 <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    4bf6:	e8 81       	ld	r30, Y
    4bf8:	f9 81       	ldd	r31, Y+1	; 0x01
    4bfa:	02 84       	ldd	r0, Z+10	; 0x0a
    4bfc:	f3 85       	ldd	r31, Z+11	; 0x0b
    4bfe:	e0 2d       	mov	r30, r0
    4c00:	ce 01       	movw	r24, r28
    4c02:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    4c04:	f4 cf       	rjmp	.-24     	; 0x4bee <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    4c06:	df 91       	pop	r29
    4c08:	cf 91       	pop	r28
    4c0a:	08 95       	ret

00004c0c <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    4c0c:	cf 93       	push	r28
    4c0e:	df 93       	push	r29
    4c10:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    4c12:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c14:	88 30       	cpi	r24, 0x08	; 8
    4c16:	59 f0       	breq	.+22     	; 0x4c2e <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    4c18:	cd d1       	rcall	.+922    	; 0x4fb4 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    4c1a:	ec 85       	ldd	r30, Y+12	; 0x0c
    4c1c:	f0 e0       	ldi	r31, 0x00	; 0
    4c1e:	ee 0f       	add	r30, r30
    4c20:	ff 1f       	adc	r31, r31
    4c22:	e0 5a       	subi	r30, 0xA0	; 160
    4c24:	f2 4f       	sbci	r31, 0xF2	; 242
    4c26:	11 82       	std	Z+1, r1	; 0x01
    4c28:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    4c2a:	88 e0       	ldi	r24, 0x08	; 8
    4c2c:	8c 87       	std	Y+12, r24	; 0x0c
}
    4c2e:	df 91       	pop	r29
    4c30:	cf 91       	pop	r28
    4c32:	08 95       	ret

00004c34 <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    4c34:	fc 01       	movw	r30, r24
    4c36:	10 8e       	std	Z+24, r1	; 0x18
    4c38:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    4c3a:	6e 5f       	subi	r22, 0xFE	; 254
    4c3c:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    4c3e:	84 85       	ldd	r24, Z+12	; 0x0c
    4c40:	02 c3       	rjmp	.+1540   	; 0x5246 <_Z8startUDPhPhj>

00004c42 <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    4c42:	fc 01       	movw	r30, r24
    4c44:	84 85       	ldd	r24, Z+12	; 0x0c
    4c46:	22 c3       	rjmp	.+1604   	; 0x528c <_Z7sendUDPh>

00004c48 <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    4c48:	cf 93       	push	r28
    4c4a:	df 93       	push	r29
    4c4c:	ec 01       	movw	r28, r24
    4c4e:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    4c50:	8f 89       	ldd	r24, Y+23	; 0x17
    4c52:	98 8d       	ldd	r25, Y+24	; 0x18
    4c54:	ab 01       	movw	r20, r22
    4c56:	bc 01       	movw	r22, r24
    4c58:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c5a:	ca d2       	rcall	.+1428   	; 0x51f0 <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    4c5c:	2f 89       	ldd	r18, Y+23	; 0x17
    4c5e:	38 8d       	ldd	r19, Y+24	; 0x18
    4c60:	28 0f       	add	r18, r24
    4c62:	39 1f       	adc	r19, r25
    4c64:	38 8f       	std	Y+24, r19	; 0x18
    4c66:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    4c68:	df 91       	pop	r29
    4c6a:	cf 91       	pop	r28
    4c6c:	08 95       	ret

00004c6e <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    4c6e:	0f 93       	push	r16
    4c70:	1f 93       	push	r17
    4c72:	cf 93       	push	r28
    4c74:	df 93       	push	r29
    4c76:	1f 92       	push	r1
    4c78:	cd b7       	in	r28, 0x3d	; 61
    4c7a:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    4c7c:	fc 01       	movw	r30, r24
    4c7e:	21 8d       	ldd	r18, Z+25	; 0x19
    4c80:	32 8d       	ldd	r19, Z+26	; 0x1a
    4c82:	23 2b       	or	r18, r19
    4c84:	59 f0       	breq	.+22     	; 0x4c9c <_ZN11EthernetUDP4readEv+0x2e>
    4c86:	8c 01       	movw	r16, r24
    4c88:	41 e0       	ldi	r20, 0x01	; 1
    4c8a:	50 e0       	ldi	r21, 0x00	; 0
    4c8c:	be 01       	movw	r22, r28
    4c8e:	6f 5f       	subi	r22, 0xFF	; 255
    4c90:	7f 4f       	sbci	r23, 0xFF	; 255
    4c92:	84 85       	ldd	r24, Z+12	; 0x0c
    4c94:	5e d2       	rcall	.+1212   	; 0x5152 <_Z4recvhPhi>
    4c96:	18 16       	cp	r1, r24
    4c98:	19 06       	cpc	r1, r25
    4c9a:	1c f0       	brlt	.+6      	; 0x4ca2 <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    4c9c:	8f ef       	ldi	r24, 0xFF	; 255
    4c9e:	9f ef       	ldi	r25, 0xFF	; 255
    4ca0:	08 c0       	rjmp	.+16     	; 0x4cb2 <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    4ca2:	f8 01       	movw	r30, r16
    4ca4:	81 8d       	ldd	r24, Z+25	; 0x19
    4ca6:	92 8d       	ldd	r25, Z+26	; 0x1a
    4ca8:	01 97       	sbiw	r24, 0x01	; 1
    4caa:	92 8f       	std	Z+26, r25	; 0x1a
    4cac:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    4cae:	89 81       	ldd	r24, Y+1	; 0x01
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    4cb2:	0f 90       	pop	r0
    4cb4:	df 91       	pop	r29
    4cb6:	cf 91       	pop	r28
    4cb8:	1f 91       	pop	r17
    4cba:	0f 91       	pop	r16
    4cbc:	08 95       	ret

00004cbe <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    4cbe:	cf 93       	push	r28
    4cc0:	df 93       	push	r29

  if (_remaining > 0)
    4cc2:	fc 01       	movw	r30, r24
    4cc4:	21 8d       	ldd	r18, Z+25	; 0x19
    4cc6:	32 8d       	ldd	r19, Z+26	; 0x1a
    4cc8:	21 15       	cp	r18, r1
    4cca:	31 05       	cpc	r19, r1
    4ccc:	19 f4       	brne	.+6      	; 0x4cd4 <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    4cce:	8f ef       	ldi	r24, 0xFF	; 255
    4cd0:	9f ef       	ldi	r25, 0xFF	; 255
    4cd2:	10 c0       	rjmp	.+32     	; 0x4cf4 <_ZN11EthernetUDP4readEPhj+0x36>
    4cd4:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    4cd6:	42 17       	cp	r20, r18
    4cd8:	53 07       	cpc	r21, r19
    4cda:	08 f0       	brcs	.+2      	; 0x4cde <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    4cdc:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    4cde:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ce0:	38 d2       	rcall	.+1136   	; 0x5152 <_Z4recvhPhi>
    }

    if (got > 0)
    4ce2:	18 16       	cp	r1, r24
    4ce4:	19 06       	cpc	r1, r25
    4ce6:	9c f7       	brge	.-26     	; 0x4cce <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    4ce8:	29 8d       	ldd	r18, Y+25	; 0x19
    4cea:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4cec:	28 1b       	sub	r18, r24
    4cee:	39 0b       	sbc	r19, r25
    4cf0:	3a 8f       	std	Y+26, r19	; 0x1a
    4cf2:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    4cf4:	df 91       	pop	r29
    4cf6:	cf 91       	pop	r28
    4cf8:	08 95       	ret

00004cfa <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    4cfa:	cf 93       	push	r28
    4cfc:	df 93       	push	r29
    4cfe:	1f 92       	push	r1
    4d00:	cd b7       	in	r28, 0x3d	; 61
    4d02:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    4d04:	fc 01       	movw	r30, r24
    4d06:	21 8d       	ldd	r18, Z+25	; 0x19
    4d08:	32 8d       	ldd	r19, Z+26	; 0x1a
    4d0a:	23 2b       	or	r18, r19
    4d0c:	41 f0       	breq	.+16     	; 0x4d1e <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    4d0e:	be 01       	movw	r22, r28
    4d10:	6f 5f       	subi	r22, 0xFF	; 255
    4d12:	7f 4f       	sbci	r23, 0xFF	; 255
    4d14:	84 85       	ldd	r24, Z+12	; 0x0c
    4d16:	5e d2       	rcall	.+1212   	; 0x51d4 <_Z4peekhPh>
  return b;
    4d18:	89 81       	ldd	r24, Y+1	; 0x01
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	02 c0       	rjmp	.+4      	; 0x4d22 <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    4d1e:	8f ef       	ldi	r24, 0xFF	; 255
    4d20:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    4d22:	0f 90       	pop	r0
    4d24:	df 91       	pop	r29
    4d26:	cf 91       	pop	r28
    4d28:	08 95       	ret

00004d2a <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    4d2a:	ef 92       	push	r14
    4d2c:	ff 92       	push	r15
    4d2e:	1f 93       	push	r17
    4d30:	cf 93       	push	r28
    4d32:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    4d34:	fc 01       	movw	r30, r24
    4d36:	24 85       	ldd	r18, Z+12	; 0x0c
    4d38:	28 30       	cpi	r18, 0x08	; 8
    4d3a:	11 f0       	breq	.+4      	; 0x4d40 <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    4d3c:	80 e0       	ldi	r24, 0x00	; 0
    4d3e:	20 c0       	rjmp	.+64     	; 0x4d80 <_ZN11EthernetUDP5beginEj+0x56>
    4d40:	7b 01       	movw	r14, r22
    4d42:	ec 01       	movw	r28, r24
    4d44:	10 e0       	ldi	r17, 0x00	; 0
    4d46:	61 2f       	mov	r22, r17
    4d48:	62 95       	swap	r22
    4d4a:	66 0f       	add	r22, r22
    4d4c:	60 7e       	andi	r22, 0xE0	; 224
    4d4e:	68 5f       	subi	r22, 0xF8	; 248
    4d50:	83 e0       	ldi	r24, 0x03	; 3
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	10 d3       	rcall	.+1568   	; 0x5376 <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    4d56:	81 11       	cpse	r24, r1
    4d58:	02 c0       	rjmp	.+4      	; 0x4d5e <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    4d5a:	1c 87       	std	Y+12, r17	; 0x0c
    4d5c:	05 c0       	rjmp	.+10     	; 0x4d68 <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    4d5e:	88 31       	cpi	r24, 0x18	; 24
    4d60:	e1 f3       	breq	.-8      	; 0x4d5a <_ZN11EthernetUDP5beginEj+0x30>
    4d62:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    4d64:	18 30       	cpi	r17, 0x08	; 8
    4d66:	79 f7       	brne	.-34     	; 0x4d46 <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    4d68:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d6a:	88 30       	cpi	r24, 0x08	; 8
    4d6c:	39 f3       	breq	.-50     	; 0x4d3c <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    4d6e:	fe 86       	std	Y+14, r15	; 0x0e
    4d70:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    4d72:	1a 8e       	std	Y+26, r1	; 0x1a
    4d74:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    4d76:	20 e0       	ldi	r18, 0x00	; 0
    4d78:	a7 01       	movw	r20, r14
    4d7a:	62 e0       	ldi	r22, 0x02	; 2
    4d7c:	26 d1       	rcall	.+588    	; 0x4fca <_Z6sockethhjh>

  return 1;
    4d7e:	81 e0       	ldi	r24, 0x01	; 1
}
    4d80:	df 91       	pop	r29
    4d82:	cf 91       	pop	r28
    4d84:	1f 91       	pop	r17
    4d86:	ff 90       	pop	r15
    4d88:	ef 90       	pop	r14
    4d8a:	08 95       	ret

00004d8c <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    4d8c:	0f 93       	push	r16
    4d8e:	1f 93       	push	r17
    4d90:	cf 93       	push	r28
    4d92:	df 93       	push	r29
    4d94:	cd b7       	in	r28, 0x3d	; 61
    4d96:	de b7       	in	r29, 0x3e	; 62
    4d98:	28 97       	sbiw	r28, 0x08	; 8
    4d9a:	0f b6       	in	r0, 0x3f	; 63
    4d9c:	f8 94       	cli
    4d9e:	de bf       	out	0x3e, r29	; 62
    4da0:	0f be       	out	0x3f, r0	; 63
    4da2:	cd bf       	out	0x3d, r28	; 61
    4da4:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    4da6:	dc 01       	movw	r26, r24
    4da8:	ed 91       	ld	r30, X+
    4daa:	fc 91       	ld	r31, X
    4dac:	06 80       	ldd	r0, Z+6	; 0x06
    4dae:	f7 81       	ldd	r31, Z+7	; 0x07
    4db0:	e0 2d       	mov	r30, r0
    4db2:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    4db4:	f8 01       	movw	r30, r16
    4db6:	64 85       	ldd	r22, Z+12	; 0x0c
    4db8:	83 e9       	ldi	r24, 0x93	; 147
    4dba:	9d e0       	ldi	r25, 0x0D	; 13
    4dbc:	6f d3       	rcall	.+1758   	; 0x549c <_ZN10W5500Class17getRXReceivedSizeEh>
    4dbe:	89 2b       	or	r24, r25
    4dc0:	39 f1       	breq	.+78     	; 0x4e10 <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    4dc2:	48 e0       	ldi	r20, 0x08	; 8
    4dc4:	50 e0       	ldi	r21, 0x00	; 0
    4dc6:	be 01       	movw	r22, r28
    4dc8:	6f 5f       	subi	r22, 0xFF	; 255
    4dca:	7f 4f       	sbci	r23, 0xFF	; 255
    4dcc:	d8 01       	movw	r26, r16
    4dce:	1c 96       	adiw	r26, 0x0c	; 12
    4dd0:	8c 91       	ld	r24, X
    4dd2:	bf d1       	rcall	.+894    	; 0x5152 <_Z4recvhPhi>
    if (ret > 0)
    4dd4:	18 16       	cp	r1, r24
    4dd6:	19 06       	cpc	r1, r25
    4dd8:	ec f4       	brge	.+58     	; 0x4e14 <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    4dda:	be 01       	movw	r22, r28
    4ddc:	6f 5f       	subi	r22, 0xFF	; 255
    4dde:	7f 4f       	sbci	r23, 0xFF	; 255
    4de0:	c8 01       	movw	r24, r16
    4de2:	0f 96       	adiw	r24, 0x0f	; 15
    4de4:	0e 94 82 39 	call	0x7304	; 0x7304 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    4de8:	8d 81       	ldd	r24, Y+5	; 0x05
    4dea:	90 e0       	ldi	r25, 0x00	; 0
    4dec:	98 2f       	mov	r25, r24
    4dee:	88 27       	eor	r24, r24
    4df0:	2e 81       	ldd	r18, Y+6	; 0x06
    4df2:	82 0f       	add	r24, r18
    4df4:	91 1d       	adc	r25, r1
    4df6:	f8 01       	movw	r30, r16
    4df8:	96 8b       	std	Z+22, r25	; 0x16
    4dfa:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    4dfc:	8f 81       	ldd	r24, Y+7	; 0x07
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	98 2f       	mov	r25, r24
    4e02:	88 27       	eor	r24, r24
    4e04:	28 85       	ldd	r18, Y+8	; 0x08
    4e06:	82 0f       	add	r24, r18
    4e08:	91 1d       	adc	r25, r1
    4e0a:	92 8f       	std	Z+26, r25	; 0x1a
    4e0c:	81 8f       	std	Z+25, r24	; 0x19
    4e0e:	02 c0       	rjmp	.+4      	; 0x4e14 <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    4e10:	80 e0       	ldi	r24, 0x00	; 0
    4e12:	90 e0       	ldi	r25, 0x00	; 0
}
    4e14:	28 96       	adiw	r28, 0x08	; 8
    4e16:	0f b6       	in	r0, 0x3f	; 63
    4e18:	f8 94       	cli
    4e1a:	de bf       	out	0x3e, r29	; 62
    4e1c:	0f be       	out	0x3f, r0	; 63
    4e1e:	cd bf       	out	0x3d, r28	; 61
    4e20:	df 91       	pop	r29
    4e22:	cf 91       	pop	r28
    4e24:	1f 91       	pop	r17
    4e26:	0f 91       	pop	r16
    4e28:	08 95       	ret

00004e2a <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    4e2a:	fc 01       	movw	r30, r24
    4e2c:	13 82       	std	Z+3, r1	; 0x03
    4e2e:	12 82       	std	Z+2, r1	; 0x02
    4e30:	88 ee       	ldi	r24, 0xE8	; 232
    4e32:	93 e0       	ldi	r25, 0x03	; 3
    4e34:	a0 e0       	ldi	r26, 0x00	; 0
    4e36:	b0 e0       	ldi	r27, 0x00	; 0
    4e38:	84 83       	std	Z+4, r24	; 0x04
    4e3a:	95 83       	std	Z+5, r25	; 0x05
    4e3c:	a6 83       	std	Z+6, r26	; 0x06
    4e3e:	b7 83       	std	Z+7, r27	; 0x07
    4e40:	86 e0       	ldi	r24, 0x06	; 6
    4e42:	9a e0       	ldi	r25, 0x0A	; 10
    4e44:	91 83       	std	Z+1, r25	; 0x01
    4e46:	80 83       	st	Z, r24
    4e48:	88 e0       	ldi	r24, 0x08	; 8
    4e4a:	84 87       	std	Z+12, r24	; 0x0c
    4e4c:	cf 01       	movw	r24, r30
    4e4e:	0f 96       	adiw	r24, 0x0f	; 15
    4e50:	0c 94 60 39 	jmp	0x72c0	; 0x72c0 <_ZN9IPAddressC1Ev>

00004e54 <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    4e54:	cf 92       	push	r12
    4e56:	df 92       	push	r13
    4e58:	ef 92       	push	r14
    4e5a:	ff 92       	push	r15
    4e5c:	0f 93       	push	r16
    4e5e:	1f 93       	push	r17
    4e60:	cf 93       	push	r28
    4e62:	df 93       	push	r29
    4e64:	cd b7       	in	r28, 0x3d	; 61
    4e66:	de b7       	in	r29, 0x3e	; 62
    4e68:	af 97       	sbiw	r28, 0x2f	; 47
    4e6a:	0f b6       	in	r0, 0x3f	; 63
    4e6c:	f8 94       	cli
    4e6e:	de bf       	out	0x3e, r29	; 62
    4e70:	0f be       	out	0x3f, r0	; 63
    4e72:	cd bf       	out	0x3d, r28	; 61
    4e74:	8c 01       	movw	r16, r24
    4e76:	6b 01       	movw	r12, r22
    4e78:	7a 01       	movw	r14, r20
    4e7a:	ce 01       	movw	r24, r28
    4e7c:	01 96       	adiw	r24, 0x01	; 1
    4e7e:	0e 94 60 39 	call	0x72c0	; 0x72c0 <_ZN9IPAddressC1Ev>
    4e82:	ce 01       	movw	r24, r28
    4e84:	09 96       	adiw	r24, 0x09	; 9
    4e86:	d1 df       	rcall	.-94     	; 0x4e2a <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    4e88:	ce 01       	movw	r24, r28
    4e8a:	8a 96       	adiw	r24, 0x2a	; 42
    4e8c:	0e 94 60 39 	call	0x72c0	; 0x72c0 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    4e90:	63 e5       	ldi	r22, 0x53	; 83
    4e92:	7d e0       	ldi	r23, 0x0D	; 13
    4e94:	ce 01       	movw	r24, r28
    4e96:	84 96       	adiw	r24, 0x24	; 36
    4e98:	3e db       	rcall	.-2436   	; 0x4516 <_ZN13EthernetClass11dnsServerIPEv>
    4e9a:	be 01       	movw	r22, r28
    4e9c:	6c 5d       	subi	r22, 0xDC	; 220
    4e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    4ea0:	ce 01       	movw	r24, r28
    4ea2:	01 96       	adiw	r24, 0x01	; 1
    4ea4:	03 d8       	rcall	.-4090   	; 0x3eac <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    4ea6:	ae 01       	movw	r20, r28
    4ea8:	46 5d       	subi	r20, 0xD6	; 214
    4eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    4eac:	b6 01       	movw	r22, r12
    4eae:	ce 01       	movw	r24, r28
    4eb0:	01 96       	adiw	r24, 0x01	; 1
    4eb2:	56 da       	rcall	.-2900   	; 0x4360 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    4eb4:	81 30       	cpi	r24, 0x01	; 1
    4eb6:	91 05       	cpc	r25, r1
    4eb8:	c1 f4       	brne	.+48     	; 0x4eea <_ZN11EthernetUDP11beginPacketEPKcj+0x96>
    return beginPacket(remote_addr, port);
    4eba:	d8 01       	movw	r26, r16
    4ebc:	ed 91       	ld	r30, X+
    4ebe:	fc 91       	ld	r31, X
    4ec0:	04 88       	ldd	r0, Z+20	; 0x14
    4ec2:	f5 89       	ldd	r31, Z+21	; 0x15
    4ec4:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4ec6:	88 e6       	ldi	r24, 0x68	; 104
    4ec8:	9a e0       	ldi	r25, 0x0A	; 10
    4eca:	9d a3       	std	Y+37, r25	; 0x25
    4ecc:	8c a3       	std	Y+36, r24	; 0x24
    4ece:	8c a5       	ldd	r24, Y+44	; 0x2c
    4ed0:	9d a5       	ldd	r25, Y+45	; 0x2d
    4ed2:	ae a5       	ldd	r26, Y+46	; 0x2e
    4ed4:	bf a5       	ldd	r27, Y+47	; 0x2f
    4ed6:	8e a3       	std	Y+38, r24	; 0x26
    4ed8:	9f a3       	std	Y+39, r25	; 0x27
    4eda:	a8 a7       	std	Y+40, r26	; 0x28
    4edc:	b9 a7       	std	Y+41, r27	; 0x29
    4ede:	a7 01       	movw	r20, r14
    4ee0:	be 01       	movw	r22, r28
    4ee2:	6c 5d       	subi	r22, 0xDC	; 220
    4ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ee6:	c8 01       	movw	r24, r16
    4ee8:	09 95       	icall
  } else {
    return ret;
  }
}
    4eea:	af 96       	adiw	r28, 0x2f	; 47
    4eec:	0f b6       	in	r0, 0x3f	; 63
    4eee:	f8 94       	cli
    4ef0:	de bf       	out	0x3e, r29	; 62
    4ef2:	0f be       	out	0x3f, r0	; 63
    4ef4:	cd bf       	out	0x3d, r28	; 61
    4ef6:	df 91       	pop	r29
    4ef8:	cf 91       	pop	r28
    4efa:	1f 91       	pop	r17
    4efc:	0f 91       	pop	r16
    4efe:	ff 90       	pop	r15
    4f00:	ef 90       	pop	r14
    4f02:	df 90       	pop	r13
    4f04:	cf 90       	pop	r12
    4f06:	08 95       	ret

00004f08 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    4f08:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4f0a:	00 e0       	ldi	r16, 0x00	; 0
    4f0c:	20 e0       	ldi	r18, 0x00	; 0
    4f0e:	40 e0       	ldi	r20, 0x00	; 0
    4f10:	60 e0       	ldi	r22, 0x00	; 0
    4f12:	82 e8       	ldi	r24, 0x82	; 130
    4f14:	9d e0       	ldi	r25, 0x0D	; 13
    4f16:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <_ZN9IPAddressC1Ehhhh>
    4f1a:	0f 91       	pop	r16
    4f1c:	08 95       	ret

00004f1e <_GLOBAL__sub_I__ZN7TwitterC2EPKc>:

int Twitter::wait(Print *debug)
{
	while (checkStatus(debug));
	return statusCode;
}
    4f1e:	0f 93       	push	r16
    4f20:	00 e0       	ldi	r16, 0x00	; 0
    4f22:	20 e0       	ldi	r18, 0x00	; 0
    4f24:	40 e0       	ldi	r20, 0x00	; 0
    4f26:	60 e0       	ldi	r22, 0x00	; 0
    4f28:	88 e8       	ldi	r24, 0x88	; 136
    4f2a:	9d e0       	ldi	r25, 0x0D	; 13
    4f2c:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <_ZN9IPAddressC1Ehhhh>
    4f30:	0f 91       	pop	r16
    4f32:	08 95       	ret

00004f34 <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    4f34:	ab 01       	movw	r20, r22
    4f36:	82 95       	swap	r24
    4f38:	88 0f       	add	r24, r24
    4f3a:	80 7e       	andi	r24, 0xE0	; 224
    4f3c:	6c e0       	ldi	r22, 0x0C	; 12
    4f3e:	68 0f       	add	r22, r24
    4f40:	24 e0       	ldi	r18, 0x04	; 4
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	8c e0       	ldi	r24, 0x0C	; 12
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	e8 c1       	rjmp	.+976    	; 0x531a <_ZN10W5500Class5writeEjhPKhj>

00004f4a <_ZN10W5500Class6readSnEhj>:
    4f4a:	9b 01       	movw	r18, r22
    4f4c:	82 95       	swap	r24
    4f4e:	88 0f       	add	r24, r24
    4f50:	80 7e       	andi	r24, 0xE0	; 224
    4f52:	68 e0       	ldi	r22, 0x08	; 8
    4f54:	68 0f       	add	r22, r24
    4f56:	c9 01       	movw	r24, r18
    4f58:	0e c2       	rjmp	.+1052   	; 0x5376 <_ZN10W5500Class4readEjh>

00004f5a <_ZN10W5500Class8readSnIREh>:
    4f5a:	62 e0       	ldi	r22, 0x02	; 2
    4f5c:	70 e0       	ldi	r23, 0x00	; 0
    4f5e:	f5 cf       	rjmp	.-22     	; 0x4f4a <_ZN10W5500Class6readSnEhj>

00004f60 <_ZN10W5500Class7writeSnEhjh>:
    4f60:	9b 01       	movw	r18, r22
    4f62:	82 95       	swap	r24
    4f64:	88 0f       	add	r24, r24
    4f66:	80 7e       	andi	r24, 0xE0	; 224
    4f68:	6c e0       	ldi	r22, 0x0C	; 12
    4f6a:	68 0f       	add	r22, r24
    4f6c:	c9 01       	movw	r24, r18
    4f6e:	b5 c1       	rjmp	.+874    	; 0x52da <_ZN10W5500Class5writeEjhh>

00004f70 <_ZN10W5500Class11writeSnPORTEhj>:
    4f70:	cf 93       	push	r28
    4f72:	df 93       	push	r29
    4f74:	c8 2f       	mov	r28, r24
    4f76:	d6 2f       	mov	r29, r22
    4f78:	47 2f       	mov	r20, r23
    4f7a:	64 e0       	ldi	r22, 0x04	; 4
    4f7c:	70 e0       	ldi	r23, 0x00	; 0
    4f7e:	f0 df       	rcall	.-32     	; 0x4f60 <_ZN10W5500Class7writeSnEhjh>
    4f80:	4d 2f       	mov	r20, r29
    4f82:	65 e0       	ldi	r22, 0x05	; 5
    4f84:	70 e0       	ldi	r23, 0x00	; 0
    4f86:	8c 2f       	mov	r24, r28
    4f88:	df 91       	pop	r29
    4f8a:	cf 91       	pop	r28
    4f8c:	e9 cf       	rjmp	.-46     	; 0x4f60 <_ZN10W5500Class7writeSnEhjh>

00004f8e <_ZN10W5500Class9writeSnIREhh>:
    4f8e:	46 2f       	mov	r20, r22
    4f90:	62 e0       	ldi	r22, 0x02	; 2
    4f92:	70 e0       	ldi	r23, 0x00	; 0
    4f94:	e5 cf       	rjmp	.-54     	; 0x4f60 <_ZN10W5500Class7writeSnEhjh>

00004f96 <_ZN10W5500Class12writeSnDPORTEhj>:
    4f96:	cf 93       	push	r28
    4f98:	df 93       	push	r29
    4f9a:	c8 2f       	mov	r28, r24
    4f9c:	d6 2f       	mov	r29, r22
    4f9e:	47 2f       	mov	r20, r23
    4fa0:	60 e1       	ldi	r22, 0x10	; 16
    4fa2:	70 e0       	ldi	r23, 0x00	; 0
    4fa4:	dd df       	rcall	.-70     	; 0x4f60 <_ZN10W5500Class7writeSnEhjh>
    4fa6:	4d 2f       	mov	r20, r29
    4fa8:	61 e1       	ldi	r22, 0x11	; 17
    4faa:	70 e0       	ldi	r23, 0x00	; 0
    4fac:	8c 2f       	mov	r24, r28
    4fae:	df 91       	pop	r29
    4fb0:	cf 91       	pop	r28
    4fb2:	d6 cf       	rjmp	.-84     	; 0x4f60 <_ZN10W5500Class7writeSnEhjh>

00004fb4 <_Z5closeh>:
    4fb4:	cf 93       	push	r28
    4fb6:	c8 2f       	mov	r28, r24
    4fb8:	40 e1       	ldi	r20, 0x10	; 16
    4fba:	68 2f       	mov	r22, r24
    4fbc:	83 e9       	ldi	r24, 0x93	; 147
    4fbe:	9d e0       	ldi	r25, 0x0D	; 13
    4fc0:	5f d3       	rcall	.+1726   	; 0x5680 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4fc2:	6f ef       	ldi	r22, 0xFF	; 255
    4fc4:	8c 2f       	mov	r24, r28
    4fc6:	cf 91       	pop	r28
    4fc8:	e2 cf       	rjmp	.-60     	; 0x4f8e <_ZN10W5500Class9writeSnIREhh>

00004fca <_Z6sockethhjh>:
    4fca:	ff 92       	push	r15
    4fcc:	0f 93       	push	r16
    4fce:	1f 93       	push	r17
    4fd0:	cf 93       	push	r28
    4fd2:	df 93       	push	r29
    4fd4:	9f ef       	ldi	r25, 0xFF	; 255
    4fd6:	96 0f       	add	r25, r22
    4fd8:	95 30       	cpi	r25, 0x05	; 5
    4fda:	18 f5       	brcc	.+70     	; 0x5022 <_Z6sockethhjh+0x58>
    4fdc:	d2 2f       	mov	r29, r18
    4fde:	8a 01       	movw	r16, r20
    4fe0:	f6 2e       	mov	r15, r22
    4fe2:	c8 2f       	mov	r28, r24
    4fe4:	e7 df       	rcall	.-50     	; 0x4fb4 <_Z5closeh>
    4fe6:	4f 2d       	mov	r20, r15
    4fe8:	4d 2b       	or	r20, r29
    4fea:	60 e0       	ldi	r22, 0x00	; 0
    4fec:	70 e0       	ldi	r23, 0x00	; 0
    4fee:	8c 2f       	mov	r24, r28
    4ff0:	b7 df       	rcall	.-146    	; 0x4f60 <_ZN10W5500Class7writeSnEhjh>
    4ff2:	01 15       	cp	r16, r1
    4ff4:	11 05       	cpc	r17, r1
    4ff6:	11 f0       	breq	.+4      	; 0x4ffc <_Z6sockethhjh+0x32>
    4ff8:	b8 01       	movw	r22, r16
    4ffa:	0a c0       	rjmp	.+20     	; 0x5010 <_Z6sockethhjh+0x46>
    4ffc:	60 91 8e 0d 	lds	r22, 0x0D8E	; 0x800d8e <_ZL10local_port>
    5000:	70 91 8f 0d 	lds	r23, 0x0D8F	; 0x800d8f <_ZL10local_port+0x1>
    5004:	6f 5f       	subi	r22, 0xFF	; 255
    5006:	7f 4f       	sbci	r23, 0xFF	; 255
    5008:	70 93 8f 0d 	sts	0x0D8F, r23	; 0x800d8f <_ZL10local_port+0x1>
    500c:	60 93 8e 0d 	sts	0x0D8E, r22	; 0x800d8e <_ZL10local_port>
    5010:	8c 2f       	mov	r24, r28
    5012:	ae df       	rcall	.-164    	; 0x4f70 <_ZN10W5500Class11writeSnPORTEhj>
    5014:	41 e0       	ldi	r20, 0x01	; 1
    5016:	6c 2f       	mov	r22, r28
    5018:	83 e9       	ldi	r24, 0x93	; 147
    501a:	9d e0       	ldi	r25, 0x0D	; 13
    501c:	31 d3       	rcall	.+1634   	; 0x5680 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    501e:	81 e0       	ldi	r24, 0x01	; 1
    5020:	01 c0       	rjmp	.+2      	; 0x5024 <_Z6sockethhjh+0x5a>
    5022:	80 e0       	ldi	r24, 0x00	; 0
    5024:	df 91       	pop	r29
    5026:	cf 91       	pop	r28
    5028:	1f 91       	pop	r17
    502a:	0f 91       	pop	r16
    502c:	ff 90       	pop	r15
    502e:	08 95       	ret

00005030 <_Z6listenh>:
    5030:	cf 93       	push	r28
    5032:	c8 2f       	mov	r28, r24
    5034:	63 e0       	ldi	r22, 0x03	; 3
    5036:	70 e0       	ldi	r23, 0x00	; 0
    5038:	88 df       	rcall	.-240    	; 0x4f4a <_ZN10W5500Class6readSnEhj>
    503a:	83 31       	cpi	r24, 0x13	; 19
    503c:	39 f4       	brne	.+14     	; 0x504c <_Z6listenh+0x1c>
    503e:	42 e0       	ldi	r20, 0x02	; 2
    5040:	6c 2f       	mov	r22, r28
    5042:	83 e9       	ldi	r24, 0x93	; 147
    5044:	9d e0       	ldi	r25, 0x0D	; 13
    5046:	1c d3       	rcall	.+1592   	; 0x5680 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5048:	81 e0       	ldi	r24, 0x01	; 1
    504a:	01 c0       	rjmp	.+2      	; 0x504e <_Z6listenh+0x1e>
    504c:	80 e0       	ldi	r24, 0x00	; 0
    504e:	cf 91       	pop	r28
    5050:	08 95       	ret

00005052 <_Z7connecthPhj>:
    5052:	0f 93       	push	r16
    5054:	1f 93       	push	r17
    5056:	cf 93       	push	r28
    5058:	fb 01       	movw	r30, r22
    505a:	90 81       	ld	r25, Z
    505c:	9f 3f       	cpi	r25, 0xFF	; 255
    505e:	51 f4       	brne	.+20     	; 0x5074 <_Z7connecthPhj+0x22>
    5060:	91 81       	ldd	r25, Z+1	; 0x01
    5062:	9f 3f       	cpi	r25, 0xFF	; 255
    5064:	91 f4       	brne	.+36     	; 0x508a <_Z7connecthPhj+0x38>
    5066:	92 81       	ldd	r25, Z+2	; 0x02
    5068:	9f 3f       	cpi	r25, 0xFF	; 255
    506a:	79 f4       	brne	.+30     	; 0x508a <_Z7connecthPhj+0x38>
    506c:	93 81       	ldd	r25, Z+3	; 0x03
    506e:	9f 3f       	cpi	r25, 0xFF	; 255
    5070:	61 f4       	brne	.+24     	; 0x508a <_Z7connecthPhj+0x38>
    5072:	1c c0       	rjmp	.+56     	; 0x50ac <_Z7connecthPhj+0x5a>
    5074:	91 11       	cpse	r25, r1
    5076:	09 c0       	rjmp	.+18     	; 0x508a <_Z7connecthPhj+0x38>
    5078:	91 81       	ldd	r25, Z+1	; 0x01
    507a:	91 11       	cpse	r25, r1
    507c:	06 c0       	rjmp	.+12     	; 0x508a <_Z7connecthPhj+0x38>
    507e:	92 81       	ldd	r25, Z+2	; 0x02
    5080:	91 11       	cpse	r25, r1
    5082:	03 c0       	rjmp	.+6      	; 0x508a <_Z7connecthPhj+0x38>
    5084:	93 81       	ldd	r25, Z+3	; 0x03
    5086:	99 23       	and	r25, r25
    5088:	91 f0       	breq	.+36     	; 0x50ae <_Z7connecthPhj+0x5c>
    508a:	41 15       	cp	r20, r1
    508c:	51 05       	cpc	r21, r1
    508e:	71 f0       	breq	.+28     	; 0x50ac <_Z7connecthPhj+0x5a>
    5090:	8a 01       	movw	r16, r20
    5092:	bf 01       	movw	r22, r30
    5094:	c8 2f       	mov	r28, r24
    5096:	4e df       	rcall	.-356    	; 0x4f34 <_ZN10W5500Class11writeSnDIPREhPh>
    5098:	b8 01       	movw	r22, r16
    509a:	8c 2f       	mov	r24, r28
    509c:	7c df       	rcall	.-264    	; 0x4f96 <_ZN10W5500Class12writeSnDPORTEhj>
    509e:	44 e0       	ldi	r20, 0x04	; 4
    50a0:	6c 2f       	mov	r22, r28
    50a2:	83 e9       	ldi	r24, 0x93	; 147
    50a4:	9d e0       	ldi	r25, 0x0D	; 13
    50a6:	ec d2       	rcall	.+1496   	; 0x5680 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    50a8:	91 e0       	ldi	r25, 0x01	; 1
    50aa:	01 c0       	rjmp	.+2      	; 0x50ae <_Z7connecthPhj+0x5c>
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	89 2f       	mov	r24, r25
    50b0:	cf 91       	pop	r28
    50b2:	1f 91       	pop	r17
    50b4:	0f 91       	pop	r16
    50b6:	08 95       	ret

000050b8 <_Z10disconnecth>:
    50b8:	48 e0       	ldi	r20, 0x08	; 8
    50ba:	68 2f       	mov	r22, r24
    50bc:	83 e9       	ldi	r24, 0x93	; 147
    50be:	9d e0       	ldi	r25, 0x0D	; 13
    50c0:	df c2       	rjmp	.+1470   	; 0x5680 <_ZN10W5500Class9execCmdSnEh7SockCMD>

000050c2 <_Z4sendhPKhj>:
    50c2:	cf 92       	push	r12
    50c4:	df 92       	push	r13
    50c6:	ef 92       	push	r14
    50c8:	ff 92       	push	r15
    50ca:	0f 93       	push	r16
    50cc:	1f 93       	push	r17
    50ce:	cf 93       	push	r28
    50d0:	c8 2f       	mov	r28, r24
    50d2:	7b 01       	movw	r14, r22
    50d4:	8a 01       	movw	r16, r20
    50d6:	41 30       	cpi	r20, 0x01	; 1
    50d8:	58 40       	sbci	r21, 0x08	; 8
    50da:	10 f0       	brcs	.+4      	; 0x50e0 <_Z4sendhPKhj+0x1e>
    50dc:	00 e0       	ldi	r16, 0x00	; 0
    50de:	18 e0       	ldi	r17, 0x08	; 8
    50e0:	6c 2f       	mov	r22, r28
    50e2:	83 e9       	ldi	r24, 0x93	; 147
    50e4:	9d e0       	ldi	r25, 0x0D	; 13
    50e6:	a9 d1       	rcall	.+850    	; 0x543a <_ZN10W5500Class13getTXFreeSizeEh>
    50e8:	6c 01       	movw	r12, r24
    50ea:	63 e0       	ldi	r22, 0x03	; 3
    50ec:	70 e0       	ldi	r23, 0x00	; 0
    50ee:	8c 2f       	mov	r24, r28
    50f0:	2c df       	rcall	.-424    	; 0x4f4a <_ZN10W5500Class6readSnEhj>
    50f2:	87 31       	cpi	r24, 0x17	; 23
    50f4:	11 f0       	breq	.+4      	; 0x50fa <_Z4sendhPKhj+0x38>
    50f6:	8c 31       	cpi	r24, 0x1C	; 28
    50f8:	21 f4       	brne	.+8      	; 0x5102 <_Z4sendhPKhj+0x40>
    50fa:	c0 16       	cp	r12, r16
    50fc:	d1 06       	cpc	r13, r17
    50fe:	80 f3       	brcs	.-32     	; 0x50e0 <_Z4sendhPKhj+0x1e>
    5100:	02 c0       	rjmp	.+4      	; 0x5106 <_Z4sendhPKhj+0x44>
    5102:	00 e0       	ldi	r16, 0x00	; 0
    5104:	10 e0       	ldi	r17, 0x00	; 0
    5106:	98 01       	movw	r18, r16
    5108:	a7 01       	movw	r20, r14
    510a:	6c 2f       	mov	r22, r28
    510c:	83 e9       	ldi	r24, 0x93	; 147
    510e:	9d e0       	ldi	r25, 0x0D	; 13
    5110:	19 d2       	rcall	.+1074   	; 0x5544 <_ZN10W5500Class20send_data_processingEhPKhj>
    5112:	40 e2       	ldi	r20, 0x20	; 32
    5114:	6c 2f       	mov	r22, r28
    5116:	83 e9       	ldi	r24, 0x93	; 147
    5118:	9d e0       	ldi	r25, 0x0D	; 13
    511a:	b2 d2       	rcall	.+1380   	; 0x5680 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    511c:	8c 2f       	mov	r24, r28
    511e:	1d df       	rcall	.-454    	; 0x4f5a <_ZN10W5500Class8readSnIREh>
    5120:	84 fd       	sbrc	r24, 4
    5122:	0b c0       	rjmp	.+22     	; 0x513a <_Z4sendhPKhj+0x78>
    5124:	63 e0       	ldi	r22, 0x03	; 3
    5126:	70 e0       	ldi	r23, 0x00	; 0
    5128:	8c 2f       	mov	r24, r28
    512a:	0f df       	rcall	.-482    	; 0x4f4a <_ZN10W5500Class6readSnEhj>
    512c:	81 11       	cpse	r24, r1
    512e:	f6 cf       	rjmp	.-20     	; 0x511c <_Z4sendhPKhj+0x5a>
    5130:	8c 2f       	mov	r24, r28
    5132:	40 df       	rcall	.-384    	; 0x4fb4 <_Z5closeh>
    5134:	80 e0       	ldi	r24, 0x00	; 0
    5136:	90 e0       	ldi	r25, 0x00	; 0
    5138:	04 c0       	rjmp	.+8      	; 0x5142 <_Z4sendhPKhj+0x80>
    513a:	60 e1       	ldi	r22, 0x10	; 16
    513c:	8c 2f       	mov	r24, r28
    513e:	27 df       	rcall	.-434    	; 0x4f8e <_ZN10W5500Class9writeSnIREhh>
    5140:	c8 01       	movw	r24, r16
    5142:	cf 91       	pop	r28
    5144:	1f 91       	pop	r17
    5146:	0f 91       	pop	r16
    5148:	ff 90       	pop	r15
    514a:	ef 90       	pop	r14
    514c:	df 90       	pop	r13
    514e:	cf 90       	pop	r12
    5150:	08 95       	ret

00005152 <_Z4recvhPhi>:
    5152:	cf 92       	push	r12
    5154:	df 92       	push	r13
    5156:	ef 92       	push	r14
    5158:	ff 92       	push	r15
    515a:	0f 93       	push	r16
    515c:	1f 93       	push	r17
    515e:	cf 93       	push	r28
    5160:	df 93       	push	r29
    5162:	18 2f       	mov	r17, r24
    5164:	6b 01       	movw	r12, r22
    5166:	7a 01       	movw	r14, r20
    5168:	68 2f       	mov	r22, r24
    516a:	83 e9       	ldi	r24, 0x93	; 147
    516c:	9d e0       	ldi	r25, 0x0D	; 13
    516e:	96 d1       	rcall	.+812    	; 0x549c <_ZN10W5500Class17getRXReceivedSizeEh>
    5170:	ec 01       	movw	r28, r24
    5172:	00 97       	sbiw	r24, 0x00	; 0
    5174:	91 f4       	brne	.+36     	; 0x519a <_Z4recvhPhi+0x48>
    5176:	63 e0       	ldi	r22, 0x03	; 3
    5178:	70 e0       	ldi	r23, 0x00	; 0
    517a:	81 2f       	mov	r24, r17
    517c:	e6 de       	rcall	.-564    	; 0x4f4a <_ZN10W5500Class6readSnEhj>
    517e:	84 31       	cpi	r24, 0x14	; 20
    5180:	f9 f0       	breq	.+62     	; 0x51c0 <_Z4recvhPhi+0x6e>
    5182:	88 23       	and	r24, r24
    5184:	e9 f0       	breq	.+58     	; 0x51c0 <_Z4recvhPhi+0x6e>
    5186:	c1 e0       	ldi	r28, 0x01	; 1
    5188:	d0 e0       	ldi	r29, 0x00	; 0
    518a:	8c 31       	cpi	r24, 0x1C	; 28
    518c:	11 f4       	brne	.+4      	; 0x5192 <_Z4recvhPhi+0x40>
    518e:	c0 e0       	ldi	r28, 0x00	; 0
    5190:	d0 e0       	ldi	r29, 0x00	; 0
    5192:	d1 95       	neg	r29
    5194:	c1 95       	neg	r28
    5196:	d1 09       	sbc	r29, r1
    5198:	13 c0       	rjmp	.+38     	; 0x51c0 <_Z4recvhPhi+0x6e>
    519a:	e8 16       	cp	r14, r24
    519c:	f9 06       	cpc	r15, r25
    519e:	0c f4       	brge	.+2      	; 0x51a2 <_Z4recvhPhi+0x50>
    51a0:	e7 01       	movw	r28, r14
    51a2:	1c 16       	cp	r1, r28
    51a4:	1d 06       	cpc	r1, r29
    51a6:	64 f4       	brge	.+24     	; 0x51c0 <_Z4recvhPhi+0x6e>
    51a8:	00 e0       	ldi	r16, 0x00	; 0
    51aa:	9e 01       	movw	r18, r28
    51ac:	a6 01       	movw	r20, r12
    51ae:	61 2f       	mov	r22, r17
    51b0:	83 e9       	ldi	r24, 0x93	; 147
    51b2:	9d e0       	ldi	r25, 0x0D	; 13
    51b4:	18 d2       	rcall	.+1072   	; 0x55e6 <_ZN10W5500Class20recv_data_processingEhPhjh>
    51b6:	40 e4       	ldi	r20, 0x40	; 64
    51b8:	61 2f       	mov	r22, r17
    51ba:	83 e9       	ldi	r24, 0x93	; 147
    51bc:	9d e0       	ldi	r25, 0x0D	; 13
    51be:	60 d2       	rcall	.+1216   	; 0x5680 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    51c0:	ce 01       	movw	r24, r28
    51c2:	df 91       	pop	r29
    51c4:	cf 91       	pop	r28
    51c6:	1f 91       	pop	r17
    51c8:	0f 91       	pop	r16
    51ca:	ff 90       	pop	r15
    51cc:	ef 90       	pop	r14
    51ce:	df 90       	pop	r13
    51d0:	cf 90       	pop	r12
    51d2:	08 95       	ret

000051d4 <_Z4peekhPh>:
    51d4:	0f 93       	push	r16
    51d6:	ab 01       	movw	r20, r22
    51d8:	01 e0       	ldi	r16, 0x01	; 1
    51da:	21 e0       	ldi	r18, 0x01	; 1
    51dc:	30 e0       	ldi	r19, 0x00	; 0
    51de:	68 2f       	mov	r22, r24
    51e0:	83 e9       	ldi	r24, 0x93	; 147
    51e2:	9d e0       	ldi	r25, 0x0D	; 13
    51e4:	00 d2       	rcall	.+1024   	; 0x55e6 <_ZN10W5500Class20recv_data_processingEhPhjh>
    51e6:	81 e0       	ldi	r24, 0x01	; 1
    51e8:	90 e0       	ldi	r25, 0x00	; 0
    51ea:	0f 91       	pop	r16
    51ec:	08 95       	ret

000051ee <_Z5flushh>:
    51ee:	08 95       	ret

000051f0 <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    51f0:	af 92       	push	r10
    51f2:	bf 92       	push	r11
    51f4:	cf 92       	push	r12
    51f6:	df 92       	push	r13
    51f8:	ff 92       	push	r15
    51fa:	0f 93       	push	r16
    51fc:	1f 93       	push	r17
    51fe:	cf 93       	push	r28
    5200:	df 93       	push	r29
    5202:	f8 2e       	mov	r15, r24
    5204:	6b 01       	movw	r12, r22
    5206:	5a 01       	movw	r10, r20
    5208:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    520a:	68 2f       	mov	r22, r24
    520c:	83 e9       	ldi	r24, 0x93	; 147
    520e:	9d e0       	ldi	r25, 0x0D	; 13
    5210:	14 d1       	rcall	.+552    	; 0x543a <_ZN10W5500Class13getTXFreeSizeEh>
    5212:	8c 17       	cp	r24, r28
    5214:	9d 07       	cpc	r25, r29
    5216:	28 f4       	brcc	.+10     	; 0x5222 <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    5218:	6f 2d       	mov	r22, r15
    521a:	83 e9       	ldi	r24, 0x93	; 147
    521c:	9d e0       	ldi	r25, 0x0D	; 13
    521e:	0d d1       	rcall	.+538    	; 0x543a <_ZN10W5500Class13getTXFreeSizeEh>
    5220:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    5222:	8e 01       	movw	r16, r28
    5224:	95 01       	movw	r18, r10
    5226:	a6 01       	movw	r20, r12
    5228:	6f 2d       	mov	r22, r15
    522a:	83 e9       	ldi	r24, 0x93	; 147
    522c:	9d e0       	ldi	r25, 0x0D	; 13
    522e:	50 d1       	rcall	.+672    	; 0x54d0 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    5230:	ce 01       	movw	r24, r28
    5232:	df 91       	pop	r29
    5234:	cf 91       	pop	r28
    5236:	1f 91       	pop	r17
    5238:	0f 91       	pop	r16
    523a:	ff 90       	pop	r15
    523c:	df 90       	pop	r13
    523e:	cf 90       	pop	r12
    5240:	bf 90       	pop	r11
    5242:	af 90       	pop	r10
    5244:	08 95       	ret

00005246 <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    5246:	0f 93       	push	r16
    5248:	1f 93       	push	r17
    524a:	cf 93       	push	r28
    524c:	fb 01       	movw	r30, r22
  if
    524e:	90 81       	ld	r25, Z
    5250:	91 11       	cpse	r25, r1
    5252:	09 c0       	rjmp	.+18     	; 0x5266 <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    5254:	91 81       	ldd	r25, Z+1	; 0x01
    5256:	91 11       	cpse	r25, r1
    5258:	06 c0       	rjmp	.+12     	; 0x5266 <_Z8startUDPhPhj+0x20>
    525a:	92 81       	ldd	r25, Z+2	; 0x02
    525c:	91 11       	cpse	r25, r1
    525e:	03 c0       	rjmp	.+6      	; 0x5266 <_Z8startUDPhPhj+0x20>
    5260:	93 81       	ldd	r25, Z+3	; 0x03
    5262:	99 23       	and	r25, r25
    5264:	69 f0       	breq	.+26     	; 0x5280 <_Z8startUDPhPhj+0x3a>
    5266:	41 15       	cp	r20, r1
    5268:	51 05       	cpc	r21, r1
    526a:	51 f0       	breq	.+20     	; 0x5280 <_Z8startUDPhPhj+0x3a>
    526c:	8a 01       	movw	r16, r20
    526e:	bf 01       	movw	r22, r30
    5270:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    5272:	60 de       	rcall	.-832    	; 0x4f34 <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    5274:	b8 01       	movw	r22, r16
    5276:	8c 2f       	mov	r24, r28
    5278:	8e de       	rcall	.-740    	; 0x4f96 <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    527a:	81 e0       	ldi	r24, 0x01	; 1
    527c:	90 e0       	ldi	r25, 0x00	; 0
    527e:	02 c0       	rjmp	.+4      	; 0x5284 <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    5280:	80 e0       	ldi	r24, 0x00	; 0
    5282:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    5284:	cf 91       	pop	r28
    5286:	1f 91       	pop	r17
    5288:	0f 91       	pop	r16
    528a:	08 95       	ret

0000528c <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    528c:	cf 93       	push	r28
    528e:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    5290:	40 e2       	ldi	r20, 0x20	; 32
    5292:	68 2f       	mov	r22, r24
    5294:	83 e9       	ldi	r24, 0x93	; 147
    5296:	9d e0       	ldi	r25, 0x0D	; 13
    5298:	f3 d1       	rcall	.+998    	; 0x5680 <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    529a:	8c 2f       	mov	r24, r28
    529c:	5e de       	rcall	.-836    	; 0x4f5a <_ZN10W5500Class8readSnIREh>
    529e:	84 fd       	sbrc	r24, 4
    52a0:	0a c0       	rjmp	.+20     	; 0x52b6 <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    52a2:	8c 2f       	mov	r24, r28
    52a4:	5a de       	rcall	.-844    	; 0x4f5a <_ZN10W5500Class8readSnIREh>
    52a6:	83 ff       	sbrs	r24, 3
    52a8:	f8 cf       	rjmp	.-16     	; 0x529a <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    52aa:	68 e1       	ldi	r22, 0x18	; 24
    52ac:	8c 2f       	mov	r24, r28
    52ae:	6f de       	rcall	.-802    	; 0x4f8e <_ZN10W5500Class9writeSnIREhh>
    52b0:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    52b2:	90 e0       	ldi	r25, 0x00	; 0
    52b4:	05 c0       	rjmp	.+10     	; 0x52c0 <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    52b6:	60 e1       	ldi	r22, 0x10	; 16
    52b8:	8c 2f       	mov	r24, r28
    52ba:	69 de       	rcall	.-814    	; 0x4f8e <_ZN10W5500Class9writeSnIREhh>
    52bc:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    52be:	90 e0       	ldi	r25, 0x00	; 0
    52c0:	cf 91       	pop	r28
}
    52c2:	08 95       	ret

000052c4 <_ZN8SPIClass8transferEh>:
    52c4:	8e bd       	out	0x2e, r24	; 46
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    52c6:	00 00       	nop
    52c8:	0d b4       	in	r0, 0x2d	; 45
    52ca:	07 fe       	sbrs	r0, 7
    52cc:	fd cf       	rjmp	.-6      	; 0x52c8 <_ZN8SPIClass8transferEh+0x4>
    52ce:	8e b5       	in	r24, 0x2e	; 46
    52d0:	08 95       	ret

000052d2 <_ZN10W5500Class5setSSEv>:
    52d2:	44 98       	cbi	0x08, 4	; 8
    52d4:	08 95       	ret

000052d6 <_ZN10W5500Class7resetSSEv>:
    52d6:	44 9a       	sbi	0x08, 4	; 8
    52d8:	08 95       	ret

000052da <_ZN10W5500Class5writeEjhh>:
    52da:	0f 93       	push	r16
    52dc:	1f 93       	push	r17
    52de:	cf 93       	push	r28
    52e0:	df 93       	push	r29
    52e2:	18 2f       	mov	r17, r24
    52e4:	09 2f       	mov	r16, r25
    52e6:	d6 2f       	mov	r29, r22
    52e8:	c4 2f       	mov	r28, r20
    52ea:	80 91 91 0d 	lds	r24, 0x0D91	; 0x800d91 <wiznet_SPI_settings>
    52ee:	90 91 92 0d 	lds	r25, 0x0D92	; 0x800d92 <wiznet_SPI_settings+0x1>
    52f2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN8SPIClass16beginTransactionE11SPISettings>
    52f6:	ed df       	rcall	.-38     	; 0x52d2 <_ZN10W5500Class5setSSEv>
    52f8:	80 2f       	mov	r24, r16
    52fa:	e4 df       	rcall	.-56     	; 0x52c4 <_ZN8SPIClass8transferEh>
    52fc:	81 2f       	mov	r24, r17
    52fe:	e2 df       	rcall	.-60     	; 0x52c4 <_ZN8SPIClass8transferEh>
    5300:	8d 2f       	mov	r24, r29
    5302:	e0 df       	rcall	.-64     	; 0x52c4 <_ZN8SPIClass8transferEh>
    5304:	8c 2f       	mov	r24, r28
    5306:	de df       	rcall	.-68     	; 0x52c4 <_ZN8SPIClass8transferEh>
    5308:	e6 df       	rcall	.-52     	; 0x52d6 <_ZN10W5500Class7resetSSEv>
    530a:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_ZN8SPIClass14endTransactionEv>
    530e:	81 e0       	ldi	r24, 0x01	; 1
    5310:	df 91       	pop	r29
    5312:	cf 91       	pop	r28
    5314:	1f 91       	pop	r17
    5316:	0f 91       	pop	r16
    5318:	08 95       	ret

0000531a <_ZN10W5500Class5writeEjhPKhj>:
    531a:	df 92       	push	r13
    531c:	ef 92       	push	r14
    531e:	ff 92       	push	r15
    5320:	0f 93       	push	r16
    5322:	1f 93       	push	r17
    5324:	cf 93       	push	r28
    5326:	df 93       	push	r29
    5328:	d8 2f       	mov	r29, r24
    532a:	d9 2e       	mov	r13, r25
    532c:	c6 2f       	mov	r28, r22
    532e:	7a 01       	movw	r14, r20
    5330:	89 01       	movw	r16, r18
    5332:	80 91 91 0d 	lds	r24, 0x0D91	; 0x800d91 <wiznet_SPI_settings>
    5336:	90 91 92 0d 	lds	r25, 0x0D92	; 0x800d92 <wiznet_SPI_settings+0x1>
    533a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN8SPIClass16beginTransactionE11SPISettings>
    533e:	c9 df       	rcall	.-110    	; 0x52d2 <_ZN10W5500Class5setSSEv>
    5340:	8d 2d       	mov	r24, r13
    5342:	c0 df       	rcall	.-128    	; 0x52c4 <_ZN8SPIClass8transferEh>
    5344:	8d 2f       	mov	r24, r29
    5346:	be df       	rcall	.-132    	; 0x52c4 <_ZN8SPIClass8transferEh>
    5348:	8c 2f       	mov	r24, r28
    534a:	bc df       	rcall	.-136    	; 0x52c4 <_ZN8SPIClass8transferEh>
    534c:	e7 01       	movw	r28, r14
    534e:	e0 0e       	add	r14, r16
    5350:	f1 1e       	adc	r15, r17
    5352:	ce 15       	cp	r28, r14
    5354:	df 05       	cpc	r29, r15
    5356:	19 f0       	breq	.+6      	; 0x535e <_ZN10W5500Class5writeEjhPKhj+0x44>
    5358:	89 91       	ld	r24, Y+
    535a:	b4 df       	rcall	.-152    	; 0x52c4 <_ZN8SPIClass8transferEh>
    535c:	fa cf       	rjmp	.-12     	; 0x5352 <_ZN10W5500Class5writeEjhPKhj+0x38>
    535e:	bb df       	rcall	.-138    	; 0x52d6 <_ZN10W5500Class7resetSSEv>
    5360:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_ZN8SPIClass14endTransactionEv>
    5364:	c8 01       	movw	r24, r16
    5366:	df 91       	pop	r29
    5368:	cf 91       	pop	r28
    536a:	1f 91       	pop	r17
    536c:	0f 91       	pop	r16
    536e:	ff 90       	pop	r15
    5370:	ef 90       	pop	r14
    5372:	df 90       	pop	r13
    5374:	08 95       	ret

00005376 <_ZN10W5500Class4readEjh>:
    5376:	1f 93       	push	r17
    5378:	cf 93       	push	r28
    537a:	df 93       	push	r29
    537c:	d8 2f       	mov	r29, r24
    537e:	19 2f       	mov	r17, r25
    5380:	c6 2f       	mov	r28, r22
    5382:	80 91 91 0d 	lds	r24, 0x0D91	; 0x800d91 <wiznet_SPI_settings>
    5386:	90 91 92 0d 	lds	r25, 0x0D92	; 0x800d92 <wiznet_SPI_settings+0x1>
    538a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN8SPIClass16beginTransactionE11SPISettings>
    538e:	a1 df       	rcall	.-190    	; 0x52d2 <_ZN10W5500Class5setSSEv>
    5390:	81 2f       	mov	r24, r17
    5392:	98 df       	rcall	.-208    	; 0x52c4 <_ZN8SPIClass8transferEh>
    5394:	8d 2f       	mov	r24, r29
    5396:	96 df       	rcall	.-212    	; 0x52c4 <_ZN8SPIClass8transferEh>
    5398:	8c 2f       	mov	r24, r28
    539a:	94 df       	rcall	.-216    	; 0x52c4 <_ZN8SPIClass8transferEh>
    539c:	80 e0       	ldi	r24, 0x00	; 0
    539e:	92 df       	rcall	.-220    	; 0x52c4 <_ZN8SPIClass8transferEh>
    53a0:	c8 2f       	mov	r28, r24
    53a2:	99 df       	rcall	.-206    	; 0x52d6 <_ZN10W5500Class7resetSSEv>
    53a4:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_ZN8SPIClass14endTransactionEv>
    53a8:	8c 2f       	mov	r24, r28
    53aa:	df 91       	pop	r29
    53ac:	cf 91       	pop	r28
    53ae:	1f 91       	pop	r17
    53b0:	08 95       	ret

000053b2 <_ZN10W5500Class4initEh>:
    53b2:	cf 93       	push	r28
    53b4:	df 93       	push	r29
    53b6:	60 93 90 0d 	sts	0x0D90, r22	; 0x800d90 <SPI_CS>
    53ba:	68 ee       	ldi	r22, 0xE8	; 232
    53bc:	73 e0       	ldi	r23, 0x03	; 3
    53be:	80 e0       	ldi	r24, 0x00	; 0
    53c0:	90 e0       	ldi	r25, 0x00	; 0
    53c2:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>
    53c6:	3c 9a       	sbi	0x07, 4	; 7
    53c8:	0e 94 8c 33 	call	0x6718	; 0x6718 <_ZN8SPIClass5beginEv>
    53cc:	60 e0       	ldi	r22, 0x00	; 0
    53ce:	80 e0       	ldi	r24, 0x00	; 0
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	d1 df       	rcall	.-94     	; 0x5376 <_ZN10W5500Class4readEjh>
    53d4:	48 2f       	mov	r20, r24
    53d6:	40 68       	ori	r20, 0x80	; 128
    53d8:	64 e0       	ldi	r22, 0x04	; 4
    53da:	80 e0       	ldi	r24, 0x00	; 0
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	7d df       	rcall	.-262    	; 0x52da <_ZN10W5500Class5writeEjhh>
    53e0:	c0 e0       	ldi	r28, 0x00	; 0
    53e2:	dc 2f       	mov	r29, r28
    53e4:	d2 95       	swap	r29
    53e6:	dd 0f       	add	r29, r29
    53e8:	d0 7e       	andi	r29, 0xE0	; 224
    53ea:	d4 5f       	subi	r29, 0xF4	; 244
    53ec:	42 e0       	ldi	r20, 0x02	; 2
    53ee:	6d 2f       	mov	r22, r29
    53f0:	8e e1       	ldi	r24, 0x1E	; 30
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	72 df       	rcall	.-284    	; 0x52da <_ZN10W5500Class5writeEjhh>
    53f6:	42 e0       	ldi	r20, 0x02	; 2
    53f8:	6d 2f       	mov	r22, r29
    53fa:	8f e1       	ldi	r24, 0x1F	; 31
    53fc:	90 e0       	ldi	r25, 0x00	; 0
    53fe:	6d df       	rcall	.-294    	; 0x52da <_ZN10W5500Class5writeEjhh>
    5400:	cf 5f       	subi	r28, 0xFF	; 255
    5402:	c8 30       	cpi	r28, 0x08	; 8
    5404:	71 f7       	brne	.-36     	; 0x53e2 <_ZN10W5500Class4initEh+0x30>
    5406:	df 91       	pop	r29
    5408:	cf 91       	pop	r28
    540a:	08 95       	ret

0000540c <_ZN10W5500Class12readSnTX_FSREh>:
    540c:	1f 93       	push	r17
    540e:	cf 93       	push	r28
    5410:	df 93       	push	r29
    5412:	18 2f       	mov	r17, r24
    5414:	60 e2       	ldi	r22, 0x20	; 32
    5416:	70 e0       	ldi	r23, 0x00	; 0
    5418:	98 dd       	rcall	.-1232   	; 0x4f4a <_ZN10W5500Class6readSnEhj>
    541a:	c8 2f       	mov	r28, r24
    541c:	d0 e0       	ldi	r29, 0x00	; 0
    541e:	dc 2f       	mov	r29, r28
    5420:	cc 27       	eor	r28, r28
    5422:	61 e2       	ldi	r22, 0x21	; 33
    5424:	70 e0       	ldi	r23, 0x00	; 0
    5426:	81 2f       	mov	r24, r17
    5428:	90 dd       	rcall	.-1248   	; 0x4f4a <_ZN10W5500Class6readSnEhj>
    542a:	9e 01       	movw	r18, r28
    542c:	28 0f       	add	r18, r24
    542e:	31 1d       	adc	r19, r1
    5430:	c9 01       	movw	r24, r18
    5432:	df 91       	pop	r29
    5434:	cf 91       	pop	r28
    5436:	1f 91       	pop	r17
    5438:	08 95       	ret

0000543a <_ZN10W5500Class13getTXFreeSizeEh>:
    543a:	ff 92       	push	r15
    543c:	0f 93       	push	r16
    543e:	1f 93       	push	r17
    5440:	cf 93       	push	r28
    5442:	df 93       	push	r29
    5444:	f6 2e       	mov	r15, r22
    5446:	c0 e0       	ldi	r28, 0x00	; 0
    5448:	d0 e0       	ldi	r29, 0x00	; 0
    544a:	8f 2d       	mov	r24, r15
    544c:	df df       	rcall	.-66     	; 0x540c <_ZN10W5500Class12readSnTX_FSREh>
    544e:	8c 01       	movw	r16, r24
    5450:	89 2b       	or	r24, r25
    5452:	19 f0       	breq	.+6      	; 0x545a <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    5454:	8f 2d       	mov	r24, r15
    5456:	da df       	rcall	.-76     	; 0x540c <_ZN10W5500Class12readSnTX_FSREh>
    5458:	ec 01       	movw	r28, r24
    545a:	c0 17       	cp	r28, r16
    545c:	d1 07       	cpc	r29, r17
    545e:	a9 f7       	brne	.-22     	; 0x544a <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    5460:	ce 01       	movw	r24, r28
    5462:	df 91       	pop	r29
    5464:	cf 91       	pop	r28
    5466:	1f 91       	pop	r17
    5468:	0f 91       	pop	r16
    546a:	ff 90       	pop	r15
    546c:	08 95       	ret

0000546e <_ZN10W5500Class12readSnRX_RSREh>:
    546e:	1f 93       	push	r17
    5470:	cf 93       	push	r28
    5472:	df 93       	push	r29
    5474:	18 2f       	mov	r17, r24
    5476:	66 e2       	ldi	r22, 0x26	; 38
    5478:	70 e0       	ldi	r23, 0x00	; 0
    547a:	67 dd       	rcall	.-1330   	; 0x4f4a <_ZN10W5500Class6readSnEhj>
    547c:	c8 2f       	mov	r28, r24
    547e:	d0 e0       	ldi	r29, 0x00	; 0
    5480:	dc 2f       	mov	r29, r28
    5482:	cc 27       	eor	r28, r28
    5484:	67 e2       	ldi	r22, 0x27	; 39
    5486:	70 e0       	ldi	r23, 0x00	; 0
    5488:	81 2f       	mov	r24, r17
    548a:	5f dd       	rcall	.-1346   	; 0x4f4a <_ZN10W5500Class6readSnEhj>
    548c:	9e 01       	movw	r18, r28
    548e:	28 0f       	add	r18, r24
    5490:	31 1d       	adc	r19, r1
    5492:	c9 01       	movw	r24, r18
    5494:	df 91       	pop	r29
    5496:	cf 91       	pop	r28
    5498:	1f 91       	pop	r17
    549a:	08 95       	ret

0000549c <_ZN10W5500Class17getRXReceivedSizeEh>:
    549c:	ff 92       	push	r15
    549e:	0f 93       	push	r16
    54a0:	1f 93       	push	r17
    54a2:	cf 93       	push	r28
    54a4:	df 93       	push	r29
    54a6:	f6 2e       	mov	r15, r22
    54a8:	c0 e0       	ldi	r28, 0x00	; 0
    54aa:	d0 e0       	ldi	r29, 0x00	; 0
    54ac:	8f 2d       	mov	r24, r15
    54ae:	df df       	rcall	.-66     	; 0x546e <_ZN10W5500Class12readSnRX_RSREh>
    54b0:	8c 01       	movw	r16, r24
    54b2:	89 2b       	or	r24, r25
    54b4:	19 f0       	breq	.+6      	; 0x54bc <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    54b6:	8f 2d       	mov	r24, r15
    54b8:	da df       	rcall	.-76     	; 0x546e <_ZN10W5500Class12readSnRX_RSREh>
    54ba:	ec 01       	movw	r28, r24
    54bc:	c0 17       	cp	r28, r16
    54be:	d1 07       	cpc	r29, r17
    54c0:	a9 f7       	brne	.-22     	; 0x54ac <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    54c2:	ce 01       	movw	r24, r28
    54c4:	df 91       	pop	r29
    54c6:	cf 91       	pop	r28
    54c8:	1f 91       	pop	r17
    54ca:	0f 91       	pop	r16
    54cc:	ff 90       	pop	r15
    54ce:	08 95       	ret

000054d0 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    54d0:	af 92       	push	r10
    54d2:	bf 92       	push	r11
    54d4:	df 92       	push	r13
    54d6:	ef 92       	push	r14
    54d8:	ff 92       	push	r15
    54da:	0f 93       	push	r16
    54dc:	1f 93       	push	r17
    54de:	cf 93       	push	r28
    54e0:	df 93       	push	r29
    54e2:	d6 2e       	mov	r13, r22
    54e4:	7a 01       	movw	r14, r20
    54e6:	59 01       	movw	r10, r18
    54e8:	64 e2       	ldi	r22, 0x24	; 36
    54ea:	70 e0       	ldi	r23, 0x00	; 0
    54ec:	8d 2d       	mov	r24, r13
    54ee:	2d dd       	rcall	.-1446   	; 0x4f4a <_ZN10W5500Class6readSnEhj>
    54f0:	c8 2f       	mov	r28, r24
    54f2:	65 e2       	ldi	r22, 0x25	; 37
    54f4:	70 e0       	ldi	r23, 0x00	; 0
    54f6:	8d 2d       	mov	r24, r13
    54f8:	28 dd       	rcall	.-1456   	; 0x4f4a <_ZN10W5500Class6readSnEhj>
    54fa:	d0 e0       	ldi	r29, 0x00	; 0
    54fc:	dc 2f       	mov	r29, r28
    54fe:	cc 27       	eor	r28, r28
    5500:	e8 0e       	add	r14, r24
    5502:	f1 1c       	adc	r15, r1
    5504:	ce 0d       	add	r28, r14
    5506:	df 1d       	adc	r29, r15
    5508:	6d 2d       	mov	r22, r13
    550a:	62 95       	swap	r22
    550c:	66 0f       	add	r22, r22
    550e:	60 7e       	andi	r22, 0xE0	; 224
    5510:	6c 5e       	subi	r22, 0xEC	; 236
    5512:	98 01       	movw	r18, r16
    5514:	a5 01       	movw	r20, r10
    5516:	ce 01       	movw	r24, r28
    5518:	00 df       	rcall	.-512    	; 0x531a <_ZN10W5500Class5writeEjhPKhj>
    551a:	c0 0f       	add	r28, r16
    551c:	d1 1f       	adc	r29, r17
    551e:	4d 2f       	mov	r20, r29
    5520:	64 e2       	ldi	r22, 0x24	; 36
    5522:	70 e0       	ldi	r23, 0x00	; 0
    5524:	8d 2d       	mov	r24, r13
    5526:	1c dd       	rcall	.-1480   	; 0x4f60 <_ZN10W5500Class7writeSnEhjh>
    5528:	4c 2f       	mov	r20, r28
    552a:	65 e2       	ldi	r22, 0x25	; 37
    552c:	70 e0       	ldi	r23, 0x00	; 0
    552e:	8d 2d       	mov	r24, r13
    5530:	df 91       	pop	r29
    5532:	cf 91       	pop	r28
    5534:	1f 91       	pop	r17
    5536:	0f 91       	pop	r16
    5538:	ff 90       	pop	r15
    553a:	ef 90       	pop	r14
    553c:	df 90       	pop	r13
    553e:	bf 90       	pop	r11
    5540:	af 90       	pop	r10
    5542:	0e cd       	rjmp	.-1508   	; 0x4f60 <_ZN10W5500Class7writeSnEhjh>

00005544 <_ZN10W5500Class20send_data_processingEhPKhj>:
    5544:	0f 93       	push	r16
    5546:	1f 93       	push	r17
    5548:	89 01       	movw	r16, r18
    554a:	9a 01       	movw	r18, r20
    554c:	40 e0       	ldi	r20, 0x00	; 0
    554e:	50 e0       	ldi	r21, 0x00	; 0
    5550:	bf df       	rcall	.-130    	; 0x54d0 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    5552:	1f 91       	pop	r17
    5554:	0f 91       	pop	r16
    5556:	08 95       	ret

00005558 <_ZN10W5500Class4readEjhPhj>:
    5558:	df 92       	push	r13
    555a:	ef 92       	push	r14
    555c:	ff 92       	push	r15
    555e:	0f 93       	push	r16
    5560:	1f 93       	push	r17
    5562:	cf 93       	push	r28
    5564:	df 93       	push	r29
    5566:	d8 2f       	mov	r29, r24
    5568:	d9 2e       	mov	r13, r25
    556a:	c6 2f       	mov	r28, r22
    556c:	7a 01       	movw	r14, r20
    556e:	89 01       	movw	r16, r18
    5570:	80 91 91 0d 	lds	r24, 0x0D91	; 0x800d91 <wiznet_SPI_settings>
    5574:	90 91 92 0d 	lds	r25, 0x0D92	; 0x800d92 <wiznet_SPI_settings+0x1>
    5578:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN8SPIClass16beginTransactionE11SPISettings>
    557c:	aa de       	rcall	.-684    	; 0x52d2 <_ZN10W5500Class5setSSEv>
    557e:	8d 2d       	mov	r24, r13
    5580:	a1 de       	rcall	.-702    	; 0x52c4 <_ZN8SPIClass8transferEh>
    5582:	8d 2f       	mov	r24, r29
    5584:	9f de       	rcall	.-706    	; 0x52c4 <_ZN8SPIClass8transferEh>
    5586:	8c 2f       	mov	r24, r28
    5588:	9d de       	rcall	.-710    	; 0x52c4 <_ZN8SPIClass8transferEh>
    558a:	e7 01       	movw	r28, r14
    558c:	e0 0e       	add	r14, r16
    558e:	f1 1e       	adc	r15, r17
    5590:	ce 15       	cp	r28, r14
    5592:	df 05       	cpc	r29, r15
    5594:	21 f0       	breq	.+8      	; 0x559e <_ZN10W5500Class4readEjhPhj+0x46>
    5596:	80 e0       	ldi	r24, 0x00	; 0
    5598:	95 de       	rcall	.-726    	; 0x52c4 <_ZN8SPIClass8transferEh>
    559a:	89 93       	st	Y+, r24
    559c:	f9 cf       	rjmp	.-14     	; 0x5590 <_ZN10W5500Class4readEjhPhj+0x38>
    559e:	9b de       	rcall	.-714    	; 0x52d6 <_ZN10W5500Class7resetSSEv>
    55a0:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_ZN8SPIClass14endTransactionEv>
    55a4:	c8 01       	movw	r24, r16
    55a6:	df 91       	pop	r29
    55a8:	cf 91       	pop	r28
    55aa:	1f 91       	pop	r17
    55ac:	0f 91       	pop	r16
    55ae:	ff 90       	pop	r15
    55b0:	ef 90       	pop	r14
    55b2:	df 90       	pop	r13
    55b4:	08 95       	ret

000055b6 <_ZN10W5500Class9read_dataEhjPVhj>:
    55b6:	0f 93       	push	r16
    55b8:	1f 93       	push	r17
    55ba:	cf 93       	push	r28
    55bc:	df 93       	push	r29
    55be:	00 d0       	rcall	.+0      	; 0x55c0 <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    55c0:	cd b7       	in	r28, 0x3d	; 61
    55c2:	de b7       	in	r29, 0x3e	; 62
    55c4:	5a 83       	std	Y+2, r21	; 0x02
    55c6:	49 83       	std	Y+1, r20	; 0x01
    55c8:	a9 01       	movw	r20, r18
    55ca:	98 01       	movw	r18, r16
    55cc:	89 81       	ldd	r24, Y+1	; 0x01
    55ce:	9a 81       	ldd	r25, Y+2	; 0x02
    55d0:	62 95       	swap	r22
    55d2:	66 0f       	add	r22, r22
    55d4:	60 7e       	andi	r22, 0xE0	; 224
    55d6:	68 5e       	subi	r22, 0xE8	; 232
    55d8:	0f 90       	pop	r0
    55da:	0f 90       	pop	r0
    55dc:	df 91       	pop	r29
    55de:	cf 91       	pop	r28
    55e0:	1f 91       	pop	r17
    55e2:	0f 91       	pop	r16
    55e4:	b9 cf       	rjmp	.-142    	; 0x5558 <_ZN10W5500Class4readEjhPhj>

000055e6 <_ZN10W5500Class20recv_data_processingEhPhjh>:
    55e6:	8f 92       	push	r8
    55e8:	9f 92       	push	r9
    55ea:	af 92       	push	r10
    55ec:	bf 92       	push	r11
    55ee:	cf 92       	push	r12
    55f0:	df 92       	push	r13
    55f2:	ef 92       	push	r14
    55f4:	ff 92       	push	r15
    55f6:	0f 93       	push	r16
    55f8:	1f 93       	push	r17
    55fa:	cf 93       	push	r28
    55fc:	df 93       	push	r29
    55fe:	6c 01       	movw	r12, r24
    5600:	96 2e       	mov	r9, r22
    5602:	5a 01       	movw	r10, r20
    5604:	79 01       	movw	r14, r18
    5606:	80 2e       	mov	r8, r16
    5608:	68 e2       	ldi	r22, 0x28	; 40
    560a:	70 e0       	ldi	r23, 0x00	; 0
    560c:	89 2d       	mov	r24, r9
    560e:	9d dc       	rcall	.-1734   	; 0x4f4a <_ZN10W5500Class6readSnEhj>
    5610:	08 2f       	mov	r16, r24
    5612:	69 e2       	ldi	r22, 0x29	; 41
    5614:	70 e0       	ldi	r23, 0x00	; 0
    5616:	89 2d       	mov	r24, r9
    5618:	98 dc       	rcall	.-1744   	; 0x4f4a <_ZN10W5500Class6readSnEhj>
    561a:	10 e0       	ldi	r17, 0x00	; 0
    561c:	10 2f       	mov	r17, r16
    561e:	00 27       	eor	r16, r16
    5620:	e8 01       	movw	r28, r16
    5622:	c8 0f       	add	r28, r24
    5624:	d1 1d       	adc	r29, r1
    5626:	87 01       	movw	r16, r14
    5628:	95 01       	movw	r18, r10
    562a:	ae 01       	movw	r20, r28
    562c:	69 2d       	mov	r22, r9
    562e:	c6 01       	movw	r24, r12
    5630:	c2 df       	rcall	.-124    	; 0x55b6 <_ZN10W5500Class9read_dataEhjPVhj>
    5632:	81 10       	cpse	r8, r1
    5634:	18 c0       	rjmp	.+48     	; 0x5666 <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    5636:	0c 0f       	add	r16, r28
    5638:	1d 1f       	adc	r17, r29
    563a:	41 2f       	mov	r20, r17
    563c:	68 e2       	ldi	r22, 0x28	; 40
    563e:	70 e0       	ldi	r23, 0x00	; 0
    5640:	89 2d       	mov	r24, r9
    5642:	8e dc       	rcall	.-1764   	; 0x4f60 <_ZN10W5500Class7writeSnEhjh>
    5644:	40 2f       	mov	r20, r16
    5646:	69 e2       	ldi	r22, 0x29	; 41
    5648:	70 e0       	ldi	r23, 0x00	; 0
    564a:	89 2d       	mov	r24, r9
    564c:	df 91       	pop	r29
    564e:	cf 91       	pop	r28
    5650:	1f 91       	pop	r17
    5652:	0f 91       	pop	r16
    5654:	ff 90       	pop	r15
    5656:	ef 90       	pop	r14
    5658:	df 90       	pop	r13
    565a:	cf 90       	pop	r12
    565c:	bf 90       	pop	r11
    565e:	af 90       	pop	r10
    5660:	9f 90       	pop	r9
    5662:	8f 90       	pop	r8
    5664:	7d cc       	rjmp	.-1798   	; 0x4f60 <_ZN10W5500Class7writeSnEhjh>
    5666:	df 91       	pop	r29
    5668:	cf 91       	pop	r28
    566a:	1f 91       	pop	r17
    566c:	0f 91       	pop	r16
    566e:	ff 90       	pop	r15
    5670:	ef 90       	pop	r14
    5672:	df 90       	pop	r13
    5674:	cf 90       	pop	r12
    5676:	bf 90       	pop	r11
    5678:	af 90       	pop	r10
    567a:	9f 90       	pop	r9
    567c:	8f 90       	pop	r8
    567e:	08 95       	ret

00005680 <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    5680:	cf 93       	push	r28
    5682:	c6 2f       	mov	r28, r22
    5684:	61 e0       	ldi	r22, 0x01	; 1
    5686:	70 e0       	ldi	r23, 0x00	; 0
    5688:	8c 2f       	mov	r24, r28
    568a:	6a dc       	rcall	.-1836   	; 0x4f60 <_ZN10W5500Class7writeSnEhjh>
    568c:	61 e0       	ldi	r22, 0x01	; 1
    568e:	70 e0       	ldi	r23, 0x00	; 0
    5690:	8c 2f       	mov	r24, r28
    5692:	5b dc       	rcall	.-1866   	; 0x4f4a <_ZN10W5500Class6readSnEhj>
    5694:	81 11       	cpse	r24, r1
    5696:	fa cf       	rjmp	.-12     	; 0x568c <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    5698:	cf 91       	pop	r28
    569a:	08 95       	ret

0000569c <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    569c:	e1 e9       	ldi	r30, 0x91	; 145
    569e:	fd e0       	ldi	r31, 0x0D	; 13
    56a0:	80 e5       	ldi	r24, 0x50	; 80
    56a2:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    56a4:	81 e0       	ldi	r24, 0x01	; 1
    56a6:	81 83       	std	Z+1, r24	; 0x01
    56a8:	08 95       	ret

000056aa <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    56aa:	fc 01       	movw	r30, r24
    56ac:	12 82       	std	Z+2, r1	; 0x02
    56ae:	8f ef       	ldi	r24, 0xFF	; 255
    56b0:	81 83       	std	Z+1, r24	; 0x01
    56b2:	10 82       	st	Z, r1
    56b4:	13 82       	std	Z+3, r1	; 0x03
    56b6:	08 95       	ret

000056b8 <_ZN5I2CIO8portModeEh>:
    56b8:	fc 01       	movw	r30, r24
    56ba:	83 81       	ldd	r24, Z+3	; 0x03
    56bc:	88 23       	and	r24, r24
    56be:	31 f0       	breq	.+12     	; 0x56cc <_ZN5I2CIO8portModeEh+0x14>
    56c0:	61 11       	cpse	r22, r1
    56c2:	03 c0       	rjmp	.+6      	; 0x56ca <_ZN5I2CIO8portModeEh+0x12>
    56c4:	8f ef       	ldi	r24, 0xFF	; 255
    56c6:	81 83       	std	Z+1, r24	; 0x01
    56c8:	08 95       	ret
    56ca:	11 82       	std	Z+1, r1	; 0x01
    56cc:	08 95       	ret

000056ce <_ZN5I2CIO11isAvailableEh>:
    56ce:	87 e0       	ldi	r24, 0x07	; 7
    56d0:	9e e0       	ldi	r25, 0x0E	; 14
    56d2:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>
    56d6:	87 e0       	ldi	r24, 0x07	; 7
    56d8:	9e e0       	ldi	r25, 0x0E	; 14
    56da:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
    56de:	91 e0       	ldi	r25, 0x01	; 1
    56e0:	81 11       	cpse	r24, r1
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	89 2f       	mov	r24, r25
    56e6:	08 95       	ret

000056e8 <_ZN5I2CIO5beginEh>:
    56e8:	cf 93       	push	r28
    56ea:	df 93       	push	r29
    56ec:	ec 01       	movw	r28, r24
    56ee:	6a 83       	std	Y+2, r22	; 0x02
    56f0:	87 e0       	ldi	r24, 0x07	; 7
    56f2:	9e e0       	ldi	r25, 0x0E	; 14
    56f4:	0e 94 db 36 	call	0x6db6	; 0x6db6 <_ZN7TwoWire5beginEv>
    56f8:	6a 81       	ldd	r22, Y+2	; 0x02
    56fa:	ce 01       	movw	r24, r28
    56fc:	e8 df       	rcall	.-48     	; 0x56ce <_ZN5I2CIO11isAvailableEh>
    56fe:	8b 83       	std	Y+3, r24	; 0x03
    5700:	88 23       	and	r24, r24
    5702:	29 f0       	breq	.+10     	; 0x570e <_ZN5I2CIO5beginEh+0x26>
    5704:	87 e0       	ldi	r24, 0x07	; 7
    5706:	9e e0       	ldi	r25, 0x0E	; 14
    5708:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <_ZN7TwoWire4readEv>
    570c:	88 83       	st	Y, r24
    570e:	8b 81       	ldd	r24, Y+3	; 0x03
    5710:	90 e0       	ldi	r25, 0x00	; 0
    5712:	df 91       	pop	r29
    5714:	cf 91       	pop	r28
    5716:	08 95       	ret

00005718 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    5718:	cf 93       	push	r28
    571a:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    571c:	fc 01       	movw	r30, r24
    571e:	23 81       	ldd	r18, Z+3	; 0x03
    5720:	22 23       	and	r18, r18
    5722:	b1 f0       	breq	.+44     	; 0x5750 <_ZN5I2CIO5writeEh+0x38>
    5724:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    5726:	81 81       	ldd	r24, Z+1	; 0x01
    5728:	80 95       	com	r24
    572a:	68 23       	and	r22, r24
    572c:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    572e:	62 81       	ldd	r22, Z+2	; 0x02
    5730:	87 e0       	ldi	r24, 0x07	; 7
    5732:	9e e0       	ldi	r25, 0x0E	; 14
    5734:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    5738:	68 81       	ld	r22, Y
    573a:	87 e0       	ldi	r24, 0x07	; 7
    573c:	9e e0       	ldi	r25, 0x0E	; 14
    573e:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    5742:	87 e0       	ldi	r24, 0x07	; 7
    5744:	9e e0       	ldi	r25, 0x0E	; 14
    5746:	0e 94 6f 37 	call	0x6ede	; 0x6ede <_ZN7TwoWire15endTransmissionEv>
    574a:	28 2f       	mov	r18, r24
    574c:	30 e0       	ldi	r19, 0x00	; 0
    574e:	02 c0       	rjmp	.+4      	; 0x5754 <_ZN5I2CIO5writeEh+0x3c>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    5750:	20 e0       	ldi	r18, 0x00	; 0
    5752:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    5754:	81 e0       	ldi	r24, 0x01	; 1
    5756:	90 e0       	ldi	r25, 0x00	; 0
    5758:	23 2b       	or	r18, r19
    575a:	11 f0       	breq	.+4      	; 0x5760 <_ZN5I2CIO5writeEh+0x48>
    575c:	80 e0       	ldi	r24, 0x00	; 0
    575e:	90 e0       	ldi	r25, 0x00	; 0
}
    5760:	df 91       	pop	r29
    5762:	cf 91       	pop	r28
    5764:	08 95       	ret

00005766 <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    5766:	08 95       	ret

00005768 <_ZN3LCD12setBacklightEh>:
    5768:	08 95       	ret

0000576a <_ZN3LCD5writeEh>:
    576a:	dc 01       	movw	r26, r24
    576c:	ed 91       	ld	r30, X+
    576e:	fc 91       	ld	r31, X
    5770:	06 84       	ldd	r0, Z+14	; 0x0e
    5772:	f7 85       	ldd	r31, Z+15	; 0x0f
    5774:	e0 2d       	mov	r30, r0
    5776:	41 e0       	ldi	r20, 0x01	; 1
    5778:	09 95       	icall
    577a:	81 e0       	ldi	r24, 0x01	; 1
    577c:	90 e0       	ldi	r25, 0x00	; 0
    577e:	08 95       	ret

00005780 <_ZN3LCDC1Ev>:
    5780:	fc 01       	movw	r30, r24
    5782:	13 82       	std	Z+3, r1	; 0x03
    5784:	12 82       	std	Z+2, r1	; 0x02
    5786:	2e e2       	ldi	r18, 0x2E	; 46
    5788:	3a e0       	ldi	r19, 0x0A	; 10
    578a:	31 83       	std	Z+1, r19	; 0x01
    578c:	20 83       	st	Z, r18
    578e:	08 95       	ret

00005790 <_ZN3LCD9backlightEv>:
    5790:	dc 01       	movw	r26, r24
    5792:	ed 91       	ld	r30, X+
    5794:	fc 91       	ld	r31, X
    5796:	04 84       	ldd	r0, Z+12	; 0x0c
    5798:	f5 85       	ldd	r31, Z+13	; 0x0d
    579a:	e0 2d       	mov	r30, r0
    579c:	6f ef       	ldi	r22, 0xFF	; 255
    579e:	09 94       	ijmp

000057a0 <_ZN3LCD11noBacklightEv>:
    57a0:	dc 01       	movw	r26, r24
    57a2:	ed 91       	ld	r30, X+
    57a4:	fc 91       	ld	r31, X
    57a6:	04 84       	ldd	r0, Z+12	; 0x0c
    57a8:	f5 85       	ldd	r31, Z+13	; 0x0d
    57aa:	e0 2d       	mov	r30, r0
    57ac:	60 e0       	ldi	r22, 0x00	; 0
    57ae:	09 94       	ijmp

000057b0 <_ZN3LCD7commandEh>:
    57b0:	dc 01       	movw	r26, r24
    57b2:	ed 91       	ld	r30, X+
    57b4:	fc 91       	ld	r31, X
    57b6:	06 84       	ldd	r0, Z+14	; 0x0e
    57b8:	f7 85       	ldd	r31, Z+15	; 0x0f
    57ba:	e0 2d       	mov	r30, r0
    57bc:	40 e0       	ldi	r20, 0x00	; 0
    57be:	09 94       	ijmp

000057c0 <_ZN3LCD5clearEv>:
    57c0:	61 e0       	ldi	r22, 0x01	; 1
    57c2:	f6 df       	rcall	.-20     	; 0x57b0 <_ZN3LCD7commandEh>
    57c4:	80 ed       	ldi	r24, 0xD0	; 208
    57c6:	97 e0       	ldi	r25, 0x07	; 7
    57c8:	0c 94 71 3b 	jmp	0x76e2	; 0x76e2 <delayMicroseconds>

000057cc <_ZN3LCD9setCursorEhh>:
    57cc:	cf 93       	push	r28
    57ce:	df 93       	push	r29
    57d0:	cd b7       	in	r28, 0x3d	; 61
    57d2:	de b7       	in	r29, 0x3e	; 62
    57d4:	28 97       	sbiw	r28, 0x08	; 8
    57d6:	0f b6       	in	r0, 0x3f	; 63
    57d8:	f8 94       	cli
    57da:	de bf       	out	0x3e, r29	; 62
    57dc:	0f be       	out	0x3f, r0	; 63
    57de:	cd bf       	out	0x3d, r28	; 61
    57e0:	fc 01       	movw	r30, r24
    57e2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_ZN14EthernetClient8_srcportE+0x8>
    57e6:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <_ZN14EthernetClient8_srcportE+0x9>
    57ea:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <_ZN14EthernetClient8_srcportE+0xa>
    57ee:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <_ZN14EthernetClient8_srcportE+0xb>
    57f2:	8d 83       	std	Y+5, r24	; 0x05
    57f4:	9e 83       	std	Y+6, r25	; 0x06
    57f6:	af 83       	std	Y+7, r26	; 0x07
    57f8:	b8 87       	std	Y+8, r27	; 0x08
    57fa:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_ZN14EthernetClient8_srcportE+0xc>
    57fe:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_ZN14EthernetClient8_srcportE+0xd>
    5802:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <_ZN14EthernetClient8_srcportE+0xe>
    5806:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <_ZN14EthernetClient8_srcportE+0xf>
    580a:	89 83       	std	Y+1, r24	; 0x01
    580c:	9a 83       	std	Y+2, r25	; 0x02
    580e:	ab 83       	std	Y+3, r26	; 0x03
    5810:	bc 83       	std	Y+4, r27	; 0x04
    5812:	87 81       	ldd	r24, Z+7	; 0x07
    5814:	48 17       	cp	r20, r24
    5816:	10 f0       	brcs	.+4      	; 0x581c <_ZN3LCD9setCursorEhh+0x50>
    5818:	4f ef       	ldi	r20, 0xFF	; 255
    581a:	48 0f       	add	r20, r24
    581c:	90 85       	ldd	r25, Z+8	; 0x08
    581e:	50 e0       	ldi	r21, 0x00	; 0
    5820:	de 01       	movw	r26, r28
    5822:	a4 0f       	add	r26, r20
    5824:	b5 1f       	adc	r27, r21
    5826:	90 31       	cpi	r25, 0x10	; 16
    5828:	29 f4       	brne	.+10     	; 0x5834 <_ZN3LCD9setCursorEhh+0x68>
    582a:	84 30       	cpi	r24, 0x04	; 4
    582c:	19 f4       	brne	.+6      	; 0x5834 <_ZN3LCD9setCursorEhh+0x68>
    582e:	11 96       	adiw	r26, 0x01	; 1
    5830:	9c 91       	ld	r25, X
    5832:	02 c0       	rjmp	.+4      	; 0x5838 <_ZN3LCD9setCursorEhh+0x6c>
    5834:	15 96       	adiw	r26, 0x05	; 5
    5836:	9c 91       	ld	r25, X
    5838:	69 0f       	add	r22, r25
    583a:	60 68       	ori	r22, 0x80	; 128
    583c:	cf 01       	movw	r24, r30
    583e:	28 96       	adiw	r28, 0x08	; 8
    5840:	0f b6       	in	r0, 0x3f	; 63
    5842:	f8 94       	cli
    5844:	de bf       	out	0x3e, r29	; 62
    5846:	0f be       	out	0x3f, r0	; 63
    5848:	cd bf       	out	0x3d, r28	; 61
    584a:	df 91       	pop	r29
    584c:	cf 91       	pop	r28
    584e:	b0 cf       	rjmp	.-160    	; 0x57b0 <_ZN3LCD7commandEh>

00005850 <_ZN3LCD9noDisplayEv>:
    5850:	fc 01       	movw	r30, r24
    5852:	65 81       	ldd	r22, Z+5	; 0x05
    5854:	6b 7f       	andi	r22, 0xFB	; 251
    5856:	65 83       	std	Z+5, r22	; 0x05
    5858:	68 60       	ori	r22, 0x08	; 8
    585a:	aa cf       	rjmp	.-172    	; 0x57b0 <_ZN3LCD7commandEh>

0000585c <_ZN3LCD7displayEv>:
    585c:	fc 01       	movw	r30, r24
    585e:	65 81       	ldd	r22, Z+5	; 0x05
    5860:	26 2f       	mov	r18, r22
    5862:	24 60       	ori	r18, 0x04	; 4
    5864:	25 83       	std	Z+5, r18	; 0x05
    5866:	6c 60       	ori	r22, 0x0C	; 12
    5868:	a3 cf       	rjmp	.-186    	; 0x57b0 <_ZN3LCD7commandEh>

0000586a <_ZN3LCD5beginEhhh>:
    586a:	cf 93       	push	r28
    586c:	df 93       	push	r29
    586e:	ec 01       	movw	r28, r24
    5870:	42 30       	cpi	r20, 0x02	; 2
    5872:	18 f0       	brcs	.+6      	; 0x587a <_ZN3LCD5beginEhhh+0x10>
    5874:	8c 81       	ldd	r24, Y+4	; 0x04
    5876:	88 60       	ori	r24, 0x08	; 8
    5878:	8c 83       	std	Y+4, r24	; 0x04
    587a:	4f 83       	std	Y+7, r20	; 0x07
    587c:	68 87       	std	Y+8, r22	; 0x08
    587e:	22 23       	and	r18, r18
    5880:	29 f0       	breq	.+10     	; 0x588c <_ZN3LCD5beginEhhh+0x22>
    5882:	41 30       	cpi	r20, 0x01	; 1
    5884:	19 f4       	brne	.+6      	; 0x588c <_ZN3LCD5beginEhhh+0x22>
    5886:	8c 81       	ldd	r24, Y+4	; 0x04
    5888:	84 60       	ori	r24, 0x04	; 4
    588a:	8c 83       	std	Y+4, r24	; 0x04
    588c:	64 e6       	ldi	r22, 0x64	; 100
    588e:	70 e0       	ldi	r23, 0x00	; 0
    5890:	80 e0       	ldi	r24, 0x00	; 0
    5892:	90 e0       	ldi	r25, 0x00	; 0
    5894:	0e 94 38 3b 	call	0x7670	; 0x7670 <delay>
    5898:	6c 81       	ldd	r22, Y+4	; 0x04
    589a:	64 fd       	sbrc	r22, 4
    589c:	31 c0       	rjmp	.+98     	; 0x5900 <_ZN3LCD5beginEhhh+0x96>
    589e:	e8 81       	ld	r30, Y
    58a0:	f9 81       	ldd	r31, Y+1	; 0x01
    58a2:	06 84       	ldd	r0, Z+14	; 0x0e
    58a4:	f7 85       	ldd	r31, Z+15	; 0x0f
    58a6:	e0 2d       	mov	r30, r0
    58a8:	42 e0       	ldi	r20, 0x02	; 2
    58aa:	63 e0       	ldi	r22, 0x03	; 3
    58ac:	ce 01       	movw	r24, r28
    58ae:	09 95       	icall
    58b0:	84 e9       	ldi	r24, 0x94	; 148
    58b2:	91 e1       	ldi	r25, 0x11	; 17
    58b4:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <delayMicroseconds>
    58b8:	e8 81       	ld	r30, Y
    58ba:	f9 81       	ldd	r31, Y+1	; 0x01
    58bc:	06 84       	ldd	r0, Z+14	; 0x0e
    58be:	f7 85       	ldd	r31, Z+15	; 0x0f
    58c0:	e0 2d       	mov	r30, r0
    58c2:	42 e0       	ldi	r20, 0x02	; 2
    58c4:	63 e0       	ldi	r22, 0x03	; 3
    58c6:	ce 01       	movw	r24, r28
    58c8:	09 95       	icall
    58ca:	86 e9       	ldi	r24, 0x96	; 150
    58cc:	90 e0       	ldi	r25, 0x00	; 0
    58ce:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <delayMicroseconds>
    58d2:	e8 81       	ld	r30, Y
    58d4:	f9 81       	ldd	r31, Y+1	; 0x01
    58d6:	06 84       	ldd	r0, Z+14	; 0x0e
    58d8:	f7 85       	ldd	r31, Z+15	; 0x0f
    58da:	e0 2d       	mov	r30, r0
    58dc:	42 e0       	ldi	r20, 0x02	; 2
    58de:	63 e0       	ldi	r22, 0x03	; 3
    58e0:	ce 01       	movw	r24, r28
    58e2:	09 95       	icall
    58e4:	86 e9       	ldi	r24, 0x96	; 150
    58e6:	90 e0       	ldi	r25, 0x00	; 0
    58e8:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <delayMicroseconds>
    58ec:	e8 81       	ld	r30, Y
    58ee:	f9 81       	ldd	r31, Y+1	; 0x01
    58f0:	06 84       	ldd	r0, Z+14	; 0x0e
    58f2:	f7 85       	ldd	r31, Z+15	; 0x0f
    58f4:	e0 2d       	mov	r30, r0
    58f6:	42 e0       	ldi	r20, 0x02	; 2
    58f8:	62 e0       	ldi	r22, 0x02	; 2
    58fa:	ce 01       	movw	r24, r28
    58fc:	09 95       	icall
    58fe:	13 c0       	rjmp	.+38     	; 0x5926 <_ZN3LCD5beginEhhh+0xbc>
    5900:	60 62       	ori	r22, 0x20	; 32
    5902:	ce 01       	movw	r24, r28
    5904:	55 df       	rcall	.-342    	; 0x57b0 <_ZN3LCD7commandEh>
    5906:	84 e9       	ldi	r24, 0x94	; 148
    5908:	91 e1       	ldi	r25, 0x11	; 17
    590a:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <delayMicroseconds>
    590e:	6c 81       	ldd	r22, Y+4	; 0x04
    5910:	60 62       	ori	r22, 0x20	; 32
    5912:	ce 01       	movw	r24, r28
    5914:	4d df       	rcall	.-358    	; 0x57b0 <_ZN3LCD7commandEh>
    5916:	86 e9       	ldi	r24, 0x96	; 150
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <delayMicroseconds>
    591e:	6c 81       	ldd	r22, Y+4	; 0x04
    5920:	60 62       	ori	r22, 0x20	; 32
    5922:	ce 01       	movw	r24, r28
    5924:	45 df       	rcall	.-374    	; 0x57b0 <_ZN3LCD7commandEh>
    5926:	86 e9       	ldi	r24, 0x96	; 150
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <delayMicroseconds>
    592e:	6c 81       	ldd	r22, Y+4	; 0x04
    5930:	60 62       	ori	r22, 0x20	; 32
    5932:	ce 01       	movw	r24, r28
    5934:	3d df       	rcall	.-390    	; 0x57b0 <_ZN3LCD7commandEh>
    5936:	8c e3       	ldi	r24, 0x3C	; 60
    5938:	90 e0       	ldi	r25, 0x00	; 0
    593a:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <delayMicroseconds>
    593e:	84 e0       	ldi	r24, 0x04	; 4
    5940:	8d 83       	std	Y+5, r24	; 0x05
    5942:	ce 01       	movw	r24, r28
    5944:	8b df       	rcall	.-234    	; 0x585c <_ZN3LCD7displayEv>
    5946:	ce 01       	movw	r24, r28
    5948:	3b df       	rcall	.-394    	; 0x57c0 <_ZN3LCD5clearEv>
    594a:	82 e0       	ldi	r24, 0x02	; 2
    594c:	8e 83       	std	Y+6, r24	; 0x06
    594e:	66 e0       	ldi	r22, 0x06	; 6
    5950:	ce 01       	movw	r24, r28
    5952:	2e df       	rcall	.-420    	; 0x57b0 <_ZN3LCD7commandEh>
    5954:	ce 01       	movw	r24, r28
    5956:	df 91       	pop	r29
    5958:	cf 91       	pop	r28
    595a:	1a cf       	rjmp	.-460    	; 0x5790 <_ZN3LCD9backlightEv>

0000595c <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    595c:	ef 92       	push	r14
    595e:	ff 92       	push	r15
    5960:	0f 93       	push	r16
    5962:	1f 93       	push	r17
    5964:	cf 93       	push	r28
    5966:	df 93       	push	r29
    5968:	8c 01       	movw	r16, r24
    596a:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    596c:	67 70       	andi	r22, 0x07	; 7
    596e:	88 e0       	ldi	r24, 0x08	; 8
    5970:	68 9f       	mul	r22, r24
    5972:	b0 01       	movw	r22, r0
    5974:	11 24       	eor	r1, r1
    5976:	60 64       	ori	r22, 0x40	; 64
    5978:	c8 01       	movw	r24, r16
    597a:	1a df       	rcall	.-460    	; 0x57b0 <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    597c:	8e e1       	ldi	r24, 0x1E	; 30
    597e:	90 e0       	ldi	r25, 0x00	; 0
    5980:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <delayMicroseconds>
    5984:	e7 01       	movw	r28, r14
    5986:	a8 e0       	ldi	r26, 0x08	; 8
    5988:	ea 0e       	add	r14, r26
    598a:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    598c:	69 91       	ld	r22, Y+
    598e:	d8 01       	movw	r26, r16
    5990:	ed 91       	ld	r30, X+
    5992:	fc 91       	ld	r31, X
    5994:	01 90       	ld	r0, Z+
    5996:	f0 81       	ld	r31, Z
    5998:	e0 2d       	mov	r30, r0
    599a:	c8 01       	movw	r24, r16
    599c:	09 95       	icall
      delayMicroseconds(40);
    599e:	88 e2       	ldi	r24, 0x28	; 40
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    59a6:	ce 15       	cp	r28, r14
    59a8:	df 05       	cpc	r29, r15
    59aa:	81 f7       	brne	.-32     	; 0x598c <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    59ac:	df 91       	pop	r29
    59ae:	cf 91       	pop	r28
    59b0:	1f 91       	pop	r17
    59b2:	0f 91       	pop	r16
    59b4:	ff 90       	pop	r15
    59b6:	ef 90       	pop	r14
    59b8:	08 95       	ret

000059ba <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    59ba:	21 e0       	ldi	r18, 0x01	; 1
    59bc:	01 c0       	rjmp	.+2      	; 0x59c0 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    59be:	22 0f       	add	r18, r18
    59c0:	6a 95       	dec	r22
    59c2:	ea f7       	brpl	.-6      	; 0x59be <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    59c4:	dc 01       	movw	r26, r24
    59c6:	1b 96       	adiw	r26, 0x0b	; 11
    59c8:	2c 93       	st	X, r18
    59ca:	1b 97       	sbiw	r26, 0x0b	; 11
    59cc:	19 96       	adiw	r26, 0x09	; 9
    59ce:	4c 93       	st	X, r20
    59d0:	19 97       	sbiw	r26, 0x09	; 9
    59d2:	ed 91       	ld	r30, X+
    59d4:	fc 91       	ld	r31, X
    59d6:	04 84       	ldd	r0, Z+12	; 0x0c
    59d8:	f5 85       	ldd	r31, Z+13	; 0x0d
    59da:	e0 2d       	mov	r30, r0
    59dc:	60 e0       	ldi	r22, 0x00	; 0
    59de:	09 94       	ijmp

000059e0 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    59e0:	fc 01       	movw	r30, r24
    59e2:	83 85       	ldd	r24, Z+11	; 0x0b
    59e4:	88 23       	and	r24, r24
    59e6:	89 f0       	breq	.+34     	; 0x5a0a <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    59e8:	91 85       	ldd	r25, Z+9	; 0x09
    59ea:	91 11       	cpse	r25, r1
    59ec:	03 c0       	rjmp	.+6      	; 0x59f4 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    59ee:	61 11       	cpse	r22, r1
    59f0:	05 c0       	rjmp	.+10     	; 0x59fc <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    59f2:	06 c0       	rjmp	.+12     	; 0x5a00 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    59f4:	91 30       	cpi	r25, 0x01	; 1
    59f6:	21 f4       	brne	.+8      	; 0x5a00 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    59f8:	61 11       	cpse	r22, r1
    59fa:	02 c0       	rjmp	.+4      	; 0x5a00 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    59fc:	84 87       	std	Z+12, r24	; 0x0c
    59fe:	01 c0       	rjmp	.+2      	; 0x5a02 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    5a00:	14 86       	std	Z+12, r1	; 0x0c
    5a02:	64 85       	ldd	r22, Z+12	; 0x0c
    5a04:	cf 01       	movw	r24, r30
    5a06:	0d 96       	adiw	r24, 0x0d	; 13
    5a08:	87 ce       	rjmp	.-754    	; 0x5718 <_ZN5I2CIO5writeEh>
    5a0a:	08 95       	ret

00005a0c <_ZN17LiquidCrystal_I2C4initEv>:
    5a0c:	0f 93       	push	r16
    5a0e:	1f 93       	push	r17
    5a10:	cf 93       	push	r28
    5a12:	df 93       	push	r29
    5a14:	8c 01       	movw	r16, r24
    5a16:	ec 01       	movw	r28, r24
    5a18:	2d 96       	adiw	r28, 0x0d	; 13
    5a1a:	fc 01       	movw	r30, r24
    5a1c:	62 85       	ldd	r22, Z+10	; 0x0a
    5a1e:	ce 01       	movw	r24, r28
    5a20:	63 de       	rcall	.-826    	; 0x56e8 <_ZN5I2CIO5beginEh>
    5a22:	01 97       	sbiw	r24, 0x01	; 1
    5a24:	59 f4       	brne	.+22     	; 0x5a3c <_ZN17LiquidCrystal_I2C4initEv+0x30>
    5a26:	61 e0       	ldi	r22, 0x01	; 1
    5a28:	ce 01       	movw	r24, r28
    5a2a:	46 de       	rcall	.-884    	; 0x56b8 <_ZN5I2CIO8portModeEh>
    5a2c:	f8 01       	movw	r30, r16
    5a2e:	14 82       	std	Z+4, r1	; 0x04
    5a30:	60 e0       	ldi	r22, 0x00	; 0
    5a32:	ce 01       	movw	r24, r28
    5a34:	71 de       	rcall	.-798    	; 0x5718 <_ZN5I2CIO5writeEh>
    5a36:	81 e0       	ldi	r24, 0x01	; 1
    5a38:	90 e0       	ldi	r25, 0x00	; 0
    5a3a:	02 c0       	rjmp	.+4      	; 0x5a40 <_ZN17LiquidCrystal_I2C4initEv+0x34>
    5a3c:	80 e0       	ldi	r24, 0x00	; 0
    5a3e:	90 e0       	ldi	r25, 0x00	; 0
    5a40:	df 91       	pop	r29
    5a42:	cf 91       	pop	r28
    5a44:	1f 91       	pop	r17
    5a46:	0f 91       	pop	r16
    5a48:	08 95       	ret

00005a4a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    5a4a:	8f 92       	push	r8
    5a4c:	af 92       	push	r10
    5a4e:	cf 92       	push	r12
    5a50:	ef 92       	push	r14
    5a52:	0f 93       	push	r16
    5a54:	cf 93       	push	r28
    5a56:	df 93       	push	r29
    5a58:	cd b7       	in	r28, 0x3d	; 61
    5a5a:	de b7       	in	r29, 0x3e	; 62
    5a5c:	fc 01       	movw	r30, r24
    5a5e:	62 87       	std	Z+10, r22	; 0x0a
    5a60:	13 86       	std	Z+11, r1	; 0x0b
    5a62:	14 86       	std	Z+12, r1	; 0x0c
    5a64:	11 86       	std	Z+9, r1	; 0x09
    5a66:	81 e0       	ldi	r24, 0x01	; 1
    5a68:	98 2f       	mov	r25, r24
    5a6a:	01 c0       	rjmp	.+2      	; 0x5a6e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    5a6c:	99 0f       	add	r25, r25
    5a6e:	4a 95       	dec	r20
    5a70:	ea f7       	brpl	.-6      	; 0x5a6c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    5a72:	91 8b       	std	Z+17, r25	; 0x11
    5a74:	98 2f       	mov	r25, r24
    5a76:	01 c0       	rjmp	.+2      	; 0x5a7a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    5a78:	99 0f       	add	r25, r25
    5a7a:	2a 95       	dec	r18
    5a7c:	ea f7       	brpl	.-6      	; 0x5a78 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    5a7e:	92 8b       	std	Z+18, r25	; 0x12
    5a80:	98 2f       	mov	r25, r24
    5a82:	01 c0       	rjmp	.+2      	; 0x5a86 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    5a84:	99 0f       	add	r25, r25
    5a86:	0a 95       	dec	r16
    5a88:	ea f7       	brpl	.-6      	; 0x5a84 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    5a8a:	93 8b       	std	Z+19, r25	; 0x13
    5a8c:	98 2f       	mov	r25, r24
    5a8e:	01 c0       	rjmp	.+2      	; 0x5a92 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    5a90:	99 0f       	add	r25, r25
    5a92:	ea 94       	dec	r14
    5a94:	ea f7       	brpl	.-6      	; 0x5a90 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    5a96:	94 8b       	std	Z+20, r25	; 0x14
    5a98:	98 2f       	mov	r25, r24
    5a9a:	01 c0       	rjmp	.+2      	; 0x5a9e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    5a9c:	99 0f       	add	r25, r25
    5a9e:	ca 94       	dec	r12
    5aa0:	ea f7       	brpl	.-6      	; 0x5a9c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    5aa2:	95 8b       	std	Z+21, r25	; 0x15
    5aa4:	98 2f       	mov	r25, r24
    5aa6:	01 c0       	rjmp	.+2      	; 0x5aaa <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    5aa8:	99 0f       	add	r25, r25
    5aaa:	aa 94       	dec	r10
    5aac:	ea f7       	brpl	.-6      	; 0x5aa8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    5aae:	96 8b       	std	Z+22, r25	; 0x16
    5ab0:	01 c0       	rjmp	.+2      	; 0x5ab4 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    5ab2:	88 0f       	add	r24, r24
    5ab4:	8a 94       	dec	r8
    5ab6:	ea f7       	brpl	.-6      	; 0x5ab2 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    5ab8:	87 8b       	std	Z+23, r24	; 0x17
    5aba:	df 91       	pop	r29
    5abc:	cf 91       	pop	r28
    5abe:	0f 91       	pop	r16
    5ac0:	ef 90       	pop	r14
    5ac2:	cf 90       	pop	r12
    5ac4:	af 90       	pop	r10
    5ac6:	8f 90       	pop	r8
    5ac8:	08 95       	ret

00005aca <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    5aca:	6f 92       	push	r6
    5acc:	7f 92       	push	r7
    5ace:	8f 92       	push	r8
    5ad0:	9f 92       	push	r9
    5ad2:	af 92       	push	r10
    5ad4:	bf 92       	push	r11
    5ad6:	cf 92       	push	r12
    5ad8:	df 92       	push	r13
    5ada:	ef 92       	push	r14
    5adc:	ff 92       	push	r15
    5ade:	0f 93       	push	r16
    5ae0:	1f 93       	push	r17
    5ae2:	cf 93       	push	r28
    5ae4:	df 93       	push	r29
    5ae6:	cd b7       	in	r28, 0x3d	; 61
    5ae8:	de b7       	in	r29, 0x3e	; 62
    5aea:	3c 01       	movw	r6, r24
    5aec:	d6 2e       	mov	r13, r22
    5aee:	b4 2e       	mov	r11, r20
    5af0:	92 2e       	mov	r9, r18
    5af2:	19 89       	ldd	r17, Y+17	; 0x11
    5af4:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    5af6:	44 de       	rcall	.-888    	; 0x5780 <_ZN3LCDC1Ev>
    5af8:	82 e4       	ldi	r24, 0x42	; 66
    5afa:	9a e0       	ldi	r25, 0x0A	; 10
    5afc:	f3 01       	movw	r30, r6
    5afe:	91 83       	std	Z+1, r25	; 0x01
    5b00:	80 83       	st	Z, r24
    5b02:	c3 01       	movw	r24, r6
    5b04:	0d 96       	adiw	r24, 0x0d	; 13
    5b06:	d1 dd       	rcall	.-1118   	; 0x56aa <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    5b08:	29 2d       	mov	r18, r9
    5b0a:	4b 2d       	mov	r20, r11
    5b0c:	6d 2d       	mov	r22, r13
    5b0e:	c3 01       	movw	r24, r6
    5b10:	9c df       	rcall	.-200    	; 0x5a4a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    5b12:	4f 2d       	mov	r20, r15
    5b14:	61 2f       	mov	r22, r17
    5b16:	c3 01       	movw	r24, r6
}
    5b18:	df 91       	pop	r29
    5b1a:	cf 91       	pop	r28
    5b1c:	1f 91       	pop	r17
    5b1e:	0f 91       	pop	r16
    5b20:	ff 90       	pop	r15
    5b22:	ef 90       	pop	r14
    5b24:	df 90       	pop	r13
    5b26:	cf 90       	pop	r12
    5b28:	bf 90       	pop	r11
    5b2a:	af 90       	pop	r10
    5b2c:	9f 90       	pop	r9
    5b2e:	8f 90       	pop	r8
    5b30:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    5b32:	6f 90       	pop	r6
    5b34:	42 cf       	rjmp	.-380    	; 0x59ba <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

00005b36 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    5b36:	ef 92       	push	r14
    5b38:	ff 92       	push	r15
    5b3a:	0f 93       	push	r16
    5b3c:	1f 93       	push	r17
    5b3e:	cf 93       	push	r28
    5b40:	8c 01       	movw	r16, r24
    5b42:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    5b44:	7c 01       	movw	r14, r24
    5b46:	8d e0       	ldi	r24, 0x0D	; 13
    5b48:	e8 0e       	add	r14, r24
    5b4a:	f1 1c       	adc	r15, r1
    5b4c:	f8 01       	movw	r30, r16
    5b4e:	61 89       	ldd	r22, Z+17	; 0x11
    5b50:	6c 2b       	or	r22, r28
    5b52:	c7 01       	movw	r24, r14
    5b54:	e1 dd       	rcall	.-1086   	; 0x5718 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    5b56:	f8 01       	movw	r30, r16
    5b58:	61 89       	ldd	r22, Z+17	; 0x11
    5b5a:	60 95       	com	r22
    5b5c:	6c 23       	and	r22, r28
    5b5e:	c7 01       	movw	r24, r14
    5b60:	cf 91       	pop	r28
    5b62:	1f 91       	pop	r17
    5b64:	0f 91       	pop	r16
    5b66:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    5b68:	ef 90       	pop	r14
    5b6a:	d6 cd       	rjmp	.-1108   	; 0x5718 <_ZN5I2CIO5writeEh>

00005b6c <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    5b6c:	fc 01       	movw	r30, r24
    5b6e:	96 2f       	mov	r25, r22
    5b70:	df 01       	movw	r26, r30
    5b72:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    5b74:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    5b76:	90 ff       	sbrs	r25, 0
    5b78:	04 c0       	rjmp	.+8      	; 0x5b82 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    5b7a:	54 96       	adiw	r26, 0x14	; 20
    5b7c:	2c 91       	ld	r18, X
    5b7e:	54 97       	sbiw	r26, 0x14	; 20
    5b80:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    5b82:	96 95       	lsr	r25
    5b84:	81 50       	subi	r24, 0x01	; 1
    5b86:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    5b88:	81 11       	cpse	r24, r1
    5b8a:	f5 cf       	rjmp	.-22     	; 0x5b76 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    5b8c:	41 30       	cpi	r20, 0x01	; 1
    5b8e:	09 f4       	brne	.+2      	; 0x5b92 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    5b90:	43 89       	ldd	r20, Z+19	; 0x13
    5b92:	94 85       	ldd	r25, Z+12	; 0x0c
    5b94:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    5b96:	64 2b       	or	r22, r20
    5b98:	cf 01       	movw	r24, r30
    5b9a:	cd cf       	rjmp	.-102    	; 0x5b36 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00005b9c <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    5b9c:	0f 93       	push	r16
    5b9e:	1f 93       	push	r17
    5ba0:	cf 93       	push	r28
    5ba2:	df 93       	push	r29
    5ba4:	06 2f       	mov	r16, r22
    5ba6:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    5ba8:	42 30       	cpi	r20, 0x02	; 2
    5baa:	19 f4       	brne	.+6      	; 0x5bb2 <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    5bac:	40 e0       	ldi	r20, 0x00	; 0
    5bae:	60 2f       	mov	r22, r16
    5bb0:	0d c0       	rjmp	.+26     	; 0x5bcc <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    5bb2:	14 2f       	mov	r17, r20
    5bb4:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    5bb6:	70 e0       	ldi	r23, 0x00	; 0
    5bb8:	84 e0       	ldi	r24, 0x04	; 4
    5bba:	75 95       	asr	r23
    5bbc:	67 95       	ror	r22
    5bbe:	8a 95       	dec	r24
    5bc0:	e1 f7       	brne	.-8      	; 0x5bba <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    5bc2:	ce 01       	movw	r24, r28
    5bc4:	d3 df       	rcall	.-90     	; 0x5b6c <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    5bc6:	41 2f       	mov	r20, r17
    5bc8:	60 2f       	mov	r22, r16
    5bca:	ce 01       	movw	r24, r28
   }
}
    5bcc:	df 91       	pop	r29
    5bce:	cf 91       	pop	r28
    5bd0:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    5bd2:	0f 91       	pop	r16
    5bd4:	cb cf       	rjmp	.-106    	; 0x5b6c <_ZN17LiquidCrystal_I2C10write4bitsEhh>

00005bd6 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    5bd6:	ff 92       	push	r15
    5bd8:	0f 93       	push	r16
    5bda:	1f 93       	push	r17
    5bdc:	cf 93       	push	r28
    5bde:	df 93       	push	r29
    5be0:	ec 01       	movw	r28, r24
    5be2:	16 2f       	mov	r17, r22
    5be4:	04 2f       	mov	r16, r20
    5be6:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    5be8:	11 df       	rcall	.-478    	; 0x5a0c <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    5bea:	2f 2d       	mov	r18, r15
    5bec:	40 2f       	mov	r20, r16
    5bee:	61 2f       	mov	r22, r17
    5bf0:	ce 01       	movw	r24, r28
}
    5bf2:	df 91       	pop	r29
    5bf4:	cf 91       	pop	r28
    5bf6:	1f 91       	pop	r17
    5bf8:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    5bfa:	ff 90       	pop	r15
    5bfc:	36 ce       	rjmp	.-916    	; 0x586a <_ZN3LCD5beginEhhh>

00005bfe <_ZN11Diagnostics15_printErrorCodeEv>:
  Serial.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
  Serial.print(F("If this does not help resolve/clarify this issue, "));
  Serial.println(F("please raise an issue at http://www.github.com/Marzogh/SPIMemory/issues with the details of what your were doing when this error occurred"));
    5bfe:	cf 93       	push	r28
    5c00:	df 93       	push	r29
    5c02:	ec 01       	movw	r28, r24
    5c04:	69 e2       	ldi	r22, 0x29	; 41
    5c06:	72 e0       	ldi	r23, 0x02	; 2
    5c08:	8d e5       	ldi	r24, 0x5D	; 93
    5c0a:	9e e0       	ldi	r25, 0x0E	; 14
    5c0c:	0e 94 d7 39 	call	0x73ae	; 0x73ae <_ZN5Print5printEPK19__FlashStringHelper>
    5c10:	88 81       	ld	r24, Y
    5c12:	80 31       	cpi	r24, 0x10	; 16
    5c14:	30 f4       	brcc	.+12     	; 0x5c22 <_ZN11Diagnostics15_printErrorCodeEv+0x24>
    5c16:	67 e2       	ldi	r22, 0x27	; 39
    5c18:	72 e0       	ldi	r23, 0x02	; 2
    5c1a:	8d e5       	ldi	r24, 0x5D	; 93
    5c1c:	9e e0       	ldi	r25, 0x0E	; 14
    5c1e:	0e 94 d7 39 	call	0x73ae	; 0x73ae <_ZN5Print5printEPK19__FlashStringHelper>
    5c22:	40 e1       	ldi	r20, 0x10	; 16
    5c24:	50 e0       	ldi	r21, 0x00	; 0
    5c26:	68 81       	ld	r22, Y
    5c28:	8d e5       	ldi	r24, 0x5D	; 93
    5c2a:	9e e0       	ldi	r25, 0x0E	; 14
    5c2c:	df 91       	pop	r29
    5c2e:	cf 91       	pop	r28
    5c30:	0c 94 9d 3a 	jmp	0x753a	; 0x753a <_ZN5Print7printlnEhi>

00005c34 <_ZN11Diagnostics12troubleshootEhb>:
}
//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
  bool _printoverride;
  errorcode = _code;
    5c34:	fc 01       	movw	r30, r24
    5c36:	60 83       	st	Z, r22
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
#endif
  if (_printoverride) {
    5c38:	41 11       	cpse	r20, r1
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
    5c3a:	e1 cf       	rjmp	.-62     	; 0x5bfe <_ZN11Diagnostics15_printErrorCodeEv>
    5c3c:	08 95       	ret

00005c3e <_ZN8SPIFlashC1Eh>:
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros() - _spifuncruntime;
  #endif
  return true;

}
    5c3e:	cf 93       	push	r28
    5c40:	df 93       	push	r29
    5c42:	ec 01       	movw	r28, r24
    5c44:	80 e5       	ldi	r24, 0x50	; 80
    5c46:	88 83       	st	Y, r24
    5c48:	19 82       	std	Y+1, r1	; 0x01
    5c4a:	1a 82       	std	Y+2, r1	; 0x02
    5c4c:	8f ef       	ldi	r24, 0xFF	; 255
    5c4e:	8e 83       	std	Y+6, r24	; 0x06
    5c50:	8f 83       	std	Y+7, r24	; 0x07
    5c52:	88 87       	std	Y+8, r24	; 0x08
    5c54:	89 87       	std	Y+9, r24	; 0x09
    5c56:	1e 86       	std	Y+14, r1	; 0x0e
    5c58:	1f 86       	std	Y+15, r1	; 0x0f
    5c5a:	18 8a       	std	Y+16, r1	; 0x10
    5c5c:	19 8a       	std	Y+17, r1	; 0x11
    5c5e:	82 e5       	ldi	r24, 0x52	; 82
    5c60:	8c 8f       	std	Y+28, r24	; 0x1c
    5c62:	87 e5       	ldi	r24, 0x57	; 87
    5c64:	8d 8f       	std	Y+29, r24	; 0x1d
    5c66:	1e 8e       	std	Y+30, r1	; 0x1e
    5c68:	1f 8e       	std	Y+31, r1	; 0x1f
    5c6a:	18 a2       	std	Y+32, r1	; 0x20
    5c6c:	19 a2       	std	Y+33, r1	; 0x21
    5c6e:	fe 01       	movw	r30, r28
    5c70:	e6 5a       	subi	r30, 0xA6	; 166
    5c72:	ff 4f       	sbci	r31, 0xFF	; 255
    5c74:	10 82       	st	Z, r1
    5c76:	11 82       	std	Z+1, r1	; 0x01
    5c78:	12 82       	std	Z+2, r1	; 0x02
    5c7a:	13 82       	std	Z+3, r1	; 0x03
    5c7c:	34 96       	adiw	r30, 0x04	; 4
    5c7e:	10 82       	st	Z, r1
    5c80:	11 82       	std	Z+1, r1	; 0x01
    5c82:	12 82       	std	Z+2, r1	; 0x02
    5c84:	13 82       	std	Z+3, r1	; 0x03
    5c86:	de 01       	movw	r26, r28
    5c88:	a2 58       	subi	r26, 0x82	; 130
    5c8a:	bf 4f       	sbci	r27, 0xFF	; 255
    5c8c:	82 e1       	ldi	r24, 0x12	; 18
    5c8e:	e2 e5       	ldi	r30, 0x52	; 82
    5c90:	f1 e0       	ldi	r31, 0x01	; 1
    5c92:	01 90       	ld	r0, Z+
    5c94:	0d 92       	st	X+, r0
    5c96:	8a 95       	dec	r24
    5c98:	e1 f7       	brne	.-8      	; 0x5c92 <_ZN8SPIFlashC1Eh+0x54>
    5c9a:	de 01       	movw	r26, r28
    5c9c:	a0 57       	subi	r26, 0x70	; 112
    5c9e:	bf 4f       	sbci	r27, 0xFF	; 255
    5ca0:	88 e4       	ldi	r24, 0x48	; 72
    5ca2:	e4 e6       	ldi	r30, 0x64	; 100
    5ca4:	f1 e0       	ldi	r31, 0x01	; 1
    5ca6:	01 90       	ld	r0, Z+
    5ca8:	0d 92       	st	X+, r0
    5caa:	8a 95       	dec	r24
    5cac:	e1 f7       	brne	.-8      	; 0x5ca6 <_ZN8SPIFlashC1Eh+0x68>
    5cae:	de 01       	movw	r26, r28
    5cb0:	a8 52       	subi	r26, 0x28	; 40
    5cb2:	bf 4f       	sbci	r27, 0xFF	; 255
    5cb4:	89 e0       	ldi	r24, 0x09	; 9
    5cb6:	ec ea       	ldi	r30, 0xAC	; 172
    5cb8:	f1 e0       	ldi	r31, 0x01	; 1
    5cba:	01 90       	ld	r0, Z+
    5cbc:	0d 92       	st	X+, r0
    5cbe:	8a 95       	dec	r24
    5cc0:	e1 f7       	brne	.-8      	; 0x5cba <_ZN8SPIFlashC1Eh+0x7c>
    5cc2:	fe 01       	movw	r30, r28
    5cc4:	ef 51       	subi	r30, 0x1F	; 31
    5cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    5cc8:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <_ZN14EthernetClient8_srcportE+0x73>
    5ccc:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <_ZN14EthernetClient8_srcportE+0x74>
    5cd0:	a0 91 b7 01 	lds	r26, 0x01B7	; 0x8001b7 <_ZN14EthernetClient8_srcportE+0x75>
    5cd4:	80 83       	st	Z, r24
    5cd6:	91 83       	std	Z+1, r25	; 0x01
    5cd8:	a2 83       	std	Z+2, r26	; 0x02
    5cda:	8a e0       	ldi	r24, 0x0A	; 10
    5cdc:	8a 87       	std	Y+10, r24	; 0x0a
    5cde:	6d 83       	std	Y+5, r22	; 0x05
    5ce0:	24 b1       	in	r18, 0x04	; 4
    5ce2:	81 e0       	ldi	r24, 0x01	; 1
    5ce4:	90 e0       	ldi	r25, 0x00	; 0
    5ce6:	01 c0       	rjmp	.+2      	; 0x5cea <_ZN8SPIFlashC1Eh+0xac>
    5ce8:	88 0f       	add	r24, r24
    5cea:	6a 95       	dec	r22
    5cec:	ea f7       	brpl	.-6      	; 0x5ce8 <_ZN8SPIFlashC1Eh+0xaa>
    5cee:	82 2b       	or	r24, r18
    5cf0:	84 b9       	out	0x04, r24	; 4
    5cf2:	2c 9a       	sbi	0x05, 4	; 5
    5cf4:	df 91       	pop	r29
    5cf6:	cf 91       	pop	r28
    5cf8:	08 95       	ret

00005cfa <_ZN8SPIFlash5beginEm>:
    5cfa:	cf 92       	push	r12
    5cfc:	df 92       	push	r13
    5cfe:	ef 92       	push	r14
    5d00:	ff 92       	push	r15
    5d02:	1f 93       	push	r17
    5d04:	cf 93       	push	r28
    5d06:	df 93       	push	r29
    5d08:	ec 01       	movw	r28, r24
    5d0a:	6a 01       	movw	r12, r20
    5d0c:	7b 01       	movw	r14, r22
    5d0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d10:	8b 30       	cpi	r24, 0x0B	; 11
    5d12:	09 f0       	breq	.+2      	; 0x5d16 <_ZN8SPIFlash5beginEm+0x1c>
    5d14:	01 d5       	rcall	.+2562   	; 0x6718 <_ZN8SPIClass5beginEv>
    5d16:	8a 81       	ldd	r24, Y+2	; 0x02
    5d18:	81 11       	cpse	r24, r1
    5d1a:	04 c0       	rjmp	.+8      	; 0x5d24 <_ZN8SPIFlash5beginEm+0x2a>
    5d1c:	80 e5       	ldi	r24, 0x50	; 80
    5d1e:	88 83       	st	Y, r24
    5d20:	81 e0       	ldi	r24, 0x01	; 1
    5d22:	89 83       	std	Y+1, r24	; 0x01
    5d24:	b7 01       	movw	r22, r14
    5d26:	a6 01       	movw	r20, r12
    5d28:	ce 01       	movw	r24, r28
    5d2a:	1c d4       	rcall	.+2104   	; 0x6564 <_ZN8SPIFlash7_chipIDEm>
    5d2c:	18 2f       	mov	r17, r24
    5d2e:	ce 01       	movw	r24, r28
    5d30:	a7 d2       	rcall	.+1358   	; 0x6280 <_ZN8SPIFlash7_endSPIEv>
    5d32:	1f 86       	std	Y+15, r1	; 0x0f
    5d34:	ce 01       	movw	r24, r28
    5d36:	da d3       	rcall	.+1972   	; 0x64ec <_ZN8SPIFlash26_disableGlobalBlockProtectEv>
    5d38:	81 2f       	mov	r24, r17
    5d3a:	df 91       	pop	r29
    5d3c:	cf 91       	pop	r28
    5d3e:	1f 91       	pop	r17
    5d40:	ff 90       	pop	r15
    5d42:	ef 90       	pop	r14
    5d44:	df 90       	pop	r13
    5d46:	cf 90       	pop	r12
    5d48:	08 95       	ret

00005d4a <_ZN8SPIFlash5errorEb>:
    5d4a:	66 23       	and	r22, r22
    5d4c:	21 f0       	breq	.+8      	; 0x5d56 <_ZN8SPIFlash5errorEb+0xc>
    5d4e:	41 e0       	ldi	r20, 0x01	; 1
    5d50:	60 91 94 0d 	lds	r22, 0x0D94	; 0x800d94 <diagnostics>
    5d54:	de d4       	rcall	.+2492   	; 0x6712 <_ZN8SPIFlash13_troubleshootEhb>
    5d56:	80 91 94 0d 	lds	r24, 0x0D94	; 0x800d94 <diagnostics>
    5d5a:	08 95       	ret

00005d5c <_ZN8SPIFlash11getCapacityEv>:
    5d5c:	fc 01       	movw	r30, r24
    5d5e:	60 a5       	ldd	r22, Z+40	; 0x28
    5d60:	71 a5       	ldd	r23, Z+41	; 0x29
    5d62:	82 a5       	ldd	r24, Z+42	; 0x2a
    5d64:	93 a5       	ldd	r25, Z+43	; 0x2b
    5d66:	08 95       	ret

00005d68 <_ZN8SPIFlash10getMaxPageEv>:
    5d68:	fc 01       	movw	r30, r24
    5d6a:	ec 5a       	subi	r30, 0xAC	; 172
    5d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d6e:	20 81       	ld	r18, Z
    5d70:	31 81       	ldd	r19, Z+1	; 0x01
    5d72:	40 e0       	ldi	r20, 0x00	; 0
    5d74:	50 e0       	ldi	r21, 0x00	; 0
    5d76:	fc 01       	movw	r30, r24
    5d78:	60 a5       	ldd	r22, Z+40	; 0x28
    5d7a:	71 a5       	ldd	r23, Z+41	; 0x29
    5d7c:	82 a5       	ldd	r24, Z+42	; 0x2a
    5d7e:	93 a5       	ldd	r25, Z+43	; 0x2b
    5d80:	0e 94 3c 40 	call	0x8078	; 0x8078 <__udivmodsi4>
    5d84:	ca 01       	movw	r24, r20
    5d86:	b9 01       	movw	r22, r18
    5d88:	08 95       	ret

00005d8a <_ZN8SPIFlash15functionRunTimeEv>:
    5d8a:	60 e0       	ldi	r22, 0x00	; 0
    5d8c:	70 e0       	ldi	r23, 0x00	; 0
    5d8e:	cb 01       	movw	r24, r22
    5d90:	08 95       	ret

00005d92 <_ZN8SPIFlash10getJEDECIDEv>:
    5d92:	fc 01       	movw	r30, r24
    5d94:	65 a1       	ldd	r22, Z+37	; 0x25
    5d96:	76 a1       	ldd	r23, Z+38	; 0x26
    5d98:	76 27       	eor	r23, r22
    5d9a:	67 27       	eor	r22, r23
    5d9c:	76 27       	eor	r23, r22
    5d9e:	cb 01       	movw	r24, r22
    5da0:	a0 e0       	ldi	r26, 0x00	; 0
    5da2:	b0 e0       	ldi	r27, 0x00	; 0
    5da4:	ba 2f       	mov	r27, r26
    5da6:	a9 2f       	mov	r26, r25
    5da8:	98 2f       	mov	r25, r24
    5daa:	88 27       	eor	r24, r24
    5dac:	27 a1       	ldd	r18, Z+39	; 0x27
    5dae:	bc 01       	movw	r22, r24
    5db0:	cd 01       	movw	r24, r26
    5db2:	62 2b       	or	r22, r18
    5db4:	08 95       	ret

00005db6 <_ZN8SPIFlash11getUniqueIDEv>:
    5db6:	6f 92       	push	r6
    5db8:	7f 92       	push	r7
    5dba:	8f 92       	push	r8
    5dbc:	9f 92       	push	r9
    5dbe:	af 92       	push	r10
    5dc0:	bf 92       	push	r11
    5dc2:	cf 92       	push	r12
    5dc4:	df 92       	push	r13
    5dc6:	ef 92       	push	r14
    5dc8:	ff 92       	push	r15
    5dca:	0f 93       	push	r16
    5dcc:	1f 93       	push	r17
    5dce:	cf 93       	push	r28
    5dd0:	df 93       	push	r29
    5dd2:	ec 01       	movw	r28, r24
    5dd4:	40 e0       	ldi	r20, 0x00	; 0
    5dd6:	5a ec       	ldi	r21, 0xCA	; 202
    5dd8:	6a e9       	ldi	r22, 0x9A	; 154
    5dda:	7b e3       	ldi	r23, 0x3B	; 59
    5ddc:	7f d2       	rcall	.+1278   	; 0x62dc <_ZN8SPIFlash8_notBusyEm>
    5dde:	88 23       	and	r24, r24
    5de0:	21 f0       	breq	.+8      	; 0x5dea <_ZN8SPIFlash11getUniqueIDEv+0x34>
    5de2:	ce 01       	movw	r24, r28
    5de4:	6e d2       	rcall	.+1244   	; 0x62c2 <_ZN8SPIFlash18_isChipPoweredDownEv>
    5de6:	88 23       	and	r24, r24
    5de8:	49 f0       	breq	.+18     	; 0x5dfc <_ZN8SPIFlash11getUniqueIDEv+0x46>
    5dea:	20 e0       	ldi	r18, 0x00	; 0
    5dec:	30 e0       	ldi	r19, 0x00	; 0
    5dee:	40 e0       	ldi	r20, 0x00	; 0
    5df0:	50 e0       	ldi	r21, 0x00	; 0
    5df2:	60 e0       	ldi	r22, 0x00	; 0
    5df4:	70 e0       	ldi	r23, 0x00	; 0
    5df6:	80 e0       	ldi	r24, 0x00	; 0
    5df8:	90 e0       	ldi	r25, 0x00	; 0
    5dfa:	43 c0       	rjmp	.+134    	; 0x5e82 <_ZN8SPIFlash11getUniqueIDEv+0xcc>
    5dfc:	6b e4       	ldi	r22, 0x4B	; 75
    5dfe:	ce 01       	movw	r24, r28
    5e00:	85 d1       	rcall	.+778    	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
    5e02:	14 e0       	ldi	r17, 0x04	; 4
    5e04:	4e ee       	ldi	r20, 0xEE	; 238
    5e06:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5e08:	ce 01       	movw	r24, r28
    5e0a:	e8 d1       	rcall	.+976    	; 0x61dc <_ZN8SPIFlash9_nextByteEch>
    5e0c:	11 50       	subi	r17, 0x01	; 1
    5e0e:	d1 f7       	brne	.-12     	; 0x5e04 <_ZN8SPIFlash11getUniqueIDEv+0x4e>
    5e10:	88 89       	ldd	r24, Y+16	; 0x10
    5e12:	88 23       	and	r24, r24
    5e14:	21 f0       	breq	.+8      	; 0x5e1e <_ZN8SPIFlash11getUniqueIDEv+0x68>
    5e16:	4e ee       	ldi	r20, 0xEE	; 238
    5e18:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5e1a:	ce 01       	movw	r24, r28
    5e1c:	df d1       	rcall	.+958    	; 0x61dc <_ZN8SPIFlash9_nextByteEch>
    5e1e:	4e 01       	movw	r8, r28
    5e20:	86 e7       	ldi	r24, 0x76	; 118
    5e22:	88 0e       	add	r8, r24
    5e24:	91 1c       	adc	r9, r1
    5e26:	3e 01       	movw	r6, r28
    5e28:	ee e7       	ldi	r30, 0x7E	; 126
    5e2a:	6e 0e       	add	r6, r30
    5e2c:	71 1c       	adc	r7, r1
    5e2e:	84 01       	movw	r16, r8
    5e30:	40 e0       	ldi	r20, 0x00	; 0
    5e32:	6c 8d       	ldd	r22, Y+28	; 0x1c
    5e34:	ce 01       	movw	r24, r28
    5e36:	d2 d1       	rcall	.+932    	; 0x61dc <_ZN8SPIFlash9_nextByteEch>
    5e38:	f8 01       	movw	r30, r16
    5e3a:	81 93       	st	Z+, r24
    5e3c:	8f 01       	movw	r16, r30
    5e3e:	6e 16       	cp	r6, r30
    5e40:	7f 06       	cpc	r7, r31
    5e42:	b1 f7       	brne	.-20     	; 0x5e30 <_ZN8SPIFlash11getUniqueIDEv+0x7a>
    5e44:	2c 9a       	sbi	0x05, 4	; 5
    5e46:	a1 2c       	mov	r10, r1
    5e48:	b1 2c       	mov	r11, r1
    5e4a:	c1 2c       	mov	r12, r1
    5e4c:	d1 2c       	mov	r13, r1
    5e4e:	e1 2c       	mov	r14, r1
    5e50:	f1 2c       	mov	r15, r1
    5e52:	00 e0       	ldi	r16, 0x00	; 0
    5e54:	10 e0       	ldi	r17, 0x00	; 0
    5e56:	f4 01       	movw	r30, r8
    5e58:	21 91       	ld	r18, Z+
    5e5a:	4f 01       	movw	r8, r30
    5e5c:	30 e0       	ldi	r19, 0x00	; 0
    5e5e:	40 e0       	ldi	r20, 0x00	; 0
    5e60:	50 e0       	ldi	r21, 0x00	; 0
    5e62:	60 e0       	ldi	r22, 0x00	; 0
    5e64:	70 e0       	ldi	r23, 0x00	; 0
    5e66:	80 e0       	ldi	r24, 0x00	; 0
    5e68:	90 e0       	ldi	r25, 0x00	; 0
    5e6a:	0e 94 87 41 	call	0x830e	; 0x830e <__adddi3>
    5e6e:	08 e0       	ldi	r16, 0x08	; 8
    5e70:	0e 94 50 41 	call	0x82a0	; 0x82a0 <__ashldi3>
    5e74:	59 01       	movw	r10, r18
    5e76:	6a 01       	movw	r12, r20
    5e78:	7b 01       	movw	r14, r22
    5e7a:	8c 01       	movw	r16, r24
    5e7c:	e6 15       	cp	r30, r6
    5e7e:	f7 05       	cpc	r31, r7
    5e80:	51 f7       	brne	.-44     	; 0x5e56 <_ZN8SPIFlash11getUniqueIDEv+0xa0>
    5e82:	df 91       	pop	r29
    5e84:	cf 91       	pop	r28
    5e86:	1f 91       	pop	r17
    5e88:	0f 91       	pop	r16
    5e8a:	ff 90       	pop	r15
    5e8c:	ef 90       	pop	r14
    5e8e:	df 90       	pop	r13
    5e90:	cf 90       	pop	r12
    5e92:	bf 90       	pop	r11
    5e94:	af 90       	pop	r10
    5e96:	9f 90       	pop	r9
    5e98:	8f 90       	pop	r8
    5e9a:	7f 90       	pop	r7
    5e9c:	6f 90       	pop	r6
    5e9e:	08 95       	ret

00005ea0 <_ZN8SPIFlash11eraseSectorEm>:
    5ea0:	ef 92       	push	r14
    5ea2:	ff 92       	push	r15
    5ea4:	0f 93       	push	r16
    5ea6:	1f 93       	push	r17
    5ea8:	cf 93       	push	r28
    5eaa:	df 93       	push	r29
    5eac:	ec 01       	movw	r28, r24
    5eae:	88 a9       	ldd	r24, Y+48	; 0x30
    5eb0:	81 11       	cpse	r24, r1
    5eb2:	05 c0       	rjmp	.+10     	; 0x5ebe <_ZN8SPIFlash11eraseSectorEm+0x1e>
    5eb4:	40 e0       	ldi	r20, 0x00	; 0
    5eb6:	6c e0       	ldi	r22, 0x0C	; 12
    5eb8:	ce 01       	movw	r24, r28
    5eba:	2b d4       	rcall	.+2134   	; 0x6712 <_ZN8SPIFlash13_troubleshootEhb>
    5ebc:	1d c0       	rjmp	.+58     	; 0x5ef8 <_ZN8SPIFlash11eraseSectorEm+0x58>
    5ebe:	e1 2c       	mov	r14, r1
    5ec0:	10 e1       	ldi	r17, 0x10	; 16
    5ec2:	f1 2e       	mov	r15, r17
    5ec4:	00 e0       	ldi	r16, 0x00	; 0
    5ec6:	10 e0       	ldi	r17, 0x00	; 0
    5ec8:	9a 01       	movw	r18, r20
    5eca:	ab 01       	movw	r20, r22
    5ecc:	6f ee       	ldi	r22, 0xEF	; 239
    5ece:	ce 01       	movw	r24, r28
    5ed0:	67 d2       	rcall	.+1230   	; 0x63a0 <_ZN8SPIFlash5_prepEhmm>
    5ed2:	88 23       	and	r24, r24
    5ed4:	89 f0       	breq	.+34     	; 0x5ef8 <_ZN8SPIFlash11eraseSectorEm+0x58>
    5ed6:	69 a9       	ldd	r22, Y+49	; 0x31
    5ed8:	ce 01       	movw	r24, r28
    5eda:	18 d1       	rcall	.+560    	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
    5edc:	ce 01       	movw	r24, r28
    5ede:	d0 d1       	rcall	.+928    	; 0x6280 <_ZN8SPIFlash7_endSPIEv>
    5ee0:	4a a9       	ldd	r20, Y+50	; 0x32
    5ee2:	5b a9       	ldd	r21, Y+51	; 0x33
    5ee4:	6c a9       	ldd	r22, Y+52	; 0x34
    5ee6:	7d a9       	ldd	r23, Y+53	; 0x35
    5ee8:	ce 01       	movw	r24, r28
    5eea:	df 91       	pop	r29
    5eec:	cf 91       	pop	r28
    5eee:	1f 91       	pop	r17
    5ef0:	0f 91       	pop	r16
    5ef2:	ff 90       	pop	r15
    5ef4:	ef 90       	pop	r14
    5ef6:	f2 c1       	rjmp	.+996    	; 0x62dc <_ZN8SPIFlash8_notBusyEm>
    5ef8:	80 e0       	ldi	r24, 0x00	; 0
    5efa:	df 91       	pop	r29
    5efc:	cf 91       	pop	r28
    5efe:	1f 91       	pop	r17
    5f00:	0f 91       	pop	r16
    5f02:	ff 90       	pop	r15
    5f04:	ef 90       	pop	r14
    5f06:	08 95       	ret

00005f08 <_ZN8SPIFlash9eraseChipEv>:
    5f08:	1f 93       	push	r17
    5f0a:	cf 93       	push	r28
    5f0c:	df 93       	push	r29
    5f0e:	ec 01       	movw	r28, r24
    5f10:	d8 d1       	rcall	.+944    	; 0x62c2 <_ZN8SPIFlash18_isChipPoweredDownEv>
    5f12:	81 11       	cpse	r24, r1
    5f14:	1d c0       	rjmp	.+58     	; 0x5f50 <_ZN8SPIFlash9eraseChipEv+0x48>
    5f16:	40 e0       	ldi	r20, 0x00	; 0
    5f18:	5a ec       	ldi	r21, 0xCA	; 202
    5f1a:	6a e9       	ldi	r22, 0x9A	; 154
    5f1c:	7b e3       	ldi	r23, 0x3B	; 59
    5f1e:	ce 01       	movw	r24, r28
    5f20:	dd d1       	rcall	.+954    	; 0x62dc <_ZN8SPIFlash8_notBusyEm>
    5f22:	88 23       	and	r24, r24
    5f24:	a9 f0       	breq	.+42     	; 0x5f50 <_ZN8SPIFlash9eraseChipEv+0x48>
    5f26:	61 e0       	ldi	r22, 0x01	; 1
    5f28:	ce 01       	movw	r24, r28
    5f2a:	1f d2       	rcall	.+1086   	; 0x636a <_ZN8SPIFlash12_writeEnableEb>
    5f2c:	18 2f       	mov	r17, r24
    5f2e:	88 23       	and	r24, r24
    5f30:	79 f0       	breq	.+30     	; 0x5f50 <_ZN8SPIFlash9eraseChipEv+0x48>
    5f32:	fe 01       	movw	r30, r28
    5f34:	e7 5b       	subi	r30, 0xB7	; 183
    5f36:	ff 4f       	sbci	r31, 0xFF	; 255
    5f38:	60 81       	ld	r22, Z
    5f3a:	ce 01       	movw	r24, r28
    5f3c:	e7 d0       	rcall	.+462    	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
    5f3e:	ce 01       	movw	r24, r28
    5f40:	9f d1       	rcall	.+830    	; 0x6280 <_ZN8SPIFlash7_endSPIEv>
    5f42:	ce 01       	movw	r24, r28
    5f44:	4d d1       	rcall	.+666    	; 0x61e0 <_ZN8SPIFlash10_readStat1Ev>
    5f46:	80 fd       	sbrc	r24, 0
    5f48:	fc cf       	rjmp	.-8      	; 0x5f42 <_ZN8SPIFlash9eraseChipEv+0x3a>
    5f4a:	ce 01       	movw	r24, r28
    5f4c:	99 d1       	rcall	.+818    	; 0x6280 <_ZN8SPIFlash7_endSPIEv>
    5f4e:	01 c0       	rjmp	.+2      	; 0x5f52 <_ZN8SPIFlash9eraseChipEv+0x4a>
    5f50:	10 e0       	ldi	r17, 0x00	; 0
    5f52:	81 2f       	mov	r24, r17
    5f54:	df 91       	pop	r29
    5f56:	cf 91       	pop	r28
    5f58:	1f 91       	pop	r17
    5f5a:	08 95       	ret

00005f5c <_ZN8SPIFlash9powerDownEv>:

//Puts device in low power state. Good for battery powered operations.
//In powerDown() the chip will only respond to powerUp()
bool SPIFlash::powerDown(void) {
    5f5c:	0f 93       	push	r16
    5f5e:	1f 93       	push	r17
    5f60:	cf 93       	push	r28
    5f62:	8c 01       	movw	r16, r24
  if (_chip.manufacturerID != MICROCHIP_MANID) {
    5f64:	fc 01       	movw	r30, r24
    5f66:	85 a1       	ldd	r24, Z+37	; 0x25
    5f68:	8f 3b       	cpi	r24, 0xBF	; 191
    5f6a:	c9 f0       	breq	.+50     	; 0x5f9e <_ZN8SPIFlash9powerDownEv+0x42>
    #ifdef RUNDIAGNOSTIC
      _spifuncruntime = micros();
    #endif
  	if(!_notBusy(20))
    5f6c:	44 e1       	ldi	r20, 0x14	; 20
    5f6e:	50 e0       	ldi	r21, 0x00	; 0
    5f70:	60 e0       	ldi	r22, 0x00	; 0
    5f72:	70 e0       	ldi	r23, 0x00	; 0
    5f74:	c8 01       	movw	r24, r16
    5f76:	b2 d1       	rcall	.+868    	; 0x62dc <_ZN8SPIFlash8_notBusyEm>
    5f78:	88 23       	and	r24, r24
    5f7a:	b1 f0       	breq	.+44     	; 0x5fa8 <_ZN8SPIFlash9powerDownEv+0x4c>
  		return false;

  	_beginSPI(POWERDOWN);
    5f7c:	69 eb       	ldi	r22, 0xB9	; 185
    5f7e:	c8 01       	movw	r24, r16
    5f80:	c5 d0       	rcall	.+394    	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
    _endSPI();
    5f82:	c8 01       	movw	r24, r16
    5f84:	7d d1       	rcall	.+762    	; 0x6280 <_ZN8SPIFlash7_endSPIEv>
    5f86:	fa e1       	ldi	r31, 0x1A	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5f88:	fa 95       	dec	r31
    5f8a:	f1 f7       	brne	.-4      	; 0x5f88 <_ZN8SPIFlash9powerDownEv+0x2c>
    5f8c:	00 c0       	rjmp	.+0      	; 0x5f8e <_ZN8SPIFlash9powerDownEv+0x32>
    5f8e:	c1 e0       	ldi	r28, 0x01	; 1
      chipPoweredDown = true;
      bool _retVal = !_writeEnable(false);
      _spifuncruntime = micros() - _spifuncruntime;
      return _retVal;
    #else
      chipPoweredDown = true;
    5f90:	f8 01       	movw	r30, r16
    5f92:	c7 87       	std	Z+15, r28	; 0x0f
      return !_writeEnable(false);
    5f94:	60 e0       	ldi	r22, 0x00	; 0
    5f96:	c8 01       	movw	r24, r16
    5f98:	e8 d1       	rcall	.+976    	; 0x636a <_ZN8SPIFlash12_writeEnableEb>
    5f9a:	8c 27       	eor	r24, r28
    5f9c:	05 c0       	rjmp	.+10     	; 0x5fa8 <_ZN8SPIFlash9powerDownEv+0x4c>
    #endif
  }
  else {
    _troubleshoot(UNSUPPORTEDFUNC);
    5f9e:	40 e0       	ldi	r20, 0x00	; 0
    5fa0:	6c e0       	ldi	r22, 0x0C	; 12
    5fa2:	c8 01       	movw	r24, r16
    5fa4:	b6 d3       	rcall	.+1900   	; 0x6712 <_ZN8SPIFlash13_troubleshootEhb>
    5fa6:	80 e0       	ldi	r24, 0x00	; 0
    return false;
    5fa8:	cf 91       	pop	r28
  }
}
    5faa:	1f 91       	pop	r17
    5fac:	0f 91       	pop	r16
    5fae:	08 95       	ret

00005fb0 <_ZN8SPIFlash7powerUpEv>:
    5fb0:	1f 93       	push	r17

//Wakes chip from low power state.
bool SPIFlash::powerUp(void) {
    5fb2:	cf 93       	push	r28
    5fb4:	df 93       	push	r29
    5fb6:	ec 01       	movw	r28, r24
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros();
  #endif
	_beginSPI(RELEASE);
    5fb8:	6b ea       	ldi	r22, 0xAB	; 171
    5fba:	a8 d0       	rcall	.+336    	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
  _endSPI();
    5fbc:	ce 01       	movw	r24, r28
    5fbe:	60 d1       	rcall	.+704    	; 0x6280 <_ZN8SPIFlash7_endSPIEv>
    5fc0:	80 e1       	ldi	r24, 0x10	; 16
    5fc2:	8a 95       	dec	r24
    5fc4:	f1 f7       	brne	.-4      	; 0x5fc2 <_ZN8SPIFlash7powerUpEv+0x12>
      chipPoweredDown = false;
      return true;
    }
    return false;
  #else
  if (_writeEnable(false)) {
    5fc6:	60 e0       	ldi	r22, 0x00	; 0
    5fc8:	ce 01       	movw	r24, r28
    5fca:	cf d1       	rcall	.+926    	; 0x636a <_ZN8SPIFlash12_writeEnableEb>
    5fcc:	18 2f       	mov	r17, r24
    5fce:	88 23       	and	r24, r24
    _writeDisable();
    5fd0:	19 f0       	breq	.+6      	; 0x5fd8 <_ZN8SPIFlash7powerUpEv+0x28>
    5fd2:	ce 01       	movw	r24, r28
    5fd4:	5c d2       	rcall	.+1208   	; 0x648e <_ZN8SPIFlash13_writeDisableEv>
    chipPoweredDown = false;
    5fd6:	1f 86       	std	Y+15, r1	; 0x0f
    return true;
  }
  return false;
  #endif
}
    5fd8:	81 2f       	mov	r24, r17
    5fda:	df 91       	pop	r29
    5fdc:	cf 91       	pop	r28
    5fde:	1f 91       	pop	r17
    5fe0:	08 95       	ret

00005fe2 <_ZN8SPIFlash13_addressCheckEmm>:
   _nextByte(READ);
   *b1 = _nextByte(READ);
   *b2 = _nextByte(READ);
   CHIP_DESELECT
   return true;
 }
    5fe2:	8f 92       	push	r8
    5fe4:	9f 92       	push	r9
    5fe6:	af 92       	push	r10
    5fe8:	bf 92       	push	r11
    5fea:	cf 92       	push	r12
    5fec:	df 92       	push	r13
    5fee:	ef 92       	push	r14
    5ff0:	ff 92       	push	r15
    5ff2:	0f 93       	push	r16
    5ff4:	1f 93       	push	r17
    5ff6:	cf 93       	push	r28
    5ff8:	df 93       	push	r29
    5ffa:	ec 01       	movw	r28, r24
    5ffc:	4a 01       	movw	r8, r20
    5ffe:	5b 01       	movw	r10, r22
    6000:	68 01       	movw	r12, r16
    6002:	79 01       	movw	r14, r18
    6004:	60 e0       	ldi	r22, 0x00	; 0
    6006:	a1 de       	rcall	.-702    	; 0x5d4a <_ZN8SPIFlash5errorEb>
    6008:	87 7f       	andi	r24, 0xF7	; 247
    600a:	83 30       	cpi	r24, 0x03	; 3
    600c:	89 f1       	breq	.+98     	; 0x6070 <_ZN8SPIFlash13_addressCheckEmm+0x8e>
    600e:	88 a5       	ldd	r24, Y+40	; 0x28
    6010:	99 a5       	ldd	r25, Y+41	; 0x29
    6012:	aa a5       	ldd	r26, Y+42	; 0x2a
    6014:	bb a5       	ldd	r27, Y+43	; 0x2b
    6016:	00 97       	sbiw	r24, 0x00	; 0
    6018:	a1 05       	cpc	r26, r1
    601a:	b1 05       	cpc	r27, r1
    601c:	31 f4       	brne	.+12     	; 0x602a <_ZN8SPIFlash13_addressCheckEmm+0x48>
    601e:	40 e0       	ldi	r20, 0x00	; 0
    6020:	61 e0       	ldi	r22, 0x01	; 1
    6022:	84 e9       	ldi	r24, 0x94	; 148
    6024:	9d e0       	ldi	r25, 0x0D	; 13
    6026:	06 de       	rcall	.-1012   	; 0x5c34 <_ZN11Diagnostics12troubleshootEhb>
    6028:	23 c0       	rjmp	.+70     	; 0x6070 <_ZN8SPIFlash13_addressCheckEmm+0x8e>
    602a:	95 01       	movw	r18, r10
    602c:	84 01       	movw	r16, r8
    602e:	0c 0d       	add	r16, r12
    6030:	1d 1d       	adc	r17, r13
    6032:	2e 1d       	adc	r18, r14
    6034:	3f 1d       	adc	r19, r15
    6036:	fe 01       	movw	r30, r28
    6038:	e2 5a       	subi	r30, 0xA2	; 162
    603a:	ff 4f       	sbci	r31, 0xFF	; 255
    603c:	c6 5a       	subi	r28, 0xA6	; 166
    603e:	df 4f       	sbci	r29, 0xFF	; 255
    6040:	08 17       	cp	r16, r24
    6042:	19 07       	cpc	r17, r25
    6044:	2a 07       	cpc	r18, r26
    6046:	3b 07       	cpc	r19, r27
    6048:	48 f0       	brcs	.+18     	; 0x605c <_ZN8SPIFlash13_addressCheckEmm+0x7a>
    604a:	08 1b       	sub	r16, r24
    604c:	19 0b       	sbc	r17, r25
    604e:	2a 0b       	sbc	r18, r26
    6050:	3b 0b       	sbc	r19, r27
    6052:	00 83       	st	Z, r16
    6054:	11 83       	std	Z+1, r17	; 0x01
    6056:	22 83       	std	Z+2, r18	; 0x02
    6058:	33 83       	std	Z+3, r19	; 0x03
    605a:	04 c0       	rjmp	.+8      	; 0x6064 <_ZN8SPIFlash13_addressCheckEmm+0x82>
    605c:	10 82       	st	Z, r1
    605e:	11 82       	std	Z+1, r1	; 0x01
    6060:	12 82       	std	Z+2, r1	; 0x02
    6062:	13 82       	std	Z+3, r1	; 0x03
    6064:	88 82       	st	Y, r8
    6066:	99 82       	std	Y+1, r9	; 0x01
    6068:	aa 82       	std	Y+2, r10	; 0x02
    606a:	bb 82       	std	Y+3, r11	; 0x03
    606c:	81 e0       	ldi	r24, 0x01	; 1
    606e:	01 c0       	rjmp	.+2      	; 0x6072 <_ZN8SPIFlash13_addressCheckEmm+0x90>
    6070:	80 e0       	ldi	r24, 0x00	; 0
    6072:	df 91       	pop	r29
    6074:	cf 91       	pop	r28
    6076:	1f 91       	pop	r17
    6078:	0f 91       	pop	r16
    607a:	ff 90       	pop	r15
    607c:	ef 90       	pop	r14
    607e:	df 90       	pop	r13
    6080:	cf 90       	pop	r12
    6082:	bf 90       	pop	r11
    6084:	af 90       	pop	r10
    6086:	9f 90       	pop	r9
    6088:	8f 90       	pop	r8
    608a:	08 95       	ret

0000608c <_ZN8SPIFlash16_transferAddressEv>:
    608c:	cf 93       	push	r28
    608e:	df 93       	push	r29
    6090:	ec 01       	movw	r28, r24
    6092:	88 89       	ldd	r24, Y+16	; 0x10
    6094:	88 23       	and	r24, r24
    6096:	29 f0       	breq	.+10     	; 0x60a2 <_ZN8SPIFlash16_transferAddressEv+0x16>
    6098:	fe 01       	movw	r30, r28
    609a:	e3 5a       	subi	r30, 0xA3	; 163
    609c:	ff 4f       	sbci	r31, 0xFF	; 255
    609e:	80 81       	ld	r24, Z
    60a0:	11 d9       	rcall	.-3550   	; 0x52c4 <_ZN8SPIClass8transferEh>
    60a2:	fe 01       	movw	r30, r28
    60a4:	e4 5a       	subi	r30, 0xA4	; 164
    60a6:	ff 4f       	sbci	r31, 0xFF	; 255
    60a8:	80 81       	ld	r24, Z
    60aa:	0c d9       	rcall	.-3560   	; 0x52c4 <_ZN8SPIClass8transferEh>
    60ac:	fe 01       	movw	r30, r28
    60ae:	e5 5a       	subi	r30, 0xA5	; 165
    60b0:	ff 4f       	sbci	r31, 0xFF	; 255
    60b2:	80 81       	ld	r24, Z
    60b4:	07 d9       	rcall	.-3570   	; 0x52c4 <_ZN8SPIClass8transferEh>
    60b6:	c6 5a       	subi	r28, 0xA6	; 166
    60b8:	df 4f       	sbci	r29, 0xFF	; 255
    60ba:	88 81       	ld	r24, Y
    60bc:	03 d9       	rcall	.-3578   	; 0x52c4 <_ZN8SPIClass8transferEh>
    60be:	81 e0       	ldi	r24, 0x01	; 1
    60c0:	df 91       	pop	r29
    60c2:	cf 91       	pop	r28
    60c4:	08 95       	ret

000060c6 <_ZN8SPIFlash12_startSPIBusEv>:
    60c6:	fc 01       	movw	r30, r24
    60c8:	8c b5       	in	r24, 0x2c	; 44
    60ca:	87 8b       	std	Z+23, r24	; 0x17
    60cc:	8d b5       	in	r24, 0x2d	; 45
    60ce:	80 8f       	std	Z+24, r24	; 0x18
    60d0:	40 81       	ld	r20, Z
    60d2:	31 81       	ldd	r19, Z+1	; 0x01
    60d4:	80 91 97 0d 	lds	r24, 0x0D97	; 0x800d97 <_ZN8SPIClass13interruptModeE>
    60d8:	88 23       	and	r24, r24
    60da:	99 f0       	breq	.+38     	; 0x6102 <_ZN8SPIFlash12_startSPIBusEv+0x3c>
    60dc:	2f b7       	in	r18, 0x3f	; 63
    60de:	f8 94       	cli
    60e0:	80 91 97 0d 	lds	r24, 0x0D97	; 0x800d97 <_ZN8SPIClass13interruptModeE>
    60e4:	81 30       	cpi	r24, 0x01	; 1
    60e6:	59 f4       	brne	.+22     	; 0x60fe <_ZN8SPIFlash12_startSPIBusEv+0x38>
    60e8:	8d b3       	in	r24, 0x1d	; 29
    60ea:	80 93 95 0d 	sts	0x0D95, r24	; 0x800d95 <_ZN8SPIClass13interruptSaveE>
    60ee:	9d b3       	in	r25, 0x1d	; 29
    60f0:	80 91 96 0d 	lds	r24, 0x0D96	; 0x800d96 <_ZN8SPIClass13interruptMaskE>
    60f4:	80 95       	com	r24
    60f6:	89 23       	and	r24, r25
    60f8:	8d bb       	out	0x1d, r24	; 29
    60fa:	2f bf       	out	0x3f, r18	; 63
    60fc:	02 c0       	rjmp	.+4      	; 0x6102 <_ZN8SPIFlash12_startSPIBusEv+0x3c>
    60fe:	20 93 95 0d 	sts	0x0D95, r18	; 0x800d95 <_ZN8SPIClass13interruptSaveE>
    6102:	4c bd       	out	0x2c, r20	; 44
    6104:	3d bd       	out	0x2d, r19	; 45
    6106:	81 e0       	ldi	r24, 0x01	; 1
    6108:	86 87       	std	Z+14, r24	; 0x0e
    610a:	08 95       	ret

0000610c <_ZN8SPIFlash9_beginSPIEh>:
    610c:	0f 93       	push	r16
    610e:	1f 93       	push	r17
    6110:	cf 93       	push	r28
    6112:	8c 01       	movw	r16, r24
    6114:	c6 2f       	mov	r28, r22
    6116:	fc 01       	movw	r30, r24
    6118:	86 85       	ldd	r24, Z+14	; 0x0e
    611a:	81 11       	cpse	r24, r1
    611c:	02 c0       	rjmp	.+4      	; 0x6122 <_ZN8SPIFlash9_beginSPIEh+0x16>
    611e:	c8 01       	movw	r24, r16
    6120:	d2 df       	rcall	.-92     	; 0x60c6 <_ZN8SPIFlash12_startSPIBusEv>
    6122:	2c 98       	cbi	0x05, 4	; 5
    6124:	cb 30       	cpi	r28, 0x0B	; 11
    6126:	a1 f0       	breq	.+40     	; 0x6150 <_ZN8SPIFlash9_beginSPIEh+0x44>
    6128:	30 f4       	brcc	.+12     	; 0x6136 <_ZN8SPIFlash9_beginSPIEh+0x2a>
    612a:	c2 30       	cpi	r28, 0x02	; 2
    612c:	61 f0       	breq	.+24     	; 0x6146 <_ZN8SPIFlash9_beginSPIEh+0x3a>
    612e:	c3 30       	cpi	r28, 0x03	; 3
    6130:	c9 f4       	brne	.+50     	; 0x6164 <_ZN8SPIFlash9_beginSPIEh+0x58>
    6132:	83 e0       	ldi	r24, 0x03	; 3
    6134:	09 c0       	rjmp	.+18     	; 0x6148 <_ZN8SPIFlash9_beginSPIEh+0x3c>
    6136:	c2 35       	cpi	r28, 0x52	; 82
    6138:	89 f0       	breq	.+34     	; 0x615c <_ZN8SPIFlash9_beginSPIEh+0x50>
    613a:	c8 3d       	cpi	r28, 0xD8	; 216
    613c:	89 f0       	breq	.+34     	; 0x6160 <_ZN8SPIFlash9_beginSPIEh+0x54>
    613e:	c0 32       	cpi	r28, 0x20	; 32
    6140:	89 f4       	brne	.+34     	; 0x6164 <_ZN8SPIFlash9_beginSPIEh+0x58>
    6142:	80 e2       	ldi	r24, 0x20	; 32
    6144:	01 c0       	rjmp	.+2      	; 0x6148 <_ZN8SPIFlash9_beginSPIEh+0x3c>
    6146:	82 e0       	ldi	r24, 0x02	; 2
    6148:	bd d8       	rcall	.-3718   	; 0x52c4 <_ZN8SPIClass8transferEh>
    614a:	c8 01       	movw	r24, r16
    614c:	9f df       	rcall	.-194    	; 0x608c <_ZN8SPIFlash16_transferAddressEv>
    614e:	0c c0       	rjmp	.+24     	; 0x6168 <_ZN8SPIFlash9_beginSPIEh+0x5c>
    6150:	8b e0       	ldi	r24, 0x0B	; 11
    6152:	b8 d8       	rcall	.-3728   	; 0x52c4 <_ZN8SPIClass8transferEh>
    6154:	c8 01       	movw	r24, r16
    6156:	9a df       	rcall	.-204    	; 0x608c <_ZN8SPIFlash16_transferAddressEv>
    6158:	8e ee       	ldi	r24, 0xEE	; 238
    615a:	05 c0       	rjmp	.+10     	; 0x6166 <_ZN8SPIFlash9_beginSPIEh+0x5a>
    615c:	82 e5       	ldi	r24, 0x52	; 82
    615e:	f4 cf       	rjmp	.-24     	; 0x6148 <_ZN8SPIFlash9_beginSPIEh+0x3c>
    6160:	88 ed       	ldi	r24, 0xD8	; 216
    6162:	f2 cf       	rjmp	.-28     	; 0x6148 <_ZN8SPIFlash9_beginSPIEh+0x3c>
    6164:	8c 2f       	mov	r24, r28
    6166:	ae d8       	rcall	.-3748   	; 0x52c4 <_ZN8SPIClass8transferEh>
    6168:	81 e0       	ldi	r24, 0x01	; 1
    616a:	cf 91       	pop	r28
    616c:	1f 91       	pop	r17
    616e:	0f 91       	pop	r16
    6170:	08 95       	ret

00006172 <_ZN8SPIFlash15_notPrevWrittenEmm>:
    6172:	8f 92       	push	r8
    6174:	9f 92       	push	r9
    6176:	af 92       	push	r10
    6178:	bf 92       	push	r11
    617a:	cf 92       	push	r12
    617c:	df 92       	push	r13
    617e:	ef 92       	push	r14
    6180:	ff 92       	push	r15
    6182:	0f 93       	push	r16
    6184:	1f 93       	push	r17
    6186:	48 01       	movw	r8, r16
    6188:	59 01       	movw	r10, r18
    618a:	63 e0       	ldi	r22, 0x03	; 3
    618c:	bf df       	rcall	.-130    	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
    618e:	c1 2c       	mov	r12, r1
    6190:	d1 2c       	mov	r13, r1
    6192:	76 01       	movw	r14, r12
    6194:	c8 14       	cp	r12, r8
    6196:	d9 04       	cpc	r13, r9
    6198:	ea 04       	cpc	r14, r10
    619a:	fb 04       	cpc	r15, r11
    619c:	91 f0       	breq	.+36     	; 0x61c2 <_ZN8SPIFlash15_notPrevWrittenEmm+0x50>
    619e:	80 e0       	ldi	r24, 0x00	; 0
    61a0:	91 d8       	rcall	.-3806   	; 0x52c4 <_ZN8SPIClass8transferEh>
    61a2:	8f 3f       	cpi	r24, 0xFF	; 255
    61a4:	41 f0       	breq	.+16     	; 0x61b6 <_ZN8SPIFlash15_notPrevWrittenEmm+0x44>
    61a6:	2c 9a       	sbi	0x05, 4	; 5
    61a8:	40 e0       	ldi	r20, 0x00	; 0
    61aa:	67 e0       	ldi	r22, 0x07	; 7
    61ac:	84 e9       	ldi	r24, 0x94	; 148
    61ae:	9d e0       	ldi	r25, 0x0D	; 13
    61b0:	41 dd       	rcall	.-1406   	; 0x5c34 <_ZN11Diagnostics12troubleshootEhb>
    61b2:	80 e0       	ldi	r24, 0x00	; 0
    61b4:	08 c0       	rjmp	.+16     	; 0x61c6 <_ZN8SPIFlash15_notPrevWrittenEmm+0x54>
    61b6:	8f ef       	ldi	r24, 0xFF	; 255
    61b8:	c8 1a       	sub	r12, r24
    61ba:	d8 0a       	sbc	r13, r24
    61bc:	e8 0a       	sbc	r14, r24
    61be:	f8 0a       	sbc	r15, r24
    61c0:	e9 cf       	rjmp	.-46     	; 0x6194 <_ZN8SPIFlash15_notPrevWrittenEmm+0x22>
    61c2:	2c 9a       	sbi	0x05, 4	; 5
    61c4:	81 e0       	ldi	r24, 0x01	; 1
    61c6:	1f 91       	pop	r17
    61c8:	0f 91       	pop	r16
    61ca:	ff 90       	pop	r15
    61cc:	ef 90       	pop	r14
    61ce:	df 90       	pop	r13
    61d0:	cf 90       	pop	r12
    61d2:	bf 90       	pop	r11
    61d4:	af 90       	pop	r10
    61d6:	9f 90       	pop	r9
    61d8:	8f 90       	pop	r8
    61da:	08 95       	ret

000061dc <_ZN8SPIFlash9_nextByteEch>:
    61dc:	84 2f       	mov	r24, r20
    61de:	72 c8       	rjmp	.-3868   	; 0x52c4 <_ZN8SPIClass8transferEh>

000061e0 <_ZN8SPIFlash10_readStat1Ev>:
    61e0:	cf 93       	push	r28
    61e2:	df 93       	push	r29
    61e4:	ec 01       	movw	r28, r24
    61e6:	65 e0       	ldi	r22, 0x05	; 5
    61e8:	91 df       	rcall	.-222    	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
    61ea:	80 e0       	ldi	r24, 0x00	; 0
    61ec:	6b d8       	rcall	.-3882   	; 0x52c4 <_ZN8SPIClass8transferEh>
    61ee:	8c 8b       	std	Y+20, r24	; 0x14
    61f0:	2c 9a       	sbi	0x05, 4	; 5
    61f2:	8c 89       	ldd	r24, Y+20	; 0x14
    61f4:	df 91       	pop	r29
    61f6:	cf 91       	pop	r28
    61f8:	08 95       	ret

000061fa <_ZN8SPIFlash10_readStat3Ev>:
    61fa:	cf 93       	push	r28
    61fc:	df 93       	push	r29
    61fe:	ec 01       	movw	r28, r24
    6200:	65 e1       	ldi	r22, 0x15	; 21
    6202:	84 df       	rcall	.-248    	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
    6204:	80 e0       	ldi	r24, 0x00	; 0
    6206:	5e d8       	rcall	.-3908   	; 0x52c4 <_ZN8SPIClass8transferEh>
    6208:	8e 8b       	std	Y+22, r24	; 0x16
    620a:	2c 9a       	sbi	0x05, 4	; 5
    620c:	8e 89       	ldd	r24, Y+22	; 0x16
    620e:	df 91       	pop	r29
    6210:	cf 91       	pop	r28
    6212:	08 95       	ret

00006214 <_ZN8SPIFlash22_enable4ByteAddressingEv>:
    6214:	cf 93       	push	r28
    6216:	df 93       	push	r29
    6218:	ec 01       	movw	r28, r24
    621a:	ef df       	rcall	.-34     	; 0x61fa <_ZN8SPIFlash10_readStat3Ev>
    621c:	80 fd       	sbrc	r24, 0
    621e:	12 c0       	rjmp	.+36     	; 0x6244 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x30>
    6220:	67 eb       	ldi	r22, 0xB7	; 183
    6222:	ce 01       	movw	r24, r28
    6224:	73 df       	rcall	.-282    	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
    6226:	2c 9a       	sbi	0x05, 4	; 5
    6228:	ce 01       	movw	r24, r28
    622a:	e7 df       	rcall	.-50     	; 0x61fa <_ZN8SPIFlash10_readStat3Ev>
    622c:	80 ff       	sbrs	r24, 0
    622e:	03 c0       	rjmp	.+6      	; 0x6236 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x22>
    6230:	81 e0       	ldi	r24, 0x01	; 1
    6232:	88 8b       	std	Y+16, r24	; 0x10
    6234:	08 c0       	rjmp	.+16     	; 0x6246 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x32>
    6236:	40 e0       	ldi	r20, 0x00	; 0
    6238:	6d e0       	ldi	r22, 0x0D	; 13
    623a:	84 e9       	ldi	r24, 0x94	; 148
    623c:	9d e0       	ldi	r25, 0x0D	; 13
    623e:	fa dc       	rcall	.-1548   	; 0x5c34 <_ZN11Diagnostics12troubleshootEhb>
    6240:	80 e0       	ldi	r24, 0x00	; 0
    6242:	01 c0       	rjmp	.+2      	; 0x6246 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x32>
    6244:	81 e0       	ldi	r24, 0x01	; 1
    6246:	df 91       	pop	r29
    6248:	cf 91       	pop	r28
    624a:	08 95       	ret

0000624c <_ZN8SPIFlash23_disable4ByteAddressingEv>:
    624c:	cf 93       	push	r28
    624e:	df 93       	push	r29
    6250:	ec 01       	movw	r28, r24
    6252:	d3 df       	rcall	.-90     	; 0x61fa <_ZN8SPIFlash10_readStat3Ev>
    6254:	80 ff       	sbrs	r24, 0
    6256:	10 c0       	rjmp	.+32     	; 0x6278 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x2c>
    6258:	69 ee       	ldi	r22, 0xE9	; 233
    625a:	ce 01       	movw	r24, r28
    625c:	57 df       	rcall	.-338    	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
    625e:	2c 9a       	sbi	0x05, 4	; 5
    6260:	ce 01       	movw	r24, r28
    6262:	cb df       	rcall	.-106    	; 0x61fa <_ZN8SPIFlash10_readStat3Ev>
    6264:	80 ff       	sbrs	r24, 0
    6266:	07 c0       	rjmp	.+14     	; 0x6276 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x2a>
    6268:	40 e0       	ldi	r20, 0x00	; 0
    626a:	6e e0       	ldi	r22, 0x0E	; 14
    626c:	84 e9       	ldi	r24, 0x94	; 148
    626e:	9d e0       	ldi	r25, 0x0D	; 13
    6270:	e1 dc       	rcall	.-1598   	; 0x5c34 <_ZN11Diagnostics12troubleshootEhb>
    6272:	80 e0       	ldi	r24, 0x00	; 0
    6274:	02 c0       	rjmp	.+4      	; 0x627a <_ZN8SPIFlash23_disable4ByteAddressingEv+0x2e>
    6276:	18 8a       	std	Y+16, r1	; 0x10
    6278:	81 e0       	ldi	r24, 0x01	; 1
    627a:	df 91       	pop	r29
    627c:	cf 91       	pop	r28
    627e:	08 95       	ret

00006280 <_ZN8SPIFlash7_endSPIEv>:
    6280:	cf 93       	push	r28
    6282:	df 93       	push	r29
    6284:	ec 01       	movw	r28, r24
    6286:	2c 9a       	sbi	0x05, 4	; 5
    6288:	88 89       	ldd	r24, Y+16	; 0x10
    628a:	88 23       	and	r24, r24
    628c:	11 f0       	breq	.+4      	; 0x6292 <_ZN8SPIFlash7_endSPIEv+0x12>
    628e:	ce 01       	movw	r24, r28
    6290:	dd df       	rcall	.-70     	; 0x624c <_ZN8SPIFlash23_disable4ByteAddressingEv>
    6292:	80 91 97 0d 	lds	r24, 0x0D97	; 0x800d97 <_ZN8SPIClass13interruptModeE>
    6296:	88 23       	and	r24, r24
    6298:	61 f0       	breq	.+24     	; 0x62b2 <_ZN8SPIFlash7_endSPIEv+0x32>
    629a:	9f b7       	in	r25, 0x3f	; 63
    629c:	f8 94       	cli
    629e:	20 91 97 0d 	lds	r18, 0x0D97	; 0x800d97 <_ZN8SPIClass13interruptModeE>
    62a2:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <_ZN8SPIClass13interruptSaveE>
    62a6:	21 30       	cpi	r18, 0x01	; 1
    62a8:	19 f4       	brne	.+6      	; 0x62b0 <_ZN8SPIFlash7_endSPIEv+0x30>
    62aa:	8d bb       	out	0x1d, r24	; 29
    62ac:	9f bf       	out	0x3f, r25	; 63
    62ae:	01 c0       	rjmp	.+2      	; 0x62b2 <_ZN8SPIFlash7_endSPIEv+0x32>
    62b0:	8f bf       	out	0x3f, r24	; 63
    62b2:	8f 89       	ldd	r24, Y+23	; 0x17
    62b4:	8c bd       	out	0x2c, r24	; 44
    62b6:	88 8d       	ldd	r24, Y+24	; 0x18
    62b8:	8d bd       	out	0x2d, r24	; 45
    62ba:	1e 86       	std	Y+14, r1	; 0x0e
    62bc:	df 91       	pop	r29
    62be:	cf 91       	pop	r28
    62c0:	08 95       	ret

000062c2 <_ZN8SPIFlash18_isChipPoweredDownEv>:
    62c2:	cf 93       	push	r28
    62c4:	fc 01       	movw	r30, r24
    62c6:	c7 85       	ldd	r28, Z+15	; 0x0f
    62c8:	cc 23       	and	r28, r28
    62ca:	29 f0       	breq	.+10     	; 0x62d6 <_ZN8SPIFlash18_isChipPoweredDownEv+0x14>
    62cc:	40 e0       	ldi	r20, 0x00	; 0
    62ce:	6f e0       	ldi	r22, 0x0F	; 15
    62d0:	84 e9       	ldi	r24, 0x94	; 148
    62d2:	9d e0       	ldi	r25, 0x0D	; 13
    62d4:	af dc       	rcall	.-1698   	; 0x5c34 <_ZN11Diagnostics12troubleshootEhb>
    62d6:	8c 2f       	mov	r24, r28
    62d8:	cf 91       	pop	r28
    62da:	08 95       	ret

000062dc <_ZN8SPIFlash8_notBusyEm>:
    62dc:	8f 92       	push	r8
    62de:	9f 92       	push	r9
    62e0:	af 92       	push	r10
    62e2:	bf 92       	push	r11
    62e4:	cf 92       	push	r12
    62e6:	df 92       	push	r13
    62e8:	ef 92       	push	r14
    62ea:	ff 92       	push	r15
    62ec:	cf 93       	push	r28
    62ee:	df 93       	push	r29
    62f0:	ec 01       	movw	r28, r24
    62f2:	6a 01       	movw	r12, r20
    62f4:	7b 01       	movw	r14, r22
    62f6:	8a e0       	ldi	r24, 0x0A	; 10
    62f8:	8a 95       	dec	r24
    62fa:	f1 f7       	brne	.-4      	; 0x62f8 <_ZN8SPIFlash8_notBusyEm+0x1c>
    62fc:	00 c0       	rjmp	.+0      	; 0x62fe <_ZN8SPIFlash8_notBusyEm+0x22>
    62fe:	0e 94 13 3b 	call	0x7626	; 0x7626 <micros>
    6302:	4b 01       	movw	r8, r22
    6304:	5c 01       	movw	r10, r24
    6306:	ce 01       	movw	r24, r28
    6308:	6b df       	rcall	.-298    	; 0x61e0 <_ZN8SPIFlash10_readStat1Ev>
    630a:	8c 89       	ldd	r24, Y+20	; 0x14
    630c:	80 fd       	sbrc	r24, 0
    630e:	02 c0       	rjmp	.+4      	; 0x6314 <_ZN8SPIFlash8_notBusyEm+0x38>
    6310:	81 e0       	ldi	r24, 0x01	; 1
    6312:	20 c0       	rjmp	.+64     	; 0x6354 <_ZN8SPIFlash8_notBusyEm+0x78>
    6314:	0e 94 13 3b 	call	0x7626	; 0x7626 <micros>
    6318:	dc 01       	movw	r26, r24
    631a:	cb 01       	movw	r24, r22
    631c:	88 19       	sub	r24, r8
    631e:	99 09       	sbc	r25, r9
    6320:	aa 09       	sbc	r26, r10
    6322:	bb 09       	sbc	r27, r11
    6324:	8c 15       	cp	r24, r12
    6326:	9d 05       	cpc	r25, r13
    6328:	ae 05       	cpc	r26, r14
    632a:	bf 05       	cpc	r27, r15
    632c:	60 f3       	brcs	.-40     	; 0x6306 <_ZN8SPIFlash8_notBusyEm+0x2a>
    632e:	0e 94 13 3b 	call	0x7626	; 0x7626 <micros>
    6332:	dc 01       	movw	r26, r24
    6334:	cb 01       	movw	r24, r22
    6336:	88 19       	sub	r24, r8
    6338:	99 09       	sbc	r25, r9
    633a:	aa 09       	sbc	r26, r10
    633c:	bb 09       	sbc	r27, r11
    633e:	8c 15       	cp	r24, r12
    6340:	9d 05       	cpc	r25, r13
    6342:	ae 05       	cpc	r26, r14
    6344:	bf 05       	cpc	r27, r15
    6346:	20 f3       	brcs	.-56     	; 0x6310 <_ZN8SPIFlash8_notBusyEm+0x34>
    6348:	40 e0       	ldi	r20, 0x00	; 0
    634a:	64 e0       	ldi	r22, 0x04	; 4
    634c:	84 e9       	ldi	r24, 0x94	; 148
    634e:	9d e0       	ldi	r25, 0x0D	; 13
    6350:	71 dc       	rcall	.-1822   	; 0x5c34 <_ZN11Diagnostics12troubleshootEhb>
    6352:	80 e0       	ldi	r24, 0x00	; 0
    6354:	df 91       	pop	r29
    6356:	cf 91       	pop	r28
    6358:	ff 90       	pop	r15
    635a:	ef 90       	pop	r14
    635c:	df 90       	pop	r13
    635e:	cf 90       	pop	r12
    6360:	bf 90       	pop	r11
    6362:	af 90       	pop	r10
    6364:	9f 90       	pop	r9
    6366:	8f 90       	pop	r8
    6368:	08 95       	ret

0000636a <_ZN8SPIFlash12_writeEnableEb>:
    636a:	1f 93       	push	r17
    636c:	cf 93       	push	r28
    636e:	df 93       	push	r29
    6370:	ec 01       	movw	r28, r24
    6372:	16 2f       	mov	r17, r22
    6374:	66 e0       	ldi	r22, 0x06	; 6
    6376:	ca de       	rcall	.-620    	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
    6378:	2c 9a       	sbi	0x05, 4	; 5
    637a:	ce 01       	movw	r24, r28
    637c:	31 df       	rcall	.-414    	; 0x61e0 <_ZN8SPIFlash10_readStat1Ev>
    637e:	81 fd       	sbrc	r24, 1
    6380:	08 c0       	rjmp	.+16     	; 0x6392 <_ZN8SPIFlash12_writeEnableEb+0x28>
    6382:	11 23       	and	r17, r17
    6384:	41 f0       	breq	.+16     	; 0x6396 <_ZN8SPIFlash12_writeEnableEb+0x2c>
    6386:	40 e0       	ldi	r20, 0x00	; 0
    6388:	66 e0       	ldi	r22, 0x06	; 6
    638a:	84 e9       	ldi	r24, 0x94	; 148
    638c:	9d e0       	ldi	r25, 0x0D	; 13
    638e:	52 dc       	rcall	.-1884   	; 0x5c34 <_ZN11Diagnostics12troubleshootEhb>
    6390:	02 c0       	rjmp	.+4      	; 0x6396 <_ZN8SPIFlash12_writeEnableEb+0x2c>
    6392:	81 e0       	ldi	r24, 0x01	; 1
    6394:	01 c0       	rjmp	.+2      	; 0x6398 <_ZN8SPIFlash12_writeEnableEb+0x2e>
    6396:	80 e0       	ldi	r24, 0x00	; 0
    6398:	df 91       	pop	r29
    639a:	cf 91       	pop	r28
    639c:	1f 91       	pop	r17
    639e:	08 95       	ret

000063a0 <_ZN8SPIFlash5_prepEhmm>:
    63a0:	7f 92       	push	r7
    63a2:	8f 92       	push	r8
    63a4:	9f 92       	push	r9
    63a6:	af 92       	push	r10
    63a8:	bf 92       	push	r11
    63aa:	cf 92       	push	r12
    63ac:	df 92       	push	r13
    63ae:	ef 92       	push	r14
    63b0:	ff 92       	push	r15
    63b2:	0f 93       	push	r16
    63b4:	1f 93       	push	r17
    63b6:	cf 93       	push	r28
    63b8:	df 93       	push	r29
    63ba:	ec 01       	movw	r28, r24
    63bc:	76 2e       	mov	r7, r22
    63be:	49 01       	movw	r8, r18
    63c0:	5a 01       	movw	r10, r20
    63c2:	67 01       	movw	r12, r14
    63c4:	78 01       	movw	r14, r16
    63c6:	8d a1       	ldd	r24, Y+37	; 0x25
    63c8:	8f 3e       	cpi	r24, 0xEF	; 239
    63ca:	39 f0       	breq	.+14     	; 0x63da <_ZN8SPIFlash5_prepEhmm+0x3a>
    63cc:	82 e0       	ldi	r24, 0x02	; 2
    63ce:	78 16       	cp	r7, r24
    63d0:	71 f0       	breq	.+28     	; 0x63ee <_ZN8SPIFlash5_prepEhmm+0x4e>
    63d2:	8f ee       	ldi	r24, 0xEF	; 239
    63d4:	78 16       	cp	r7, r24
    63d6:	f1 f0       	breq	.+60     	; 0x6414 <_ZN8SPIFlash5_prepEhmm+0x74>
    63d8:	38 c0       	rjmp	.+112    	; 0x644a <_ZN8SPIFlash5_prepEhmm+0xaa>
    63da:	21 15       	cp	r18, r1
    63dc:	31 05       	cpc	r19, r1
    63de:	41 05       	cpc	r20, r1
    63e0:	51 40       	sbci	r21, 0x01	; 1
    63e2:	a0 f3       	brcs	.-24     	; 0x63cc <_ZN8SPIFlash5_prepEhmm+0x2c>
    63e4:	ce 01       	movw	r24, r28
    63e6:	16 df       	rcall	.-468    	; 0x6214 <_ZN8SPIFlash22_enable4ByteAddressingEv>
    63e8:	81 11       	cpse	r24, r1
    63ea:	f0 cf       	rjmp	.-32     	; 0x63cc <_ZN8SPIFlash5_prepEhmm+0x2c>
    63ec:	41 c0       	rjmp	.+130    	; 0x6470 <_ZN8SPIFlash5_prepEhmm+0xd0>
    63ee:	ce 01       	movw	r24, r28
    63f0:	68 df       	rcall	.-304    	; 0x62c2 <_ZN8SPIFlash18_isChipPoweredDownEv>
    63f2:	81 11       	cpse	r24, r1
    63f4:	3d c0       	rjmp	.+122    	; 0x6470 <_ZN8SPIFlash5_prepEhmm+0xd0>
    63f6:	97 01       	movw	r18, r14
    63f8:	86 01       	movw	r16, r12
    63fa:	b5 01       	movw	r22, r10
    63fc:	a4 01       	movw	r20, r8
    63fe:	ce 01       	movw	r24, r28
    6400:	f0 dd       	rcall	.-1056   	; 0x5fe2 <_ZN8SPIFlash13_addressCheckEmm>
    6402:	88 23       	and	r24, r24
    6404:	a9 f1       	breq	.+106    	; 0x6470 <_ZN8SPIFlash5_prepEhmm+0xd0>
    6406:	97 01       	movw	r18, r14
    6408:	86 01       	movw	r16, r12
    640a:	b5 01       	movw	r22, r10
    640c:	a4 01       	movw	r20, r8
    640e:	ce 01       	movw	r24, r28
    6410:	b0 de       	rcall	.-672    	; 0x6172 <_ZN8SPIFlash15_notPrevWrittenEmm>
    6412:	0a c0       	rjmp	.+20     	; 0x6428 <_ZN8SPIFlash5_prepEhmm+0x88>
    6414:	ce 01       	movw	r24, r28
    6416:	55 df       	rcall	.-342    	; 0x62c2 <_ZN8SPIFlash18_isChipPoweredDownEv>
    6418:	81 11       	cpse	r24, r1
    641a:	2a c0       	rjmp	.+84     	; 0x6470 <_ZN8SPIFlash5_prepEhmm+0xd0>
    641c:	97 01       	movw	r18, r14
    641e:	86 01       	movw	r16, r12
    6420:	b5 01       	movw	r22, r10
    6422:	a4 01       	movw	r20, r8
    6424:	ce 01       	movw	r24, r28
    6426:	dd dd       	rcall	.-1094   	; 0x5fe2 <_ZN8SPIFlash13_addressCheckEmm>
    6428:	88 23       	and	r24, r24
    642a:	11 f1       	breq	.+68     	; 0x6470 <_ZN8SPIFlash5_prepEhmm+0xd0>
    642c:	40 e0       	ldi	r20, 0x00	; 0
    642e:	5a ec       	ldi	r21, 0xCA	; 202
    6430:	6a e9       	ldi	r22, 0x9A	; 154
    6432:	7b e3       	ldi	r23, 0x3B	; 59
    6434:	ce 01       	movw	r24, r28
    6436:	52 df       	rcall	.-348    	; 0x62dc <_ZN8SPIFlash8_notBusyEm>
    6438:	88 23       	and	r24, r24
    643a:	d1 f0       	breq	.+52     	; 0x6470 <_ZN8SPIFlash5_prepEhmm+0xd0>
    643c:	61 e0       	ldi	r22, 0x01	; 1
    643e:	ce 01       	movw	r24, r28
    6440:	94 df       	rcall	.-216    	; 0x636a <_ZN8SPIFlash12_writeEnableEb>
    6442:	88 23       	and	r24, r24
    6444:	a9 f0       	breq	.+42     	; 0x6470 <_ZN8SPIFlash5_prepEhmm+0xd0>
    6446:	81 e0       	ldi	r24, 0x01	; 1
    6448:	14 c0       	rjmp	.+40     	; 0x6472 <_ZN8SPIFlash5_prepEhmm+0xd2>
    644a:	ce 01       	movw	r24, r28
    644c:	3a df       	rcall	.-396    	; 0x62c2 <_ZN8SPIFlash18_isChipPoweredDownEv>
    644e:	81 11       	cpse	r24, r1
    6450:	0f c0       	rjmp	.+30     	; 0x6470 <_ZN8SPIFlash5_prepEhmm+0xd0>
    6452:	97 01       	movw	r18, r14
    6454:	86 01       	movw	r16, r12
    6456:	b5 01       	movw	r22, r10
    6458:	a4 01       	movw	r20, r8
    645a:	ce 01       	movw	r24, r28
    645c:	c2 dd       	rcall	.-1148   	; 0x5fe2 <_ZN8SPIFlash13_addressCheckEmm>
    645e:	88 23       	and	r24, r24
    6460:	39 f0       	breq	.+14     	; 0x6470 <_ZN8SPIFlash5_prepEhmm+0xd0>
    6462:	40 e0       	ldi	r20, 0x00	; 0
    6464:	5a ec       	ldi	r21, 0xCA	; 202
    6466:	6a e9       	ldi	r22, 0x9A	; 154
    6468:	7b e3       	ldi	r23, 0x3B	; 59
    646a:	ce 01       	movw	r24, r28
    646c:	37 df       	rcall	.-402    	; 0x62dc <_ZN8SPIFlash8_notBusyEm>
    646e:	e9 cf       	rjmp	.-46     	; 0x6442 <_ZN8SPIFlash5_prepEhmm+0xa2>
    6470:	80 e0       	ldi	r24, 0x00	; 0
    6472:	df 91       	pop	r29
    6474:	cf 91       	pop	r28
    6476:	1f 91       	pop	r17
    6478:	0f 91       	pop	r16
    647a:	ff 90       	pop	r15
    647c:	ef 90       	pop	r14
    647e:	df 90       	pop	r13
    6480:	cf 90       	pop	r12
    6482:	bf 90       	pop	r11
    6484:	af 90       	pop	r10
    6486:	9f 90       	pop	r9
    6488:	8f 90       	pop	r8
    648a:	7f 90       	pop	r7
    648c:	08 95       	ret

0000648e <_ZN8SPIFlash13_writeDisableEv>:
    648e:	64 e0       	ldi	r22, 0x04	; 4
    6490:	3d de       	rcall	.-902    	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
    6492:	2c 9a       	sbi	0x05, 4	; 5
    6494:	81 e0       	ldi	r24, 0x01	; 1
    6496:	08 95       	ret

00006498 <_ZN8SPIFlash11_getJedecIdEv>:

 //Checks for presence of chip by requesting JEDEC ID
 bool SPIFlash::_getJedecId(void) {
    6498:	1f 93       	push	r17
    649a:	cf 93       	push	r28
    649c:	df 93       	push	r29
    649e:	ec 01       	movw	r28, r24
   if(!_notBusy()) {
    64a0:	40 e0       	ldi	r20, 0x00	; 0
    64a2:	5a ec       	ldi	r21, 0xCA	; 202
    64a4:	6a e9       	ldi	r22, 0x9A	; 154
    64a6:	7b e3       	ldi	r23, 0x3B	; 59
    64a8:	19 df       	rcall	.-462    	; 0x62dc <_ZN8SPIFlash8_notBusyEm>
    64aa:	18 2f       	mov	r17, r24
    64ac:	88 23       	and	r24, r24
    64ae:	c9 f0       	breq	.+50     	; 0x64e2 <_ZN8SPIFlash11_getJedecIdEv+0x4a>
     return false;
   }
   _beginSPI(JEDECID);
    64b0:	6f e9       	ldi	r22, 0x9F	; 159
    64b2:	ce 01       	movw	r24, r28
    64b4:	2b de       	rcall	.-938    	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    64b6:	80 e0       	ldi	r24, 0x00	; 0
    64b8:	0e 94 62 29 	call	0x52c4	; 0x52c4 <_ZN8SPIClass8transferEh>
 bool SPIFlash::_getJedecId(void) {
   if(!_notBusy()) {
     return false;
   }
   _beginSPI(JEDECID);
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
    64bc:	8d a3       	std	Y+37, r24	; 0x25
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    64be:	80 e0       	ldi	r24, 0x00	; 0
    64c0:	0e 94 62 29 	call	0x52c4	; 0x52c4 <_ZN8SPIClass8transferEh>
   if(!_notBusy()) {
     return false;
   }
   _beginSPI(JEDECID);
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
 	_chip.memoryTypeID = _nextByte(READ);		// memory type
    64c4:	8e a3       	std	Y+38, r24	; 0x26
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    64c6:	80 e0       	ldi	r24, 0x00	; 0
    64c8:	0e 94 62 29 	call	0x52c4	; 0x52c4 <_ZN8SPIClass8transferEh>
     return false;
   }
   _beginSPI(JEDECID);
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
 	_chip.memoryTypeID = _nextByte(READ);		// memory type
 	_chip.capacityID = _nextByte(READ);		// capacity
    64cc:	8f a3       	std	Y+39, r24	; 0x27
   CHIP_DESELECT
    64ce:	2c 9a       	sbi	0x05, 4	; 5
   if (!_chip.manufacturerID) {
    64d0:	8d a1       	ldd	r24, Y+37	; 0x25
    64d2:	81 11       	cpse	r24, r1
    64d4:	06 c0       	rjmp	.+12     	; 0x64e2 <_ZN8SPIFlash11_getJedecIdEv+0x4a>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    64d6:	40 e0       	ldi	r20, 0x00	; 0
    64d8:	6b e0       	ldi	r22, 0x0B	; 11
    64da:	84 e9       	ldi	r24, 0x94	; 148
    64dc:	9d e0       	ldi	r25, 0x0D	; 13
    64de:	aa db       	rcall	.-2220   	; 0x5c34 <_ZN11Diagnostics12troubleshootEhb>
    64e0:	10 e0       	ldi	r17, 0x00	; 0
     return false;
   }
   else {
     return true;
   }
 }
    64e2:	81 2f       	mov	r24, r17
    64e4:	df 91       	pop	r29
    64e6:	cf 91       	pop	r28
    64e8:	1f 91       	pop	r17
    64ea:	08 95       	ret

000064ec <_ZN8SPIFlash26_disableGlobalBlockProtectEv>:

 bool SPIFlash::_disableGlobalBlockProtect(void) {
    64ec:	1f 93       	push	r17
    64ee:	cf 93       	push	r28
    64f0:	df 93       	push	r29
    64f2:	ec 01       	movw	r28, r24
   if (_chip.memoryTypeID == SST25) {
    64f4:	8e a1       	ldd	r24, Y+38	; 0x26
    64f6:	85 32       	cpi	r24, 0x25	; 37
    64f8:	81 f4       	brne	.+32     	; 0x651a <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x2e>
     _readStat1();
    64fa:	ce 01       	movw	r24, r28
    64fc:	71 de       	rcall	.-798    	; 0x61e0 <_ZN8SPIFlash10_readStat1Ev>
     uint8_t _tempStat1 = stat1 & 0xC3;
    64fe:	1c 89       	ldd	r17, Y+20	; 0x14
    6500:	13 7c       	andi	r17, 0xC3	; 195
     _beginSPI(WRITESTATEN);
    6502:	60 e5       	ldi	r22, 0x50	; 80
    6504:	ce 01       	movw	r24, r28
    6506:	02 de       	rcall	.-1020   	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    6508:	2c 9a       	sbi	0x05, 4	; 5
     _beginSPI(WRITESTAT1);
    650a:	61 e0       	ldi	r22, 0x01	; 1
    650c:	ce 01       	movw	r24, r28
    650e:	fe dd       	rcall	.-1028   	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    6510:	81 2f       	mov	r24, r17
    6512:	0e 94 62 29 	call	0x52c4	; 0x52c4 <_ZN8SPIClass8transferEh>
     uint8_t _tempStat1 = stat1 & 0xC3;
     _beginSPI(WRITESTATEN);
     CHIP_DESELECT
     _beginSPI(WRITESTAT1);
     _nextByte(WRITE, _tempStat1);
     CHIP_DESELECT
    6516:	2c 9a       	sbi	0x05, 4	; 5
    6518:	1f c0       	rjmp	.+62     	; 0x6558 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6c>
   }
   else if (_chip.memoryTypeID == SST26) {
    651a:	86 32       	cpi	r24, 0x26	; 38
    651c:	e9 f4       	brne	.+58     	; 0x6558 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6c>
     if(!_notBusy()) {
    651e:	40 e0       	ldi	r20, 0x00	; 0
    6520:	5a ec       	ldi	r21, 0xCA	; 202
    6522:	6a e9       	ldi	r22, 0x9A	; 154
    6524:	7b e3       	ldi	r23, 0x3B	; 59
    6526:	ce 01       	movw	r24, r28
    6528:	d9 de       	rcall	.-590    	; 0x62dc <_ZN8SPIFlash8_notBusyEm>
    652a:	18 2f       	mov	r17, r24
    652c:	88 23       	and	r24, r24
     	return false;
     }
     _writeEnable();
    652e:	a9 f0       	breq	.+42     	; 0x655a <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6e>
    6530:	61 e0       	ldi	r22, 0x01	; 1
    6532:	ce 01       	movw	r24, r28
    6534:	1a df       	rcall	.-460    	; 0x636a <_ZN8SPIFlash12_writeEnableEb>
    6536:	85 e3       	ldi	r24, 0x35	; 53
    6538:	8a 95       	dec	r24
    653a:	f1 f7       	brne	.-4      	; 0x6538 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x4c>
     _delay_us(10);
     _beginSPI(ULBPR);
    653c:	00 00       	nop
    653e:	68 e9       	ldi	r22, 0x98	; 152
    6540:	ce 01       	movw	r24, r28
    6542:	e4 dd       	rcall	.-1080   	; 0x610c <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    6544:	2c 9a       	sbi	0x05, 4	; 5
    6546:	87 ec       	ldi	r24, 0xC7	; 199
    6548:	90 e0       	ldi	r25, 0x00	; 0
    654a:	01 97       	sbiw	r24, 0x01	; 1
    654c:	f1 f7       	brne	.-4      	; 0x654a <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x5e>
    654e:	00 c0       	rjmp	.+0      	; 0x6550 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x64>
     _delay_us(50);
     _writeDisable();
    6550:	00 00       	nop
    6552:	ce 01       	movw	r24, r28
    6554:	9c df       	rcall	.-200    	; 0x648e <_ZN8SPIFlash13_writeDisableEv>
    6556:	01 c0       	rjmp	.+2      	; 0x655a <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6e>
   }
   return true;
    6558:	11 e0       	ldi	r17, 0x01	; 1
 }
    655a:	81 2f       	mov	r24, r17
    655c:	df 91       	pop	r29
    655e:	cf 91       	pop	r28
    6560:	1f 91       	pop	r17
    6562:	08 95       	ret

00006564 <_ZN8SPIFlash7_chipIDEm>:

 //Identifies the chip
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    6564:	cf 92       	push	r12
    6566:	df 92       	push	r13
    6568:	ef 92       	push	r14
    656a:	ff 92       	push	r15
    656c:	0f 93       	push	r16
    656e:	1f 93       	push	r17
    6570:	cf 93       	push	r28
    6572:	df 93       	push	r29
    6574:	ec 01       	movw	r28, r24
    6576:	6a 01       	movw	r12, r20
    6578:	7b 01       	movw	r14, r22
   //set some default values
   kb4Erase.supported = kb32Erase.supported = kb64Erase.supported = chipErase.supported = true;
    657a:	fc 01       	movw	r30, r24
    657c:	e8 5b       	subi	r30, 0xB8	; 184
    657e:	ff 4f       	sbci	r31, 0xFF	; 255
    6580:	81 e0       	ldi	r24, 0x01	; 1
    6582:	80 83       	st	Z, r24
    6584:	8c af       	std	Y+60, r24	; 0x3c
    6586:	8e ab       	std	Y+54, r24	; 0x36
    6588:	88 ab       	std	Y+48, r24	; 0x30
   kb4Erase.opcode = SECTORERASE;
    658a:	80 e2       	ldi	r24, 0x20	; 32
    658c:	89 ab       	std	Y+49, r24	; 0x31
   kb32Erase.opcode = BLOCK32ERASE;
    658e:	82 e5       	ldi	r24, 0x52	; 82
    6590:	8f ab       	std	Y+55, r24	; 0x37
   kb64Erase.opcode = BLOCK64ERASE;
    6592:	88 ed       	ldi	r24, 0xD8	; 216
    6594:	8d af       	std	Y+61, r24	; 0x3d
   kb4Erase.time = BUSY_TIMEOUT;
    6596:	80 e0       	ldi	r24, 0x00	; 0
    6598:	9a ec       	ldi	r25, 0xCA	; 202
    659a:	aa e9       	ldi	r26, 0x9A	; 154
    659c:	bb e3       	ldi	r27, 0x3B	; 59
    659e:	8a ab       	std	Y+50, r24	; 0x32
    65a0:	9b ab       	std	Y+51, r25	; 0x33
    65a2:	ac ab       	std	Y+52, r26	; 0x34
    65a4:	bd ab       	std	Y+53, r27	; 0x35
   kb32Erase.time = kb4Erase.time * 8;
    65a6:	80 e0       	ldi	r24, 0x00	; 0
    65a8:	90 e5       	ldi	r25, 0x50	; 80
    65aa:	a6 ed       	ldi	r26, 0xD6	; 214
    65ac:	bc ed       	ldi	r27, 0xDC	; 220
    65ae:	88 af       	std	Y+56, r24	; 0x38
    65b0:	99 af       	std	Y+57, r25	; 0x39
    65b2:	aa af       	std	Y+58, r26	; 0x3a
    65b4:	bb af       	std	Y+59, r27	; 0x3b
   kb64Erase.time = kb32Erase.time * 4;
    65b6:	3a 97       	sbiw	r30, 0x0a	; 10
    65b8:	80 e0       	ldi	r24, 0x00	; 0
    65ba:	90 e4       	ldi	r25, 0x40	; 64
    65bc:	a9 e5       	ldi	r26, 0x59	; 89
    65be:	b3 e7       	ldi	r27, 0x73	; 115
    65c0:	80 83       	st	Z, r24
    65c2:	91 83       	std	Z+1, r25	; 0x01
    65c4:	a2 83       	std	Z+2, r26	; 0x02
    65c6:	b3 83       	std	Z+3, r27	; 0x03
   kb256Erase.supported = false;
    65c8:	34 96       	adiw	r30, 0x04	; 4
    65ca:	10 82       	st	Z, r1
   chipErase.opcode = CHIPERASE;
    65cc:	8e 01       	movw	r16, r28
    65ce:	07 5b       	subi	r16, 0xB7	; 183
    65d0:	1f 4f       	sbci	r17, 0xFF	; 255
    65d2:	80 e6       	ldi	r24, 0x60	; 96
    65d4:	f8 01       	movw	r30, r16
    65d6:	80 83       	st	Z, r24
   chipErase.time = kb64Erase.time * 100L;
    65d8:	31 96       	adiw	r30, 0x01	; 1
    65da:	80 e0       	ldi	r24, 0x00	; 0
    65dc:	90 e0       	ldi	r25, 0x00	; 0
    65de:	ad ed       	ldi	r26, 0xDD	; 221
    65e0:	be e0       	ldi	r27, 0x0E	; 14
    65e2:	80 83       	st	Z, r24
    65e4:	91 83       	std	Z+1, r25	; 0x01
    65e6:	a2 83       	std	Z+2, r26	; 0x02
    65e8:	b3 83       	std	Z+3, r27	; 0x03
   _pageSize = SPI_PAGESIZE;
    65ea:	3a 96       	adiw	r30, 0x0a	; 10
    65ec:	80 e0       	ldi	r24, 0x00	; 0
    65ee:	91 e0       	ldi	r25, 0x01	; 1
    65f0:	91 83       	std	Z+1, r25	; 0x01
    65f2:	80 83       	st	Z, r24

   _getJedecId();
    65f4:	ce 01       	movw	r24, r28
    65f6:	50 df       	rcall	.-352    	; 0x6498 <_ZN8SPIFlash11_getJedecIdEv>

   for (uint8_t i = 0; i < sizeof(_supportedManID); i++) {
     if (_chip.manufacturerID == _supportedManID[i]) {
    65f8:	9d a1       	ldd	r25, Y+37	; 0x25
    65fa:	fe 01       	movw	r30, r28
    65fc:	e8 52       	subi	r30, 0x28	; 40
    65fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6600:	de 01       	movw	r26, r28
    6602:	af 51       	subi	r26, 0x1F	; 31
    6604:	bf 4f       	sbci	r27, 0xFF	; 255
    6606:	81 91       	ld	r24, Z+
    6608:	98 13       	cpse	r25, r24
    660a:	03 c0       	rjmp	.+6      	; 0x6612 <_ZN8SPIFlash7_chipIDEm+0xae>
       _chip.supportedMan = true;
    660c:	81 e0       	ldi	r24, 0x01	; 1
    660e:	8b a3       	std	Y+35, r24	; 0x23
       break;
    6610:	03 c0       	rjmp	.+6      	; 0x6618 <_ZN8SPIFlash7_chipIDEm+0xb4>
   chipErase.time = kb64Erase.time * 100L;
   _pageSize = SPI_PAGESIZE;

   _getJedecId();

   for (uint8_t i = 0; i < sizeof(_supportedManID); i++) {
    6612:	ea 17       	cp	r30, r26
    6614:	fb 07       	cpc	r31, r27
    6616:	b9 f7       	brne	.-18     	; 0x6606 <_ZN8SPIFlash7_chipIDEm+0xa2>
       break;
     }
   }

   for (uint8_t i = 0; i < sizeof(_altChipEraseReq); i++) {
     if (_chip.memoryTypeID == _altChipEraseReq[i]) {
    6618:	8e a1       	ldd	r24, Y+38	; 0x26
    661a:	2c 91       	ld	r18, X
    661c:	82 17       	cp	r24, r18
    661e:	51 f0       	breq	.+20     	; 0x6634 <_ZN8SPIFlash7_chipIDEm+0xd0>
    6620:	fe 01       	movw	r30, r28
    6622:	ee 51       	subi	r30, 0x1E	; 30
    6624:	ff 4f       	sbci	r31, 0xFF	; 255
    6626:	20 81       	ld	r18, Z
    6628:	82 17       	cp	r24, r18
    662a:	21 f0       	breq	.+8      	; 0x6634 <_ZN8SPIFlash7_chipIDEm+0xd0>
    662c:	31 96       	adiw	r30, 0x01	; 1
    662e:	20 81       	ld	r18, Z
    6630:	82 13       	cpse	r24, r18
    6632:	03 c0       	rjmp	.+6      	; 0x663a <_ZN8SPIFlash7_chipIDEm+0xd6>
       chipErase.opcode = ALT_CHIPERASE;
    6634:	87 ec       	ldi	r24, 0xC7	; 199
    6636:	f8 01       	movw	r30, r16
    6638:	80 83       	st	Z, r24
       _getSFDPFlashParam();
     }
    #endif
     //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ End SFDP ID section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

   if (_chip.supportedMan) {
    663a:	1b a1       	ldd	r17, Y+35	; 0x23
    663c:	11 23       	and	r17, r17
    663e:	d9 f1       	breq	.+118    	; 0x66b6 <_ZN8SPIFlash7_chipIDEm+0x152>
     #ifdef RUNDIAGNOSTIC
       Serial.println(F("No Chip size defined by user. Checking library support."));
     #endif
     //Identify capacity
     if(_chip.manufacturerID == MACRONIX_MANID)
    6640:	92 3c       	cpi	r25, 0xC2	; 194
    6642:	c1 f4       	brne	.+48     	; 0x6674 <_ZN8SPIFlash7_chipIDEm+0x110>
     {
       switch(_chip.capacityID)
    6644:	8f a1       	ldd	r24, Y+39	; 0x27
    6646:	83 31       	cpi	r24, 0x13	; 19
    6648:	39 f0       	breq	.+14     	; 0x6658 <_ZN8SPIFlash7_chipIDEm+0xf4>
    664a:	84 31       	cpi	r24, 0x14	; 20
    664c:	71 f4       	brne	.+28     	; 0x666a <_ZN8SPIFlash7_chipIDEm+0x106>
         case MX25L4005:
         _chip.capacity = MB(4);
         break;

         case MX25L8005:
         _chip.capacity = MB(8);
    664e:	80 e0       	ldi	r24, 0x00	; 0
    6650:	90 e0       	ldi	r25, 0x00	; 0
    6652:	a0 e8       	ldi	r26, 0x80	; 128
    6654:	b0 e0       	ldi	r27, 0x00	; 0
    6656:	04 c0       	rjmp	.+8      	; 0x6660 <_ZN8SPIFlash7_chipIDEm+0xfc>
     if(_chip.manufacturerID == MACRONIX_MANID)
     {
       switch(_chip.capacityID)
       {
         case MX25L4005:
         _chip.capacity = MB(4);
    6658:	80 e0       	ldi	r24, 0x00	; 0
    665a:	90 e0       	ldi	r25, 0x00	; 0
    665c:	a0 e4       	ldi	r26, 0x40	; 64
    665e:	b0 e0       	ldi	r27, 0x00	; 0
         break;

         case MX25L8005:
         _chip.capacity = MB(8);
    6660:	88 a7       	std	Y+40, r24	; 0x28
    6662:	99 a7       	std	Y+41, r25	; 0x29
    6664:	aa a7       	std	Y+42, r26	; 0x2a
    6666:	bb a7       	std	Y+43, r27	; 0x2b
         break;
    6668:	05 c0       	rjmp	.+10     	; 0x6674 <_ZN8SPIFlash7_chipIDEm+0x110>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    666a:	40 e0       	ldi	r20, 0x00	; 0
    666c:	62 e0       	ldi	r22, 0x02	; 2
    666e:	84 e9       	ldi	r24, 0x94	; 148
    6670:	9d e0       	ldi	r25, 0x0D	; 13
    6672:	e0 da       	rcall	.-2624   	; 0x5c34 <_ZN11Diagnostics12troubleshootEhb>
         default:
         _troubleshoot(UNKNOWNCHIP); //Error code for unidentified capacity
 		 } //TODO - Set up other manufaturerIDs in a similar pattern.
 	 }
     for (uint8_t j = 0; j < sizeof(_capID); j++) {
       if (_chip.capacityID == _capID[j]) {
    6674:	2f a1       	ldd	r18, Y+39	; 0x27
    6676:	fe 01       	movw	r30, r28
    6678:	e2 58       	subi	r30, 0x82	; 130
    667a:	ff 4f       	sbci	r31, 0xFF	; 255
    667c:	80 e0       	ldi	r24, 0x00	; 0
    667e:	90 e0       	ldi	r25, 0x00	; 0
    6680:	31 91       	ld	r19, Z+
    6682:	23 13       	cpse	r18, r19
    6684:	13 c0       	rjmp	.+38     	; 0x66ac <_ZN8SPIFlash7_chipIDEm+0x148>
         _chip.capacity = (_memSize[j]);
    6686:	fc 01       	movw	r30, r24
    6688:	b4 96       	adiw	r30, 0x24	; 36
    668a:	ee 0f       	add	r30, r30
    668c:	ff 1f       	adc	r31, r31
    668e:	ee 0f       	add	r30, r30
    6690:	ff 1f       	adc	r31, r31
    6692:	ec 0f       	add	r30, r28
    6694:	fd 1f       	adc	r31, r29
    6696:	80 81       	ld	r24, Z
    6698:	91 81       	ldd	r25, Z+1	; 0x01
    669a:	a2 81       	ldd	r26, Z+2	; 0x02
    669c:	b3 81       	ldd	r27, Z+3	; 0x03
    669e:	88 a7       	std	Y+40, r24	; 0x28
    66a0:	99 a7       	std	Y+41, r25	; 0x29
    66a2:	aa a7       	std	Y+42, r26	; 0x2a
    66a4:	bb a7       	std	Y+43, r27	; 0x2b
         _chip.supported = true;
    66a6:	81 e0       	ldi	r24, 0x01	; 1
    66a8:	8a a3       	std	Y+34, r24	; 0x22
         #ifdef RUNDIAGNOSTIC
           Serial.println(F("Chip identified. This chip is fully supported by the library."));
         #endif
         return true;
    66aa:	29 c0       	rjmp	.+82     	; 0x66fe <_ZN8SPIFlash7_chipIDEm+0x19a>
    66ac:	01 96       	adiw	r24, 0x01	; 1

         default:
         _troubleshoot(UNKNOWNCHIP); //Error code for unidentified capacity
 		 } //TODO - Set up other manufaturerIDs in a similar pattern.
 	 }
     for (uint8_t j = 0; j < sizeof(_capID); j++) {
    66ae:	82 31       	cpi	r24, 0x12	; 18
    66b0:	91 05       	cpc	r25, r1
    66b2:	31 f7       	brne	.-52     	; 0x6680 <_ZN8SPIFlash7_chipIDEm+0x11c>
    66b4:	0b c0       	rjmp	.+22     	; 0x66cc <_ZN8SPIFlash7_chipIDEm+0x168>
         return true;
       }
     }
   }
   else {
     if (_chip.sfdpAvailable) {
    66b6:	1c a1       	ldd	r17, Y+36	; 0x24
    66b8:	11 23       	and	r17, r17
    66ba:	11 f0       	breq	.+4      	; 0x66c0 <_ZN8SPIFlash7_chipIDEm+0x15c>
       #ifdef RUNDIAGNOSTIC
         Serial.println(F("SFDP ID finished."));
       #endif
       return true;
    66bc:	11 e0       	ldi	r17, 0x01	; 1
    66be:	1f c0       	rjmp	.+62     	; 0x66fe <_ZN8SPIFlash7_chipIDEm+0x19a>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    66c0:	40 e0       	ldi	r20, 0x00	; 0
    66c2:	62 e0       	ldi	r22, 0x02	; 2
    66c4:	84 e9       	ldi	r24, 0x94	; 148
    66c6:	9d e0       	ldi	r25, 0x0D	; 13
    66c8:	b5 da       	rcall	.-2710   	; 0x5c34 <_ZN11Diagnostics12troubleshootEhb>
       #endif
       return true;
     }
     else {
       _troubleshoot(UNKNOWNCHIP); //Error code for unidentified capacity
       return false;
    66ca:	19 c0       	rjmp	.+50     	; 0x66fe <_ZN8SPIFlash7_chipIDEm+0x19a>
     }

   }

   if (!_chip.capacity) {
    66cc:	88 a5       	ldd	r24, Y+40	; 0x28
    66ce:	99 a5       	ldd	r25, Y+41	; 0x29
    66d0:	aa a5       	ldd	r26, Y+42	; 0x2a
    66d2:	bb a5       	ldd	r27, Y+43	; 0x2b
    66d4:	89 2b       	or	r24, r25
    66d6:	8a 2b       	or	r24, r26
    66d8:	8b 2b       	or	r24, r27
    66da:	81 f7       	brne	.-32     	; 0x66bc <_ZN8SPIFlash7_chipIDEm+0x158>
     #ifdef RUNDIAGNOSTIC
       Serial.println(F("Chip capacity cannot be identified"));
     #endif
     if (flashChipSize) {
    66dc:	c1 14       	cp	r12, r1
    66de:	d1 04       	cpc	r13, r1
    66e0:	e1 04       	cpc	r14, r1
    66e2:	f1 04       	cpc	r15, r1
    66e4:	31 f0       	breq	.+12     	; 0x66f2 <_ZN8SPIFlash7_chipIDEm+0x18e>
       // If a custom chip size is defined
       #ifdef RUNDIAGNOSTIC
       Serial.println(F("Custom Chipsize defined"));
       #endif
       _chip.capacity = flashChipSize;
    66e6:	c8 a6       	std	Y+40, r12	; 0x28
    66e8:	d9 a6       	std	Y+41, r13	; 0x29
    66ea:	ea a6       	std	Y+42, r14	; 0x2a
    66ec:	fb a6       	std	Y+43, r15	; 0x2b
       _chip.supported = false;
    66ee:	1a a2       	std	Y+34, r1	; 0x22
       return true;
    66f0:	06 c0       	rjmp	.+12     	; 0x66fe <_ZN8SPIFlash7_chipIDEm+0x19a>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    66f2:	40 e0       	ldi	r20, 0x00	; 0
    66f4:	63 e0       	ldi	r22, 0x03	; 3
    66f6:	84 e9       	ldi	r24, 0x94	; 148
    66f8:	9d e0       	ldi	r25, 0x0D	; 13
    66fa:	9c da       	rcall	.-2760   	; 0x5c34 <_ZN11Diagnostics12troubleshootEhb>
       return true;
     }

     else {
       _troubleshoot(UNKNOWNCAP);
       return false;
    66fc:	10 e0       	ldi	r17, 0x00	; 0
     }

   }
   return true;
 }
    66fe:	81 2f       	mov	r24, r17
    6700:	df 91       	pop	r29
    6702:	cf 91       	pop	r28
    6704:	1f 91       	pop	r17
    6706:	0f 91       	pop	r16
    6708:	ff 90       	pop	r15
    670a:	ef 90       	pop	r14
    670c:	df 90       	pop	r13
    670e:	cf 90       	pop	r12
    6710:	08 95       	ret

00006712 <_ZN8SPIFlash13_troubleshootEhb>:

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    6712:	84 e9       	ldi	r24, 0x94	; 148
    6714:	9d e0       	ldi	r25, 0x0D	; 13
    6716:	8e ca       	rjmp	.-2788   	; 0x5c34 <_ZN11Diagnostics12troubleshootEhb>

00006718 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    6718:	cf 93       	push	r28
  uint8_t sreg = SREG;
    671a:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    671c:	f8 94       	cli
  if (!initialized) {
    671e:	80 91 98 0d 	lds	r24, 0x0D98	; 0x800d98 <_ZN8SPIClass11initializedE>
    6722:	81 11       	cpse	r24, r1
    6724:	27 c0       	rjmp	.+78     	; 0x6774 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    6726:	e2 e8       	ldi	r30, 0x82	; 130
    6728:	f2 e0       	ldi	r31, 0x02	; 2
    672a:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    672c:	e2 e6       	ldi	r30, 0x62	; 98
    672e:	f2 e0       	ldi	r31, 0x02	; 2
    6730:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    6732:	e8 2f       	mov	r30, r24
    6734:	f0 e0       	ldi	r31, 0x00	; 0
    6736:	ee 0f       	add	r30, r30
    6738:	ff 1f       	adc	r31, r31
    673a:	e4 55       	subi	r30, 0x54	; 84
    673c:	fd 4f       	sbci	r31, 0xFD	; 253
    673e:	a5 91       	lpm	r26, Z+
    6740:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    6742:	ec 91       	ld	r30, X
    6744:	e9 23       	and	r30, r25
    6746:	21 f4       	brne	.+8      	; 0x6750 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    6748:	61 e0       	ldi	r22, 0x01	; 1
    674a:	8a e0       	ldi	r24, 0x0A	; 10
    674c:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    6750:	61 e0       	ldi	r22, 0x01	; 1
    6752:	8a e0       	ldi	r24, 0x0A	; 10
    6754:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    6758:	8c b5       	in	r24, 0x2c	; 44
    675a:	80 61       	ori	r24, 0x10	; 16
    675c:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    675e:	8c b5       	in	r24, 0x2c	; 44
    6760:	80 64       	ori	r24, 0x40	; 64
    6762:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    6764:	61 e0       	ldi	r22, 0x01	; 1
    6766:	8d e0       	ldi	r24, 0x0D	; 13
    6768:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <pinMode>
    pinMode(MOSI, OUTPUT);
    676c:	61 e0       	ldi	r22, 0x01	; 1
    676e:	8b e0       	ldi	r24, 0x0B	; 11
    6770:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <pinMode>
  }
  initialized++; // reference count
    6774:	80 91 98 0d 	lds	r24, 0x0D98	; 0x800d98 <_ZN8SPIClass11initializedE>
    6778:	8f 5f       	subi	r24, 0xFF	; 255
    677a:	80 93 98 0d 	sts	0x0D98, r24	; 0x800d98 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    677e:	cf bf       	out	0x3f, r28	; 63
}
    6780:	cf 91       	pop	r28
    6782:	08 95       	ret

00006784 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6784:	10 92 06 0e 	sts	0x0E06, r1	; 0x800e06 <twi_state>
    6788:	81 e0       	ldi	r24, 0x01	; 1
    678a:	80 93 04 0e 	sts	0x0E04, r24	; 0x800e04 <twi_sendStop>
    678e:	10 92 03 0e 	sts	0x0E03, r1	; 0x800e03 <twi_inRepStart>
    6792:	61 e0       	ldi	r22, 0x01	; 1
    6794:	8d e1       	ldi	r24, 0x1D	; 29
    6796:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    679a:	61 e0       	ldi	r22, 0x01	; 1
    679c:	8c e1       	ldi	r24, 0x1C	; 28
    679e:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    67a2:	e9 eb       	ldi	r30, 0xB9	; 185
    67a4:	f0 e0       	ldi	r31, 0x00	; 0
    67a6:	80 81       	ld	r24, Z
    67a8:	8e 7f       	andi	r24, 0xFE	; 254
    67aa:	80 83       	st	Z, r24
    67ac:	80 81       	ld	r24, Z
    67ae:	8d 7f       	andi	r24, 0xFD	; 253
    67b0:	80 83       	st	Z, r24
    67b2:	88 e4       	ldi	r24, 0x48	; 72
    67b4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    67b8:	85 e4       	ldi	r24, 0x45	; 69
    67ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    67be:	08 95       	ret

000067c0 <twi_disable>:
    67c0:	ec eb       	ldi	r30, 0xBC	; 188
    67c2:	f0 e0       	ldi	r31, 0x00	; 0
    67c4:	80 81       	ld	r24, Z
    67c6:	8a 7b       	andi	r24, 0xBA	; 186
    67c8:	80 83       	st	Z, r24
    67ca:	60 e0       	ldi	r22, 0x00	; 0
    67cc:	8d e1       	ldi	r24, 0x1D	; 29
    67ce:	0e 94 1c 3c 	call	0x7838	; 0x7838 <digitalWrite>
    67d2:	60 e0       	ldi	r22, 0x00	; 0
    67d4:	8c e1       	ldi	r24, 0x1C	; 28
    67d6:	0c 94 1c 3c 	jmp	0x7838	; 0x7838 <digitalWrite>

000067da <twi_setFrequency>:
    67da:	9b 01       	movw	r18, r22
    67dc:	ac 01       	movw	r20, r24
    67de:	60 e0       	ldi	r22, 0x00	; 0
    67e0:	74 e2       	ldi	r23, 0x24	; 36
    67e2:	84 ef       	ldi	r24, 0xF4	; 244
    67e4:	90 e0       	ldi	r25, 0x00	; 0
    67e6:	0e 94 3c 40 	call	0x8078	; 0x8078 <__udivmodsi4>
    67ea:	da 01       	movw	r26, r20
    67ec:	c9 01       	movw	r24, r18
    67ee:	40 97       	sbiw	r24, 0x10	; 16
    67f0:	a1 09       	sbc	r26, r1
    67f2:	b1 09       	sbc	r27, r1
    67f4:	b6 95       	lsr	r27
    67f6:	a7 95       	ror	r26
    67f8:	97 95       	ror	r25
    67fa:	87 95       	ror	r24
    67fc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    6800:	08 95       	ret

00006802 <twi_readFrom>:
    6802:	41 32       	cpi	r20, 0x21	; 33
    6804:	08 f0       	brcs	.+2      	; 0x6808 <twi_readFrom+0x6>
    6806:	43 c0       	rjmp	.+134    	; 0x688e <twi_readFrom+0x8c>
    6808:	90 91 06 0e 	lds	r25, 0x0E06	; 0x800e06 <twi_state>
    680c:	91 11       	cpse	r25, r1
    680e:	fc cf       	rjmp	.-8      	; 0x6808 <twi_readFrom+0x6>
    6810:	91 e0       	ldi	r25, 0x01	; 1
    6812:	90 93 06 0e 	sts	0x0E06, r25	; 0x800e06 <twi_state>
    6816:	20 93 04 0e 	sts	0x0E04, r18	; 0x800e04 <twi_sendStop>
    681a:	2f ef       	ldi	r18, 0xFF	; 255
    681c:	20 93 99 0d 	sts	0x0D99, r18	; 0x800d99 <twi_error>
    6820:	10 92 de 0d 	sts	0x0DDE, r1	; 0x800dde <twi_masterBufferIndex>
    6824:	24 0f       	add	r18, r20
    6826:	20 93 dd 0d 	sts	0x0DDD, r18	; 0x800ddd <twi_masterBufferLength>
    682a:	90 93 05 0e 	sts	0x0E05, r25	; 0x800e05 <twi_slarw>
    682e:	90 91 05 0e 	lds	r25, 0x0E05	; 0x800e05 <twi_slarw>
    6832:	88 0f       	add	r24, r24
    6834:	89 2b       	or	r24, r25
    6836:	80 93 05 0e 	sts	0x0E05, r24	; 0x800e05 <twi_slarw>
    683a:	80 91 03 0e 	lds	r24, 0x0E03	; 0x800e03 <twi_inRepStart>
    683e:	81 30       	cpi	r24, 0x01	; 1
    6840:	61 f4       	brne	.+24     	; 0x685a <twi_readFrom+0x58>
    6842:	10 92 03 0e 	sts	0x0E03, r1	; 0x800e03 <twi_inRepStart>
    6846:	80 91 05 0e 	lds	r24, 0x0E05	; 0x800e05 <twi_slarw>
    684a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    684e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6852:	83 fd       	sbrc	r24, 3
    6854:	f8 cf       	rjmp	.-16     	; 0x6846 <twi_readFrom+0x44>
    6856:	85 ec       	ldi	r24, 0xC5	; 197
    6858:	01 c0       	rjmp	.+2      	; 0x685c <twi_readFrom+0x5a>
    685a:	85 ee       	ldi	r24, 0xE5	; 229
    685c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6860:	80 91 06 0e 	lds	r24, 0x0E06	; 0x800e06 <twi_state>
    6864:	81 30       	cpi	r24, 0x01	; 1
    6866:	e1 f3       	breq	.-8      	; 0x6860 <twi_readFrom+0x5e>
    6868:	80 91 de 0d 	lds	r24, 0x0DDE	; 0x800dde <twi_masterBufferIndex>
    686c:	84 17       	cp	r24, r20
    686e:	10 f4       	brcc	.+4      	; 0x6874 <twi_readFrom+0x72>
    6870:	40 91 de 0d 	lds	r20, 0x0DDE	; 0x800dde <twi_masterBufferIndex>
    6874:	af ed       	ldi	r26, 0xDF	; 223
    6876:	bd e0       	ldi	r27, 0x0D	; 13
    6878:	96 2f       	mov	r25, r22
    687a:	fb 01       	movw	r30, r22
    687c:	8e 2f       	mov	r24, r30
    687e:	89 1b       	sub	r24, r25
    6880:	84 17       	cp	r24, r20
    6882:	18 f4       	brcc	.+6      	; 0x688a <twi_readFrom+0x88>
    6884:	8d 91       	ld	r24, X+
    6886:	81 93       	st	Z+, r24
    6888:	f9 cf       	rjmp	.-14     	; 0x687c <twi_readFrom+0x7a>
    688a:	84 2f       	mov	r24, r20
    688c:	08 95       	ret
    688e:	80 e0       	ldi	r24, 0x00	; 0
    6890:	08 95       	ret

00006892 <twi_writeTo>:
    6892:	0f 93       	push	r16
    6894:	41 32       	cpi	r20, 0x21	; 33
    6896:	08 f0       	brcs	.+2      	; 0x689a <twi_writeTo+0x8>
    6898:	4a c0       	rjmp	.+148    	; 0x692e <twi_writeTo+0x9c>
    689a:	90 91 06 0e 	lds	r25, 0x0E06	; 0x800e06 <twi_state>
    689e:	91 11       	cpse	r25, r1
    68a0:	fc cf       	rjmp	.-8      	; 0x689a <twi_writeTo+0x8>
    68a2:	32 e0       	ldi	r19, 0x02	; 2
    68a4:	30 93 06 0e 	sts	0x0E06, r19	; 0x800e06 <twi_state>
    68a8:	00 93 04 0e 	sts	0x0E04, r16	; 0x800e04 <twi_sendStop>
    68ac:	3f ef       	ldi	r19, 0xFF	; 255
    68ae:	30 93 99 0d 	sts	0x0D99, r19	; 0x800d99 <twi_error>
    68b2:	10 92 de 0d 	sts	0x0DDE, r1	; 0x800dde <twi_masterBufferIndex>
    68b6:	40 93 dd 0d 	sts	0x0DDD, r20	; 0x800ddd <twi_masterBufferLength>
    68ba:	56 2f       	mov	r21, r22
    68bc:	af ed       	ldi	r26, 0xDF	; 223
    68be:	bd e0       	ldi	r27, 0x0D	; 13
    68c0:	fb 01       	movw	r30, r22
    68c2:	3e 2f       	mov	r19, r30
    68c4:	35 1b       	sub	r19, r21
    68c6:	34 17       	cp	r19, r20
    68c8:	18 f4       	brcc	.+6      	; 0x68d0 <twi_writeTo+0x3e>
    68ca:	31 91       	ld	r19, Z+
    68cc:	3d 93       	st	X+, r19
    68ce:	f9 cf       	rjmp	.-14     	; 0x68c2 <twi_writeTo+0x30>
    68d0:	10 92 05 0e 	sts	0x0E05, r1	; 0x800e05 <twi_slarw>
    68d4:	30 91 05 0e 	lds	r19, 0x0E05	; 0x800e05 <twi_slarw>
    68d8:	88 0f       	add	r24, r24
    68da:	83 2b       	or	r24, r19
    68dc:	80 93 05 0e 	sts	0x0E05, r24	; 0x800e05 <twi_slarw>
    68e0:	80 91 03 0e 	lds	r24, 0x0E03	; 0x800e03 <twi_inRepStart>
    68e4:	81 30       	cpi	r24, 0x01	; 1
    68e6:	61 f4       	brne	.+24     	; 0x6900 <twi_writeTo+0x6e>
    68e8:	10 92 03 0e 	sts	0x0E03, r1	; 0x800e03 <twi_inRepStart>
    68ec:	80 91 05 0e 	lds	r24, 0x0E05	; 0x800e05 <twi_slarw>
    68f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    68f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    68f8:	83 fd       	sbrc	r24, 3
    68fa:	f8 cf       	rjmp	.-16     	; 0x68ec <twi_writeTo+0x5a>
    68fc:	85 ec       	ldi	r24, 0xC5	; 197
    68fe:	01 c0       	rjmp	.+2      	; 0x6902 <twi_writeTo+0x70>
    6900:	85 ee       	ldi	r24, 0xE5	; 229
    6902:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6906:	22 23       	and	r18, r18
    6908:	21 f0       	breq	.+8      	; 0x6912 <twi_writeTo+0x80>
    690a:	80 91 06 0e 	lds	r24, 0x0E06	; 0x800e06 <twi_state>
    690e:	82 30       	cpi	r24, 0x02	; 2
    6910:	d1 f3       	breq	.-12     	; 0x6906 <twi_writeTo+0x74>
    6912:	80 91 99 0d 	lds	r24, 0x0D99	; 0x800d99 <twi_error>
    6916:	8f 3f       	cpi	r24, 0xFF	; 255
    6918:	79 f0       	breq	.+30     	; 0x6938 <twi_writeTo+0xa6>
    691a:	80 91 99 0d 	lds	r24, 0x0D99	; 0x800d99 <twi_error>
    691e:	80 32       	cpi	r24, 0x20	; 32
    6920:	41 f0       	breq	.+16     	; 0x6932 <twi_writeTo+0xa0>
    6922:	80 91 99 0d 	lds	r24, 0x0D99	; 0x800d99 <twi_error>
    6926:	80 33       	cpi	r24, 0x30	; 48
    6928:	31 f0       	breq	.+12     	; 0x6936 <twi_writeTo+0xa4>
    692a:	94 e0       	ldi	r25, 0x04	; 4
    692c:	05 c0       	rjmp	.+10     	; 0x6938 <twi_writeTo+0xa6>
    692e:	91 e0       	ldi	r25, 0x01	; 1
    6930:	03 c0       	rjmp	.+6      	; 0x6938 <twi_writeTo+0xa6>
    6932:	92 e0       	ldi	r25, 0x02	; 2
    6934:	01 c0       	rjmp	.+2      	; 0x6938 <twi_writeTo+0xa6>
    6936:	93 e0       	ldi	r25, 0x03	; 3
    6938:	89 2f       	mov	r24, r25
    693a:	0f 91       	pop	r16
    693c:	08 95       	ret

0000693e <twi_transmit>:
    693e:	40 91 bb 0d 	lds	r20, 0x0DBB	; 0x800dbb <twi_txBufferLength>
    6942:	26 2f       	mov	r18, r22
    6944:	30 e0       	ldi	r19, 0x00	; 0
    6946:	24 0f       	add	r18, r20
    6948:	31 1d       	adc	r19, r1
    694a:	21 32       	cpi	r18, 0x21	; 33
    694c:	31 05       	cpc	r19, r1
    694e:	dc f4       	brge	.+54     	; 0x6986 <twi_transmit+0x48>
    6950:	20 91 06 0e 	lds	r18, 0x0E06	; 0x800e06 <twi_state>
    6954:	24 30       	cpi	r18, 0x04	; 4
    6956:	c9 f4       	brne	.+50     	; 0x698a <twi_transmit+0x4c>
    6958:	fc 01       	movw	r30, r24
    695a:	80 e0       	ldi	r24, 0x00	; 0
    695c:	90 e0       	ldi	r25, 0x00	; 0
    695e:	86 17       	cp	r24, r22
    6960:	58 f4       	brcc	.+22     	; 0x6978 <twi_transmit+0x3a>
    6962:	30 91 bb 0d 	lds	r19, 0x0DBB	; 0x800dbb <twi_txBufferLength>
    6966:	21 91       	ld	r18, Z+
    6968:	dc 01       	movw	r26, r24
    696a:	a3 54       	subi	r26, 0x43	; 67
    696c:	b2 4f       	sbci	r27, 0xF2	; 242
    696e:	a3 0f       	add	r26, r19
    6970:	b1 1d       	adc	r27, r1
    6972:	2c 93       	st	X, r18
    6974:	01 96       	adiw	r24, 0x01	; 1
    6976:	f3 cf       	rjmp	.-26     	; 0x695e <twi_transmit+0x20>
    6978:	80 91 bb 0d 	lds	r24, 0x0DBB	; 0x800dbb <twi_txBufferLength>
    697c:	68 0f       	add	r22, r24
    697e:	60 93 bb 0d 	sts	0x0DBB, r22	; 0x800dbb <twi_txBufferLength>
    6982:	80 e0       	ldi	r24, 0x00	; 0
    6984:	08 95       	ret
    6986:	81 e0       	ldi	r24, 0x01	; 1
    6988:	08 95       	ret
    698a:	82 e0       	ldi	r24, 0x02	; 2
    698c:	08 95       	ret

0000698e <twi_attachSlaveRxEvent>:
    698e:	90 93 00 0e 	sts	0x0E00, r25	; 0x800e00 <twi_onSlaveReceive+0x1>
    6992:	80 93 ff 0d 	sts	0x0DFF, r24	; 0x800dff <twi_onSlaveReceive>
    6996:	08 95       	ret

00006998 <twi_attachSlaveTxEvent>:
    6998:	90 93 02 0e 	sts	0x0E02, r25	; 0x800e02 <twi_onSlaveTransmit+0x1>
    699c:	80 93 01 0e 	sts	0x0E01, r24	; 0x800e01 <twi_onSlaveTransmit>
    69a0:	08 95       	ret

000069a2 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    69a2:	85 ed       	ldi	r24, 0xD5	; 213
    69a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    69a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    69ac:	84 fd       	sbrc	r24, 4
    69ae:	fc cf       	rjmp	.-8      	; 0x69a8 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    69b0:	10 92 06 0e 	sts	0x0E06, r1	; 0x800e06 <twi_state>
    69b4:	08 95       	ret

000069b6 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    69b6:	85 ec       	ldi	r24, 0xC5	; 197
    69b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    69bc:	10 92 06 0e 	sts	0x0E06, r1	; 0x800e06 <twi_state>
    69c0:	08 95       	ret

000069c2 <__vector_26>:
}

ISR(TWI_vect)
{
    69c2:	1f 92       	push	r1
    69c4:	0f 92       	push	r0
    69c6:	0f b6       	in	r0, 0x3f	; 63
    69c8:	0f 92       	push	r0
    69ca:	11 24       	eor	r1, r1
    69cc:	0b b6       	in	r0, 0x3b	; 59
    69ce:	0f 92       	push	r0
    69d0:	2f 93       	push	r18
    69d2:	3f 93       	push	r19
    69d4:	4f 93       	push	r20
    69d6:	5f 93       	push	r21
    69d8:	6f 93       	push	r22
    69da:	7f 93       	push	r23
    69dc:	8f 93       	push	r24
    69de:	9f 93       	push	r25
    69e0:	af 93       	push	r26
    69e2:	bf 93       	push	r27
    69e4:	ef 93       	push	r30
    69e6:	ff 93       	push	r31
  switch(TW_STATUS){
    69e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    69ec:	88 7f       	andi	r24, 0xF8	; 248
    69ee:	80 36       	cpi	r24, 0x60	; 96
    69f0:	09 f4       	brne	.+2      	; 0x69f4 <__vector_26+0x32>
    69f2:	9d c0       	rjmp	.+314    	; 0x6b2e <__vector_26+0x16c>
    69f4:	70 f5       	brcc	.+92     	; 0x6a52 <__vector_26+0x90>
    69f6:	88 32       	cpi	r24, 0x28	; 40
    69f8:	09 f4       	brne	.+2      	; 0x69fc <__vector_26+0x3a>
    69fa:	5c c0       	rjmp	.+184    	; 0x6ab4 <__vector_26+0xf2>
    69fc:	90 f4       	brcc	.+36     	; 0x6a22 <__vector_26+0x60>
    69fe:	80 31       	cpi	r24, 0x10	; 16
    6a00:	09 f4       	brne	.+2      	; 0x6a04 <__vector_26+0x42>
    6a02:	55 c0       	rjmp	.+170    	; 0x6aae <__vector_26+0xec>
    6a04:	38 f4       	brcc	.+14     	; 0x6a14 <__vector_26+0x52>
    6a06:	88 23       	and	r24, r24
    6a08:	09 f4       	brne	.+2      	; 0x6a0c <__vector_26+0x4a>
    6a0a:	f3 c0       	rjmp	.+486    	; 0x6bf2 <__vector_26+0x230>
    6a0c:	88 30       	cpi	r24, 0x08	; 8
    6a0e:	09 f4       	brne	.+2      	; 0x6a12 <__vector_26+0x50>
    6a10:	4e c0       	rjmp	.+156    	; 0x6aae <__vector_26+0xec>
    6a12:	f2 c0       	rjmp	.+484    	; 0x6bf8 <__vector_26+0x236>
    6a14:	88 31       	cpi	r24, 0x18	; 24
    6a16:	09 f4       	brne	.+2      	; 0x6a1a <__vector_26+0x58>
    6a18:	4d c0       	rjmp	.+154    	; 0x6ab4 <__vector_26+0xf2>
    6a1a:	80 32       	cpi	r24, 0x20	; 32
    6a1c:	09 f4       	brne	.+2      	; 0x6a20 <__vector_26+0x5e>
    6a1e:	5e c0       	rjmp	.+188    	; 0x6adc <__vector_26+0x11a>
    6a20:	eb c0       	rjmp	.+470    	; 0x6bf8 <__vector_26+0x236>
    6a22:	80 34       	cpi	r24, 0x40	; 64
    6a24:	09 f4       	brne	.+2      	; 0x6a28 <__vector_26+0x66>
    6a26:	69 c0       	rjmp	.+210    	; 0x6afa <__vector_26+0x138>
    6a28:	50 f4       	brcc	.+20     	; 0x6a3e <__vector_26+0x7c>
    6a2a:	80 33       	cpi	r24, 0x30	; 48
    6a2c:	09 f4       	brne	.+2      	; 0x6a30 <__vector_26+0x6e>
    6a2e:	56 c0       	rjmp	.+172    	; 0x6adc <__vector_26+0x11a>
    6a30:	88 33       	cpi	r24, 0x38	; 56
    6a32:	09 f0       	breq	.+2      	; 0x6a36 <__vector_26+0x74>
    6a34:	e1 c0       	rjmp	.+450    	; 0x6bf8 <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    6a36:	80 93 99 0d 	sts	0x0D99, r24	; 0x800d99 <twi_error>
      twi_releaseBus();
    6a3a:	bd df       	rcall	.-134    	; 0x69b6 <twi_releaseBus>
      break;
    6a3c:	dd c0       	rjmp	.+442    	; 0x6bf8 <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    6a3e:	80 35       	cpi	r24, 0x50	; 80
    6a40:	09 f4       	brne	.+2      	; 0x6a44 <__vector_26+0x82>
    6a42:	4f c0       	rjmp	.+158    	; 0x6ae2 <__vector_26+0x120>
    6a44:	88 35       	cpi	r24, 0x58	; 88
    6a46:	09 f4       	brne	.+2      	; 0x6a4a <__vector_26+0x88>
    6a48:	5d c0       	rjmp	.+186    	; 0x6b04 <__vector_26+0x142>
    6a4a:	88 34       	cpi	r24, 0x48	; 72
    6a4c:	09 f0       	breq	.+2      	; 0x6a50 <__vector_26+0x8e>
    6a4e:	d4 c0       	rjmp	.+424    	; 0x6bf8 <__vector_26+0x236>
    6a50:	d2 c0       	rjmp	.+420    	; 0x6bf6 <__vector_26+0x234>
    6a52:	88 39       	cpi	r24, 0x98	; 152
    6a54:	09 f4       	brne	.+2      	; 0x6a58 <__vector_26+0x96>
    6a56:	c3 c0       	rjmp	.+390    	; 0x6bde <__vector_26+0x21c>
    6a58:	a8 f4       	brcc	.+42     	; 0x6a84 <__vector_26+0xc2>
    6a5a:	88 37       	cpi	r24, 0x78	; 120
    6a5c:	09 f4       	brne	.+2      	; 0x6a60 <__vector_26+0x9e>
    6a5e:	67 c0       	rjmp	.+206    	; 0x6b2e <__vector_26+0x16c>
    6a60:	38 f4       	brcc	.+14     	; 0x6a70 <__vector_26+0xae>
    6a62:	88 36       	cpi	r24, 0x68	; 104
    6a64:	09 f4       	brne	.+2      	; 0x6a68 <__vector_26+0xa6>
    6a66:	63 c0       	rjmp	.+198    	; 0x6b2e <__vector_26+0x16c>
    6a68:	80 37       	cpi	r24, 0x70	; 112
    6a6a:	09 f4       	brne	.+2      	; 0x6a6e <__vector_26+0xac>
    6a6c:	60 c0       	rjmp	.+192    	; 0x6b2e <__vector_26+0x16c>
    6a6e:	c4 c0       	rjmp	.+392    	; 0x6bf8 <__vector_26+0x236>
    6a70:	88 38       	cpi	r24, 0x88	; 136
    6a72:	09 f4       	brne	.+2      	; 0x6a76 <__vector_26+0xb4>
    6a74:	b4 c0       	rjmp	.+360    	; 0x6bde <__vector_26+0x21c>
    6a76:	80 39       	cpi	r24, 0x90	; 144
    6a78:	09 f4       	brne	.+2      	; 0x6a7c <__vector_26+0xba>
    6a7a:	5f c0       	rjmp	.+190    	; 0x6b3a <__vector_26+0x178>
    6a7c:	80 38       	cpi	r24, 0x80	; 128
    6a7e:	09 f0       	breq	.+2      	; 0x6a82 <__vector_26+0xc0>
    6a80:	bb c0       	rjmp	.+374    	; 0x6bf8 <__vector_26+0x236>
    6a82:	5b c0       	rjmp	.+182    	; 0x6b3a <__vector_26+0x178>
    6a84:	80 3b       	cpi	r24, 0xB0	; 176
    6a86:	09 f4       	brne	.+2      	; 0x6a8a <__vector_26+0xc8>
    6a88:	82 c0       	rjmp	.+260    	; 0x6b8e <__vector_26+0x1cc>
    6a8a:	38 f4       	brcc	.+14     	; 0x6a9a <__vector_26+0xd8>
    6a8c:	80 3a       	cpi	r24, 0xA0	; 160
    6a8e:	09 f4       	brne	.+2      	; 0x6a92 <__vector_26+0xd0>
    6a90:	66 c0       	rjmp	.+204    	; 0x6b5e <__vector_26+0x19c>
    6a92:	88 3a       	cpi	r24, 0xA8	; 168
    6a94:	09 f4       	brne	.+2      	; 0x6a98 <__vector_26+0xd6>
    6a96:	7b c0       	rjmp	.+246    	; 0x6b8e <__vector_26+0x1cc>
    6a98:	af c0       	rjmp	.+350    	; 0x6bf8 <__vector_26+0x236>
    6a9a:	80 3c       	cpi	r24, 0xC0	; 192
    6a9c:	09 f4       	brne	.+2      	; 0x6aa0 <__vector_26+0xde>
    6a9e:	a3 c0       	rjmp	.+326    	; 0x6be6 <__vector_26+0x224>
    6aa0:	88 3c       	cpi	r24, 0xC8	; 200
    6aa2:	09 f4       	brne	.+2      	; 0x6aa6 <__vector_26+0xe4>
    6aa4:	a0 c0       	rjmp	.+320    	; 0x6be6 <__vector_26+0x224>
    6aa6:	88 3b       	cpi	r24, 0xB8	; 184
    6aa8:	09 f4       	brne	.+2      	; 0x6aac <__vector_26+0xea>
    6aaa:	86 c0       	rjmp	.+268    	; 0x6bb8 <__vector_26+0x1f6>
    6aac:	a5 c0       	rjmp	.+330    	; 0x6bf8 <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    6aae:	80 91 05 0e 	lds	r24, 0x0E05	; 0x800e05 <twi_slarw>
    6ab2:	10 c0       	rjmp	.+32     	; 0x6ad4 <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6ab4:	90 91 de 0d 	lds	r25, 0x0DDE	; 0x800dde <twi_masterBufferIndex>
    6ab8:	80 91 dd 0d 	lds	r24, 0x0DDD	; 0x800ddd <twi_masterBufferLength>
    6abc:	98 17       	cp	r25, r24
    6abe:	70 f5       	brcc	.+92     	; 0x6b1c <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    6ac0:	e0 91 de 0d 	lds	r30, 0x0DDE	; 0x800dde <twi_masterBufferIndex>
    6ac4:	81 e0       	ldi	r24, 0x01	; 1
    6ac6:	8e 0f       	add	r24, r30
    6ac8:	80 93 de 0d 	sts	0x0DDE, r24	; 0x800dde <twi_masterBufferIndex>
    6acc:	f0 e0       	ldi	r31, 0x00	; 0
    6ace:	e1 52       	subi	r30, 0x21	; 33
    6ad0:	f2 4f       	sbci	r31, 0xF2	; 242
    6ad2:	80 81       	ld	r24, Z
    6ad4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6ad8:	85 ec       	ldi	r24, 0xC5	; 197
    6ada:	82 c0       	rjmp	.+260    	; 0x6be0 <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    6adc:	80 93 99 0d 	sts	0x0D99, r24	; 0x800d99 <twi_error>
    6ae0:	8a c0       	rjmp	.+276    	; 0x6bf6 <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6ae2:	e0 91 de 0d 	lds	r30, 0x0DDE	; 0x800dde <twi_masterBufferIndex>
    6ae6:	81 e0       	ldi	r24, 0x01	; 1
    6ae8:	8e 0f       	add	r24, r30
    6aea:	80 93 de 0d 	sts	0x0DDE, r24	; 0x800dde <twi_masterBufferIndex>
    6aee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6af2:	f0 e0       	ldi	r31, 0x00	; 0
    6af4:	e1 52       	subi	r30, 0x21	; 33
    6af6:	f2 4f       	sbci	r31, 0xF2	; 242
    6af8:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6afa:	90 91 de 0d 	lds	r25, 0x0DDE	; 0x800dde <twi_masterBufferIndex>
    6afe:	80 91 dd 0d 	lds	r24, 0x0DDD	; 0x800ddd <twi_masterBufferLength>
    6b02:	6a c0       	rjmp	.+212    	; 0x6bd8 <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6b04:	e0 91 de 0d 	lds	r30, 0x0DDE	; 0x800dde <twi_masterBufferIndex>
    6b08:	81 e0       	ldi	r24, 0x01	; 1
    6b0a:	8e 0f       	add	r24, r30
    6b0c:	80 93 de 0d 	sts	0x0DDE, r24	; 0x800dde <twi_masterBufferIndex>
    6b10:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6b14:	f0 e0       	ldi	r31, 0x00	; 0
    6b16:	e1 52       	subi	r30, 0x21	; 33
    6b18:	f2 4f       	sbci	r31, 0xF2	; 242
    6b1a:	80 83       	st	Z, r24
	if (twi_sendStop)
    6b1c:	80 91 04 0e 	lds	r24, 0x0E04	; 0x800e04 <twi_sendStop>
    6b20:	81 11       	cpse	r24, r1
    6b22:	69 c0       	rjmp	.+210    	; 0x6bf6 <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    6b24:	81 e0       	ldi	r24, 0x01	; 1
    6b26:	80 93 03 0e 	sts	0x0E03, r24	; 0x800e03 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6b2a:	84 ea       	ldi	r24, 0xA4	; 164
    6b2c:	5d c0       	rjmp	.+186    	; 0x6be8 <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6b2e:	83 e0       	ldi	r24, 0x03	; 3
    6b30:	80 93 06 0e 	sts	0x0E06, r24	; 0x800e06 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    6b34:	10 92 9a 0d 	sts	0x0D9A, r1	; 0x800d9a <twi_rxBufferIndex>
    6b38:	cf cf       	rjmp	.-98     	; 0x6ad8 <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6b3a:	80 91 9a 0d 	lds	r24, 0x0D9A	; 0x800d9a <twi_rxBufferIndex>
    6b3e:	80 32       	cpi	r24, 0x20	; 32
    6b40:	08 f0       	brcs	.+2      	; 0x6b44 <__vector_26+0x182>
    6b42:	4d c0       	rjmp	.+154    	; 0x6bde <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    6b44:	e0 91 9a 0d 	lds	r30, 0x0D9A	; 0x800d9a <twi_rxBufferIndex>
    6b48:	81 e0       	ldi	r24, 0x01	; 1
    6b4a:	8e 0f       	add	r24, r30
    6b4c:	80 93 9a 0d 	sts	0x0D9A, r24	; 0x800d9a <twi_rxBufferIndex>
    6b50:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6b54:	f0 e0       	ldi	r31, 0x00	; 0
    6b56:	e5 56       	subi	r30, 0x65	; 101
    6b58:	f2 4f       	sbci	r31, 0xF2	; 242
    6b5a:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    6b5c:	bd cf       	rjmp	.-134    	; 0x6ad8 <__vector_26+0x116>
    6b5e:	2b df       	rcall	.-426    	; 0x69b6 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6b60:	80 91 9a 0d 	lds	r24, 0x0D9A	; 0x800d9a <twi_rxBufferIndex>
    6b64:	80 32       	cpi	r24, 0x20	; 32
    6b66:	30 f4       	brcc	.+12     	; 0x6b74 <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6b68:	e0 91 9a 0d 	lds	r30, 0x0D9A	; 0x800d9a <twi_rxBufferIndex>
    6b6c:	f0 e0       	ldi	r31, 0x00	; 0
    6b6e:	e5 56       	subi	r30, 0x65	; 101
    6b70:	f2 4f       	sbci	r31, 0xF2	; 242
    6b72:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    6b74:	60 91 9a 0d 	lds	r22, 0x0D9A	; 0x800d9a <twi_rxBufferIndex>
    6b78:	70 e0       	ldi	r23, 0x00	; 0
    6b7a:	e0 91 ff 0d 	lds	r30, 0x0DFF	; 0x800dff <twi_onSlaveReceive>
    6b7e:	f0 91 00 0e 	lds	r31, 0x0E00	; 0x800e00 <twi_onSlaveReceive+0x1>
    6b82:	8b e9       	ldi	r24, 0x9B	; 155
    6b84:	9d e0       	ldi	r25, 0x0D	; 13
    6b86:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6b88:	10 92 9a 0d 	sts	0x0D9A, r1	; 0x800d9a <twi_rxBufferIndex>
      break;
    6b8c:	35 c0       	rjmp	.+106    	; 0x6bf8 <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    6b8e:	84 e0       	ldi	r24, 0x04	; 4
    6b90:	80 93 06 0e 	sts	0x0E06, r24	; 0x800e06 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6b94:	10 92 bc 0d 	sts	0x0DBC, r1	; 0x800dbc <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6b98:	10 92 bb 0d 	sts	0x0DBB, r1	; 0x800dbb <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6b9c:	e0 91 01 0e 	lds	r30, 0x0E01	; 0x800e01 <twi_onSlaveTransmit>
    6ba0:	f0 91 02 0e 	lds	r31, 0x0E02	; 0x800e02 <twi_onSlaveTransmit+0x1>
    6ba4:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6ba6:	80 91 bb 0d 	lds	r24, 0x0DBB	; 0x800dbb <twi_txBufferLength>
    6baa:	81 11       	cpse	r24, r1
    6bac:	05 c0       	rjmp	.+10     	; 0x6bb8 <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    6bae:	81 e0       	ldi	r24, 0x01	; 1
    6bb0:	80 93 bb 0d 	sts	0x0DBB, r24	; 0x800dbb <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    6bb4:	10 92 bd 0d 	sts	0x0DBD, r1	; 0x800dbd <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    6bb8:	e0 91 bc 0d 	lds	r30, 0x0DBC	; 0x800dbc <twi_txBufferIndex>
    6bbc:	81 e0       	ldi	r24, 0x01	; 1
    6bbe:	8e 0f       	add	r24, r30
    6bc0:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <twi_txBufferIndex>
    6bc4:	f0 e0       	ldi	r31, 0x00	; 0
    6bc6:	e3 54       	subi	r30, 0x43	; 67
    6bc8:	f2 4f       	sbci	r31, 0xF2	; 242
    6bca:	80 81       	ld	r24, Z
    6bcc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6bd0:	90 91 bc 0d 	lds	r25, 0x0DBC	; 0x800dbc <twi_txBufferIndex>
    6bd4:	80 91 bb 0d 	lds	r24, 0x0DBB	; 0x800dbb <twi_txBufferLength>
    6bd8:	98 17       	cp	r25, r24
    6bda:	08 f4       	brcc	.+2      	; 0x6bde <__vector_26+0x21c>
    6bdc:	7d cf       	rjmp	.-262    	; 0x6ad8 <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6bde:	85 e8       	ldi	r24, 0x85	; 133
    6be0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6be4:	09 c0       	rjmp	.+18     	; 0x6bf8 <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6be6:	85 ec       	ldi	r24, 0xC5	; 197
    6be8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    6bec:	10 92 06 0e 	sts	0x0E06, r1	; 0x800e06 <twi_state>
      break;
    6bf0:	03 c0       	rjmp	.+6      	; 0x6bf8 <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    6bf2:	10 92 99 0d 	sts	0x0D99, r1	; 0x800d99 <twi_error>
      twi_stop();
    6bf6:	d5 de       	rcall	.-598    	; 0x69a2 <twi_stop>
      break;
  }
}
    6bf8:	ff 91       	pop	r31
    6bfa:	ef 91       	pop	r30
    6bfc:	bf 91       	pop	r27
    6bfe:	af 91       	pop	r26
    6c00:	9f 91       	pop	r25
    6c02:	8f 91       	pop	r24
    6c04:	7f 91       	pop	r23
    6c06:	6f 91       	pop	r22
    6c08:	5f 91       	pop	r21
    6c0a:	4f 91       	pop	r20
    6c0c:	3f 91       	pop	r19
    6c0e:	2f 91       	pop	r18
    6c10:	0f 90       	pop	r0
    6c12:	0b be       	out	0x3b, r0	; 59
    6c14:	0f 90       	pop	r0
    6c16:	0f be       	out	0x3f, r0	; 63
    6c18:	0f 90       	pop	r0
    6c1a:	1f 90       	pop	r1
    6c1c:	18 95       	reti

00006c1e <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    6c1e:	80 91 3b 0e 	lds	r24, 0x0E3B	; 0x800e3b <_ZN7TwoWire14rxBufferLengthE>
    6c22:	90 e0       	ldi	r25, 0x00	; 0
    6c24:	20 91 3c 0e 	lds	r18, 0x0E3C	; 0x800e3c <_ZN7TwoWire13rxBufferIndexE>
    6c28:	82 1b       	sub	r24, r18
    6c2a:	91 09       	sbc	r25, r1
    6c2c:	08 95       	ret

00006c2e <_ZN7TwoWire4readEv>:
    6c2e:	90 91 3c 0e 	lds	r25, 0x0E3C	; 0x800e3c <_ZN7TwoWire13rxBufferIndexE>
    6c32:	80 91 3b 0e 	lds	r24, 0x0E3B	; 0x800e3b <_ZN7TwoWire14rxBufferLengthE>
    6c36:	98 17       	cp	r25, r24
    6c38:	50 f4       	brcc	.+20     	; 0x6c4e <_ZN7TwoWire4readEv+0x20>
    6c3a:	e9 2f       	mov	r30, r25
    6c3c:	f0 e0       	ldi	r31, 0x00	; 0
    6c3e:	e3 5c       	subi	r30, 0xC3	; 195
    6c40:	f1 4f       	sbci	r31, 0xF1	; 241
    6c42:	20 81       	ld	r18, Z
    6c44:	30 e0       	ldi	r19, 0x00	; 0
    6c46:	9f 5f       	subi	r25, 0xFF	; 255
    6c48:	90 93 3c 0e 	sts	0x0E3C, r25	; 0x800e3c <_ZN7TwoWire13rxBufferIndexE>
    6c4c:	02 c0       	rjmp	.+4      	; 0x6c52 <_ZN7TwoWire4readEv+0x24>
    6c4e:	2f ef       	ldi	r18, 0xFF	; 255
    6c50:	3f ef       	ldi	r19, 0xFF	; 255
    6c52:	c9 01       	movw	r24, r18
    6c54:	08 95       	ret

00006c56 <_ZN7TwoWire4peekEv>:
    6c56:	e0 91 3c 0e 	lds	r30, 0x0E3C	; 0x800e3c <_ZN7TwoWire13rxBufferIndexE>
    6c5a:	80 91 3b 0e 	lds	r24, 0x0E3B	; 0x800e3b <_ZN7TwoWire14rxBufferLengthE>
    6c5e:	e8 17       	cp	r30, r24
    6c60:	30 f4       	brcc	.+12     	; 0x6c6e <_ZN7TwoWire4peekEv+0x18>
    6c62:	f0 e0       	ldi	r31, 0x00	; 0
    6c64:	e3 5c       	subi	r30, 0xC3	; 195
    6c66:	f1 4f       	sbci	r31, 0xF1	; 241
    6c68:	80 81       	ld	r24, Z
    6c6a:	90 e0       	ldi	r25, 0x00	; 0
    6c6c:	08 95       	ret
    6c6e:	8f ef       	ldi	r24, 0xFF	; 255
    6c70:	9f ef       	ldi	r25, 0xFF	; 255
    6c72:	08 95       	ret

00006c74 <_ZN7TwoWire5flushEv>:
    6c74:	08 95       	ret

00006c76 <_ZN7TwoWire16onReceiveServiceEPhi>:
    6c76:	cf 93       	push	r28
    6c78:	df 93       	push	r29
    6c7a:	ec 01       	movw	r28, r24
    6c7c:	e0 91 13 0e 	lds	r30, 0x0E13	; 0x800e13 <_ZN7TwoWire14user_onReceiveE>
    6c80:	f0 91 14 0e 	lds	r31, 0x0E14	; 0x800e14 <_ZN7TwoWire14user_onReceiveE+0x1>
    6c84:	30 97       	sbiw	r30, 0x00	; 0
    6c86:	f1 f0       	breq	.+60     	; 0x6cc4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6c88:	90 91 3c 0e 	lds	r25, 0x0E3C	; 0x800e3c <_ZN7TwoWire13rxBufferIndexE>
    6c8c:	80 91 3b 0e 	lds	r24, 0x0E3B	; 0x800e3b <_ZN7TwoWire14rxBufferLengthE>
    6c90:	98 17       	cp	r25, r24
    6c92:	c0 f0       	brcs	.+48     	; 0x6cc4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6c94:	90 e0       	ldi	r25, 0x00	; 0
    6c96:	29 2f       	mov	r18, r25
    6c98:	30 e0       	ldi	r19, 0x00	; 0
    6c9a:	26 17       	cp	r18, r22
    6c9c:	37 07       	cpc	r19, r23
    6c9e:	54 f4       	brge	.+20     	; 0x6cb4 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    6ca0:	de 01       	movw	r26, r28
    6ca2:	a2 0f       	add	r26, r18
    6ca4:	b3 1f       	adc	r27, r19
    6ca6:	4c 91       	ld	r20, X
    6ca8:	d9 01       	movw	r26, r18
    6caa:	a3 5c       	subi	r26, 0xC3	; 195
    6cac:	b1 4f       	sbci	r27, 0xF1	; 241
    6cae:	4c 93       	st	X, r20
    6cb0:	9f 5f       	subi	r25, 0xFF	; 255
    6cb2:	f1 cf       	rjmp	.-30     	; 0x6c96 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    6cb4:	10 92 3c 0e 	sts	0x0E3C, r1	; 0x800e3c <_ZN7TwoWire13rxBufferIndexE>
    6cb8:	60 93 3b 0e 	sts	0x0E3B, r22	; 0x800e3b <_ZN7TwoWire14rxBufferLengthE>
    6cbc:	cb 01       	movw	r24, r22
    6cbe:	df 91       	pop	r29
    6cc0:	cf 91       	pop	r28
    6cc2:	09 94       	ijmp
    6cc4:	df 91       	pop	r29
    6cc6:	cf 91       	pop	r28
    6cc8:	08 95       	ret

00006cca <_ZN7TwoWire16onRequestServiceEv>:
    6cca:	e0 91 15 0e 	lds	r30, 0x0E15	; 0x800e15 <_ZN7TwoWire14user_onRequestE>
    6cce:	f0 91 16 0e 	lds	r31, 0x0E16	; 0x800e16 <_ZN7TwoWire14user_onRequestE+0x1>
    6cd2:	30 97       	sbiw	r30, 0x00	; 0
    6cd4:	29 f0       	breq	.+10     	; 0x6ce0 <_ZN7TwoWire16onRequestServiceEv+0x16>
    6cd6:	10 92 19 0e 	sts	0x0E19, r1	; 0x800e19 <_ZN7TwoWire13txBufferIndexE>
    6cda:	10 92 18 0e 	sts	0x0E18, r1	; 0x800e18 <_ZN7TwoWire14txBufferLengthE>
    6cde:	09 94       	ijmp
    6ce0:	08 95       	ret

00006ce2 <_ZN7TwoWire5writeEPKhj>:
    6ce2:	cf 92       	push	r12
    6ce4:	df 92       	push	r13
    6ce6:	ef 92       	push	r14
    6ce8:	ff 92       	push	r15
    6cea:	0f 93       	push	r16
    6cec:	1f 93       	push	r17
    6cee:	cf 93       	push	r28
    6cf0:	df 93       	push	r29
    6cf2:	7c 01       	movw	r14, r24
    6cf4:	cb 01       	movw	r24, r22
    6cf6:	8a 01       	movw	r16, r20
    6cf8:	20 91 17 0e 	lds	r18, 0x0E17	; 0x800e17 <_ZN7TwoWire12transmittingE>
    6cfc:	22 23       	and	r18, r18
    6cfe:	89 f0       	breq	.+34     	; 0x6d22 <_ZN7TwoWire5writeEPKhj+0x40>
    6d00:	eb 01       	movw	r28, r22
    6d02:	6b 01       	movw	r12, r22
    6d04:	c4 0e       	add	r12, r20
    6d06:	d5 1e       	adc	r13, r21
    6d08:	cc 15       	cp	r28, r12
    6d0a:	dd 05       	cpc	r29, r13
    6d0c:	61 f0       	breq	.+24     	; 0x6d26 <_ZN7TwoWire5writeEPKhj+0x44>
    6d0e:	69 91       	ld	r22, Y+
    6d10:	d7 01       	movw	r26, r14
    6d12:	ed 91       	ld	r30, X+
    6d14:	fc 91       	ld	r31, X
    6d16:	01 90       	ld	r0, Z+
    6d18:	f0 81       	ld	r31, Z
    6d1a:	e0 2d       	mov	r30, r0
    6d1c:	c7 01       	movw	r24, r14
    6d1e:	09 95       	icall
    6d20:	f3 cf       	rjmp	.-26     	; 0x6d08 <_ZN7TwoWire5writeEPKhj+0x26>
    6d22:	64 2f       	mov	r22, r20
    6d24:	0c de       	rcall	.-1000   	; 0x693e <twi_transmit>
    6d26:	c8 01       	movw	r24, r16
    6d28:	df 91       	pop	r29
    6d2a:	cf 91       	pop	r28
    6d2c:	1f 91       	pop	r17
    6d2e:	0f 91       	pop	r16
    6d30:	ff 90       	pop	r15
    6d32:	ef 90       	pop	r14
    6d34:	df 90       	pop	r13
    6d36:	cf 90       	pop	r12
    6d38:	08 95       	ret

00006d3a <_ZN7TwoWire5writeEh>:
    6d3a:	cf 93       	push	r28
    6d3c:	df 93       	push	r29
    6d3e:	1f 92       	push	r1
    6d40:	cd b7       	in	r28, 0x3d	; 61
    6d42:	de b7       	in	r29, 0x3e	; 62
    6d44:	69 83       	std	Y+1, r22	; 0x01
    6d46:	20 91 17 0e 	lds	r18, 0x0E17	; 0x800e17 <_ZN7TwoWire12transmittingE>
    6d4a:	22 23       	and	r18, r18
    6d4c:	d1 f0       	breq	.+52     	; 0x6d82 <_ZN7TwoWire5writeEh+0x48>
    6d4e:	20 91 18 0e 	lds	r18, 0x0E18	; 0x800e18 <_ZN7TwoWire14txBufferLengthE>
    6d52:	20 32       	cpi	r18, 0x20	; 32
    6d54:	40 f0       	brcs	.+16     	; 0x6d66 <_ZN7TwoWire5writeEh+0x2c>
    6d56:	21 e0       	ldi	r18, 0x01	; 1
    6d58:	30 e0       	ldi	r19, 0x00	; 0
    6d5a:	fc 01       	movw	r30, r24
    6d5c:	33 83       	std	Z+3, r19	; 0x03
    6d5e:	22 83       	std	Z+2, r18	; 0x02
    6d60:	80 e0       	ldi	r24, 0x00	; 0
    6d62:	90 e0       	ldi	r25, 0x00	; 0
    6d64:	14 c0       	rjmp	.+40     	; 0x6d8e <_ZN7TwoWire5writeEh+0x54>
    6d66:	80 91 19 0e 	lds	r24, 0x0E19	; 0x800e19 <_ZN7TwoWire13txBufferIndexE>
    6d6a:	e8 2f       	mov	r30, r24
    6d6c:	f0 e0       	ldi	r31, 0x00	; 0
    6d6e:	e6 5e       	subi	r30, 0xE6	; 230
    6d70:	f1 4f       	sbci	r31, 0xF1	; 241
    6d72:	99 81       	ldd	r25, Y+1	; 0x01
    6d74:	90 83       	st	Z, r25
    6d76:	8f 5f       	subi	r24, 0xFF	; 255
    6d78:	80 93 19 0e 	sts	0x0E19, r24	; 0x800e19 <_ZN7TwoWire13txBufferIndexE>
    6d7c:	80 93 18 0e 	sts	0x0E18, r24	; 0x800e18 <_ZN7TwoWire14txBufferLengthE>
    6d80:	04 c0       	rjmp	.+8      	; 0x6d8a <_ZN7TwoWire5writeEh+0x50>
    6d82:	61 e0       	ldi	r22, 0x01	; 1
    6d84:	ce 01       	movw	r24, r28
    6d86:	01 96       	adiw	r24, 0x01	; 1
    6d88:	da dd       	rcall	.-1100   	; 0x693e <twi_transmit>
    6d8a:	81 e0       	ldi	r24, 0x01	; 1
    6d8c:	90 e0       	ldi	r25, 0x00	; 0
    6d8e:	0f 90       	pop	r0
    6d90:	df 91       	pop	r29
    6d92:	cf 91       	pop	r28
    6d94:	08 95       	ret

00006d96 <_ZN7TwoWireC1Ev>:
    6d96:	fc 01       	movw	r30, r24
    6d98:	13 82       	std	Z+3, r1	; 0x03
    6d9a:	12 82       	std	Z+2, r1	; 0x02
    6d9c:	88 ee       	ldi	r24, 0xE8	; 232
    6d9e:	93 e0       	ldi	r25, 0x03	; 3
    6da0:	a0 e0       	ldi	r26, 0x00	; 0
    6da2:	b0 e0       	ldi	r27, 0x00	; 0
    6da4:	84 83       	std	Z+4, r24	; 0x04
    6da6:	95 83       	std	Z+5, r25	; 0x05
    6da8:	a6 83       	std	Z+6, r26	; 0x06
    6daa:	b7 83       	std	Z+7, r27	; 0x07
    6dac:	86 e5       	ldi	r24, 0x56	; 86
    6dae:	9a e0       	ldi	r25, 0x0A	; 10
    6db0:	91 83       	std	Z+1, r25	; 0x01
    6db2:	80 83       	st	Z, r24
    6db4:	08 95       	ret

00006db6 <_ZN7TwoWire5beginEv>:
    6db6:	10 92 3c 0e 	sts	0x0E3C, r1	; 0x800e3c <_ZN7TwoWire13rxBufferIndexE>
    6dba:	10 92 3b 0e 	sts	0x0E3B, r1	; 0x800e3b <_ZN7TwoWire14rxBufferLengthE>
    6dbe:	10 92 19 0e 	sts	0x0E19, r1	; 0x800e19 <_ZN7TwoWire13txBufferIndexE>
    6dc2:	10 92 18 0e 	sts	0x0E18, r1	; 0x800e18 <_ZN7TwoWire14txBufferLengthE>
    6dc6:	de dc       	rcall	.-1604   	; 0x6784 <twi_init>
    6dc8:	85 e6       	ldi	r24, 0x65	; 101
    6dca:	96 e3       	ldi	r25, 0x36	; 54
    6dcc:	e5 dd       	rcall	.-1078   	; 0x6998 <twi_attachSlaveTxEvent>
    6dce:	8b e3       	ldi	r24, 0x3B	; 59
    6dd0:	96 e3       	ldi	r25, 0x36	; 54
    6dd2:	dd cd       	rjmp	.-1094   	; 0x698e <twi_attachSlaveRxEvent>

00006dd4 <_ZN7TwoWire3endEv>:
    6dd4:	f5 cc       	rjmp	.-1558   	; 0x67c0 <twi_disable>

00006dd6 <_ZN7TwoWire8setClockEm>:
    6dd6:	cb 01       	movw	r24, r22
    6dd8:	ba 01       	movw	r22, r20
    6dda:	ff cc       	rjmp	.-1538   	; 0x67da <twi_setFrequency>

00006ddc <_ZN7TwoWire17beginTransmissionEh>:
    6ddc:	81 e0       	ldi	r24, 0x01	; 1
    6dde:	80 93 17 0e 	sts	0x0E17, r24	; 0x800e17 <_ZN7TwoWire12transmittingE>
    6de2:	60 93 3a 0e 	sts	0x0E3A, r22	; 0x800e3a <_ZN7TwoWire9txAddressE>
    6de6:	10 92 19 0e 	sts	0x0E19, r1	; 0x800e19 <_ZN7TwoWire13txBufferIndexE>
    6dea:	10 92 18 0e 	sts	0x0E18, r1	; 0x800e18 <_ZN7TwoWire14txBufferLengthE>
    6dee:	08 95       	ret

00006df0 <_ZN7TwoWire17beginTransmissionEi>:
    6df0:	f5 cf       	rjmp	.-22     	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>

00006df2 <_ZN7TwoWire15endTransmissionEh>:
    6df2:	0f 93       	push	r16
    6df4:	06 2f       	mov	r16, r22
    6df6:	21 e0       	ldi	r18, 0x01	; 1
    6df8:	40 91 18 0e 	lds	r20, 0x0E18	; 0x800e18 <_ZN7TwoWire14txBufferLengthE>
    6dfc:	6a e1       	ldi	r22, 0x1A	; 26
    6dfe:	7e e0       	ldi	r23, 0x0E	; 14
    6e00:	80 91 3a 0e 	lds	r24, 0x0E3A	; 0x800e3a <_ZN7TwoWire9txAddressE>
    6e04:	46 dd       	rcall	.-1396   	; 0x6892 <twi_writeTo>
    6e06:	10 92 19 0e 	sts	0x0E19, r1	; 0x800e19 <_ZN7TwoWire13txBufferIndexE>
    6e0a:	10 92 18 0e 	sts	0x0E18, r1	; 0x800e18 <_ZN7TwoWire14txBufferLengthE>
    6e0e:	10 92 17 0e 	sts	0x0E17, r1	; 0x800e17 <_ZN7TwoWire12transmittingE>
    6e12:	0f 91       	pop	r16
    6e14:	08 95       	ret

00006e16 <_ZN7TwoWire11requestFromEhhmhh>:
    6e16:	4f 92       	push	r4
    6e18:	5f 92       	push	r5
    6e1a:	6f 92       	push	r6
    6e1c:	7f 92       	push	r7
    6e1e:	af 92       	push	r10
    6e20:	bf 92       	push	r11
    6e22:	cf 92       	push	r12
    6e24:	ef 92       	push	r14
    6e26:	ff 92       	push	r15
    6e28:	0f 93       	push	r16
    6e2a:	1f 93       	push	r17
    6e2c:	cf 93       	push	r28
    6e2e:	df 93       	push	r29
    6e30:	5c 01       	movw	r10, r24
    6e32:	f6 2e       	mov	r15, r22
    6e34:	d4 2f       	mov	r29, r20
    6e36:	28 01       	movw	r4, r16
    6e38:	39 01       	movw	r6, r18
    6e3a:	ee 20       	and	r14, r14
    6e3c:	11 f1       	breq	.+68     	; 0x6e82 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    6e3e:	ce df       	rcall	.-100    	; 0x6ddc <_ZN7TwoWire17beginTransmissionEh>
    6e40:	ce 2d       	mov	r28, r14
    6e42:	c4 30       	cpi	r28, 0x04	; 4
    6e44:	08 f0       	brcs	.+2      	; 0x6e48 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6e46:	c3 e0       	ldi	r28, 0x03	; 3
    6e48:	c1 50       	subi	r28, 0x01	; 1
    6e4a:	c0 f0       	brcs	.+48     	; 0x6e7c <_ZN7TwoWire11requestFromEhhmhh+0x66>
    6e4c:	28 e0       	ldi	r18, 0x08	; 8
    6e4e:	c2 9f       	mul	r28, r18
    6e50:	c0 01       	movw	r24, r0
    6e52:	11 24       	eor	r1, r1
    6e54:	a3 01       	movw	r20, r6
    6e56:	92 01       	movw	r18, r4
    6e58:	04 c0       	rjmp	.+8      	; 0x6e62 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    6e5a:	56 95       	lsr	r21
    6e5c:	47 95       	ror	r20
    6e5e:	37 95       	ror	r19
    6e60:	27 95       	ror	r18
    6e62:	8a 95       	dec	r24
    6e64:	d2 f7       	brpl	.-12     	; 0x6e5a <_ZN7TwoWire11requestFromEhhmhh+0x44>
    6e66:	ca 01       	movw	r24, r20
    6e68:	b9 01       	movw	r22, r18
    6e6a:	d5 01       	movw	r26, r10
    6e6c:	ed 91       	ld	r30, X+
    6e6e:	fc 91       	ld	r31, X
    6e70:	01 90       	ld	r0, Z+
    6e72:	f0 81       	ld	r31, Z
    6e74:	e0 2d       	mov	r30, r0
    6e76:	c5 01       	movw	r24, r10
    6e78:	09 95       	icall
    6e7a:	e6 cf       	rjmp	.-52     	; 0x6e48 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6e7c:	60 e0       	ldi	r22, 0x00	; 0
    6e7e:	c5 01       	movw	r24, r10
    6e80:	b8 df       	rcall	.-144    	; 0x6df2 <_ZN7TwoWire15endTransmissionEh>
    6e82:	4d 2f       	mov	r20, r29
    6e84:	d1 32       	cpi	r29, 0x21	; 33
    6e86:	08 f0       	brcs	.+2      	; 0x6e8a <_ZN7TwoWire11requestFromEhhmhh+0x74>
    6e88:	40 e2       	ldi	r20, 0x20	; 32
    6e8a:	2c 2d       	mov	r18, r12
    6e8c:	6d e3       	ldi	r22, 0x3D	; 61
    6e8e:	7e e0       	ldi	r23, 0x0E	; 14
    6e90:	8f 2d       	mov	r24, r15
    6e92:	b7 dc       	rcall	.-1682   	; 0x6802 <twi_readFrom>
    6e94:	10 92 3c 0e 	sts	0x0E3C, r1	; 0x800e3c <_ZN7TwoWire13rxBufferIndexE>
    6e98:	80 93 3b 0e 	sts	0x0E3B, r24	; 0x800e3b <_ZN7TwoWire14rxBufferLengthE>
    6e9c:	df 91       	pop	r29
    6e9e:	cf 91       	pop	r28
    6ea0:	1f 91       	pop	r17
    6ea2:	0f 91       	pop	r16
    6ea4:	ff 90       	pop	r15
    6ea6:	ef 90       	pop	r14
    6ea8:	cf 90       	pop	r12
    6eaa:	bf 90       	pop	r11
    6eac:	af 90       	pop	r10
    6eae:	7f 90       	pop	r7
    6eb0:	6f 90       	pop	r6
    6eb2:	5f 90       	pop	r5
    6eb4:	4f 90       	pop	r4
    6eb6:	08 95       	ret

00006eb8 <_ZN7TwoWire11requestFromEhhh>:
    6eb8:	cf 92       	push	r12
    6eba:	ef 92       	push	r14
    6ebc:	0f 93       	push	r16
    6ebe:	1f 93       	push	r17
    6ec0:	c2 2e       	mov	r12, r18
    6ec2:	e1 2c       	mov	r14, r1
    6ec4:	00 e0       	ldi	r16, 0x00	; 0
    6ec6:	10 e0       	ldi	r17, 0x00	; 0
    6ec8:	98 01       	movw	r18, r16
    6eca:	a5 df       	rcall	.-182    	; 0x6e16 <_ZN7TwoWire11requestFromEhhmhh>
    6ecc:	1f 91       	pop	r17
    6ece:	0f 91       	pop	r16
    6ed0:	ef 90       	pop	r14
    6ed2:	cf 90       	pop	r12
    6ed4:	08 95       	ret

00006ed6 <_ZN7TwoWire11requestFromEhh>:
    6ed6:	21 e0       	ldi	r18, 0x01	; 1
    6ed8:	ef cf       	rjmp	.-34     	; 0x6eb8 <_ZN7TwoWire11requestFromEhhh>

00006eda <_ZN7TwoWire11requestFromEii>:
    6eda:	21 e0       	ldi	r18, 0x01	; 1
    6edc:	ed cf       	rjmp	.-38     	; 0x6eb8 <_ZN7TwoWire11requestFromEhhh>

00006ede <_ZN7TwoWire15endTransmissionEv>:
    6ede:	61 e0       	ldi	r22, 0x01	; 1
    6ee0:	88 cf       	rjmp	.-240    	; 0x6df2 <_ZN7TwoWire15endTransmissionEh>

00006ee2 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    6ee2:	87 e0       	ldi	r24, 0x07	; 7
    6ee4:	9e e0       	ldi	r25, 0x0E	; 14
    6ee6:	57 cf       	rjmp	.-338    	; 0x6d96 <_ZN7TwoWireC1Ev>

00006ee8 <__cmpsf2>:
    6ee8:	a8 d0       	rcall	.+336    	; 0x703a <__fp_cmp>
    6eea:	08 f4       	brcc	.+2      	; 0x6eee <__cmpsf2+0x6>
    6eec:	81 e0       	ldi	r24, 0x01	; 1
    6eee:	08 95       	ret

00006ef0 <__divsf3>:
    6ef0:	0c d0       	rcall	.+24     	; 0x6f0a <__divsf3x>
    6ef2:	de c0       	rjmp	.+444    	; 0x70b0 <__fp_round>
    6ef4:	d6 d0       	rcall	.+428    	; 0x70a2 <__fp_pscB>
    6ef6:	40 f0       	brcs	.+16     	; 0x6f08 <__divsf3+0x18>
    6ef8:	cd d0       	rcall	.+410    	; 0x7094 <__fp_pscA>
    6efa:	30 f0       	brcs	.+12     	; 0x6f08 <__divsf3+0x18>
    6efc:	21 f4       	brne	.+8      	; 0x6f06 <__divsf3+0x16>
    6efe:	5f 3f       	cpi	r21, 0xFF	; 255
    6f00:	19 f0       	breq	.+6      	; 0x6f08 <__divsf3+0x18>
    6f02:	bf c0       	rjmp	.+382    	; 0x7082 <__fp_inf>
    6f04:	51 11       	cpse	r21, r1
    6f06:	08 c1       	rjmp	.+528    	; 0x7118 <__fp_szero>
    6f08:	c2 c0       	rjmp	.+388    	; 0x708e <__fp_nan>

00006f0a <__divsf3x>:
    6f0a:	e3 d0       	rcall	.+454    	; 0x70d2 <__fp_split3>
    6f0c:	98 f3       	brcs	.-26     	; 0x6ef4 <__divsf3+0x4>

00006f0e <__divsf3_pse>:
    6f0e:	99 23       	and	r25, r25
    6f10:	c9 f3       	breq	.-14     	; 0x6f04 <__divsf3+0x14>
    6f12:	55 23       	and	r21, r21
    6f14:	b1 f3       	breq	.-20     	; 0x6f02 <__divsf3+0x12>
    6f16:	95 1b       	sub	r25, r21
    6f18:	55 0b       	sbc	r21, r21
    6f1a:	bb 27       	eor	r27, r27
    6f1c:	aa 27       	eor	r26, r26
    6f1e:	62 17       	cp	r22, r18
    6f20:	73 07       	cpc	r23, r19
    6f22:	84 07       	cpc	r24, r20
    6f24:	38 f0       	brcs	.+14     	; 0x6f34 <__divsf3_pse+0x26>
    6f26:	9f 5f       	subi	r25, 0xFF	; 255
    6f28:	5f 4f       	sbci	r21, 0xFF	; 255
    6f2a:	22 0f       	add	r18, r18
    6f2c:	33 1f       	adc	r19, r19
    6f2e:	44 1f       	adc	r20, r20
    6f30:	aa 1f       	adc	r26, r26
    6f32:	a9 f3       	breq	.-22     	; 0x6f1e <__divsf3_pse+0x10>
    6f34:	33 d0       	rcall	.+102    	; 0x6f9c <__divsf3_pse+0x8e>
    6f36:	0e 2e       	mov	r0, r30
    6f38:	3a f0       	brmi	.+14     	; 0x6f48 <__divsf3_pse+0x3a>
    6f3a:	e0 e8       	ldi	r30, 0x80	; 128
    6f3c:	30 d0       	rcall	.+96     	; 0x6f9e <__divsf3_pse+0x90>
    6f3e:	91 50       	subi	r25, 0x01	; 1
    6f40:	50 40       	sbci	r21, 0x00	; 0
    6f42:	e6 95       	lsr	r30
    6f44:	00 1c       	adc	r0, r0
    6f46:	ca f7       	brpl	.-14     	; 0x6f3a <__divsf3_pse+0x2c>
    6f48:	29 d0       	rcall	.+82     	; 0x6f9c <__divsf3_pse+0x8e>
    6f4a:	fe 2f       	mov	r31, r30
    6f4c:	27 d0       	rcall	.+78     	; 0x6f9c <__divsf3_pse+0x8e>
    6f4e:	66 0f       	add	r22, r22
    6f50:	77 1f       	adc	r23, r23
    6f52:	88 1f       	adc	r24, r24
    6f54:	bb 1f       	adc	r27, r27
    6f56:	26 17       	cp	r18, r22
    6f58:	37 07       	cpc	r19, r23
    6f5a:	48 07       	cpc	r20, r24
    6f5c:	ab 07       	cpc	r26, r27
    6f5e:	b0 e8       	ldi	r27, 0x80	; 128
    6f60:	09 f0       	breq	.+2      	; 0x6f64 <__divsf3_pse+0x56>
    6f62:	bb 0b       	sbc	r27, r27
    6f64:	80 2d       	mov	r24, r0
    6f66:	bf 01       	movw	r22, r30
    6f68:	ff 27       	eor	r31, r31
    6f6a:	93 58       	subi	r25, 0x83	; 131
    6f6c:	5f 4f       	sbci	r21, 0xFF	; 255
    6f6e:	2a f0       	brmi	.+10     	; 0x6f7a <__divsf3_pse+0x6c>
    6f70:	9e 3f       	cpi	r25, 0xFE	; 254
    6f72:	51 05       	cpc	r21, r1
    6f74:	68 f0       	brcs	.+26     	; 0x6f90 <__divsf3_pse+0x82>
    6f76:	85 c0       	rjmp	.+266    	; 0x7082 <__fp_inf>
    6f78:	cf c0       	rjmp	.+414    	; 0x7118 <__fp_szero>
    6f7a:	5f 3f       	cpi	r21, 0xFF	; 255
    6f7c:	ec f3       	brlt	.-6      	; 0x6f78 <__divsf3_pse+0x6a>
    6f7e:	98 3e       	cpi	r25, 0xE8	; 232
    6f80:	dc f3       	brlt	.-10     	; 0x6f78 <__divsf3_pse+0x6a>
    6f82:	86 95       	lsr	r24
    6f84:	77 95       	ror	r23
    6f86:	67 95       	ror	r22
    6f88:	b7 95       	ror	r27
    6f8a:	f7 95       	ror	r31
    6f8c:	9f 5f       	subi	r25, 0xFF	; 255
    6f8e:	c9 f7       	brne	.-14     	; 0x6f82 <__divsf3_pse+0x74>
    6f90:	88 0f       	add	r24, r24
    6f92:	91 1d       	adc	r25, r1
    6f94:	96 95       	lsr	r25
    6f96:	87 95       	ror	r24
    6f98:	97 f9       	bld	r25, 7
    6f9a:	08 95       	ret
    6f9c:	e1 e0       	ldi	r30, 0x01	; 1
    6f9e:	66 0f       	add	r22, r22
    6fa0:	77 1f       	adc	r23, r23
    6fa2:	88 1f       	adc	r24, r24
    6fa4:	bb 1f       	adc	r27, r27
    6fa6:	62 17       	cp	r22, r18
    6fa8:	73 07       	cpc	r23, r19
    6faa:	84 07       	cpc	r24, r20
    6fac:	ba 07       	cpc	r27, r26
    6fae:	20 f0       	brcs	.+8      	; 0x6fb8 <__divsf3_pse+0xaa>
    6fb0:	62 1b       	sub	r22, r18
    6fb2:	73 0b       	sbc	r23, r19
    6fb4:	84 0b       	sbc	r24, r20
    6fb6:	ba 0b       	sbc	r27, r26
    6fb8:	ee 1f       	adc	r30, r30
    6fba:	88 f7       	brcc	.-30     	; 0x6f9e <__divsf3_pse+0x90>
    6fbc:	e0 95       	com	r30
    6fbe:	08 95       	ret

00006fc0 <__floatunsisf>:
    6fc0:	e8 94       	clt
    6fc2:	09 c0       	rjmp	.+18     	; 0x6fd6 <__floatsisf+0x12>

00006fc4 <__floatsisf>:
    6fc4:	97 fb       	bst	r25, 7
    6fc6:	3e f4       	brtc	.+14     	; 0x6fd6 <__floatsisf+0x12>
    6fc8:	90 95       	com	r25
    6fca:	80 95       	com	r24
    6fcc:	70 95       	com	r23
    6fce:	61 95       	neg	r22
    6fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    6fd2:	8f 4f       	sbci	r24, 0xFF	; 255
    6fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    6fd6:	99 23       	and	r25, r25
    6fd8:	a9 f0       	breq	.+42     	; 0x7004 <__floatsisf+0x40>
    6fda:	f9 2f       	mov	r31, r25
    6fdc:	96 e9       	ldi	r25, 0x96	; 150
    6fde:	bb 27       	eor	r27, r27
    6fe0:	93 95       	inc	r25
    6fe2:	f6 95       	lsr	r31
    6fe4:	87 95       	ror	r24
    6fe6:	77 95       	ror	r23
    6fe8:	67 95       	ror	r22
    6fea:	b7 95       	ror	r27
    6fec:	f1 11       	cpse	r31, r1
    6fee:	f8 cf       	rjmp	.-16     	; 0x6fe0 <__floatsisf+0x1c>
    6ff0:	fa f4       	brpl	.+62     	; 0x7030 <__floatsisf+0x6c>
    6ff2:	bb 0f       	add	r27, r27
    6ff4:	11 f4       	brne	.+4      	; 0x6ffa <__floatsisf+0x36>
    6ff6:	60 ff       	sbrs	r22, 0
    6ff8:	1b c0       	rjmp	.+54     	; 0x7030 <__floatsisf+0x6c>
    6ffa:	6f 5f       	subi	r22, 0xFF	; 255
    6ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    6ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    7000:	9f 4f       	sbci	r25, 0xFF	; 255
    7002:	16 c0       	rjmp	.+44     	; 0x7030 <__floatsisf+0x6c>
    7004:	88 23       	and	r24, r24
    7006:	11 f0       	breq	.+4      	; 0x700c <__floatsisf+0x48>
    7008:	96 e9       	ldi	r25, 0x96	; 150
    700a:	11 c0       	rjmp	.+34     	; 0x702e <__floatsisf+0x6a>
    700c:	77 23       	and	r23, r23
    700e:	21 f0       	breq	.+8      	; 0x7018 <__floatsisf+0x54>
    7010:	9e e8       	ldi	r25, 0x8E	; 142
    7012:	87 2f       	mov	r24, r23
    7014:	76 2f       	mov	r23, r22
    7016:	05 c0       	rjmp	.+10     	; 0x7022 <__floatsisf+0x5e>
    7018:	66 23       	and	r22, r22
    701a:	71 f0       	breq	.+28     	; 0x7038 <__floatsisf+0x74>
    701c:	96 e8       	ldi	r25, 0x86	; 134
    701e:	86 2f       	mov	r24, r22
    7020:	70 e0       	ldi	r23, 0x00	; 0
    7022:	60 e0       	ldi	r22, 0x00	; 0
    7024:	2a f0       	brmi	.+10     	; 0x7030 <__floatsisf+0x6c>
    7026:	9a 95       	dec	r25
    7028:	66 0f       	add	r22, r22
    702a:	77 1f       	adc	r23, r23
    702c:	88 1f       	adc	r24, r24
    702e:	da f7       	brpl	.-10     	; 0x7026 <__floatsisf+0x62>
    7030:	88 0f       	add	r24, r24
    7032:	96 95       	lsr	r25
    7034:	87 95       	ror	r24
    7036:	97 f9       	bld	r25, 7
    7038:	08 95       	ret

0000703a <__fp_cmp>:
    703a:	99 0f       	add	r25, r25
    703c:	00 08       	sbc	r0, r0
    703e:	55 0f       	add	r21, r21
    7040:	aa 0b       	sbc	r26, r26
    7042:	e0 e8       	ldi	r30, 0x80	; 128
    7044:	fe ef       	ldi	r31, 0xFE	; 254
    7046:	16 16       	cp	r1, r22
    7048:	17 06       	cpc	r1, r23
    704a:	e8 07       	cpc	r30, r24
    704c:	f9 07       	cpc	r31, r25
    704e:	c0 f0       	brcs	.+48     	; 0x7080 <__fp_cmp+0x46>
    7050:	12 16       	cp	r1, r18
    7052:	13 06       	cpc	r1, r19
    7054:	e4 07       	cpc	r30, r20
    7056:	f5 07       	cpc	r31, r21
    7058:	98 f0       	brcs	.+38     	; 0x7080 <__fp_cmp+0x46>
    705a:	62 1b       	sub	r22, r18
    705c:	73 0b       	sbc	r23, r19
    705e:	84 0b       	sbc	r24, r20
    7060:	95 0b       	sbc	r25, r21
    7062:	39 f4       	brne	.+14     	; 0x7072 <__fp_cmp+0x38>
    7064:	0a 26       	eor	r0, r26
    7066:	61 f0       	breq	.+24     	; 0x7080 <__fp_cmp+0x46>
    7068:	23 2b       	or	r18, r19
    706a:	24 2b       	or	r18, r20
    706c:	25 2b       	or	r18, r21
    706e:	21 f4       	brne	.+8      	; 0x7078 <__fp_cmp+0x3e>
    7070:	08 95       	ret
    7072:	0a 26       	eor	r0, r26
    7074:	09 f4       	brne	.+2      	; 0x7078 <__fp_cmp+0x3e>
    7076:	a1 40       	sbci	r26, 0x01	; 1
    7078:	a6 95       	lsr	r26
    707a:	8f ef       	ldi	r24, 0xFF	; 255
    707c:	81 1d       	adc	r24, r1
    707e:	81 1d       	adc	r24, r1
    7080:	08 95       	ret

00007082 <__fp_inf>:
    7082:	97 f9       	bld	r25, 7
    7084:	9f 67       	ori	r25, 0x7F	; 127
    7086:	80 e8       	ldi	r24, 0x80	; 128
    7088:	70 e0       	ldi	r23, 0x00	; 0
    708a:	60 e0       	ldi	r22, 0x00	; 0
    708c:	08 95       	ret

0000708e <__fp_nan>:
    708e:	9f ef       	ldi	r25, 0xFF	; 255
    7090:	80 ec       	ldi	r24, 0xC0	; 192
    7092:	08 95       	ret

00007094 <__fp_pscA>:
    7094:	00 24       	eor	r0, r0
    7096:	0a 94       	dec	r0
    7098:	16 16       	cp	r1, r22
    709a:	17 06       	cpc	r1, r23
    709c:	18 06       	cpc	r1, r24
    709e:	09 06       	cpc	r0, r25
    70a0:	08 95       	ret

000070a2 <__fp_pscB>:
    70a2:	00 24       	eor	r0, r0
    70a4:	0a 94       	dec	r0
    70a6:	12 16       	cp	r1, r18
    70a8:	13 06       	cpc	r1, r19
    70aa:	14 06       	cpc	r1, r20
    70ac:	05 06       	cpc	r0, r21
    70ae:	08 95       	ret

000070b0 <__fp_round>:
    70b0:	09 2e       	mov	r0, r25
    70b2:	03 94       	inc	r0
    70b4:	00 0c       	add	r0, r0
    70b6:	11 f4       	brne	.+4      	; 0x70bc <__fp_round+0xc>
    70b8:	88 23       	and	r24, r24
    70ba:	52 f0       	brmi	.+20     	; 0x70d0 <__fp_round+0x20>
    70bc:	bb 0f       	add	r27, r27
    70be:	40 f4       	brcc	.+16     	; 0x70d0 <__fp_round+0x20>
    70c0:	bf 2b       	or	r27, r31
    70c2:	11 f4       	brne	.+4      	; 0x70c8 <__fp_round+0x18>
    70c4:	60 ff       	sbrs	r22, 0
    70c6:	04 c0       	rjmp	.+8      	; 0x70d0 <__fp_round+0x20>
    70c8:	6f 5f       	subi	r22, 0xFF	; 255
    70ca:	7f 4f       	sbci	r23, 0xFF	; 255
    70cc:	8f 4f       	sbci	r24, 0xFF	; 255
    70ce:	9f 4f       	sbci	r25, 0xFF	; 255
    70d0:	08 95       	ret

000070d2 <__fp_split3>:
    70d2:	57 fd       	sbrc	r21, 7
    70d4:	90 58       	subi	r25, 0x80	; 128
    70d6:	44 0f       	add	r20, r20
    70d8:	55 1f       	adc	r21, r21
    70da:	59 f0       	breq	.+22     	; 0x70f2 <__fp_splitA+0x10>
    70dc:	5f 3f       	cpi	r21, 0xFF	; 255
    70de:	71 f0       	breq	.+28     	; 0x70fc <__fp_splitA+0x1a>
    70e0:	47 95       	ror	r20

000070e2 <__fp_splitA>:
    70e2:	88 0f       	add	r24, r24
    70e4:	97 fb       	bst	r25, 7
    70e6:	99 1f       	adc	r25, r25
    70e8:	61 f0       	breq	.+24     	; 0x7102 <__fp_splitA+0x20>
    70ea:	9f 3f       	cpi	r25, 0xFF	; 255
    70ec:	79 f0       	breq	.+30     	; 0x710c <__fp_splitA+0x2a>
    70ee:	87 95       	ror	r24
    70f0:	08 95       	ret
    70f2:	12 16       	cp	r1, r18
    70f4:	13 06       	cpc	r1, r19
    70f6:	14 06       	cpc	r1, r20
    70f8:	55 1f       	adc	r21, r21
    70fa:	f2 cf       	rjmp	.-28     	; 0x70e0 <__fp_split3+0xe>
    70fc:	46 95       	lsr	r20
    70fe:	f1 df       	rcall	.-30     	; 0x70e2 <__fp_splitA>
    7100:	08 c0       	rjmp	.+16     	; 0x7112 <__fp_splitA+0x30>
    7102:	16 16       	cp	r1, r22
    7104:	17 06       	cpc	r1, r23
    7106:	18 06       	cpc	r1, r24
    7108:	99 1f       	adc	r25, r25
    710a:	f1 cf       	rjmp	.-30     	; 0x70ee <__fp_splitA+0xc>
    710c:	86 95       	lsr	r24
    710e:	71 05       	cpc	r23, r1
    7110:	61 05       	cpc	r22, r1
    7112:	08 94       	sec
    7114:	08 95       	ret

00007116 <__fp_zero>:
    7116:	e8 94       	clt

00007118 <__fp_szero>:
    7118:	bb 27       	eor	r27, r27
    711a:	66 27       	eor	r22, r22
    711c:	77 27       	eor	r23, r23
    711e:	cb 01       	movw	r24, r22
    7120:	97 f9       	bld	r25, 7
    7122:	08 95       	ret

00007124 <__cxa_pure_virtual>:
    7124:	0e 94 bc 43 	call	0x8778	; 0x8778 <abort>

00007128 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    7128:	1f 92       	push	r1
    712a:	0f 92       	push	r0
    712c:	0f b6       	in	r0, 0x3f	; 63
    712e:	0f 92       	push	r0
    7130:	11 24       	eor	r1, r1
    7132:	2f 93       	push	r18
    7134:	8f 93       	push	r24
    7136:	9f 93       	push	r25
    7138:	ef 93       	push	r30
    713a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    713c:	e0 91 6d 0e 	lds	r30, 0x0E6D	; 0x800e6d <Serial+0x10>
    7140:	f0 91 6e 0e 	lds	r31, 0x0E6E	; 0x800e6e <Serial+0x11>
    7144:	80 81       	ld	r24, Z
    7146:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <Serial+0x16>
    714a:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <Serial+0x17>
    714e:	82 fd       	sbrc	r24, 2
    7150:	12 c0       	rjmp	.+36     	; 0x7176 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    7152:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    7154:	80 91 76 0e 	lds	r24, 0x0E76	; 0x800e76 <Serial+0x19>
    7158:	8f 5f       	subi	r24, 0xFF	; 255
    715a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    715c:	20 91 77 0e 	lds	r18, 0x0E77	; 0x800e77 <Serial+0x1a>
    7160:	82 17       	cp	r24, r18
    7162:	51 f0       	breq	.+20     	; 0x7178 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    7164:	e0 91 76 0e 	lds	r30, 0x0E76	; 0x800e76 <Serial+0x19>
    7168:	f0 e0       	ldi	r31, 0x00	; 0
    716a:	e3 5a       	subi	r30, 0xA3	; 163
    716c:	f1 4f       	sbci	r31, 0xF1	; 241
    716e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    7170:	80 93 76 0e 	sts	0x0E76, r24	; 0x800e76 <Serial+0x19>
    7174:	01 c0       	rjmp	.+2      	; 0x7178 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    7176:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    7178:	ff 91       	pop	r31
    717a:	ef 91       	pop	r30
    717c:	9f 91       	pop	r25
    717e:	8f 91       	pop	r24
    7180:	2f 91       	pop	r18
    7182:	0f 90       	pop	r0
    7184:	0f be       	out	0x3f, r0	; 63
    7186:	0f 90       	pop	r0
    7188:	1f 90       	pop	r1
    718a:	18 95       	reti

0000718c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    718c:	1f 92       	push	r1
    718e:	0f 92       	push	r0
    7190:	0f b6       	in	r0, 0x3f	; 63
    7192:	0f 92       	push	r0
    7194:	11 24       	eor	r1, r1
    7196:	2f 93       	push	r18
    7198:	3f 93       	push	r19
    719a:	4f 93       	push	r20
    719c:	5f 93       	push	r21
    719e:	6f 93       	push	r22
    71a0:	7f 93       	push	r23
    71a2:	8f 93       	push	r24
    71a4:	9f 93       	push	r25
    71a6:	af 93       	push	r26
    71a8:	bf 93       	push	r27
    71aa:	ef 93       	push	r30
    71ac:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    71ae:	8d e5       	ldi	r24, 0x5D	; 93
    71b0:	9e e0       	ldi	r25, 0x0E	; 14
    71b2:	b2 d6       	rcall	.+3428   	; 0x7f18 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    71b4:	ff 91       	pop	r31
    71b6:	ef 91       	pop	r30
    71b8:	bf 91       	pop	r27
    71ba:	af 91       	pop	r26
    71bc:	9f 91       	pop	r25
    71be:	8f 91       	pop	r24
    71c0:	7f 91       	pop	r23
    71c2:	6f 91       	pop	r22
    71c4:	5f 91       	pop	r21
    71c6:	4f 91       	pop	r20
    71c8:	3f 91       	pop	r19
    71ca:	2f 91       	pop	r18
    71cc:	0f 90       	pop	r0
    71ce:	0f be       	out	0x3f, r0	; 63
    71d0:	0f 90       	pop	r0
    71d2:	1f 90       	pop	r1
    71d4:	18 95       	reti

000071d6 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    71d6:	8d e5       	ldi	r24, 0x5D	; 93
    71d8:	9e e0       	ldi	r25, 0x0E	; 14
    71da:	54 d6       	rcall	.+3240   	; 0x7e84 <_ZN14HardwareSerial9availableEv>
    71dc:	21 e0       	ldi	r18, 0x01	; 1
    71de:	89 2b       	or	r24, r25
    71e0:	09 f4       	brne	.+2      	; 0x71e4 <_Z17Serial0_availablev+0xe>
    71e2:	20 e0       	ldi	r18, 0x00	; 0
}
    71e4:	82 2f       	mov	r24, r18
    71e6:	08 95       	ret

000071e8 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    71e8:	ed e5       	ldi	r30, 0x5D	; 93
    71ea:	fe e0       	ldi	r31, 0x0E	; 14
    71ec:	13 82       	std	Z+3, r1	; 0x03
    71ee:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    71f0:	88 ee       	ldi	r24, 0xE8	; 232
    71f2:	93 e0       	ldi	r25, 0x03	; 3
    71f4:	a0 e0       	ldi	r26, 0x00	; 0
    71f6:	b0 e0       	ldi	r27, 0x00	; 0
    71f8:	84 83       	std	Z+4, r24	; 0x04
    71fa:	95 83       	std	Z+5, r25	; 0x05
    71fc:	a6 83       	std	Z+6, r26	; 0x06
    71fe:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    7200:	8a e7       	ldi	r24, 0x7A	; 122
    7202:	9a e0       	ldi	r25, 0x0A	; 10
    7204:	91 83       	std	Z+1, r25	; 0x01
    7206:	80 83       	st	Z, r24
    7208:	85 ec       	ldi	r24, 0xC5	; 197
    720a:	90 e0       	ldi	r25, 0x00	; 0
    720c:	95 87       	std	Z+13, r25	; 0x0d
    720e:	84 87       	std	Z+12, r24	; 0x0c
    7210:	84 ec       	ldi	r24, 0xC4	; 196
    7212:	90 e0       	ldi	r25, 0x00	; 0
    7214:	97 87       	std	Z+15, r25	; 0x0f
    7216:	86 87       	std	Z+14, r24	; 0x0e
    7218:	80 ec       	ldi	r24, 0xC0	; 192
    721a:	90 e0       	ldi	r25, 0x00	; 0
    721c:	91 8b       	std	Z+17, r25	; 0x11
    721e:	80 8b       	std	Z+16, r24	; 0x10
    7220:	81 ec       	ldi	r24, 0xC1	; 193
    7222:	90 e0       	ldi	r25, 0x00	; 0
    7224:	93 8b       	std	Z+19, r25	; 0x13
    7226:	82 8b       	std	Z+18, r24	; 0x12
    7228:	82 ec       	ldi	r24, 0xC2	; 194
    722a:	90 e0       	ldi	r25, 0x00	; 0
    722c:	95 8b       	std	Z+21, r25	; 0x15
    722e:	84 8b       	std	Z+20, r24	; 0x14
    7230:	86 ec       	ldi	r24, 0xC6	; 198
    7232:	90 e0       	ldi	r25, 0x00	; 0
    7234:	97 8b       	std	Z+23, r25	; 0x17
    7236:	86 8b       	std	Z+22, r24	; 0x16
    7238:	11 8e       	std	Z+25, r1	; 0x19
    723a:	12 8e       	std	Z+26, r1	; 0x1a
    723c:	13 8e       	std	Z+27, r1	; 0x1b
    723e:	14 8e       	std	Z+28, r1	; 0x1c
    7240:	08 95       	ret

00007242 <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    7242:	8f 92       	push	r8
    7244:	9f 92       	push	r9
    7246:	af 92       	push	r10
    7248:	bf 92       	push	r11
    724a:	cf 92       	push	r12
    724c:	df 92       	push	r13
    724e:	ef 92       	push	r14
    7250:	ff 92       	push	r15
    7252:	0f 93       	push	r16
    7254:	1f 93       	push	r17
    7256:	cf 93       	push	r28
    7258:	df 93       	push	r29
    725a:	7c 01       	movw	r14, r24
    725c:	8b 01       	movw	r16, r22
    725e:	4c 01       	movw	r8, r24
    7260:	82 e0       	ldi	r24, 0x02	; 2
    7262:	88 0e       	add	r8, r24
    7264:	91 1c       	adc	r9, r1
    7266:	57 01       	movw	r10, r14
    7268:	e5 e0       	ldi	r30, 0x05	; 5
    726a:	ae 0e       	add	r10, r30
    726c:	b1 1c       	adc	r11, r1
    726e:	c0 e0       	ldi	r28, 0x00	; 0
    7270:	d0 e0       	ldi	r29, 0x00	; 0
    7272:	f4 01       	movw	r30, r8
    7274:	61 91       	ld	r22, Z+
    7276:	4f 01       	movw	r8, r30
    7278:	4a e0       	ldi	r20, 0x0A	; 10
    727a:	50 e0       	ldi	r21, 0x00	; 0
    727c:	c8 01       	movw	r24, r16
    727e:	57 d1       	rcall	.+686    	; 0x752e <_ZN5Print5printEhi>
    7280:	6c 01       	movw	r12, r24
    7282:	6e e2       	ldi	r22, 0x2E	; 46
    7284:	c8 01       	movw	r24, r16
    7286:	c6 d0       	rcall	.+396    	; 0x7414 <_ZN5Print5printEc>
    7288:	8c 0d       	add	r24, r12
    728a:	9d 1d       	adc	r25, r13
    728c:	c8 0f       	add	r28, r24
    728e:	d9 1f       	adc	r29, r25
    7290:	8a 14       	cp	r8, r10
    7292:	9b 04       	cpc	r9, r11
    7294:	71 f7       	brne	.-36     	; 0x7272 <_ZNK9IPAddress7printToER5Print+0x30>
    7296:	4a e0       	ldi	r20, 0x0A	; 10
    7298:	50 e0       	ldi	r21, 0x00	; 0
    729a:	f7 01       	movw	r30, r14
    729c:	65 81       	ldd	r22, Z+5	; 0x05
    729e:	c8 01       	movw	r24, r16
    72a0:	46 d1       	rcall	.+652    	; 0x752e <_ZN5Print5printEhi>
    72a2:	8c 0f       	add	r24, r28
    72a4:	9d 1f       	adc	r25, r29
    72a6:	df 91       	pop	r29
    72a8:	cf 91       	pop	r28
    72aa:	1f 91       	pop	r17
    72ac:	0f 91       	pop	r16
    72ae:	ff 90       	pop	r15
    72b0:	ef 90       	pop	r14
    72b2:	df 90       	pop	r13
    72b4:	cf 90       	pop	r12
    72b6:	bf 90       	pop	r11
    72b8:	af 90       	pop	r10
    72ba:	9f 90       	pop	r9
    72bc:	8f 90       	pop	r8
    72be:	08 95       	ret

000072c0 <_ZN9IPAddressC1Ev>:
    72c0:	28 e6       	ldi	r18, 0x68	; 104
    72c2:	3a e0       	ldi	r19, 0x0A	; 10
    72c4:	fc 01       	movw	r30, r24
    72c6:	31 83       	std	Z+1, r19	; 0x01
    72c8:	20 83       	st	Z, r18
    72ca:	12 82       	std	Z+2, r1	; 0x02
    72cc:	13 82       	std	Z+3, r1	; 0x03
    72ce:	14 82       	std	Z+4, r1	; 0x04
    72d0:	15 82       	std	Z+5, r1	; 0x05
    72d2:	08 95       	ret

000072d4 <_ZN9IPAddressC1Ehhhh>:
    72d4:	0f 93       	push	r16
    72d6:	fc 01       	movw	r30, r24
    72d8:	88 e6       	ldi	r24, 0x68	; 104
    72da:	9a e0       	ldi	r25, 0x0A	; 10
    72dc:	91 83       	std	Z+1, r25	; 0x01
    72de:	80 83       	st	Z, r24
    72e0:	62 83       	std	Z+2, r22	; 0x02
    72e2:	43 83       	std	Z+3, r20	; 0x03
    72e4:	24 83       	std	Z+4, r18	; 0x04
    72e6:	05 83       	std	Z+5, r16	; 0x05
    72e8:	0f 91       	pop	r16
    72ea:	08 95       	ret

000072ec <_ZN9IPAddressC1EPKh>:
    72ec:	dc 01       	movw	r26, r24
    72ee:	88 e6       	ldi	r24, 0x68	; 104
    72f0:	9a e0       	ldi	r25, 0x0A	; 10
    72f2:	8d 93       	st	X+, r24
    72f4:	9d 93       	st	X+, r25
    72f6:	84 e0       	ldi	r24, 0x04	; 4
    72f8:	fb 01       	movw	r30, r22
    72fa:	01 90       	ld	r0, Z+
    72fc:	0d 92       	st	X+, r0
    72fe:	8a 95       	dec	r24
    7300:	e1 f7       	brne	.-8      	; 0x72fa <_ZN9IPAddressC1EPKh+0xe>
    7302:	08 95       	ret

00007304 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    7304:	dc 01       	movw	r26, r24
    7306:	12 96       	adiw	r26, 0x02	; 2
    7308:	24 e0       	ldi	r18, 0x04	; 4
    730a:	fb 01       	movw	r30, r22
    730c:	01 90       	ld	r0, Z+
    730e:	0d 92       	st	X+, r0
    7310:	2a 95       	dec	r18
    7312:	e1 f7       	brne	.-8      	; 0x730c <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    7314:	08 95       	ret

00007316 <initVariant>:
    7316:	08 95       	ret

00007318 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    7318:	ef d1       	rcall	.+990    	; 0x76f8 <init>

	initVariant();
    731a:	fd df       	rcall	.-6      	; 0x7316 <initVariant>
    731c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    7320:	cf e7       	ldi	r28, 0x7F	; 127
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    7322:	df e3       	ldi	r29, 0x3F	; 63
    7324:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    7328:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    732a:	e1 f3       	breq	.-8      	; 0x7324 <main+0xc>
    732c:	e8 d5       	rcall	.+3024   	; 0x7efe <_Z14serialEventRunv>
    732e:	fa cf       	rjmp	.-12     	; 0x7324 <main+0xc>

00007330 <_ZN5Print5writeEPKhj>:
    7330:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    7332:	df 92       	push	r13
    7334:	ef 92       	push	r14
    7336:	ff 92       	push	r15
    7338:	0f 93       	push	r16
    733a:	1f 93       	push	r17
    733c:	cf 93       	push	r28
    733e:	df 93       	push	r29
    7340:	6c 01       	movw	r12, r24
    7342:	7a 01       	movw	r14, r20
    7344:	8b 01       	movw	r16, r22
    7346:	c0 e0       	ldi	r28, 0x00	; 0
    7348:	d0 e0       	ldi	r29, 0x00	; 0
    734a:	ce 15       	cp	r28, r14
    734c:	df 05       	cpc	r29, r15
    734e:	81 f0       	breq	.+32     	; 0x7370 <_ZN5Print5writeEPKhj+0x40>
    7350:	d8 01       	movw	r26, r16
    7352:	6d 91       	ld	r22, X+
    7354:	8d 01       	movw	r16, r26
    7356:	d6 01       	movw	r26, r12
    7358:	ed 91       	ld	r30, X+
    735a:	fc 91       	ld	r31, X
    735c:	01 90       	ld	r0, Z+
    735e:	f0 81       	ld	r31, Z
    7360:	e0 2d       	mov	r30, r0
    7362:	c6 01       	movw	r24, r12
    7364:	09 95       	icall
    7366:	89 2b       	or	r24, r25
    7368:	11 f0       	breq	.+4      	; 0x736e <_ZN5Print5writeEPKhj+0x3e>
    736a:	21 96       	adiw	r28, 0x01	; 1
    736c:	ee cf       	rjmp	.-36     	; 0x734a <_ZN5Print5writeEPKhj+0x1a>
    736e:	7e 01       	movw	r14, r28
    7370:	c7 01       	movw	r24, r14
    7372:	df 91       	pop	r29
    7374:	cf 91       	pop	r28
    7376:	1f 91       	pop	r17
    7378:	0f 91       	pop	r16
    737a:	ff 90       	pop	r15
    737c:	ef 90       	pop	r14
    737e:	df 90       	pop	r13
    7380:	cf 90       	pop	r12
    7382:	08 95       	ret

00007384 <_ZN5Print5writeEPKc>:
    7384:	61 15       	cp	r22, r1
    7386:	71 05       	cpc	r23, r1
    7388:	79 f0       	breq	.+30     	; 0x73a8 <_ZN5Print5writeEPKc+0x24>
    738a:	fb 01       	movw	r30, r22
    738c:	01 90       	ld	r0, Z+
    738e:	00 20       	and	r0, r0
    7390:	e9 f7       	brne	.-6      	; 0x738c <_ZN5Print5writeEPKc+0x8>
    7392:	31 97       	sbiw	r30, 0x01	; 1
    7394:	af 01       	movw	r20, r30
    7396:	46 1b       	sub	r20, r22
    7398:	57 0b       	sbc	r21, r23
    739a:	dc 01       	movw	r26, r24
    739c:	ed 91       	ld	r30, X+
    739e:	fc 91       	ld	r31, X
    73a0:	02 80       	ldd	r0, Z+2	; 0x02
    73a2:	f3 81       	ldd	r31, Z+3	; 0x03
    73a4:	e0 2d       	mov	r30, r0
    73a6:	09 94       	ijmp
    73a8:	80 e0       	ldi	r24, 0x00	; 0
    73aa:	90 e0       	ldi	r25, 0x00	; 0
    73ac:	08 95       	ret

000073ae <_ZN5Print5printEPK19__FlashStringHelper>:
    73ae:	ef 92       	push	r14
    73b0:	ff 92       	push	r15
    73b2:	0f 93       	push	r16
    73b4:	1f 93       	push	r17
    73b6:	cf 93       	push	r28
    73b8:	df 93       	push	r29
    73ba:	8c 01       	movw	r16, r24
    73bc:	7b 01       	movw	r14, r22
    73be:	c0 e0       	ldi	r28, 0x00	; 0
    73c0:	d0 e0       	ldi	r29, 0x00	; 0
    73c2:	f7 01       	movw	r30, r14
    73c4:	ec 0f       	add	r30, r28
    73c6:	fd 1f       	adc	r31, r29
    73c8:	64 91       	lpm	r22, Z
    73ca:	66 23       	and	r22, r22
    73cc:	61 f0       	breq	.+24     	; 0x73e6 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    73ce:	d8 01       	movw	r26, r16
    73d0:	ed 91       	ld	r30, X+
    73d2:	fc 91       	ld	r31, X
    73d4:	01 90       	ld	r0, Z+
    73d6:	f0 81       	ld	r31, Z
    73d8:	e0 2d       	mov	r30, r0
    73da:	c8 01       	movw	r24, r16
    73dc:	09 95       	icall
    73de:	89 2b       	or	r24, r25
    73e0:	11 f0       	breq	.+4      	; 0x73e6 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    73e2:	21 96       	adiw	r28, 0x01	; 1
    73e4:	ee cf       	rjmp	.-36     	; 0x73c2 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    73e6:	ce 01       	movw	r24, r28
    73e8:	df 91       	pop	r29
    73ea:	cf 91       	pop	r28
    73ec:	1f 91       	pop	r17
    73ee:	0f 91       	pop	r16
    73f0:	ff 90       	pop	r15
    73f2:	ef 90       	pop	r14
    73f4:	08 95       	ret

000073f6 <_ZN5Print5printERK6String>:
    73f6:	db 01       	movw	r26, r22
    73f8:	14 96       	adiw	r26, 0x04	; 4
    73fa:	4d 91       	ld	r20, X+
    73fc:	5c 91       	ld	r21, X
    73fe:	15 97       	sbiw	r26, 0x05	; 5
    7400:	6d 91       	ld	r22, X+
    7402:	7c 91       	ld	r23, X
    7404:	dc 01       	movw	r26, r24
    7406:	ed 91       	ld	r30, X+
    7408:	fc 91       	ld	r31, X
    740a:	02 80       	ldd	r0, Z+2	; 0x02
    740c:	f3 81       	ldd	r31, Z+3	; 0x03
    740e:	e0 2d       	mov	r30, r0
    7410:	09 94       	ijmp

00007412 <_ZN5Print5printEPKc>:
    7412:	b8 cf       	rjmp	.-144    	; 0x7384 <_ZN5Print5writeEPKc>

00007414 <_ZN5Print5printEc>:
    7414:	dc 01       	movw	r26, r24
    7416:	ed 91       	ld	r30, X+
    7418:	fc 91       	ld	r31, X
    741a:	01 90       	ld	r0, Z+
    741c:	f0 81       	ld	r31, Z
    741e:	e0 2d       	mov	r30, r0
    7420:	09 94       	ijmp

00007422 <_ZN5Print7printlnEv>:
    7422:	68 e8       	ldi	r22, 0x88	; 136
    7424:	77 e0       	ldi	r23, 0x07	; 7
    7426:	ae cf       	rjmp	.-164    	; 0x7384 <_ZN5Print5writeEPKc>

00007428 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    7428:	0f 93       	push	r16
    742a:	1f 93       	push	r17
    742c:	cf 93       	push	r28
    742e:	df 93       	push	r29
    7430:	ec 01       	movw	r28, r24
    7432:	bd df       	rcall	.-134    	; 0x73ae <_ZN5Print5printEPK19__FlashStringHelper>
    7434:	8c 01       	movw	r16, r24
    7436:	ce 01       	movw	r24, r28
    7438:	f4 df       	rcall	.-24     	; 0x7422 <_ZN5Print7printlnEv>
    743a:	80 0f       	add	r24, r16
    743c:	91 1f       	adc	r25, r17
    743e:	df 91       	pop	r29
    7440:	cf 91       	pop	r28
    7442:	1f 91       	pop	r17
    7444:	0f 91       	pop	r16
    7446:	08 95       	ret

00007448 <_ZN5Print7printlnERK6String>:
    7448:	0f 93       	push	r16
    744a:	1f 93       	push	r17
    744c:	cf 93       	push	r28
    744e:	df 93       	push	r29
    7450:	ec 01       	movw	r28, r24
    7452:	d1 df       	rcall	.-94     	; 0x73f6 <_ZN5Print5printERK6String>
    7454:	8c 01       	movw	r16, r24
    7456:	ce 01       	movw	r24, r28
    7458:	e4 df       	rcall	.-56     	; 0x7422 <_ZN5Print7printlnEv>
    745a:	80 0f       	add	r24, r16
    745c:	91 1f       	adc	r25, r17
    745e:	df 91       	pop	r29
    7460:	cf 91       	pop	r28
    7462:	1f 91       	pop	r17
    7464:	0f 91       	pop	r16
    7466:	08 95       	ret

00007468 <_ZN5Print7printlnEPKc>:
    7468:	0f 93       	push	r16
    746a:	1f 93       	push	r17
    746c:	cf 93       	push	r28
    746e:	df 93       	push	r29
    7470:	ec 01       	movw	r28, r24
    7472:	88 df       	rcall	.-240    	; 0x7384 <_ZN5Print5writeEPKc>
    7474:	8c 01       	movw	r16, r24
    7476:	ce 01       	movw	r24, r28
    7478:	d4 df       	rcall	.-88     	; 0x7422 <_ZN5Print7printlnEv>
    747a:	80 0f       	add	r24, r16
    747c:	91 1f       	adc	r25, r17
    747e:	df 91       	pop	r29
    7480:	cf 91       	pop	r28
    7482:	1f 91       	pop	r17
    7484:	0f 91       	pop	r16
    7486:	08 95       	ret

00007488 <_ZN5Print11printNumberEmh>:
    7488:	8f 92       	push	r8
    748a:	9f 92       	push	r9
    748c:	af 92       	push	r10
    748e:	bf 92       	push	r11
    7490:	ef 92       	push	r14
    7492:	ff 92       	push	r15
    7494:	0f 93       	push	r16
    7496:	1f 93       	push	r17
    7498:	cf 93       	push	r28
    749a:	df 93       	push	r29
    749c:	cd b7       	in	r28, 0x3d	; 61
    749e:	de b7       	in	r29, 0x3e	; 62
    74a0:	a1 97       	sbiw	r28, 0x21	; 33
    74a2:	0f b6       	in	r0, 0x3f	; 63
    74a4:	f8 94       	cli
    74a6:	de bf       	out	0x3e, r29	; 62
    74a8:	0f be       	out	0x3f, r0	; 63
    74aa:	cd bf       	out	0x3d, r28	; 61
    74ac:	7c 01       	movw	r14, r24
    74ae:	fa 01       	movw	r30, r20
    74b0:	cb 01       	movw	r24, r22
    74b2:	19 a2       	std	Y+33, r1	; 0x21
    74b4:	22 30       	cpi	r18, 0x02	; 2
    74b6:	08 f4       	brcc	.+2      	; 0x74ba <_ZN5Print11printNumberEmh+0x32>
    74b8:	2a e0       	ldi	r18, 0x0A	; 10
    74ba:	8e 01       	movw	r16, r28
    74bc:	0f 5d       	subi	r16, 0xDF	; 223
    74be:	1f 4f       	sbci	r17, 0xFF	; 255
    74c0:	82 2e       	mov	r8, r18
    74c2:	91 2c       	mov	r9, r1
    74c4:	a1 2c       	mov	r10, r1
    74c6:	b1 2c       	mov	r11, r1
    74c8:	bf 01       	movw	r22, r30
    74ca:	a5 01       	movw	r20, r10
    74cc:	94 01       	movw	r18, r8
    74ce:	d4 d5       	rcall	.+2984   	; 0x8078 <__udivmodsi4>
    74d0:	f9 01       	movw	r30, r18
    74d2:	ca 01       	movw	r24, r20
    74d4:	01 50       	subi	r16, 0x01	; 1
    74d6:	11 09       	sbc	r17, r1
    74d8:	6a 30       	cpi	r22, 0x0A	; 10
    74da:	10 f4       	brcc	.+4      	; 0x74e0 <_ZN5Print11printNumberEmh+0x58>
    74dc:	60 5d       	subi	r22, 0xD0	; 208
    74de:	01 c0       	rjmp	.+2      	; 0x74e2 <_ZN5Print11printNumberEmh+0x5a>
    74e0:	69 5c       	subi	r22, 0xC9	; 201
    74e2:	d8 01       	movw	r26, r16
    74e4:	6c 93       	st	X, r22
    74e6:	23 2b       	or	r18, r19
    74e8:	24 2b       	or	r18, r20
    74ea:	25 2b       	or	r18, r21
    74ec:	69 f7       	brne	.-38     	; 0x74c8 <_ZN5Print11printNumberEmh+0x40>
    74ee:	b8 01       	movw	r22, r16
    74f0:	c7 01       	movw	r24, r14
    74f2:	48 df       	rcall	.-368    	; 0x7384 <_ZN5Print5writeEPKc>
    74f4:	a1 96       	adiw	r28, 0x21	; 33
    74f6:	0f b6       	in	r0, 0x3f	; 63
    74f8:	f8 94       	cli
    74fa:	de bf       	out	0x3e, r29	; 62
    74fc:	0f be       	out	0x3f, r0	; 63
    74fe:	cd bf       	out	0x3d, r28	; 61
    7500:	df 91       	pop	r29
    7502:	cf 91       	pop	r28
    7504:	1f 91       	pop	r17
    7506:	0f 91       	pop	r16
    7508:	ff 90       	pop	r15
    750a:	ef 90       	pop	r14
    750c:	bf 90       	pop	r11
    750e:	af 90       	pop	r10
    7510:	9f 90       	pop	r9
    7512:	8f 90       	pop	r8
    7514:	08 95       	ret

00007516 <_ZN5Print5printEmi>:
    7516:	21 15       	cp	r18, r1
    7518:	31 05       	cpc	r19, r1
    751a:	41 f4       	brne	.+16     	; 0x752c <_ZN5Print5printEmi+0x16>
    751c:	dc 01       	movw	r26, r24
    751e:	ed 91       	ld	r30, X+
    7520:	fc 91       	ld	r31, X
    7522:	01 90       	ld	r0, Z+
    7524:	f0 81       	ld	r31, Z
    7526:	e0 2d       	mov	r30, r0
    7528:	64 2f       	mov	r22, r20
    752a:	09 94       	ijmp
    752c:	ad cf       	rjmp	.-166    	; 0x7488 <_ZN5Print11printNumberEmh>

0000752e <_ZN5Print5printEhi>:
    752e:	9a 01       	movw	r18, r20
    7530:	46 2f       	mov	r20, r22
    7532:	50 e0       	ldi	r21, 0x00	; 0
    7534:	60 e0       	ldi	r22, 0x00	; 0
    7536:	70 e0       	ldi	r23, 0x00	; 0
    7538:	ee cf       	rjmp	.-36     	; 0x7516 <_ZN5Print5printEmi>

0000753a <_ZN5Print7printlnEhi>:
    753a:	0f 93       	push	r16
    753c:	1f 93       	push	r17
    753e:	cf 93       	push	r28
    7540:	df 93       	push	r29
    7542:	ec 01       	movw	r28, r24
    7544:	f4 df       	rcall	.-24     	; 0x752e <_ZN5Print5printEhi>
    7546:	8c 01       	movw	r16, r24
    7548:	ce 01       	movw	r24, r28
    754a:	6b df       	rcall	.-298    	; 0x7422 <_ZN5Print7printlnEv>
    754c:	80 0f       	add	r24, r16
    754e:	91 1f       	adc	r25, r17
    7550:	df 91       	pop	r29
    7552:	cf 91       	pop	r28
    7554:	1f 91       	pop	r17
    7556:	0f 91       	pop	r16
    7558:	08 95       	ret

0000755a <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    755a:	0f 93       	push	r16
    755c:	1f 93       	push	r17
    755e:	cf 93       	push	r28
    7560:	df 93       	push	r29
    7562:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    7564:	d8 df       	rcall	.-80     	; 0x7516 <_ZN5Print5printEmi>
    7566:	8c 01       	movw	r16, r24
  n += println();
    7568:	ce 01       	movw	r24, r28
    756a:	5b df       	rcall	.-330    	; 0x7422 <_ZN5Print7printlnEv>
  return n;
}
    756c:	80 0f       	add	r24, r16
    756e:	91 1f       	adc	r25, r17
    7570:	df 91       	pop	r29
    7572:	cf 91       	pop	r28
    7574:	1f 91       	pop	r17
    7576:	0f 91       	pop	r16
    7578:	08 95       	ret

0000757a <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    757a:	1f 92       	push	r1
    757c:	0f 92       	push	r0
    757e:	0f b6       	in	r0, 0x3f	; 63
    7580:	0f 92       	push	r0
    7582:	11 24       	eor	r1, r1
    7584:	2f 93       	push	r18
    7586:	3f 93       	push	r19
    7588:	8f 93       	push	r24
    758a:	9f 93       	push	r25
    758c:	af 93       	push	r26
    758e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    7590:	80 91 fb 0e 	lds	r24, 0x0EFB	; 0x800efb <timer0_millis>
    7594:	90 91 fc 0e 	lds	r25, 0x0EFC	; 0x800efc <timer0_millis+0x1>
    7598:	a0 91 fd 0e 	lds	r26, 0x0EFD	; 0x800efd <timer0_millis+0x2>
    759c:	b0 91 fe 0e 	lds	r27, 0x0EFE	; 0x800efe <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    75a0:	30 91 fa 0e 	lds	r19, 0x0EFA	; 0x800efa <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    75a4:	23 e0       	ldi	r18, 0x03	; 3
    75a6:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    75a8:	2d 37       	cpi	r18, 0x7D	; 125
    75aa:	20 f4       	brcc	.+8      	; 0x75b4 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    75ac:	01 96       	adiw	r24, 0x01	; 1
    75ae:	a1 1d       	adc	r26, r1
    75b0:	b1 1d       	adc	r27, r1
    75b2:	05 c0       	rjmp	.+10     	; 0x75be <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    75b4:	26 e8       	ldi	r18, 0x86	; 134
    75b6:	23 0f       	add	r18, r19
		m += 1;
    75b8:	02 96       	adiw	r24, 0x02	; 2
    75ba:	a1 1d       	adc	r26, r1
    75bc:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    75be:	20 93 fa 0e 	sts	0x0EFA, r18	; 0x800efa <timer0_fract>
	timer0_millis = m;
    75c2:	80 93 fb 0e 	sts	0x0EFB, r24	; 0x800efb <timer0_millis>
    75c6:	90 93 fc 0e 	sts	0x0EFC, r25	; 0x800efc <timer0_millis+0x1>
    75ca:	a0 93 fd 0e 	sts	0x0EFD, r26	; 0x800efd <timer0_millis+0x2>
    75ce:	b0 93 fe 0e 	sts	0x0EFE, r27	; 0x800efe <timer0_millis+0x3>
	timer0_overflow_count++;
    75d2:	80 91 ff 0e 	lds	r24, 0x0EFF	; 0x800eff <timer0_overflow_count>
    75d6:	90 91 00 0f 	lds	r25, 0x0F00	; 0x800f00 <timer0_overflow_count+0x1>
    75da:	a0 91 01 0f 	lds	r26, 0x0F01	; 0x800f01 <timer0_overflow_count+0x2>
    75de:	b0 91 02 0f 	lds	r27, 0x0F02	; 0x800f02 <timer0_overflow_count+0x3>
    75e2:	01 96       	adiw	r24, 0x01	; 1
    75e4:	a1 1d       	adc	r26, r1
    75e6:	b1 1d       	adc	r27, r1
    75e8:	80 93 ff 0e 	sts	0x0EFF, r24	; 0x800eff <timer0_overflow_count>
    75ec:	90 93 00 0f 	sts	0x0F00, r25	; 0x800f00 <timer0_overflow_count+0x1>
    75f0:	a0 93 01 0f 	sts	0x0F01, r26	; 0x800f01 <timer0_overflow_count+0x2>
    75f4:	b0 93 02 0f 	sts	0x0F02, r27	; 0x800f02 <timer0_overflow_count+0x3>
}
    75f8:	bf 91       	pop	r27
    75fa:	af 91       	pop	r26
    75fc:	9f 91       	pop	r25
    75fe:	8f 91       	pop	r24
    7600:	3f 91       	pop	r19
    7602:	2f 91       	pop	r18
    7604:	0f 90       	pop	r0
    7606:	0f be       	out	0x3f, r0	; 63
    7608:	0f 90       	pop	r0
    760a:	1f 90       	pop	r1
    760c:	18 95       	reti

0000760e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    760e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    7610:	f8 94       	cli
	m = timer0_millis;
    7612:	60 91 fb 0e 	lds	r22, 0x0EFB	; 0x800efb <timer0_millis>
    7616:	70 91 fc 0e 	lds	r23, 0x0EFC	; 0x800efc <timer0_millis+0x1>
    761a:	80 91 fd 0e 	lds	r24, 0x0EFD	; 0x800efd <timer0_millis+0x2>
    761e:	90 91 fe 0e 	lds	r25, 0x0EFE	; 0x800efe <timer0_millis+0x3>
	SREG = oldSREG;
    7622:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    7624:	08 95       	ret

00007626 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    7626:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    7628:	f8 94       	cli
	m = timer0_overflow_count;
    762a:	80 91 ff 0e 	lds	r24, 0x0EFF	; 0x800eff <timer0_overflow_count>
    762e:	90 91 00 0f 	lds	r25, 0x0F00	; 0x800f00 <timer0_overflow_count+0x1>
    7632:	a0 91 01 0f 	lds	r26, 0x0F01	; 0x800f01 <timer0_overflow_count+0x2>
    7636:	b0 91 02 0f 	lds	r27, 0x0F02	; 0x800f02 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    763a:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    763c:	a8 9b       	sbis	0x15, 0	; 21
    763e:	05 c0       	rjmp	.+10     	; 0x764a <micros+0x24>
    7640:	2f 3f       	cpi	r18, 0xFF	; 255
    7642:	19 f0       	breq	.+6      	; 0x764a <micros+0x24>
		m++;
    7644:	01 96       	adiw	r24, 0x01	; 1
    7646:	a1 1d       	adc	r26, r1
    7648:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    764a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    764c:	ba 2f       	mov	r27, r26
    764e:	a9 2f       	mov	r26, r25
    7650:	98 2f       	mov	r25, r24
    7652:	88 27       	eor	r24, r24
    7654:	82 0f       	add	r24, r18
    7656:	91 1d       	adc	r25, r1
    7658:	a1 1d       	adc	r26, r1
    765a:	b1 1d       	adc	r27, r1
    765c:	bc 01       	movw	r22, r24
    765e:	cd 01       	movw	r24, r26
    7660:	42 e0       	ldi	r20, 0x02	; 2
    7662:	66 0f       	add	r22, r22
    7664:	77 1f       	adc	r23, r23
    7666:	88 1f       	adc	r24, r24
    7668:	99 1f       	adc	r25, r25
    766a:	4a 95       	dec	r20
    766c:	d1 f7       	brne	.-12     	; 0x7662 <micros+0x3c>
}
    766e:	08 95       	ret

00007670 <delay>:

void delay(unsigned long ms)
{
    7670:	8f 92       	push	r8
    7672:	9f 92       	push	r9
    7674:	af 92       	push	r10
    7676:	bf 92       	push	r11
    7678:	cf 92       	push	r12
    767a:	df 92       	push	r13
    767c:	ef 92       	push	r14
    767e:	ff 92       	push	r15
    7680:	6b 01       	movw	r12, r22
    7682:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    7684:	d0 df       	rcall	.-96     	; 0x7626 <micros>
    7686:	4b 01       	movw	r8, r22
    7688:	5c 01       	movw	r10, r24

	while (ms > 0) {
    768a:	c1 14       	cp	r12, r1
    768c:	d1 04       	cpc	r13, r1
    768e:	e1 04       	cpc	r14, r1
    7690:	f1 04       	cpc	r15, r1
		yield();
    7692:	f1 f0       	breq	.+60     	; 0x76d0 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    7694:	d0 d4       	rcall	.+2464   	; 0x8036 <yield>
    7696:	c7 df       	rcall	.-114    	; 0x7626 <micros>
    7698:	dc 01       	movw	r26, r24
    769a:	cb 01       	movw	r24, r22
    769c:	88 19       	sub	r24, r8
    769e:	99 09       	sbc	r25, r9
    76a0:	aa 09       	sbc	r26, r10
    76a2:	bb 09       	sbc	r27, r11
    76a4:	88 3e       	cpi	r24, 0xE8	; 232
    76a6:	93 40       	sbci	r25, 0x03	; 3
    76a8:	a1 05       	cpc	r26, r1
    76aa:	b1 05       	cpc	r27, r1
    76ac:	70 f3       	brcs	.-36     	; 0x768a <delay+0x1a>
			ms--;
    76ae:	21 e0       	ldi	r18, 0x01	; 1
    76b0:	c2 1a       	sub	r12, r18
    76b2:	d1 08       	sbc	r13, r1
    76b4:	e1 08       	sbc	r14, r1
    76b6:	f1 08       	sbc	r15, r1
			start += 1000;
    76b8:	88 ee       	ldi	r24, 0xE8	; 232
    76ba:	88 0e       	add	r8, r24
    76bc:	83 e0       	ldi	r24, 0x03	; 3
    76be:	98 1e       	adc	r9, r24
    76c0:	a1 1c       	adc	r10, r1
    76c2:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    76c4:	c1 14       	cp	r12, r1
    76c6:	d1 04       	cpc	r13, r1
    76c8:	e1 04       	cpc	r14, r1
    76ca:	f1 04       	cpc	r15, r1
    76cc:	21 f7       	brne	.-56     	; 0x7696 <delay+0x26>
    76ce:	dd cf       	rjmp	.-70     	; 0x768a <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    76d0:	ff 90       	pop	r15
    76d2:	ef 90       	pop	r14
    76d4:	df 90       	pop	r13
    76d6:	cf 90       	pop	r12
    76d8:	bf 90       	pop	r11
    76da:	af 90       	pop	r10
    76dc:	9f 90       	pop	r9
    76de:	8f 90       	pop	r8
    76e0:	08 95       	ret

000076e2 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    76e2:	82 30       	cpi	r24, 0x02	; 2
    76e4:	91 05       	cpc	r25, r1
    76e6:	38 f0       	brcs	.+14     	; 0x76f6 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    76e8:	88 0f       	add	r24, r24
    76ea:	99 1f       	adc	r25, r25
    76ec:	88 0f       	add	r24, r24
    76ee:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    76f0:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    76f2:	01 97       	sbiw	r24, 0x01	; 1
    76f4:	f1 f7       	brne	.-4      	; 0x76f2 <delayMicroseconds+0x10>
    76f6:	08 95       	ret

000076f8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    76f8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    76fa:	84 b5       	in	r24, 0x24	; 36
    76fc:	82 60       	ori	r24, 0x02	; 2
    76fe:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    7700:	84 b5       	in	r24, 0x24	; 36
    7702:	81 60       	ori	r24, 0x01	; 1
    7704:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    7706:	85 b5       	in	r24, 0x25	; 37
    7708:	82 60       	ori	r24, 0x02	; 2
    770a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    770c:	85 b5       	in	r24, 0x25	; 37
    770e:	81 60       	ori	r24, 0x01	; 1
    7710:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    7712:	ee e6       	ldi	r30, 0x6E	; 110
    7714:	f0 e0       	ldi	r31, 0x00	; 0
    7716:	80 81       	ld	r24, Z
    7718:	81 60       	ori	r24, 0x01	; 1
    771a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    771c:	e1 e8       	ldi	r30, 0x81	; 129
    771e:	f0 e0       	ldi	r31, 0x00	; 0
    7720:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    7722:	80 81       	ld	r24, Z
    7724:	82 60       	ori	r24, 0x02	; 2
    7726:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    7728:	80 81       	ld	r24, Z
    772a:	81 60       	ori	r24, 0x01	; 1
    772c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    772e:	e0 e8       	ldi	r30, 0x80	; 128
    7730:	f0 e0       	ldi	r31, 0x00	; 0
    7732:	80 81       	ld	r24, Z
    7734:	81 60       	ori	r24, 0x01	; 1
    7736:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    7738:	e1 eb       	ldi	r30, 0xB1	; 177
    773a:	f0 e0       	ldi	r31, 0x00	; 0
    773c:	80 81       	ld	r24, Z
    773e:	84 60       	ori	r24, 0x04	; 4
    7740:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    7742:	e0 eb       	ldi	r30, 0xB0	; 176
    7744:	f0 e0       	ldi	r31, 0x00	; 0
    7746:	80 81       	ld	r24, Z
    7748:	81 60       	ori	r24, 0x01	; 1
    774a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    774c:	ea e7       	ldi	r30, 0x7A	; 122
    774e:	f0 e0       	ldi	r31, 0x00	; 0
    7750:	80 81       	ld	r24, Z
    7752:	84 60       	ori	r24, 0x04	; 4
    7754:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    7756:	80 81       	ld	r24, Z
    7758:	82 60       	ori	r24, 0x02	; 2
    775a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    775c:	80 81       	ld	r24, Z
    775e:	81 60       	ori	r24, 0x01	; 1
    7760:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    7762:	80 81       	ld	r24, Z
    7764:	80 68       	ori	r24, 0x80	; 128
    7766:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    7768:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    776c:	08 95       	ret

0000776e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    776e:	83 30       	cpi	r24, 0x03	; 3
    7770:	81 f0       	breq	.+32     	; 0x7792 <turnOffPWM+0x24>
    7772:	28 f4       	brcc	.+10     	; 0x777e <turnOffPWM+0x10>
    7774:	81 30       	cpi	r24, 0x01	; 1
    7776:	99 f0       	breq	.+38     	; 0x779e <turnOffPWM+0x30>
    7778:	82 30       	cpi	r24, 0x02	; 2
    777a:	a1 f0       	breq	.+40     	; 0x77a4 <turnOffPWM+0x36>
    777c:	08 95       	ret
    777e:	87 30       	cpi	r24, 0x07	; 7
    7780:	a9 f0       	breq	.+42     	; 0x77ac <turnOffPWM+0x3e>
    7782:	88 30       	cpi	r24, 0x08	; 8
    7784:	b9 f0       	breq	.+46     	; 0x77b4 <turnOffPWM+0x46>
    7786:	84 30       	cpi	r24, 0x04	; 4
    7788:	d1 f4       	brne	.+52     	; 0x77be <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    778a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    778e:	8f 7d       	andi	r24, 0xDF	; 223
    7790:	03 c0       	rjmp	.+6      	; 0x7798 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    7792:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    7796:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    7798:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    779c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    779e:	84 b5       	in	r24, 0x24	; 36
    77a0:	8f 77       	andi	r24, 0x7F	; 127
    77a2:	02 c0       	rjmp	.+4      	; 0x77a8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    77a4:	84 b5       	in	r24, 0x24	; 36
    77a6:	8f 7d       	andi	r24, 0xDF	; 223
    77a8:	84 bd       	out	0x24, r24	; 36
    77aa:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    77ac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    77b0:	8f 77       	andi	r24, 0x7F	; 127
    77b2:	03 c0       	rjmp	.+6      	; 0x77ba <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    77b4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    77b8:	8f 7d       	andi	r24, 0xDF	; 223
    77ba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    77be:	08 95       	ret

000077c0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    77c0:	cf 93       	push	r28
    77c2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    77c4:	90 e0       	ldi	r25, 0x00	; 0
    77c6:	fc 01       	movw	r30, r24
    77c8:	e8 5a       	subi	r30, 0xA8	; 168
    77ca:	fd 4f       	sbci	r31, 0xFD	; 253
    77cc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    77ce:	fc 01       	movw	r30, r24
    77d0:	e8 58       	subi	r30, 0x88	; 136
    77d2:	fd 4f       	sbci	r31, 0xFD	; 253
    77d4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    77d6:	88 23       	and	r24, r24
    77d8:	61 f1       	breq	.+88     	; 0x7832 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    77da:	90 e0       	ldi	r25, 0x00	; 0
    77dc:	88 0f       	add	r24, r24
    77de:	99 1f       	adc	r25, r25
    77e0:	fc 01       	movw	r30, r24
    77e2:	e4 55       	subi	r30, 0x54	; 84
    77e4:	fd 4f       	sbci	r31, 0xFD	; 253
    77e6:	c5 91       	lpm	r28, Z+
    77e8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    77ea:	fc 01       	movw	r30, r24
    77ec:	ee 55       	subi	r30, 0x5E	; 94
    77ee:	fd 4f       	sbci	r31, 0xFD	; 253
    77f0:	a5 91       	lpm	r26, Z+
    77f2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    77f4:	61 11       	cpse	r22, r1
    77f6:	09 c0       	rjmp	.+18     	; 0x780a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    77f8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    77fa:	f8 94       	cli
		*reg &= ~bit;
    77fc:	88 81       	ld	r24, Y
    77fe:	20 95       	com	r18
    7800:	82 23       	and	r24, r18
    7802:	88 83       	st	Y, r24
		*out &= ~bit;
    7804:	ec 91       	ld	r30, X
    7806:	2e 23       	and	r18, r30
    7808:	0b c0       	rjmp	.+22     	; 0x7820 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    780a:	62 30       	cpi	r22, 0x02	; 2
    780c:	61 f4       	brne	.+24     	; 0x7826 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    780e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    7810:	f8 94       	cli
		*reg &= ~bit;
    7812:	88 81       	ld	r24, Y
    7814:	32 2f       	mov	r19, r18
    7816:	30 95       	com	r19
    7818:	83 23       	and	r24, r19
    781a:	88 83       	st	Y, r24
		*out |= bit;
    781c:	ec 91       	ld	r30, X
    781e:	2e 2b       	or	r18, r30
    7820:	2c 93       	st	X, r18
		SREG = oldSREG;
    7822:	9f bf       	out	0x3f, r25	; 63
    7824:	06 c0       	rjmp	.+12     	; 0x7832 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    7826:	8f b7       	in	r24, 0x3f	; 63
                cli();
    7828:	f8 94       	cli
		*reg |= bit;
    782a:	e8 81       	ld	r30, Y
    782c:	2e 2b       	or	r18, r30
    782e:	28 83       	st	Y, r18
		SREG = oldSREG;
    7830:	8f bf       	out	0x3f, r24	; 63
	}
}
    7832:	df 91       	pop	r29
    7834:	cf 91       	pop	r28
    7836:	08 95       	ret

00007838 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    7838:	1f 93       	push	r17
    783a:	cf 93       	push	r28
    783c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    783e:	28 2f       	mov	r18, r24
    7840:	30 e0       	ldi	r19, 0x00	; 0
    7842:	f9 01       	movw	r30, r18
    7844:	e8 5c       	subi	r30, 0xC8	; 200
    7846:	fd 4f       	sbci	r31, 0xFD	; 253
    7848:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    784a:	f9 01       	movw	r30, r18
    784c:	e8 5a       	subi	r30, 0xA8	; 168
    784e:	fd 4f       	sbci	r31, 0xFD	; 253
    7850:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    7852:	f9 01       	movw	r30, r18
    7854:	e8 58       	subi	r30, 0x88	; 136
    7856:	fd 4f       	sbci	r31, 0xFD	; 253
    7858:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    785a:	cc 23       	and	r28, r28
    785c:	b9 f0       	breq	.+46     	; 0x788c <digitalWrite+0x54>
    785e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7860:	81 11       	cpse	r24, r1
    7862:	85 df       	rcall	.-246    	; 0x776e <turnOffPWM>

	out = portOutputRegister(port);
    7864:	ec 2f       	mov	r30, r28
    7866:	f0 e0       	ldi	r31, 0x00	; 0
    7868:	ee 0f       	add	r30, r30
    786a:	ff 1f       	adc	r31, r31
    786c:	ee 55       	subi	r30, 0x5E	; 94
    786e:	fd 4f       	sbci	r31, 0xFD	; 253
    7870:	a5 91       	lpm	r26, Z+
    7872:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    7874:	9f b7       	in	r25, 0x3f	; 63
	cli();
    7876:	f8 94       	cli

	if (val == LOW) {
    7878:	11 11       	cpse	r17, r1
    787a:	04 c0       	rjmp	.+8      	; 0x7884 <digitalWrite+0x4c>
		*out &= ~bit;
    787c:	8c 91       	ld	r24, X
    787e:	d0 95       	com	r29
    7880:	d8 23       	and	r29, r24
    7882:	02 c0       	rjmp	.+4      	; 0x7888 <digitalWrite+0x50>
	} else {
		*out |= bit;
    7884:	ec 91       	ld	r30, X
    7886:	de 2b       	or	r29, r30
    7888:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    788a:	9f bf       	out	0x3f, r25	; 63
}
    788c:	df 91       	pop	r29
    788e:	cf 91       	pop	r28
    7890:	1f 91       	pop	r17
    7892:	08 95       	ret

00007894 <digitalRead>:

int digitalRead(uint8_t pin)
{
    7894:	cf 93       	push	r28
    7896:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    7898:	28 2f       	mov	r18, r24
    789a:	30 e0       	ldi	r19, 0x00	; 0
    789c:	f9 01       	movw	r30, r18
    789e:	e8 5c       	subi	r30, 0xC8	; 200
    78a0:	fd 4f       	sbci	r31, 0xFD	; 253
    78a2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    78a4:	f9 01       	movw	r30, r18
    78a6:	e8 5a       	subi	r30, 0xA8	; 168
    78a8:	fd 4f       	sbci	r31, 0xFD	; 253
    78aa:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    78ac:	f9 01       	movw	r30, r18
    78ae:	e8 58       	subi	r30, 0x88	; 136
    78b0:	fd 4f       	sbci	r31, 0xFD	; 253
    78b2:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    78b4:	cc 23       	and	r28, r28
    78b6:	89 f0       	breq	.+34     	; 0x78da <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    78b8:	81 11       	cpse	r24, r1
    78ba:	59 df       	rcall	.-334    	; 0x776e <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    78bc:	ec 2f       	mov	r30, r28
    78be:	f0 e0       	ldi	r31, 0x00	; 0
    78c0:	ee 0f       	add	r30, r30
    78c2:	ff 1f       	adc	r31, r31
    78c4:	e8 56       	subi	r30, 0x68	; 104
    78c6:	fd 4f       	sbci	r31, 0xFD	; 253
    78c8:	a5 91       	lpm	r26, Z+
    78ca:	b4 91       	lpm	r27, Z
    78cc:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    78ce:	ed 23       	and	r30, r29
    78d0:	81 e0       	ldi	r24, 0x01	; 1
    78d2:	90 e0       	ldi	r25, 0x00	; 0
    78d4:	21 f4       	brne	.+8      	; 0x78de <digitalRead+0x4a>
    78d6:	80 e0       	ldi	r24, 0x00	; 0
    78d8:	02 c0       	rjmp	.+4      	; 0x78de <digitalRead+0x4a>
    78da:	80 e0       	ldi	r24, 0x00	; 0
    78dc:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    78de:	df 91       	pop	r29
    78e0:	cf 91       	pop	r28
    78e2:	08 95       	ret

000078e4 <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    78e4:	08 95       	ret

000078e6 <_ZN6StringD1Ev>:
    78e6:	fc 01       	movw	r30, r24
    78e8:	80 81       	ld	r24, Z
    78ea:	91 81       	ldd	r25, Z+1	; 0x01
    78ec:	dc c5       	rjmp	.+3000   	; 0x84a6 <free>

000078ee <_ZN6String10invalidateEv>:
    78ee:	cf 93       	push	r28
    78f0:	df 93       	push	r29
    78f2:	ec 01       	movw	r28, r24
    78f4:	88 81       	ld	r24, Y
    78f6:	99 81       	ldd	r25, Y+1	; 0x01
    78f8:	00 97       	sbiw	r24, 0x00	; 0
    78fa:	09 f0       	breq	.+2      	; 0x78fe <_ZN6String10invalidateEv+0x10>
    78fc:	d4 d5       	rcall	.+2984   	; 0x84a6 <free>
    78fe:	19 82       	std	Y+1, r1	; 0x01
    7900:	18 82       	st	Y, r1
    7902:	1d 82       	std	Y+5, r1	; 0x05
    7904:	1c 82       	std	Y+4, r1	; 0x04
    7906:	1b 82       	std	Y+3, r1	; 0x03
    7908:	1a 82       	std	Y+2, r1	; 0x02
    790a:	df 91       	pop	r29
    790c:	cf 91       	pop	r28
    790e:	08 95       	ret

00007910 <_ZN6String12changeBufferEj>:
    7910:	0f 93       	push	r16
    7912:	1f 93       	push	r17
    7914:	cf 93       	push	r28
    7916:	df 93       	push	r29
    7918:	ec 01       	movw	r28, r24
    791a:	8b 01       	movw	r16, r22
    791c:	6f 5f       	subi	r22, 0xFF	; 255
    791e:	7f 4f       	sbci	r23, 0xFF	; 255
    7920:	88 81       	ld	r24, Y
    7922:	99 81       	ldd	r25, Y+1	; 0x01
    7924:	49 d6       	rcall	.+3218   	; 0x85b8 <realloc>
    7926:	00 97       	sbiw	r24, 0x00	; 0
    7928:	31 f0       	breq	.+12     	; 0x7936 <_ZN6String12changeBufferEj+0x26>
    792a:	99 83       	std	Y+1, r25	; 0x01
    792c:	88 83       	st	Y, r24
    792e:	1b 83       	std	Y+3, r17	; 0x03
    7930:	0a 83       	std	Y+2, r16	; 0x02
    7932:	81 e0       	ldi	r24, 0x01	; 1
    7934:	01 c0       	rjmp	.+2      	; 0x7938 <_ZN6String12changeBufferEj+0x28>
    7936:	80 e0       	ldi	r24, 0x00	; 0
    7938:	df 91       	pop	r29
    793a:	cf 91       	pop	r28
    793c:	1f 91       	pop	r17
    793e:	0f 91       	pop	r16
    7940:	08 95       	ret

00007942 <_ZN6String7reserveEj>:
    7942:	cf 93       	push	r28
    7944:	df 93       	push	r29
    7946:	ec 01       	movw	r28, r24
    7948:	88 81       	ld	r24, Y
    794a:	99 81       	ldd	r25, Y+1	; 0x01
    794c:	89 2b       	or	r24, r25
    794e:	29 f0       	breq	.+10     	; 0x795a <_ZN6String7reserveEj+0x18>
    7950:	8a 81       	ldd	r24, Y+2	; 0x02
    7952:	9b 81       	ldd	r25, Y+3	; 0x03
    7954:	86 17       	cp	r24, r22
    7956:	97 07       	cpc	r25, r23
    7958:	58 f4       	brcc	.+22     	; 0x7970 <_ZN6String7reserveEj+0x2e>
    795a:	ce 01       	movw	r24, r28
    795c:	d9 df       	rcall	.-78     	; 0x7910 <_ZN6String12changeBufferEj>
    795e:	88 23       	and	r24, r24
    7960:	41 f0       	breq	.+16     	; 0x7972 <_ZN6String7reserveEj+0x30>
    7962:	8c 81       	ldd	r24, Y+4	; 0x04
    7964:	9d 81       	ldd	r25, Y+5	; 0x05
    7966:	89 2b       	or	r24, r25
    7968:	19 f4       	brne	.+6      	; 0x7970 <_ZN6String7reserveEj+0x2e>
    796a:	e8 81       	ld	r30, Y
    796c:	f9 81       	ldd	r31, Y+1	; 0x01
    796e:	10 82       	st	Z, r1
    7970:	81 e0       	ldi	r24, 0x01	; 1
    7972:	df 91       	pop	r29
    7974:	cf 91       	pop	r28
    7976:	08 95       	ret

00007978 <_ZN6String4copyEPKcj>:
    7978:	ef 92       	push	r14
    797a:	ff 92       	push	r15
    797c:	0f 93       	push	r16
    797e:	1f 93       	push	r17
    7980:	cf 93       	push	r28
    7982:	df 93       	push	r29
    7984:	ec 01       	movw	r28, r24
    7986:	7b 01       	movw	r14, r22
    7988:	8a 01       	movw	r16, r20
    798a:	ba 01       	movw	r22, r20
    798c:	da df       	rcall	.-76     	; 0x7942 <_ZN6String7reserveEj>
    798e:	81 11       	cpse	r24, r1
    7990:	03 c0       	rjmp	.+6      	; 0x7998 <_ZN6String4copyEPKcj+0x20>
    7992:	ce 01       	movw	r24, r28
    7994:	ac df       	rcall	.-168    	; 0x78ee <_ZN6String10invalidateEv>
    7996:	06 c0       	rjmp	.+12     	; 0x79a4 <_ZN6String4copyEPKcj+0x2c>
    7998:	1d 83       	std	Y+5, r17	; 0x05
    799a:	0c 83       	std	Y+4, r16	; 0x04
    799c:	b7 01       	movw	r22, r14
    799e:	88 81       	ld	r24, Y
    79a0:	99 81       	ldd	r25, Y+1	; 0x01
    79a2:	11 d7       	rcall	.+3618   	; 0x87c6 <strcpy>
    79a4:	ce 01       	movw	r24, r28
    79a6:	df 91       	pop	r29
    79a8:	cf 91       	pop	r28
    79aa:	1f 91       	pop	r17
    79ac:	0f 91       	pop	r16
    79ae:	ff 90       	pop	r15
    79b0:	ef 90       	pop	r14
    79b2:	08 95       	ret

000079b4 <_ZN6StringC1EPKc>:
    79b4:	fc 01       	movw	r30, r24
    79b6:	11 82       	std	Z+1, r1	; 0x01
    79b8:	10 82       	st	Z, r1
    79ba:	13 82       	std	Z+3, r1	; 0x03
    79bc:	12 82       	std	Z+2, r1	; 0x02
    79be:	15 82       	std	Z+5, r1	; 0x05
    79c0:	14 82       	std	Z+4, r1	; 0x04
    79c2:	61 15       	cp	r22, r1
    79c4:	71 05       	cpc	r23, r1
    79c6:	49 f0       	breq	.+18     	; 0x79da <_ZN6StringC1EPKc+0x26>
    79c8:	fb 01       	movw	r30, r22
    79ca:	01 90       	ld	r0, Z+
    79cc:	00 20       	and	r0, r0
    79ce:	e9 f7       	brne	.-6      	; 0x79ca <_ZN6StringC1EPKc+0x16>
    79d0:	31 97       	sbiw	r30, 0x01	; 1
    79d2:	af 01       	movw	r20, r30
    79d4:	46 1b       	sub	r20, r22
    79d6:	57 0b       	sbc	r21, r23
    79d8:	cf cf       	rjmp	.-98     	; 0x7978 <_ZN6String4copyEPKcj>
    79da:	08 95       	ret

000079dc <_ZN6String4moveERS_>:
    79dc:	0f 93       	push	r16
    79de:	1f 93       	push	r17
    79e0:	cf 93       	push	r28
    79e2:	df 93       	push	r29
    79e4:	8c 01       	movw	r16, r24
    79e6:	eb 01       	movw	r28, r22
    79e8:	fc 01       	movw	r30, r24
    79ea:	80 81       	ld	r24, Z
    79ec:	91 81       	ldd	r25, Z+1	; 0x01
    79ee:	00 97       	sbiw	r24, 0x00	; 0
    79f0:	c1 f0       	breq	.+48     	; 0x7a22 <_ZN6String4moveERS_+0x46>
    79f2:	68 81       	ld	r22, Y
    79f4:	79 81       	ldd	r23, Y+1	; 0x01
    79f6:	61 15       	cp	r22, r1
    79f8:	71 05       	cpc	r23, r1
    79fa:	91 f0       	breq	.+36     	; 0x7a20 <_ZN6String4moveERS_+0x44>
    79fc:	22 e7       	ldi	r18, 0x72	; 114
    79fe:	3c e3       	ldi	r19, 0x3C	; 60
    7a00:	23 2b       	or	r18, r19
    7a02:	71 f0       	breq	.+28     	; 0x7a20 <_ZN6String4moveERS_+0x44>
    7a04:	42 81       	ldd	r20, Z+2	; 0x02
    7a06:	53 81       	ldd	r21, Z+3	; 0x03
    7a08:	2c 81       	ldd	r18, Y+4	; 0x04
    7a0a:	3d 81       	ldd	r19, Y+5	; 0x05
    7a0c:	42 17       	cp	r20, r18
    7a0e:	53 07       	cpc	r21, r19
    7a10:	38 f0       	brcs	.+14     	; 0x7a20 <_ZN6String4moveERS_+0x44>
    7a12:	d9 d6       	rcall	.+3506   	; 0x87c6 <strcpy>
    7a14:	8c 81       	ldd	r24, Y+4	; 0x04
    7a16:	9d 81       	ldd	r25, Y+5	; 0x05
    7a18:	f8 01       	movw	r30, r16
    7a1a:	95 83       	std	Z+5, r25	; 0x05
    7a1c:	84 83       	std	Z+4, r24	; 0x04
    7a1e:	12 c0       	rjmp	.+36     	; 0x7a44 <_ZN6String4moveERS_+0x68>
    7a20:	42 d5       	rcall	.+2692   	; 0x84a6 <free>
    7a22:	88 81       	ld	r24, Y
    7a24:	99 81       	ldd	r25, Y+1	; 0x01
    7a26:	f8 01       	movw	r30, r16
    7a28:	91 83       	std	Z+1, r25	; 0x01
    7a2a:	80 83       	st	Z, r24
    7a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    7a2e:	9b 81       	ldd	r25, Y+3	; 0x03
    7a30:	93 83       	std	Z+3, r25	; 0x03
    7a32:	82 83       	std	Z+2, r24	; 0x02
    7a34:	8c 81       	ldd	r24, Y+4	; 0x04
    7a36:	9d 81       	ldd	r25, Y+5	; 0x05
    7a38:	95 83       	std	Z+5, r25	; 0x05
    7a3a:	84 83       	std	Z+4, r24	; 0x04
    7a3c:	19 82       	std	Y+1, r1	; 0x01
    7a3e:	18 82       	st	Y, r1
    7a40:	1b 82       	std	Y+3, r1	; 0x03
    7a42:	1a 82       	std	Y+2, r1	; 0x02
    7a44:	1d 82       	std	Y+5, r1	; 0x05
    7a46:	1c 82       	std	Y+4, r1	; 0x04
    7a48:	df 91       	pop	r29
    7a4a:	cf 91       	pop	r28
    7a4c:	1f 91       	pop	r17
    7a4e:	0f 91       	pop	r16
    7a50:	08 95       	ret

00007a52 <_ZN6StringC1EOS_>:
    7a52:	fc 01       	movw	r30, r24
    7a54:	11 82       	std	Z+1, r1	; 0x01
    7a56:	10 82       	st	Z, r1
    7a58:	13 82       	std	Z+3, r1	; 0x03
    7a5a:	12 82       	std	Z+2, r1	; 0x02
    7a5c:	15 82       	std	Z+5, r1	; 0x05
    7a5e:	14 82       	std	Z+4, r1	; 0x04
    7a60:	bd cf       	rjmp	.-134    	; 0x79dc <_ZN6String4moveERS_>

00007a62 <_ZN6StringaSERKS_>:
    7a62:	cf 93       	push	r28
    7a64:	df 93       	push	r29
    7a66:	ec 01       	movw	r28, r24
    7a68:	fb 01       	movw	r30, r22
    7a6a:	86 17       	cp	r24, r22
    7a6c:	97 07       	cpc	r25, r23
    7a6e:	51 f0       	breq	.+20     	; 0x7a84 <_ZN6StringaSERKS_+0x22>
    7a70:	60 81       	ld	r22, Z
    7a72:	71 81       	ldd	r23, Z+1	; 0x01
    7a74:	61 15       	cp	r22, r1
    7a76:	71 05       	cpc	r23, r1
    7a78:	21 f0       	breq	.+8      	; 0x7a82 <_ZN6StringaSERKS_+0x20>
    7a7a:	44 81       	ldd	r20, Z+4	; 0x04
    7a7c:	55 81       	ldd	r21, Z+5	; 0x05
    7a7e:	7c df       	rcall	.-264    	; 0x7978 <_ZN6String4copyEPKcj>
    7a80:	01 c0       	rjmp	.+2      	; 0x7a84 <_ZN6StringaSERKS_+0x22>
    7a82:	35 df       	rcall	.-406    	; 0x78ee <_ZN6String10invalidateEv>
    7a84:	ce 01       	movw	r24, r28
    7a86:	df 91       	pop	r29
    7a88:	cf 91       	pop	r28
    7a8a:	08 95       	ret

00007a8c <_ZN6StringC1ERKS_>:
    7a8c:	fc 01       	movw	r30, r24
    7a8e:	11 82       	std	Z+1, r1	; 0x01
    7a90:	10 82       	st	Z, r1
    7a92:	13 82       	std	Z+3, r1	; 0x03
    7a94:	12 82       	std	Z+2, r1	; 0x02
    7a96:	15 82       	std	Z+5, r1	; 0x05
    7a98:	14 82       	std	Z+4, r1	; 0x04
    7a9a:	e3 cf       	rjmp	.-58     	; 0x7a62 <_ZN6StringaSERKS_>

00007a9c <_ZN6StringaSEOS_>:
    7a9c:	cf 93       	push	r28
    7a9e:	df 93       	push	r29
    7aa0:	ec 01       	movw	r28, r24
    7aa2:	86 17       	cp	r24, r22
    7aa4:	97 07       	cpc	r25, r23
    7aa6:	09 f0       	breq	.+2      	; 0x7aaa <_ZN6StringaSEOS_+0xe>
    7aa8:	99 df       	rcall	.-206    	; 0x79dc <_ZN6String4moveERS_>
    7aaa:	ce 01       	movw	r24, r28
    7aac:	df 91       	pop	r29
    7aae:	cf 91       	pop	r28
    7ab0:	08 95       	ret

00007ab2 <_ZN6StringaSEPKc>:
    7ab2:	cf 93       	push	r28
    7ab4:	df 93       	push	r29
    7ab6:	ec 01       	movw	r28, r24
    7ab8:	61 15       	cp	r22, r1
    7aba:	71 05       	cpc	r23, r1
    7abc:	51 f0       	breq	.+20     	; 0x7ad2 <_ZN6StringaSEPKc+0x20>
    7abe:	fb 01       	movw	r30, r22
    7ac0:	01 90       	ld	r0, Z+
    7ac2:	00 20       	and	r0, r0
    7ac4:	e9 f7       	brne	.-6      	; 0x7ac0 <_ZN6StringaSEPKc+0xe>
    7ac6:	31 97       	sbiw	r30, 0x01	; 1
    7ac8:	af 01       	movw	r20, r30
    7aca:	46 1b       	sub	r20, r22
    7acc:	57 0b       	sbc	r21, r23
    7ace:	54 df       	rcall	.-344    	; 0x7978 <_ZN6String4copyEPKcj>
    7ad0:	01 c0       	rjmp	.+2      	; 0x7ad4 <_ZN6StringaSEPKc+0x22>
    7ad2:	0d df       	rcall	.-486    	; 0x78ee <_ZN6String10invalidateEv>
    7ad4:	ce 01       	movw	r24, r28
    7ad6:	df 91       	pop	r29
    7ad8:	cf 91       	pop	r28
    7ada:	08 95       	ret

00007adc <_ZN6StringC1Ehh>:
    7adc:	0f 93       	push	r16
    7ade:	1f 93       	push	r17
    7ae0:	cf 93       	push	r28
    7ae2:	df 93       	push	r29
    7ae4:	cd b7       	in	r28, 0x3d	; 61
    7ae6:	de b7       	in	r29, 0x3e	; 62
    7ae8:	29 97       	sbiw	r28, 0x09	; 9
    7aea:	0f b6       	in	r0, 0x3f	; 63
    7aec:	f8 94       	cli
    7aee:	de bf       	out	0x3e, r29	; 62
    7af0:	0f be       	out	0x3f, r0	; 63
    7af2:	cd bf       	out	0x3d, r28	; 61
    7af4:	8c 01       	movw	r16, r24
    7af6:	86 2f       	mov	r24, r22
    7af8:	f8 01       	movw	r30, r16
    7afa:	11 82       	std	Z+1, r1	; 0x01
    7afc:	10 82       	st	Z, r1
    7afe:	13 82       	std	Z+3, r1	; 0x03
    7b00:	12 82       	std	Z+2, r1	; 0x02
    7b02:	15 82       	std	Z+5, r1	; 0x05
    7b04:	14 82       	std	Z+4, r1	; 0x04
    7b06:	50 e0       	ldi	r21, 0x00	; 0
    7b08:	be 01       	movw	r22, r28
    7b0a:	6f 5f       	subi	r22, 0xFF	; 255
    7b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    7b0e:	90 e0       	ldi	r25, 0x00	; 0
    7b10:	a9 d6       	rcall	.+3410   	; 0x8864 <utoa>
    7b12:	be 01       	movw	r22, r28
    7b14:	6f 5f       	subi	r22, 0xFF	; 255
    7b16:	7f 4f       	sbci	r23, 0xFF	; 255
    7b18:	c8 01       	movw	r24, r16
    7b1a:	cb df       	rcall	.-106    	; 0x7ab2 <_ZN6StringaSEPKc>
    7b1c:	29 96       	adiw	r28, 0x09	; 9
    7b1e:	0f b6       	in	r0, 0x3f	; 63
    7b20:	f8 94       	cli
    7b22:	de bf       	out	0x3e, r29	; 62
    7b24:	0f be       	out	0x3f, r0	; 63
    7b26:	cd bf       	out	0x3d, r28	; 61
    7b28:	df 91       	pop	r29
    7b2a:	cf 91       	pop	r28
    7b2c:	1f 91       	pop	r17
    7b2e:	0f 91       	pop	r16
    7b30:	08 95       	ret

00007b32 <_ZN6StringC1Emh>:
    7b32:	0f 93       	push	r16
    7b34:	1f 93       	push	r17
    7b36:	cf 93       	push	r28
    7b38:	df 93       	push	r29
    7b3a:	cd b7       	in	r28, 0x3d	; 61
    7b3c:	de b7       	in	r29, 0x3e	; 62
    7b3e:	a1 97       	sbiw	r28, 0x21	; 33
    7b40:	0f b6       	in	r0, 0x3f	; 63
    7b42:	f8 94       	cli
    7b44:	de bf       	out	0x3e, r29	; 62
    7b46:	0f be       	out	0x3f, r0	; 63
    7b48:	cd bf       	out	0x3d, r28	; 61
    7b4a:	8c 01       	movw	r16, r24
    7b4c:	cb 01       	movw	r24, r22
    7b4e:	ba 01       	movw	r22, r20
    7b50:	f8 01       	movw	r30, r16
    7b52:	11 82       	std	Z+1, r1	; 0x01
    7b54:	10 82       	st	Z, r1
    7b56:	13 82       	std	Z+3, r1	; 0x03
    7b58:	12 82       	std	Z+2, r1	; 0x02
    7b5a:	15 82       	std	Z+5, r1	; 0x05
    7b5c:	14 82       	std	Z+4, r1	; 0x04
    7b5e:	30 e0       	ldi	r19, 0x00	; 0
    7b60:	ae 01       	movw	r20, r28
    7b62:	4f 5f       	subi	r20, 0xFF	; 255
    7b64:	5f 4f       	sbci	r21, 0xFF	; 255
    7b66:	53 d6       	rcall	.+3238   	; 0x880e <ultoa>
    7b68:	be 01       	movw	r22, r28
    7b6a:	6f 5f       	subi	r22, 0xFF	; 255
    7b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    7b6e:	c8 01       	movw	r24, r16
    7b70:	a0 df       	rcall	.-192    	; 0x7ab2 <_ZN6StringaSEPKc>
    7b72:	a1 96       	adiw	r28, 0x21	; 33
    7b74:	0f b6       	in	r0, 0x3f	; 63
    7b76:	f8 94       	cli
    7b78:	de bf       	out	0x3e, r29	; 62
    7b7a:	0f be       	out	0x3f, r0	; 63
    7b7c:	cd bf       	out	0x3d, r28	; 61
    7b7e:	df 91       	pop	r29
    7b80:	cf 91       	pop	r28
    7b82:	1f 91       	pop	r17
    7b84:	0f 91       	pop	r16
    7b86:	08 95       	ret

00007b88 <_ZN6StringC1Edh>:
    7b88:	ef 92       	push	r14
    7b8a:	ff 92       	push	r15
    7b8c:	0f 93       	push	r16
    7b8e:	1f 93       	push	r17
    7b90:	cf 93       	push	r28
    7b92:	df 93       	push	r29
    7b94:	cd b7       	in	r28, 0x3d	; 61
    7b96:	de b7       	in	r29, 0x3e	; 62
    7b98:	a1 97       	sbiw	r28, 0x21	; 33
    7b9a:	0f b6       	in	r0, 0x3f	; 63
    7b9c:	f8 94       	cli
    7b9e:	de bf       	out	0x3e, r29	; 62
    7ba0:	0f be       	out	0x3f, r0	; 63
    7ba2:	cd bf       	out	0x3d, r28	; 61
    7ba4:	7c 01       	movw	r14, r24
    7ba6:	cb 01       	movw	r24, r22
    7ba8:	ba 01       	movw	r22, r20
    7baa:	f7 01       	movw	r30, r14
    7bac:	11 82       	std	Z+1, r1	; 0x01
    7bae:	10 82       	st	Z, r1
    7bb0:	13 82       	std	Z+3, r1	; 0x03
    7bb2:	12 82       	std	Z+2, r1	; 0x02
    7bb4:	15 82       	std	Z+5, r1	; 0x05
    7bb6:	14 82       	std	Z+4, r1	; 0x04
    7bb8:	42 e0       	ldi	r20, 0x02	; 2
    7bba:	42 0f       	add	r20, r18
    7bbc:	8e 01       	movw	r16, r28
    7bbe:	0f 5f       	subi	r16, 0xFF	; 255
    7bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    7bc2:	ba d3       	rcall	.+1908   	; 0x8338 <dtostrf>
    7bc4:	bc 01       	movw	r22, r24
    7bc6:	c7 01       	movw	r24, r14
    7bc8:	74 df       	rcall	.-280    	; 0x7ab2 <_ZN6StringaSEPKc>
    7bca:	a1 96       	adiw	r28, 0x21	; 33
    7bcc:	0f b6       	in	r0, 0x3f	; 63
    7bce:	f8 94       	cli
    7bd0:	de bf       	out	0x3e, r29	; 62
    7bd2:	0f be       	out	0x3f, r0	; 63
    7bd4:	cd bf       	out	0x3d, r28	; 61
    7bd6:	df 91       	pop	r29
    7bd8:	cf 91       	pop	r28
    7bda:	1f 91       	pop	r17
    7bdc:	0f 91       	pop	r16
    7bde:	ff 90       	pop	r15
    7be0:	ef 90       	pop	r14
    7be2:	08 95       	ret

00007be4 <_ZN6String6concatEPKcj>:
    7be4:	ef 92       	push	r14
    7be6:	ff 92       	push	r15
    7be8:	0f 93       	push	r16
    7bea:	1f 93       	push	r17
    7bec:	cf 93       	push	r28
    7bee:	df 93       	push	r29
    7bf0:	61 15       	cp	r22, r1
    7bf2:	71 05       	cpc	r23, r1
    7bf4:	11 f4       	brne	.+4      	; 0x7bfa <_ZN6String6concatEPKcj+0x16>
    7bf6:	80 e0       	ldi	r24, 0x00	; 0
    7bf8:	1a c0       	rjmp	.+52     	; 0x7c2e <_ZN6String6concatEPKcj+0x4a>
    7bfa:	41 15       	cp	r20, r1
    7bfc:	51 05       	cpc	r21, r1
    7bfe:	b1 f0       	breq	.+44     	; 0x7c2c <_ZN6String6concatEPKcj+0x48>
    7c00:	7b 01       	movw	r14, r22
    7c02:	ec 01       	movw	r28, r24
    7c04:	8c 81       	ldd	r24, Y+4	; 0x04
    7c06:	9d 81       	ldd	r25, Y+5	; 0x05
    7c08:	8a 01       	movw	r16, r20
    7c0a:	08 0f       	add	r16, r24
    7c0c:	19 1f       	adc	r17, r25
    7c0e:	b8 01       	movw	r22, r16
    7c10:	ce 01       	movw	r24, r28
    7c12:	97 de       	rcall	.-722    	; 0x7942 <_ZN6String7reserveEj>
    7c14:	88 23       	and	r24, r24
    7c16:	79 f3       	breq	.-34     	; 0x7bf6 <_ZN6String6concatEPKcj+0x12>
    7c18:	28 81       	ld	r18, Y
    7c1a:	39 81       	ldd	r19, Y+1	; 0x01
    7c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    7c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    7c20:	b7 01       	movw	r22, r14
    7c22:	82 0f       	add	r24, r18
    7c24:	93 1f       	adc	r25, r19
    7c26:	cf d5       	rcall	.+2974   	; 0x87c6 <strcpy>
    7c28:	1d 83       	std	Y+5, r17	; 0x05
    7c2a:	0c 83       	std	Y+4, r16	; 0x04
    7c2c:	81 e0       	ldi	r24, 0x01	; 1
    7c2e:	df 91       	pop	r29
    7c30:	cf 91       	pop	r28
    7c32:	1f 91       	pop	r17
    7c34:	0f 91       	pop	r16
    7c36:	ff 90       	pop	r15
    7c38:	ef 90       	pop	r14
    7c3a:	08 95       	ret

00007c3c <_ZN6String6concatERKS_>:
    7c3c:	fb 01       	movw	r30, r22
    7c3e:	44 81       	ldd	r20, Z+4	; 0x04
    7c40:	55 81       	ldd	r21, Z+5	; 0x05
    7c42:	60 81       	ld	r22, Z
    7c44:	71 81       	ldd	r23, Z+1	; 0x01
    7c46:	ce cf       	rjmp	.-100    	; 0x7be4 <_ZN6String6concatEPKcj>

00007c48 <_ZN6String6concatEPKc>:
    7c48:	61 15       	cp	r22, r1
    7c4a:	71 05       	cpc	r23, r1
    7c4c:	49 f0       	breq	.+18     	; 0x7c60 <_ZN6String6concatEPKc+0x18>
    7c4e:	fb 01       	movw	r30, r22
    7c50:	01 90       	ld	r0, Z+
    7c52:	00 20       	and	r0, r0
    7c54:	e9 f7       	brne	.-6      	; 0x7c50 <_ZN6String6concatEPKc+0x8>
    7c56:	31 97       	sbiw	r30, 0x01	; 1
    7c58:	af 01       	movw	r20, r30
    7c5a:	46 1b       	sub	r20, r22
    7c5c:	57 0b       	sbc	r21, r23
    7c5e:	c2 cf       	rjmp	.-124    	; 0x7be4 <_ZN6String6concatEPKcj>
    7c60:	80 e0       	ldi	r24, 0x00	; 0
    7c62:	08 95       	ret

00007c64 <_ZplRK15StringSumHelperRK6String>:
    7c64:	cf 93       	push	r28
    7c66:	df 93       	push	r29
    7c68:	ec 01       	movw	r28, r24
    7c6a:	fb 01       	movw	r30, r22
    7c6c:	44 81       	ldd	r20, Z+4	; 0x04
    7c6e:	55 81       	ldd	r21, Z+5	; 0x05
    7c70:	60 81       	ld	r22, Z
    7c72:	71 81       	ldd	r23, Z+1	; 0x01
    7c74:	b7 df       	rcall	.-146    	; 0x7be4 <_ZN6String6concatEPKcj>
    7c76:	81 11       	cpse	r24, r1
    7c78:	02 c0       	rjmp	.+4      	; 0x7c7e <_ZplRK15StringSumHelperRK6String+0x1a>
    7c7a:	ce 01       	movw	r24, r28
    7c7c:	38 de       	rcall	.-912    	; 0x78ee <_ZN6String10invalidateEv>
    7c7e:	ce 01       	movw	r24, r28
    7c80:	df 91       	pop	r29
    7c82:	cf 91       	pop	r28
    7c84:	08 95       	ret

00007c86 <_ZplRK15StringSumHelperPKc>:
    7c86:	cf 93       	push	r28
    7c88:	df 93       	push	r29
    7c8a:	ec 01       	movw	r28, r24
    7c8c:	61 15       	cp	r22, r1
    7c8e:	71 05       	cpc	r23, r1
    7c90:	59 f0       	breq	.+22     	; 0x7ca8 <_ZplRK15StringSumHelperPKc+0x22>
    7c92:	fb 01       	movw	r30, r22
    7c94:	01 90       	ld	r0, Z+
    7c96:	00 20       	and	r0, r0
    7c98:	e9 f7       	brne	.-6      	; 0x7c94 <_ZplRK15StringSumHelperPKc+0xe>
    7c9a:	31 97       	sbiw	r30, 0x01	; 1
    7c9c:	af 01       	movw	r20, r30
    7c9e:	46 1b       	sub	r20, r22
    7ca0:	57 0b       	sbc	r21, r23
    7ca2:	a0 df       	rcall	.-192    	; 0x7be4 <_ZN6String6concatEPKcj>
    7ca4:	81 11       	cpse	r24, r1
    7ca6:	02 c0       	rjmp	.+4      	; 0x7cac <_ZplRK15StringSumHelperPKc+0x26>
    7ca8:	ce 01       	movw	r24, r28
    7caa:	21 de       	rcall	.-958    	; 0x78ee <_ZN6String10invalidateEv>
    7cac:	ce 01       	movw	r24, r28
    7cae:	df 91       	pop	r29
    7cb0:	cf 91       	pop	r28
    7cb2:	08 95       	ret

00007cb4 <_ZNK6String6equalsEPKc>:
    7cb4:	fc 01       	movw	r30, r24
    7cb6:	24 81       	ldd	r18, Z+4	; 0x04
    7cb8:	35 81       	ldd	r19, Z+5	; 0x05
    7cba:	23 2b       	or	r18, r19
    7cbc:	31 f4       	brne	.+12     	; 0x7cca <_ZNK6String6equalsEPKc+0x16>
    7cbe:	21 e0       	ldi	r18, 0x01	; 1
    7cc0:	61 15       	cp	r22, r1
    7cc2:	71 05       	cpc	r23, r1
    7cc4:	99 f0       	breq	.+38     	; 0x7cec <_ZNK6String6equalsEPKc+0x38>
    7cc6:	fb 01       	movw	r30, r22
    7cc8:	08 c0       	rjmp	.+16     	; 0x7cda <_ZNK6String6equalsEPKc+0x26>
    7cca:	fc 01       	movw	r30, r24
    7ccc:	80 81       	ld	r24, Z
    7cce:	91 81       	ldd	r25, Z+1	; 0x01
    7cd0:	61 15       	cp	r22, r1
    7cd2:	71 05       	cpc	r23, r1
    7cd4:	31 f4       	brne	.+12     	; 0x7ce2 <_ZNK6String6equalsEPKc+0x2e>
    7cd6:	21 e0       	ldi	r18, 0x01	; 1
    7cd8:	fc 01       	movw	r30, r24
    7cda:	80 81       	ld	r24, Z
    7cdc:	88 23       	and	r24, r24
    7cde:	31 f0       	breq	.+12     	; 0x7cec <_ZNK6String6equalsEPKc+0x38>
    7ce0:	04 c0       	rjmp	.+8      	; 0x7cea <_ZNK6String6equalsEPKc+0x36>
    7ce2:	68 d5       	rcall	.+2768   	; 0x87b4 <strcmp>
    7ce4:	21 e0       	ldi	r18, 0x01	; 1
    7ce6:	89 2b       	or	r24, r25
    7ce8:	09 f0       	breq	.+2      	; 0x7cec <_ZNK6String6equalsEPKc+0x38>
    7cea:	20 e0       	ldi	r18, 0x00	; 0
    7cec:	82 2f       	mov	r24, r18
    7cee:	08 95       	ret

00007cf0 <_ZNK6String8getBytesEPhjj>:
    7cf0:	0f 93       	push	r16
    7cf2:	1f 93       	push	r17
    7cf4:	cf 93       	push	r28
    7cf6:	df 93       	push	r29
    7cf8:	41 15       	cp	r20, r1
    7cfa:	51 05       	cpc	r21, r1
    7cfc:	11 f1       	breq	.+68     	; 0x7d42 <_ZNK6String8getBytesEPhjj+0x52>
    7cfe:	61 15       	cp	r22, r1
    7d00:	71 05       	cpc	r23, r1
    7d02:	f9 f0       	breq	.+62     	; 0x7d42 <_ZNK6String8getBytesEPhjj+0x52>
    7d04:	dc 01       	movw	r26, r24
    7d06:	14 96       	adiw	r26, 0x04	; 4
    7d08:	ed 91       	ld	r30, X+
    7d0a:	fc 91       	ld	r31, X
    7d0c:	15 97       	sbiw	r26, 0x05	; 5
    7d0e:	2e 17       	cp	r18, r30
    7d10:	3f 07       	cpc	r19, r31
    7d12:	18 f0       	brcs	.+6      	; 0x7d1a <_ZNK6String8getBytesEPhjj+0x2a>
    7d14:	fb 01       	movw	r30, r22
    7d16:	10 82       	st	Z, r1
    7d18:	14 c0       	rjmp	.+40     	; 0x7d42 <_ZNK6String8getBytesEPhjj+0x52>
    7d1a:	e2 1b       	sub	r30, r18
    7d1c:	f3 0b       	sbc	r31, r19
    7d1e:	ea 01       	movw	r28, r20
    7d20:	21 97       	sbiw	r28, 0x01	; 1
    7d22:	ec 17       	cp	r30, r28
    7d24:	fd 07       	cpc	r31, r29
    7d26:	08 f4       	brcc	.+2      	; 0x7d2a <_ZNK6String8getBytesEPhjj+0x3a>
    7d28:	ef 01       	movw	r28, r30
    7d2a:	8b 01       	movw	r16, r22
    7d2c:	fc 01       	movw	r30, r24
    7d2e:	60 81       	ld	r22, Z
    7d30:	71 81       	ldd	r23, Z+1	; 0x01
    7d32:	62 0f       	add	r22, r18
    7d34:	73 1f       	adc	r23, r19
    7d36:	ae 01       	movw	r20, r28
    7d38:	c8 01       	movw	r24, r16
    7d3a:	5a d5       	rcall	.+2740   	; 0x87f0 <strncpy>
    7d3c:	c0 0f       	add	r28, r16
    7d3e:	d1 1f       	adc	r29, r17
    7d40:	18 82       	st	Y, r1
    7d42:	df 91       	pop	r29
    7d44:	cf 91       	pop	r28
    7d46:	1f 91       	pop	r17
    7d48:	0f 91       	pop	r16
    7d4a:	08 95       	ret

00007d4c <_ZNK6String9substringEjj>:
    7d4c:	bf 92       	push	r11
    7d4e:	cf 92       	push	r12
    7d50:	df 92       	push	r13
    7d52:	ef 92       	push	r14
    7d54:	ff 92       	push	r15
    7d56:	0f 93       	push	r16
    7d58:	1f 93       	push	r17
    7d5a:	cf 93       	push	r28
    7d5c:	df 93       	push	r29
    7d5e:	7c 01       	movw	r14, r24
    7d60:	6b 01       	movw	r12, r22
    7d62:	8a 01       	movw	r16, r20
    7d64:	e9 01       	movw	r28, r18
    7d66:	24 17       	cp	r18, r20
    7d68:	35 07       	cpc	r19, r21
    7d6a:	20 f4       	brcc	.+8      	; 0x7d74 <_ZNK6String9substringEjj+0x28>
    7d6c:	81 2f       	mov	r24, r17
    7d6e:	89 01       	movw	r16, r18
    7d70:	c4 2f       	mov	r28, r20
    7d72:	d8 2f       	mov	r29, r24
    7d74:	6b eb       	ldi	r22, 0xBB	; 187
    7d76:	71 e0       	ldi	r23, 0x01	; 1
    7d78:	c7 01       	movw	r24, r14
    7d7a:	1c de       	rcall	.-968    	; 0x79b4 <_ZN6StringC1EPKc>
    7d7c:	d6 01       	movw	r26, r12
    7d7e:	14 96       	adiw	r26, 0x04	; 4
    7d80:	8d 91       	ld	r24, X+
    7d82:	9c 91       	ld	r25, X
    7d84:	15 97       	sbiw	r26, 0x05	; 5
    7d86:	08 17       	cp	r16, r24
    7d88:	19 07       	cpc	r17, r25
    7d8a:	c0 f4       	brcc	.+48     	; 0x7dbc <_ZNK6String9substringEjj+0x70>
    7d8c:	8c 17       	cp	r24, r28
    7d8e:	9d 07       	cpc	r25, r29
    7d90:	08 f4       	brcc	.+2      	; 0x7d94 <_ZNK6String9substringEjj+0x48>
    7d92:	ec 01       	movw	r28, r24
    7d94:	d6 01       	movw	r26, r12
    7d96:	ed 91       	ld	r30, X+
    7d98:	fc 91       	ld	r31, X
    7d9a:	11 97       	sbiw	r26, 0x01	; 1
    7d9c:	ec 0f       	add	r30, r28
    7d9e:	fd 1f       	adc	r31, r29
    7da0:	b0 80       	ld	r11, Z
    7da2:	10 82       	st	Z, r1
    7da4:	6d 91       	ld	r22, X+
    7da6:	7c 91       	ld	r23, X
    7da8:	60 0f       	add	r22, r16
    7daa:	71 1f       	adc	r23, r17
    7dac:	c7 01       	movw	r24, r14
    7dae:	81 de       	rcall	.-766    	; 0x7ab2 <_ZN6StringaSEPKc>
    7db0:	d6 01       	movw	r26, r12
    7db2:	ed 91       	ld	r30, X+
    7db4:	fc 91       	ld	r31, X
    7db6:	ec 0f       	add	r30, r28
    7db8:	fd 1f       	adc	r31, r29
    7dba:	b0 82       	st	Z, r11
    7dbc:	c7 01       	movw	r24, r14
    7dbe:	df 91       	pop	r29
    7dc0:	cf 91       	pop	r28
    7dc2:	1f 91       	pop	r17
    7dc4:	0f 91       	pop	r16
    7dc6:	ff 90       	pop	r15
    7dc8:	ef 90       	pop	r14
    7dca:	df 90       	pop	r13
    7dcc:	cf 90       	pop	r12
    7dce:	bf 90       	pop	r11
    7dd0:	08 95       	ret

00007dd2 <_ZN6String4trimEv>:

void String::trim(void)
{
    7dd2:	af 92       	push	r10
    7dd4:	bf 92       	push	r11
    7dd6:	cf 92       	push	r12
    7dd8:	df 92       	push	r13
    7dda:	ef 92       	push	r14
    7ddc:	ff 92       	push	r15
    7dde:	0f 93       	push	r16
    7de0:	1f 93       	push	r17
    7de2:	cf 93       	push	r28
    7de4:	df 93       	push	r29
	if (!buffer || len == 0) return;
    7de6:	dc 01       	movw	r26, r24
    7de8:	cd 90       	ld	r12, X+
    7dea:	dc 90       	ld	r13, X
    7dec:	11 97       	sbiw	r26, 0x01	; 1
    7dee:	c1 14       	cp	r12, r1
    7df0:	d1 04       	cpc	r13, r1
    7df2:	09 f4       	brne	.+2      	; 0x7df6 <_ZN6String4trimEv+0x24>
    7df4:	3c c0       	rjmp	.+120    	; 0x7e6e <_ZN6String4trimEv+0x9c>
    7df6:	14 96       	adiw	r26, 0x04	; 4
    7df8:	cd 91       	ld	r28, X+
    7dfa:	dc 91       	ld	r29, X
    7dfc:	15 97       	sbiw	r26, 0x05	; 5
    7dfe:	20 97       	sbiw	r28, 0x00	; 0
    7e00:	b1 f1       	breq	.+108    	; 0x7e6e <_ZN6String4trimEv+0x9c>
    7e02:	8c 01       	movw	r16, r24
    7e04:	76 01       	movw	r14, r12
    7e06:	57 01       	movw	r10, r14
    7e08:	bf ef       	ldi	r27, 0xFF	; 255
    7e0a:	ab 1a       	sub	r10, r27
    7e0c:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    7e0e:	f7 01       	movw	r30, r14
    7e10:	80 81       	ld	r24, Z
    7e12:	90 e0       	ldi	r25, 0x00	; 0
    7e14:	b5 d4       	rcall	.+2410   	; 0x8780 <isspace>
    7e16:	89 2b       	or	r24, r25
    7e18:	11 f0       	breq	.+4      	; 0x7e1e <_ZN6String4trimEv+0x4c>
    7e1a:	75 01       	movw	r14, r10
    7e1c:	f4 cf       	rjmp	.-24     	; 0x7e06 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    7e1e:	21 97       	sbiw	r28, 0x01	; 1
    7e20:	cc 0d       	add	r28, r12
    7e22:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    7e24:	88 81       	ld	r24, Y
    7e26:	90 e0       	ldi	r25, 0x00	; 0
    7e28:	ab d4       	rcall	.+2390   	; 0x8780 <isspace>
    7e2a:	89 2b       	or	r24, r25
    7e2c:	29 f0       	breq	.+10     	; 0x7e38 <_ZN6String4trimEv+0x66>
    7e2e:	ce 15       	cp	r28, r14
    7e30:	df 05       	cpc	r29, r15
    7e32:	10 f0       	brcs	.+4      	; 0x7e38 <_ZN6String4trimEv+0x66>
    7e34:	21 97       	sbiw	r28, 0x01	; 1
    7e36:	f6 cf       	rjmp	.-20     	; 0x7e24 <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    7e38:	ae 01       	movw	r20, r28
    7e3a:	4f 5f       	subi	r20, 0xFF	; 255
    7e3c:	5f 4f       	sbci	r21, 0xFF	; 255
    7e3e:	4e 19       	sub	r20, r14
    7e40:	5f 09       	sbc	r21, r15
    7e42:	d8 01       	movw	r26, r16
    7e44:	15 96       	adiw	r26, 0x05	; 5
    7e46:	5c 93       	st	X, r21
    7e48:	4e 93       	st	-X, r20
    7e4a:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    7e4c:	ce 14       	cp	r12, r14
    7e4e:	df 04       	cpc	r13, r15
    7e50:	18 f4       	brcc	.+6      	; 0x7e58 <_ZN6String4trimEv+0x86>
    7e52:	b7 01       	movw	r22, r14
    7e54:	c6 01       	movw	r24, r12
    7e56:	a5 d4       	rcall	.+2378   	; 0x87a2 <memcpy>
	buffer[len] = 0;
    7e58:	d8 01       	movw	r26, r16
    7e5a:	ed 91       	ld	r30, X+
    7e5c:	fc 91       	ld	r31, X
    7e5e:	11 97       	sbiw	r26, 0x01	; 1
    7e60:	14 96       	adiw	r26, 0x04	; 4
    7e62:	8d 91       	ld	r24, X+
    7e64:	9c 91       	ld	r25, X
    7e66:	15 97       	sbiw	r26, 0x05	; 5
    7e68:	e8 0f       	add	r30, r24
    7e6a:	f9 1f       	adc	r31, r25
    7e6c:	10 82       	st	Z, r1
}
    7e6e:	df 91       	pop	r29
    7e70:	cf 91       	pop	r28
    7e72:	1f 91       	pop	r17
    7e74:	0f 91       	pop	r16
    7e76:	ff 90       	pop	r15
    7e78:	ef 90       	pop	r14
    7e7a:	df 90       	pop	r13
    7e7c:	cf 90       	pop	r12
    7e7e:	bf 90       	pop	r11
    7e80:	af 90       	pop	r10
    7e82:	08 95       	ret

00007e84 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    7e84:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    7e86:	91 8d       	ldd	r25, Z+25	; 0x19
    7e88:	22 8d       	ldd	r18, Z+26	; 0x1a
    7e8a:	89 2f       	mov	r24, r25
    7e8c:	90 e0       	ldi	r25, 0x00	; 0
    7e8e:	80 5c       	subi	r24, 0xC0	; 192
    7e90:	9f 4f       	sbci	r25, 0xFF	; 255
    7e92:	82 1b       	sub	r24, r18
    7e94:	91 09       	sbc	r25, r1
}
    7e96:	8f 73       	andi	r24, 0x3F	; 63
    7e98:	99 27       	eor	r25, r25
    7e9a:	08 95       	ret

00007e9c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    7e9c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    7e9e:	91 8d       	ldd	r25, Z+25	; 0x19
    7ea0:	82 8d       	ldd	r24, Z+26	; 0x1a
    7ea2:	98 17       	cp	r25, r24
    7ea4:	31 f0       	breq	.+12     	; 0x7eb2 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    7ea6:	82 8d       	ldd	r24, Z+26	; 0x1a
    7ea8:	e8 0f       	add	r30, r24
    7eaa:	f1 1d       	adc	r31, r1
    7eac:	85 8d       	ldd	r24, Z+29	; 0x1d
    7eae:	90 e0       	ldi	r25, 0x00	; 0
    7eb0:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7eb2:	8f ef       	ldi	r24, 0xFF	; 255
    7eb4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    7eb6:	08 95       	ret

00007eb8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    7eb8:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    7eba:	91 8d       	ldd	r25, Z+25	; 0x19
    7ebc:	82 8d       	ldd	r24, Z+26	; 0x1a
    7ebe:	98 17       	cp	r25, r24
    7ec0:	61 f0       	breq	.+24     	; 0x7eda <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    7ec2:	82 8d       	ldd	r24, Z+26	; 0x1a
    7ec4:	df 01       	movw	r26, r30
    7ec6:	a8 0f       	add	r26, r24
    7ec8:	b1 1d       	adc	r27, r1
    7eca:	5d 96       	adiw	r26, 0x1d	; 29
    7ecc:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    7ece:	92 8d       	ldd	r25, Z+26	; 0x1a
    7ed0:	9f 5f       	subi	r25, 0xFF	; 255
    7ed2:	9f 73       	andi	r25, 0x3F	; 63
    7ed4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    7ed6:	90 e0       	ldi	r25, 0x00	; 0
    7ed8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7eda:	8f ef       	ldi	r24, 0xFF	; 255
    7edc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    7ede:	08 95       	ret

00007ee0 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    7ee0:	fc 01       	movw	r30, r24
    7ee2:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    7ee4:	44 8d       	ldd	r20, Z+28	; 0x1c
    7ee6:	25 2f       	mov	r18, r21
    7ee8:	30 e0       	ldi	r19, 0x00	; 0
    7eea:	84 2f       	mov	r24, r20
    7eec:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    7eee:	82 1b       	sub	r24, r18
    7ef0:	93 0b       	sbc	r25, r19
    7ef2:	54 17       	cp	r21, r20
    7ef4:	10 f0       	brcs	.+4      	; 0x7efa <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    7ef6:	cf 96       	adiw	r24, 0x3f	; 63
    7ef8:	08 95       	ret
  return tail - head - 1;
    7efa:	01 97       	sbiw	r24, 0x01	; 1
}
    7efc:	08 95       	ret

00007efe <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    7efe:	8b ee       	ldi	r24, 0xEB	; 235
    7f00:	98 e3       	ldi	r25, 0x38	; 56
    7f02:	89 2b       	or	r24, r25
    7f04:	41 f0       	breq	.+16     	; 0x7f16 <_Z14serialEventRunv+0x18>
    7f06:	80 e0       	ldi	r24, 0x00	; 0
    7f08:	90 e0       	ldi	r25, 0x00	; 0
    7f0a:	89 2b       	or	r24, r25
    7f0c:	21 f0       	breq	.+8      	; 0x7f16 <_Z14serialEventRunv+0x18>
    7f0e:	63 d9       	rcall	.-3386   	; 0x71d6 <_Z17Serial0_availablev>
    7f10:	81 11       	cpse	r24, r1
    7f12:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    7f16:	08 95       	ret

00007f18 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    7f18:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    7f1a:	84 8d       	ldd	r24, Z+28	; 0x1c
    7f1c:	df 01       	movw	r26, r30
    7f1e:	a8 0f       	add	r26, r24
    7f20:	b1 1d       	adc	r27, r1
    7f22:	a3 5a       	subi	r26, 0xA3	; 163
    7f24:	bf 4f       	sbci	r27, 0xFF	; 255
    7f26:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    7f28:	84 8d       	ldd	r24, Z+28	; 0x1c
    7f2a:	90 e0       	ldi	r25, 0x00	; 0
    7f2c:	01 96       	adiw	r24, 0x01	; 1
    7f2e:	8f 73       	andi	r24, 0x3F	; 63
    7f30:	99 27       	eor	r25, r25
    7f32:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    7f34:	a6 89       	ldd	r26, Z+22	; 0x16
    7f36:	b7 89       	ldd	r27, Z+23	; 0x17
    7f38:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    7f3a:	a0 89       	ldd	r26, Z+16	; 0x10
    7f3c:	b1 89       	ldd	r27, Z+17	; 0x11
    7f3e:	8c 91       	ld	r24, X
    7f40:	83 70       	andi	r24, 0x03	; 3
    7f42:	80 64       	ori	r24, 0x40	; 64
    7f44:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    7f46:	93 8d       	ldd	r25, Z+27	; 0x1b
    7f48:	84 8d       	ldd	r24, Z+28	; 0x1c
    7f4a:	98 13       	cpse	r25, r24
    7f4c:	06 c0       	rjmp	.+12     	; 0x7f5a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    7f4e:	02 88       	ldd	r0, Z+18	; 0x12
    7f50:	f3 89       	ldd	r31, Z+19	; 0x13
    7f52:	e0 2d       	mov	r30, r0
    7f54:	80 81       	ld	r24, Z
    7f56:	8f 7d       	andi	r24, 0xDF	; 223
    7f58:	80 83       	st	Z, r24
    7f5a:	08 95       	ret

00007f5c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    7f5c:	ef 92       	push	r14
    7f5e:	ff 92       	push	r15
    7f60:	0f 93       	push	r16
    7f62:	1f 93       	push	r17
    7f64:	cf 93       	push	r28
    7f66:	df 93       	push	r29
    7f68:	ec 01       	movw	r28, r24
  _written = true;
    7f6a:	81 e0       	ldi	r24, 0x01	; 1
    7f6c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    7f6e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7f70:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7f72:	98 13       	cpse	r25, r24
    7f74:	05 c0       	rjmp	.+10     	; 0x7f80 <_ZN14HardwareSerial5writeEh+0x24>
    7f76:	e8 89       	ldd	r30, Y+16	; 0x10
    7f78:	f9 89       	ldd	r31, Y+17	; 0x11
    7f7a:	80 81       	ld	r24, Z
    7f7c:	85 fd       	sbrc	r24, 5
    7f7e:	25 c0       	rjmp	.+74     	; 0x7fca <_ZN14HardwareSerial5writeEh+0x6e>
    7f80:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    7f82:	0b 8d       	ldd	r16, Y+27	; 0x1b
    7f84:	10 e0       	ldi	r17, 0x00	; 0
    7f86:	0f 5f       	subi	r16, 0xFF	; 255
    7f88:	1f 4f       	sbci	r17, 0xFF	; 255
    7f8a:	0f 73       	andi	r16, 0x3F	; 63
    7f8c:	11 27       	eor	r17, r17
    7f8e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    7f90:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7f92:	e8 12       	cpse	r14, r24
    7f94:	0b c0       	rjmp	.+22     	; 0x7fac <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    7f96:	0f b6       	in	r0, 0x3f	; 63
    7f98:	07 fc       	sbrc	r0, 7
    7f9a:	fa cf       	rjmp	.-12     	; 0x7f90 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    7f9c:	e8 89       	ldd	r30, Y+16	; 0x10
    7f9e:	f9 89       	ldd	r31, Y+17	; 0x11
    7fa0:	80 81       	ld	r24, Z
    7fa2:	85 ff       	sbrs	r24, 5
    7fa4:	f5 cf       	rjmp	.-22     	; 0x7f90 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    7fa6:	ce 01       	movw	r24, r28
    7fa8:	b7 df       	rcall	.-146    	; 0x7f18 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    7faa:	f2 cf       	rjmp	.-28     	; 0x7f90 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    7fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7fae:	fe 01       	movw	r30, r28
    7fb0:	e8 0f       	add	r30, r24
    7fb2:	f1 1d       	adc	r31, r1
    7fb4:	e3 5a       	subi	r30, 0xA3	; 163
    7fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    7fb8:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7fba:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7fbc:	f8 94       	cli
    _tx_buffer_head = i;
    7fbe:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    7fc0:	ea 89       	ldd	r30, Y+18	; 0x12
    7fc2:	fb 89       	ldd	r31, Y+19	; 0x13
    7fc4:	80 81       	ld	r24, Z
    7fc6:	80 62       	ori	r24, 0x20	; 32
    7fc8:	0a c0       	rjmp	.+20     	; 0x7fde <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7fca:	9f b7       	in	r25, 0x3f	; 63
    7fcc:	f8 94       	cli
      *_udr = c;
    7fce:	ee 89       	ldd	r30, Y+22	; 0x16
    7fd0:	ff 89       	ldd	r31, Y+23	; 0x17
    7fd2:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    7fd4:	e8 89       	ldd	r30, Y+16	; 0x10
    7fd6:	f9 89       	ldd	r31, Y+17	; 0x11
    7fd8:	80 81       	ld	r24, Z
    7fda:	83 70       	andi	r24, 0x03	; 3
    7fdc:	80 64       	ori	r24, 0x40	; 64
    7fde:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7fe0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    7fe2:	81 e0       	ldi	r24, 0x01	; 1
    7fe4:	90 e0       	ldi	r25, 0x00	; 0
    7fe6:	df 91       	pop	r29
    7fe8:	cf 91       	pop	r28
    7fea:	1f 91       	pop	r17
    7fec:	0f 91       	pop	r16
    7fee:	ff 90       	pop	r15
    7ff0:	ef 90       	pop	r14
    7ff2:	08 95       	ret

00007ff4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    7ff4:	cf 93       	push	r28
    7ff6:	df 93       	push	r29
    7ff8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    7ffa:	88 8d       	ldd	r24, Y+24	; 0x18
    7ffc:	88 23       	and	r24, r24
    7ffe:	c1 f0       	breq	.+48     	; 0x8030 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    8000:	ea 89       	ldd	r30, Y+18	; 0x12
    8002:	fb 89       	ldd	r31, Y+19	; 0x13
    8004:	80 81       	ld	r24, Z
    8006:	85 fd       	sbrc	r24, 5
    8008:	05 c0       	rjmp	.+10     	; 0x8014 <_ZN14HardwareSerial5flushEv+0x20>
    800a:	a8 89       	ldd	r26, Y+16	; 0x10
    800c:	b9 89       	ldd	r27, Y+17	; 0x11
    800e:	8c 91       	ld	r24, X
    8010:	86 fd       	sbrc	r24, 6
    8012:	0e c0       	rjmp	.+28     	; 0x8030 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    8014:	0f b6       	in	r0, 0x3f	; 63
    8016:	07 fc       	sbrc	r0, 7
    8018:	f5 cf       	rjmp	.-22     	; 0x8004 <_ZN14HardwareSerial5flushEv+0x10>
    801a:	80 81       	ld	r24, Z
    801c:	85 ff       	sbrs	r24, 5
    801e:	f2 cf       	rjmp	.-28     	; 0x8004 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    8020:	a8 89       	ldd	r26, Y+16	; 0x10
    8022:	b9 89       	ldd	r27, Y+17	; 0x11
    8024:	8c 91       	ld	r24, X
    8026:	85 ff       	sbrs	r24, 5
    8028:	ed cf       	rjmp	.-38     	; 0x8004 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    802a:	ce 01       	movw	r24, r28
    802c:	75 df       	rcall	.-278    	; 0x7f18 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    802e:	e8 cf       	rjmp	.-48     	; 0x8000 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    8030:	df 91       	pop	r29
    8032:	cf 91       	pop	r28
    8034:	08 95       	ret

00008036 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    8036:	08 95       	ret

00008038 <__udivmodqi4>:
    8038:	99 1b       	sub	r25, r25
    803a:	79 e0       	ldi	r23, 0x09	; 9
    803c:	04 c0       	rjmp	.+8      	; 0x8046 <__udivmodqi4_ep>

0000803e <__udivmodqi4_loop>:
    803e:	99 1f       	adc	r25, r25
    8040:	96 17       	cp	r25, r22
    8042:	08 f0       	brcs	.+2      	; 0x8046 <__udivmodqi4_ep>
    8044:	96 1b       	sub	r25, r22

00008046 <__udivmodqi4_ep>:
    8046:	88 1f       	adc	r24, r24
    8048:	7a 95       	dec	r23
    804a:	c9 f7       	brne	.-14     	; 0x803e <__udivmodqi4_loop>
    804c:	80 95       	com	r24
    804e:	08 95       	ret

00008050 <__udivmodhi4>:
    8050:	aa 1b       	sub	r26, r26
    8052:	bb 1b       	sub	r27, r27
    8054:	51 e1       	ldi	r21, 0x11	; 17
    8056:	07 c0       	rjmp	.+14     	; 0x8066 <__udivmodhi4_ep>

00008058 <__udivmodhi4_loop>:
    8058:	aa 1f       	adc	r26, r26
    805a:	bb 1f       	adc	r27, r27
    805c:	a6 17       	cp	r26, r22
    805e:	b7 07       	cpc	r27, r23
    8060:	10 f0       	brcs	.+4      	; 0x8066 <__udivmodhi4_ep>
    8062:	a6 1b       	sub	r26, r22
    8064:	b7 0b       	sbc	r27, r23

00008066 <__udivmodhi4_ep>:
    8066:	88 1f       	adc	r24, r24
    8068:	99 1f       	adc	r25, r25
    806a:	5a 95       	dec	r21
    806c:	a9 f7       	brne	.-22     	; 0x8058 <__udivmodhi4_loop>
    806e:	80 95       	com	r24
    8070:	90 95       	com	r25
    8072:	bc 01       	movw	r22, r24
    8074:	cd 01       	movw	r24, r26
    8076:	08 95       	ret

00008078 <__udivmodsi4>:
    8078:	a1 e2       	ldi	r26, 0x21	; 33
    807a:	1a 2e       	mov	r1, r26
    807c:	aa 1b       	sub	r26, r26
    807e:	bb 1b       	sub	r27, r27
    8080:	fd 01       	movw	r30, r26
    8082:	0d c0       	rjmp	.+26     	; 0x809e <__udivmodsi4_ep>

00008084 <__udivmodsi4_loop>:
    8084:	aa 1f       	adc	r26, r26
    8086:	bb 1f       	adc	r27, r27
    8088:	ee 1f       	adc	r30, r30
    808a:	ff 1f       	adc	r31, r31
    808c:	a2 17       	cp	r26, r18
    808e:	b3 07       	cpc	r27, r19
    8090:	e4 07       	cpc	r30, r20
    8092:	f5 07       	cpc	r31, r21
    8094:	20 f0       	brcs	.+8      	; 0x809e <__udivmodsi4_ep>
    8096:	a2 1b       	sub	r26, r18
    8098:	b3 0b       	sbc	r27, r19
    809a:	e4 0b       	sbc	r30, r20
    809c:	f5 0b       	sbc	r31, r21

0000809e <__udivmodsi4_ep>:
    809e:	66 1f       	adc	r22, r22
    80a0:	77 1f       	adc	r23, r23
    80a2:	88 1f       	adc	r24, r24
    80a4:	99 1f       	adc	r25, r25
    80a6:	1a 94       	dec	r1
    80a8:	69 f7       	brne	.-38     	; 0x8084 <__udivmodsi4_loop>
    80aa:	60 95       	com	r22
    80ac:	70 95       	com	r23
    80ae:	80 95       	com	r24
    80b0:	90 95       	com	r25
    80b2:	9b 01       	movw	r18, r22
    80b4:	ac 01       	movw	r20, r24
    80b6:	bd 01       	movw	r22, r26
    80b8:	cf 01       	movw	r24, r30
    80ba:	08 95       	ret

000080bc <__tablejump2__>:
    80bc:	ee 0f       	add	r30, r30
    80be:	ff 1f       	adc	r31, r31
    80c0:	00 24       	eor	r0, r0
    80c2:	00 1c       	adc	r0, r0
    80c4:	0b be       	out	0x3b, r0	; 59
    80c6:	07 90       	elpm	r0, Z+
    80c8:	f6 91       	elpm	r31, Z
    80ca:	e0 2d       	mov	r30, r0
    80cc:	09 94       	ijmp

000080ce <__umulhisi3>:
    80ce:	a2 9f       	mul	r26, r18
    80d0:	b0 01       	movw	r22, r0
    80d2:	b3 9f       	mul	r27, r19
    80d4:	c0 01       	movw	r24, r0
    80d6:	a3 9f       	mul	r26, r19
    80d8:	70 0d       	add	r23, r0
    80da:	81 1d       	adc	r24, r1
    80dc:	11 24       	eor	r1, r1
    80de:	91 1d       	adc	r25, r1
    80e0:	b2 9f       	mul	r27, r18
    80e2:	70 0d       	add	r23, r0
    80e4:	81 1d       	adc	r24, r1
    80e6:	11 24       	eor	r1, r1
    80e8:	91 1d       	adc	r25, r1
    80ea:	08 95       	ret

000080ec <__muluhisi3>:
    80ec:	f0 df       	rcall	.-32     	; 0x80ce <__umulhisi3>
    80ee:	a5 9f       	mul	r26, r21
    80f0:	90 0d       	add	r25, r0
    80f2:	b4 9f       	mul	r27, r20
    80f4:	90 0d       	add	r25, r0
    80f6:	a4 9f       	mul	r26, r20
    80f8:	80 0d       	add	r24, r0
    80fa:	91 1d       	adc	r25, r1
    80fc:	11 24       	eor	r1, r1
    80fe:	08 95       	ret

00008100 <__moddi3>:
    8100:	68 94       	set
    8102:	01 c0       	rjmp	.+2      	; 0x8106 <__divdi3_moddi3>

00008104 <__divdi3>:
    8104:	e8 94       	clt

00008106 <__divdi3_moddi3>:
    8106:	f9 2f       	mov	r31, r25
    8108:	f1 2b       	or	r31, r17
    810a:	0a f0       	brmi	.+2      	; 0x810e <__divdi3_moddi3+0x8>
    810c:	27 c0       	rjmp	.+78     	; 0x815c <__udivdi3_umoddi3>
    810e:	a0 e0       	ldi	r26, 0x00	; 0
    8110:	b0 e0       	ldi	r27, 0x00	; 0
    8112:	ec e8       	ldi	r30, 0x8C	; 140
    8114:	f0 e4       	ldi	r31, 0x40	; 64
    8116:	93 c0       	rjmp	.+294    	; 0x823e <__prologue_saves__+0xc>
    8118:	09 2e       	mov	r0, r25
    811a:	05 94       	asr	r0
    811c:	1a f4       	brpl	.+6      	; 0x8124 <__divdi3_moddi3+0x1e>
    811e:	79 d0       	rcall	.+242    	; 0x8212 <__negdi2>
    8120:	11 23       	and	r17, r17
    8122:	92 f4       	brpl	.+36     	; 0x8148 <__divdi3_moddi3+0x42>
    8124:	f0 e8       	ldi	r31, 0x80	; 128
    8126:	0f 26       	eor	r0, r31
    8128:	ff ef       	ldi	r31, 0xFF	; 255
    812a:	e0 94       	com	r14
    812c:	f0 94       	com	r15
    812e:	00 95       	com	r16
    8130:	10 95       	com	r17
    8132:	b0 94       	com	r11
    8134:	c0 94       	com	r12
    8136:	d0 94       	com	r13
    8138:	a1 94       	neg	r10
    813a:	bf 0a       	sbc	r11, r31
    813c:	cf 0a       	sbc	r12, r31
    813e:	df 0a       	sbc	r13, r31
    8140:	ef 0a       	sbc	r14, r31
    8142:	ff 0a       	sbc	r15, r31
    8144:	0f 0b       	sbc	r16, r31
    8146:	1f 0b       	sbc	r17, r31
    8148:	13 d0       	rcall	.+38     	; 0x8170 <__udivmod64>
    814a:	07 fc       	sbrc	r0, 7
    814c:	62 d0       	rcall	.+196    	; 0x8212 <__negdi2>
    814e:	cd b7       	in	r28, 0x3d	; 61
    8150:	de b7       	in	r29, 0x3e	; 62
    8152:	ec e0       	ldi	r30, 0x0C	; 12
    8154:	90 c0       	rjmp	.+288    	; 0x8276 <__epilogue_restores__+0xc>

00008156 <__umoddi3>:
    8156:	68 94       	set
    8158:	01 c0       	rjmp	.+2      	; 0x815c <__udivdi3_umoddi3>

0000815a <__udivdi3>:
    815a:	e8 94       	clt

0000815c <__udivdi3_umoddi3>:
    815c:	8f 92       	push	r8
    815e:	9f 92       	push	r9
    8160:	cf 93       	push	r28
    8162:	df 93       	push	r29
    8164:	05 d0       	rcall	.+10     	; 0x8170 <__udivmod64>
    8166:	df 91       	pop	r29
    8168:	cf 91       	pop	r28
    816a:	9f 90       	pop	r9
    816c:	8f 90       	pop	r8
    816e:	08 95       	ret

00008170 <__udivmod64>:
    8170:	88 24       	eor	r8, r8
    8172:	99 24       	eor	r9, r9
    8174:	f4 01       	movw	r30, r8
    8176:	e4 01       	movw	r28, r8
    8178:	b0 e4       	ldi	r27, 0x40	; 64
    817a:	9f 93       	push	r25
    817c:	aa 27       	eor	r26, r26
    817e:	9a 15       	cp	r25, r10
    8180:	8b 04       	cpc	r8, r11
    8182:	9c 04       	cpc	r9, r12
    8184:	ed 05       	cpc	r30, r13
    8186:	fe 05       	cpc	r31, r14
    8188:	cf 05       	cpc	r28, r15
    818a:	d0 07       	cpc	r29, r16
    818c:	a1 07       	cpc	r26, r17
    818e:	98 f4       	brcc	.+38     	; 0x81b6 <__udivmod64+0x46>
    8190:	ad 2f       	mov	r26, r29
    8192:	dc 2f       	mov	r29, r28
    8194:	cf 2f       	mov	r28, r31
    8196:	fe 2f       	mov	r31, r30
    8198:	e9 2d       	mov	r30, r9
    819a:	98 2c       	mov	r9, r8
    819c:	89 2e       	mov	r8, r25
    819e:	98 2f       	mov	r25, r24
    81a0:	87 2f       	mov	r24, r23
    81a2:	76 2f       	mov	r23, r22
    81a4:	65 2f       	mov	r22, r21
    81a6:	54 2f       	mov	r21, r20
    81a8:	43 2f       	mov	r20, r19
    81aa:	32 2f       	mov	r19, r18
    81ac:	22 27       	eor	r18, r18
    81ae:	b8 50       	subi	r27, 0x08	; 8
    81b0:	31 f7       	brne	.-52     	; 0x817e <__udivmod64+0xe>
    81b2:	bf 91       	pop	r27
    81b4:	27 c0       	rjmp	.+78     	; 0x8204 <__udivmod64+0x94>
    81b6:	1b 2e       	mov	r1, r27
    81b8:	bf 91       	pop	r27
    81ba:	bb 27       	eor	r27, r27
    81bc:	22 0f       	add	r18, r18
    81be:	33 1f       	adc	r19, r19
    81c0:	44 1f       	adc	r20, r20
    81c2:	55 1f       	adc	r21, r21
    81c4:	66 1f       	adc	r22, r22
    81c6:	77 1f       	adc	r23, r23
    81c8:	88 1f       	adc	r24, r24
    81ca:	99 1f       	adc	r25, r25
    81cc:	88 1c       	adc	r8, r8
    81ce:	99 1c       	adc	r9, r9
    81d0:	ee 1f       	adc	r30, r30
    81d2:	ff 1f       	adc	r31, r31
    81d4:	cc 1f       	adc	r28, r28
    81d6:	dd 1f       	adc	r29, r29
    81d8:	aa 1f       	adc	r26, r26
    81da:	bb 1f       	adc	r27, r27
    81dc:	8a 14       	cp	r8, r10
    81de:	9b 04       	cpc	r9, r11
    81e0:	ec 05       	cpc	r30, r12
    81e2:	fd 05       	cpc	r31, r13
    81e4:	ce 05       	cpc	r28, r14
    81e6:	df 05       	cpc	r29, r15
    81e8:	a0 07       	cpc	r26, r16
    81ea:	b1 07       	cpc	r27, r17
    81ec:	48 f0       	brcs	.+18     	; 0x8200 <__udivmod64+0x90>
    81ee:	8a 18       	sub	r8, r10
    81f0:	9b 08       	sbc	r9, r11
    81f2:	ec 09       	sbc	r30, r12
    81f4:	fd 09       	sbc	r31, r13
    81f6:	ce 09       	sbc	r28, r14
    81f8:	df 09       	sbc	r29, r15
    81fa:	a0 0b       	sbc	r26, r16
    81fc:	b1 0b       	sbc	r27, r17
    81fe:	21 60       	ori	r18, 0x01	; 1
    8200:	1a 94       	dec	r1
    8202:	e1 f6       	brne	.-72     	; 0x81bc <__udivmod64+0x4c>
    8204:	2e f4       	brtc	.+10     	; 0x8210 <__udivmod64+0xa0>
    8206:	94 01       	movw	r18, r8
    8208:	af 01       	movw	r20, r30
    820a:	be 01       	movw	r22, r28
    820c:	cd 01       	movw	r24, r26
    820e:	00 0c       	add	r0, r0
    8210:	08 95       	ret

00008212 <__negdi2>:
    8212:	60 95       	com	r22
    8214:	70 95       	com	r23
    8216:	80 95       	com	r24
    8218:	90 95       	com	r25
    821a:	30 95       	com	r19
    821c:	40 95       	com	r20
    821e:	50 95       	com	r21
    8220:	21 95       	neg	r18
    8222:	3f 4f       	sbci	r19, 0xFF	; 255
    8224:	4f 4f       	sbci	r20, 0xFF	; 255
    8226:	5f 4f       	sbci	r21, 0xFF	; 255
    8228:	6f 4f       	sbci	r22, 0xFF	; 255
    822a:	7f 4f       	sbci	r23, 0xFF	; 255
    822c:	8f 4f       	sbci	r24, 0xFF	; 255
    822e:	9f 4f       	sbci	r25, 0xFF	; 255
    8230:	08 95       	ret

00008232 <__prologue_saves__>:
    8232:	2f 92       	push	r2
    8234:	3f 92       	push	r3
    8236:	4f 92       	push	r4
    8238:	5f 92       	push	r5
    823a:	6f 92       	push	r6
    823c:	7f 92       	push	r7
    823e:	8f 92       	push	r8
    8240:	9f 92       	push	r9
    8242:	af 92       	push	r10
    8244:	bf 92       	push	r11
    8246:	cf 92       	push	r12
    8248:	df 92       	push	r13
    824a:	ef 92       	push	r14
    824c:	ff 92       	push	r15
    824e:	0f 93       	push	r16
    8250:	1f 93       	push	r17
    8252:	cf 93       	push	r28
    8254:	df 93       	push	r29
    8256:	cd b7       	in	r28, 0x3d	; 61
    8258:	de b7       	in	r29, 0x3e	; 62
    825a:	ca 1b       	sub	r28, r26
    825c:	db 0b       	sbc	r29, r27
    825e:	0f b6       	in	r0, 0x3f	; 63
    8260:	f8 94       	cli
    8262:	de bf       	out	0x3e, r29	; 62
    8264:	0f be       	out	0x3f, r0	; 63
    8266:	cd bf       	out	0x3d, r28	; 61
    8268:	09 94       	ijmp

0000826a <__epilogue_restores__>:
    826a:	2a 88       	ldd	r2, Y+18	; 0x12
    826c:	39 88       	ldd	r3, Y+17	; 0x11
    826e:	48 88       	ldd	r4, Y+16	; 0x10
    8270:	5f 84       	ldd	r5, Y+15	; 0x0f
    8272:	6e 84       	ldd	r6, Y+14	; 0x0e
    8274:	7d 84       	ldd	r7, Y+13	; 0x0d
    8276:	8c 84       	ldd	r8, Y+12	; 0x0c
    8278:	9b 84       	ldd	r9, Y+11	; 0x0b
    827a:	aa 84       	ldd	r10, Y+10	; 0x0a
    827c:	b9 84       	ldd	r11, Y+9	; 0x09
    827e:	c8 84       	ldd	r12, Y+8	; 0x08
    8280:	df 80       	ldd	r13, Y+7	; 0x07
    8282:	ee 80       	ldd	r14, Y+6	; 0x06
    8284:	fd 80       	ldd	r15, Y+5	; 0x05
    8286:	0c 81       	ldd	r16, Y+4	; 0x04
    8288:	1b 81       	ldd	r17, Y+3	; 0x03
    828a:	aa 81       	ldd	r26, Y+2	; 0x02
    828c:	b9 81       	ldd	r27, Y+1	; 0x01
    828e:	ce 0f       	add	r28, r30
    8290:	d1 1d       	adc	r29, r1
    8292:	0f b6       	in	r0, 0x3f	; 63
    8294:	f8 94       	cli
    8296:	de bf       	out	0x3e, r29	; 62
    8298:	0f be       	out	0x3f, r0	; 63
    829a:	cd bf       	out	0x3d, r28	; 61
    829c:	ed 01       	movw	r28, r26
    829e:	08 95       	ret

000082a0 <__ashldi3>:
    82a0:	0f 93       	push	r16
    82a2:	08 30       	cpi	r16, 0x08	; 8
    82a4:	90 f0       	brcs	.+36     	; 0x82ca <__ashldi3+0x2a>
    82a6:	98 2f       	mov	r25, r24
    82a8:	87 2f       	mov	r24, r23
    82aa:	76 2f       	mov	r23, r22
    82ac:	65 2f       	mov	r22, r21
    82ae:	54 2f       	mov	r21, r20
    82b0:	43 2f       	mov	r20, r19
    82b2:	32 2f       	mov	r19, r18
    82b4:	22 27       	eor	r18, r18
    82b6:	08 50       	subi	r16, 0x08	; 8
    82b8:	f4 cf       	rjmp	.-24     	; 0x82a2 <__ashldi3+0x2>
    82ba:	22 0f       	add	r18, r18
    82bc:	33 1f       	adc	r19, r19
    82be:	44 1f       	adc	r20, r20
    82c0:	55 1f       	adc	r21, r21
    82c2:	66 1f       	adc	r22, r22
    82c4:	77 1f       	adc	r23, r23
    82c6:	88 1f       	adc	r24, r24
    82c8:	99 1f       	adc	r25, r25
    82ca:	0a 95       	dec	r16
    82cc:	b2 f7       	brpl	.-20     	; 0x82ba <__ashldi3+0x1a>
    82ce:	0f 91       	pop	r16
    82d0:	08 95       	ret

000082d2 <__ashrdi3>:
    82d2:	97 fb       	bst	r25, 7
    82d4:	10 f8       	bld	r1, 0

000082d6 <__lshrdi3>:
    82d6:	16 94       	lsr	r1
    82d8:	00 08       	sbc	r0, r0
    82da:	0f 93       	push	r16
    82dc:	08 30       	cpi	r16, 0x08	; 8
    82de:	98 f0       	brcs	.+38     	; 0x8306 <__lshrdi3+0x30>
    82e0:	08 50       	subi	r16, 0x08	; 8
    82e2:	23 2f       	mov	r18, r19
    82e4:	34 2f       	mov	r19, r20
    82e6:	45 2f       	mov	r20, r21
    82e8:	56 2f       	mov	r21, r22
    82ea:	67 2f       	mov	r22, r23
    82ec:	78 2f       	mov	r23, r24
    82ee:	89 2f       	mov	r24, r25
    82f0:	90 2d       	mov	r25, r0
    82f2:	f4 cf       	rjmp	.-24     	; 0x82dc <__lshrdi3+0x6>
    82f4:	05 94       	asr	r0
    82f6:	97 95       	ror	r25
    82f8:	87 95       	ror	r24
    82fa:	77 95       	ror	r23
    82fc:	67 95       	ror	r22
    82fe:	57 95       	ror	r21
    8300:	47 95       	ror	r20
    8302:	37 95       	ror	r19
    8304:	27 95       	ror	r18
    8306:	0a 95       	dec	r16
    8308:	aa f7       	brpl	.-22     	; 0x82f4 <__lshrdi3+0x1e>
    830a:	0f 91       	pop	r16
    830c:	08 95       	ret

0000830e <__adddi3>:
    830e:	2a 0d       	add	r18, r10
    8310:	3b 1d       	adc	r19, r11
    8312:	4c 1d       	adc	r20, r12
    8314:	5d 1d       	adc	r21, r13
    8316:	6e 1d       	adc	r22, r14
    8318:	7f 1d       	adc	r23, r15
    831a:	80 1f       	adc	r24, r16
    831c:	91 1f       	adc	r25, r17
    831e:	08 95       	ret

00008320 <__cmpdi2_s8>:
    8320:	00 24       	eor	r0, r0
    8322:	a7 fd       	sbrc	r26, 7
    8324:	00 94       	com	r0
    8326:	2a 17       	cp	r18, r26
    8328:	30 05       	cpc	r19, r0
    832a:	40 05       	cpc	r20, r0
    832c:	50 05       	cpc	r21, r0
    832e:	60 05       	cpc	r22, r0
    8330:	70 05       	cpc	r23, r0
    8332:	80 05       	cpc	r24, r0
    8334:	90 05       	cpc	r25, r0
    8336:	08 95       	ret

00008338 <dtostrf>:
    8338:	ef 92       	push	r14
    833a:	0f 93       	push	r16
    833c:	1f 93       	push	r17
    833e:	cf 93       	push	r28
    8340:	df 93       	push	r29
    8342:	e8 01       	movw	r28, r16
    8344:	47 fd       	sbrc	r20, 7
    8346:	02 c0       	rjmp	.+4      	; 0x834c <dtostrf+0x14>
    8348:	34 e0       	ldi	r19, 0x04	; 4
    834a:	01 c0       	rjmp	.+2      	; 0x834e <dtostrf+0x16>
    834c:	34 e1       	ldi	r19, 0x14	; 20
    834e:	04 2e       	mov	r0, r20
    8350:	00 0c       	add	r0, r0
    8352:	55 0b       	sbc	r21, r21
    8354:	57 ff       	sbrs	r21, 7
    8356:	03 c0       	rjmp	.+6      	; 0x835e <dtostrf+0x26>
    8358:	51 95       	neg	r21
    835a:	41 95       	neg	r20
    835c:	51 09       	sbc	r21, r1
    835e:	e3 2e       	mov	r14, r19
    8360:	02 2f       	mov	r16, r18
    8362:	24 2f       	mov	r18, r20
    8364:	ae 01       	movw	r20, r28
    8366:	a1 d2       	rcall	.+1346   	; 0x88aa <dtoa_prf>
    8368:	ce 01       	movw	r24, r28
    836a:	df 91       	pop	r29
    836c:	cf 91       	pop	r28
    836e:	1f 91       	pop	r17
    8370:	0f 91       	pop	r16
    8372:	ef 90       	pop	r14
    8374:	08 95       	ret

00008376 <malloc>:
    8376:	0f 93       	push	r16
    8378:	1f 93       	push	r17
    837a:	cf 93       	push	r28
    837c:	df 93       	push	r29
    837e:	82 30       	cpi	r24, 0x02	; 2
    8380:	91 05       	cpc	r25, r1
    8382:	10 f4       	brcc	.+4      	; 0x8388 <malloc+0x12>
    8384:	82 e0       	ldi	r24, 0x02	; 2
    8386:	90 e0       	ldi	r25, 0x00	; 0
    8388:	e0 91 05 0f 	lds	r30, 0x0F05	; 0x800f05 <__flp>
    838c:	f0 91 06 0f 	lds	r31, 0x0F06	; 0x800f06 <__flp+0x1>
    8390:	20 e0       	ldi	r18, 0x00	; 0
    8392:	30 e0       	ldi	r19, 0x00	; 0
    8394:	a0 e0       	ldi	r26, 0x00	; 0
    8396:	b0 e0       	ldi	r27, 0x00	; 0
    8398:	30 97       	sbiw	r30, 0x00	; 0
    839a:	19 f1       	breq	.+70     	; 0x83e2 <malloc+0x6c>
    839c:	40 81       	ld	r20, Z
    839e:	51 81       	ldd	r21, Z+1	; 0x01
    83a0:	02 81       	ldd	r16, Z+2	; 0x02
    83a2:	13 81       	ldd	r17, Z+3	; 0x03
    83a4:	48 17       	cp	r20, r24
    83a6:	59 07       	cpc	r21, r25
    83a8:	c8 f0       	brcs	.+50     	; 0x83dc <malloc+0x66>
    83aa:	84 17       	cp	r24, r20
    83ac:	95 07       	cpc	r25, r21
    83ae:	69 f4       	brne	.+26     	; 0x83ca <malloc+0x54>
    83b0:	10 97       	sbiw	r26, 0x00	; 0
    83b2:	31 f0       	breq	.+12     	; 0x83c0 <malloc+0x4a>
    83b4:	12 96       	adiw	r26, 0x02	; 2
    83b6:	0c 93       	st	X, r16
    83b8:	12 97       	sbiw	r26, 0x02	; 2
    83ba:	13 96       	adiw	r26, 0x03	; 3
    83bc:	1c 93       	st	X, r17
    83be:	27 c0       	rjmp	.+78     	; 0x840e <malloc+0x98>
    83c0:	00 93 05 0f 	sts	0x0F05, r16	; 0x800f05 <__flp>
    83c4:	10 93 06 0f 	sts	0x0F06, r17	; 0x800f06 <__flp+0x1>
    83c8:	22 c0       	rjmp	.+68     	; 0x840e <malloc+0x98>
    83ca:	21 15       	cp	r18, r1
    83cc:	31 05       	cpc	r19, r1
    83ce:	19 f0       	breq	.+6      	; 0x83d6 <malloc+0x60>
    83d0:	42 17       	cp	r20, r18
    83d2:	53 07       	cpc	r21, r19
    83d4:	18 f4       	brcc	.+6      	; 0x83dc <malloc+0x66>
    83d6:	9a 01       	movw	r18, r20
    83d8:	bd 01       	movw	r22, r26
    83da:	ef 01       	movw	r28, r30
    83dc:	df 01       	movw	r26, r30
    83de:	f8 01       	movw	r30, r16
    83e0:	db cf       	rjmp	.-74     	; 0x8398 <malloc+0x22>
    83e2:	21 15       	cp	r18, r1
    83e4:	31 05       	cpc	r19, r1
    83e6:	f9 f0       	breq	.+62     	; 0x8426 <malloc+0xb0>
    83e8:	28 1b       	sub	r18, r24
    83ea:	39 0b       	sbc	r19, r25
    83ec:	24 30       	cpi	r18, 0x04	; 4
    83ee:	31 05       	cpc	r19, r1
    83f0:	80 f4       	brcc	.+32     	; 0x8412 <malloc+0x9c>
    83f2:	8a 81       	ldd	r24, Y+2	; 0x02
    83f4:	9b 81       	ldd	r25, Y+3	; 0x03
    83f6:	61 15       	cp	r22, r1
    83f8:	71 05       	cpc	r23, r1
    83fa:	21 f0       	breq	.+8      	; 0x8404 <malloc+0x8e>
    83fc:	fb 01       	movw	r30, r22
    83fe:	93 83       	std	Z+3, r25	; 0x03
    8400:	82 83       	std	Z+2, r24	; 0x02
    8402:	04 c0       	rjmp	.+8      	; 0x840c <malloc+0x96>
    8404:	90 93 06 0f 	sts	0x0F06, r25	; 0x800f06 <__flp+0x1>
    8408:	80 93 05 0f 	sts	0x0F05, r24	; 0x800f05 <__flp>
    840c:	fe 01       	movw	r30, r28
    840e:	32 96       	adiw	r30, 0x02	; 2
    8410:	44 c0       	rjmp	.+136    	; 0x849a <malloc+0x124>
    8412:	fe 01       	movw	r30, r28
    8414:	e2 0f       	add	r30, r18
    8416:	f3 1f       	adc	r31, r19
    8418:	81 93       	st	Z+, r24
    841a:	91 93       	st	Z+, r25
    841c:	22 50       	subi	r18, 0x02	; 2
    841e:	31 09       	sbc	r19, r1
    8420:	39 83       	std	Y+1, r19	; 0x01
    8422:	28 83       	st	Y, r18
    8424:	3a c0       	rjmp	.+116    	; 0x849a <malloc+0x124>
    8426:	20 91 03 0f 	lds	r18, 0x0F03	; 0x800f03 <__brkval>
    842a:	30 91 04 0f 	lds	r19, 0x0F04	; 0x800f04 <__brkval+0x1>
    842e:	23 2b       	or	r18, r19
    8430:	41 f4       	brne	.+16     	; 0x8442 <malloc+0xcc>
    8432:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    8436:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    843a:	30 93 04 0f 	sts	0x0F04, r19	; 0x800f04 <__brkval+0x1>
    843e:	20 93 03 0f 	sts	0x0F03, r18	; 0x800f03 <__brkval>
    8442:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    8446:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    844a:	21 15       	cp	r18, r1
    844c:	31 05       	cpc	r19, r1
    844e:	41 f4       	brne	.+16     	; 0x8460 <malloc+0xea>
    8450:	2d b7       	in	r18, 0x3d	; 61
    8452:	3e b7       	in	r19, 0x3e	; 62
    8454:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    8458:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    845c:	24 1b       	sub	r18, r20
    845e:	35 0b       	sbc	r19, r21
    8460:	e0 91 03 0f 	lds	r30, 0x0F03	; 0x800f03 <__brkval>
    8464:	f0 91 04 0f 	lds	r31, 0x0F04	; 0x800f04 <__brkval+0x1>
    8468:	e2 17       	cp	r30, r18
    846a:	f3 07       	cpc	r31, r19
    846c:	a0 f4       	brcc	.+40     	; 0x8496 <malloc+0x120>
    846e:	2e 1b       	sub	r18, r30
    8470:	3f 0b       	sbc	r19, r31
    8472:	28 17       	cp	r18, r24
    8474:	39 07       	cpc	r19, r25
    8476:	78 f0       	brcs	.+30     	; 0x8496 <malloc+0x120>
    8478:	ac 01       	movw	r20, r24
    847a:	4e 5f       	subi	r20, 0xFE	; 254
    847c:	5f 4f       	sbci	r21, 0xFF	; 255
    847e:	24 17       	cp	r18, r20
    8480:	35 07       	cpc	r19, r21
    8482:	48 f0       	brcs	.+18     	; 0x8496 <malloc+0x120>
    8484:	4e 0f       	add	r20, r30
    8486:	5f 1f       	adc	r21, r31
    8488:	50 93 04 0f 	sts	0x0F04, r21	; 0x800f04 <__brkval+0x1>
    848c:	40 93 03 0f 	sts	0x0F03, r20	; 0x800f03 <__brkval>
    8490:	81 93       	st	Z+, r24
    8492:	91 93       	st	Z+, r25
    8494:	02 c0       	rjmp	.+4      	; 0x849a <malloc+0x124>
    8496:	e0 e0       	ldi	r30, 0x00	; 0
    8498:	f0 e0       	ldi	r31, 0x00	; 0
    849a:	cf 01       	movw	r24, r30
    849c:	df 91       	pop	r29
    849e:	cf 91       	pop	r28
    84a0:	1f 91       	pop	r17
    84a2:	0f 91       	pop	r16
    84a4:	08 95       	ret

000084a6 <free>:
    84a6:	cf 93       	push	r28
    84a8:	df 93       	push	r29
    84aa:	00 97       	sbiw	r24, 0x00	; 0
    84ac:	09 f4       	brne	.+2      	; 0x84b0 <free+0xa>
    84ae:	81 c0       	rjmp	.+258    	; 0x85b2 <free+0x10c>
    84b0:	fc 01       	movw	r30, r24
    84b2:	32 97       	sbiw	r30, 0x02	; 2
    84b4:	13 82       	std	Z+3, r1	; 0x03
    84b6:	12 82       	std	Z+2, r1	; 0x02
    84b8:	a0 91 05 0f 	lds	r26, 0x0F05	; 0x800f05 <__flp>
    84bc:	b0 91 06 0f 	lds	r27, 0x0F06	; 0x800f06 <__flp+0x1>
    84c0:	10 97       	sbiw	r26, 0x00	; 0
    84c2:	81 f4       	brne	.+32     	; 0x84e4 <free+0x3e>
    84c4:	20 81       	ld	r18, Z
    84c6:	31 81       	ldd	r19, Z+1	; 0x01
    84c8:	82 0f       	add	r24, r18
    84ca:	93 1f       	adc	r25, r19
    84cc:	20 91 03 0f 	lds	r18, 0x0F03	; 0x800f03 <__brkval>
    84d0:	30 91 04 0f 	lds	r19, 0x0F04	; 0x800f04 <__brkval+0x1>
    84d4:	28 17       	cp	r18, r24
    84d6:	39 07       	cpc	r19, r25
    84d8:	51 f5       	brne	.+84     	; 0x852e <free+0x88>
    84da:	f0 93 04 0f 	sts	0x0F04, r31	; 0x800f04 <__brkval+0x1>
    84de:	e0 93 03 0f 	sts	0x0F03, r30	; 0x800f03 <__brkval>
    84e2:	67 c0       	rjmp	.+206    	; 0x85b2 <free+0x10c>
    84e4:	ed 01       	movw	r28, r26
    84e6:	20 e0       	ldi	r18, 0x00	; 0
    84e8:	30 e0       	ldi	r19, 0x00	; 0
    84ea:	ce 17       	cp	r28, r30
    84ec:	df 07       	cpc	r29, r31
    84ee:	40 f4       	brcc	.+16     	; 0x8500 <free+0x5a>
    84f0:	4a 81       	ldd	r20, Y+2	; 0x02
    84f2:	5b 81       	ldd	r21, Y+3	; 0x03
    84f4:	9e 01       	movw	r18, r28
    84f6:	41 15       	cp	r20, r1
    84f8:	51 05       	cpc	r21, r1
    84fa:	f1 f0       	breq	.+60     	; 0x8538 <free+0x92>
    84fc:	ea 01       	movw	r28, r20
    84fe:	f5 cf       	rjmp	.-22     	; 0x84ea <free+0x44>
    8500:	d3 83       	std	Z+3, r29	; 0x03
    8502:	c2 83       	std	Z+2, r28	; 0x02
    8504:	40 81       	ld	r20, Z
    8506:	51 81       	ldd	r21, Z+1	; 0x01
    8508:	84 0f       	add	r24, r20
    850a:	95 1f       	adc	r25, r21
    850c:	c8 17       	cp	r28, r24
    850e:	d9 07       	cpc	r29, r25
    8510:	59 f4       	brne	.+22     	; 0x8528 <free+0x82>
    8512:	88 81       	ld	r24, Y
    8514:	99 81       	ldd	r25, Y+1	; 0x01
    8516:	84 0f       	add	r24, r20
    8518:	95 1f       	adc	r25, r21
    851a:	02 96       	adiw	r24, 0x02	; 2
    851c:	91 83       	std	Z+1, r25	; 0x01
    851e:	80 83       	st	Z, r24
    8520:	8a 81       	ldd	r24, Y+2	; 0x02
    8522:	9b 81       	ldd	r25, Y+3	; 0x03
    8524:	93 83       	std	Z+3, r25	; 0x03
    8526:	82 83       	std	Z+2, r24	; 0x02
    8528:	21 15       	cp	r18, r1
    852a:	31 05       	cpc	r19, r1
    852c:	29 f4       	brne	.+10     	; 0x8538 <free+0x92>
    852e:	f0 93 06 0f 	sts	0x0F06, r31	; 0x800f06 <__flp+0x1>
    8532:	e0 93 05 0f 	sts	0x0F05, r30	; 0x800f05 <__flp>
    8536:	3d c0       	rjmp	.+122    	; 0x85b2 <free+0x10c>
    8538:	e9 01       	movw	r28, r18
    853a:	fb 83       	std	Y+3, r31	; 0x03
    853c:	ea 83       	std	Y+2, r30	; 0x02
    853e:	49 91       	ld	r20, Y+
    8540:	59 91       	ld	r21, Y+
    8542:	c4 0f       	add	r28, r20
    8544:	d5 1f       	adc	r29, r21
    8546:	ec 17       	cp	r30, r28
    8548:	fd 07       	cpc	r31, r29
    854a:	61 f4       	brne	.+24     	; 0x8564 <free+0xbe>
    854c:	80 81       	ld	r24, Z
    854e:	91 81       	ldd	r25, Z+1	; 0x01
    8550:	84 0f       	add	r24, r20
    8552:	95 1f       	adc	r25, r21
    8554:	02 96       	adiw	r24, 0x02	; 2
    8556:	e9 01       	movw	r28, r18
    8558:	99 83       	std	Y+1, r25	; 0x01
    855a:	88 83       	st	Y, r24
    855c:	82 81       	ldd	r24, Z+2	; 0x02
    855e:	93 81       	ldd	r25, Z+3	; 0x03
    8560:	9b 83       	std	Y+3, r25	; 0x03
    8562:	8a 83       	std	Y+2, r24	; 0x02
    8564:	e0 e0       	ldi	r30, 0x00	; 0
    8566:	f0 e0       	ldi	r31, 0x00	; 0
    8568:	12 96       	adiw	r26, 0x02	; 2
    856a:	8d 91       	ld	r24, X+
    856c:	9c 91       	ld	r25, X
    856e:	13 97       	sbiw	r26, 0x03	; 3
    8570:	00 97       	sbiw	r24, 0x00	; 0
    8572:	19 f0       	breq	.+6      	; 0x857a <free+0xd4>
    8574:	fd 01       	movw	r30, r26
    8576:	dc 01       	movw	r26, r24
    8578:	f7 cf       	rjmp	.-18     	; 0x8568 <free+0xc2>
    857a:	8d 91       	ld	r24, X+
    857c:	9c 91       	ld	r25, X
    857e:	11 97       	sbiw	r26, 0x01	; 1
    8580:	9d 01       	movw	r18, r26
    8582:	2e 5f       	subi	r18, 0xFE	; 254
    8584:	3f 4f       	sbci	r19, 0xFF	; 255
    8586:	82 0f       	add	r24, r18
    8588:	93 1f       	adc	r25, r19
    858a:	20 91 03 0f 	lds	r18, 0x0F03	; 0x800f03 <__brkval>
    858e:	30 91 04 0f 	lds	r19, 0x0F04	; 0x800f04 <__brkval+0x1>
    8592:	28 17       	cp	r18, r24
    8594:	39 07       	cpc	r19, r25
    8596:	69 f4       	brne	.+26     	; 0x85b2 <free+0x10c>
    8598:	30 97       	sbiw	r30, 0x00	; 0
    859a:	29 f4       	brne	.+10     	; 0x85a6 <free+0x100>
    859c:	10 92 06 0f 	sts	0x0F06, r1	; 0x800f06 <__flp+0x1>
    85a0:	10 92 05 0f 	sts	0x0F05, r1	; 0x800f05 <__flp>
    85a4:	02 c0       	rjmp	.+4      	; 0x85aa <free+0x104>
    85a6:	13 82       	std	Z+3, r1	; 0x03
    85a8:	12 82       	std	Z+2, r1	; 0x02
    85aa:	b0 93 04 0f 	sts	0x0F04, r27	; 0x800f04 <__brkval+0x1>
    85ae:	a0 93 03 0f 	sts	0x0F03, r26	; 0x800f03 <__brkval>
    85b2:	df 91       	pop	r29
    85b4:	cf 91       	pop	r28
    85b6:	08 95       	ret

000085b8 <realloc>:
    85b8:	6f 92       	push	r6
    85ba:	7f 92       	push	r7
    85bc:	8f 92       	push	r8
    85be:	9f 92       	push	r9
    85c0:	af 92       	push	r10
    85c2:	bf 92       	push	r11
    85c4:	cf 92       	push	r12
    85c6:	df 92       	push	r13
    85c8:	ef 92       	push	r14
    85ca:	ff 92       	push	r15
    85cc:	0f 93       	push	r16
    85ce:	1f 93       	push	r17
    85d0:	cf 93       	push	r28
    85d2:	df 93       	push	r29
    85d4:	00 97       	sbiw	r24, 0x00	; 0
    85d6:	81 f4       	brne	.+32     	; 0x85f8 <realloc+0x40>
    85d8:	cb 01       	movw	r24, r22
    85da:	df 91       	pop	r29
    85dc:	cf 91       	pop	r28
    85de:	1f 91       	pop	r17
    85e0:	0f 91       	pop	r16
    85e2:	ff 90       	pop	r15
    85e4:	ef 90       	pop	r14
    85e6:	df 90       	pop	r13
    85e8:	cf 90       	pop	r12
    85ea:	bf 90       	pop	r11
    85ec:	af 90       	pop	r10
    85ee:	9f 90       	pop	r9
    85f0:	8f 90       	pop	r8
    85f2:	7f 90       	pop	r7
    85f4:	6f 90       	pop	r6
    85f6:	bf ce       	rjmp	.-642    	; 0x8376 <malloc>
    85f8:	fc 01       	movw	r30, r24
    85fa:	e6 0f       	add	r30, r22
    85fc:	f7 1f       	adc	r31, r23
    85fe:	9c 01       	movw	r18, r24
    8600:	22 50       	subi	r18, 0x02	; 2
    8602:	31 09       	sbc	r19, r1
    8604:	e2 17       	cp	r30, r18
    8606:	f3 07       	cpc	r31, r19
    8608:	08 f4       	brcc	.+2      	; 0x860c <realloc+0x54>
    860a:	a5 c0       	rjmp	.+330    	; 0x8756 <realloc+0x19e>
    860c:	ec 01       	movw	r28, r24
    860e:	d9 01       	movw	r26, r18
    8610:	0d 91       	ld	r16, X+
    8612:	1c 91       	ld	r17, X
    8614:	11 97       	sbiw	r26, 0x01	; 1
    8616:	06 17       	cp	r16, r22
    8618:	17 07       	cpc	r17, r23
    861a:	a8 f0       	brcs	.+42     	; 0x8646 <realloc+0x8e>
    861c:	05 30       	cpi	r16, 0x05	; 5
    861e:	11 05       	cpc	r17, r1
    8620:	08 f4       	brcc	.+2      	; 0x8624 <realloc+0x6c>
    8622:	97 c0       	rjmp	.+302    	; 0x8752 <realloc+0x19a>
    8624:	c8 01       	movw	r24, r16
    8626:	04 97       	sbiw	r24, 0x04	; 4
    8628:	86 17       	cp	r24, r22
    862a:	97 07       	cpc	r25, r23
    862c:	08 f4       	brcc	.+2      	; 0x8630 <realloc+0x78>
    862e:	91 c0       	rjmp	.+290    	; 0x8752 <realloc+0x19a>
    8630:	02 50       	subi	r16, 0x02	; 2
    8632:	11 09       	sbc	r17, r1
    8634:	06 1b       	sub	r16, r22
    8636:	17 0b       	sbc	r17, r23
    8638:	01 93       	st	Z+, r16
    863a:	11 93       	st	Z+, r17
    863c:	6d 93       	st	X+, r22
    863e:	7c 93       	st	X, r23
    8640:	cf 01       	movw	r24, r30
    8642:	31 df       	rcall	.-414    	; 0x84a6 <free>
    8644:	86 c0       	rjmp	.+268    	; 0x8752 <realloc+0x19a>
    8646:	5b 01       	movw	r10, r22
    8648:	a0 1a       	sub	r10, r16
    864a:	b1 0a       	sbc	r11, r17
    864c:	4c 01       	movw	r8, r24
    864e:	80 0e       	add	r8, r16
    8650:	91 1e       	adc	r9, r17
    8652:	a0 91 05 0f 	lds	r26, 0x0F05	; 0x800f05 <__flp>
    8656:	b0 91 06 0f 	lds	r27, 0x0F06	; 0x800f06 <__flp+0x1>
    865a:	61 2c       	mov	r6, r1
    865c:	71 2c       	mov	r7, r1
    865e:	e1 2c       	mov	r14, r1
    8660:	f1 2c       	mov	r15, r1
    8662:	10 97       	sbiw	r26, 0x00	; 0
    8664:	09 f4       	brne	.+2      	; 0x8668 <realloc+0xb0>
    8666:	46 c0       	rjmp	.+140    	; 0x86f4 <realloc+0x13c>
    8668:	8d 91       	ld	r24, X+
    866a:	9c 91       	ld	r25, X
    866c:	11 97       	sbiw	r26, 0x01	; 1
    866e:	a8 15       	cp	r26, r8
    8670:	b9 05       	cpc	r27, r9
    8672:	b1 f5       	brne	.+108    	; 0x86e0 <realloc+0x128>
    8674:	6c 01       	movw	r12, r24
    8676:	42 e0       	ldi	r20, 0x02	; 2
    8678:	c4 0e       	add	r12, r20
    867a:	d1 1c       	adc	r13, r1
    867c:	ca 14       	cp	r12, r10
    867e:	db 04       	cpc	r13, r11
    8680:	78 f1       	brcs	.+94     	; 0x86e0 <realloc+0x128>
    8682:	4c 01       	movw	r8, r24
    8684:	8a 18       	sub	r8, r10
    8686:	9b 08       	sbc	r9, r11
    8688:	64 01       	movw	r12, r8
    868a:	42 e0       	ldi	r20, 0x02	; 2
    868c:	c4 0e       	add	r12, r20
    868e:	d1 1c       	adc	r13, r1
    8690:	12 96       	adiw	r26, 0x02	; 2
    8692:	bc 90       	ld	r11, X
    8694:	12 97       	sbiw	r26, 0x02	; 2
    8696:	13 96       	adiw	r26, 0x03	; 3
    8698:	ac 91       	ld	r26, X
    869a:	b5 e0       	ldi	r27, 0x05	; 5
    869c:	cb 16       	cp	r12, r27
    869e:	d1 04       	cpc	r13, r1
    86a0:	40 f0       	brcs	.+16     	; 0x86b2 <realloc+0xfa>
    86a2:	b2 82       	std	Z+2, r11	; 0x02
    86a4:	a3 83       	std	Z+3, r26	; 0x03
    86a6:	91 82       	std	Z+1, r9	; 0x01
    86a8:	80 82       	st	Z, r8
    86aa:	d9 01       	movw	r26, r18
    86ac:	6d 93       	st	X+, r22
    86ae:	7c 93       	st	X, r23
    86b0:	09 c0       	rjmp	.+18     	; 0x86c4 <realloc+0x10c>
    86b2:	0e 5f       	subi	r16, 0xFE	; 254
    86b4:	1f 4f       	sbci	r17, 0xFF	; 255
    86b6:	80 0f       	add	r24, r16
    86b8:	91 1f       	adc	r25, r17
    86ba:	f9 01       	movw	r30, r18
    86bc:	91 83       	std	Z+1, r25	; 0x01
    86be:	80 83       	st	Z, r24
    86c0:	eb 2d       	mov	r30, r11
    86c2:	fa 2f       	mov	r31, r26
    86c4:	e1 14       	cp	r14, r1
    86c6:	f1 04       	cpc	r15, r1
    86c8:	31 f0       	breq	.+12     	; 0x86d6 <realloc+0x11e>
    86ca:	d7 01       	movw	r26, r14
    86cc:	13 96       	adiw	r26, 0x03	; 3
    86ce:	fc 93       	st	X, r31
    86d0:	ee 93       	st	-X, r30
    86d2:	12 97       	sbiw	r26, 0x02	; 2
    86d4:	3e c0       	rjmp	.+124    	; 0x8752 <realloc+0x19a>
    86d6:	f0 93 06 0f 	sts	0x0F06, r31	; 0x800f06 <__flp+0x1>
    86da:	e0 93 05 0f 	sts	0x0F05, r30	; 0x800f05 <__flp>
    86de:	39 c0       	rjmp	.+114    	; 0x8752 <realloc+0x19a>
    86e0:	68 16       	cp	r6, r24
    86e2:	79 06       	cpc	r7, r25
    86e4:	08 f4       	brcc	.+2      	; 0x86e8 <realloc+0x130>
    86e6:	3c 01       	movw	r6, r24
    86e8:	7d 01       	movw	r14, r26
    86ea:	12 96       	adiw	r26, 0x02	; 2
    86ec:	0d 90       	ld	r0, X+
    86ee:	bc 91       	ld	r27, X
    86f0:	a0 2d       	mov	r26, r0
    86f2:	b7 cf       	rjmp	.-146    	; 0x8662 <realloc+0xaa>
    86f4:	80 91 03 0f 	lds	r24, 0x0F03	; 0x800f03 <__brkval>
    86f8:	90 91 04 0f 	lds	r25, 0x0F04	; 0x800f04 <__brkval+0x1>
    86fc:	88 16       	cp	r8, r24
    86fe:	99 06       	cpc	r9, r25
    8700:	e1 f4       	brne	.+56     	; 0x873a <realloc+0x182>
    8702:	66 16       	cp	r6, r22
    8704:	77 06       	cpc	r7, r23
    8706:	c8 f4       	brcc	.+50     	; 0x873a <realloc+0x182>
    8708:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    870c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    8710:	00 97       	sbiw	r24, 0x00	; 0
    8712:	41 f4       	brne	.+16     	; 0x8724 <realloc+0x16c>
    8714:	8d b7       	in	r24, 0x3d	; 61
    8716:	9e b7       	in	r25, 0x3e	; 62
    8718:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    871c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    8720:	84 1b       	sub	r24, r20
    8722:	95 0b       	sbc	r25, r21
    8724:	e8 17       	cp	r30, r24
    8726:	f9 07       	cpc	r31, r25
    8728:	b0 f4       	brcc	.+44     	; 0x8756 <realloc+0x19e>
    872a:	f0 93 04 0f 	sts	0x0F04, r31	; 0x800f04 <__brkval+0x1>
    872e:	e0 93 03 0f 	sts	0x0F03, r30	; 0x800f03 <__brkval>
    8732:	f9 01       	movw	r30, r18
    8734:	71 83       	std	Z+1, r23	; 0x01
    8736:	60 83       	st	Z, r22
    8738:	0c c0       	rjmp	.+24     	; 0x8752 <realloc+0x19a>
    873a:	cb 01       	movw	r24, r22
    873c:	1c de       	rcall	.-968    	; 0x8376 <malloc>
    873e:	7c 01       	movw	r14, r24
    8740:	00 97       	sbiw	r24, 0x00	; 0
    8742:	49 f0       	breq	.+18     	; 0x8756 <realloc+0x19e>
    8744:	a8 01       	movw	r20, r16
    8746:	be 01       	movw	r22, r28
    8748:	2c d0       	rcall	.+88     	; 0x87a2 <memcpy>
    874a:	ce 01       	movw	r24, r28
    874c:	ac de       	rcall	.-680    	; 0x84a6 <free>
    874e:	c7 01       	movw	r24, r14
    8750:	04 c0       	rjmp	.+8      	; 0x875a <realloc+0x1a2>
    8752:	ce 01       	movw	r24, r28
    8754:	02 c0       	rjmp	.+4      	; 0x875a <realloc+0x1a2>
    8756:	80 e0       	ldi	r24, 0x00	; 0
    8758:	90 e0       	ldi	r25, 0x00	; 0
    875a:	df 91       	pop	r29
    875c:	cf 91       	pop	r28
    875e:	1f 91       	pop	r17
    8760:	0f 91       	pop	r16
    8762:	ff 90       	pop	r15
    8764:	ef 90       	pop	r14
    8766:	df 90       	pop	r13
    8768:	cf 90       	pop	r12
    876a:	bf 90       	pop	r11
    876c:	af 90       	pop	r10
    876e:	9f 90       	pop	r9
    8770:	8f 90       	pop	r8
    8772:	7f 90       	pop	r7
    8774:	6f 90       	pop	r6
    8776:	08 95       	ret

00008778 <abort>:
    8778:	81 e0       	ldi	r24, 0x01	; 1
    877a:	90 e0       	ldi	r25, 0x00	; 0
    877c:	f8 94       	cli
    877e:	f6 c2       	rjmp	.+1516   	; 0x8d6c <__do_global_dtors>

00008780 <isspace>:
    8780:	91 11       	cpse	r25, r1
    8782:	e1 c2       	rjmp	.+1474   	; 0x8d46 <__ctype_isfalse>
    8784:	80 32       	cpi	r24, 0x20	; 32
    8786:	19 f0       	breq	.+6      	; 0x878e <isspace+0xe>
    8788:	89 50       	subi	r24, 0x09	; 9
    878a:	85 50       	subi	r24, 0x05	; 5
    878c:	d0 f7       	brcc	.-12     	; 0x8782 <isspace+0x2>
    878e:	08 95       	ret

00008790 <memcpy_P>:
    8790:	fb 01       	movw	r30, r22
    8792:	dc 01       	movw	r26, r24
    8794:	02 c0       	rjmp	.+4      	; 0x879a <memcpy_P+0xa>
    8796:	05 90       	lpm	r0, Z+
    8798:	0d 92       	st	X+, r0
    879a:	41 50       	subi	r20, 0x01	; 1
    879c:	50 40       	sbci	r21, 0x00	; 0
    879e:	d8 f7       	brcc	.-10     	; 0x8796 <memcpy_P+0x6>
    87a0:	08 95       	ret

000087a2 <memcpy>:
    87a2:	fb 01       	movw	r30, r22
    87a4:	dc 01       	movw	r26, r24
    87a6:	02 c0       	rjmp	.+4      	; 0x87ac <memcpy+0xa>
    87a8:	01 90       	ld	r0, Z+
    87aa:	0d 92       	st	X+, r0
    87ac:	41 50       	subi	r20, 0x01	; 1
    87ae:	50 40       	sbci	r21, 0x00	; 0
    87b0:	d8 f7       	brcc	.-10     	; 0x87a8 <memcpy+0x6>
    87b2:	08 95       	ret

000087b4 <strcmp>:
    87b4:	fb 01       	movw	r30, r22
    87b6:	dc 01       	movw	r26, r24
    87b8:	8d 91       	ld	r24, X+
    87ba:	01 90       	ld	r0, Z+
    87bc:	80 19       	sub	r24, r0
    87be:	01 10       	cpse	r0, r1
    87c0:	d9 f3       	breq	.-10     	; 0x87b8 <strcmp+0x4>
    87c2:	99 0b       	sbc	r25, r25
    87c4:	08 95       	ret

000087c6 <strcpy>:
    87c6:	fb 01       	movw	r30, r22
    87c8:	dc 01       	movw	r26, r24
    87ca:	01 90       	ld	r0, Z+
    87cc:	0d 92       	st	X+, r0
    87ce:	00 20       	and	r0, r0
    87d0:	e1 f7       	brne	.-8      	; 0x87ca <strcpy+0x4>
    87d2:	08 95       	ret

000087d4 <strncmp>:
    87d4:	fb 01       	movw	r30, r22
    87d6:	dc 01       	movw	r26, r24
    87d8:	41 50       	subi	r20, 0x01	; 1
    87da:	50 40       	sbci	r21, 0x00	; 0
    87dc:	30 f0       	brcs	.+12     	; 0x87ea <strncmp+0x16>
    87de:	8d 91       	ld	r24, X+
    87e0:	01 90       	ld	r0, Z+
    87e2:	80 19       	sub	r24, r0
    87e4:	19 f4       	brne	.+6      	; 0x87ec <strncmp+0x18>
    87e6:	00 20       	and	r0, r0
    87e8:	b9 f7       	brne	.-18     	; 0x87d8 <strncmp+0x4>
    87ea:	88 1b       	sub	r24, r24
    87ec:	99 0b       	sbc	r25, r25
    87ee:	08 95       	ret

000087f0 <strncpy>:
    87f0:	fb 01       	movw	r30, r22
    87f2:	dc 01       	movw	r26, r24
    87f4:	41 50       	subi	r20, 0x01	; 1
    87f6:	50 40       	sbci	r21, 0x00	; 0
    87f8:	48 f0       	brcs	.+18     	; 0x880c <strncpy+0x1c>
    87fa:	01 90       	ld	r0, Z+
    87fc:	0d 92       	st	X+, r0
    87fe:	00 20       	and	r0, r0
    8800:	c9 f7       	brne	.-14     	; 0x87f4 <strncpy+0x4>
    8802:	01 c0       	rjmp	.+2      	; 0x8806 <strncpy+0x16>
    8804:	1d 92       	st	X+, r1
    8806:	41 50       	subi	r20, 0x01	; 1
    8808:	50 40       	sbci	r21, 0x00	; 0
    880a:	e0 f7       	brcc	.-8      	; 0x8804 <strncpy+0x14>
    880c:	08 95       	ret

0000880e <ultoa>:
    880e:	25 32       	cpi	r18, 0x25	; 37
    8810:	31 05       	cpc	r19, r1
    8812:	18 f4       	brcc	.+6      	; 0x881a <ultoa+0xc>
    8814:	22 30       	cpi	r18, 0x02	; 2
    8816:	08 f0       	brcs	.+2      	; 0x881a <ultoa+0xc>
    8818:	04 c0       	rjmp	.+8      	; 0x8822 <__ultoa_ncheck>
    881a:	fa 01       	movw	r30, r20
    881c:	10 82       	st	Z, r1
    881e:	ca 01       	movw	r24, r20
    8820:	08 95       	ret

00008822 <__ultoa_ncheck>:
    8822:	bb 27       	eor	r27, r27

00008824 <__ultoa_common>:
    8824:	fa 01       	movw	r30, r20
    8826:	a6 2f       	mov	r26, r22
    8828:	62 17       	cp	r22, r18
    882a:	71 05       	cpc	r23, r1
    882c:	81 05       	cpc	r24, r1
    882e:	91 05       	cpc	r25, r1
    8830:	33 0b       	sbc	r19, r19
    8832:	30 fb       	bst	r19, 0
    8834:	66 f0       	brts	.+24     	; 0x884e <__ultoa_common+0x2a>
    8836:	aa 27       	eor	r26, r26
    8838:	66 0f       	add	r22, r22
    883a:	77 1f       	adc	r23, r23
    883c:	88 1f       	adc	r24, r24
    883e:	99 1f       	adc	r25, r25
    8840:	aa 1f       	adc	r26, r26
    8842:	a2 17       	cp	r26, r18
    8844:	10 f0       	brcs	.+4      	; 0x884a <__ultoa_common+0x26>
    8846:	a2 1b       	sub	r26, r18
    8848:	63 95       	inc	r22
    884a:	38 50       	subi	r19, 0x08	; 8
    884c:	a9 f7       	brne	.-22     	; 0x8838 <__ultoa_common+0x14>
    884e:	a0 5d       	subi	r26, 0xD0	; 208
    8850:	aa 33       	cpi	r26, 0x3A	; 58
    8852:	08 f0       	brcs	.+2      	; 0x8856 <__ultoa_common+0x32>
    8854:	a9 5d       	subi	r26, 0xD9	; 217
    8856:	a1 93       	st	Z+, r26
    8858:	36 f7       	brtc	.-52     	; 0x8826 <__ultoa_common+0x2>
    885a:	b1 11       	cpse	r27, r1
    885c:	b1 93       	st	Z+, r27
    885e:	10 82       	st	Z, r1
    8860:	ca 01       	movw	r24, r20
    8862:	74 c2       	rjmp	.+1256   	; 0x8d4c <strrev>

00008864 <utoa>:
    8864:	45 32       	cpi	r20, 0x25	; 37
    8866:	51 05       	cpc	r21, r1
    8868:	18 f4       	brcc	.+6      	; 0x8870 <utoa+0xc>
    886a:	42 30       	cpi	r20, 0x02	; 2
    886c:	08 f0       	brcs	.+2      	; 0x8870 <utoa+0xc>
    886e:	04 c0       	rjmp	.+8      	; 0x8878 <__utoa_ncheck>
    8870:	fb 01       	movw	r30, r22
    8872:	10 82       	st	Z, r1
    8874:	cb 01       	movw	r24, r22
    8876:	08 95       	ret

00008878 <__utoa_ncheck>:
    8878:	bb 27       	eor	r27, r27

0000887a <__utoa_common>:
    887a:	fb 01       	movw	r30, r22
    887c:	55 27       	eor	r21, r21
    887e:	aa 27       	eor	r26, r26
    8880:	88 0f       	add	r24, r24
    8882:	99 1f       	adc	r25, r25
    8884:	aa 1f       	adc	r26, r26
    8886:	a4 17       	cp	r26, r20
    8888:	10 f0       	brcs	.+4      	; 0x888e <__utoa_common+0x14>
    888a:	a4 1b       	sub	r26, r20
    888c:	83 95       	inc	r24
    888e:	50 51       	subi	r21, 0x10	; 16
    8890:	b9 f7       	brne	.-18     	; 0x8880 <__utoa_common+0x6>
    8892:	a0 5d       	subi	r26, 0xD0	; 208
    8894:	aa 33       	cpi	r26, 0x3A	; 58
    8896:	08 f0       	brcs	.+2      	; 0x889a <__utoa_common+0x20>
    8898:	a9 5d       	subi	r26, 0xD9	; 217
    889a:	a1 93       	st	Z+, r26
    889c:	00 97       	sbiw	r24, 0x00	; 0
    889e:	79 f7       	brne	.-34     	; 0x887e <__utoa_common+0x4>
    88a0:	b1 11       	cpse	r27, r1
    88a2:	b1 93       	st	Z+, r27
    88a4:	11 92       	st	Z+, r1
    88a6:	cb 01       	movw	r24, r22
    88a8:	51 c2       	rjmp	.+1186   	; 0x8d4c <strrev>

000088aa <dtoa_prf>:
    88aa:	8f 92       	push	r8
    88ac:	9f 92       	push	r9
    88ae:	af 92       	push	r10
    88b0:	bf 92       	push	r11
    88b2:	cf 92       	push	r12
    88b4:	df 92       	push	r13
    88b6:	ef 92       	push	r14
    88b8:	ff 92       	push	r15
    88ba:	0f 93       	push	r16
    88bc:	1f 93       	push	r17
    88be:	cf 93       	push	r28
    88c0:	df 93       	push	r29
    88c2:	cd b7       	in	r28, 0x3d	; 61
    88c4:	de b7       	in	r29, 0x3e	; 62
    88c6:	29 97       	sbiw	r28, 0x09	; 9
    88c8:	0f b6       	in	r0, 0x3f	; 63
    88ca:	f8 94       	cli
    88cc:	de bf       	out	0x3e, r29	; 62
    88ce:	0f be       	out	0x3f, r0	; 63
    88d0:	cd bf       	out	0x3d, r28	; 61
    88d2:	6a 01       	movw	r12, r20
    88d4:	12 2f       	mov	r17, r18
    88d6:	b0 2e       	mov	r11, r16
    88d8:	2b e3       	ldi	r18, 0x3B	; 59
    88da:	20 17       	cp	r18, r16
    88dc:	20 f0       	brcs	.+8      	; 0x88e6 <dtoa_prf+0x3c>
    88de:	ff 24       	eor	r15, r15
    88e0:	f3 94       	inc	r15
    88e2:	f0 0e       	add	r15, r16
    88e4:	02 c0       	rjmp	.+4      	; 0x88ea <dtoa_prf+0x40>
    88e6:	2c e3       	ldi	r18, 0x3C	; 60
    88e8:	f2 2e       	mov	r15, r18
    88ea:	0f 2d       	mov	r16, r15
    88ec:	27 e0       	ldi	r18, 0x07	; 7
    88ee:	ae 01       	movw	r20, r28
    88f0:	4f 5f       	subi	r20, 0xFF	; 255
    88f2:	5f 4f       	sbci	r21, 0xFF	; 255
    88f4:	50 d1       	rcall	.+672    	; 0x8b96 <__ftoa_engine>
    88f6:	bc 01       	movw	r22, r24
    88f8:	49 81       	ldd	r20, Y+1	; 0x01
    88fa:	84 2f       	mov	r24, r20
    88fc:	89 70       	andi	r24, 0x09	; 9
    88fe:	81 30       	cpi	r24, 0x01	; 1
    8900:	31 f0       	breq	.+12     	; 0x890e <dtoa_prf+0x64>
    8902:	e1 fc       	sbrc	r14, 1
    8904:	06 c0       	rjmp	.+12     	; 0x8912 <dtoa_prf+0x68>
    8906:	e0 fe       	sbrs	r14, 0
    8908:	06 c0       	rjmp	.+12     	; 0x8916 <dtoa_prf+0x6c>
    890a:	90 e2       	ldi	r25, 0x20	; 32
    890c:	05 c0       	rjmp	.+10     	; 0x8918 <dtoa_prf+0x6e>
    890e:	9d e2       	ldi	r25, 0x2D	; 45
    8910:	03 c0       	rjmp	.+6      	; 0x8918 <dtoa_prf+0x6e>
    8912:	9b e2       	ldi	r25, 0x2B	; 43
    8914:	01 c0       	rjmp	.+2      	; 0x8918 <dtoa_prf+0x6e>
    8916:	90 e0       	ldi	r25, 0x00	; 0
    8918:	5e 2d       	mov	r21, r14
    891a:	50 71       	andi	r21, 0x10	; 16
    891c:	43 ff       	sbrs	r20, 3
    891e:	3c c0       	rjmp	.+120    	; 0x8998 <dtoa_prf+0xee>
    8920:	91 11       	cpse	r25, r1
    8922:	02 c0       	rjmp	.+4      	; 0x8928 <dtoa_prf+0x7e>
    8924:	83 e0       	ldi	r24, 0x03	; 3
    8926:	01 c0       	rjmp	.+2      	; 0x892a <dtoa_prf+0x80>
    8928:	84 e0       	ldi	r24, 0x04	; 4
    892a:	81 17       	cp	r24, r17
    892c:	18 f4       	brcc	.+6      	; 0x8934 <dtoa_prf+0x8a>
    892e:	21 2f       	mov	r18, r17
    8930:	28 1b       	sub	r18, r24
    8932:	01 c0       	rjmp	.+2      	; 0x8936 <dtoa_prf+0x8c>
    8934:	20 e0       	ldi	r18, 0x00	; 0
    8936:	51 11       	cpse	r21, r1
    8938:	0b c0       	rjmp	.+22     	; 0x8950 <dtoa_prf+0xa6>
    893a:	f6 01       	movw	r30, r12
    893c:	82 2f       	mov	r24, r18
    893e:	30 e2       	ldi	r19, 0x20	; 32
    8940:	88 23       	and	r24, r24
    8942:	19 f0       	breq	.+6      	; 0x894a <dtoa_prf+0xa0>
    8944:	31 93       	st	Z+, r19
    8946:	81 50       	subi	r24, 0x01	; 1
    8948:	fb cf       	rjmp	.-10     	; 0x8940 <dtoa_prf+0x96>
    894a:	c2 0e       	add	r12, r18
    894c:	d1 1c       	adc	r13, r1
    894e:	20 e0       	ldi	r18, 0x00	; 0
    8950:	99 23       	and	r25, r25
    8952:	29 f0       	breq	.+10     	; 0x895e <dtoa_prf+0xb4>
    8954:	d6 01       	movw	r26, r12
    8956:	9c 93       	st	X, r25
    8958:	f6 01       	movw	r30, r12
    895a:	31 96       	adiw	r30, 0x01	; 1
    895c:	6f 01       	movw	r12, r30
    895e:	c6 01       	movw	r24, r12
    8960:	03 96       	adiw	r24, 0x03	; 3
    8962:	e2 fe       	sbrs	r14, 2
    8964:	0a c0       	rjmp	.+20     	; 0x897a <dtoa_prf+0xd0>
    8966:	3e e4       	ldi	r19, 0x4E	; 78
    8968:	d6 01       	movw	r26, r12
    896a:	3c 93       	st	X, r19
    896c:	41 e4       	ldi	r20, 0x41	; 65
    896e:	11 96       	adiw	r26, 0x01	; 1
    8970:	4c 93       	st	X, r20
    8972:	11 97       	sbiw	r26, 0x01	; 1
    8974:	12 96       	adiw	r26, 0x02	; 2
    8976:	3c 93       	st	X, r19
    8978:	06 c0       	rjmp	.+12     	; 0x8986 <dtoa_prf+0xdc>
    897a:	3e e6       	ldi	r19, 0x6E	; 110
    897c:	f6 01       	movw	r30, r12
    897e:	30 83       	st	Z, r19
    8980:	41 e6       	ldi	r20, 0x61	; 97
    8982:	41 83       	std	Z+1, r20	; 0x01
    8984:	32 83       	std	Z+2, r19	; 0x02
    8986:	fc 01       	movw	r30, r24
    8988:	32 2f       	mov	r19, r18
    898a:	40 e2       	ldi	r20, 0x20	; 32
    898c:	33 23       	and	r19, r19
    898e:	09 f4       	brne	.+2      	; 0x8992 <dtoa_prf+0xe8>
    8990:	42 c0       	rjmp	.+132    	; 0x8a16 <dtoa_prf+0x16c>
    8992:	41 93       	st	Z+, r20
    8994:	31 50       	subi	r19, 0x01	; 1
    8996:	fa cf       	rjmp	.-12     	; 0x898c <dtoa_prf+0xe2>
    8998:	42 ff       	sbrs	r20, 2
    899a:	44 c0       	rjmp	.+136    	; 0x8a24 <dtoa_prf+0x17a>
    899c:	91 11       	cpse	r25, r1
    899e:	02 c0       	rjmp	.+4      	; 0x89a4 <dtoa_prf+0xfa>
    89a0:	83 e0       	ldi	r24, 0x03	; 3
    89a2:	01 c0       	rjmp	.+2      	; 0x89a6 <dtoa_prf+0xfc>
    89a4:	84 e0       	ldi	r24, 0x04	; 4
    89a6:	81 17       	cp	r24, r17
    89a8:	18 f4       	brcc	.+6      	; 0x89b0 <dtoa_prf+0x106>
    89aa:	21 2f       	mov	r18, r17
    89ac:	28 1b       	sub	r18, r24
    89ae:	01 c0       	rjmp	.+2      	; 0x89b2 <dtoa_prf+0x108>
    89b0:	20 e0       	ldi	r18, 0x00	; 0
    89b2:	51 11       	cpse	r21, r1
    89b4:	0b c0       	rjmp	.+22     	; 0x89cc <dtoa_prf+0x122>
    89b6:	f6 01       	movw	r30, r12
    89b8:	82 2f       	mov	r24, r18
    89ba:	30 e2       	ldi	r19, 0x20	; 32
    89bc:	88 23       	and	r24, r24
    89be:	19 f0       	breq	.+6      	; 0x89c6 <dtoa_prf+0x11c>
    89c0:	31 93       	st	Z+, r19
    89c2:	81 50       	subi	r24, 0x01	; 1
    89c4:	fb cf       	rjmp	.-10     	; 0x89bc <dtoa_prf+0x112>
    89c6:	c2 0e       	add	r12, r18
    89c8:	d1 1c       	adc	r13, r1
    89ca:	20 e0       	ldi	r18, 0x00	; 0
    89cc:	99 23       	and	r25, r25
    89ce:	29 f0       	breq	.+10     	; 0x89da <dtoa_prf+0x130>
    89d0:	d6 01       	movw	r26, r12
    89d2:	9c 93       	st	X, r25
    89d4:	f6 01       	movw	r30, r12
    89d6:	31 96       	adiw	r30, 0x01	; 1
    89d8:	6f 01       	movw	r12, r30
    89da:	c6 01       	movw	r24, r12
    89dc:	03 96       	adiw	r24, 0x03	; 3
    89de:	e2 fe       	sbrs	r14, 2
    89e0:	0b c0       	rjmp	.+22     	; 0x89f8 <dtoa_prf+0x14e>
    89e2:	39 e4       	ldi	r19, 0x49	; 73
    89e4:	d6 01       	movw	r26, r12
    89e6:	3c 93       	st	X, r19
    89e8:	3e e4       	ldi	r19, 0x4E	; 78
    89ea:	11 96       	adiw	r26, 0x01	; 1
    89ec:	3c 93       	st	X, r19
    89ee:	11 97       	sbiw	r26, 0x01	; 1
    89f0:	36 e4       	ldi	r19, 0x46	; 70
    89f2:	12 96       	adiw	r26, 0x02	; 2
    89f4:	3c 93       	st	X, r19
    89f6:	07 c0       	rjmp	.+14     	; 0x8a06 <dtoa_prf+0x15c>
    89f8:	39 e6       	ldi	r19, 0x69	; 105
    89fa:	f6 01       	movw	r30, r12
    89fc:	30 83       	st	Z, r19
    89fe:	3e e6       	ldi	r19, 0x6E	; 110
    8a00:	31 83       	std	Z+1, r19	; 0x01
    8a02:	36 e6       	ldi	r19, 0x66	; 102
    8a04:	32 83       	std	Z+2, r19	; 0x02
    8a06:	fc 01       	movw	r30, r24
    8a08:	32 2f       	mov	r19, r18
    8a0a:	40 e2       	ldi	r20, 0x20	; 32
    8a0c:	33 23       	and	r19, r19
    8a0e:	19 f0       	breq	.+6      	; 0x8a16 <dtoa_prf+0x16c>
    8a10:	41 93       	st	Z+, r20
    8a12:	31 50       	subi	r19, 0x01	; 1
    8a14:	fb cf       	rjmp	.-10     	; 0x8a0c <dtoa_prf+0x162>
    8a16:	fc 01       	movw	r30, r24
    8a18:	e2 0f       	add	r30, r18
    8a1a:	f1 1d       	adc	r31, r1
    8a1c:	10 82       	st	Z, r1
    8a1e:	8e ef       	ldi	r24, 0xFE	; 254
    8a20:	9f ef       	ldi	r25, 0xFF	; 255
    8a22:	a6 c0       	rjmp	.+332    	; 0x8b70 <dtoa_prf+0x2c6>
    8a24:	21 e0       	ldi	r18, 0x01	; 1
    8a26:	30 e0       	ldi	r19, 0x00	; 0
    8a28:	91 11       	cpse	r25, r1
    8a2a:	02 c0       	rjmp	.+4      	; 0x8a30 <dtoa_prf+0x186>
    8a2c:	20 e0       	ldi	r18, 0x00	; 0
    8a2e:	30 e0       	ldi	r19, 0x00	; 0
    8a30:	16 16       	cp	r1, r22
    8a32:	17 06       	cpc	r1, r23
    8a34:	1c f4       	brge	.+6      	; 0x8a3c <dtoa_prf+0x192>
    8a36:	fb 01       	movw	r30, r22
    8a38:	31 96       	adiw	r30, 0x01	; 1
    8a3a:	02 c0       	rjmp	.+4      	; 0x8a40 <dtoa_prf+0x196>
    8a3c:	e1 e0       	ldi	r30, 0x01	; 1
    8a3e:	f0 e0       	ldi	r31, 0x00	; 0
    8a40:	2e 0f       	add	r18, r30
    8a42:	3f 1f       	adc	r19, r31
    8a44:	bb 20       	and	r11, r11
    8a46:	21 f0       	breq	.+8      	; 0x8a50 <dtoa_prf+0x1a6>
    8a48:	eb 2d       	mov	r30, r11
    8a4a:	f0 e0       	ldi	r31, 0x00	; 0
    8a4c:	31 96       	adiw	r30, 0x01	; 1
    8a4e:	02 c0       	rjmp	.+4      	; 0x8a54 <dtoa_prf+0x1aa>
    8a50:	e0 e0       	ldi	r30, 0x00	; 0
    8a52:	f0 e0       	ldi	r31, 0x00	; 0
    8a54:	2e 0f       	add	r18, r30
    8a56:	3f 1f       	adc	r19, r31
    8a58:	e1 2f       	mov	r30, r17
    8a5a:	f0 e0       	ldi	r31, 0x00	; 0
    8a5c:	2e 17       	cp	r18, r30
    8a5e:	3f 07       	cpc	r19, r31
    8a60:	1c f4       	brge	.+6      	; 0x8a68 <dtoa_prf+0x1be>
    8a62:	12 1b       	sub	r17, r18
    8a64:	21 2f       	mov	r18, r17
    8a66:	01 c0       	rjmp	.+2      	; 0x8a6a <dtoa_prf+0x1c0>
    8a68:	20 e0       	ldi	r18, 0x00	; 0
    8a6a:	8e 2d       	mov	r24, r14
    8a6c:	88 71       	andi	r24, 0x18	; 24
    8a6e:	59 f4       	brne	.+22     	; 0x8a86 <dtoa_prf+0x1dc>
    8a70:	f6 01       	movw	r30, r12
    8a72:	82 2f       	mov	r24, r18
    8a74:	30 e2       	ldi	r19, 0x20	; 32
    8a76:	88 23       	and	r24, r24
    8a78:	19 f0       	breq	.+6      	; 0x8a80 <dtoa_prf+0x1d6>
    8a7a:	31 93       	st	Z+, r19
    8a7c:	81 50       	subi	r24, 0x01	; 1
    8a7e:	fb cf       	rjmp	.-10     	; 0x8a76 <dtoa_prf+0x1cc>
    8a80:	c2 0e       	add	r12, r18
    8a82:	d1 1c       	adc	r13, r1
    8a84:	20 e0       	ldi	r18, 0x00	; 0
    8a86:	99 23       	and	r25, r25
    8a88:	29 f0       	breq	.+10     	; 0x8a94 <dtoa_prf+0x1ea>
    8a8a:	d6 01       	movw	r26, r12
    8a8c:	9c 93       	st	X, r25
    8a8e:	f6 01       	movw	r30, r12
    8a90:	31 96       	adiw	r30, 0x01	; 1
    8a92:	6f 01       	movw	r12, r30
    8a94:	51 11       	cpse	r21, r1
    8a96:	0b c0       	rjmp	.+22     	; 0x8aae <dtoa_prf+0x204>
    8a98:	f6 01       	movw	r30, r12
    8a9a:	82 2f       	mov	r24, r18
    8a9c:	90 e3       	ldi	r25, 0x30	; 48
    8a9e:	88 23       	and	r24, r24
    8aa0:	19 f0       	breq	.+6      	; 0x8aa8 <dtoa_prf+0x1fe>
    8aa2:	91 93       	st	Z+, r25
    8aa4:	81 50       	subi	r24, 0x01	; 1
    8aa6:	fb cf       	rjmp	.-10     	; 0x8a9e <dtoa_prf+0x1f4>
    8aa8:	c2 0e       	add	r12, r18
    8aaa:	d1 1c       	adc	r13, r1
    8aac:	20 e0       	ldi	r18, 0x00	; 0
    8aae:	0f 2d       	mov	r16, r15
    8ab0:	06 0f       	add	r16, r22
    8ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    8ab4:	34 2f       	mov	r19, r20
    8ab6:	30 71       	andi	r19, 0x10	; 16
    8ab8:	44 ff       	sbrs	r20, 4
    8aba:	03 c0       	rjmp	.+6      	; 0x8ac2 <dtoa_prf+0x218>
    8abc:	91 33       	cpi	r25, 0x31	; 49
    8abe:	09 f4       	brne	.+2      	; 0x8ac2 <dtoa_prf+0x218>
    8ac0:	01 50       	subi	r16, 0x01	; 1
    8ac2:	10 16       	cp	r1, r16
    8ac4:	24 f4       	brge	.+8      	; 0x8ace <dtoa_prf+0x224>
    8ac6:	09 30       	cpi	r16, 0x09	; 9
    8ac8:	18 f0       	brcs	.+6      	; 0x8ad0 <dtoa_prf+0x226>
    8aca:	08 e0       	ldi	r16, 0x08	; 8
    8acc:	01 c0       	rjmp	.+2      	; 0x8ad0 <dtoa_prf+0x226>
    8ace:	01 e0       	ldi	r16, 0x01	; 1
    8ad0:	ab 01       	movw	r20, r22
    8ad2:	77 ff       	sbrs	r23, 7
    8ad4:	02 c0       	rjmp	.+4      	; 0x8ada <dtoa_prf+0x230>
    8ad6:	40 e0       	ldi	r20, 0x00	; 0
    8ad8:	50 e0       	ldi	r21, 0x00	; 0
    8ada:	fb 01       	movw	r30, r22
    8adc:	e4 1b       	sub	r30, r20
    8ade:	f5 0b       	sbc	r31, r21
    8ae0:	a1 e0       	ldi	r26, 0x01	; 1
    8ae2:	b0 e0       	ldi	r27, 0x00	; 0
    8ae4:	ac 0f       	add	r26, r28
    8ae6:	bd 1f       	adc	r27, r29
    8ae8:	ea 0f       	add	r30, r26
    8aea:	fb 1f       	adc	r31, r27
    8aec:	8e e2       	ldi	r24, 0x2E	; 46
    8aee:	a8 2e       	mov	r10, r24
    8af0:	4b 01       	movw	r8, r22
    8af2:	80 1a       	sub	r8, r16
    8af4:	91 08       	sbc	r9, r1
    8af6:	0b 2d       	mov	r16, r11
    8af8:	10 e0       	ldi	r17, 0x00	; 0
    8afa:	11 95       	neg	r17
    8afc:	01 95       	neg	r16
    8afe:	11 09       	sbc	r17, r1
    8b00:	4f 3f       	cpi	r20, 0xFF	; 255
    8b02:	bf ef       	ldi	r27, 0xFF	; 255
    8b04:	5b 07       	cpc	r21, r27
    8b06:	21 f4       	brne	.+8      	; 0x8b10 <dtoa_prf+0x266>
    8b08:	d6 01       	movw	r26, r12
    8b0a:	ac 92       	st	X, r10
    8b0c:	11 96       	adiw	r26, 0x01	; 1
    8b0e:	6d 01       	movw	r12, r26
    8b10:	64 17       	cp	r22, r20
    8b12:	75 07       	cpc	r23, r21
    8b14:	2c f0       	brlt	.+10     	; 0x8b20 <dtoa_prf+0x276>
    8b16:	84 16       	cp	r8, r20
    8b18:	95 06       	cpc	r9, r21
    8b1a:	14 f4       	brge	.+4      	; 0x8b20 <dtoa_prf+0x276>
    8b1c:	81 81       	ldd	r24, Z+1	; 0x01
    8b1e:	01 c0       	rjmp	.+2      	; 0x8b22 <dtoa_prf+0x278>
    8b20:	80 e3       	ldi	r24, 0x30	; 48
    8b22:	41 50       	subi	r20, 0x01	; 1
    8b24:	51 09       	sbc	r21, r1
    8b26:	31 96       	adiw	r30, 0x01	; 1
    8b28:	d6 01       	movw	r26, r12
    8b2a:	11 96       	adiw	r26, 0x01	; 1
    8b2c:	7d 01       	movw	r14, r26
    8b2e:	40 17       	cp	r20, r16
    8b30:	51 07       	cpc	r21, r17
    8b32:	24 f0       	brlt	.+8      	; 0x8b3c <dtoa_prf+0x292>
    8b34:	d6 01       	movw	r26, r12
    8b36:	8c 93       	st	X, r24
    8b38:	67 01       	movw	r12, r14
    8b3a:	e2 cf       	rjmp	.-60     	; 0x8b00 <dtoa_prf+0x256>
    8b3c:	64 17       	cp	r22, r20
    8b3e:	75 07       	cpc	r23, r21
    8b40:	39 f4       	brne	.+14     	; 0x8b50 <dtoa_prf+0x2a6>
    8b42:	96 33       	cpi	r25, 0x36	; 54
    8b44:	20 f4       	brcc	.+8      	; 0x8b4e <dtoa_prf+0x2a4>
    8b46:	95 33       	cpi	r25, 0x35	; 53
    8b48:	19 f4       	brne	.+6      	; 0x8b50 <dtoa_prf+0x2a6>
    8b4a:	31 11       	cpse	r19, r1
    8b4c:	01 c0       	rjmp	.+2      	; 0x8b50 <dtoa_prf+0x2a6>
    8b4e:	81 e3       	ldi	r24, 0x31	; 49
    8b50:	f6 01       	movw	r30, r12
    8b52:	80 83       	st	Z, r24
    8b54:	f7 01       	movw	r30, r14
    8b56:	82 2f       	mov	r24, r18
    8b58:	90 e2       	ldi	r25, 0x20	; 32
    8b5a:	88 23       	and	r24, r24
    8b5c:	19 f0       	breq	.+6      	; 0x8b64 <dtoa_prf+0x2ba>
    8b5e:	91 93       	st	Z+, r25
    8b60:	81 50       	subi	r24, 0x01	; 1
    8b62:	fb cf       	rjmp	.-10     	; 0x8b5a <dtoa_prf+0x2b0>
    8b64:	f7 01       	movw	r30, r14
    8b66:	e2 0f       	add	r30, r18
    8b68:	f1 1d       	adc	r31, r1
    8b6a:	10 82       	st	Z, r1
    8b6c:	80 e0       	ldi	r24, 0x00	; 0
    8b6e:	90 e0       	ldi	r25, 0x00	; 0
    8b70:	29 96       	adiw	r28, 0x09	; 9
    8b72:	0f b6       	in	r0, 0x3f	; 63
    8b74:	f8 94       	cli
    8b76:	de bf       	out	0x3e, r29	; 62
    8b78:	0f be       	out	0x3f, r0	; 63
    8b7a:	cd bf       	out	0x3d, r28	; 61
    8b7c:	df 91       	pop	r29
    8b7e:	cf 91       	pop	r28
    8b80:	1f 91       	pop	r17
    8b82:	0f 91       	pop	r16
    8b84:	ff 90       	pop	r15
    8b86:	ef 90       	pop	r14
    8b88:	df 90       	pop	r13
    8b8a:	cf 90       	pop	r12
    8b8c:	bf 90       	pop	r11
    8b8e:	af 90       	pop	r10
    8b90:	9f 90       	pop	r9
    8b92:	8f 90       	pop	r8
    8b94:	08 95       	ret

00008b96 <__ftoa_engine>:
    8b96:	28 30       	cpi	r18, 0x08	; 8
    8b98:	08 f0       	brcs	.+2      	; 0x8b9c <__ftoa_engine+0x6>
    8b9a:	27 e0       	ldi	r18, 0x07	; 7
    8b9c:	33 27       	eor	r19, r19
    8b9e:	da 01       	movw	r26, r20
    8ba0:	99 0f       	add	r25, r25
    8ba2:	31 1d       	adc	r19, r1
    8ba4:	87 fd       	sbrc	r24, 7
    8ba6:	91 60       	ori	r25, 0x01	; 1
    8ba8:	00 96       	adiw	r24, 0x00	; 0
    8baa:	61 05       	cpc	r22, r1
    8bac:	71 05       	cpc	r23, r1
    8bae:	39 f4       	brne	.+14     	; 0x8bbe <__ftoa_engine+0x28>
    8bb0:	32 60       	ori	r19, 0x02	; 2
    8bb2:	2e 5f       	subi	r18, 0xFE	; 254
    8bb4:	3d 93       	st	X+, r19
    8bb6:	30 e3       	ldi	r19, 0x30	; 48
    8bb8:	2a 95       	dec	r18
    8bba:	e1 f7       	brne	.-8      	; 0x8bb4 <__ftoa_engine+0x1e>
    8bbc:	08 95       	ret
    8bbe:	9f 3f       	cpi	r25, 0xFF	; 255
    8bc0:	30 f0       	brcs	.+12     	; 0x8bce <__ftoa_engine+0x38>
    8bc2:	80 38       	cpi	r24, 0x80	; 128
    8bc4:	71 05       	cpc	r23, r1
    8bc6:	61 05       	cpc	r22, r1
    8bc8:	09 f0       	breq	.+2      	; 0x8bcc <__ftoa_engine+0x36>
    8bca:	3c 5f       	subi	r19, 0xFC	; 252
    8bcc:	3c 5f       	subi	r19, 0xFC	; 252
    8bce:	3d 93       	st	X+, r19
    8bd0:	91 30       	cpi	r25, 0x01	; 1
    8bd2:	08 f0       	brcs	.+2      	; 0x8bd6 <__ftoa_engine+0x40>
    8bd4:	80 68       	ori	r24, 0x80	; 128
    8bd6:	91 1d       	adc	r25, r1
    8bd8:	df 93       	push	r29
    8bda:	cf 93       	push	r28
    8bdc:	1f 93       	push	r17
    8bde:	0f 93       	push	r16
    8be0:	ff 92       	push	r15
    8be2:	ef 92       	push	r14
    8be4:	19 2f       	mov	r17, r25
    8be6:	98 7f       	andi	r25, 0xF8	; 248
    8be8:	96 95       	lsr	r25
    8bea:	e9 2f       	mov	r30, r25
    8bec:	96 95       	lsr	r25
    8bee:	96 95       	lsr	r25
    8bf0:	e9 0f       	add	r30, r25
    8bf2:	ff 27       	eor	r31, r31
    8bf4:	ee 5d       	subi	r30, 0xDE	; 222
    8bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    8bf8:	99 27       	eor	r25, r25
    8bfa:	33 27       	eor	r19, r19
    8bfc:	ee 24       	eor	r14, r14
    8bfe:	ff 24       	eor	r15, r15
    8c00:	a7 01       	movw	r20, r14
    8c02:	e7 01       	movw	r28, r14
    8c04:	05 90       	lpm	r0, Z+
    8c06:	08 94       	sec
    8c08:	07 94       	ror	r0
    8c0a:	28 f4       	brcc	.+10     	; 0x8c16 <__ftoa_engine+0x80>
    8c0c:	36 0f       	add	r19, r22
    8c0e:	e7 1e       	adc	r14, r23
    8c10:	f8 1e       	adc	r15, r24
    8c12:	49 1f       	adc	r20, r25
    8c14:	51 1d       	adc	r21, r1
    8c16:	66 0f       	add	r22, r22
    8c18:	77 1f       	adc	r23, r23
    8c1a:	88 1f       	adc	r24, r24
    8c1c:	99 1f       	adc	r25, r25
    8c1e:	06 94       	lsr	r0
    8c20:	a1 f7       	brne	.-24     	; 0x8c0a <__ftoa_engine+0x74>
    8c22:	05 90       	lpm	r0, Z+
    8c24:	07 94       	ror	r0
    8c26:	28 f4       	brcc	.+10     	; 0x8c32 <__ftoa_engine+0x9c>
    8c28:	e7 0e       	add	r14, r23
    8c2a:	f8 1e       	adc	r15, r24
    8c2c:	49 1f       	adc	r20, r25
    8c2e:	56 1f       	adc	r21, r22
    8c30:	c1 1d       	adc	r28, r1
    8c32:	77 0f       	add	r23, r23
    8c34:	88 1f       	adc	r24, r24
    8c36:	99 1f       	adc	r25, r25
    8c38:	66 1f       	adc	r22, r22
    8c3a:	06 94       	lsr	r0
    8c3c:	a1 f7       	brne	.-24     	; 0x8c26 <__ftoa_engine+0x90>
    8c3e:	05 90       	lpm	r0, Z+
    8c40:	07 94       	ror	r0
    8c42:	28 f4       	brcc	.+10     	; 0x8c4e <__ftoa_engine+0xb8>
    8c44:	f8 0e       	add	r15, r24
    8c46:	49 1f       	adc	r20, r25
    8c48:	56 1f       	adc	r21, r22
    8c4a:	c7 1f       	adc	r28, r23
    8c4c:	d1 1d       	adc	r29, r1
    8c4e:	88 0f       	add	r24, r24
    8c50:	99 1f       	adc	r25, r25
    8c52:	66 1f       	adc	r22, r22
    8c54:	77 1f       	adc	r23, r23
    8c56:	06 94       	lsr	r0
    8c58:	a1 f7       	brne	.-24     	; 0x8c42 <__ftoa_engine+0xac>
    8c5a:	05 90       	lpm	r0, Z+
    8c5c:	07 94       	ror	r0
    8c5e:	20 f4       	brcc	.+8      	; 0x8c68 <__ftoa_engine+0xd2>
    8c60:	49 0f       	add	r20, r25
    8c62:	56 1f       	adc	r21, r22
    8c64:	c7 1f       	adc	r28, r23
    8c66:	d8 1f       	adc	r29, r24
    8c68:	99 0f       	add	r25, r25
    8c6a:	66 1f       	adc	r22, r22
    8c6c:	77 1f       	adc	r23, r23
    8c6e:	88 1f       	adc	r24, r24
    8c70:	06 94       	lsr	r0
    8c72:	a9 f7       	brne	.-22     	; 0x8c5e <__ftoa_engine+0xc8>
    8c74:	84 91       	lpm	r24, Z
    8c76:	10 95       	com	r17
    8c78:	17 70       	andi	r17, 0x07	; 7
    8c7a:	41 f0       	breq	.+16     	; 0x8c8c <__ftoa_engine+0xf6>
    8c7c:	d6 95       	lsr	r29
    8c7e:	c7 95       	ror	r28
    8c80:	57 95       	ror	r21
    8c82:	47 95       	ror	r20
    8c84:	f7 94       	ror	r15
    8c86:	e7 94       	ror	r14
    8c88:	1a 95       	dec	r17
    8c8a:	c1 f7       	brne	.-16     	; 0x8c7c <__ftoa_engine+0xe6>
    8c8c:	e8 ec       	ldi	r30, 0xC8	; 200
    8c8e:	f0 e0       	ldi	r31, 0x00	; 0
    8c90:	68 94       	set
    8c92:	15 90       	lpm	r1, Z+
    8c94:	15 91       	lpm	r17, Z+
    8c96:	35 91       	lpm	r19, Z+
    8c98:	65 91       	lpm	r22, Z+
    8c9a:	95 91       	lpm	r25, Z+
    8c9c:	05 90       	lpm	r0, Z+
    8c9e:	7f e2       	ldi	r23, 0x2F	; 47
    8ca0:	73 95       	inc	r23
    8ca2:	e1 18       	sub	r14, r1
    8ca4:	f1 0a       	sbc	r15, r17
    8ca6:	43 0b       	sbc	r20, r19
    8ca8:	56 0b       	sbc	r21, r22
    8caa:	c9 0b       	sbc	r28, r25
    8cac:	d0 09       	sbc	r29, r0
    8cae:	c0 f7       	brcc	.-16     	; 0x8ca0 <__ftoa_engine+0x10a>
    8cb0:	e1 0c       	add	r14, r1
    8cb2:	f1 1e       	adc	r15, r17
    8cb4:	43 1f       	adc	r20, r19
    8cb6:	56 1f       	adc	r21, r22
    8cb8:	c9 1f       	adc	r28, r25
    8cba:	d0 1d       	adc	r29, r0
    8cbc:	7e f4       	brtc	.+30     	; 0x8cdc <__ftoa_engine+0x146>
    8cbe:	70 33       	cpi	r23, 0x30	; 48
    8cc0:	11 f4       	brne	.+4      	; 0x8cc6 <__ftoa_engine+0x130>
    8cc2:	8a 95       	dec	r24
    8cc4:	e6 cf       	rjmp	.-52     	; 0x8c92 <__ftoa_engine+0xfc>
    8cc6:	e8 94       	clt
    8cc8:	01 50       	subi	r16, 0x01	; 1
    8cca:	30 f0       	brcs	.+12     	; 0x8cd8 <__ftoa_engine+0x142>
    8ccc:	08 0f       	add	r16, r24
    8cce:	0a f4       	brpl	.+2      	; 0x8cd2 <__ftoa_engine+0x13c>
    8cd0:	00 27       	eor	r16, r16
    8cd2:	02 17       	cp	r16, r18
    8cd4:	08 f4       	brcc	.+2      	; 0x8cd8 <__ftoa_engine+0x142>
    8cd6:	20 2f       	mov	r18, r16
    8cd8:	23 95       	inc	r18
    8cda:	02 2f       	mov	r16, r18
    8cdc:	7a 33       	cpi	r23, 0x3A	; 58
    8cde:	28 f0       	brcs	.+10     	; 0x8cea <__ftoa_engine+0x154>
    8ce0:	79 e3       	ldi	r23, 0x39	; 57
    8ce2:	7d 93       	st	X+, r23
    8ce4:	2a 95       	dec	r18
    8ce6:	e9 f7       	brne	.-6      	; 0x8ce2 <__ftoa_engine+0x14c>
    8ce8:	10 c0       	rjmp	.+32     	; 0x8d0a <__ftoa_engine+0x174>
    8cea:	7d 93       	st	X+, r23
    8cec:	2a 95       	dec	r18
    8cee:	89 f6       	brne	.-94     	; 0x8c92 <__ftoa_engine+0xfc>
    8cf0:	06 94       	lsr	r0
    8cf2:	97 95       	ror	r25
    8cf4:	67 95       	ror	r22
    8cf6:	37 95       	ror	r19
    8cf8:	17 95       	ror	r17
    8cfa:	17 94       	ror	r1
    8cfc:	e1 18       	sub	r14, r1
    8cfe:	f1 0a       	sbc	r15, r17
    8d00:	43 0b       	sbc	r20, r19
    8d02:	56 0b       	sbc	r21, r22
    8d04:	c9 0b       	sbc	r28, r25
    8d06:	d0 09       	sbc	r29, r0
    8d08:	98 f0       	brcs	.+38     	; 0x8d30 <__ftoa_engine+0x19a>
    8d0a:	23 95       	inc	r18
    8d0c:	7e 91       	ld	r23, -X
    8d0e:	73 95       	inc	r23
    8d10:	7a 33       	cpi	r23, 0x3A	; 58
    8d12:	08 f0       	brcs	.+2      	; 0x8d16 <__ftoa_engine+0x180>
    8d14:	70 e3       	ldi	r23, 0x30	; 48
    8d16:	7c 93       	st	X, r23
    8d18:	20 13       	cpse	r18, r16
    8d1a:	b8 f7       	brcc	.-18     	; 0x8d0a <__ftoa_engine+0x174>
    8d1c:	7e 91       	ld	r23, -X
    8d1e:	70 61       	ori	r23, 0x10	; 16
    8d20:	7d 93       	st	X+, r23
    8d22:	30 f0       	brcs	.+12     	; 0x8d30 <__ftoa_engine+0x19a>
    8d24:	83 95       	inc	r24
    8d26:	71 e3       	ldi	r23, 0x31	; 49
    8d28:	7d 93       	st	X+, r23
    8d2a:	70 e3       	ldi	r23, 0x30	; 48
    8d2c:	2a 95       	dec	r18
    8d2e:	e1 f7       	brne	.-8      	; 0x8d28 <__ftoa_engine+0x192>
    8d30:	11 24       	eor	r1, r1
    8d32:	ef 90       	pop	r14
    8d34:	ff 90       	pop	r15
    8d36:	0f 91       	pop	r16
    8d38:	1f 91       	pop	r17
    8d3a:	cf 91       	pop	r28
    8d3c:	df 91       	pop	r29
    8d3e:	99 27       	eor	r25, r25
    8d40:	87 fd       	sbrc	r24, 7
    8d42:	90 95       	com	r25
    8d44:	08 95       	ret

00008d46 <__ctype_isfalse>:
    8d46:	99 27       	eor	r25, r25
    8d48:	88 27       	eor	r24, r24

00008d4a <__ctype_istrue>:
    8d4a:	08 95       	ret

00008d4c <strrev>:
    8d4c:	dc 01       	movw	r26, r24
    8d4e:	fc 01       	movw	r30, r24
    8d50:	67 2f       	mov	r22, r23
    8d52:	71 91       	ld	r23, Z+
    8d54:	77 23       	and	r23, r23
    8d56:	e1 f7       	brne	.-8      	; 0x8d50 <strrev+0x4>
    8d58:	32 97       	sbiw	r30, 0x02	; 2
    8d5a:	04 c0       	rjmp	.+8      	; 0x8d64 <strrev+0x18>
    8d5c:	7c 91       	ld	r23, X
    8d5e:	6d 93       	st	X+, r22
    8d60:	70 83       	st	Z, r23
    8d62:	62 91       	ld	r22, -Z
    8d64:	ae 17       	cp	r26, r30
    8d66:	bf 07       	cpc	r27, r31
    8d68:	c8 f3       	brcs	.-14     	; 0x8d5c <strrev+0x10>
    8d6a:	08 95       	ret

00008d6c <__do_global_dtors>:
    8d6c:	11 e0       	ldi	r17, 0x01	; 1
    8d6e:	c6 e6       	ldi	r28, 0x66	; 102
    8d70:	d1 e0       	ldi	r29, 0x01	; 1
    8d72:	03 c0       	rjmp	.+6      	; 0x8d7a <__do_global_dtors+0xe>
    8d74:	fe 01       	movw	r30, r28
    8d76:	a2 d9       	rcall	.-3260   	; 0x80bc <__tablejump2__>
    8d78:	21 96       	adiw	r28, 0x01	; 1
    8d7a:	c7 36       	cpi	r28, 0x67	; 103
    8d7c:	d1 07       	cpc	r29, r17
    8d7e:	d1 f7       	brne	.-12     	; 0x8d74 <__do_global_dtors+0x8>
    8d80:	f8 94       	cli

00008d82 <__stop_program>:
    8d82:	ff cf       	rjmp	.-2      	; 0x8d82 <__stop_program>
