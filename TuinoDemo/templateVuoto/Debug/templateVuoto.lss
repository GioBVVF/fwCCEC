
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000718  00800100  0000726e  00007302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000726e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000031a  00800818  00800818  00007a1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007a1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007a4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001268  00000000  00000000  00007a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00038f9e  00000000  00000000  00008cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000753a  00000000  00000000  00041c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b643  00000000  00000000  000491cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004044  00000000  00000000  00054810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008396  00000000  00000000  00058854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00017ee3  00000000  00000000  00060bea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001350  00000000  00000000  00078acd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5e c1       	rjmp	.+700    	; 0x2be <__dtors_end>
       2:	00 00       	nop
       4:	86 c1       	rjmp	.+780    	; 0x312 <__bad_interrupt>
       6:	00 00       	nop
       8:	84 c1       	rjmp	.+776    	; 0x312 <__bad_interrupt>
       a:	00 00       	nop
       c:	82 c1       	rjmp	.+772    	; 0x312 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__vector_4>
      14:	7e c1       	rjmp	.+764    	; 0x312 <__bad_interrupt>
      16:	00 00       	nop
      18:	7c c1       	rjmp	.+760    	; 0x312 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__vector_7>
      20:	78 c1       	rjmp	.+752    	; 0x312 <__bad_interrupt>
      22:	00 00       	nop
      24:	76 c1       	rjmp	.+748    	; 0x312 <__bad_interrupt>
      26:	00 00       	nop
      28:	74 c1       	rjmp	.+744    	; 0x312 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	72 c1       	rjmp	.+740    	; 0x312 <__bad_interrupt>
      2e:	00 00       	nop
      30:	70 c1       	rjmp	.+736    	; 0x312 <__bad_interrupt>
      32:	00 00       	nop
      34:	6e c1       	rjmp	.+732    	; 0x312 <__bad_interrupt>
      36:	00 00       	nop
      38:	6c c1       	rjmp	.+728    	; 0x312 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6a c1       	rjmp	.+724    	; 0x312 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 63 2e 	jmp	0x5cc6	; 0x5cc6 <__vector_16>
      44:	66 c1       	rjmp	.+716    	; 0x312 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 56 2c 	jmp	0x58ac	; 0x58ac <__vector_18>
      4c:	0c 94 88 2c 	jmp	0x5910	; 0x5910 <__vector_19>
      50:	60 c1       	rjmp	.+704    	; 0x312 <__bad_interrupt>
      52:	00 00       	nop
      54:	5e c1       	rjmp	.+700    	; 0x312 <__bad_interrupt>
      56:	00 00       	nop
      58:	5c c1       	rjmp	.+696    	; 0x312 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5a c1       	rjmp	.+692    	; 0x312 <__bad_interrupt>
      5e:	00 00       	nop
      60:	58 c1       	rjmp	.+688    	; 0x312 <__bad_interrupt>
      62:	00 00       	nop
      64:	56 c1       	rjmp	.+684    	; 0x312 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 a3 28 	jmp	0x5146	; 0x5146 <__vector_26>
      6c:	52 c1       	rjmp	.+676    	; 0x312 <__bad_interrupt>
      6e:	00 00       	nop
      70:	50 c1       	rjmp	.+672    	; 0x312 <__bad_interrupt>
      72:	00 00       	nop
      74:	4e c1       	rjmp	.+668    	; 0x312 <__bad_interrupt>
      76:	00 00       	nop
      78:	4c c1       	rjmp	.+664    	; 0x312 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4a c1       	rjmp	.+660    	; 0x312 <__bad_interrupt>
      7e:	00 00       	nop
      80:	48 c1       	rjmp	.+656    	; 0x312 <__bad_interrupt>
      82:	00 00       	nop
      84:	46 c1       	rjmp	.+652    	; 0x312 <__bad_interrupt>
      86:	00 00       	nop
      88:	44 c1       	rjmp	.+648    	; 0x312 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	71 09       	sbc	r23, r1
      8e:	96 09       	sbc	r25, r6
      90:	ab 09       	sbc	r26, r11
      92:	d4 09       	sbc	r29, r4
      94:	9e 0a       	sbc	r9, r30
      96:	d2 0a       	sbc	r13, r18
      98:	7b 0b       	sbc	r23, r27
      9a:	c5 0b       	sbc	r28, r21
      9c:	fd 0b       	sbc	r31, r29
      9e:	69 0c       	add	r6, r9
      a0:	24 0d       	add	r18, r4
      a2:	24 0d       	add	r18, r4
      a4:	3a 17       	cp	r19, r26
      a6:	51 17       	cp	r21, r17
      a8:	51 17       	cp	r21, r17
      aa:	4e 17       	cp	r20, r30
      ac:	51 17       	cp	r21, r17
      ae:	38 17       	cp	r19, r24
      b0:	51 17       	cp	r21, r17
      b2:	51 17       	cp	r21, r17
      b4:	51 17       	cp	r21, r17
      b6:	2c 17       	cp	r18, r28
      b8:	51 17       	cp	r21, r17
      ba:	51 17       	cp	r21, r17
      bc:	41 17       	cp	r20, r17
      be:	4c 17       	cp	r20, r28
      c0:	4a 17       	cp	r20, r26
      c2:	51 17       	cp	r21, r17
      c4:	51 17       	cp	r21, r17
      c6:	51 17       	cp	r21, r17
      c8:	48 17       	cp	r20, r24

000000ca <__trampolines_end>:
      ca:	00 40       	sbci	r16, 0x00	; 0
      cc:	7a 10       	cpse	r7, r10
      ce:	f3 5a       	subi	r31, 0xA3	; 163
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	72 4e       	sbci	r23, 0xE2	; 226
      d4:	18 09       	sbc	r17, r8
      d6:	00 10       	cpse	r0, r0
      d8:	a5 d4       	rcall	.+2378   	; 0xa24 <_Z14GetCodeRfidATev+0xac>
      da:	e8 00       	.word	0x00e8	; ????
      dc:	00 e8       	ldi	r16, 0x80	; 128
      de:	76 48       	sbci	r23, 0x86	; 134
      e0:	17 00       	.word	0x0017	; ????
      e2:	00 e4       	ldi	r16, 0x40	; 64
      e4:	0b 54       	subi	r16, 0x4B	; 75
      e6:	02 00       	.word	0x0002	; ????
      e8:	00 ca       	rjmp	.-3072   	; 0xfffff4ea <__eeprom_end+0xff7ef4ea>
      ea:	9a 3b       	cpi	r25, 0xBA	; 186
      ec:	00 00       	nop
      ee:	00 e1       	ldi	r16, 0x10	; 16
      f0:	f5 05       	cpc	r31, r5
      f2:	00 00       	nop
      f4:	80 96       	adiw	r24, 0x20	; 32
      f6:	98 00       	.word	0x0098	; ????
      f8:	00 00       	nop
      fa:	40 42       	sbci	r20, 0x20	; 32
      fc:	0f 00       	.word	0x000f	; ????
      fe:	00 00       	nop
     100:	a0 86       	std	Z+8, r10	; 0x08
     102:	01 00       	.word	0x0001	; ????
     104:	00 00       	nop
     106:	10 27       	eor	r17, r16
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	e8 03       	fmulsu	r22, r16
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	64 00       	.word	0x0064	; ????
     114:	00 00       	nop
     116:	00 00       	nop
     118:	0a 00       	.word	0x000a	; ????
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	01 00       	.word	0x0001	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	2c 76       	andi	r18, 0x6C	; 108
     126:	d8 88       	ldd	r13, Y+16	; 0x10
     128:	dc 67       	ori	r29, 0x7C	; 124
     12a:	4f 08       	sbc	r4, r15
     12c:	23 df       	rcall	.-442    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     12e:	c1 df       	rcall	.-126    	; 0xb2 <__SREG__+0x73>
     130:	ae 59       	subi	r26, 0x9E	; 158
     132:	e1 b1       	in	r30, 0x01	; 1
     134:	b7 96       	adiw	r30, 0x27	; 39
     136:	e5 e3       	ldi	r30, 0x35	; 53
     138:	e4 53       	subi	r30, 0x34	; 52
     13a:	c6 3a       	cpi	r28, 0xA6	; 166
     13c:	e6 51       	subi	r30, 0x16	; 22
     13e:	99 76       	andi	r25, 0x69	; 105
     140:	96 e8       	ldi	r25, 0x86	; 134
     142:	e6 c2       	rjmp	.+1484   	; 0x710 <_Z10displayLCDP6Stringii+0xda>
     144:	84 26       	eor	r8, r20
     146:	eb 89       	ldd	r30, Y+19	; 0x13
     148:	8c 9b       	sbis	0x11, 4	; 17
     14a:	62 ed       	ldi	r22, 0xD2	; 210
     14c:	40 7c       	andi	r20, 0xC0	; 192
     14e:	6f fc       	.word	0xfc6f	; ????
     150:	ef bc       	out	0x2f, r14	; 47
     152:	9c 9f       	mul	r25, r28
     154:	40 f2       	brcs	.-112    	; 0xe6 <__trampolines_end+0x1c>
     156:	ba a5       	ldd	r27, Y+42	; 0x2a
     158:	6f a5       	ldd	r22, Y+47	; 0x2f
     15a:	f4 90       	lpm	r15, Z
     15c:	05 5a       	subi	r16, 0xA5	; 165
     15e:	2a f7       	brpl	.-54     	; 0x12a <__trampolines_end+0x60>
     160:	5c 93       	st	X, r21
     162:	6b 6c       	ori	r22, 0xCB	; 203
     164:	f9 67       	ori	r31, 0x79	; 121
     166:	6d c1       	rjmp	.+730    	; 0x442 <_Z6Buzzerhm+0x12>
     168:	1b fc       	.word	0xfc1b	; ????
     16a:	e0 e4       	ldi	r30, 0x40	; 64
     16c:	0d 47       	sbci	r16, 0x7D	; 125
     16e:	fe f5       	brtc	.+126    	; 0x1ee <_ZZ5setupE3__c+0x15>
     170:	20 e6       	ldi	r18, 0x60	; 96
     172:	b5 00       	.word	0x00b5	; ????
     174:	d0 ed       	ldi	r29, 0xD0	; 208
     176:	90 2e       	mov	r9, r16
     178:	03 00       	.word	0x0003	; ????
     17a:	94 35       	cpi	r25, 0x54	; 84
     17c:	77 05       	cpc	r23, r7
     17e:	00 80       	ld	r0, Z
     180:	84 1e       	adc	r8, r20
     182:	08 00       	.word	0x0008	; ????
     184:	00 20       	and	r0, r0
     186:	4e 0a       	sbc	r4, r30
     188:	00 00       	nop
     18a:	00 c8       	rjmp	.-4096   	; 0xfffff18c <__eeprom_end+0xff7ef18c>
     18c:	0c 33       	cpi	r16, 0x3C	; 60
     18e:	33 33       	cpi	r19, 0x33	; 51
     190:	33 0f       	add	r19, r19
     192:	98 6e       	ori	r25, 0xE8	; 232
     194:	12 83       	std	Z+2, r17	; 0x02
     196:	11 41       	sbci	r17, 0x11	; 17
     198:	ef 8d       	ldd	r30, Y+31	; 0x1f
     19a:	21 14       	cp	r2, r1
     19c:	89 3b       	cpi	r24, 0xB9	; 185
     19e:	e6 55       	subi	r30, 0x56	; 86
     1a0:	16 cf       	rjmp	.-468    	; 0xffffffce <__eeprom_end+0xff7effce>
     1a2:	fe e6       	ldi	r31, 0x6E	; 110
     1a4:	db 18       	sub	r13, r11
     1a6:	d1 84       	ldd	r13, Z+9	; 0x09
     1a8:	4b 38       	cpi	r20, 0x8B	; 139
     1aa:	1b f7       	brvc	.-58     	; 0x172 <__trampolines_end+0xa8>
     1ac:	7c 1d       	adc	r23, r12
     1ae:	90 1d       	adc	r25, r0
     1b0:	a4 bb       	out	0x14, r26	; 20
     1b2:	e4 24       	eor	r14, r4
     1b4:	20 32       	cpi	r18, 0x20	; 32
     1b6:	84 72       	andi	r24, 0x24	; 36
     1b8:	5e 22       	and	r5, r30
     1ba:	81 00       	.word	0x0081	; ????
     1bc:	c9 f1       	breq	.+114    	; 0x230 <digital_pin_to_timer_PGM+0x7>
     1be:	24 ec       	ldi	r18, 0xC4	; 196
     1c0:	a1 e5       	ldi	r26, 0x51	; 81
     1c2:	3d 27       	eor	r19, r29

000001c4 <_ZZ5setupE3__c_0>:
     1c4:	44 53 33 32 33 31 4d 20 69 6e 69 74 69 61 6c 69     DS3231M initiali
     1d4:	7a 65 64 2e 00                                      zed..

000001d9 <_ZZ5setupE3__c>:
     1d9:	55 6e 61 62 6c 65 20 74 6f 20 66 69 6e 64 20 44     Unable to find D
     1e9:	53 33 32 33 31 4d 4d 2e 20 43 68 65 63 6b 69 6e     S3231MM. Checkin
     1f9:	67 20 61 67 61 69 6e 20 69 6e 20 33 73 2e 00        g again in 3s..

00000208 <_ZZN13DS3231M_Class6adjustEvE3__c>:
     208:	53 65 70 20 20 39 20 32 30 32 30 00                 Sep  9 2020.

00000214 <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     214:	31 31 3a 33 33 3a 35 39 00                          11:33:59.

0000021d <_ZL11daysInMonth>:
     21d:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000229 <digital_pin_to_timer_PGM>:
     229:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     245:	00 00 00 01                                         ....

00000249 <digital_pin_to_bit_mask_PGM>:
     249:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     259:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

00000269 <digital_pin_to_port_PGM>:
     269:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     279:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

00000289 <port_to_input_PGM>:
     289:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000293 <port_to_output_PGM>:
     293:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000029d <port_to_mode_PGM>:
     29d:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000002a8 <__ctors_start>:
     2a8:	33 0f       	add	r19, r19
     2aa:	c0 19       	sub	r28, r0
     2ac:	18 1a       	sub	r1, r24
     2ae:	10 1d       	adc	r17, r0
     2b0:	f7 1e       	adc	r15, r23
     2b2:	02 1f       	adc	r16, r18
     2b4:	d4 20       	and	r13, r4
     2b6:	a4 24       	eor	r10, r4
     2b8:	33 2b       	or	r19, r19
     2ba:	b6 2c       	mov	r11, r6

000002bc <__ctors_end>:
     2bc:	16 10       	cpse	r1, r6

000002be <__dtors_end>:
     2be:	11 24       	eor	r1, r1
     2c0:	1f be       	out	0x3f, r1	; 63
     2c2:	cf ef       	ldi	r28, 0xFF	; 255
     2c4:	d0 e4       	ldi	r29, 0x40	; 64
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	cd bf       	out	0x3d, r28	; 61

000002ca <__do_copy_data>:
     2ca:	18 e0       	ldi	r17, 0x08	; 8
     2cc:	a0 e0       	ldi	r26, 0x00	; 0
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	ee e6       	ldi	r30, 0x6E	; 110
     2d2:	f2 e7       	ldi	r31, 0x72	; 114
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	0b bf       	out	0x3b, r16	; 59
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <__do_copy_data+0x14>
     2da:	07 90       	elpm	r0, Z+
     2dc:	0d 92       	st	X+, r0
     2de:	a8 31       	cpi	r26, 0x18	; 24
     2e0:	b1 07       	cpc	r27, r17
     2e2:	d9 f7       	brne	.-10     	; 0x2da <__do_copy_data+0x10>

000002e4 <__do_clear_bss>:
     2e4:	2b e0       	ldi	r18, 0x0B	; 11
     2e6:	a8 e1       	ldi	r26, 0x18	; 24
     2e8:	b8 e0       	ldi	r27, 0x08	; 8
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <.do_clear_bss_start>

000002ec <.do_clear_bss_loop>:
     2ec:	1d 92       	st	X+, r1

000002ee <.do_clear_bss_start>:
     2ee:	a2 33       	cpi	r26, 0x32	; 50
     2f0:	b2 07       	cpc	r27, r18
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <.do_clear_bss_loop>

000002f4 <__do_global_ctors>:
     2f4:	11 e0       	ldi	r17, 0x01	; 1
     2f6:	ce e5       	ldi	r28, 0x5E	; 94
     2f8:	d1 e0       	ldi	r29, 0x01	; 1
     2fa:	04 c0       	rjmp	.+8      	; 0x304 <__do_global_ctors+0x10>
     2fc:	21 97       	sbiw	r28, 0x01	; 1
     2fe:	fe 01       	movw	r30, r28
     300:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <__tablejump2__>
     304:	c4 35       	cpi	r28, 0x54	; 84
     306:	d1 07       	cpc	r29, r17
     308:	c9 f7       	brne	.-14     	; 0x2fc <__do_global_ctors+0x8>
     30a:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <main>
     30e:	0c 94 2b 39 	jmp	0x7256	; 0x7256 <__do_global_dtors>

00000312 <__bad_interrupt>:
     312:	76 ce       	rjmp	.-788    	; 0x0 <__vectors>

00000314 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	08 95       	ret

0000031a <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     31a:	08 95       	ret

0000031c <_ZL10enable_ETHv>:
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
     31c:	44 98       	cbi	0x08, 4	; 8
     31e:	08 95       	ret

00000320 <_ZL11disable_ETHv>:
     320:	44 9a       	sbi	0x08, 4	; 8
     322:	08 95       	ret

00000324 <_Z19InizializzaEthernetv>:
     324:	ef 92       	push	r14
     326:	ff 92       	push	r15
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	68 97       	sbiw	r28, 0x18	; 24
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	f8 94       	cli
     33a:	de bf       	out	0x3e, r29	; 62
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	cd bf       	out	0x3d, r28	; 61
     340:	87 ef       	ldi	r24, 0xF7	; 247
     342:	97 e0       	ldi	r25, 0x07	; 7
     344:	9a 83       	std	Y+2, r25	; 0x02
     346:	89 83       	std	Y+1, r24	; 0x01
     348:	40 91 61 08 	lds	r20, 0x0861	; 0x800861 <subnet+0x2>
     34c:	50 91 62 08 	lds	r21, 0x0862	; 0x800862 <subnet+0x3>
     350:	60 91 63 08 	lds	r22, 0x0863	; 0x800863 <subnet+0x4>
     354:	70 91 64 08 	lds	r23, 0x0864	; 0x800864 <subnet+0x5>
     358:	4b 83       	std	Y+3, r20	; 0x03
     35a:	5c 83       	std	Y+4, r21	; 0x04
     35c:	6d 83       	std	Y+5, r22	; 0x05
     35e:	7e 83       	std	Y+6, r23	; 0x06
     360:	98 87       	std	Y+8, r25	; 0x08
     362:	8f 83       	std	Y+7, r24	; 0x07
     364:	40 91 67 08 	lds	r20, 0x0867	; 0x800867 <gateway+0x2>
     368:	50 91 68 08 	lds	r21, 0x0868	; 0x800868 <gateway+0x3>
     36c:	60 91 69 08 	lds	r22, 0x0869	; 0x800869 <gateway+0x4>
     370:	70 91 6a 08 	lds	r23, 0x086A	; 0x80086a <gateway+0x5>
     374:	49 87       	std	Y+9, r20	; 0x09
     376:	5a 87       	std	Y+10, r21	; 0x0a
     378:	6b 87       	std	Y+11, r22	; 0x0b
     37a:	7c 87       	std	Y+12, r23	; 0x0c
     37c:	9e 87       	std	Y+14, r25	; 0x0e
     37e:	8d 87       	std	Y+13, r24	; 0x0d
     380:	40 91 6d 08 	lds	r20, 0x086D	; 0x80086d <myDns+0x2>
     384:	50 91 6e 08 	lds	r21, 0x086E	; 0x80086e <myDns+0x3>
     388:	60 91 6f 08 	lds	r22, 0x086F	; 0x80086f <myDns+0x4>
     38c:	70 91 70 08 	lds	r23, 0x0870	; 0x800870 <myDns+0x5>
     390:	4f 87       	std	Y+15, r20	; 0x0f
     392:	58 8b       	std	Y+16, r21	; 0x10
     394:	69 8b       	std	Y+17, r22	; 0x11
     396:	7a 8b       	std	Y+18, r23	; 0x12
     398:	9c 8b       	std	Y+20, r25	; 0x14
     39a:	8b 8b       	std	Y+19, r24	; 0x13
     39c:	80 91 73 08 	lds	r24, 0x0873	; 0x800873 <ipCCEC+0x2>
     3a0:	90 91 74 08 	lds	r25, 0x0874	; 0x800874 <ipCCEC+0x3>
     3a4:	a0 91 75 08 	lds	r26, 0x0875	; 0x800875 <ipCCEC+0x4>
     3a8:	b0 91 76 08 	lds	r27, 0x0876	; 0x800876 <ipCCEC+0x5>
     3ac:	8d 8b       	std	Y+21, r24	; 0x15
     3ae:	9e 8b       	std	Y+22, r25	; 0x16
     3b0:	af 8b       	std	Y+23, r26	; 0x17
     3b2:	b8 8f       	std	Y+24, r27	; 0x18
     3b4:	ce 01       	movw	r24, r28
     3b6:	01 96       	adiw	r24, 0x01	; 1
     3b8:	7c 01       	movw	r14, r24
     3ba:	8e 01       	movw	r16, r28
     3bc:	09 5f       	subi	r16, 0xF9	; 249
     3be:	1f 4f       	sbci	r17, 0xFF	; 255
     3c0:	9e 01       	movw	r18, r28
     3c2:	23 5f       	subi	r18, 0xF3	; 243
     3c4:	3f 4f       	sbci	r19, 0xFF	; 255
     3c6:	ae 01       	movw	r20, r28
     3c8:	4d 5e       	subi	r20, 0xED	; 237
     3ca:	5f 4f       	sbci	r21, 0xFF	; 255
     3cc:	66 e2       	ldi	r22, 0x26	; 38
     3ce:	71 e0       	ldi	r23, 0x01	; 1
     3d0:	85 e8       	ldi	r24, 0x85	; 133
     3d2:	99 e0       	ldi	r25, 0x09	; 9
     3d4:	0e 94 ca 1c 	call	0x3994	; 0x3994 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
     3d8:	68 96       	adiw	r28, 0x18	; 24
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	ef 90       	pop	r14
     3f0:	08 95       	ret

000003f2 <_Z11my_delay_msi>:
     3f2:	18 16       	cp	r1, r24
     3f4:	19 06       	cpc	r1, r25
     3f6:	44 f4       	brge	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3f8:	ef e9       	ldi	r30, 0x9F	; 159
     3fa:	ff e0       	ldi	r31, 0x0F	; 15
     3fc:	31 97       	sbiw	r30, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <_Z11my_delay_msi+0xa>
     400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     402:	00 00       	nop
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	f5 cf       	rjmp	.-22     	; 0x3f2 <_Z11my_delay_msi>
     408:	08 95       	ret

0000040a <_Z9printLinev>:
     40a:	cf 93       	push	r28
     40c:	88 e8       	ldi	r24, 0x88	; 136
     40e:	9a e0       	ldi	r25, 0x0A	; 10
     410:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <_ZN5Print7printlnEv>
     414:	cd e7       	ldi	r28, 0x7D	; 125
     416:	61 e8       	ldi	r22, 0x81	; 129
     418:	71 e0       	ldi	r23, 0x01	; 1
     41a:	88 e8       	ldi	r24, 0x88	; 136
     41c:	9a e0       	ldi	r25, 0x0A	; 10
     41e:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <_ZN5Print5printEPKc>
     422:	c1 50       	subi	r28, 0x01	; 1
     424:	c1 f7       	brne	.-16     	; 0x416 <_Z9printLinev+0xc>
     426:	88 e8       	ldi	r24, 0x88	; 136
     428:	9a e0       	ldi	r25, 0x0A	; 10
     42a:	cf 91       	pop	r28
     42c:	0c 94 c7 2d 	jmp	0x5b8e	; 0x5b8e <_ZN5Print7printlnEv>

00000430 <_Z6Buzzerhm>:
     430:	cf 92       	push	r12
     432:	df 92       	push	r13
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	6a 01       	movw	r12, r20
     442:	7b 01       	movw	r14, r22
     444:	c0 e0       	ldi	r28, 0x00	; 0
     446:	d0 e0       	ldi	r29, 0x00	; 0
     448:	08 2f       	mov	r16, r24
     44a:	10 e0       	ldi	r17, 0x00	; 0
     44c:	c0 17       	cp	r28, r16
     44e:	d1 07       	cpc	r29, r17
     450:	24 f4       	brge	.+8      	; 0x45a <_Z6Buzzerhm+0x2a>
     452:	c6 01       	movw	r24, r12
     454:	ce df       	rcall	.-100    	; 0x3f2 <_Z11my_delay_msi>
     456:	21 96       	adiw	r28, 0x01	; 1
     458:	f9 cf       	rjmp	.-14     	; 0x44c <_Z6Buzzerhm+0x1c>
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	cf 90       	pop	r12
     46a:	08 95       	ret

0000046c <_Z13getCharKeypadh>:
     46c:	82 32       	cpi	r24, 0x22	; 34
     46e:	09 f4       	brne	.+2      	; 0x472 <_Z13getCharKeypadh+0x6>
     470:	97 c0       	rjmp	.+302    	; 0x5a0 <_Z13getCharKeypadh+0x134>
     472:	b0 f5       	brcc	.+108    	; 0x4e0 <_Z13getCharKeypadh+0x74>
     474:	89 30       	cpi	r24, 0x09	; 9
     476:	09 f4       	brne	.+2      	; 0x47a <_Z13getCharKeypadh+0xe>
     478:	6f c0       	rjmp	.+222    	; 0x558 <_Z13getCharKeypadh+0xec>
     47a:	98 f4       	brcc	.+38     	; 0x4a2 <_Z13getCharKeypadh+0x36>
     47c:	85 30       	cpi	r24, 0x05	; 5
     47e:	09 f4       	brne	.+2      	; 0x482 <_Z13getCharKeypadh+0x16>
     480:	64 c0       	rjmp	.+200    	; 0x54a <_Z13getCharKeypadh+0xde>
     482:	86 30       	cpi	r24, 0x06	; 6
     484:	09 f4       	brne	.+2      	; 0x488 <_Z13getCharKeypadh+0x1c>
     486:	7a c0       	rjmp	.+244    	; 0x57c <_Z13getCharKeypadh+0x110>
     488:	81 11       	cpse	r24, r1
     48a:	c6 c0       	rjmp	.+396    	; 0x618 <_Z13getCharKeypadh+0x1ac>
     48c:	2f ef       	ldi	r18, 0xFF	; 255
     48e:	89 ef       	ldi	r24, 0xF9	; 249
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	21 50       	subi	r18, 0x01	; 1
     494:	80 40       	sbci	r24, 0x00	; 0
     496:	90 40       	sbci	r25, 0x00	; 0
     498:	e1 f7       	brne	.-8      	; 0x492 <_Z13getCharKeypadh+0x26>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <_Z13getCharKeypadh+0x30>
     49c:	00 00       	nop
     49e:	8e e4       	ldi	r24, 0x4E	; 78
     4a0:	08 95       	ret
     4a2:	81 31       	cpi	r24, 0x11	; 17
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <_Z13getCharKeypadh+0x3c>
     4a6:	61 c0       	rjmp	.+194    	; 0x56a <_Z13getCharKeypadh+0xfe>
     4a8:	60 f4       	brcc	.+24     	; 0x4c2 <_Z13getCharKeypadh+0x56>
     4aa:	8a 30       	cpi	r24, 0x0A	; 10
     4ac:	09 f0       	breq	.+2      	; 0x4b0 <_Z13getCharKeypadh+0x44>
     4ae:	b4 c0       	rjmp	.+360    	; 0x618 <_Z13getCharKeypadh+0x1ac>
     4b0:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <MappaKeys+0x5>
     4b4:	88 e8       	ldi	r24, 0x88	; 136
     4b6:	9a e0       	ldi	r25, 0x0A	; 10
     4b8:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	77 c0       	rjmp	.+238    	; 0x5b0 <_Z13getCharKeypadh+0x144>
     4c2:	82 31       	cpi	r24, 0x12	; 18
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <_Z13getCharKeypadh+0x5c>
     4c6:	63 c0       	rjmp	.+198    	; 0x58e <_Z13getCharKeypadh+0x122>
     4c8:	81 32       	cpi	r24, 0x21	; 33
     4ca:	09 f0       	breq	.+2      	; 0x4ce <_Z13getCharKeypadh+0x62>
     4cc:	a5 c0       	rjmp	.+330    	; 0x618 <_Z13getCharKeypadh+0x1ac>
     4ce:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <MappaKeys+0x3>
     4d2:	88 e8       	ldi	r24, 0x88	; 136
     4d4:	9a e0       	ldi	r25, 0x0A	; 10
     4d6:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     4da:	23 e0       	ldi	r18, 0x03	; 3
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	9e c0       	rjmp	.+316    	; 0x61c <_Z13getCharKeypadh+0x1b0>
     4e0:	80 36       	cpi	r24, 0x60	; 96
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <_Z13getCharKeypadh+0x7a>
     4e4:	8e c0       	rjmp	.+284    	; 0x602 <_Z13getCharKeypadh+0x196>
     4e6:	90 f4       	brcc	.+36     	; 0x50c <_Z13getCharKeypadh+0xa0>
     4e8:	88 34       	cpi	r24, 0x48	; 72
     4ea:	09 f4       	brne	.+2      	; 0x4ee <_Z13getCharKeypadh+0x82>
     4ec:	78 c0       	rjmp	.+240    	; 0x5de <_Z13getCharKeypadh+0x172>
     4ee:	80 35       	cpi	r24, 0x50	; 80
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <_Z13getCharKeypadh+0x88>
     4f2:	7e c0       	rjmp	.+252    	; 0x5f0 <_Z13getCharKeypadh+0x184>
     4f4:	84 34       	cpi	r24, 0x44	; 68
     4f6:	09 f0       	breq	.+2      	; 0x4fa <_Z13getCharKeypadh+0x8e>
     4f8:	8f c0       	rjmp	.+286    	; 0x618 <_Z13getCharKeypadh+0x1ac>
     4fa:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MappaKeys+0xc>
     4fe:	88 e8       	ldi	r24, 0x88	; 136
     500:	9a e0       	ldi	r25, 0x0A	; 10
     502:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	83 c0       	rjmp	.+262    	; 0x612 <_Z13getCharKeypadh+0x1a6>
     50c:	88 38       	cpi	r24, 0x88	; 136
     50e:	09 f4       	brne	.+2      	; 0x512 <_Z13getCharKeypadh+0xa6>
     510:	52 c0       	rjmp	.+164    	; 0x5b6 <_Z13getCharKeypadh+0x14a>
     512:	60 f4       	brcc	.+24     	; 0x52c <_Z13getCharKeypadh+0xc0>
     514:	84 38       	cpi	r24, 0x84	; 132
     516:	09 f0       	breq	.+2      	; 0x51a <_Z13getCharKeypadh+0xae>
     518:	7f c0       	rjmp	.+254    	; 0x618 <_Z13getCharKeypadh+0x1ac>
     51a:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MappaKeys+0x8>
     51e:	88 e8       	ldi	r24, 0x88	; 136
     520:	9a e0       	ldi	r25, 0x0A	; 10
     522:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	56 c0       	rjmp	.+172    	; 0x5d8 <_Z13getCharKeypadh+0x16c>
     52c:	80 39       	cpi	r24, 0x90	; 144
     52e:	09 f4       	brne	.+2      	; 0x532 <_Z13getCharKeypadh+0xc6>
     530:	4b c0       	rjmp	.+150    	; 0x5c8 <_Z13getCharKeypadh+0x15c>
     532:	80 3a       	cpi	r24, 0xA0	; 160
     534:	09 f0       	breq	.+2      	; 0x538 <_Z13getCharKeypadh+0xcc>
     536:	70 c0       	rjmp	.+224    	; 0x618 <_Z13getCharKeypadh+0x1ac>
     538:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <MappaKeys+0xb>
     53c:	88 e8       	ldi	r24, 0x88	; 136
     53e:	9a e0       	ldi	r25, 0x0A	; 10
     540:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     544:	23 e0       	ldi	r18, 0x03	; 3
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	47 c0       	rjmp	.+142    	; 0x5d8 <_Z13getCharKeypadh+0x16c>
     54a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <MappaKeys>
     54e:	88 e8       	ldi	r24, 0x88	; 136
     550:	9a e0       	ldi	r25, 0x0A	; 10
     552:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     556:	60 c0       	rjmp	.+192    	; 0x618 <_Z13getCharKeypadh+0x1ac>
     558:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <MappaKeys+0x1>
     55c:	88 e8       	ldi	r24, 0x88	; 136
     55e:	9a e0       	ldi	r25, 0x0A	; 10
     560:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     564:	21 e0       	ldi	r18, 0x01	; 1
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	59 c0       	rjmp	.+178    	; 0x61c <_Z13getCharKeypadh+0x1b0>
     56a:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <MappaKeys+0x2>
     56e:	88 e8       	ldi	r24, 0x88	; 136
     570:	9a e0       	ldi	r25, 0x0A	; 10
     572:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     576:	22 e0       	ldi	r18, 0x02	; 2
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	50 c0       	rjmp	.+160    	; 0x61c <_Z13getCharKeypadh+0x1b0>
     57c:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MappaKeys+0x4>
     580:	88 e8       	ldi	r24, 0x88	; 136
     582:	9a e0       	ldi	r25, 0x0A	; 10
     584:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	11 c0       	rjmp	.+34     	; 0x5b0 <_Z13getCharKeypadh+0x144>
     58e:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <MappaKeys+0x6>
     592:	88 e8       	ldi	r24, 0x88	; 136
     594:	9a e0       	ldi	r25, 0x0A	; 10
     596:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     59a:	22 e0       	ldi	r18, 0x02	; 2
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	08 c0       	rjmp	.+16     	; 0x5b0 <_Z13getCharKeypadh+0x144>
     5a0:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <MappaKeys+0x7>
     5a4:	88 e8       	ldi	r24, 0x88	; 136
     5a6:	9a e0       	ldi	r25, 0x0A	; 10
     5a8:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     5ac:	23 e0       	ldi	r18, 0x03	; 3
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	35 c0       	rjmp	.+106    	; 0x620 <_Z13getCharKeypadh+0x1b4>
     5b6:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <MappaKeys+0x9>
     5ba:	88 e8       	ldi	r24, 0x88	; 136
     5bc:	9a e0       	ldi	r25, 0x0A	; 10
     5be:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	08 c0       	rjmp	.+16     	; 0x5d8 <_Z13getCharKeypadh+0x16c>
     5c8:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <MappaKeys+0xa>
     5cc:	88 e8       	ldi	r24, 0x88	; 136
     5ce:	9a e0       	ldi	r25, 0x0A	; 10
     5d0:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     5d4:	22 e0       	ldi	r18, 0x02	; 2
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	21 c0       	rjmp	.+66     	; 0x620 <_Z13getCharKeypadh+0x1b4>
     5de:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <MappaKeys+0xd>
     5e2:	88 e8       	ldi	r24, 0x88	; 136
     5e4:	9a e0       	ldi	r25, 0x0A	; 10
     5e6:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     5ea:	21 e0       	ldi	r18, 0x01	; 1
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	11 c0       	rjmp	.+34     	; 0x612 <_Z13getCharKeypadh+0x1a6>
     5f0:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <MappaKeys+0xe>
     5f4:	88 e8       	ldi	r24, 0x88	; 136
     5f6:	9a e0       	ldi	r25, 0x0A	; 10
     5f8:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     5fc:	22 e0       	ldi	r18, 0x02	; 2
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	08 c0       	rjmp	.+16     	; 0x612 <_Z13getCharKeypadh+0x1a6>
     602:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <MappaKeys+0xf>
     606:	88 e8       	ldi	r24, 0x88	; 136
     608:	9a e0       	ldi	r25, 0x0A	; 10
     60a:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     60e:	23 e0       	ldi	r18, 0x03	; 3
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	83 e0       	ldi	r24, 0x03	; 3
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	04 c0       	rjmp	.+8      	; 0x620 <_Z13getCharKeypadh+0x1b4>
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	88 0f       	add	r24, r24
     626:	99 1f       	adc	r25, r25
     628:	8a 5f       	subi	r24, 0xFA	; 250
     62a:	9e 4f       	sbci	r25, 0xFE	; 254
     62c:	fc 01       	movw	r30, r24
     62e:	e2 0f       	add	r30, r18
     630:	f3 1f       	adc	r31, r19
     632:	80 81       	ld	r24, Z
     634:	08 95       	ret

00000636 <_Z10displayLCDP6Stringii>:
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	2c 97       	sbiw	r28, 0x0c	; 12
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
     656:	8c 01       	movw	r16, r24
     658:	6b 01       	movw	r12, r22
     65a:	7a 01       	movw	r14, r20
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	99 e0       	ldi	r25, 0x09	; 9
     660:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_ZN3LCD5clearEv>
     664:	83 e0       	ldi	r24, 0x03	; 3
     666:	c8 16       	cp	r12, r24
     668:	d1 04       	cpc	r13, r1
     66a:	0c f4       	brge	.+2      	; 0x66e <_Z10displayLCDP6Stringii+0x38>
     66c:	47 c0       	rjmp	.+142    	; 0x6fc <_Z10displayLCDP6Stringii+0xc6>
     66e:	40 91 31 08 	lds	r20, 0x0831	; 0x800831 <UltimoPassaggioStato>
     672:	50 91 32 08 	lds	r21, 0x0832	; 0x800832 <UltimoPassaggioStato+0x1>
     676:	60 91 33 08 	lds	r22, 0x0833	; 0x800833 <UltimoPassaggioStato+0x2>
     67a:	70 91 34 08 	lds	r23, 0x0834	; 0x800834 <UltimoPassaggioStato+0x3>
     67e:	80 91 2d 08 	lds	r24, 0x082D	; 0x80082d <Timer>
     682:	90 91 2e 08 	lds	r25, 0x082E	; 0x80082e <Timer+0x1>
     686:	a0 91 2f 08 	lds	r26, 0x082F	; 0x80082f <Timer+0x2>
     68a:	b0 91 30 08 	lds	r27, 0x0830	; 0x800830 <Timer+0x3>
     68e:	48 0f       	add	r20, r24
     690:	59 1f       	adc	r21, r25
     692:	6a 1f       	adc	r22, r26
     694:	7b 1f       	adc	r23, r27
     696:	41 50       	subi	r20, 0x01	; 1
     698:	51 09       	sbc	r21, r1
     69a:	61 09       	sbc	r22, r1
     69c:	71 09       	sbc	r23, r1
     69e:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <secs>
     6a2:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <secs+0x1>
     6a6:	a0 91 37 08 	lds	r26, 0x0837	; 0x800837 <secs+0x2>
     6aa:	b0 91 38 08 	lds	r27, 0x0838	; 0x800838 <secs+0x3>
     6ae:	48 1b       	sub	r20, r24
     6b0:	59 0b       	sbc	r21, r25
     6b2:	6a 0b       	sbc	r22, r26
     6b4:	7b 0b       	sbc	r23, r27
     6b6:	2a e0       	ldi	r18, 0x0A	; 10
     6b8:	ce 01       	movw	r24, r28
     6ba:	07 96       	adiw	r24, 0x07	; 7
     6bc:	0e 94 3f 31 	call	0x627e	; 0x627e <_ZN6StringC1Emh>
     6c0:	63 e9       	ldi	r22, 0x93	; 147
     6c2:	71 e0       	ldi	r23, 0x01	; 1
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
     6cc:	be 01       	movw	r22, r28
     6ce:	69 5f       	subi	r22, 0xF9	; 249
     6d0:	7f 4f       	sbci	r23, 0xFF	; 255
     6d2:	ce 01       	movw	r24, r28
     6d4:	01 96       	adiw	r24, 0x01	; 1
     6d6:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <_ZplRK15StringSumHelperRK6String>
     6da:	6b e9       	ldi	r22, 0x9B	; 155
     6dc:	71 e0       	ldi	r23, 0x01	; 1
     6de:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <_ZplRK15StringSumHelperPKc>
     6e2:	bc 01       	movw	r22, r24
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	99 e0       	ldi	r25, 0x09	; 9
     6e8:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <_ZN5Print5printERK6String>
     6ec:	ce 01       	movw	r24, r28
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     6f4:	ce 01       	movw	r24, r28
     6f6:	07 96       	adiw	r24, 0x07	; 7
     6f8:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	99 e0       	ldi	r25, 0x09	; 9
     702:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
     706:	41 e0       	ldi	r20, 0x01	; 1
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	99 e0       	ldi	r25, 0x09	; 9
     70e:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN3LCD9setCursorEhh>
     712:	b8 01       	movw	r22, r16
     714:	6a 5f       	subi	r22, 0xFA	; 250
     716:	7f 4f       	sbci	r23, 0xFF	; 255
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	99 e0       	ldi	r25, 0x09	; 9
     71c:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <_ZN5Print5printERK6String>
     720:	42 e0       	ldi	r20, 0x02	; 2
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	99 e0       	ldi	r25, 0x09	; 9
     728:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN3LCD9setCursorEhh>
     72c:	b8 01       	movw	r22, r16
     72e:	64 5f       	subi	r22, 0xF4	; 244
     730:	7f 4f       	sbci	r23, 0xFF	; 255
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	99 e0       	ldi	r25, 0x09	; 9
     736:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <_ZN5Print5printERK6String>
     73a:	43 e0       	ldi	r20, 0x03	; 3
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	99 e0       	ldi	r25, 0x09	; 9
     742:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN3LCD9setCursorEhh>
     746:	b8 01       	movw	r22, r16
     748:	6e 5e       	subi	r22, 0xEE	; 238
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	99 e0       	ldi	r25, 0x09	; 9
     750:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <_ZN5Print5printERK6String>
     754:	c7 01       	movw	r24, r14
     756:	4d de       	rcall	.-870    	; 0x3f2 <_Z11my_delay_msi>
     758:	2c 96       	adiw	r28, 0x0c	; 12
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	cd bf       	out	0x3d, r28	; 61
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	df 90       	pop	r13
     772:	cf 90       	pop	r12
     774:	08 95       	ret

00000776 <_Z11avanzaStatom>:
     776:	60 93 2d 08 	sts	0x082D, r22	; 0x80082d <Timer>
     77a:	70 93 2e 08 	sts	0x082E, r23	; 0x80082e <Timer+0x1>
     77e:	80 93 2f 08 	sts	0x082F, r24	; 0x80082f <Timer+0x2>
     782:	90 93 30 08 	sts	0x0830, r25	; 0x800830 <Timer+0x3>
     786:	87 e2       	ldi	r24, 0x27	; 39
     788:	98 e0       	ldi	r25, 0x08	; 8
     78a:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <_ZNK8DateTime11secondstimeEv>
     78e:	60 93 31 08 	sts	0x0831, r22	; 0x800831 <UltimoPassaggioStato>
     792:	70 93 32 08 	sts	0x0832, r23	; 0x800832 <UltimoPassaggioStato+0x1>
     796:	80 93 33 08 	sts	0x0833, r24	; 0x800833 <UltimoPassaggioStato+0x2>
     79a:	90 93 34 08 	sts	0x0834, r25	; 0x800834 <UltimoPassaggioStato+0x3>
     79e:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <stato_procedura>
     7a2:	90 91 da 08 	lds	r25, 0x08DA	; 0x8008da <stato_procedura+0x1>
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <stato_procedura+0x1>
     7ac:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <stato_procedura>
     7b0:	08 95       	ret

000007b2 <_Z14leggiTAG_Mezzob>:
     7b2:	af 92       	push	r10
     7b4:	bf 92       	push	r11
     7b6:	cf 92       	push	r12
     7b8:	df 92       	push	r13
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	a2 97       	sbiw	r28, 0x22	; 34
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	5c 01       	movw	r10, r24
     7d8:	f6 2e       	mov	r15, r22
     7da:	64 e8       	ldi	r22, 0x84	; 132
     7dc:	71 e0       	ldi	r23, 0x01	; 1
     7de:	ce 01       	movw	r24, r28
     7e0:	4d 96       	adiw	r24, 0x1d	; 29
     7e2:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
     7e6:	08 ec       	ldi	r16, 0xC8	; 200
     7e8:	10 e0       	ldi	r17, 0x00	; 0
     7ea:	20 e2       	ldi	r18, 0x20	; 32
     7ec:	39 e0       	ldi	r19, 0x09	; 9
     7ee:	49 e1       	ldi	r20, 0x19	; 25
     7f0:	59 e0       	ldi	r21, 0x09	; 9
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	89 ee       	ldi	r24, 0xE9	; 233
     7f6:	98 e0       	ldi	r25, 0x08	; 8
     7f8:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     7fc:	80 93 21 09 	sts	0x0921, r24	; 0x800921 <success>
     800:	88 23       	and	r24, r24
     802:	09 f4       	brne	.+2      	; 0x806 <_Z14leggiTAG_Mezzob+0x54>
     804:	9d c0       	rjmp	.+314    	; 0x940 <_Z14leggiTAG_Mezzob+0x18e>
     806:	4e e1       	ldi	r20, 0x1E	; 30
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	0f de       	rcall	.-994    	; 0x430 <_Z6Buzzerhm>
     812:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <uidLength>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	09 f0       	breq	.+2      	; 0x81c <_Z14leggiTAG_Mezzob+0x6a>
     81a:	8c c0       	rjmp	.+280    	; 0x934 <_Z14leggiTAG_Mezzob+0x182>
     81c:	86 e0       	ldi	r24, 0x06	; 6
     81e:	e3 e7       	ldi	r30, 0x73	; 115
     820:	f1 e0       	ldi	r31, 0x01	; 1
     822:	de 01       	movw	r26, r28
     824:	57 96       	adiw	r26, 0x17	; 23
     826:	01 90       	ld	r0, Z+
     828:	0d 92       	st	X+, r0
     82a:	8a 95       	dec	r24
     82c:	e1 f7       	brne	.-8      	; 0x826 <_Z14leggiTAG_Mezzob+0x74>
     82e:	ce 01       	movw	r24, r28
     830:	47 96       	adiw	r24, 0x17	; 23
     832:	6c 01       	movw	r12, r24
     834:	e1 2c       	mov	r14, r1
     836:	04 e0       	ldi	r16, 0x04	; 4
     838:	10 e0       	ldi	r17, 0x00	; 0
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	44 e0       	ldi	r20, 0x04	; 4
     840:	69 e1       	ldi	r22, 0x19	; 25
     842:	79 e0       	ldi	r23, 0x09	; 9
     844:	89 ee       	ldi	r24, 0xE9	; 233
     846:	98 e0       	ldi	r25, 0x08	; 8
     848:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     84c:	80 93 21 09 	sts	0x0921, r24	; 0x800921 <success>
     850:	88 23       	and	r24, r24
     852:	09 f4       	brne	.+2      	; 0x856 <_Z14leggiTAG_Mezzob+0xa4>
     854:	5f c0       	rjmp	.+190    	; 0x914 <_Z14leggiTAG_Mezzob+0x162>
     856:	ff 20       	and	r15, r15
     858:	99 f0       	breq	.+38     	; 0x880 <_Z14leggiTAG_Mezzob+0xce>
     85a:	80 e1       	ldi	r24, 0x10	; 16
     85c:	e6 e5       	ldi	r30, 0x56	; 86
     85e:	f7 e0       	ldi	r31, 0x07	; 7
     860:	de 01       	movw	r26, r28
     862:	11 96       	adiw	r26, 0x01	; 1
     864:	01 90       	ld	r0, Z+
     866:	0d 92       	st	X+, r0
     868:	8a 95       	dec	r24
     86a:	e1 f7       	brne	.-8      	; 0x864 <_Z14leggiTAG_Mezzob+0xb2>
     86c:	ae 01       	movw	r20, r28
     86e:	4f 5f       	subi	r20, 0xFF	; 255
     870:	5f 4f       	sbci	r21, 0xFF	; 255
     872:	64 e0       	ldi	r22, 0x04	; 4
     874:	89 ee       	ldi	r24, 0xE9	; 233
     876:	98 e0       	ldi	r25, 0x08	; 8
     878:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     87c:	80 93 21 09 	sts	0x0921, r24	; 0x800921 <success>
     880:	ae 01       	movw	r20, r28
     882:	4f 5f       	subi	r20, 0xFF	; 255
     884:	5f 4f       	sbci	r21, 0xFF	; 255
     886:	64 e0       	ldi	r22, 0x04	; 4
     888:	89 ee       	ldi	r24, 0xE9	; 233
     88a:	98 e0       	ldi	r25, 0x08	; 8
     88c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     890:	80 93 21 09 	sts	0x0921, r24	; 0x800921 <success>
     894:	88 23       	and	r24, r24
     896:	89 f1       	breq	.+98     	; 0x8fa <_Z14leggiTAG_Mezzob+0x148>
     898:	61 ea       	ldi	r22, 0xA1	; 161
     89a:	71 e0       	ldi	r23, 0x01	; 1
     89c:	88 e8       	ldi	r24, 0x88	; 136
     89e:	9a e0       	ldi	r25, 0x0A	; 10
     8a0:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN5Print7printlnEPKc>
     8a4:	be 01       	movw	r22, r28
     8a6:	6f 5f       	subi	r22, 0xFF	; 255
     8a8:	7f 4f       	sbci	r23, 0xFF	; 255
     8aa:	ce 01       	movw	r24, r28
     8ac:	41 96       	adiw	r24, 0x11	; 17
     8ae:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
     8b2:	be 01       	movw	r22, r28
     8b4:	6f 5e       	subi	r22, 0xEF	; 239
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	88 e8       	ldi	r24, 0x88	; 136
     8ba:	9a e0       	ldi	r25, 0x0A	; 10
     8bc:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <_ZN5Print7printlnERK6String>
     8c0:	8d 89       	ldd	r24, Y+21	; 0x15
     8c2:	9e 89       	ldd	r25, Y+22	; 0x16
     8c4:	06 97       	sbiw	r24, 0x06	; 6
     8c6:	59 f4       	brne	.+22     	; 0x8de <_Z14leggiTAG_Mezzob+0x12c>
     8c8:	be 01       	movw	r22, r28
     8ca:	6f 5e       	subi	r22, 0xEF	; 239
     8cc:	7f 4f       	sbci	r23, 0xFF	; 255
     8ce:	c5 01       	movw	r24, r10
     8d0:	0e 94 cf 30 	call	0x619e	; 0x619e <_ZN6StringC1EOS_>
     8d4:	ce 01       	movw	r24, r28
     8d6:	41 96       	adiw	r24, 0x11	; 17
     8d8:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     8dc:	37 c0       	rjmp	.+110    	; 0x94c <_Z14leggiTAG_Mezzob+0x19a>
     8de:	9f ef       	ldi	r25, 0xFF	; 255
     8e0:	21 ee       	ldi	r18, 0xE1	; 225
     8e2:	84 e0       	ldi	r24, 0x04	; 4
     8e4:	91 50       	subi	r25, 0x01	; 1
     8e6:	20 40       	sbci	r18, 0x00	; 0
     8e8:	80 40       	sbci	r24, 0x00	; 0
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <_Z14leggiTAG_Mezzob+0x132>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <_Z14leggiTAG_Mezzob+0x13c>
     8ee:	00 00       	nop
     8f0:	ce 01       	movw	r24, r28
     8f2:	41 96       	adiw	r24, 0x11	; 17
     8f4:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     8f8:	1d c0       	rjmp	.+58     	; 0x934 <_Z14leggiTAG_Mezzob+0x182>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	99 e0       	ldi	r25, 0x09	; 9
     8fe:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_ZN3LCD5clearEv>
     902:	41 e0       	ldi	r20, 0x01	; 1
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	99 e0       	ldi	r25, 0x09	; 9
     90a:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN3LCD9setCursorEhh>
     90e:	6f ea       	ldi	r22, 0xAF	; 175
     910:	71 e0       	ldi	r23, 0x01	; 1
     912:	0c c0       	rjmp	.+24     	; 0x92c <_Z14leggiTAG_Mezzob+0x17a>
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	99 e0       	ldi	r25, 0x09	; 9
     918:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_ZN3LCD5clearEv>
     91c:	41 e0       	ldi	r20, 0x01	; 1
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	99 e0       	ldi	r25, 0x09	; 9
     924:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN3LCD9setCursorEhh>
     928:	69 eb       	ldi	r22, 0xB9	; 185
     92a:	71 e0       	ldi	r23, 0x01	; 1
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	99 e0       	ldi	r25, 0x09	; 9
     930:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <_ZN5Print5printEPKc>
     934:	64 e8       	ldi	r22, 0x84	; 132
     936:	71 e0       	ldi	r23, 0x01	; 1
     938:	88 e8       	ldi	r24, 0x88	; 136
     93a:	9a e0       	ldi	r25, 0x0A	; 10
     93c:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN5Print7printlnEPKc>
     940:	be 01       	movw	r22, r28
     942:	63 5e       	subi	r22, 0xE3	; 227
     944:	7f 4f       	sbci	r23, 0xFF	; 255
     946:	c5 01       	movw	r24, r10
     948:	0e 94 cf 30 	call	0x619e	; 0x619e <_ZN6StringC1EOS_>
     94c:	ce 01       	movw	r24, r28
     94e:	4d 96       	adiw	r24, 0x1d	; 29
     950:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     954:	c5 01       	movw	r24, r10
     956:	a2 96       	adiw	r28, 0x22	; 34
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	df 90       	pop	r13
     970:	cf 90       	pop	r12
     972:	bf 90       	pop	r11
     974:	af 90       	pop	r10
     976:	08 95       	ret

00000978 <_Z14GetCodeRfidATev>:
     978:	cf 92       	push	r12
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
     98c:	64 97       	sbiw	r28, 0x14	; 20
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	7c 01       	movw	r14, r24
     99a:	ce 01       	movw	r24, r28
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	6c 01       	movw	r12, r24
     9a0:	87 e0       	ldi	r24, 0x07	; 7
     9a2:	f6 01       	movw	r30, r12
     9a4:	11 92       	st	Z+, r1
     9a6:	8a 95       	dec	r24
     9a8:	e9 f7       	brne	.-6      	; 0x9a4 <_Z14GetCodeRfidATev+0x2c>
     9aa:	61 ec       	ldi	r22, 0xC1	; 193
     9ac:	71 e0       	ldi	r23, 0x01	; 1
     9ae:	c7 01       	movw	r24, r14
     9b0:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
     9b4:	00 e0       	ldi	r16, 0x00	; 0
     9b6:	10 e0       	ldi	r17, 0x00	; 0
     9b8:	9e 01       	movw	r18, r28
     9ba:	2c 5e       	subi	r18, 0xEC	; 236
     9bc:	3f 4f       	sbci	r19, 0xFF	; 255
     9be:	a6 01       	movw	r20, r12
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	89 ee       	ldi	r24, 0xE9	; 233
     9c4:	98 e0       	ldi	r25, 0x08	; 8
     9c6:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     9ca:	88 23       	and	r24, r24
     9cc:	59 f1       	breq	.+86     	; 0xa24 <_Z14GetCodeRfidATev+0xac>
     9ce:	0c 89       	ldd	r16, Y+20	; 0x14
     9d0:	10 e0       	ldi	r17, 0x00	; 0
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	a6 01       	movw	r20, r12
     9d8:	69 ee       	ldi	r22, 0xE9	; 233
     9da:	78 e0       	ldi	r23, 0x08	; 8
     9dc:	ce 01       	movw	r24, r28
     9de:	0e 96       	adiw	r24, 0x0e	; 14
     9e0:	0e 94 34 13 	call	0x2668	; 0x2668 <_ZN9NFC_PN53210GetHexCodeEPKhm>
     9e4:	ce 01       	movw	r24, r28
     9e6:	0e 96       	adiw	r24, 0x0e	; 14
     9e8:	0e 94 7f 32 	call	0x64fe	; 0x64fe <_ZN6String4trimEv>
     9ec:	28 e0       	ldi	r18, 0x08	; 8
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	be 01       	movw	r22, r28
     9f6:	62 5f       	subi	r22, 0xF2	; 242
     9f8:	7f 4f       	sbci	r23, 0xFF	; 255
     9fa:	ce 01       	movw	r24, r28
     9fc:	08 96       	adiw	r24, 0x08	; 8
     9fe:	0e 94 3c 32 	call	0x6478	; 0x6478 <_ZNK6String9substringEjj>
     a02:	be 01       	movw	r22, r28
     a04:	68 5f       	subi	r22, 0xF8	; 248
     a06:	7f 4f       	sbci	r23, 0xFF	; 255
     a08:	c7 01       	movw	r24, r14
     a0a:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <_ZN6StringaSEOS_>
     a0e:	ce 01       	movw	r24, r28
     a10:	08 96       	adiw	r24, 0x08	; 8
     a12:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <alreadyTimbrata>
     a1c:	ce 01       	movw	r24, r28
     a1e:	0e 96       	adiw	r24, 0x0e	; 14
     a20:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     a24:	c7 01       	movw	r24, r14
     a26:	64 96       	adiw	r28, 0x14	; 20
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	de bf       	out	0x3e, r29	; 62
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	cd bf       	out	0x3d, r28	; 61
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	08 95       	ret

00000a44 <_Z19GetHTTPResponseCode6String>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	2c 97       	sbiw	r28, 0x0c	; 12
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	8c 01       	movw	r16, r24
     a62:	7b 01       	movw	r14, r22
     a64:	68 ec       	ldi	r22, 0xC8	; 200
     a66:	71 e0       	ldi	r23, 0x01	; 1
     a68:	ce 01       	movw	r24, r28
     a6a:	07 96       	adiw	r24, 0x07	; 7
     a6c:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
     a70:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <HTTP_len_response>
     a74:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <HTTP_len_response+0x1>
     a78:	f7 01       	movw	r30, r14
     a7a:	84 81       	ldd	r24, Z+4	; 0x04
     a7c:	95 81       	ldd	r25, Z+5	; 0x05
     a7e:	28 17       	cp	r18, r24
     a80:	39 07       	cpc	r19, r25
     a82:	99 f4       	brne	.+38     	; 0xaaa <_Z19GetHTTPResponseCode6String+0x66>
     a84:	a9 01       	movw	r20, r18
     a86:	43 50       	subi	r20, 0x03	; 3
     a88:	51 09       	sbc	r21, r1
     a8a:	b7 01       	movw	r22, r14
     a8c:	ce 01       	movw	r24, r28
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	0e 94 3c 32 	call	0x6478	; 0x6478 <_ZNK6String9substringEjj>
     a94:	be 01       	movw	r22, r28
     a96:	6f 5f       	subi	r22, 0xFF	; 255
     a98:	7f 4f       	sbci	r23, 0xFF	; 255
     a9a:	c8 01       	movw	r24, r16
     a9c:	0e 94 cf 30 	call	0x619e	; 0x619e <_ZN6StringC1EOS_>
     aa0:	ce 01       	movw	r24, r28
     aa2:	01 96       	adiw	r24, 0x01	; 1
     aa4:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     aa8:	06 c0       	rjmp	.+12     	; 0xab6 <_Z19GetHTTPResponseCode6String+0x72>
     aaa:	be 01       	movw	r22, r28
     aac:	69 5f       	subi	r22, 0xF9	; 249
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	c8 01       	movw	r24, r16
     ab2:	0e 94 cf 30 	call	0x619e	; 0x619e <_ZN6StringC1EOS_>
     ab6:	ce 01       	movw	r24, r28
     ab8:	07 96       	adiw	r24, 0x07	; 7
     aba:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     abe:	c8 01       	movw	r24, r16
     ac0:	2c 96       	adiw	r28, 0x0c	; 12
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	08 95       	ret

00000ada <_Z16GetAteValidationiPc14EthernetClient6String>:
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	2c 97       	sbiw	r28, 0x0c	; 12
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	cd bf       	out	0x3d, r28	; 61
     af6:	8a 01       	movw	r16, r20
     af8:	79 01       	movw	r14, r18
     afa:	ac 01       	movw	r20, r24
     afc:	c8 01       	movw	r24, r16
     afe:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN14EthernetClient7connectEPKcj>
     b02:	89 2b       	or	r24, r25
     b04:	09 f4       	brne	.+2      	; 0xb08 <_Z16GetAteValidationiPc14EthernetClient6String+0x2e>
     b06:	77 c0       	rjmp	.+238    	; 0xbf6 <_Z16GetAteValidationiPc14EthernetClient6String+0x11c>
     b08:	60 ed       	ldi	r22, 0xD0	; 208
     b0a:	71 e0       	ldi	r23, 0x01	; 1
     b0c:	ce 01       	movw	r24, r28
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
     b14:	b7 01       	movw	r22, r14
     b16:	ce 01       	movw	r24, r28
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <_ZplRK15StringSumHelperRK6String>
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	72 e0       	ldi	r23, 0x02	; 2
     b22:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <_ZplRK15StringSumHelperPKc>
     b26:	bc 01       	movw	r22, r24
     b28:	8d ed       	ldi	r24, 0xDD	; 221
     b2a:	98 e0       	ldi	r25, 0x08	; 8
     b2c:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN6StringaSERKS_>
     b30:	ce 01       	movw	r24, r28
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     b38:	6e e0       	ldi	r22, 0x0E	; 14
     b3a:	72 e0       	ldi	r23, 0x02	; 2
     b3c:	8d ed       	ldi	r24, 0xDD	; 221
     b3e:	98 e0       	ldi	r25, 0x08	; 8
     b40:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     b44:	6b ef       	ldi	r22, 0xFB	; 251
     b46:	73 e0       	ldi	r23, 0x03	; 3
     b48:	8d ed       	ldi	r24, 0xDD	; 221
     b4a:	98 e0       	ldi	r25, 0x08	; 8
     b4c:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     b50:	6a e2       	ldi	r22, 0x2A	; 42
     b52:	72 e0       	ldi	r23, 0x02	; 2
     b54:	8d ed       	ldi	r24, 0xDD	; 221
     b56:	98 e0       	ldi	r25, 0x08	; 8
     b58:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     b5c:	6b ef       	ldi	r22, 0xFB	; 251
     b5e:	73 e0       	ldi	r23, 0x03	; 3
     b60:	8d ed       	ldi	r24, 0xDD	; 221
     b62:	98 e0       	ldi	r25, 0x08	; 8
     b64:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     b68:	63 e4       	ldi	r22, 0x43	; 67
     b6a:	72 e0       	ldi	r23, 0x02	; 2
     b6c:	8d ed       	ldi	r24, 0xDD	; 221
     b6e:	98 e0       	ldi	r25, 0x08	; 8
     b70:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     b74:	6b ef       	ldi	r22, 0xFB	; 251
     b76:	73 e0       	ldi	r23, 0x03	; 3
     b78:	8d ed       	ldi	r24, 0xDD	; 221
     b7a:	98 e0       	ldi	r25, 0x08	; 8
     b7c:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     b80:	62 e6       	ldi	r22, 0x62	; 98
     b82:	72 e0       	ldi	r23, 0x02	; 2
     b84:	8d ed       	ldi	r24, 0xDD	; 221
     b86:	98 e0       	ldi	r25, 0x08	; 8
     b88:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     b8c:	6b ef       	ldi	r22, 0xFB	; 251
     b8e:	73 e0       	ldi	r23, 0x03	; 3
     b90:	8d ed       	ldi	r24, 0xDD	; 221
     b92:	98 e0       	ldi	r25, 0x08	; 8
     b94:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     b98:	62 e8       	ldi	r22, 0x82	; 130
     b9a:	72 e0       	ldi	r23, 0x02	; 2
     b9c:	8d ed       	ldi	r24, 0xDD	; 221
     b9e:	98 e0       	ldi	r25, 0x08	; 8
     ba0:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     ba4:	6b ef       	ldi	r22, 0xFB	; 251
     ba6:	73 e0       	ldi	r23, 0x03	; 3
     ba8:	8d ed       	ldi	r24, 0xDD	; 221
     baa:	98 e0       	ldi	r25, 0x08	; 8
     bac:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     bb0:	6c e2       	ldi	r22, 0x2C	; 44
     bb2:	73 e0       	ldi	r23, 0x03	; 3
     bb4:	8d ed       	ldi	r24, 0xDD	; 221
     bb6:	98 e0       	ldi	r25, 0x08	; 8
     bb8:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     bbc:	6b ef       	ldi	r22, 0xFB	; 251
     bbe:	73 e0       	ldi	r23, 0x03	; 3
     bc0:	8d ed       	ldi	r24, 0xDD	; 221
     bc2:	98 e0       	ldi	r25, 0x08	; 8
     bc4:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     bc8:	6d ed       	ldi	r22, 0xDD	; 221
     bca:	78 e0       	ldi	r23, 0x08	; 8
     bcc:	c8 01       	movw	r24, r16
     bce:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <_ZN5Print5printERK6String>
     bd2:	2f ef       	ldi	r18, 0xFF	; 255
     bd4:	87 ee       	ldi	r24, 0xE7	; 231
     bd6:	93 e0       	ldi	r25, 0x03	; 3
     bd8:	21 50       	subi	r18, 0x01	; 1
     bda:	80 40       	sbci	r24, 0x00	; 0
     bdc:	90 40       	sbci	r25, 0x00	; 0
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <_Z16GetAteValidationiPc14EthernetClient6String+0xfe>
     be0:	00 c0       	rjmp	.+0      	; 0xbe2 <_Z16GetAteValidationiPc14EthernetClient6String+0x108>
     be2:	00 00       	nop
     be4:	6b e4       	ldi	r22, 0x4B	; 75
     be6:	73 e0       	ldi	r23, 0x03	; 3
     be8:	c8 01       	movw	r24, r16
     bea:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN5Print7printlnEPKc>
     bee:	c8 01       	movw	r24, r16
     bf0:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <_ZN5Print7printlnEv>
     bf4:	25 c0       	rjmp	.+74     	; 0xc40 <_Z16GetAteValidationiPc14EthernetClient6String+0x166>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	99 e0       	ldi	r25, 0x09	; 9
     bfa:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_ZN3LCD5clearEv>
     bfe:	41 e0       	ldi	r20, 0x01	; 1
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	99 e0       	ldi	r25, 0x09	; 9
     c06:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN3LCD9setCursorEhh>
     c0a:	6d e5       	ldi	r22, 0x5D	; 93
     c0c:	73 e0       	ldi	r23, 0x03	; 3
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	99 e0       	ldi	r25, 0x09	; 9
     c12:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <_ZN5Print5printEPKc>
     c16:	43 e0       	ldi	r20, 0x03	; 3
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	99 e0       	ldi	r25, 0x09	; 9
     c1e:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN3LCD9setCursorEhh>
     c22:	62 e7       	ldi	r22, 0x72	; 114
     c24:	73 e0       	ldi	r23, 0x03	; 3
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	99 e0       	ldi	r25, 0x09	; 9
     c2a:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <_ZN5Print5printEPKc>
     c2e:	2f ef       	ldi	r18, 0xFF	; 255
     c30:	83 ed       	ldi	r24, 0xD3	; 211
     c32:	90 e3       	ldi	r25, 0x30	; 48
     c34:	21 50       	subi	r18, 0x01	; 1
     c36:	80 40       	sbci	r24, 0x00	; 0
     c38:	90 40       	sbci	r25, 0x00	; 0
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <_Z16GetAteValidationiPc14EthernetClient6String+0x15a>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <_Z16GetAteValidationiPc14EthernetClient6String+0x164>
     c3e:	00 00       	nop
     c40:	2f ef       	ldi	r18, 0xFF	; 255
     c42:	81 ee       	ldi	r24, 0xE1	; 225
     c44:	94 e0       	ldi	r25, 0x04	; 4
     c46:	21 50       	subi	r18, 0x01	; 1
     c48:	80 40       	sbci	r24, 0x00	; 0
     c4a:	90 40       	sbci	r25, 0x00	; 0
     c4c:	e1 f7       	brne	.-8      	; 0xc46 <_Z16GetAteValidationiPc14EthernetClient6String+0x16c>
     c4e:	00 c0       	rjmp	.+0      	; 0xc50 <_Z16GetAteValidationiPc14EthernetClient6String+0x176>
     c50:	00 00       	nop
     c52:	f1 2c       	mov	r15, r1
     c54:	c8 01       	movw	r24, r16
     c56:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <_ZN14EthernetClient9availableEv>
     c5a:	89 2b       	or	r24, r25
     c5c:	09 f4       	brne	.+2      	; 0xc60 <_Z16GetAteValidationiPc14EthernetClient6String+0x186>
     c5e:	54 c0       	rjmp	.+168    	; 0xd08 <_Z16GetAteValidationiPc14EthernetClient6String+0x22e>
     c60:	c8 01       	movw	r24, r16
     c62:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <_ZN14EthernetClient4readEv>
     c66:	e8 2e       	mov	r14, r24
     c68:	61 ed       	ldi	r22, 0xD1	; 209
     c6a:	78 e0       	ldi	r23, 0x08	; 8
     c6c:	ce 01       	movw	r24, r28
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <_ZN6StringC1ERKS_>
     c74:	6e 2d       	mov	r22, r14
     c76:	ce 01       	movw	r24, r28
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	0e 94 12 32 	call	0x6424	; 0x6424 <_ZplRK15StringSumHelperc>
     c7e:	bc 01       	movw	r22, r24
     c80:	81 ed       	ldi	r24, 0xD1	; 209
     c82:	98 e0       	ldi	r25, 0x08	; 8
     c84:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN6StringaSERKS_>
     c88:	ce 01       	movw	r24, r28
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     c90:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <HTTP_len_response>
     c94:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <HTTP_len_response+0x1>
     c98:	80 91 d5 08 	lds	r24, 0x08D5	; 0x8008d5 <RispostaHTTP+0x4>
     c9c:	90 91 d6 08 	lds	r25, 0x08D6	; 0x8008d6 <RispostaHTTP+0x5>
     ca0:	28 17       	cp	r18, r24
     ca2:	39 07       	cpc	r19, r25
     ca4:	b9 f6       	brne	.-82     	; 0xc54 <_Z16GetAteValidationiPc14EthernetClient6String+0x17a>
     ca6:	61 ed       	ldi	r22, 0xD1	; 209
     ca8:	78 e0       	ldi	r23, 0x08	; 8
     caa:	ce 01       	movw	r24, r28
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <_ZN6StringC1ERKS_>
     cb2:	be 01       	movw	r22, r28
     cb4:	6f 5f       	subi	r22, 0xFF	; 255
     cb6:	7f 4f       	sbci	r23, 0xFF	; 255
     cb8:	ce 01       	movw	r24, r28
     cba:	07 96       	adiw	r24, 0x07	; 7
     cbc:	c3 de       	rcall	.-634    	; 0xa44 <_Z19GetHTTPResponseCode6String>
     cbe:	ce 01       	movw	r24, r28
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     cc6:	2f ef       	ldi	r18, 0xFF	; 255
     cc8:	87 ee       	ldi	r24, 0xE7	; 231
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	21 50       	subi	r18, 0x01	; 1
     cce:	80 40       	sbci	r24, 0x00	; 0
     cd0:	90 40       	sbci	r25, 0x00	; 0
     cd2:	e1 f7       	brne	.-8      	; 0xccc <_Z16GetAteValidationiPc14EthernetClient6String+0x1f2>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <_Z16GetAteValidationiPc14EthernetClient6String+0x1fc>
     cd6:	00 00       	nop
     cd8:	61 e8       	ldi	r22, 0x81	; 129
     cda:	73 e0       	ldi	r23, 0x03	; 3
     cdc:	ce 01       	movw	r24, r28
     cde:	07 96       	adiw	r24, 0x07	; 7
     ce0:	0e 94 1e 32 	call	0x643c	; 0x643c <_ZNK6String6equalsEPKc>
     ce4:	88 23       	and	r24, r24
     ce6:	11 f0       	breq	.+4      	; 0xcec <_Z16GetAteValidationiPc14EthernetClient6String+0x212>
     ce8:	ff 24       	eor	r15, r15
     cea:	f3 94       	inc	r15
     cec:	2f ef       	ldi	r18, 0xFF	; 255
     cee:	87 ee       	ldi	r24, 0xE7	; 231
     cf0:	93 e0       	ldi	r25, 0x03	; 3
     cf2:	21 50       	subi	r18, 0x01	; 1
     cf4:	80 40       	sbci	r24, 0x00	; 0
     cf6:	90 40       	sbci	r25, 0x00	; 0
     cf8:	e1 f7       	brne	.-8      	; 0xcf2 <_Z16GetAteValidationiPc14EthernetClient6String+0x218>
     cfa:	00 c0       	rjmp	.+0      	; 0xcfc <_Z16GetAteValidationiPc14EthernetClient6String+0x222>
     cfc:	00 00       	nop
     cfe:	ce 01       	movw	r24, r28
     d00:	07 96       	adiw	r24, 0x07	; 7
     d02:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     d06:	a6 cf       	rjmp	.-180    	; 0xc54 <_Z16GetAteValidationiPc14EthernetClient6String+0x17a>
     d08:	8f 2d       	mov	r24, r15
     d0a:	2c 96       	adiw	r28, 0x0c	; 12
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	08 95       	ret

00000d24 <_Z14PostErogazioneiPc14EthernetClient6String>:
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	2c 97       	sbiw	r28, 0x0c	; 12
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	8a 01       	movw	r16, r20
     d42:	79 01       	movw	r14, r18
     d44:	ac 01       	movw	r20, r24
     d46:	c8 01       	movw	r24, r16
     d48:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN14EthernetClient7connectEPKcj>
     d4c:	89 2b       	or	r24, r25
     d4e:	09 f4       	brne	.+2      	; 0xd52 <_Z14PostErogazioneiPc14EthernetClient6String+0x2e>
     d50:	89 c0       	rjmp	.+274    	; 0xe64 <_Z14PostErogazioneiPc14EthernetClient6String+0x140>
     d52:	65 e8       	ldi	r22, 0x85	; 133
     d54:	73 e0       	ldi	r23, 0x03	; 3
     d56:	8d ed       	ldi	r24, 0xDD	; 221
     d58:	98 e0       	ldi	r25, 0x08	; 8
     d5a:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
     d5e:	66 ea       	ldi	r22, 0xA6	; 166
     d60:	73 e0       	ldi	r23, 0x03	; 3
     d62:	8d ed       	ldi	r24, 0xDD	; 221
     d64:	98 e0       	ldi	r25, 0x08	; 8
     d66:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     d6a:	6b ef       	ldi	r22, 0xFB	; 251
     d6c:	73 e0       	ldi	r23, 0x03	; 3
     d6e:	8d ed       	ldi	r24, 0xDD	; 221
     d70:	98 e0       	ldi	r25, 0x08	; 8
     d72:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     d76:	62 e8       	ldi	r22, 0x82	; 130
     d78:	72 e0       	ldi	r23, 0x02	; 2
     d7a:	8d ed       	ldi	r24, 0xDD	; 221
     d7c:	98 e0       	ldi	r25, 0x08	; 8
     d7e:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     d82:	6b ef       	ldi	r22, 0xFB	; 251
     d84:	73 e0       	ldi	r23, 0x03	; 3
     d86:	8d ed       	ldi	r24, 0xDD	; 221
     d88:	98 e0       	ldi	r25, 0x08	; 8
     d8a:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     d8e:	6c e2       	ldi	r22, 0x2C	; 44
     d90:	73 e0       	ldi	r23, 0x03	; 3
     d92:	8d ed       	ldi	r24, 0xDD	; 221
     d94:	98 e0       	ldi	r25, 0x08	; 8
     d96:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     d9a:	6b ef       	ldi	r22, 0xFB	; 251
     d9c:	73 e0       	ldi	r23, 0x03	; 3
     d9e:	8d ed       	ldi	r24, 0xDD	; 221
     da0:	98 e0       	ldi	r25, 0x08	; 8
     da2:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     da6:	68 ec       	ldi	r22, 0xC8	; 200
     da8:	73 e0       	ldi	r23, 0x03	; 3
     daa:	8d ed       	ldi	r24, 0xDD	; 221
     dac:	98 e0       	ldi	r25, 0x08	; 8
     dae:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     db2:	6b ef       	ldi	r22, 0xFB	; 251
     db4:	73 e0       	ldi	r23, 0x03	; 3
     db6:	8d ed       	ldi	r24, 0xDD	; 221
     db8:	98 e0       	ldi	r25, 0x08	; 8
     dba:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     dbe:	64 ed       	ldi	r22, 0xD4	; 212
     dc0:	73 e0       	ldi	r23, 0x03	; 3
     dc2:	8d ed       	ldi	r24, 0xDD	; 221
     dc4:	98 e0       	ldi	r25, 0x08	; 8
     dc6:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     dca:	6b ef       	ldi	r22, 0xFB	; 251
     dcc:	73 e0       	ldi	r23, 0x03	; 3
     dce:	8d ed       	ldi	r24, 0xDD	; 221
     dd0:	98 e0       	ldi	r25, 0x08	; 8
     dd2:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     dd6:	6b ef       	ldi	r22, 0xFB	; 251
     dd8:	73 e0       	ldi	r23, 0x03	; 3
     dda:	8d ed       	ldi	r24, 0xDD	; 221
     ddc:	98 e0       	ldi	r25, 0x08	; 8
     dde:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     de2:	67 ee       	ldi	r22, 0xE7	; 231
     de4:	73 e0       	ldi	r23, 0x03	; 3
     de6:	8d ed       	ldi	r24, 0xDD	; 221
     de8:	98 e0       	ldi	r25, 0x08	; 8
     dea:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     dee:	6b ee       	ldi	r22, 0xEB	; 235
     df0:	73 e0       	ldi	r23, 0x03	; 3
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
     dfa:	b7 01       	movw	r22, r14
     dfc:	ce 01       	movw	r24, r28
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <_ZplRK15StringSumHelperRK6String>
     e04:	6a ef       	ldi	r22, 0xFA	; 250
     e06:	73 e0       	ldi	r23, 0x03	; 3
     e08:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <_ZplRK15StringSumHelperPKc>
     e0c:	bc 01       	movw	r22, r24
     e0e:	8d ed       	ldi	r24, 0xDD	; 221
     e10:	98 e0       	ldi	r25, 0x08	; 8
     e12:	0e 94 c4 31 	call	0x6388	; 0x6388 <_ZN6String6concatERKS_>
     e16:	ce 01       	movw	r24, r28
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     e1e:	6e ef       	ldi	r22, 0xFE	; 254
     e20:	73 e0       	ldi	r23, 0x03	; 3
     e22:	8d ed       	ldi	r24, 0xDD	; 221
     e24:	98 e0       	ldi	r25, 0x08	; 8
     e26:	0e 94 ca 31 	call	0x6394	; 0x6394 <_ZN6String6concatEPKc>
     e2a:	6d ed       	ldi	r22, 0xDD	; 221
     e2c:	78 e0       	ldi	r23, 0x08	; 8
     e2e:	88 e8       	ldi	r24, 0x88	; 136
     e30:	9a e0       	ldi	r25, 0x0A	; 10
     e32:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <_ZN5Print7printlnERK6String>
     e36:	6d ed       	ldi	r22, 0xDD	; 221
     e38:	78 e0       	ldi	r23, 0x08	; 8
     e3a:	c8 01       	movw	r24, r16
     e3c:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <_ZN5Print5printERK6String>
     e40:	2f ef       	ldi	r18, 0xFF	; 255
     e42:	87 ee       	ldi	r24, 0xE7	; 231
     e44:	93 e0       	ldi	r25, 0x03	; 3
     e46:	21 50       	subi	r18, 0x01	; 1
     e48:	80 40       	sbci	r24, 0x00	; 0
     e4a:	90 40       	sbci	r25, 0x00	; 0
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <_Z14PostErogazioneiPc14EthernetClient6String+0x122>
     e4e:	00 c0       	rjmp	.+0      	; 0xe50 <_Z14PostErogazioneiPc14EthernetClient6String+0x12c>
     e50:	00 00       	nop
     e52:	6b e4       	ldi	r22, 0x4B	; 75
     e54:	73 e0       	ldi	r23, 0x03	; 3
     e56:	c8 01       	movw	r24, r16
     e58:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN5Print7printlnEPKc>
     e5c:	c8 01       	movw	r24, r16
     e5e:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <_ZN5Print7printlnEv>
     e62:	25 c0       	rjmp	.+74     	; 0xeae <_Z14PostErogazioneiPc14EthernetClient6String+0x18a>
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	99 e0       	ldi	r25, 0x09	; 9
     e68:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_ZN3LCD5clearEv>
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	99 e0       	ldi	r25, 0x09	; 9
     e74:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN3LCD9setCursorEhh>
     e78:	6d e5       	ldi	r22, 0x5D	; 93
     e7a:	73 e0       	ldi	r23, 0x03	; 3
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	99 e0       	ldi	r25, 0x09	; 9
     e80:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <_ZN5Print5printEPKc>
     e84:	43 e0       	ldi	r20, 0x03	; 3
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	99 e0       	ldi	r25, 0x09	; 9
     e8c:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN3LCD9setCursorEhh>
     e90:	62 e7       	ldi	r22, 0x72	; 114
     e92:	73 e0       	ldi	r23, 0x03	; 3
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	99 e0       	ldi	r25, 0x09	; 9
     e98:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <_ZN5Print5printEPKc>
     e9c:	2f ef       	ldi	r18, 0xFF	; 255
     e9e:	83 ed       	ldi	r24, 0xD3	; 211
     ea0:	90 e3       	ldi	r25, 0x30	; 48
     ea2:	21 50       	subi	r18, 0x01	; 1
     ea4:	80 40       	sbci	r24, 0x00	; 0
     ea6:	90 40       	sbci	r25, 0x00	; 0
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <_Z14PostErogazioneiPc14EthernetClient6String+0x17e>
     eaa:	00 c0       	rjmp	.+0      	; 0xeac <_Z14PostErogazioneiPc14EthernetClient6String+0x188>
     eac:	00 00       	nop
     eae:	2f ef       	ldi	r18, 0xFF	; 255
     eb0:	81 ee       	ldi	r24, 0xE1	; 225
     eb2:	94 e0       	ldi	r25, 0x04	; 4
     eb4:	21 50       	subi	r18, 0x01	; 1
     eb6:	80 40       	sbci	r24, 0x00	; 0
     eb8:	90 40       	sbci	r25, 0x00	; 0
     eba:	e1 f7       	brne	.-8      	; 0xeb4 <_Z14PostErogazioneiPc14EthernetClient6String+0x190>
     ebc:	00 c0       	rjmp	.+0      	; 0xebe <_Z14PostErogazioneiPc14EthernetClient6String+0x19a>
     ebe:	00 00       	nop
     ec0:	f1 2c       	mov	r15, r1
     ec2:	c8 01       	movw	r24, r16
     ec4:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <_ZN14EthernetClient9availableEv>
     ec8:	89 2b       	or	r24, r25
     eca:	09 f4       	brne	.+2      	; 0xece <_Z14PostErogazioneiPc14EthernetClient6String+0x1aa>
     ecc:	54 c0       	rjmp	.+168    	; 0xf76 <_Z14PostErogazioneiPc14EthernetClient6String+0x252>
     ece:	c8 01       	movw	r24, r16
     ed0:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <_ZN14EthernetClient4readEv>
     ed4:	e8 2e       	mov	r14, r24
     ed6:	61 ed       	ldi	r22, 0xD1	; 209
     ed8:	78 e0       	ldi	r23, 0x08	; 8
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <_ZN6StringC1ERKS_>
     ee2:	6e 2d       	mov	r22, r14
     ee4:	ce 01       	movw	r24, r28
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	0e 94 12 32 	call	0x6424	; 0x6424 <_ZplRK15StringSumHelperc>
     eec:	bc 01       	movw	r22, r24
     eee:	81 ed       	ldi	r24, 0xD1	; 209
     ef0:	98 e0       	ldi	r25, 0x08	; 8
     ef2:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN6StringaSERKS_>
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     efe:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <HTTP_len_response>
     f02:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <HTTP_len_response+0x1>
     f06:	80 91 d5 08 	lds	r24, 0x08D5	; 0x8008d5 <RispostaHTTP+0x4>
     f0a:	90 91 d6 08 	lds	r25, 0x08D6	; 0x8008d6 <RispostaHTTP+0x5>
     f0e:	28 17       	cp	r18, r24
     f10:	39 07       	cpc	r19, r25
     f12:	b9 f6       	brne	.-82     	; 0xec2 <_Z14PostErogazioneiPc14EthernetClient6String+0x19e>
     f14:	61 ed       	ldi	r22, 0xD1	; 209
     f16:	78 e0       	ldi	r23, 0x08	; 8
     f18:	ce 01       	movw	r24, r28
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <_ZN6StringC1ERKS_>
     f20:	be 01       	movw	r22, r28
     f22:	6f 5f       	subi	r22, 0xFF	; 255
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	ce 01       	movw	r24, r28
     f28:	07 96       	adiw	r24, 0x07	; 7
     f2a:	8c dd       	rcall	.-1256   	; 0xa44 <_Z19GetHTTPResponseCode6String>
     f2c:	ce 01       	movw	r24, r28
     f2e:	01 96       	adiw	r24, 0x01	; 1
     f30:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     f34:	2f ef       	ldi	r18, 0xFF	; 255
     f36:	87 ee       	ldi	r24, 0xE7	; 231
     f38:	93 e0       	ldi	r25, 0x03	; 3
     f3a:	21 50       	subi	r18, 0x01	; 1
     f3c:	80 40       	sbci	r24, 0x00	; 0
     f3e:	90 40       	sbci	r25, 0x00	; 0
     f40:	e1 f7       	brne	.-8      	; 0xf3a <_Z14PostErogazioneiPc14EthernetClient6String+0x216>
     f42:	00 c0       	rjmp	.+0      	; 0xf44 <_Z14PostErogazioneiPc14EthernetClient6String+0x220>
     f44:	00 00       	nop
     f46:	61 e8       	ldi	r22, 0x81	; 129
     f48:	73 e0       	ldi	r23, 0x03	; 3
     f4a:	ce 01       	movw	r24, r28
     f4c:	07 96       	adiw	r24, 0x07	; 7
     f4e:	0e 94 1e 32 	call	0x643c	; 0x643c <_ZNK6String6equalsEPKc>
     f52:	88 23       	and	r24, r24
     f54:	11 f0       	breq	.+4      	; 0xf5a <_Z14PostErogazioneiPc14EthernetClient6String+0x236>
     f56:	ff 24       	eor	r15, r15
     f58:	f3 94       	inc	r15
     f5a:	2f ef       	ldi	r18, 0xFF	; 255
     f5c:	87 ee       	ldi	r24, 0xE7	; 231
     f5e:	93 e0       	ldi	r25, 0x03	; 3
     f60:	21 50       	subi	r18, 0x01	; 1
     f62:	80 40       	sbci	r24, 0x00	; 0
     f64:	90 40       	sbci	r25, 0x00	; 0
     f66:	e1 f7       	brne	.-8      	; 0xf60 <_Z14PostErogazioneiPc14EthernetClient6String+0x23c>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <_Z14PostErogazioneiPc14EthernetClient6String+0x246>
     f6a:	00 00       	nop
     f6c:	ce 01       	movw	r24, r28
     f6e:	07 96       	adiw	r24, 0x07	; 7
     f70:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
     f74:	a6 cf       	rjmp	.-180    	; 0xec2 <_Z14PostErogazioneiPc14EthernetClient6String+0x19e>
     f76:	2f ef       	ldi	r18, 0xFF	; 255
     f78:	80 e7       	ldi	r24, 0x70	; 112
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	21 50       	subi	r18, 0x01	; 1
     f7e:	80 40       	sbci	r24, 0x00	; 0
     f80:	90 40       	sbci	r25, 0x00	; 0
     f82:	e1 f7       	brne	.-8      	; 0xf7c <_Z14PostErogazioneiPc14EthernetClient6String+0x258>
     f84:	00 c0       	rjmp	.+0      	; 0xf86 <_Z14PostErogazioneiPc14EthernetClient6String+0x262>
     f86:	00 00       	nop
     f88:	8f 2d       	mov	r24, r15
     f8a:	2c 96       	adiw	r28, 0x0c	; 12
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	08 95       	ret

00000fa4 <_Z15abilitaPulsantiv>:
     fa4:	57 98       	cbi	0x0a, 7	; 10
     fa6:	56 98       	cbi	0x0a, 6	; 10
     fa8:	88 e0       	ldi	r24, 0x08	; 8
     faa:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     fae:	80 ec       	ldi	r24, 0xC0	; 192
     fb0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     fb4:	78 94       	sei
     fb6:	08 95       	ret

00000fb8 <_Z22abilitaContattiPistolav>:
     fb8:	09 98       	cbi	0x01, 1	; 1
     fba:	0a 98       	cbi	0x01, 2	; 1
     fbc:	08 95       	ret

00000fbe <_Z13abilitaPulserc>:
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     fc4:	84 34       	cpi	r24, 0x44	; 68
     fc6:	19 f4       	brne	.+6      	; 0xfce <_Z13abilitaPulserc+0x10>
     fc8:	0d 98       	cbi	0x01, 5	; 1
     fca:	80 e2       	ldi	r24, 0x20	; 32
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <_Z13abilitaPulserc+0x14>
     fce:	0e 98       	cbi	0x01, 6	; 1
     fd0:	80 e4       	ldi	r24, 0x40	; 64
     fd2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     fd6:	78 94       	sei
     fd8:	08 95       	ret

00000fda <_Z14impulsiToLitrii>:
     fda:	cf 92       	push	r12
     fdc:	df 92       	push	r13
     fde:	ef 92       	push	r14
     fe0:	ff 92       	push	r15
     fe2:	bc 01       	movw	r22, r24
     fe4:	99 0f       	add	r25, r25
     fe6:	88 0b       	sbc	r24, r24
     fe8:	99 0b       	sbc	r25, r25
     fea:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__floatsisf>
     fee:	6b 01       	movw	r12, r22
     ff0:	7c 01       	movw	r14, r24
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	0e 94 36 2b 	call	0x566c	; 0x566c <__cmpsf2>
     ffc:	87 ff       	sbrs	r24, 7
     ffe:	03 c0       	rjmp	.+6      	; 0x1006 <_Z14impulsiToLitrii+0x2c>
    1000:	c1 2c       	mov	r12, r1
    1002:	d1 2c       	mov	r13, r1
    1004:	76 01       	movw	r14, r12
    1006:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <ImpulsiLitro>
    100a:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <ImpulsiLitro+0x1>
    100e:	07 2e       	mov	r0, r23
    1010:	00 0c       	add	r0, r0
    1012:	88 0b       	sbc	r24, r24
    1014:	99 0b       	sbc	r25, r25
    1016:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__floatsisf>
    101a:	9b 01       	movw	r18, r22
    101c:	ac 01       	movw	r20, r24
    101e:	c7 01       	movw	r24, r14
    1020:	b6 01       	movw	r22, r12
    1022:	0e 94 3a 2b 	call	0x5674	; 0x5674 <__divsf3>
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	cf 90       	pop	r12
    102e:	08 95       	ret

00001030 <_Z18Rele_Abilitazione1ii>:
    1030:	3f 9a       	sbi	0x07, 7	; 7
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	91 05       	cpc	r25, r1
    1036:	71 f0       	breq	.+28     	; 0x1054 <_Z18Rele_Abilitazione1ii+0x24>
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	91 05       	cpc	r25, r1
    103c:	e1 f0       	breq	.+56     	; 0x1076 <_Z18Rele_Abilitazione1ii+0x46>
    103e:	89 2b       	or	r24, r25
    1040:	89 f5       	brne	.+98     	; 0x10a4 <_Z18Rele_Abilitazione1ii+0x74>
    1042:	47 98       	cbi	0x08, 7	; 8
    1044:	2f ef       	ldi	r18, 0xFF	; 255
    1046:	30 e7       	ldi	r19, 0x70	; 112
    1048:	42 e0       	ldi	r20, 0x02	; 2
    104a:	21 50       	subi	r18, 0x01	; 1
    104c:	30 40       	sbci	r19, 0x00	; 0
    104e:	40 40       	sbci	r20, 0x00	; 0
    1050:	e1 f7       	brne	.-8      	; 0x104a <_Z18Rele_Abilitazione1ii+0x1a>
    1052:	0e c0       	rjmp	.+28     	; 0x1070 <_Z18Rele_Abilitazione1ii+0x40>
    1054:	28 b1       	in	r18, 0x08	; 8
    1056:	01 c0       	rjmp	.+2      	; 0x105a <_Z18Rele_Abilitazione1ii+0x2a>
    1058:	88 0f       	add	r24, r24
    105a:	6a 95       	dec	r22
    105c:	ea f7       	brpl	.-6      	; 0x1058 <_Z18Rele_Abilitazione1ii+0x28>
    105e:	82 2b       	or	r24, r18
    1060:	88 b9       	out	0x08, r24	; 8
    1062:	8f ef       	ldi	r24, 0xFF	; 255
    1064:	90 e7       	ldi	r25, 0x70	; 112
    1066:	22 e0       	ldi	r18, 0x02	; 2
    1068:	81 50       	subi	r24, 0x01	; 1
    106a:	90 40       	sbci	r25, 0x00	; 0
    106c:	20 40       	sbci	r18, 0x00	; 0
    106e:	e1 f7       	brne	.-8      	; 0x1068 <_Z18Rele_Abilitazione1ii+0x38>
    1070:	00 c0       	rjmp	.+0      	; 0x1072 <_Z18Rele_Abilitazione1ii+0x42>
    1072:	00 00       	nop
    1074:	08 95       	ret
    1076:	28 b1       	in	r18, 0x08	; 8
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <_Z18Rele_Abilitazione1ii+0x50>
    107e:	88 0f       	add	r24, r24
    1080:	6a 95       	dec	r22
    1082:	ea f7       	brpl	.-6      	; 0x107e <_Z18Rele_Abilitazione1ii+0x4e>
    1084:	98 2f       	mov	r25, r24
    1086:	90 95       	com	r25
    1088:	92 23       	and	r25, r18
    108a:	98 b9       	out	0x08, r25	; 8
    108c:	3f ef       	ldi	r19, 0xFF	; 255
    108e:	45 ea       	ldi	r20, 0xA5	; 165
    1090:	2e e0       	ldi	r18, 0x0E	; 14
    1092:	31 50       	subi	r19, 0x01	; 1
    1094:	40 40       	sbci	r20, 0x00	; 0
    1096:	20 40       	sbci	r18, 0x00	; 0
    1098:	e1 f7       	brne	.-8      	; 0x1092 <_Z18Rele_Abilitazione1ii+0x62>
    109a:	00 c0       	rjmp	.+0      	; 0x109c <_Z18Rele_Abilitazione1ii+0x6c>
    109c:	00 00       	nop
    109e:	98 b1       	in	r25, 0x08	; 8
    10a0:	89 2b       	or	r24, r25
    10a2:	88 b9       	out	0x08, r24	; 8
    10a4:	08 95       	ret

000010a6 <_Z18Rele_Abilitazione2ii>:
    10a6:	0f 9a       	sbi	0x01, 7	; 1
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	91 05       	cpc	r25, r1
    10ac:	b9 f0       	breq	.+46     	; 0x10dc <_Z18Rele_Abilitazione2ii+0x36>
    10ae:	82 30       	cpi	r24, 0x02	; 2
    10b0:	91 05       	cpc	r25, r1
    10b2:	29 f1       	breq	.+74     	; 0x10fe <_Z18Rele_Abilitazione2ii+0x58>
    10b4:	89 2b       	or	r24, r25
    10b6:	d1 f5       	brne	.+116    	; 0x112c <_Z18Rele_Abilitazione2ii+0x86>
    10b8:	22 b1       	in	r18, 0x02	; 2
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <_Z18Rele_Abilitazione2ii+0x1c>
    10c0:	88 0f       	add	r24, r24
    10c2:	6a 95       	dec	r22
    10c4:	ea f7       	brpl	.-6      	; 0x10c0 <_Z18Rele_Abilitazione2ii+0x1a>
    10c6:	80 95       	com	r24
    10c8:	82 23       	and	r24, r18
    10ca:	82 b9       	out	0x02, r24	; 2
    10cc:	2f ef       	ldi	r18, 0xFF	; 255
    10ce:	30 e7       	ldi	r19, 0x70	; 112
    10d0:	42 e0       	ldi	r20, 0x02	; 2
    10d2:	21 50       	subi	r18, 0x01	; 1
    10d4:	30 40       	sbci	r19, 0x00	; 0
    10d6:	40 40       	sbci	r20, 0x00	; 0
    10d8:	e1 f7       	brne	.-8      	; 0x10d2 <_Z18Rele_Abilitazione2ii+0x2c>
    10da:	0e c0       	rjmp	.+28     	; 0x10f8 <_Z18Rele_Abilitazione2ii+0x52>
    10dc:	22 b1       	in	r18, 0x02	; 2
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <_Z18Rele_Abilitazione2ii+0x3c>
    10e0:	88 0f       	add	r24, r24
    10e2:	6a 95       	dec	r22
    10e4:	ea f7       	brpl	.-6      	; 0x10e0 <_Z18Rele_Abilitazione2ii+0x3a>
    10e6:	82 2b       	or	r24, r18
    10e8:	82 b9       	out	0x02, r24	; 2
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	90 e7       	ldi	r25, 0x70	; 112
    10ee:	22 e0       	ldi	r18, 0x02	; 2
    10f0:	81 50       	subi	r24, 0x01	; 1
    10f2:	90 40       	sbci	r25, 0x00	; 0
    10f4:	20 40       	sbci	r18, 0x00	; 0
    10f6:	e1 f7       	brne	.-8      	; 0x10f0 <_Z18Rele_Abilitazione2ii+0x4a>
    10f8:	00 c0       	rjmp	.+0      	; 0x10fa <_Z18Rele_Abilitazione2ii+0x54>
    10fa:	00 00       	nop
    10fc:	08 95       	ret
    10fe:	22 b1       	in	r18, 0x02	; 2
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <_Z18Rele_Abilitazione2ii+0x62>
    1106:	88 0f       	add	r24, r24
    1108:	6a 95       	dec	r22
    110a:	ea f7       	brpl	.-6      	; 0x1106 <_Z18Rele_Abilitazione2ii+0x60>
    110c:	98 2f       	mov	r25, r24
    110e:	90 95       	com	r25
    1110:	92 23       	and	r25, r18
    1112:	92 b9       	out	0x02, r25	; 2
    1114:	3f ef       	ldi	r19, 0xFF	; 255
    1116:	45 ea       	ldi	r20, 0xA5	; 165
    1118:	2e e0       	ldi	r18, 0x0E	; 14
    111a:	31 50       	subi	r19, 0x01	; 1
    111c:	40 40       	sbci	r20, 0x00	; 0
    111e:	20 40       	sbci	r18, 0x00	; 0
    1120:	e1 f7       	brne	.-8      	; 0x111a <_Z18Rele_Abilitazione2ii+0x74>
    1122:	00 c0       	rjmp	.+0      	; 0x1124 <_Z18Rele_Abilitazione2ii+0x7e>
    1124:	00 00       	nop
    1126:	92 b1       	in	r25, 0x02	; 2
    1128:	89 2b       	or	r24, r25
    112a:	82 b9       	out	0x02, r24	; 2
    112c:	08 95       	ret

0000112e <_Z12Control_WIFIi>:
    112e:	23 9a       	sbi	0x04, 3	; 4
    1130:	2f ef       	ldi	r18, 0xFF	; 255
    1132:	36 e7       	ldi	r19, 0x76	; 118
    1134:	41 e0       	ldi	r20, 0x01	; 1
    1136:	21 50       	subi	r18, 0x01	; 1
    1138:	30 40       	sbci	r19, 0x00	; 0
    113a:	40 40       	sbci	r20, 0x00	; 0
    113c:	e1 f7       	brne	.-8      	; 0x1136 <_Z12Control_WIFIi+0x8>
    113e:	00 c0       	rjmp	.+0      	; 0x1140 <_Z12Control_WIFIi+0x12>
    1140:	00 00       	nop
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	91 05       	cpc	r25, r1
    1146:	11 f4       	brne	.+4      	; 0x114c <_Z12Control_WIFIi+0x1e>
    1148:	2b 9a       	sbi	0x05, 3	; 5
    114a:	08 95       	ret
    114c:	89 2b       	or	r24, r25
    114e:	09 f4       	brne	.+2      	; 0x1152 <_Z12Control_WIFIi+0x24>
    1150:	2b 98       	cbi	0x05, 3	; 5
    1152:	08 95       	ret

00001154 <_Z6Azzerav>:
    1154:	64 e8       	ldi	r22, 0x84	; 132
    1156:	71 e0       	ldi	r23, 0x01	; 1
    1158:	81 ed       	ldi	r24, 0xD1	; 209
    115a:	98 e0       	ldi	r25, 0x08	; 8
    115c:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    1160:	10 92 d8 08 	sts	0x08D8, r1	; 0x8008d8 <impulsi+0x1>
    1164:	10 92 d7 08 	sts	0x08D7, r1	; 0x8008d7 <impulsi>
    1168:	10 92 18 09 	sts	0x0918, r1	; 0x800918 <alreadyTimbrata>
    116c:	69 e7       	ldi	r22, 0x79	; 121
    116e:	74 e0       	ldi	r23, 0x04	; 4
    1170:	87 ea       	ldi	r24, 0xA7	; 167
    1172:	98 e0       	ldi	r25, 0x08	; 8
    1174:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    1178:	64 e8       	ldi	r22, 0x84	; 132
    117a:	71 e0       	ldi	r23, 0x01	; 1
    117c:	8b e9       	ldi	r24, 0x9B	; 155
    117e:	98 e0       	ldi	r25, 0x08	; 8
    1180:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    1184:	64 e8       	ldi	r22, 0x84	; 132
    1186:	71 e0       	ldi	r23, 0x01	; 1
    1188:	81 ea       	ldi	r24, 0xA1	; 161
    118a:	98 e0       	ldi	r25, 0x08	; 8
    118c:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    1190:	67 e0       	ldi	r22, 0x07	; 7
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	4b df       	rcall	.-362    	; 0x1030 <_Z18Rele_Abilitazione1ii>
    119a:	67 e0       	ldi	r22, 0x07	; 7
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	81 df       	rcall	.-254    	; 0x10a6 <_Z18Rele_Abilitazione2ii>
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	c2 df       	rcall	.-124    	; 0x112e <_Z12Control_WIFIi>
    11aa:	8f e1       	ldi	r24, 0x1F	; 31
    11ac:	9e e4       	ldi	r25, 0x4E	; 78
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	f1 f7       	brne	.-4      	; 0x11ae <_Z6Azzerav+0x5a>
    11b2:	00 c0       	rjmp	.+0      	; 0x11b4 <_Z6Azzerav+0x60>
    11b4:	00 00       	nop
    11b6:	85 e4       	ldi	r24, 0x45	; 69
    11b8:	98 e0       	ldi	r25, 0x08	; 8
    11ba:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <_ZN14EthernetClient5flushEv>
    11be:	85 e4       	ldi	r24, 0x45	; 69
    11c0:	98 e0       	ldi	r25, 0x08	; 8
    11c2:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN14EthernetClient4stopEv>
    11c6:	8f e1       	ldi	r24, 0x1F	; 31
    11c8:	9e e4       	ldi	r25, 0x4E	; 78
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <_Z6Azzerav+0x76>
    11ce:	00 c0       	rjmp	.+0      	; 0x11d0 <_Z6Azzerav+0x7c>
    11d0:	00 00       	nop
    11d2:	82 e5       	ldi	r24, 0x52	; 82
    11d4:	98 e0       	ldi	r25, 0x08	; 8
    11d6:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <_ZN14EthernetClient5flushEv>
    11da:	82 e5       	ldi	r24, 0x52	; 82
    11dc:	98 e0       	ldi	r25, 0x08	; 8
    11de:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN14EthernetClient4stopEv>
    11e2:	10 92 dc 08 	sts	0x08DC, r1	; 0x8008dc <Connected+0x1>
    11e6:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <Connected>
    11ea:	8f e1       	ldi	r24, 0x1F	; 31
    11ec:	9e e4       	ldi	r25, 0x4E	; 78
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	f1 f7       	brne	.-4      	; 0x11ee <_Z6Azzerav+0x9a>
    11f2:	00 c0       	rjmp	.+0      	; 0x11f4 <_Z6Azzerav+0xa0>
    11f4:	00 00       	nop
    11f6:	2c 98       	cbi	0x05, 4	; 5
    11f8:	8f e1       	ldi	r24, 0x1F	; 31
    11fa:	9e e4       	ldi	r25, 0x4E	; 78
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	f1 f7       	brne	.-4      	; 0x11fc <_Z6Azzerav+0xa8>
    1200:	00 c0       	rjmp	.+0      	; 0x1202 <_Z6Azzerav+0xae>
    1202:	00 00       	nop
    1204:	2c 9a       	sbi	0x05, 4	; 5
    1206:	8f e1       	ldi	r24, 0x1F	; 31
    1208:	9e e4       	ldi	r25, 0x4E	; 78
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	f1 f7       	brne	.-4      	; 0x120a <_Z6Azzerav+0xb6>
    120e:	00 c0       	rjmp	.+0      	; 0x1210 <_Z6Azzerav+0xbc>
    1210:	00 00       	nop
    1212:	86 d8       	rcall	.-3828   	; 0x320 <_ZL11disable_ETHv>
    1214:	8f e1       	ldi	r24, 0x1F	; 31
    1216:	9e e4       	ldi	r25, 0x4E	; 78
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <_Z6Azzerav+0xc4>
    121c:	00 c0       	rjmp	.+0      	; 0x121e <_Z6Azzerav+0xca>
    121e:	00 00       	nop
    1220:	7d d8       	rcall	.-3846   	; 0x31c <_ZL10enable_ETHv>
    1222:	82 b1       	in	r24, 0x02	; 2
    1224:	82 b9       	out	0x02, r24	; 2
    1226:	82 b1       	in	r24, 0x02	; 2
    1228:	82 b9       	out	0x02, r24	; 2
    122a:	64 e8       	ldi	r22, 0x84	; 132
    122c:	71 e0       	ldi	r23, 0x01	; 1
    122e:	8d e7       	ldi	r24, 0x7D	; 125
    1230:	98 e0       	ldi	r25, 0x08	; 8
    1232:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    1236:	64 e8       	ldi	r22, 0x84	; 132
    1238:	71 e0       	ldi	r23, 0x01	; 1
    123a:	83 e8       	ldi	r24, 0x83	; 131
    123c:	98 e0       	ldi	r25, 0x08	; 8
    123e:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    1242:	64 e8       	ldi	r22, 0x84	; 132
    1244:	71 e0       	ldi	r23, 0x01	; 1
    1246:	83 e8       	ldi	r24, 0x83	; 131
    1248:	98 e0       	ldi	r25, 0x08	; 8
    124a:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	99 e0       	ldi	r25, 0x09	; 9
    1252:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <_ZN3LCD11noBacklightEv>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	99 e0       	ldi	r25, 0x09	; 9
    125a:	0e 94 77 25 	call	0x4aee	; 0x4aee <_ZN3LCD9noDisplayEv>
    125e:	10 92 35 08 	sts	0x0835, r1	; 0x800835 <secs>
    1262:	10 92 36 08 	sts	0x0836, r1	; 0x800836 <secs+0x1>
    1266:	10 92 37 08 	sts	0x0837, r1	; 0x800837 <secs+0x2>
    126a:	10 92 38 08 	sts	0x0838, r1	; 0x800838 <secs+0x3>
    126e:	10 92 31 08 	sts	0x0831, r1	; 0x800831 <UltimoPassaggioStato>
    1272:	10 92 32 08 	sts	0x0832, r1	; 0x800832 <UltimoPassaggioStato+0x1>
    1276:	10 92 33 08 	sts	0x0833, r1	; 0x800833 <UltimoPassaggioStato+0x2>
    127a:	10 92 34 08 	sts	0x0834, r1	; 0x800834 <UltimoPassaggioStato+0x3>
    127e:	c5 d8       	rcall	.-3702   	; 0x40a <_Z9printLinev>
    1280:	6b e7       	ldi	r22, 0x7B	; 123
    1282:	74 e0       	ldi	r23, 0x04	; 4
    1284:	88 e8       	ldi	r24, 0x88	; 136
    1286:	9a e0       	ldi	r25, 0x0A	; 10
    1288:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN5Print7printlnEPKc>
    128c:	be d8       	rcall	.-3716   	; 0x40a <_Z9printLinev>
    128e:	64 e8       	ldi	r22, 0x84	; 132
    1290:	71 e0       	ldi	r23, 0x01	; 1
    1292:	8b e1       	ldi	r24, 0x1B	; 27
    1294:	98 e0       	ldi	r25, 0x08	; 8
    1296:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    129a:	8e ef       	ldi	r24, 0xFE	; 254
    129c:	9f ef       	ldi	r25, 0xFF	; 255
    129e:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <stato_procedura+0x1>
    12a2:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <stato_procedura>
    12a6:	08 95       	ret

000012a8 <loop>:
    _delay_ms(100);
    Messaggio.toCharArray(MessaggioToServer, 100);  
}

/**************************LOOP PROCEDURA************************************/
void loop() {
    12a8:	cf 92       	push	r12
    12aa:	df 92       	push	r13
    12ac:	ef 92       	push	r14
    12ae:	ff 92       	push	r15
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	69 97       	sbiw	r28, 0x19	; 25
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
      
  switch (stato_procedura) {
    12c8:	e0 91 d9 08 	lds	r30, 0x08D9	; 0x8008d9 <stato_procedura>
    12cc:	f0 91 da 08 	lds	r31, 0x08DA	; 0x8008da <stato_procedura+0x1>
    12d0:	32 96       	adiw	r30, 0x02	; 2
    12d2:	ec 30       	cpi	r30, 0x0C	; 12
    12d4:	f1 05       	cpc	r31, r1
    12d6:	08 f0       	brcs	.+2      	; 0x12da <loop+0x32>
    12d8:	b8 c3       	rjmp	.+1904   	; 0x1a4a <loop+0x7a2>
    12da:	ea 5b       	subi	r30, 0xBA	; 186
    12dc:	ff 4f       	sbci	r31, 0xFF	; 255
    12de:	0c 94 f4 33 	jmp	0x67e8	; 0x67e8 <__tablejump2__>
    case -2:
    { //cli(); // disable interrupt      
            
      righeDisplay[1] =  "";
    12e2:	64 e8       	ldi	r22, 0x84	; 132
    12e4:	71 e0       	ldi	r23, 0x01	; 1
    12e6:	8d e7       	ldi	r24, 0x7D	; 125
    12e8:	98 e0       	ldi	r25, 0x08	; 8
    12ea:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      righeDisplay[2] = "Setting....";
    12ee:	6c e8       	ldi	r22, 0x8C	; 140
    12f0:	74 e0       	ldi	r23, 0x04	; 4
    12f2:	83 e8       	ldi	r24, 0x83	; 131
    12f4:	98 e0       	ldi	r25, 0x08	; 8
    12f6:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    12fa:	64 e8       	ldi	r22, 0x84	; 132
    12fc:	71 e0       	ldi	r23, 0x01	; 1
    12fe:	89 e8       	ldi	r24, 0x89	; 137
    1300:	98 e0       	ldi	r25, 0x08	; 8
    1302:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      
      displayLCD(righeDisplay,stato_procedura,100);
    1306:	60 91 d9 08 	lds	r22, 0x08D9	; 0x8008d9 <stato_procedura>
    130a:	70 91 da 08 	lds	r23, 0x08DA	; 0x8008da <stato_procedura+0x1>
    130e:	44 e6       	ldi	r20, 0x64	; 100
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	87 e7       	ldi	r24, 0x77	; 119
    1314:	98 e0       	ldi	r25, 0x08	; 8
    1316:	8f d9       	rcall	.-3298   	; 0x636 <_Z10displayLCDP6Stringii>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1318:	2f ef       	ldi	r18, 0xFF	; 255
    131a:	83 ec       	ldi	r24, 0xC3	; 195
    131c:	99 e0       	ldi	r25, 0x09	; 9
    131e:	21 50       	subi	r18, 0x01	; 1
    1320:	80 40       	sbci	r24, 0x00	; 0
    1322:	90 40       	sbci	r25, 0x00	; 0
    1324:	e1 f7       	brne	.-8      	; 0x131e <loop+0x76>
    1326:	00 c0       	rjmp	.+0      	; 0x1328 <loop+0x80>
    1328:	00 00       	nop
      stato_procedura++;
    }
    break;
    case -1:
    {             
    abilitaPulsanti();
    132a:	0b c0       	rjmp	.+22     	; 0x1342 <loop+0x9a>
    132c:	3b de       	rcall	.-906    	; 0xfa4 <_Z15abilitaPulsantiv>
    132e:	2f ef       	ldi	r18, 0xFF	; 255
    1330:	89 ef       	ldi	r24, 0xF9	; 249
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	21 50       	subi	r18, 0x01	; 1
    1336:	80 40       	sbci	r24, 0x00	; 0
    1338:	90 40       	sbci	r25, 0x00	; 0
    133a:	e1 f7       	brne	.-8      	; 0x1334 <loop+0x8c>
    133c:	00 c0       	rjmp	.+0      	; 0x133e <loop+0x96>
    _delay_ms(20);
    abilitaContattiPistola();
    133e:	00 00       	nop
    1340:	3b de       	rcall	.-906    	; 0xfb8 <_Z22abilitaContattiPistolav>
    
    stato_procedura++;
    1342:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <stato_procedura>
    1346:	90 91 da 08 	lds	r25, 0x08DA	; 0x8008da <stato_procedura+0x1>
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <stato_procedura+0x1>
    1350:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <stato_procedura>
    }
    break;
    1354:	7a c3       	rjmp	.+1780   	; 0x1a4a <loop+0x7a2>
    case 0:
    { 
      righeDisplay[1] =  "";
    1356:	64 e8       	ldi	r22, 0x84	; 132
    1358:	71 e0       	ldi	r23, 0x01	; 1
    135a:	8d e7       	ldi	r24, 0x7D	; 125
    135c:	98 e0       	ldi	r25, 0x08	; 8
    135e:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    1362:	64 e8       	ldi	r22, 0x84	; 132
    1364:	71 e0       	ldi	r23, 0x01	; 1
    1366:	83 e8       	ldi	r24, 0x83	; 131
    1368:	98 e0       	ldi	r25, 0x08	; 8
    136a:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    136e:	64 e8       	ldi	r22, 0x84	; 132
    1370:	71 e0       	ldi	r23, 0x01	; 1
    1372:	89 e8       	ldi	r24, 0x89	; 137
    1374:	98 e0       	ldi	r25, 0x08	; 8
    1376:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
          
      displayLCD(righeDisplay,stato_procedura,100);
    137a:	60 91 d9 08 	lds	r22, 0x08D9	; 0x8008d9 <stato_procedura>
    137e:	70 91 da 08 	lds	r23, 0x08DA	; 0x8008da <stato_procedura+0x1>
    1382:	44 e6       	ldi	r20, 0x64	; 100
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	87 e7       	ldi	r24, 0x77	; 119
    1388:	98 e0       	ldi	r25, 0x08	; 8
    138a:	55 d9       	rcall	.-3414   	; 0x636 <_Z10displayLCDP6Stringii>
    138c:	2f ef       	ldi	r18, 0xFF	; 255
    138e:	87 ea       	ldi	r24, 0xA7	; 167
    1390:	91 e6       	ldi	r25, 0x61	; 97
    1392:	21 50       	subi	r18, 0x01	; 1
    1394:	80 40       	sbci	r24, 0x00	; 0
    1396:	90 40       	sbci	r25, 0x00	; 0
    1398:	e1 f7       	brne	.-8      	; 0x1392 <loop+0xea>
    139a:	00 c0       	rjmp	.+0      	; 0x139c <loop+0xf4>
    139c:	00 00       	nop
      _delay_ms(2000);
      alreadyTimbrata = false;  
    139e:	10 92 18 09 	sts	0x0918, r1	; 0x800918 <alreadyTimbrata>
      enable_ETH();
    13a2:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZL10enable_ETHv>
    13a6:	cd cf       	rjmp	.-102    	; 0x1342 <loop+0x9a>
      stato_procedura++;
    }
    break;
    case 1:
    { 
      righeDisplay[1] = " * AUTENTICAZIONE *";
    13a8:	68 e9       	ldi	r22, 0x98	; 152
    13aa:	74 e0       	ldi	r23, 0x04	; 4
    13ac:	8d e7       	ldi	r24, 0x7D	; 125
    13ae:	98 e0       	ldi	r25, 0x08	; 8
    13b0:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      righeDisplay[2] = "";
    13b4:	64 e8       	ldi	r22, 0x84	; 132
    13b6:	71 e0       	ldi	r23, 0x01	; 1
    13b8:	83 e8       	ldi	r24, 0x83	; 131
    13ba:	98 e0       	ldi	r25, 0x08	; 8
    13bc:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      righeDisplay[3] = "    Avvicina ATE  ";
    13c0:	6c ea       	ldi	r22, 0xAC	; 172
    13c2:	74 e0       	ldi	r23, 0x04	; 4
    13c4:	89 e8       	ldi	r24, 0x89	; 137
    13c6:	98 e0       	ldi	r25, 0x08	; 8
    13c8:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    
      displayLCD(righeDisplay,stato_procedura,100);     
    13cc:	60 91 d9 08 	lds	r22, 0x08D9	; 0x8008d9 <stato_procedura>
    13d0:	70 91 da 08 	lds	r23, 0x08DA	; 0x8008da <stato_procedura+0x1>
    13d4:	44 e6       	ldi	r20, 0x64	; 100
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	87 e7       	ldi	r24, 0x77	; 119
    13da:	98 e0       	ldi	r25, 0x08	; 8
    13dc:	2c d9       	rcall	.-3496   	; 0x636 <_Z10displayLCDP6Stringii>
      
      stato_procedura++; // da commentare
    13de:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <stato_procedura>
    13e2:	90 91 da 08 	lds	r25, 0x08DA	; 0x8008da <stato_procedura+0x1>
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <stato_procedura+0x1>
    13ec:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <stato_procedura>
    _delay_ms(10);
    avanzaStato(TinputTarga);
    /*****************************************/

    /*****************************************************/
    String ATe = "ERRORE";
    13f0:	61 ec       	ldi	r22, 0xC1	; 193
    13f2:	71 e0       	ldi	r23, 0x01	; 1
    13f4:	ce 01       	movw	r24, r28
    13f6:	44 96       	adiw	r24, 0x14	; 20
    13f8:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
      if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
    13fc:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <alreadyTimbrata>
    1400:	81 11       	cpse	r24, r1
    1402:	14 c0       	rjmp	.+40     	; 0x142c <loop+0x184>
    1404:	ce 01       	movw	r24, r28
    1406:	01 96       	adiw	r24, 0x01	; 1
    1408:	b7 da       	rcall	.-2706   	; 0x978 <_Z14GetCodeRfidATev>
    140a:	be 01       	movw	r22, r28
    140c:	6f 5f       	subi	r22, 0xFF	; 255
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	ce 01       	movw	r24, r28
    1412:	44 96       	adiw	r24, 0x14	; 20
    1414:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <_ZN6StringaSEOS_>
    1418:	ce 01       	movw	r24, r28
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    1420:	44 e6       	ldi	r20, 0x64	; 100
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	02 d8       	rcall	.-4092   	; 0x430 <_Z6Buzzerhm>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    142c:	61 ec       	ldi	r22, 0xC1	; 193
    142e:	71 e0       	ldi	r23, 0x01	; 1
    1430:	ce 01       	movw	r24, r28
    1432:	44 96       	adiw	r24, 0x14	; 20
    1434:	0e 94 1e 32 	call	0x643c	; 0x643c <_ZNK6String6equalsEPKc>
            
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
    1438:	81 11       	cpse	r24, r1
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <loop+0x198>
    143c:	44 9b       	sbis	0x08, 4	; 8
    143e:	43 c3       	rjmp	.+1670   	; 0x1ac6 <loop+0x81e>
                                  
          // Effettua chiamata REST per validare CARD NFC
          // Se la CARD è valida memorizza in memoria l'operazione e prosegui
          // Altrimenti Memorizza in Memoria e Azzera la procedura. // DA IMPLEMENTARE
     
         if (GetAteValidation(80,serverATE,clientATE,ATe)) 
    1440:	be 01       	movw	r22, r28
    1442:	6c 5e       	subi	r22, 0xEC	; 236
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	ce 01       	movw	r24, r28
    1448:	0e 96       	adiw	r24, 0x0e	; 14
    144a:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <_ZN6StringC1ERKS_>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    144e:	80 91 47 08 	lds	r24, 0x0847	; 0x800847 <clientATE+0x2>
    1452:	90 91 48 08 	lds	r25, 0x0848	; 0x800848 <clientATE+0x3>
    1456:	9c 83       	std	Y+4, r25	; 0x04
    1458:	8b 83       	std	Y+3, r24	; 0x03
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    145a:	80 91 49 08 	lds	r24, 0x0849	; 0x800849 <clientATE+0x4>
    145e:	90 91 4a 08 	lds	r25, 0x084A	; 0x80084a <clientATE+0x5>
    1462:	a0 91 4b 08 	lds	r26, 0x084B	; 0x80084b <clientATE+0x6>
    1466:	b0 91 4c 08 	lds	r27, 0x084C	; 0x80084c <clientATE+0x7>
    146a:	8d 83       	std	Y+5, r24	; 0x05
    146c:	9e 83       	std	Y+6, r25	; 0x06
    146e:	af 83       	std	Y+7, r26	; 0x07
    1470:	b8 87       	std	Y+8, r27	; 0x08
    1472:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <clientATE+0x8>
    1476:	90 91 4e 08 	lds	r25, 0x084E	; 0x80084e <clientATE+0x9>
    147a:	a0 91 4f 08 	lds	r26, 0x084F	; 0x80084f <clientATE+0xa>
    147e:	b0 91 50 08 	lds	r27, 0x0850	; 0x800850 <clientATE+0xb>
    1482:	89 87       	std	Y+9, r24	; 0x09
    1484:	9a 87       	std	Y+10, r25	; 0x0a
    1486:	ab 87       	std	Y+11, r26	; 0x0b
    1488:	bc 87       	std	Y+12, r27	; 0x0c
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
    148a:	83 e7       	ldi	r24, 0x73	; 115
    148c:	97 e0       	ldi	r25, 0x07	; 7
    148e:	9a 83       	std	Y+2, r25	; 0x02
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	80 91 51 08 	lds	r24, 0x0851	; 0x800851 <clientATE+0xc>
    1496:	8d 87       	std	Y+13, r24	; 0x0d
    1498:	9e 01       	movw	r18, r28
    149a:	22 5f       	subi	r18, 0xF2	; 242
    149c:	3f 4f       	sbci	r19, 0xFF	; 255
    149e:	ae 01       	movw	r20, r28
    14a0:	4f 5f       	subi	r20, 0xFF	; 255
    14a2:	5f 4f       	sbci	r21, 0xFF	; 255
    14a4:	63 e4       	ldi	r22, 0x43	; 67
    14a6:	71 e0       	ldi	r23, 0x01	; 1
    14a8:	80 e5       	ldi	r24, 0x50	; 80
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	16 db       	rcall	.-2516   	; 0xada <_Z16GetAteValidationiPc14EthernetClient6String>
    14ae:	18 2f       	mov	r17, r24
    14b0:	ce 01       	movw	r24, r28
    14b2:	0e 96       	adiw	r24, 0x0e	; 14
    14b4:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    14b8:	11 23       	and	r17, r17
    14ba:	49 f0       	breq	.+18     	; 0x14ce <loop+0x226>
          { 
            SET_BIT(PORTC,PC4);
    14bc:	44 9a       	sbi	0x08, 4	; 8
            
            Buzzer(1,400); 
    14be:	40 e9       	ldi	r20, 0x90	; 144
    14c0:	51 e0       	ldi	r21, 0x01	; 1
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	0e 94 18 02 	call	0x430	; 0x430 <_Z6Buzzerhm>
    14cc:	2b c0       	rjmp	.+86     	; 0x1524 <loop+0x27c>
                    
            avanzaStato(TinputTarga); 
          } 
         else 
          { 
            Buzzer(3,200);
    14ce:	48 ec       	ldi	r20, 0xC8	; 200
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	83 e0       	ldi	r24, 0x03	; 3
    14d8:	0e 94 18 02 	call	0x430	; 0x430 <_Z6Buzzerhm>
            
            righeDisplay[1] =  "****** ESITO *****";
    14dc:	6f eb       	ldi	r22, 0xBF	; 191
    14de:	74 e0       	ldi	r23, 0x04	; 4
    14e0:	8d e7       	ldi	r24, 0x7D	; 125
    14e2:	98 e0       	ldi	r25, 0x08	; 8
    14e4:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
            righeDisplay[2] =  "";
    14e8:	64 e8       	ldi	r22, 0x84	; 132
    14ea:	71 e0       	ldi	r23, 0x01	; 1
    14ec:	83 e8       	ldi	r24, 0x83	; 131
    14ee:	98 e0       	ldi	r25, 0x08	; 8
    14f0:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
            righeDisplay[3] = "Utente Sconosciuto";
    14f4:	62 ed       	ldi	r22, 0xD2	; 210
    14f6:	74 e0       	ldi	r23, 0x04	; 4
    14f8:	89 e8       	ldi	r24, 0x89	; 137
    14fa:	98 e0       	ldi	r25, 0x08	; 8
    14fc:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
            
            displayLCD(righeDisplay,stato_procedura,100);
    1500:	60 91 d9 08 	lds	r22, 0x08D9	; 0x8008d9 <stato_procedura>
    1504:	70 91 da 08 	lds	r23, 0x08DA	; 0x8008da <stato_procedura+0x1>
    1508:	44 e6       	ldi	r20, 0x64	; 100
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	87 e7       	ldi	r24, 0x77	; 119
    150e:	98 e0       	ldi	r25, 0x08	; 8
    1510:	92 d8       	rcall	.-3804   	; 0x636 <_Z10displayLCDP6Stringii>
    1512:	2f ef       	ldi	r18, 0xFF	; 255
    1514:	83 ed       	ldi	r24, 0xD3	; 211
    1516:	90 e3       	ldi	r25, 0x30	; 48
    1518:	21 50       	subi	r18, 0x01	; 1
    151a:	80 40       	sbci	r24, 0x00	; 0
    151c:	90 40       	sbci	r25, 0x00	; 0
    151e:	e1 f7       	brne	.-8      	; 0x1518 <loop+0x270>
    1520:	00 c0       	rjmp	.+0      	; 0x1522 <loop+0x27a>
    1522:	00 00       	nop
            _delay_ms(1000);
            avanzaStato(TinputTarga);
    1524:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputTarga>
    1528:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputTarga+0x1>
    152c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputTarga+0x2>
    1530:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputTarga+0x3>
    1534:	20 d9       	rcall	.-3520   	; 0x776 <_Z11avanzaStatom>
    _delay_ms(10);
    avanzaStato(TinputTarga);
    /*****************************************/

    /*****************************************************/
    String ATe = "ERRORE";
    1536:	ce 01       	movw	r24, r28
    1538:	44 96       	adiw	r24, 0x14	; 20
    153a:	da c0       	rjmp	.+436    	; 0x16f0 <loop+0x448>
          /*****************************************************/
    }
    break;
    case 2:
    {   
      disable_ETH();
    153c:	0e 94 90 01 	call	0x320	; 0x320 <_ZL11disable_ETHv>
    1540:	8f e3       	ldi	r24, 0x3F	; 63
    1542:	9f e1       	ldi	r25, 0x1F	; 31
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <loop+0x29c>
    1548:	00 c0       	rjmp	.+0      	; 0x154a <loop+0x2a2>
    154a:	00 00       	nop
      _delay_ms(2);
      enable_ETH();
    154c:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZL10enable_ETHv>
      // da commentare
      // Carburante = "D"; // Simulo Abilitazione Diesel
      // da commentare
      // Carburante = "B"; // Simulo Abilitazione Benzina
      
      TARGA = "";
    1550:	64 e8       	ldi	r22, 0x84	; 132
    1552:	71 e0       	ldi	r23, 0x01	; 1
    1554:	8b e1       	ldi	r24, 0x1B	; 27
    1556:	98 e0       	ldi	r25, 0x08	; 8
    1558:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      righeDisplay[1] =  "****** TARGA ******";
    155c:	65 ee       	ldi	r22, 0xE5	; 229
    155e:	74 e0       	ldi	r23, 0x04	; 4
    1560:	8d e7       	ldi	r24, 0x7D	; 125
    1562:	98 e0       	ldi	r25, 0x08	; 8
    1564:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    1568:	64 e8       	ldi	r22, 0x84	; 132
    156a:	71 e0       	ldi	r23, 0x01	; 1
    156c:	83 e8       	ldi	r24, 0x83	; 131
    156e:	98 e0       	ldi	r25, 0x08	; 8
    1570:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      righeDisplay[3] = "TARGA:";
    1574:	69 ef       	ldi	r22, 0xF9	; 249
    1576:	74 e0       	ldi	r23, 0x04	; 4
    1578:	89 e8       	ldi	r24, 0x89	; 137
    157a:	98 e0       	ldi	r25, 0x08	; 8
    157c:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      displayLCD(righeDisplay,stato_procedura,10);
    1580:	60 91 d9 08 	lds	r22, 0x08D9	; 0x8008d9 <stato_procedura>
    1584:	70 91 da 08 	lds	r23, 0x08DA	; 0x8008da <stato_procedura+0x1>
    1588:	4a e0       	ldi	r20, 0x0A	; 10
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	87 e7       	ldi	r24, 0x77	; 119
    158e:	98 e0       	ldi	r25, 0x08	; 8
    1590:	52 d8       	rcall	.-3932   	; 0x636 <_Z10displayLCDP6Stringii>
      
      avanzaStato(TinputTarga);
    1592:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputTarga>
    1596:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputTarga+0x1>
    159a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputTarga+0x2>
    159e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputTarga+0x3>
    }
    break;
    case 3:
    { 
    
      char k = getCharKeypad(gpio.getIo());
    15a2:	de c0       	rjmp	.+444    	; 0x1760 <loop+0x4b8>
    15a4:	88 e1       	ldi	r24, 0x18	; 24
    15a6:	98 e0       	ldi	r25, 0x08	; 8
    15a8:	f0 d7       	rcall	.+4064   	; 0x258a <_ZN7PCA95345getIoEv>
    15aa:	0e 94 36 02 	call	0x46c	; 0x46c <_Z13getCharKeypadh>
      if (k != 'N')  { TARGA += k; }
    15ae:	8e 34       	cpi	r24, 0x4E	; 78
    15b0:	29 f0       	breq	.+10     	; 0x15bc <loop+0x314>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    15b2:	68 2f       	mov	r22, r24
    15b4:	8b e1       	ldi	r24, 0x1B	; 27
    15b6:	98 e0       	ldi	r25, 0x08	; 8
    15b8:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <_ZN6String6concatEc>
      
      lcd.clear();
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	99 e0       	ldi	r25, 0x09	; 9
    15c0:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_ZN3LCD5clearEv>
      lcd.setCursor(0,1);
    15c4:	41 e0       	ldi	r20, 0x01	; 1
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	99 e0       	ldi	r25, 0x09	; 9
    15cc:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN3LCD9setCursorEhh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	75 e0       	ldi	r23, 0x05	; 5
    15d4:	ce 01       	movw	r24, r28
    15d6:	01 96       	adiw	r24, 0x01	; 1
    15d8:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
      lcd.print("TARGA: " + TARGA);
    15dc:	6b e1       	ldi	r22, 0x1B	; 27
    15de:	78 e0       	ldi	r23, 0x08	; 8
    15e0:	ce 01       	movw	r24, r28
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <_ZplRK15StringSumHelperRK6String>
    15e8:	bc 01       	movw	r22, r24
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	99 e0       	ldi	r25, 0x09	; 9
    15ee:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    15f2:	ce 01       	movw	r24, r28
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
	  
    
      String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	ce 01       	movw	r24, r28
    15fe:	0e 96       	adiw	r24, 0x0e	; 14
    1600:	d8 d8       	rcall	.-3664   	; 0x7b2 <_Z14leggiTAG_Mezzob>
      // _delay_ms(10);

      Serial.println(mezzoString);
    1602:	be 01       	movw	r22, r28
    1604:	62 5f       	subi	r22, 0xF2	; 242
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	88 e8       	ldi	r24, 0x88	; 136
    160a:	9a e0       	ldi	r25, 0x0A	; 10
    160c:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    1610:	2a 89       	ldd	r18, Y+18	; 0x12
    1612:	3b 89       	ldd	r19, Y+19	; 0x13
    1614:	45 e0       	ldi	r20, 0x05	; 5
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	be 01       	movw	r22, r28
    161a:	62 5f       	subi	r22, 0xF2	; 242
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	ce 01       	movw	r24, r28
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	0e 94 3c 32 	call	0x6478	; 0x6478 <_ZNK6String9substringEjj>
      
      mezzo.Carb = mezzoString.substring(5);
    1626:	be 01       	movw	r22, r28
    1628:	6f 5f       	subi	r22, 0xFF	; 255
    162a:	7f 4f       	sbci	r23, 0xFF	; 255
    162c:	82 e2       	ldi	r24, 0x22	; 34
    162e:	99 e0       	ldi	r25, 0x09	; 9
    1630:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <_ZN6StringaSEOS_>
    1634:	ce 01       	movw	r24, r28
    1636:	01 96       	adiw	r24, 0x01	; 1
    1638:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
      mezzo.TARGA = mezzoString.substring(0,5);
    163c:	25 e0       	ldi	r18, 0x05	; 5
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	be 01       	movw	r22, r28
    1646:	62 5f       	subi	r22, 0xF2	; 242
    1648:	7f 4f       	sbci	r23, 0xFF	; 255
    164a:	ce 01       	movw	r24, r28
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	0e 94 3c 32 	call	0x6478	; 0x6478 <_ZNK6String9substringEjj>
    1652:	be 01       	movw	r22, r28
    1654:	6f 5f       	subi	r22, 0xFF	; 255
    1656:	7f 4f       	sbci	r23, 0xFF	; 255
    1658:	88 e2       	ldi	r24, 0x28	; 40
    165a:	99 e0       	ldi	r25, 0x09	; 9
    165c:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <_ZN6StringaSEOS_>
    1660:	ce 01       	movw	r24, r28
    1662:	01 96       	adiw	r24, 0x01	; 1
    1664:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
      mezzo.KM = 0;
    1668:	10 92 2e 09 	sts	0x092E, r1	; 0x80092e <mezzo+0xc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    166c:	68 e0       	ldi	r22, 0x08	; 8
    166e:	75 e0       	ldi	r23, 0x05	; 5
    1670:	ce 01       	movw	r24, r28
    1672:	01 96       	adiw	r24, 0x01	; 1
    1674:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>

      Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
    1678:	62 e2       	ldi	r22, 0x22	; 34
    167a:	79 e0       	ldi	r23, 0x09	; 9
    167c:	ce 01       	movw	r24, r28
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <_ZplRK15StringSumHelperRK6String>
    1684:	bc 01       	movw	r22, r24
    1686:	88 e8       	ldi	r24, 0x88	; 136
    1688:	9a e0       	ldi	r25, 0x0A	; 10
    168a:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    168e:	ce 01       	movw	r24, r28
    1690:	01 96       	adiw	r24, 0x01	; 1
    1692:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	75 e0       	ldi	r23, 0x05	; 5
    169a:	ce 01       	movw	r24, r28
    169c:	01 96       	adiw	r24, 0x01	; 1
    169e:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
      Serial.println("TARGA: " + mezzo.TARGA);              
    16a2:	68 e2       	ldi	r22, 0x28	; 40
    16a4:	79 e0       	ldi	r23, 0x09	; 9
    16a6:	ce 01       	movw	r24, r28
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <_ZplRK15StringSumHelperRK6String>
    16ae:	bc 01       	movw	r22, r24
    16b0:	88 e8       	ldi	r24, 0x88	; 136
    16b2:	9a e0       	ldi	r25, 0x0A	; 10
    16b4:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    16b8:	ce 01       	movw	r24, r28
    16ba:	01 96       	adiw	r24, 0x01	; 1
    16bc:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>

      Carburante = mezzo.Carb;                 
    16c0:	62 e2       	ldi	r22, 0x22	; 34
    16c2:	79 e0       	ldi	r23, 0x09	; 9
    16c4:	87 ea       	ldi	r24, 0xA7	; 167
    16c6:	98 e0       	ldi	r25, 0x08	; 8
    16c8:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN6StringaSERKS_>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    16cc:	6a e1       	ldi	r22, 0x1A	; 26
    16ce:	75 e0       	ldi	r23, 0x05	; 5
    16d0:	82 e2       	ldi	r24, 0x22	; 34
    16d2:	99 e0       	ldi	r25, 0x09	; 9
    16d4:	0e 94 1e 32 	call	0x643c	; 0x643c <_ZNK6String6equalsEPKc>
      if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    16d8:	81 11       	cpse	r24, r1
    16da:	70 c2       	rjmp	.+1248   	; 0x1bbc <loop+0x914>
    16dc:	6c e1       	ldi	r22, 0x1C	; 28
    16de:	75 e0       	ldi	r23, 0x05	; 5
    16e0:	82 e2       	ldi	r24, 0x22	; 34
    16e2:	99 e0       	ldi	r25, 0x09	; 9
    16e4:	0e 94 1e 32 	call	0x643c	; 0x643c <_ZNK6String6equalsEPKc>
    16e8:	81 11       	cpse	r24, r1
    16ea:	68 c2       	rjmp	.+1232   	; 0x1bbc <loop+0x914>
      lcd.clear();
      lcd.setCursor(0,1);
      lcd.print("TARGA: " + TARGA);
	  
    
      String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    16ec:	ce 01       	movw	r24, r28
    16ee:	0e 96       	adiw	r24, 0x0e	; 14
    16f0:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
      }     
      
      // da commentare
      // avanzaStato(TselDistributore);  
    }
    break;
    16f4:	aa c1       	rjmp	.+852    	; 0x1a4a <loop+0x7a2>
    case 4:
    { 
    righeDisplay[1] =  "****** DISTRIBUTORE ******";
    16f6:	6e e1       	ldi	r22, 0x1E	; 30
    16f8:	75 e0       	ldi	r23, 0x05	; 5
    16fa:	8d e7       	ldi	r24, 0x7D	; 125
    16fc:	98 e0       	ldi	r25, 0x08	; 8
    16fe:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    righeDisplay[2] =  "";
    1702:	64 e8       	ldi	r22, 0x84	; 132
    1704:	71 e0       	ldi	r23, 0x01	; 1
    1706:	83 e8       	ldi	r24, 0x83	; 131
    1708:	98 e0       	ldi	r25, 0x08	; 8
    170a:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    righeDisplay[3] = "**** SCEGLI ****";
    170e:	69 e3       	ldi	r22, 0x39	; 57
    1710:	75 e0       	ldi	r23, 0x05	; 5
    1712:	89 e8       	ldi	r24, 0x89	; 137
    1714:	98 e0       	ldi	r25, 0x08	; 8
    1716:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>

    displayLCD(righeDisplay,stato_procedura,100);
    171a:	60 91 d9 08 	lds	r22, 0x08D9	; 0x8008d9 <stato_procedura>
    171e:	70 91 da 08 	lds	r23, 0x08DA	; 0x8008da <stato_procedura+0x1>
    1722:	44 e6       	ldi	r20, 0x64	; 100
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	87 e7       	ldi	r24, 0x77	; 119
    1728:	98 e0       	ldi	r25, 0x08	; 8
    172a:	0e 94 1b 03 	call	0x636	; 0x636 <_Z10displayLCDP6Stringii>
    172e:	6a e1       	ldi	r22, 0x1A	; 26
    1730:	75 e0       	ldi	r23, 0x05	; 5
    1732:	82 e2       	ldi	r24, 0x22	; 34
    1734:	99 e0       	ldi	r25, 0x09	; 9

    // Verifica scelta distributore
    
      if (mezzo.Carb == "B")
    1736:	0e 94 1e 32 	call	0x643c	; 0x643c <_ZNK6String6equalsEPKc>
      {
        abilitaPulser('B');
    173a:	88 23       	and	r24, r24
    173c:	99 f0       	breq	.+38     	; 0x1764 <loop+0x4bc>
    173e:	82 e4       	ldi	r24, 0x42	; 66
        Rele_Abilitazione2(0,7); // chiudi relè
    1740:	3e dc       	rcall	.-1924   	; 0xfbe <_Z13abilitaPulserc>
    1742:	67 e0       	ldi	r22, 0x07	; 7
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
        StatoAttuale = "BENZINA";
    174a:	ad dc       	rcall	.-1702   	; 0x10a6 <_Z18Rele_Abilitazione2ii>
    174c:	6a e4       	ldi	r22, 0x4A	; 74
    174e:	75 e0       	ldi	r23, 0x05	; 5
    1750:	83 ee       	ldi	r24, 0xE3	; 227
    1752:	98 e0       	ldi	r25, 0x08	; 8
    1754:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
        avanzaStato(10);
    1758:	6a e0       	ldi	r22, 0x0A	; 10
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0a d8       	rcall	.-4076   	; 0x776 <_Z11avanzaStatom>
    1762:	73 c1       	rjmp	.+742    	; 0x1a4a <loop+0x7a2>
    1764:	6c e1       	ldi	r22, 0x1C	; 28
    1766:	75 e0       	ldi	r23, 0x05	; 5
    1768:	82 e2       	ldi	r24, 0x22	; 34
    176a:	99 e0       	ldi	r25, 0x09	; 9
      }
      else if (mezzo.Carb == "D")
    176c:	0e 94 1e 32 	call	0x643c	; 0x643c <_ZNK6String6equalsEPKc>
    1770:	88 23       	and	r24, r24
      {
        abilitaPulser('D');
    1772:	09 f4       	brne	.+2      	; 0x1776 <loop+0x4ce>
    1774:	6a c1       	rjmp	.+724    	; 0x1a4a <loop+0x7a2>
    1776:	84 e4       	ldi	r24, 0x44	; 68
        Rele_Abilitazione1(0,7); // chiudi relè
    1778:	22 dc       	rcall	.-1980   	; 0xfbe <_Z13abilitaPulserc>
    177a:	67 e0       	ldi	r22, 0x07	; 7
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	56 dc       	rcall	.-1876   	; 0x1030 <_Z18Rele_Abilitazione1ii>
        StatoAttuale = "GASOLIO";
    1784:	62 e5       	ldi	r22, 0x52	; 82
    1786:	75 e0       	ldi	r23, 0x05	; 5
    1788:	e3 cf       	rjmp	.-58     	; 0x1750 <loop+0x4a8>
    break;
    case 5:
    {             
      // VALIDA MEZZO CON WBSERVICES
      
      impulsi = 0;
    178a:	10 92 d8 08 	sts	0x08D8, r1	; 0x8008d8 <impulsi+0x1>
    178e:	10 92 d7 08 	sts	0x08D7, r1	; 0x8008d7 <impulsi>
      
      righeDisplay[1] = "**** Distributore ****";
    1792:	6a e5       	ldi	r22, 0x5A	; 90
    1794:	75 e0       	ldi	r23, 0x05	; 5
    1796:	8d e7       	ldi	r24, 0x7D	; 125
    1798:	98 e0       	ldi	r25, 0x08	; 8
    179a:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    179e:	64 e8       	ldi	r22, 0x84	; 132
    17a0:	71 e0       	ldi	r23, 0x01	; 1
    17a2:	83 e8       	ldi	r24, 0x83	; 131
    17a4:	98 e0       	ldi	r25, 0x08	; 8
    17a6:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    17aa:	61 e7       	ldi	r22, 0x71	; 113
    17ac:	75 e0       	ldi	r23, 0x05	; 5
    17ae:	ce 01       	movw	r24, r28
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
      righeDisplay[3] = "***** " + StatoAttuale + " *****";
    17b6:	63 ee       	ldi	r22, 0xE3	; 227
    17b8:	78 e0       	ldi	r23, 0x08	; 8
    17ba:	ce 01       	movw	r24, r28
    17bc:	01 96       	adiw	r24, 0x01	; 1
    17be:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <_ZplRK15StringSumHelperRK6String>
    17c2:	6b ec       	ldi	r22, 0xCB	; 203
    17c4:	74 e0       	ldi	r23, 0x04	; 4
    17c6:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <_ZplRK15StringSumHelperPKc>
    17ca:	bc 01       	movw	r22, r24
    17cc:	89 e8       	ldi	r24, 0x89	; 137
    17ce:	98 e0       	ldi	r25, 0x08	; 8
    17d0:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    17d4:	ce 01       	movw	r24, r28
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
      
      displayLCD(righeDisplay,stato_procedura,100);
    17dc:	60 91 d9 08 	lds	r22, 0x08D9	; 0x8008d9 <stato_procedura>
    17e0:	70 91 da 08 	lds	r23, 0x08DA	; 0x8008da <stato_procedura+0x1>
    17e4:	44 e6       	ldi	r20, 0x64	; 100
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	87 e7       	ldi	r24, 0x77	; 119
    17ea:	98 e0       	ldi	r25, 0x08	; 8
    17ec:	0e 94 1b 03 	call	0x636	; 0x636 <_Z10displayLCDP6Stringii>

      avanzaStato(20);
    17f0:	64 e1       	ldi	r22, 0x14	; 20
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    }
    break;
    case 6:
    { 
    disable_ETH();
    17f8:	b3 cf       	rjmp	.-154    	; 0x1760 <loop+0x4b8>
    17fa:	0e 94 90 01 	call	0x320	; 0x320 <_ZL11disable_ETHv>
    17fe:	8f e3       	ldi	r24, 0x3F	; 63
    1800:	9f e1       	ldi	r25, 0x1F	; 31
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <loop+0x55a>
    1806:	00 c0       	rjmp	.+0      	; 0x1808 <loop+0x560>
    _delay_ms(2);
    enable_ETH();
    1808:	00 00       	nop
    180a:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZL10enable_ETHv>
    
      double lt = impulsiToLitri(impulsi);      
    180e:	80 91 d7 08 	lds	r24, 0x08D7	; 0x8008d7 <impulsi>
    1812:	90 91 d8 08 	lds	r25, 0x08D8	; 0x8008d8 <impulsi+0x1>
    1816:	e1 db       	rcall	.-2110   	; 0xfda <_Z14impulsiToLitrii>
    1818:	6b 01       	movw	r12, r22
    181a:	7c 01       	movw	r14, r24
      
      righeDisplay[1] = "LITRI :" + String(lt);
    181c:	22 e0       	ldi	r18, 0x02	; 2
    181e:	ab 01       	movw	r20, r22
    1820:	bc 01       	movw	r22, r24
    1822:	ce 01       	movw	r24, r28
    1824:	0e 96       	adiw	r24, 0x0e	; 14
    1826:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <_ZN6StringC1Edh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    182a:	68 e7       	ldi	r22, 0x78	; 120
    182c:	75 e0       	ldi	r23, 0x05	; 5
    182e:	ce 01       	movw	r24, r28
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
    1836:	be 01       	movw	r22, r28
    1838:	62 5f       	subi	r22, 0xF2	; 242
    183a:	7f 4f       	sbci	r23, 0xFF	; 255
    183c:	ce 01       	movw	r24, r28
    183e:	01 96       	adiw	r24, 0x01	; 1
    1840:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <_ZplRK15StringSumHelperRK6String>
    1844:	bc 01       	movw	r22, r24
    1846:	8d e7       	ldi	r24, 0x7D	; 125
    1848:	98 e0       	ldi	r25, 0x08	; 8
    184a:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    184e:	ce 01       	movw	r24, r28
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    1856:	ce 01       	movw	r24, r28
    1858:	0e 96       	adiw	r24, 0x0e	; 14
    185a:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
      righeDisplay[2] = "";     
    185e:	64 e8       	ldi	r22, 0x84	; 132
    1860:	71 e0       	ldi	r23, 0x01	; 1
    1862:	83 e8       	ldi	r24, 0x83	; 131
    1864:	98 e0       	ldi	r25, 0x08	; 8
    1866:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    186a:	60 e8       	ldi	r22, 0x80	; 128
    186c:	75 e0       	ldi	r23, 0x05	; 5
    186e:	ce 01       	movw	r24, r28
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
      righeDisplay[3] = "Erogazione: " + StatoAttuale;
    1876:	63 ee       	ldi	r22, 0xE3	; 227
    1878:	78 e0       	ldi	r23, 0x08	; 8
    187a:	ce 01       	movw	r24, r28
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <_ZplRK15StringSumHelperRK6String>
    1882:	bc 01       	movw	r22, r24
    1884:	89 e8       	ldi	r24, 0x89	; 137
    1886:	98 e0       	ldi	r25, 0x08	; 8
    1888:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    188c:	ce 01       	movw	r24, r28
    188e:	01 96       	adiw	r24, 0x01	; 1
    1890:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
      
      displayLCD(righeDisplay,stato_procedura,100);   
    1894:	60 91 d9 08 	lds	r22, 0x08D9	; 0x8008d9 <stato_procedura>
    1898:	70 91 da 08 	lds	r23, 0x08DA	; 0x8008da <stato_procedura+0x1>
    189c:	44 e6       	ldi	r20, 0x64	; 100
    189e:	50 e0       	ldi	r21, 0x00	; 0
    18a0:	87 e7       	ldi	r24, 0x77	; 119
    18a2:	98 e0       	ldi	r25, 0x08	; 8
    18a4:	0e 94 1b 03 	call	0x636	; 0x636 <_Z10displayLCDP6Stringii>

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
    18a8:	01 9b       	sbis	0x00, 1	; 0
    18aa:	08 c0       	rjmp	.+16     	; 0x18bc <loop+0x614>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    18ac:	6c e1       	ldi	r22, 0x1C	; 28
    18ae:	75 e0       	ldi	r23, 0x05	; 5
    18b0:	87 ea       	ldi	r24, 0xA7	; 167
    18b2:	98 e0       	ldi	r25, 0x08	; 8
    18b4:	0e 94 1e 32 	call	0x643c	; 0x643c <_ZNK6String6equalsEPKc>
    18b8:	81 11       	cpse	r24, r1
    18ba:	97 c1       	rjmp	.+814    	; 0x1bea <loop+0x942>
        avanzaStato(10);
      }
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
    18bc:	19 9b       	sbis	0x03, 1	; 3
    18be:	c5 c0       	rjmp	.+394    	; 0x1a4a <loop+0x7a2>
    18c0:	6a e1       	ldi	r22, 0x1A	; 26
    18c2:	75 e0       	ldi	r23, 0x05	; 5
    18c4:	87 ea       	ldi	r24, 0xA7	; 167
    18c6:	98 e0       	ldi	r25, 0x08	; 8
    18c8:	0e 94 1e 32 	call	0x643c	; 0x643c <_ZNK6String6equalsEPKc>
    18cc:	81 11       	cpse	r24, r1
    18ce:	ba c1       	rjmp	.+884    	; 0x1c44 <loop+0x99c>
    18d0:	bc c0       	rjmp	.+376    	; 0x1a4a <loop+0x7a2>
      /**************************************
       Control_WIFI(1);
       _delay_ms(2000);
      /**************************************/
      
      righeDisplay[1] =  "";      
    18d2:	64 e8       	ldi	r22, 0x84	; 132
    18d4:	71 e0       	ldi	r23, 0x01	; 1
    18d6:	8d e7       	ldi	r24, 0x7D	; 125
    18d8:	98 e0       	ldi	r25, 0x08	; 8
    18da:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      righeDisplay[2] = "Invio........";
    18de:	6d e8       	ldi	r22, 0x8D	; 141
    18e0:	75 e0       	ldi	r23, 0x05	; 5
    18e2:	83 e8       	ldi	r24, 0x83	; 131
    18e4:	98 e0       	ldi	r25, 0x08	; 8
    18e6:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    18ea:	64 e8       	ldi	r22, 0x84	; 132
    18ec:	71 e0       	ldi	r23, 0x01	; 1
    18ee:	89 e8       	ldi	r24, 0x89	; 137
    18f0:	98 e0       	ldi	r25, 0x08	; 8
    18f2:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
          
      if (BIT_IS_CLEAR(PORTC,4)) 
    18f6:	44 99       	sbic	0x08, 4	; 8
    18f8:	a8 c0       	rjmp	.+336    	; 0x1a4a <loop+0x7a2>
      {
        displayLCD(righeDisplay,stato_procedura,10);  
    18fa:	60 91 d9 08 	lds	r22, 0x08D9	; 0x8008d9 <stato_procedura>
    18fe:	70 91 da 08 	lds	r23, 0x08DA	; 0x8008da <stato_procedura+0x1>
    1902:	4a e0       	ldi	r20, 0x0A	; 10
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	87 e7       	ldi	r24, 0x77	; 119
    1908:	98 e0       	ldi	r25, 0x08	; 8
    190a:	0e 94 1b 03 	call	0x636	; 0x636 <_Z10displayLCDP6Stringii>

        Messaggio = ""; 
    190e:	64 e8       	ldi	r22, 0x84	; 132
    1910:	71 e0       	ldi	r23, 0x01	; 1
    1912:	8f e8       	ldi	r24, 0x8F	; 143
    1914:	98 e0       	ldi	r25, 0x08	; 8
    1916:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    191a:	0d ea       	ldi	r16, 0xAD	; 173
    191c:	18 e0       	ldi	r17, 0x08	; 8
    191e:	85 ec       	ldi	r24, 0xC5	; 197
    1920:	e8 2e       	mov	r14, r24
    1922:	88 e0       	ldi	r24, 0x08	; 8
    1924:	f8 2e       	mov	r15, r24
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1926:	b8 01       	movw	r22, r16
    1928:	ce 01       	movw	r24, r28
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <_ZN6StringC1ERKS_>
        
        for (int k = 0;k<4;k++)
          Messaggio.concat(RaccoltaDati[k]+";");  
    1930:	6b e9       	ldi	r22, 0x9B	; 155
    1932:	75 e0       	ldi	r23, 0x05	; 5
    1934:	ce 01       	movw	r24, r28
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <_ZplRK15StringSumHelperPKc>
    193c:	bc 01       	movw	r22, r24
    193e:	8f e8       	ldi	r24, 0x8F	; 143
    1940:	98 e0       	ldi	r25, 0x08	; 8
    1942:	0e 94 c4 31 	call	0x6388	; 0x6388 <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1946:	ce 01       	movw	r24, r28
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    194e:	0a 5f       	subi	r16, 0xFA	; 250
    1950:	1f 4f       	sbci	r17, 0xFF	; 255
      {
        displayLCD(righeDisplay,stato_procedura,10);  

        Messaggio = ""; 
        
        for (int k = 0;k<4;k++)
    1952:	e0 16       	cp	r14, r16
    1954:	f1 06       	cpc	r15, r17
    1956:	39 f7       	brne	.-50     	; 0x1926 <loop+0x67e>
    1958:	9f ef       	ldi	r25, 0xFF	; 255
    195a:	23 ed       	ldi	r18, 0xD3	; 211
    195c:	80 e3       	ldi	r24, 0x30	; 48
    195e:	91 50       	subi	r25, 0x01	; 1
    1960:	20 40       	sbci	r18, 0x00	; 0
    1962:	80 40       	sbci	r24, 0x00	; 0
    1964:	e1 f7       	brne	.-8      	; 0x195e <loop+0x6b6>
    1966:	00 c0       	rjmp	.+0      	; 0x1968 <loop+0x6c0>
    1968:	00 00       	nop
          Messaggio.concat(RaccoltaDati[k]+";");  
      
    _delay_ms(1000);      
        
    if (PostErogazione(5001,serverREST,clientLOCAL,Messaggio))
    196a:	6f e8       	ldi	r22, 0x8F	; 143
    196c:	78 e0       	ldi	r23, 0x08	; 8
    196e:	ce 01       	movw	r24, r28
    1970:	0e 96       	adiw	r24, 0x0e	; 14
    1972:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <_ZN6StringC1ERKS_>
    1976:	80 91 54 08 	lds	r24, 0x0854	; 0x800854 <clientLOCAL+0x2>
    197a:	90 91 55 08 	lds	r25, 0x0855	; 0x800855 <clientLOCAL+0x3>
    197e:	9c 83       	std	Y+4, r25	; 0x04
    1980:	8b 83       	std	Y+3, r24	; 0x03
    1982:	80 91 56 08 	lds	r24, 0x0856	; 0x800856 <clientLOCAL+0x4>
    1986:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <clientLOCAL+0x5>
    198a:	a0 91 58 08 	lds	r26, 0x0858	; 0x800858 <clientLOCAL+0x6>
    198e:	b0 91 59 08 	lds	r27, 0x0859	; 0x800859 <clientLOCAL+0x7>
    1992:	8d 83       	std	Y+5, r24	; 0x05
    1994:	9e 83       	std	Y+6, r25	; 0x06
    1996:	af 83       	std	Y+7, r26	; 0x07
    1998:	b8 87       	std	Y+8, r27	; 0x08
    199a:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <clientLOCAL+0x8>
    199e:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <clientLOCAL+0x9>
    19a2:	a0 91 5c 08 	lds	r26, 0x085C	; 0x80085c <clientLOCAL+0xa>
    19a6:	b0 91 5d 08 	lds	r27, 0x085D	; 0x80085d <clientLOCAL+0xb>
    19aa:	89 87       	std	Y+9, r24	; 0x09
    19ac:	9a 87       	std	Y+10, r25	; 0x0a
    19ae:	ab 87       	std	Y+11, r26	; 0x0b
    19b0:	bc 87       	std	Y+12, r27	; 0x0c
    19b2:	83 e7       	ldi	r24, 0x73	; 115
    19b4:	97 e0       	ldi	r25, 0x07	; 7
    19b6:	9a 83       	std	Y+2, r25	; 0x02
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	80 91 5e 08 	lds	r24, 0x085E	; 0x80085e <clientLOCAL+0xc>
    19be:	8d 87       	std	Y+13, r24	; 0x0d
    19c0:	9e 01       	movw	r18, r28
    19c2:	22 5f       	subi	r18, 0xF2	; 242
    19c4:	3f 4f       	sbci	r19, 0xFF	; 255
    19c6:	ae 01       	movw	r20, r28
    19c8:	4f 5f       	subi	r20, 0xFF	; 255
    19ca:	5f 4f       	sbci	r21, 0xFF	; 255
    19cc:	6c e2       	ldi	r22, 0x2C	; 44
    19ce:	71 e0       	ldi	r23, 0x01	; 1
    19d0:	89 e8       	ldi	r24, 0x89	; 137
    19d2:	93 e1       	ldi	r25, 0x13	; 19
    19d4:	a7 d9       	rcall	.-3250   	; 0xd24 <_Z14PostErogazioneiPc14EthernetClient6String>
    19d6:	18 2f       	mov	r17, r24
    19d8:	ce 01       	movw	r24, r28
    19da:	0e 96       	adiw	r24, 0x0e	; 14
    19dc:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    19e0:	11 23       	and	r17, r17
    19e2:	39 f1       	breq	.+78     	; 0x1a32 <loop+0x78a>
    {
      disable_ETH();
    19e4:	0e 94 90 01 	call	0x320	; 0x320 <_ZL11disable_ETHv>
    
      righeDisplay[1] = "";
    19e8:	64 e8       	ldi	r22, 0x84	; 132
    19ea:	71 e0       	ldi	r23, 0x01	; 1
    19ec:	8d e7       	ldi	r24, 0x7D	; 125
    19ee:	98 e0       	ldi	r25, 0x08	; 8
    19f0:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      righeDisplay[2] = " Dati Inviati ";
    19f4:	6d e9       	ldi	r22, 0x9D	; 157
    19f6:	75 e0       	ldi	r23, 0x05	; 5
    19f8:	83 e8       	ldi	r24, 0x83	; 131
    19fa:	98 e0       	ldi	r25, 0x08	; 8
    19fc:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    1a00:	64 e8       	ldi	r22, 0x84	; 132
    1a02:	71 e0       	ldi	r23, 0x01	; 1
    1a04:	89 e8       	ldi	r24, 0x89	; 137
    1a06:	98 e0       	ldi	r25, 0x08	; 8
    1a08:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    
      displayLCD(righeDisplay,stato_procedura,100);
    1a0c:	60 91 d9 08 	lds	r22, 0x08D9	; 0x8008d9 <stato_procedura>
    1a10:	70 91 da 08 	lds	r23, 0x08DA	; 0x8008da <stato_procedura+0x1>
    1a14:	44 e6       	ldi	r20, 0x64	; 100
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	87 e7       	ldi	r24, 0x77	; 119
    1a1a:	98 e0       	ldi	r25, 0x08	; 8
    1a1c:	0e 94 1b 03 	call	0x636	; 0x636 <_Z10displayLCDP6Stringii>
    1a20:	9f ef       	ldi	r25, 0xFF	; 255
    1a22:	29 ef       	ldi	r18, 0xF9	; 249
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	91 50       	subi	r25, 0x01	; 1
    1a28:	20 40       	sbci	r18, 0x00	; 0
    1a2a:	80 40       	sbci	r24, 0x00	; 0
    1a2c:	e1 f7       	brne	.-8      	; 0x1a26 <loop+0x77e>
    1a2e:	00 c0       	rjmp	.+0      	; 0x1a30 <loop+0x788>
    
      _delay_ms(20);
    }
    
	  disable_ETH();
    1a30:	00 00       	nop
    1a32:	0e 94 90 01 	call	0x320	; 0x320 <_ZL11disable_ETHv>
	 avanzaStato(TmaxSalvataggio);
    1a36:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxSalvataggio>
    1a3a:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxSalvataggio+0x1>
    1a3e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxSalvataggio+0x2>
    1a42:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxSalvataggio+0x3>
   Azzera();    
    }
    break;
    case 9:
    {        
      Azzera();    
    1a46:	8c ce       	rjmp	.-744    	; 0x1760 <loop+0x4b8>
    1a48:	85 db       	rcall	.-2294   	; 0x1154 <_Z6Azzerav>
    {      
    }
    break;
  }

  nowTimer = DS3231M.now();
    1a4a:	69 e3       	ldi	r22, 0x39	; 57
    1a4c:	78 e0       	ldi	r23, 0x08	; 8
    1a4e:	ce 01       	movw	r24, r28
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN13DS3231M_Class3nowEv>
    1a56:	86 e0       	ldi	r24, 0x06	; 6
    1a58:	fe 01       	movw	r30, r28
    1a5a:	31 96       	adiw	r30, 0x01	; 1
    1a5c:	a7 e2       	ldi	r26, 0x27	; 39
    1a5e:	b8 e0       	ldi	r27, 0x08	; 8
    1a60:	01 90       	ld	r0, Z+
    1a62:	0d 92       	st	X+, r0
    1a64:	8a 95       	dec	r24
    1a66:	e1 f7       	brne	.-8      	; 0x1a60 <loop+0x7b8>
  secs = nowTimer.secondstime();
    1a68:	87 e2       	ldi	r24, 0x27	; 39
    1a6a:	98 e0       	ldi	r25, 0x08	; 8
    1a6c:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <_ZNK8DateTime11secondstimeEv>
    1a70:	60 93 35 08 	sts	0x0835, r22	; 0x800835 <secs>
    1a74:	70 93 36 08 	sts	0x0836, r23	; 0x800836 <secs+0x1>
    1a78:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <secs+0x2>
    1a7c:	90 93 38 08 	sts	0x0838, r25	; 0x800838 <secs+0x3>
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();
    1a80:	00 91 31 08 	lds	r16, 0x0831	; 0x800831 <UltimoPassaggioStato>
    1a84:	10 91 32 08 	lds	r17, 0x0832	; 0x800832 <UltimoPassaggioStato+0x1>
    1a88:	20 91 33 08 	lds	r18, 0x0833	; 0x800833 <UltimoPassaggioStato+0x2>
    1a8c:	30 91 34 08 	lds	r19, 0x0834	; 0x800834 <UltimoPassaggioStato+0x3>
    1a90:	c0 90 2d 08 	lds	r12, 0x082D	; 0x80082d <Timer>
    1a94:	d0 90 2e 08 	lds	r13, 0x082E	; 0x80082e <Timer+0x1>
    1a98:	e0 90 2f 08 	lds	r14, 0x082F	; 0x80082f <Timer+0x2>
    1a9c:	f0 90 30 08 	lds	r15, 0x0830	; 0x800830 <Timer+0x3>
    1aa0:	0c 0d       	add	r16, r12
    1aa2:	1d 1d       	adc	r17, r13
    1aa4:	2e 1d       	adc	r18, r14
    1aa6:	3f 1d       	adc	r19, r15
    1aa8:	68 01       	movw	r12, r16
    1aaa:	79 01       	movw	r14, r18
    1aac:	c6 1a       	sub	r12, r22
    1aae:	d7 0a       	sbc	r13, r23
    1ab0:	e8 0a       	sbc	r14, r24
    1ab2:	f9 0a       	sbc	r15, r25
    1ab4:	d7 01       	movw	r26, r14
    1ab6:	c6 01       	movw	r24, r12
    1ab8:	02 97       	sbiw	r24, 0x02	; 2
    1aba:	a1 05       	cpc	r26, r1
    1abc:	b1 05       	cpc	r27, r1
    1abe:	08 f0       	brcs	.+2      	; 0x1ac2 <loop+0x81a>
    1ac0:	ec c0       	rjmp	.+472    	; 0x1c9a <loop+0x9f2>
    1ac2:	48 db       	rcall	.-2416   	; 0x1154 <_Z6Azzerav>

}
    1ac4:	ea c0       	rjmp	.+468    	; 0x1c9a <loop+0x9f2>
    String ATe = "ERRORE";
      if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
            
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
        { 
           Serial.println("");
    1ac6:	64 e8       	ldi	r22, 0x84	; 132
    1ac8:	71 e0       	ldi	r23, 0x01	; 1
    1aca:	88 e8       	ldi	r24, 0x88	; 136
    1acc:	9a e0       	ldi	r25, 0x0A	; 10
    1ace:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN5Print7printlnEPKc>
           Serial.print("***************************************************************");
    1ad2:	6c ea       	ldi	r22, 0xAC	; 172
    1ad4:	75 e0       	ldi	r23, 0x05	; 5
    1ad6:	88 e8       	ldi	r24, 0x88	; 136
    1ad8:	9a e0       	ldi	r25, 0x0A	; 10
    1ada:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <_ZN5Print5printEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1ade:	6c ee       	ldi	r22, 0xEC	; 236
    1ae0:	75 e0       	ldi	r23, 0x05	; 5
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	01 96       	adiw	r24, 0x01	; 1
    1ae6:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
           Serial.println(" Tessera ID : " + ATe);
    1aea:	be 01       	movw	r22, r28
    1aec:	6c 5e       	subi	r22, 0xEC	; 236
    1aee:	7f 4f       	sbci	r23, 0xFF	; 255
    1af0:	ce 01       	movw	r24, r28
    1af2:	01 96       	adiw	r24, 0x01	; 1
    1af4:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <_ZplRK15StringSumHelperRK6String>
    1af8:	bc 01       	movw	r22, r24
    1afa:	88 e8       	ldi	r24, 0x88	; 136
    1afc:	9a e0       	ldi	r25, 0x0A	; 10
    1afe:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1b02:	ce 01       	movw	r24, r28
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
           Serial.print("***************************************************************");
    1b0a:	6c ea       	ldi	r22, 0xAC	; 172
    1b0c:	75 e0       	ldi	r23, 0x05	; 5
    1b0e:	88 e8       	ldi	r24, 0x88	; 136
    1b10:	9a e0       	ldi	r25, 0x0A	; 10
    1b12:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <_ZN5Print5printEPKc>
           Serial.println("Riconoscimento Tessera .............");
    1b16:	6b ef       	ldi	r22, 0xFB	; 251
    1b18:	75 e0       	ldi	r23, 0x05	; 5
    1b1a:	88 e8       	ldi	r24, 0x88	; 136
    1b1c:	9a e0       	ldi	r25, 0x0A	; 10
    1b1e:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN5Print7printlnEPKc>
                     
           RaccoltaDati[0] = ATe;
    1b22:	be 01       	movw	r22, r28
    1b24:	6c 5e       	subi	r22, 0xEC	; 236
    1b26:	7f 4f       	sbci	r23, 0xFF	; 255
    1b28:	8d ea       	ldi	r24, 0xAD	; 173
    1b2a:	98 e0       	ldi	r25, 0x08	; 8
    1b2c:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN6StringaSERKS_>
           
           lcd.backlight();
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	99 e0       	ldi	r25, 0x09	; 9
    1b34:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <_ZN3LCD9backlightEv>
           lcd.display();          
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	99 e0       	ldi	r25, 0x09	; 9
    1b3c:	0e 94 7d 25 	call	0x4afa	; 0x4afa <_ZN3LCD7displayEv>
    1b40:	8f e3       	ldi	r24, 0x3F	; 63
    1b42:	9c e9       	ldi	r25, 0x9C	; 156
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <loop+0x89c>
    1b48:	00 c0       	rjmp	.+0      	; 0x1b4a <loop+0x8a2>
    1b4a:	00 00       	nop
           _delay_ms(10);
            
           //righeDisplay[1] = " * AUTENTICAZIONE *";
           righeDisplay[1] = " * RICONOSCIMENTO *";
    1b4c:	60 e2       	ldi	r22, 0x20	; 32
    1b4e:	76 e0       	ldi	r23, 0x06	; 6
    1b50:	8d e7       	ldi	r24, 0x7D	; 125
    1b52:	98 e0       	ldi	r25, 0x08	; 8
    1b54:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
           righeDisplay[2] = "..In Corso....";
    1b58:	64 e3       	ldi	r22, 0x34	; 52
    1b5a:	76 e0       	ldi	r23, 0x06	; 6
    1b5c:	83 e8       	ldi	r24, 0x83	; 131
    1b5e:	98 e0       	ldi	r25, 0x08	; 8
    1b60:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1b64:	63 e4       	ldi	r22, 0x43	; 67
    1b66:	76 e0       	ldi	r23, 0x06	; 6
    1b68:	ce 01       	movw	r24, r28
    1b6a:	01 96       	adiw	r24, 0x01	; 1
    1b6c:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
           righeDisplay[3] = "   Rfid: " + ATe;
    1b70:	be 01       	movw	r22, r28
    1b72:	6c 5e       	subi	r22, 0xEC	; 236
    1b74:	7f 4f       	sbci	r23, 0xFF	; 255
    1b76:	ce 01       	movw	r24, r28
    1b78:	01 96       	adiw	r24, 0x01	; 1
    1b7a:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <_ZplRK15StringSumHelperRK6String>
    1b7e:	bc 01       	movw	r22, r24
    1b80:	89 e8       	ldi	r24, 0x89	; 137
    1b82:	98 e0       	ldi	r25, 0x08	; 8
    1b84:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1b88:	ce 01       	movw	r24, r28
    1b8a:	01 96       	adiw	r24, 0x01	; 1
    1b8c:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
           // righeDisplay[3] = "";
         
           displayLCD(righeDisplay,stato_procedura,100);
    1b90:	60 91 d9 08 	lds	r22, 0x08D9	; 0x8008d9 <stato_procedura>
    1b94:	70 91 da 08 	lds	r23, 0x08DA	; 0x8008da <stato_procedura+0x1>
    1b98:	44 e6       	ldi	r20, 0x64	; 100
    1b9a:	50 e0       	ldi	r21, 0x00	; 0
    1b9c:	87 e7       	ldi	r24, 0x77	; 119
    1b9e:	98 e0       	ldi	r25, 0x08	; 8
    1ba0:	0e 94 1b 03 	call	0x636	; 0x636 <_Z10displayLCDP6Stringii>
      
           InizializzaEthernet();
    1ba4:	0e 94 92 01 	call	0x324	; 0x324 <_Z19InizializzaEthernetv>
    1ba8:	9f ef       	ldi	r25, 0xFF	; 255
    1baa:	23 ed       	ldi	r18, 0xD3	; 211
    1bac:	80 e3       	ldi	r24, 0x30	; 48
    1bae:	91 50       	subi	r25, 0x01	; 1
    1bb0:	20 40       	sbci	r18, 0x00	; 0
    1bb2:	80 40       	sbci	r24, 0x00	; 0
    1bb4:	e1 f7       	brne	.-8      	; 0x1bae <loop+0x906>
    1bb6:	00 c0       	rjmp	.+0      	; 0x1bb8 <loop+0x910>
    1bb8:	00 00       	nop
    1bba:	42 cc       	rjmp	.-1916   	; 0x1440 <loop+0x198>
      Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
      Serial.println("TARGA: " + mezzo.TARGA);              

      Carburante = mezzo.Carb;                 
      if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
        RaccoltaDati[1] = mezzo.TARGA;
    1bbc:	68 e2       	ldi	r22, 0x28	; 40
    1bbe:	79 e0       	ldi	r23, 0x09	; 9
    1bc0:	83 eb       	ldi	r24, 0xB3	; 179
    1bc2:	98 e0       	ldi	r25, 0x08	; 8
    1bc4:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN6StringaSERKS_>
        RaccoltaDati[2] = mezzo.Carb;
    1bc8:	62 e2       	ldi	r22, 0x22	; 34
    1bca:	79 e0       	ldi	r23, 0x09	; 9
    1bcc:	89 eb       	ldi	r24, 0xB9	; 185
    1bce:	98 e0       	ldi	r25, 0x08	; 8
    1bd0:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN6StringaSERKS_>
        avanzaStato(TselDistributore); 
    1bd4:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    1bd8:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    1bdc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    1be0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    1be4:	0e 94 bb 03 	call	0x776	; 0x776 <_Z11avanzaStatom>
    1be8:	81 cd       	rjmp	.-1278   	; 0x16ec <loop+0x444>

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
      {       
        RaccoltaDati[3] = String(lt);
    1bea:	22 e0       	ldi	r18, 0x02	; 2
    1bec:	b7 01       	movw	r22, r14
    1bee:	a6 01       	movw	r20, r12
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	01 96       	adiw	r24, 0x01	; 1
    1bf4:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <_ZN6StringC1Edh>
    1bf8:	be 01       	movw	r22, r28
    1bfa:	6f 5f       	subi	r22, 0xFF	; 255
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	8f eb       	ldi	r24, 0xBF	; 191
    1c00:	98 e0       	ldi	r25, 0x08	; 8
    1c02:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <_ZN6StringaSEOS_>
    1c06:	ce 01       	movw	r24, r28
    1c08:	01 96       	adiw	r24, 0x01	; 1
        
        StatoAttuale = "STOP EROGAZIONE";
    1c0a:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    1c0e:	6d e4       	ldi	r22, 0x4D	; 77
    1c10:	76 e0       	ldi	r23, 0x06	; 6
    1c12:	83 ee       	ldi	r24, 0xE3	; 227
    1c14:	98 e0       	ldi	r25, 0x08	; 8
        Rele_Abilitazione2(1,7); //  apri relè
    1c16:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    1c1a:	67 e0       	ldi	r22, 0x07	; 7
    1c1c:	70 e0       	ldi	r23, 0x00	; 0
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
        Rele_Abilitazione1(1,7); //  apri relè  
    1c22:	41 da       	rcall	.-2942   	; 0x10a6 <_Z18Rele_Abilitazione2ii>
    1c24:	67 e0       	ldi	r22, 0x07	; 7
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	01 da       	rcall	.-3070   	; 0x1030 <_Z18Rele_Abilitazione1ii>
        TOGGLE_BIT(PORTA,1);      
    1c2e:	92 b1       	in	r25, 0x02	; 2
    1c30:	82 e0       	ldi	r24, 0x02	; 2
    1c32:	89 27       	eor	r24, r25
    1c34:	82 b9       	out	0x02, r24	; 2
        avanzaStato(10);
    1c36:	6a e0       	ldi	r22, 0x0A	; 10
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	0e 94 bb 03 	call	0x776	; 0x776 <_Z11avanzaStatom>
    1c42:	3c ce       	rjmp	.-904    	; 0x18bc <loop+0x614>
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
      {
        RaccoltaDati[3] = String(lt);
    1c44:	22 e0       	ldi	r18, 0x02	; 2
    1c46:	b7 01       	movw	r22, r14
    1c48:	a6 01       	movw	r20, r12
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <_ZN6StringC1Edh>
    1c52:	be 01       	movw	r22, r28
    1c54:	6f 5f       	subi	r22, 0xFF	; 255
    1c56:	7f 4f       	sbci	r23, 0xFF	; 255
    1c58:	8f eb       	ldi	r24, 0xBF	; 191
    1c5a:	98 e0       	ldi	r25, 0x08	; 8
    1c5c:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <_ZN6StringaSEOS_>
    1c60:	ce 01       	movw	r24, r28
    1c62:	01 96       	adiw	r24, 0x01	; 1
        
        StatoAttuale = "STOP EROGAZIONE";
    1c64:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    1c68:	6d e4       	ldi	r22, 0x4D	; 77
    1c6a:	76 e0       	ldi	r23, 0x06	; 6
    1c6c:	83 ee       	ldi	r24, 0xE3	; 227
    1c6e:	98 e0       	ldi	r25, 0x08	; 8
        Rele_Abilitazione2(1,7); //  apri relè
    1c70:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    1c74:	67 e0       	ldi	r22, 0x07	; 7
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
        Rele_Abilitazione1(1,7); //  apri relè        
    1c7c:	14 da       	rcall	.-3032   	; 0x10a6 <_Z18Rele_Abilitazione2ii>
    1c7e:	67 e0       	ldi	r22, 0x07	; 7
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	d4 d9       	rcall	.-3160   	; 0x1030 <_Z18Rele_Abilitazione1ii>
        avanzaStato(TmaxInviodati);
    1c88:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxInviodati>
    1c8c:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxInviodati+0x1>
    1c90:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxInviodati+0x2>
    1c94:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxInviodati+0x3>
    1c98:	63 cd       	rjmp	.-1338   	; 0x1760 <loop+0x4b8>

  nowTimer = DS3231M.now();
  secs = nowTimer.secondstime();
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();

}
    1c9a:	69 96       	adiw	r28, 0x19	; 25
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	1f 91       	pop	r17
    1cac:	0f 91       	pop	r16
    1cae:	ff 90       	pop	r15
    1cb0:	ef 90       	pop	r14
    1cb2:	df 90       	pop	r13
    1cb4:	cf 90       	pop	r12
    1cb6:	08 95       	ret

00001cb8 <__vector_4>:

/********************FINE LOOP PROCEDURA************************************/

// interrupt per conteggio impulsi

ISR(PCINT0_vect) {
    1cb8:	1f 92       	push	r1
    1cba:	0f 92       	push	r0
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	0f 92       	push	r0
    1cc0:	11 24       	eor	r1, r1
    1cc2:	8f 93       	push	r24
    1cc4:	9f 93       	push	r25
       if (PINA & _BV(PA5)){
    1cc6:	05 9b       	sbis	0x00, 5	; 0
    1cc8:	09 c0       	rjmp	.+18     	; 0x1cdc <__vector_4+0x24>
              impulsi++;
    1cca:	80 91 d7 08 	lds	r24, 0x08D7	; 0x8008d7 <impulsi>
    1cce:	90 91 d8 08 	lds	r25, 0x08D8	; 0x8008d8 <impulsi+0x1>
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	90 93 d8 08 	sts	0x08D8, r25	; 0x8008d8 <impulsi+0x1>
    1cd8:	80 93 d7 08 	sts	0x08D7, r24	; 0x8008d7 <impulsi>
       }
       if (PINA & _BV(PA6)){
    1cdc:	06 9b       	sbis	0x00, 6	; 0
    1cde:	09 c0       	rjmp	.+18     	; 0x1cf2 <__vector_4+0x3a>
              impulsi++;
    1ce0:	80 91 d7 08 	lds	r24, 0x08D7	; 0x8008d7 <impulsi>
    1ce4:	90 91 d8 08 	lds	r25, 0x08D8	; 0x8008d8 <impulsi+0x1>
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	90 93 d8 08 	sts	0x08D8, r25	; 0x8008d8 <impulsi+0x1>
    1cee:	80 93 d7 08 	sts	0x08D7, r24	; 0x8008d7 <impulsi>
       }
}
    1cf2:	9f 91       	pop	r25
    1cf4:	8f 91       	pop	r24
    1cf6:	0f 90       	pop	r0
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	0f 90       	pop	r0
    1cfc:	1f 90       	pop	r1
    1cfe:	18 95       	reti

00001d00 <__vector_7>:

// interrupt per pulsanti abilitazione diesele benzina

ISR(PCINT3_vect) {    
    1d00:	1f 92       	push	r1
    1d02:	0f 92       	push	r0
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	0f 92       	push	r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	0b b6       	in	r0, 0x3b	; 59
    1d0c:	0f 92       	push	r0
    1d0e:	2f 93       	push	r18
    1d10:	3f 93       	push	r19
    1d12:	4f 93       	push	r20
    1d14:	5f 93       	push	r21
    1d16:	6f 93       	push	r22
    1d18:	7f 93       	push	r23
    1d1a:	8f 93       	push	r24
    1d1c:	9f 93       	push	r25
    1d1e:	af 93       	push	r26
    1d20:	bf 93       	push	r27
    1d22:	ef 93       	push	r30
    1d24:	ff 93       	push	r31
  
  if (stato_procedura == 4)
    1d26:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <stato_procedura>
    1d2a:	90 91 da 08 	lds	r25, 0x08DA	; 0x8008da <stato_procedura+0x1>
    1d2e:	04 97       	sbiw	r24, 0x04	; 4
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <__vector_7+0x34>
    1d32:	86 c0       	rjmp	.+268    	; 0x1e40 <__vector_7+0x140>
  {
    if (PIND & _BV(PD6))
    1d34:	4e 9b       	sbis	0x09, 6	; 9
    1d36:	2a c0       	rjmp	.+84     	; 0x1d8c <__vector_7+0x8c>
    {   
      intConsecutivePresses++;                      // increment counter for number of presses
    1d38:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <intConsecutivePresses>
    1d3c:	90 91 32 09 	lds	r25, 0x0932	; 0x800932 <intConsecutivePresses+0x1>
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	90 93 32 09 	sts	0x0932, r25	; 0x800932 <intConsecutivePresses+0x1>
    1d46:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <intConsecutivePresses>
      if(intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES) 
    1d4a:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <intConsecutivePresses>
    1d4e:	90 91 32 09 	lds	r25, 0x0932	; 0x800932 <intConsecutivePresses+0x1>
    1d52:	18 16       	cp	r1, r24
    1d54:	19 06       	cpc	r1, r25
    1d56:	8c f5       	brge	.+98     	; 0x1dba <__vector_7+0xba>
      {     // if enough presses to constitute a press
        abilitaPulser('B');
    1d58:	82 e4       	ldi	r24, 0x42	; 66
    1d5a:	31 d9       	rcall	.-3486   	; 0xfbe <_Z13abilitaPulserc>
        Rele_Abilitazione2(0,7); // chiudi relè
    1d5c:	67 e0       	ldi	r22, 0x07	; 7
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a0 d9       	rcall	.-3264   	; 0x10a6 <_Z18Rele_Abilitazione2ii>
        Carburante = "B";
    1d66:	6a e1       	ldi	r22, 0x1A	; 26
    1d68:	75 e0       	ldi	r23, 0x05	; 5
    1d6a:	87 ea       	ldi	r24, 0xA7	; 167
    1d6c:	98 e0       	ldi	r25, 0x08	; 8
    1d6e:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
        StatoAttuale = "BENZINA";
    1d72:	6a e4       	ldi	r22, 0x4A	; 74
    1d74:	75 e0       	ldi	r23, 0x05	; 5
    1d76:	83 ee       	ldi	r24, 0xE3	; 227
    1d78:	98 e0       	ldi	r25, 0x08	; 8
    1d7a:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
        //stato_procedura++;
        avanzaStato(10);                            
    1d7e:	6a e0       	ldi	r22, 0x0A	; 10
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 bb 03 	call	0x776	; 0x776 <_Z11avanzaStatom>
    1d8a:	0f c0       	rjmp	.+30     	; 0x1daa <__vector_7+0xaa>
        intConsecutivePresses = 0;                    // and reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
    else  {           // else if button is not pressed (logic low)
    intConsecutiveNonPresses++;
    1d8c:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <intConsecutiveNonPresses>
    1d90:	90 91 30 09 	lds	r25, 0x0930	; 0x800930 <intConsecutiveNonPresses+0x1>
    1d94:	01 96       	adiw	r24, 0x01	; 1
    1d96:	90 93 30 09 	sts	0x0930, r25	; 0x800930 <intConsecutiveNonPresses+0x1>
    1d9a:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <intConsecutiveNonPresses>
    if(intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    1d9e:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <intConsecutiveNonPresses>
    1da2:	90 91 30 09 	lds	r25, 0x0930	; 0x800930 <intConsecutiveNonPresses+0x1>
    1da6:	02 97       	sbiw	r24, 0x02	; 2
    1da8:	44 f0       	brlt	.+16     	; 0x1dba <__vector_7+0xba>
      intConsecutivePresses = 0;                      // reset press counts
    1daa:	10 92 32 09 	sts	0x0932, r1	; 0x800932 <intConsecutivePresses+0x1>
    1dae:	10 92 31 09 	sts	0x0931, r1	; 0x800931 <intConsecutivePresses>
      intConsecutiveNonPresses = 0;
    1db2:	10 92 30 09 	sts	0x0930, r1	; 0x800930 <intConsecutiveNonPresses+0x1>
    1db6:	10 92 2f 09 	sts	0x092F, r1	; 0x80092f <intConsecutiveNonPresses>
    }
    }     
      
    if (PIND & _BV(PD7))
    1dba:	4f 9b       	sbis	0x09, 7	; 9
    1dbc:	2a c0       	rjmp	.+84     	; 0x1e12 <__vector_7+0x112>
    {     
      intConsecutivePresses++;                      // increment counter for number of presses
    1dbe:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <intConsecutivePresses>
    1dc2:	90 91 32 09 	lds	r25, 0x0932	; 0x800932 <intConsecutivePresses+0x1>
    1dc6:	01 96       	adiw	r24, 0x01	; 1
    1dc8:	90 93 32 09 	sts	0x0932, r25	; 0x800932 <intConsecutivePresses+0x1>
    1dcc:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <intConsecutivePresses>
      if(intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES) 
    1dd0:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <intConsecutivePresses>
    1dd4:	90 91 32 09 	lds	r25, 0x0932	; 0x800932 <intConsecutivePresses+0x1>
    1dd8:	18 16       	cp	r1, r24
    1dda:	19 06       	cpc	r1, r25
      {     // if enough presses to constitute a press        
        abilitaPulser('D');
    1ddc:	8c f5       	brge	.+98     	; 0x1e40 <__vector_7+0x140>
    1dde:	84 e4       	ldi	r24, 0x44	; 68
    1de0:	ee d8       	rcall	.-3620   	; 0xfbe <_Z13abilitaPulserc>
        Rele_Abilitazione1(0,7); // chiudi relè
    1de2:	67 e0       	ldi	r22, 0x07	; 7
    1de4:	70 e0       	ldi	r23, 0x00	; 0
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	22 d9       	rcall	.-3516   	; 0x1030 <_Z18Rele_Abilitazione1ii>
        Carburante = "D";
    1dec:	6c e1       	ldi	r22, 0x1C	; 28
    1dee:	75 e0       	ldi	r23, 0x05	; 5
    1df0:	87 ea       	ldi	r24, 0xA7	; 167
    1df2:	98 e0       	ldi	r25, 0x08	; 8
    1df4:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
        StatoAttuale = "GASOLIO";
    1df8:	62 e5       	ldi	r22, 0x52	; 82
    1dfa:	75 e0       	ldi	r23, 0x05	; 5
    1dfc:	83 ee       	ldi	r24, 0xE3	; 227
    1dfe:	98 e0       	ldi	r25, 0x08	; 8
    1e00:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
        //stato_procedura++;
        avanzaStato(10);
    1e04:	6a e0       	ldi	r22, 0x0A	; 10
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	0e 94 bb 03 	call	0x776	; 0x776 <_Z11avanzaStatom>
    1e10:	0f c0       	rjmp	.+30     	; 0x1e30 <__vector_7+0x130>
        intConsecutivePresses = 0;                    // and reset press counts
        intConsecutiveNonPresses = 0;
        }
     }
     else  {            // else if button is not pressed (logic low)
     intConsecutiveNonPresses++;
    1e12:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <intConsecutiveNonPresses>
    1e16:	90 91 30 09 	lds	r25, 0x0930	; 0x800930 <intConsecutiveNonPresses+0x1>
    1e1a:	01 96       	adiw	r24, 0x01	; 1
    1e1c:	90 93 30 09 	sts	0x0930, r25	; 0x800930 <intConsecutiveNonPresses+0x1>
    1e20:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <intConsecutiveNonPresses>
     if(intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    1e24:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <intConsecutiveNonPresses>
    1e28:	90 91 30 09 	lds	r25, 0x0930	; 0x800930 <intConsecutiveNonPresses+0x1>
    1e2c:	02 97       	sbiw	r24, 0x02	; 2
    1e2e:	44 f0       	brlt	.+16     	; 0x1e40 <__vector_7+0x140>
       intConsecutivePresses = 0;                     // reset press counts
    1e30:	10 92 32 09 	sts	0x0932, r1	; 0x800932 <intConsecutivePresses+0x1>
    1e34:	10 92 31 09 	sts	0x0931, r1	; 0x800931 <intConsecutivePresses>
       intConsecutiveNonPresses = 0;
    1e38:	10 92 30 09 	sts	0x0930, r1	; 0x800930 <intConsecutiveNonPresses+0x1>
    1e3c:	10 92 2f 09 	sts	0x092F, r1	; 0x80092f <intConsecutiveNonPresses>
     }
    }
  }               
    1e40:	ff 91       	pop	r31
    1e42:	ef 91       	pop	r30
    1e44:	bf 91       	pop	r27
    1e46:	af 91       	pop	r26
    1e48:	9f 91       	pop	r25
    1e4a:	8f 91       	pop	r24
    1e4c:	7f 91       	pop	r23
    1e4e:	6f 91       	pop	r22
    1e50:	5f 91       	pop	r21
    1e52:	4f 91       	pop	r20
    1e54:	3f 91       	pop	r19
    1e56:	2f 91       	pop	r18
    1e58:	0f 90       	pop	r0
    1e5a:	0b be       	out	0x3b, r0	; 59
    1e5c:	0f 90       	pop	r0
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	0f 90       	pop	r0
    1e62:	1f 90       	pop	r1
    1e64:	18 95       	reti

00001e66 <_GLOBAL__sub_I_intConsecutivePresses>:
    1e66:	8f 92       	push	r8
    1e68:	af 92       	push	r10
    1e6a:	cf 92       	push	r12
    1e6c:	ef 92       	push	r14
    1e6e:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    1e70:	00 e0       	ldi	r16, 0x00	; 0
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	83 e3       	ldi	r24, 0x33	; 51
    1e7a:	99 e0       	ldi	r25, 0x09	; 9
    1e7c:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <_ZN9IPAddressC1Ehhhh>
#define NUM_OF_CONSECUTIVE_NON_PRESSES 2

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    1e80:	64 e8       	ldi	r22, 0x84	; 132
    1e82:	71 e0       	ldi	r23, 0x01	; 1
    1e84:	82 e2       	ldi	r24, 0x22	; 34
    1e86:	99 e0       	ldi	r25, 0x09	; 9
    1e88:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
    1e8c:	64 e8       	ldi	r22, 0x84	; 132
    1e8e:	71 e0       	ldi	r23, 0x01	; 1
    1e90:	88 e2       	ldi	r24, 0x28	; 40
    1e92:	99 e0       	ldi	r25, 0x09	; 9
    1e94:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };       // Buffer dove memorizzo la UID del Badge
uint8_t uidLength;                             // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
uint8_t uidMezzo[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer dove memorizzo la UID del Badge Mezzo
boolean alreadyTimbrata = false;

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
    1e98:	1f 92       	push	r1
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	8f 93       	push	r24
    1e9e:	87 e0       	ldi	r24, 0x07	; 7
    1ea0:	88 2e       	mov	r8, r24
    1ea2:	96 e0       	ldi	r25, 0x06	; 6
    1ea4:	a9 2e       	mov	r10, r25
    1ea6:	25 e0       	ldi	r18, 0x05	; 5
    1ea8:	c2 2e       	mov	r12, r18
    1eaa:	34 e0       	ldi	r19, 0x04	; 4
    1eac:	e3 2e       	mov	r14, r19
    1eae:	21 e0       	ldi	r18, 0x01	; 1
    1eb0:	42 e0       	ldi	r20, 0x02	; 2
    1eb2:	67 e2       	ldi	r22, 0x27	; 39
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	99 e0       	ldi	r25, 0x09	; 9
    1eb8:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,}; 
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);
    1ebc:	43 e0       	ldi	r20, 0x03	; 3
    1ebe:	64 e0       	ldi	r22, 0x04	; 4
    1ec0:	89 ee       	ldi	r24, 0xE9	; 233
    1ec2:	98 e0       	ldi	r25, 0x08	; 8
    1ec4:	9f d3       	rcall	.+1854   	; 0x2604 <_ZN9NFC_PN532C1Ehh>

String StatoAttuale ="START...";
    1ec6:	6d e5       	ldi	r22, 0x5D	; 93
    1ec8:	76 e0       	ldi	r23, 0x06	; 6
    1eca:	83 ee       	ldi	r24, 0xE3	; 227
    1ecc:	98 e0       	ldi	r25, 0x08	; 8
    1ece:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
String strURLAPI = "";
    1ed2:	64 e8       	ldi	r22, 0x84	; 132
    1ed4:	71 e0       	ldi	r23, 0x01	; 1
    1ed6:	8d ed       	ldi	r24, 0xDD	; 221
    1ed8:	98 e0       	ldi	r25, 0x08	; 8
    1eda:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
int tentativiGET = 0;
int lengthHttpResponse = 0;
int tentativi = 0;
int HTTP_len_response = 12;

String RispostaHTTP = "";
    1ede:	64 e8       	ldi	r22, 0x84	; 132
    1ee0:	71 e0       	ldi	r23, 0x01	; 1
    1ee2:	81 ed       	ldi	r24, 0xD1	; 209
    1ee4:	98 e0       	ldi	r25, 0x08	; 8
    1ee6:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
String RaccoltaDati[] = {"","","","","",""};
    1eea:	64 e8       	ldi	r22, 0x84	; 132
    1eec:	71 e0       	ldi	r23, 0x01	; 1
    1eee:	8d ea       	ldi	r24, 0xAD	; 173
    1ef0:	98 e0       	ldi	r25, 0x08	; 8
    1ef2:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
    1ef6:	64 e8       	ldi	r22, 0x84	; 132
    1ef8:	71 e0       	ldi	r23, 0x01	; 1
    1efa:	83 eb       	ldi	r24, 0xB3	; 179
    1efc:	98 e0       	ldi	r25, 0x08	; 8
    1efe:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
    1f02:	64 e8       	ldi	r22, 0x84	; 132
    1f04:	71 e0       	ldi	r23, 0x01	; 1
    1f06:	89 eb       	ldi	r24, 0xB9	; 185
    1f08:	98 e0       	ldi	r25, 0x08	; 8
    1f0a:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
    1f0e:	64 e8       	ldi	r22, 0x84	; 132
    1f10:	71 e0       	ldi	r23, 0x01	; 1
    1f12:	8f eb       	ldi	r24, 0xBF	; 191
    1f14:	98 e0       	ldi	r25, 0x08	; 8
    1f16:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
    1f1a:	64 e8       	ldi	r22, 0x84	; 132
    1f1c:	71 e0       	ldi	r23, 0x01	; 1
    1f1e:	85 ec       	ldi	r24, 0xC5	; 197
    1f20:	98 e0       	ldi	r25, 0x08	; 8
    1f22:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
    1f26:	64 e8       	ldi	r22, 0x84	; 132
    1f28:	71 e0       	ldi	r23, 0x01	; 1
    1f2a:	8b ec       	ldi	r24, 0xCB	; 203
    1f2c:	98 e0       	ldi	r25, 0x08	; 8
    1f2e:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
String Carburante = "X";
    1f32:	69 e7       	ldi	r22, 0x79	; 121
    1f34:	74 e0       	ldi	r23, 0x04	; 4
    1f36:	87 ea       	ldi	r24, 0xA7	; 167
    1f38:	98 e0       	ldi	r25, 0x08	; 8
    1f3a:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
String SequenzaKeypad[] = {"X","X"};
    1f3e:	69 e7       	ldi	r22, 0x79	; 121
    1f40:	74 e0       	ldi	r23, 0x04	; 4
    1f42:	8b e9       	ldi	r24, 0x9B	; 155
    1f44:	98 e0       	ldi	r25, 0x08	; 8
    1f46:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
    1f4a:	69 e7       	ldi	r22, 0x79	; 121
    1f4c:	74 e0       	ldi	r23, 0x04	; 4
    1f4e:	81 ea       	ldi	r24, 0xA1	; 161
    1f50:	98 e0       	ldi	r25, 0x08	; 8
    1f52:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
String Risposta = "";
    1f56:	64 e8       	ldi	r22, 0x84	; 132
    1f58:	71 e0       	ldi	r23, 0x01	; 1
    1f5a:	85 e9       	ldi	r24, 0x95	; 149
    1f5c:	98 e0       	ldi	r25, 0x08	; 8
    1f5e:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
String Messaggio = "";
    1f62:	64 e8       	ldi	r22, 0x84	; 132
    1f64:	71 e0       	ldi	r23, 0x01	; 1
    1f66:	8f e8       	ldi	r24, 0x8F	; 143
    1f68:	98 e0       	ldi	r25, 0x08	; 8
    1f6a:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
String righeDisplay[] = {"X","X","X","X"};
    1f6e:	69 e7       	ldi	r22, 0x79	; 121
    1f70:	74 e0       	ldi	r23, 0x04	; 4
    1f72:	87 e7       	ldi	r24, 0x77	; 119
    1f74:	98 e0       	ldi	r25, 0x08	; 8
    1f76:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
    1f7a:	69 e7       	ldi	r22, 0x79	; 121
    1f7c:	74 e0       	ldi	r23, 0x04	; 4
    1f7e:	8d e7       	ldi	r24, 0x7D	; 125
    1f80:	98 e0       	ldi	r25, 0x08	; 8
    1f82:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
    1f86:	69 e7       	ldi	r22, 0x79	; 121
    1f88:	74 e0       	ldi	r23, 0x04	; 4
    1f8a:	83 e8       	ldi	r24, 0x83	; 131
    1f8c:	98 e0       	ldi	r25, 0x08	; 8
    1f8e:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
    1f92:	69 e7       	ldi	r22, 0x79	; 121
    1f94:	74 e0       	ldi	r23, 0x04	; 4
    1f96:	89 e8       	ldi	r24, 0x89	; 137
    1f98:	98 e0       	ldi	r25, 0x08	; 8
    1f9a:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
/********************************************************************************************/
// IPAddress servizio(192, 168, 5, 9);    // IP Macchina dove risiede il servizio TCP

//byte ipCCEC[] = { 192, 168, 0, 50 };
  
IPAddress ipCCEC(192, 168, 0, 50);
    1f9e:	02 e3       	ldi	r16, 0x32	; 50
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	48 ea       	ldi	r20, 0xA8	; 168
    1fa4:	60 ec       	ldi	r22, 0xC0	; 192
    1fa6:	81 e7       	ldi	r24, 0x71	; 113
    1fa8:	98 e0       	ldi	r25, 0x08	; 8
    1faa:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <_ZN9IPAddressC1Ehhhh>
IPAddress myDns(192,168,1, 21); // DNS
    1fae:	05 e1       	ldi	r16, 0x15	; 21
    1fb0:	21 e0       	ldi	r18, 0x01	; 1
    1fb2:	48 ea       	ldi	r20, 0xA8	; 168
    1fb4:	60 ec       	ldi	r22, 0xC0	; 192
    1fb6:	8b e6       	ldi	r24, 0x6B	; 107
    1fb8:	98 e0       	ldi	r25, 0x08	; 8
    1fba:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <_ZN9IPAddressC1Ehhhh>
IPAddress gateway(192, 168, 0, 1); // GATEWAY
    1fbe:	01 e0       	ldi	r16, 0x01	; 1
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	48 ea       	ldi	r20, 0xA8	; 168
    1fc4:	60 ec       	ldi	r22, 0xC0	; 192
    1fc6:	85 e6       	ldi	r24, 0x65	; 101
    1fc8:	98 e0       	ldi	r25, 0x08	; 8
    1fca:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <_ZN9IPAddressC1Ehhhh>
IPAddress subnet(255, 255, 0, 0); // SUBNET
    1fce:	00 e0       	ldi	r16, 0x00	; 0
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	4f ef       	ldi	r20, 0xFF	; 255
    1fd4:	6f ef       	ldi	r22, 0xFF	; 255
    1fd6:	8f e5       	ldi	r24, 0x5F	; 95
    1fd8:	98 e0       	ldi	r25, 0x08	; 8
    1fda:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <_ZN9IPAddressC1Ehhhh>

char serverATE[]  = "wbpate-test.dipvvf.it";
char serverGAC[]  = "gacweb-test.dipvvf.it";
char serverREST[] = "geoserver.sa.dipvvf.it";

EthernetClient clientLOCAL;
    1fde:	82 e5       	ldi	r24, 0x52	; 82
    1fe0:	98 e0       	ldi	r25, 0x08	; 8
    1fe2:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <_ZN14EthernetClientC1Ev>
EthernetClient clientATE;
    1fe6:	85 e4       	ldi	r24, 0x45	; 69
    1fe8:	98 e0       	ldi	r25, 0x08	; 8
    1fea:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <_ZN14EthernetClientC1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};

DS3231M_Class DS3231M;  
    1fee:	89 e3       	ldi	r24, 0x39	; 57
    1ff0:	98 e0       	ldi	r25, 0x08	; 8
    1ff2:	fd d7       	rcall	.+4090   	; 0x2fee <_ZN13DS3231M_ClassC1Ev>
const uint8_t SPRINTF_BUFFER_SIZE =     32;  
char          inputBuffer[SPRINTF_BUFFER_SIZE];  
unsigned long secs;                            // store the seconds value
unsigned long UltimoPassaggioStato = 0;        // Timer Stati Procedura
unsigned long Timer = 0;                       // Timer
DateTime nowTimer;
    1ff4:	40 e0       	ldi	r20, 0x00	; 0
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	ba 01       	movw	r22, r20
    1ffa:	87 e2       	ldi	r24, 0x27	; 39
    1ffc:	98 e0       	ldi	r25, 0x08	; 8
    1ffe:	8b d6       	rcall	.+3350   	; 0x2d16 <_ZN8DateTimeC1Em>
const byte COLS = 4; //four columns

byte premuto = 0;
byte prolungato = 0;
char *customKey;
String InputKey = "";
    2000:	64 e8       	ldi	r22, 0x84	; 132
    2002:	71 e0       	ldi	r23, 0x01	; 1
    2004:	81 e2       	ldi	r24, 0x21	; 33
    2006:	98 e0       	ldi	r25, 0x08	; 8
    2008:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
String TARGA = "";
    200c:	64 e8       	ldi	r22, 0x84	; 132
    200e:	71 e0       	ldi	r23, 0x01	; 1
    2010:	8b e1       	ldi	r24, 0x1B	; 27
    2012:	98 e0       	ldi	r25, 0x08	; 8
    2014:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','.'}
};

PCA9534 gpio;
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	88 e1       	ldi	r24, 0x18	; 24
    201e:	98 e0       	ldi	r25, 0x08	; 8
       intConsecutivePresses = 0;                     // reset press counts
       intConsecutiveNonPresses = 0;
     }
    }
  }               
    2020:	0f 91       	pop	r16
    2022:	ef 90       	pop	r14
    2024:	cf 90       	pop	r12
    2026:	af 90       	pop	r10
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','.'}
};

PCA9534 gpio;
    2028:	8f 90       	pop	r8
    202a:	0f c2       	rjmp	.+1054   	; 0x244a <_ZN7PCA9534C1Ev>

0000202c <_GLOBAL__sub_D_intConsecutivePresses>:
       intConsecutivePresses = 0;                     // reset press counts
       intConsecutiveNonPresses = 0;
     }
    }
  }               
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29

byte premuto = 0;
byte prolungato = 0;
char *customKey;
String InputKey = "";
String TARGA = "";
    2030:	8b e1       	ldi	r24, 0x1B	; 27
    2032:	98 e0       	ldi	r25, 0x08	; 8
    2034:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
const byte COLS = 4; //four columns

byte premuto = 0;
byte prolungato = 0;
char *customKey;
String InputKey = "";
    2038:	81 e2       	ldi	r24, 0x21	; 33
    203a:	98 e0       	ldi	r25, 0x08	; 8
    203c:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
EthernetClient clientLOCAL;
EthernetClient clientATE;

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};

DS3231M_Class DS3231M;  
    2040:	89 e3       	ldi	r24, 0x39	; 57
    2042:	98 e0       	ldi	r25, 0x08	; 8
    2044:	db d7       	rcall	.+4022   	; 0x2ffc <_ZN13DS3231M_ClassD1Ev>
String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String SequenzaKeypad[] = {"X","X"};
String Risposta = "";
String Messaggio = "";
String righeDisplay[] = {"X","X","X","X"};
    2046:	89 e8       	ldi	r24, 0x89	; 137
    2048:	98 e0       	ldi	r25, 0x08	; 8
    204a:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    204e:	83 e8       	ldi	r24, 0x83	; 131
    2050:	98 e0       	ldi	r25, 0x08	; 8
    2052:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    2056:	8d e7       	ldi	r24, 0x7D	; 125
    2058:	98 e0       	ldi	r25, 0x08	; 8
    205a:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    205e:	87 e7       	ldi	r24, 0x77	; 119
    2060:	98 e0       	ldi	r25, 0x08	; 8
    2062:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
String RispostaHTTP = "";
String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String SequenzaKeypad[] = {"X","X"};
String Risposta = "";
String Messaggio = "";
    2066:	8f e8       	ldi	r24, 0x8F	; 143
    2068:	98 e0       	ldi	r25, 0x08	; 8
    206a:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>

String RispostaHTTP = "";
String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String SequenzaKeypad[] = {"X","X"};
String Risposta = "";
    206e:	85 e9       	ldi	r24, 0x95	; 149
    2070:	98 e0       	ldi	r25, 0x08	; 8
    2072:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
int HTTP_len_response = 12;

String RispostaHTTP = "";
String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String SequenzaKeypad[] = {"X","X"};
    2076:	81 ea       	ldi	r24, 0xA1	; 161
    2078:	98 e0       	ldi	r25, 0x08	; 8
    207a:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    207e:	8b e9       	ldi	r24, 0x9B	; 155
    2080:	98 e0       	ldi	r25, 0x08	; 8
    2082:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
int tentativi = 0;
int HTTP_len_response = 12;

String RispostaHTTP = "";
String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
    2086:	87 ea       	ldi	r24, 0xA7	; 167
    2088:	98 e0       	ldi	r25, 0x08	; 8
    208a:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
int lengthHttpResponse = 0;
int tentativi = 0;
int HTTP_len_response = 12;

String RispostaHTTP = "";
String RaccoltaDati[] = {"","","","","",""};
    208e:	c1 ed       	ldi	r28, 0xD1	; 209
    2090:	d8 e0       	ldi	r29, 0x08	; 8
    2092:	26 97       	sbiw	r28, 0x06	; 6
    2094:	ce 01       	movw	r24, r28
    2096:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    209a:	88 e0       	ldi	r24, 0x08	; 8
    209c:	cd 3a       	cpi	r28, 0xAD	; 173
    209e:	d8 07       	cpc	r29, r24
    20a0:	c1 f7       	brne	.-16     	; 0x2092 <_GLOBAL__sub_D_intConsecutivePresses+0x66>
int tentativiGET = 0;
int lengthHttpResponse = 0;
int tentativi = 0;
int HTTP_len_response = 12;

String RispostaHTTP = "";
    20a2:	81 ed       	ldi	r24, 0xD1	; 209
    20a4:	98 e0       	ldi	r25, 0x08	; 8
    20a6:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,}; 
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale ="START...";
String strURLAPI = "";
    20aa:	8d ed       	ldi	r24, 0xDD	; 221
    20ac:	98 e0       	ldi	r25, 0x08	; 8
    20ae:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,}; 
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale ="START...";
    20b2:	83 ee       	ldi	r24, 0xE3	; 227
    20b4:	98 e0       	ldi	r25, 0x08	; 8
    20b6:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
#define NUM_OF_CONSECUTIVE_NON_PRESSES 2

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    20ba:	88 e2       	ldi	r24, 0x28	; 40
    20bc:	99 e0       	ldi	r25, 0x09	; 9
    20be:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    20c2:	82 e2       	ldi	r24, 0x22	; 34
    20c4:	99 e0       	ldi	r25, 0x09	; 9
       intConsecutivePresses = 0;                     // reset press counts
       intConsecutiveNonPresses = 0;
     }
    }
  }               
    20c6:	df 91       	pop	r29
    20c8:	cf 91       	pop	r28
#define NUM_OF_CONSECUTIVE_NON_PRESSES 2

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    20ca:	0c 94 19 30 	jmp	0x6032	; 0x6032 <_ZN6StringD1Ev>

000020ce <setup>:
  printTab(1);
}



void setup() {
    20ce:	cf 92       	push	r12
    20d0:	df 92       	push	r13
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <setup+0x12>
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <setup+0x14>
    20e2:	00 d0       	rcall	.+0      	; 0x20e4 <setup+0x16>
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
/*********************************************************************************************/
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
    20e8:	3c 9a       	sbi	0x07, 4	; 7
    20ea:	8f e1       	ldi	r24, 0x1F	; 31
    20ec:	9e e4       	ldi	r25, 0x4E	; 78
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <setup+0x20>
    20f2:	00 c0       	rjmp	.+0      	; 0x20f4 <setup+0x26>
    20f4:	00 00       	nop

void setup() {

   initSS_ETH();
   _delay_ms(5);
   disable_ETH();
    20f6:	0e 94 90 01 	call	0x320	; 0x320 <_ZL11disable_ETHv>
   
   // Serial.begin(9600);
   Serial.println(" inizio Setup ......");
    20fa:	66 e6       	ldi	r22, 0x66	; 102
    20fc:	76 e0       	ldi	r23, 0x06	; 6
    20fe:	88 e8       	ldi	r24, 0x88	; 136
    2100:	9a e0       	ldi	r25, 0x0A	; 10
    2102:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN5Print7printlnEPKc>
 
  /*******************************************************************************************/
  DDRC |= (1 << BUZZER); // set BUZZER (PC6) for output
    2106:	3e 9a       	sbi	0x07, 6	; 7
  DDRC |= (1 << RELE1);  // Rele1
    2108:	3f 9a       	sbi	0x07, 7	; 7
  DDRA |= (1 << RELE2);  // Rele2   // set PA7 e PC7 come output 
    210a:	0f 9a       	sbi	0x01, 7	; 1
    210c:	8f e3       	ldi	r24, 0x3F	; 63
    210e:	9c e9       	ldi	r25, 0x9C	; 156
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <setup+0x42>
    2114:	00 c0       	rjmp	.+0      	; 0x2116 <setup+0x48>
    2116:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTC,RELE1); // Apri RELE1
    2118:	47 9a       	sbi	0x08, 7	; 8
    211a:	8f e3       	ldi	r24, 0x3F	; 63
    211c:	9c e9       	ldi	r25, 0x9C	; 156
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <setup+0x50>
    2122:	00 c0       	rjmp	.+0      	; 0x2124 <setup+0x56>
    2124:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTA,RELE2); // Apri RELE2
    2126:	17 9a       	sbi	0x02, 7	; 2
  printLine(); 
    2128:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
  
  /***************************LCD******************************/
  
  lcd.begin(20,4);         // Inizializza display LCD 20x4 e accendi e spegni 2 volte
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	44 e0       	ldi	r20, 0x04	; 4
    2130:	64 e1       	ldi	r22, 0x14	; 20
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	99 e0       	ldi	r25, 0x09	; 9
    2136:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <_ZN17LiquidCrystal_I2C5beginEhhh>

  // ------- 2 blinks -------------
  for(int i = 0; i< 2; i++)
  {
    lcd.backlight();
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	99 e0       	ldi	r25, 0x09	; 9
    213e:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <_ZN3LCD9backlightEv>
    2142:	9f ef       	ldi	r25, 0xFF	; 255
    2144:	24 e3       	ldi	r18, 0x34	; 52
    2146:	8c e0       	ldi	r24, 0x0C	; 12
    2148:	91 50       	subi	r25, 0x01	; 1
    214a:	20 40       	sbci	r18, 0x00	; 0
    214c:	80 40       	sbci	r24, 0x00	; 0
    214e:	e1 f7       	brne	.-8      	; 0x2148 <setup+0x7a>
    2150:	00 c0       	rjmp	.+0      	; 0x2152 <setup+0x84>
    2152:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	99 e0       	ldi	r25, 0x09	; 9
    2158:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <_ZN3LCD11noBacklightEv>
    215c:	9f ef       	ldi	r25, 0xFF	; 255
    215e:	24 e3       	ldi	r18, 0x34	; 52
    2160:	8c e0       	ldi	r24, 0x0C	; 12
    2162:	91 50       	subi	r25, 0x01	; 1
    2164:	20 40       	sbci	r18, 0x00	; 0
    2166:	80 40       	sbci	r24, 0x00	; 0
    2168:	e1 f7       	brne	.-8      	; 0x2162 <setup+0x94>
    216a:	00 c0       	rjmp	.+0      	; 0x216c <setup+0x9e>
    216c:	00 00       	nop
  lcd.begin(20,4);         // Inizializza display LCD 20x4 e accendi e spegni 2 volte

  // ------- 2 blinks -------------
  for(int i = 0; i< 2; i++)
  {
    lcd.backlight();
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	99 e0       	ldi	r25, 0x09	; 9
    2172:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <_ZN3LCD9backlightEv>
    2176:	9f ef       	ldi	r25, 0xFF	; 255
    2178:	24 e3       	ldi	r18, 0x34	; 52
    217a:	8c e0       	ldi	r24, 0x0C	; 12
    217c:	91 50       	subi	r25, 0x01	; 1
    217e:	20 40       	sbci	r18, 0x00	; 0
    2180:	80 40       	sbci	r24, 0x00	; 0
    2182:	e1 f7       	brne	.-8      	; 0x217c <setup+0xae>
    2184:	00 c0       	rjmp	.+0      	; 0x2186 <setup+0xb8>
    2186:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	99 e0       	ldi	r25, 0x09	; 9
    218c:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <_ZN3LCD11noBacklightEv>
    2190:	9f ef       	ldi	r25, 0xFF	; 255
    2192:	24 e3       	ldi	r18, 0x34	; 52
    2194:	8c e0       	ldi	r24, 0x0C	; 12
    2196:	91 50       	subi	r25, 0x01	; 1
    2198:	20 40       	sbci	r18, 0x00	; 0
    219a:	80 40       	sbci	r24, 0x00	; 0
    219c:	e1 f7       	brne	.-8      	; 0x2196 <setup+0xc8>
    219e:	00 c0       	rjmp	.+0      	; 0x21a0 <setup+0xd2>
    21a0:	00 00       	nop
    _delay_ms(250);
  }

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
    21a2:	4d e5       	ldi	r20, 0x5D	; 93
    21a4:	51 e0       	ldi	r21, 0x01	; 1
    21a6:	61 e0       	ldi	r22, 0x01	; 1
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	99 e0       	ldi	r25, 0x09	; 9
    21ac:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <_ZN3LCD10createCharEhPh>
    21b0:	9f ef       	ldi	r25, 0xFF	; 255
    21b2:	29 ef       	ldi	r18, 0xF9	; 249
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	91 50       	subi	r25, 0x01	; 1
    21b8:	20 40       	sbci	r18, 0x00	; 0
    21ba:	80 40       	sbci	r24, 0x00	; 0
    21bc:	e1 f7       	brne	.-8      	; 0x21b6 <setup+0xe8>
    21be:	00 c0       	rjmp	.+0      	; 0x21c0 <setup+0xf2>
    21c0:	00 00       	nop
  _delay_ms(20);
  lcd.backlight();
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	99 e0       	ldi	r25, 0x09	; 9
    21c6:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <_ZN3LCD9backlightEv>
    21ca:	07 e7       	ldi	r16, 0x77	; 119
    21cc:	18 e0       	ldi	r17, 0x08	; 8

  for (int r=0;r<4;r++)
    righeDisplay[r]="";
    21ce:	64 e8       	ldi	r22, 0x84	; 132
    21d0:	71 e0       	ldi	r23, 0x01	; 1
    21d2:	c8 01       	movw	r24, r16
    21d4:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    21d8:	0a 5f       	subi	r16, 0xFA	; 250
    21da:	1f 4f       	sbci	r17, 0xFF	; 255

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
  _delay_ms(20);
  lcd.backlight();

  for (int r=0;r<4;r++)
    21dc:	98 e0       	ldi	r25, 0x08	; 8
    21de:	0f 38       	cpi	r16, 0x8F	; 143
    21e0:	19 07       	cpc	r17, r25
    21e2:	a9 f7       	brne	.-22     	; 0x21ce <setup+0x100>
    righeDisplay[r]="";
  
   printLine();
    21e4:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
   
  /***************************NFC*************************/ 
  
  nfc.begin(); // Inizializza Modulo NFC 
    21e8:	89 ee       	ldi	r24, 0xE9	; 233
    21ea:	98 e0       	ldi	r25, 0x08	; 8
    21ec:	1c d2       	rcall	.+1080   	; 0x2626 <_ZN9NFC_PN5325beginEv>
    21ee:	2f ef       	ldi	r18, 0xFF	; 255
    21f0:	80 e7       	ldi	r24, 0x70	; 112
    21f2:	92 e0       	ldi	r25, 0x02	; 2
    21f4:	21 50       	subi	r18, 0x01	; 1
    21f6:	80 40       	sbci	r24, 0x00	; 0
    21f8:	90 40       	sbci	r25, 0x00	; 0
    21fa:	e1 f7       	brne	.-8      	; 0x21f4 <setup+0x126>
    21fc:	00 c0       	rjmp	.+0      	; 0x21fe <setup+0x130>
    21fe:	00 00       	nop
  
  _delay_ms(50);

  uint32_t versiondata = nfc.getFirmwareVersion();
    2200:	89 ee       	ldi	r24, 0xE9	; 233
    2202:	98 e0       	ldi	r25, 0x08	; 8
    2204:	ac d3       	rcall	.+1880   	; 0x295e <_ZN9NFC_PN53218getFirmwareVersionEv>
    2206:	6b 01       	movw	r12, r22
    2208:	7c 01       	movw	r14, r24
  if (! versiondata) {
    220a:	67 2b       	or	r22, r23
    220c:	68 2b       	or	r22, r24
    220e:	69 2b       	or	r22, r25
    2210:	69 f5       	brne	.+90     	; 0x226c <setup+0x19e>
    Serial.print("Modulo PN532 non trovato");
    2212:	6b e7       	ldi	r22, 0x7B	; 123
    2214:	76 e0       	ldi	r23, 0x06	; 6
    2216:	88 e8       	ldi	r24, 0x88	; 136
    2218:	9a e0       	ldi	r25, 0x0A	; 10
    221a:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <_ZN5Print5printEPKc>
    lcd.backlight();
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	99 e0       	ldi	r25, 0x09	; 9
    2222:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <_ZN3LCD9backlightEv>
    2226:	2f ef       	ldi	r18, 0xFF	; 255
    2228:	84 e3       	ldi	r24, 0x34	; 52
    222a:	9c e0       	ldi	r25, 0x0C	; 12
    222c:	21 50       	subi	r18, 0x01	; 1
    222e:	80 40       	sbci	r24, 0x00	; 0
    2230:	90 40       	sbci	r25, 0x00	; 0
    2232:	e1 f7       	brne	.-8      	; 0x222c <setup+0x15e>
    2234:	00 c0       	rjmp	.+0      	; 0x2236 <setup+0x168>
    2236:	00 00       	nop
    _delay_ms(250);
    lcd.clear();
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	99 e0       	ldi	r25, 0x09	; 9
    223c:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_ZN3LCD5clearEv>
    lcd.print("Modulo PN532 non trovato ");    
    2240:	64 e9       	ldi	r22, 0x94	; 148
    2242:	76 e0       	ldi	r23, 0x06	; 6
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	99 e0       	ldi	r25, 0x09	; 9
    2248:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <_ZN5Print5printEPKc>
    224c:	2f ef       	ldi	r18, 0xFF	; 255
    224e:	87 ea       	ldi	r24, 0xA7	; 167
    2250:	91 e6       	ldi	r25, 0x61	; 97
    2252:	21 50       	subi	r18, 0x01	; 1
    2254:	80 40       	sbci	r24, 0x00	; 0
    2256:	90 40       	sbci	r25, 0x00	; 0
    2258:	e1 f7       	brne	.-8      	; 0x2252 <setup+0x184>
    225a:	00 c0       	rjmp	.+0      	; 0x225c <setup+0x18e>
    225c:	00 00       	nop
    _delay_ms(2000);                            
    StatoAttuale  = " CHIAMA ASSISTENZA";   
    225e:	6e ea       	ldi	r22, 0xAE	; 174
    2260:	76 e0       	ldi	r23, 0x06	; 6
    2262:	83 ee       	ldi	r24, 0xE3	; 227
    2264:	98 e0       	ldi	r25, 0x08	; 8
    2266:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    226a:	06 c0       	rjmp	.+12     	; 0x2278 <setup+0x1aa>
    //while (1); // halt  // Aspetta per sempre
  } else {Serial.println("Modulo NFC OK ......");}
    226c:	61 ec       	ldi	r22, 0xC1	; 193
    226e:	76 e0       	ldi	r23, 0x06	; 6
    2270:	88 e8       	ldi	r24, 0x88	; 136
    2272:	9a e0       	ldi	r25, 0x0A	; 10
    2274:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN5Print7printlnEPKc>
  
  Serial.print("Found chip PN5"); Serial.println((versiondata>>24) & 0xFF, HEX);
    2278:	66 ed       	ldi	r22, 0xD6	; 214
    227a:	76 e0       	ldi	r23, 0x06	; 6
    227c:	88 e8       	ldi	r24, 0x88	; 136
    227e:	9a e0       	ldi	r25, 0x0A	; 10
    2280:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <_ZN5Print5printEPKc>
    2284:	4f 2d       	mov	r20, r15
    2286:	55 27       	eor	r21, r21
    2288:	66 27       	eor	r22, r22
    228a:	77 27       	eor	r23, r23
    228c:	20 e1       	ldi	r18, 0x10	; 16
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	88 e8       	ldi	r24, 0x88	; 136
    2292:	9a e0       	ldi	r25, 0x0A	; 10
    2294:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <_ZN5Print7printlnEmi>
  Serial.print("Firmware ver. "); Serial.print((versiondata>>16) & 0xFF, DEC);
    2298:	65 ee       	ldi	r22, 0xE5	; 229
    229a:	76 e0       	ldi	r23, 0x06	; 6
    229c:	88 e8       	ldi	r24, 0x88	; 136
    229e:	9a e0       	ldi	r25, 0x0A	; 10
    22a0:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <_ZN5Print5printEPKc>
    22a4:	4e 2d       	mov	r20, r14
    22a6:	50 e0       	ldi	r21, 0x00	; 0
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	70 e0       	ldi	r23, 0x00	; 0
    22ac:	2a e0       	ldi	r18, 0x0A	; 10
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	88 e8       	ldi	r24, 0x88	; 136
    22b2:	9a e0       	ldi	r25, 0x0A	; 10
    22b4:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <_ZN5Print5printEmi>
  Serial.print('.'); Serial.println((versiondata>>8) & 0xFF, DEC);
    22b8:	6e e2       	ldi	r22, 0x2E	; 46
    22ba:	88 e8       	ldi	r24, 0x88	; 136
    22bc:	9a e0       	ldi	r25, 0x0A	; 10
    22be:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN5Print5printEc>
    22c2:	4d 2d       	mov	r20, r13
    22c4:	50 e0       	ldi	r21, 0x00	; 0
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	70 e0       	ldi	r23, 0x00	; 0
    22ca:	2a e0       	ldi	r18, 0x0A	; 10
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	88 e8       	ldi	r24, 0x88	; 136
    22d0:	9a e0       	ldi	r25, 0x0A	; 10
    22d2:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <_ZN5Print7printlnEmi>

  nfc.setPassiveActivationRetries(0xFF);   
    22d6:	6f ef       	ldi	r22, 0xFF	; 255
    22d8:	89 ee       	ldi	r24, 0xE9	; 233
    22da:	98 e0       	ldi	r25, 0x08	; 8
    22dc:	b6 d3       	rcall	.+1900   	; 0x2a4a <_ZN9NFC_PN53227setPassiveActivationRetriesEh>
  nfc.SAMConfig();
    22de:	89 ee       	ldi	r24, 0xE9	; 233
    22e0:	98 e0       	ldi	r25, 0x08	; 8
    22e2:	85 d3       	rcall	.+1802   	; 0x29ee <_ZN9NFC_PN5329SAMConfigEv>
    22e4:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
  printLine();
    22e8:	40 ea       	ldi	r20, 0xA0	; 160
  /***************************SPY FLASH*************************/  
  
  /*************************** RTC ************************/
  while (!DS3231M.begin()) {                                                 
    22ea:	56 e8       	ldi	r21, 0x86	; 134
    22ec:	61 e0       	ldi	r22, 0x01	; 1
    22ee:	70 e0       	ldi	r23, 0x00	; 0
    22f0:	89 e3       	ldi	r24, 0x39	; 57
    22f2:	98 e0       	ldi	r25, 0x08	; 8
    22f4:	c6 d6       	rcall	.+3468   	; 0x3082 <_ZN13DS3231M_Class5beginEm>
    22f6:	81 11       	cpse	r24, r1
    22f8:	10 c0       	rjmp	.+32     	; 0x231a <setup+0x24c>
    22fa:	69 ed       	ldi	r22, 0xD9	; 217
    Serial.println(F("Unable to find DS3231MM. Checking again in 3s."));     
    22fc:	71 e0       	ldi	r23, 0x01	; 1
    22fe:	88 e8       	ldi	r24, 0x88	; 136
    2300:	9a e0       	ldi	r25, 0x0A	; 10
    2302:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2306:	2f ef       	ldi	r18, 0xFF	; 255
    2308:	83 ed       	ldi	r24, 0xD3	; 211
    230a:	90 e3       	ldi	r25, 0x30	; 48
    230c:	21 50       	subi	r18, 0x01	; 1
    230e:	80 40       	sbci	r24, 0x00	; 0
    2310:	90 40       	sbci	r25, 0x00	; 0
    2312:	e1 f7       	brne	.-8      	; 0x230c <setup+0x23e>
    2314:	00 c0       	rjmp	.+0      	; 0x2316 <setup+0x248>
    2316:	00 00       	nop
    2318:	e7 cf       	rjmp	.-50     	; 0x22e8 <setup+0x21a>
    231a:	2f ef       	ldi	r18, 0xFF	; 255
    231c:	80 e7       	ldi	r24, 0x70	; 112
    231e:	92 e0       	ldi	r25, 0x02	; 2
    2320:	21 50       	subi	r18, 0x01	; 1
    2322:	80 40       	sbci	r24, 0x00	; 0
    2324:	90 40       	sbci	r25, 0x00	; 0
    2326:	e1 f7       	brne	.-8      	; 0x2320 <setup+0x252>
    2328:	00 c0       	rjmp	.+0      	; 0x232a <setup+0x25c>
    232a:	00 00       	nop
    232c:	64 ec       	ldi	r22, 0xC4	; 196
    _delay_ms(1000);                                                         
  } 
  _delay_ms(50);

  Serial.println(F("DS3231M initialized."));                                 
    232e:	71 e0       	ldi	r23, 0x01	; 1
    2330:	88 e8       	ldi	r24, 0x88	; 136
    2332:	9a e0       	ldi	r25, 0x0A	; 10
    2334:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2338:	89 e3       	ldi	r24, 0x39	; 57
  DS3231M.adjust();
    233a:	98 e0       	ldi	r25, 0x08	; 8
    233c:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZN13DS3231M_Class6adjustEv>
    2340:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
  printLine();
    2344:	64 ef       	ldi	r22, 0xF4	; 244
  /*************************** POTENZIOMETRI ************************/
  Serial.println("Inizializzo POTENZIOMETRI per livello pulser.......");
    2346:	76 e0       	ldi	r23, 0x06	; 6
    2348:	88 e8       	ldi	r24, 0x88	; 136
    234a:	9a e0       	ldi	r25, 0x0A	; 10
    234c:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN5Print7printlnEPKc>
    2350:	82 e3       	ldi	r24, 0x32	; 50
  
  Wire.begin(); // join i2c bus (address optional for master) 
    2352:	9a e0       	ldi	r25, 0x0A	; 10
    2354:	0e 94 9d 2a 	call	0x553a	; 0x553a <_ZN7TwoWire5beginEv>
    2358:	68 e2       	ldi	r22, 0x28	; 40
  
  Wire.beginTransmission(0x28);  // (0x50) POTENZIOMETRO U11
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	82 e3       	ldi	r24, 0x32	; 50
    235e:	9a e0       	ldi	r25, 0x0A	; 10
    2360:	0e 94 ba 2a 	call	0x5574	; 0x5574 <_ZN7TwoWire17beginTransmissionEi>
    2364:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    2366:	82 e3       	ldi	r24, 0x32	; 50
    2368:	9a e0       	ldi	r25, 0x0A	; 10
    236a:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
    236e:	62 e3       	ldi	r22, 0x32	; 50
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2370:	82 e3       	ldi	r24, 0x32	; 50
    2372:	9a e0       	ldi	r25, 0x0A	; 10
    2374:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
    2378:	82 e3       	ldi	r24, 0x32	; 50
  Wire.write(50);                // Valore del potenziomentro circa 6 volt
  Wire.endTransmission(); 
    237a:	9a e0       	ldi	r25, 0x0A	; 10
    237c:	0e 94 31 2b 	call	0x5662	; 0x5662 <_ZN7TwoWire15endTransmissionEv>
    2380:	2f ef       	ldi	r18, 0xFF	; 255
    2382:	80 e7       	ldi	r24, 0x70	; 112
    2384:	92 e0       	ldi	r25, 0x02	; 2
    2386:	21 50       	subi	r18, 0x01	; 1
    2388:	80 40       	sbci	r24, 0x00	; 0
    238a:	90 40       	sbci	r25, 0x00	; 0
    238c:	e1 f7       	brne	.-8      	; 0x2386 <setup+0x2b8>
    238e:	00 c0       	rjmp	.+0      	; 0x2390 <setup+0x2c2>
    2390:	00 00       	nop
    2392:	62 e5       	ldi	r22, 0x52	; 82
   
   _delay_ms(50);     
   
   Wire.beginTransmission(0x52);  // (0x52) POTENZIOMETRO U12
    2394:	70 e0       	ldi	r23, 0x00	; 0
    2396:	82 e3       	ldi	r24, 0x32	; 50
    2398:	9a e0       	ldi	r25, 0x0A	; 10
    239a:	0e 94 ba 2a 	call	0x5574	; 0x5574 <_ZN7TwoWire17beginTransmissionEi>
    239e:	60 e0       	ldi	r22, 0x00	; 0
   Wire.write(byte(0x00));        // Wiper Register
    23a0:	82 e3       	ldi	r24, 0x32	; 50
    23a2:	9a e0       	ldi	r25, 0x0A	; 10
    23a4:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
    23a8:	62 e3       	ldi	r22, 0x32	; 50
    23aa:	82 e3       	ldi	r24, 0x32	; 50
    23ac:	9a e0       	ldi	r25, 0x0A	; 10
    23ae:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
    23b2:	82 e3       	ldi	r24, 0x32	; 50
   Wire.write(50);                // Valore del potenziomentro circa 6 volt
   Wire.endTransmission(); 
    23b4:	9a e0       	ldi	r25, 0x0A	; 10
    23b6:	0e 94 31 2b 	call	0x5662	; 0x5662 <_ZN7TwoWire15endTransmissionEv>
    23ba:	82 e3       	ldi	r24, 0x32	; 50
  
   Wire.end();
    23bc:	9a e0       	ldi	r25, 0x0A	; 10
    23be:	0e 94 ac 2a 	call	0x5558	; 0x5558 <_ZN7TwoWire3endEv>
    23c2:	68 e2       	ldi	r22, 0x28	; 40

   Serial.println("POTENZIOMETRI OK");
    23c4:	77 e0       	ldi	r23, 0x07	; 7
    23c6:	88 e8       	ldi	r24, 0x88	; 136
    23c8:	9a e0       	ldi	r25, 0x0A	; 10
    23ca:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN5Print7printlnEPKc>
    23ce:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
   printLine();
  /*************************KEYPAD*********************/
   gpio.begin();
    23d2:	60 e2       	ldi	r22, 0x20	; 32
    23d4:	88 e1       	ldi	r24, 0x18	; 24
    23d6:	98 e0       	ldi	r25, 0x08	; 8
    23d8:	3d d0       	rcall	.+122    	; 0x2454 <_ZN7PCA95345beginEh>
   
   gpio.setporteIoExp(0xC3,0x00,0x3C); // OPREG,INVREG,CONFREG
    23da:	2c e3       	ldi	r18, 0x3C	; 60
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	63 ec       	ldi	r22, 0xC3	; 195
    23e0:	88 e1       	ldi	r24, 0x18	; 24
    23e2:	98 e0       	ldi	r25, 0x08	; 8
    23e4:	3d d0       	rcall	.+122    	; 0x2460 <_ZN7PCA953413setporteIoExpEhhh>
    23e6:	8e ef       	ldi	r24, 0xFE	; 254
  /**************** SETTING INIZIALI ******************/      
  
  stato_procedura = - 2; // set stato di partenza
    23e8:	9f ef       	ldi	r25, 0xFF	; 255
    23ea:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <stato_procedura+0x1>
    23ee:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <stato_procedura>
    23f2:	69 e3       	ldi	r22, 0x39	; 57
  
  StatoAttuale = "Starting ...."; 
    23f4:	77 e0       	ldi	r23, 0x07	; 7
    23f6:	83 ee       	ldi	r24, 0xE3	; 227
    23f8:	98 e0       	ldi	r25, 0x08	; 8
    23fa:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN6StringaSEPKc>
    23fe:	67 e4       	ldi	r22, 0x47	; 71
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2400:	77 e0       	ldi	r23, 0x07	; 7
    2402:	ce 01       	movw	r24, r28
    2404:	01 96       	adiw	r24, 0x01	; 1
    2406:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
    240a:	63 ee       	ldi	r22, 0xE3	; 227
  
  Serial.println("Stato Iniziale" + StatoAttuale);
    240c:	78 e0       	ldi	r23, 0x08	; 8
    240e:	ce 01       	movw	r24, r28
    2410:	01 96       	adiw	r24, 0x01	; 1
    2412:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <_ZplRK15StringSumHelperRK6String>
    2416:	bc 01       	movw	r22, r24
    2418:	88 e8       	ldi	r24, 0x88	; 136
    241a:	9a e0       	ldi	r25, 0x0A	; 10
    241c:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <_ZN5Print7printlnERK6String>
    2420:	ce 01       	movw	r24, r28
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2422:	01 96       	adiw	r24, 0x01	; 1
    2424:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    2428:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
  
  printLine();
    242c:	26 96       	adiw	r28, 0x06	; 6
}
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	1f 91       	pop	r17
    243e:	0f 91       	pop	r16
    2440:	ff 90       	pop	r15
    2442:	ef 90       	pop	r14
    2444:	df 90       	pop	r13
    2446:	cf 90       	pop	r12
    2448:	08 95       	ret

0000244a <_ZN7PCA9534C1Ev>:
    244a:	fc 01       	movw	r30, r24
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
		buff = Wire.read();
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}
    244c:	10 82       	st	Z, r1
    244e:	11 82       	std	Z+1, r1	; 0x01
    2450:	12 82       	std	Z+2, r1	; 0x02
    2452:	08 95       	ret

00002454 <_ZN7PCA95345beginEh>:
    2454:	fc 01       	movw	r30, r24
    2456:	60 83       	st	Z, r22
    2458:	82 e3       	ldi	r24, 0x32	; 50
    245a:	9a e0       	ldi	r25, 0x0A	; 10
    245c:	0c 94 9d 2a 	jmp	0x553a	; 0x553a <_ZN7TwoWire5beginEv>

00002460 <_ZN7PCA953413setporteIoExpEhhh>:
    2460:	ff 92       	push	r15
    2462:	0f 93       	push	r16
    2464:	1f 93       	push	r17
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
    246a:	ec 01       	movw	r28, r24
    246c:	f6 2e       	mov	r15, r22
    246e:	04 2f       	mov	r16, r20
    2470:	12 2f       	mov	r17, r18
    2472:	68 81       	ld	r22, Y
    2474:	82 e3       	ldi	r24, 0x32	; 50
    2476:	9a e0       	ldi	r25, 0x0A	; 10
    2478:	0e 94 b0 2a 	call	0x5560	; 0x5560 <_ZN7TwoWire17beginTransmissionEh>
    247c:	61 e0       	ldi	r22, 0x01	; 1
    247e:	82 e3       	ldi	r24, 0x32	; 50
    2480:	9a e0       	ldi	r25, 0x0A	; 10
    2482:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
    2486:	6f 2d       	mov	r22, r15
    2488:	82 e3       	ldi	r24, 0x32	; 50
    248a:	9a e0       	ldi	r25, 0x0A	; 10
    248c:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
    2490:	82 e3       	ldi	r24, 0x32	; 50
    2492:	9a e0       	ldi	r25, 0x0A	; 10
    2494:	0e 94 31 2b 	call	0x5662	; 0x5662 <_ZN7TwoWire15endTransmissionEv>
    2498:	68 81       	ld	r22, Y
    249a:	82 e3       	ldi	r24, 0x32	; 50
    249c:	9a e0       	ldi	r25, 0x0A	; 10
    249e:	0e 94 b0 2a 	call	0x5560	; 0x5560 <_ZN7TwoWire17beginTransmissionEh>
    24a2:	62 e0       	ldi	r22, 0x02	; 2
    24a4:	82 e3       	ldi	r24, 0x32	; 50
    24a6:	9a e0       	ldi	r25, 0x0A	; 10
    24a8:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
    24ac:	60 2f       	mov	r22, r16
    24ae:	82 e3       	ldi	r24, 0x32	; 50
    24b0:	9a e0       	ldi	r25, 0x0A	; 10
    24b2:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
    24b6:	82 e3       	ldi	r24, 0x32	; 50
    24b8:	9a e0       	ldi	r25, 0x0A	; 10
    24ba:	0e 94 31 2b 	call	0x5662	; 0x5662 <_ZN7TwoWire15endTransmissionEv>
    24be:	8f e3       	ldi	r24, 0x3F	; 63
    24c0:	9c e9       	ldi	r25, 0x9C	; 156
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	f1 f7       	brne	.-4      	; 0x24c2 <_ZN7PCA953413setporteIoExpEhhh+0x62>
    24c6:	00 c0       	rjmp	.+0      	; 0x24c8 <_ZN7PCA953413setporteIoExpEhhh+0x68>
    24c8:	00 00       	nop
    24ca:	68 81       	ld	r22, Y
    24cc:	82 e3       	ldi	r24, 0x32	; 50
    24ce:	9a e0       	ldi	r25, 0x0A	; 10
    24d0:	0e 94 b0 2a 	call	0x5560	; 0x5560 <_ZN7TwoWire17beginTransmissionEh>
    24d4:	63 e0       	ldi	r22, 0x03	; 3
    24d6:	82 e3       	ldi	r24, 0x32	; 50
    24d8:	9a e0       	ldi	r25, 0x0A	; 10
    24da:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
    24de:	61 2f       	mov	r22, r17
    24e0:	82 e3       	ldi	r24, 0x32	; 50
    24e2:	9a e0       	ldi	r25, 0x0A	; 10
    24e4:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
    24e8:	82 e3       	ldi	r24, 0x32	; 50
    24ea:	9a e0       	ldi	r25, 0x0A	; 10
    24ec:	0e 94 31 2b 	call	0x5662	; 0x5662 <_ZN7TwoWire15endTransmissionEv>
    24f0:	8f e3       	ldi	r24, 0x3F	; 63
    24f2:	9c e9       	ldi	r25, 0x9C	; 156
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <_ZN7PCA953413setporteIoExpEhhh+0x94>
    24f8:	00 c0       	rjmp	.+0      	; 0x24fa <_ZN7PCA953413setporteIoExpEhhh+0x9a>
    24fa:	00 00       	nop
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	ff 90       	pop	r15
    2506:	08 95       	ret

00002508 <_ZN7PCA953410setCONFREGEh>:
    2508:	cf 93       	push	r28
    250a:	c6 2f       	mov	r28, r22
    250c:	fc 01       	movw	r30, r24
    250e:	60 81       	ld	r22, Z
    2510:	82 e3       	ldi	r24, 0x32	; 50
    2512:	9a e0       	ldi	r25, 0x0A	; 10
    2514:	0e 94 b0 2a 	call	0x5560	; 0x5560 <_ZN7TwoWire17beginTransmissionEh>
    2518:	63 e0       	ldi	r22, 0x03	; 3
    251a:	82 e3       	ldi	r24, 0x32	; 50
    251c:	9a e0       	ldi	r25, 0x0A	; 10
    251e:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
    2522:	6c 2f       	mov	r22, r28
    2524:	82 e3       	ldi	r24, 0x32	; 50
    2526:	9a e0       	ldi	r25, 0x0A	; 10
    2528:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
    252c:	82 e3       	ldi	r24, 0x32	; 50
    252e:	9a e0       	ldi	r25, 0x0A	; 10
    2530:	cf 91       	pop	r28
    2532:	0c 94 31 2b 	jmp	0x5662	; 0x5662 <_ZN7TwoWire15endTransmissionEv>

00002536 <_ZN7PCA953416Read_IP_REGISTEREv>:

uint8_t PCA9534::Read_IP_REGISTER() {
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	ec 01       	movw	r28, r24
	uint8_t buff = 0;

	//_i2caddr = i2caddr;

	Wire.beginTransmission(_i2caddr);
    253c:	68 81       	ld	r22, Y
    253e:	82 e3       	ldi	r24, 0x32	; 50
    2540:	9a e0       	ldi	r25, 0x0A	; 10
    2542:	0e 94 b0 2a 	call	0x5560	; 0x5560 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(PCA9534_IP_REGISTER);
    2546:	60 e0       	ldi	r22, 0x00	; 0
    2548:	82 e3       	ldi	r24, 0x32	; 50
    254a:	9a e0       	ldi	r25, 0x0A	; 10
    254c:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
	// Wire.write(_port);
	Wire.endTransmission();
    2550:	82 e3       	ldi	r24, 0x32	; 50
    2552:	9a e0       	ldi	r25, 0x0A	; 10
    2554:	0e 94 31 2b 	call	0x5662	; 0x5662 <_ZN7TwoWire15endTransmissionEv>

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
    2558:	68 81       	ld	r22, Y
    255a:	70 e0       	ldi	r23, 0x00	; 0
    255c:	41 e0       	ldi	r20, 0x01	; 1
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	82 e3       	ldi	r24, 0x32	; 50
    2562:	9a e0       	ldi	r25, 0x0A	; 10
    2564:	0e 94 2f 2b 	call	0x565e	; 0x565e <_ZN7TwoWire11requestFromEii>
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}

uint8_t PCA9534::Read_IP_REGISTER() {
	uint8_t buff = 0;
    2568:	c0 e0       	ldi	r28, 0x00	; 0
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    256a:	82 e3       	ldi	r24, 0x32	; 50
    256c:	9a e0       	ldi	r25, 0x0A	; 10
    256e:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <_ZN7TwoWire9availableEv>
    2572:	89 2b       	or	r24, r25
    2574:	31 f0       	breq	.+12     	; 0x2582 <_ZN7PCA953416Read_IP_REGISTEREv+0x4c>
		buff = Wire.read();
    2576:	82 e3       	ldi	r24, 0x32	; 50
    2578:	9a e0       	ldi	r25, 0x0A	; 10
    257a:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZN7TwoWire4readEv>
    257e:	c8 2f       	mov	r28, r24
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    2580:	f4 cf       	rjmp	.-24     	; 0x256a <_ZN7PCA953416Read_IP_REGISTEREv+0x34>
		buff = Wire.read();
	}
	return buff;
    2582:	8c 2f       	mov	r24, r28
    2584:	df 91       	pop	r29
    2586:	cf 91       	pop	r28
    2588:	08 95       	ret

0000258a <_ZN7PCA95345getIoEv>:
	Wire.begin();
	
}

uint8_t PCA9534::getIo()
{
    258a:	ff 92       	push	r15
    258c:	0f 93       	push	r16
    258e:	1f 93       	push	r17
    2590:	cf 93       	push	r28
    2592:	df 93       	push	r29
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	68 97       	sbiw	r28, 0x18	; 24
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	8c 01       	movw	r16, r24
    setCONFREG(0x3C);
    25a6:	6c e3       	ldi	r22, 0x3C	; 60
    25a8:	af df       	rcall	.-162    	; 0x2508 <_ZN7PCA953410setCONFREGEh>
    uint8_t c = Read_IP_REGISTER();   
    25aa:	c8 01       	movw	r24, r16
    25ac:	c4 df       	rcall	.-120    	; 0x2536 <_ZN7PCA953416Read_IP_REGISTEREv>
    25ae:	f8 2e       	mov	r15, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    25b0:	42 e0       	ldi	r20, 0x02	; 2
    25b2:	be 01       	movw	r22, r28
    25b4:	6f 5e       	subi	r22, 0xEF	; 239
    25b6:	7f 4f       	sbci	r23, 0xFF	; 255
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <__itoa_ncheck>
    itoa(c,buf,2);
   /****************************
    Serial.print("IP REGISTER ");
    Serial.println(buf);
    /****************************/ 
    setCONFREG(0xC3);
    25be:	63 ec       	ldi	r22, 0xC3	; 195
    25c0:	c8 01       	movw	r24, r16
    uint8_t r = Read_IP_REGISTER();
    25c2:	a2 df       	rcall	.-188    	; 0x2508 <_ZN7PCA953410setCONFREGEh>
    25c4:	c8 01       	movw	r24, r16
    25c6:	b7 df       	rcall	.-146    	; 0x2536 <_ZN7PCA953416Read_IP_REGISTEREv>
    25c8:	18 2f       	mov	r17, r24
    25ca:	42 e0       	ldi	r20, 0x02	; 2
    25cc:	be 01       	movw	r22, r28
    25ce:	67 5f       	subi	r22, 0xF7	; 247
    25d0:	7f 4f       	sbci	r23, 0xFF	; 255
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <__itoa_ncheck>
    /****************************
    Serial.print("IP REGISTER ");
    Serial.println(bufr);
    /****************************/
    char ris[8];
    uint8_t z = (r ^ c);  
    25d8:	1f 25       	eor	r17, r15
    25da:	42 e0       	ldi	r20, 0x02	; 2
    25dc:	be 01       	movw	r22, r28
    25de:	6f 5f       	subi	r22, 0xFF	; 255
    25e0:	7f 4f       	sbci	r23, 0xFF	; 255
    25e2:	81 2f       	mov	r24, r17
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <__itoa_ncheck>
    /****************************/   
   
    return z;
     
    _delay_ms(50);   
}
    25ea:	81 2f       	mov	r24, r17
    25ec:	68 96       	adiw	r28, 0x18	; 24
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	de bf       	out	0x3e, r29	; 62
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	cd bf       	out	0x3d, r28	; 61
    25f8:	df 91       	pop	r29
    25fa:	cf 91       	pop	r28
    25fc:	1f 91       	pop	r17
    25fe:	0f 91       	pop	r16
    2600:	ff 90       	pop	r15
    2602:	08 95       	ret

00002604 <_ZN9NFC_PN532C1Ehh>:
    #endif
    return false;
  }

  return true;
}
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	ec 01       	movw	r28, r24
    260a:	86 2f       	mov	r24, r22
    260c:	6c 83       	std	Y+4, r22	; 0x04
    260e:	4d 83       	std	Y+5, r20	; 0x05
    2610:	1d 8a       	std	Y+21, r1	; 0x15
    2612:	1e 8a       	std	Y+22, r1	; 0x16
    2614:	60 e0       	ldi	r22, 0x00	; 0
    2616:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <pinMode>
    261a:	61 e0       	ldi	r22, 0x01	; 1
    261c:	8d 81       	ldd	r24, Y+5	; 0x05
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	0c 94 86 2f 	jmp	0x5f0c	; 0x5f0c <pinMode>

00002626 <_ZN9NFC_PN5325beginEv>:
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	ec 01       	movw	r28, r24
    262c:	82 e3       	ldi	r24, 0x32	; 50
    262e:	9a e0       	ldi	r25, 0x0A	; 10
    2630:	0e 94 9d 2a 	call	0x553a	; 0x553a <_ZN7TwoWire5beginEv>
    2634:	61 e0       	ldi	r22, 0x01	; 1
    2636:	8d 81       	ldd	r24, Y+5	; 0x05
    2638:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <digitalWrite>
    263c:	60 e0       	ldi	r22, 0x00	; 0
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <digitalWrite>
    2644:	60 e9       	ldi	r22, 0x90	; 144
    2646:	71 e0       	ldi	r23, 0x01	; 1
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <delay>
    2650:	61 e0       	ldi	r22, 0x01	; 1
    2652:	8d 81       	ldd	r24, Y+5	; 0x05
    2654:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <digitalWrite>
    2658:	6a e0       	ldi	r22, 0x0A	; 10
    265a:	70 e0       	ldi	r23, 0x00	; 0
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	df 91       	pop	r29
    2662:	cf 91       	pop	r28
    2664:	0c 94 de 2e 	jmp	0x5dbc	; 0x5dbc <delay>

00002668 <_ZN9NFC_PN53210GetHexCodeEPKhm>:
    2668:	4f 92       	push	r4
    266a:	5f 92       	push	r5
    266c:	6f 92       	push	r6
    266e:	7f 92       	push	r7
    2670:	8f 92       	push	r8
    2672:	9f 92       	push	r9
    2674:	af 92       	push	r10
    2676:	bf 92       	push	r11
    2678:	ef 92       	push	r14
    267a:	ff 92       	push	r15
    267c:	0f 93       	push	r16
    267e:	1f 93       	push	r17
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	2c 97       	sbiw	r28, 0x0c	; 12
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	7c 01       	movw	r14, r24
    2696:	5a 01       	movw	r10, r20
    2698:	28 01       	movw	r4, r16
    269a:	39 01       	movw	r6, r18
    269c:	64 e8       	ldi	r22, 0x84	; 132
    269e:	71 e0       	ldi	r23, 0x01	; 1
    26a0:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6StringC1EPKc>
    26a4:	85 01       	movw	r16, r10
    26a6:	81 2c       	mov	r8, r1
    26a8:	91 2c       	mov	r9, r1
    26aa:	54 01       	movw	r10, r8
    26ac:	84 14       	cp	r8, r4
    26ae:	95 04       	cpc	r9, r5
    26b0:	a6 04       	cpc	r10, r6
    26b2:	b7 04       	cpc	r11, r7
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x50>
    26b6:	46 c0       	rjmp	.+140    	; 0x2744 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xdc>
    26b8:	f8 01       	movw	r30, r16
    26ba:	61 91       	ld	r22, Z+
    26bc:	8f 01       	movw	r16, r30
    26be:	40 e1       	ldi	r20, 0x10	; 16
    26c0:	ce 01       	movw	r24, r28
    26c2:	60 31       	cpi	r22, 0x10	; 16
    26c4:	f0 f4       	brcc	.+60     	; 0x2702 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x9a>
    26c6:	01 96       	adiw	r24, 0x01	; 1
    26c8:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringC1Ehh>
    26cc:	b7 01       	movw	r22, r14
    26ce:	ce 01       	movw	r24, r28
    26d0:	07 96       	adiw	r24, 0x07	; 7
    26d2:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <_ZN6StringC1ERKS_>
    26d6:	66 ec       	ldi	r22, 0xC6	; 198
    26d8:	73 e0       	ldi	r23, 0x03	; 3
    26da:	ce 01       	movw	r24, r28
    26dc:	07 96       	adiw	r24, 0x07	; 7
    26de:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <_ZplRK15StringSumHelperPKc>
    26e2:	be 01       	movw	r22, r28
    26e4:	6f 5f       	subi	r22, 0xFF	; 255
    26e6:	7f 4f       	sbci	r23, 0xFF	; 255
    26e8:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <_ZplRK15StringSumHelperRK6String>
    26ec:	bc 01       	movw	r22, r24
    26ee:	c7 01       	movw	r24, r14
    26f0:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN6StringaSERKS_>
    26f4:	ce 01       	movw	r24, r28
    26f6:	07 96       	adiw	r24, 0x07	; 7
    26f8:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    26fc:	ce 01       	movw	r24, r28
    26fe:	01 96       	adiw	r24, 0x01	; 1
    2700:	19 c0       	rjmp	.+50     	; 0x2734 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xcc>
    2702:	07 96       	adiw	r24, 0x07	; 7
    2704:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringC1Ehh>
    2708:	b7 01       	movw	r22, r14
    270a:	ce 01       	movw	r24, r28
    270c:	01 96       	adiw	r24, 0x01	; 1
    270e:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <_ZN6StringC1ERKS_>
    2712:	be 01       	movw	r22, r28
    2714:	69 5f       	subi	r22, 0xF9	; 249
    2716:	7f 4f       	sbci	r23, 0xFF	; 255
    2718:	ce 01       	movw	r24, r28
    271a:	01 96       	adiw	r24, 0x01	; 1
    271c:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <_ZplRK15StringSumHelperRK6String>
    2720:	bc 01       	movw	r22, r24
    2722:	c7 01       	movw	r24, r14
    2724:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN6StringaSERKS_>
    2728:	ce 01       	movw	r24, r28
    272a:	01 96       	adiw	r24, 0x01	; 1
    272c:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    2730:	ce 01       	movw	r24, r28
    2732:	07 96       	adiw	r24, 0x07	; 7
    2734:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6StringD1Ev>
    2738:	ff ef       	ldi	r31, 0xFF	; 255
    273a:	8f 1a       	sub	r8, r31
    273c:	9f 0a       	sbc	r9, r31
    273e:	af 0a       	sbc	r10, r31
    2740:	bf 0a       	sbc	r11, r31
    2742:	b4 cf       	rjmp	.-152    	; 0x26ac <_ZN9NFC_PN53210GetHexCodeEPKhm+0x44>
    2744:	88 e8       	ldi	r24, 0x88	; 136
    2746:	9a e0       	ldi	r25, 0x0A	; 10
    2748:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <_ZN5Print7printlnEv>
    274c:	c7 01       	movw	r24, r14
    274e:	2c 96       	adiw	r28, 0x0c	; 12
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	1f 91       	pop	r17
    2760:	0f 91       	pop	r16
    2762:	ff 90       	pop	r15
    2764:	ef 90       	pop	r14
    2766:	bf 90       	pop	r11
    2768:	af 90       	pop	r10
    276a:	9f 90       	pop	r9
    276c:	8f 90       	pop	r8
    276e:	7f 90       	pop	r7
    2770:	6f 90       	pop	r6
    2772:	5f 90       	pop	r5
    2774:	4f 90       	pop	r4
    2776:	08 95       	ret

00002778 <_ZN9NFC_PN5327isreadyEv>:
    2778:	fc 01       	movw	r30, r24
    277a:	84 81       	ldd	r24, Z+4	; 0x04
    277c:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <digitalRead>
    2780:	91 e0       	ldi	r25, 0x01	; 1
    2782:	81 11       	cpse	r24, r1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	89 2f       	mov	r24, r25
    2788:	08 95       	ret

0000278a <_ZN9NFC_PN5329waitreadyEj>:
    278a:	cf 92       	push	r12
    278c:	df 92       	push	r13
    278e:	ef 92       	push	r14
    2790:	ff 92       	push	r15
    2792:	1f 93       	push	r17
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	6c 01       	movw	r12, r24
    279a:	7b 01       	movw	r14, r22
    279c:	c0 e0       	ldi	r28, 0x00	; 0
    279e:	d0 e0       	ldi	r29, 0x00	; 0
    27a0:	c6 01       	movw	r24, r12
    27a2:	ea df       	rcall	.-44     	; 0x2778 <_ZN9NFC_PN5327isreadyEv>
    27a4:	18 2f       	mov	r17, r24
    27a6:	81 11       	cpse	r24, r1
    27a8:	15 c0       	rjmp	.+42     	; 0x27d4 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    27aa:	e1 14       	cp	r14, r1
    27ac:	f1 04       	cpc	r15, r1
    27ae:	59 f0       	breq	.+22     	; 0x27c6 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    27b0:	2a 96       	adiw	r28, 0x0a	; 10
    27b2:	ec 16       	cp	r14, r28
    27b4:	fd 06       	cpc	r15, r29
    27b6:	38 f4       	brcc	.+14     	; 0x27c6 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    27b8:	66 e6       	ldi	r22, 0x66	; 102
    27ba:	77 e0       	ldi	r23, 0x07	; 7
    27bc:	88 e8       	ldi	r24, 0x88	; 136
    27be:	9a e0       	ldi	r25, 0x0A	; 10
    27c0:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN5Print7printlnEPKc>
    27c4:	07 c0       	rjmp	.+14     	; 0x27d4 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    27c6:	6a e0       	ldi	r22, 0x0A	; 10
    27c8:	70 e0       	ldi	r23, 0x00	; 0
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <delay>
    27d2:	e6 cf       	rjmp	.-52     	; 0x27a0 <_ZN9NFC_PN5329waitreadyEj+0x16>
    27d4:	81 2f       	mov	r24, r17
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	1f 91       	pop	r17
    27dc:	ff 90       	pop	r15
    27de:	ef 90       	pop	r14
    27e0:	df 90       	pop	r13
    27e2:	cf 90       	pop	r12
    27e4:	08 95       	ret

000027e6 <_ZN9NFC_PN5328readdataEPhh>:
    27e6:	ff 92       	push	r15
    27e8:	0f 93       	push	r16
    27ea:	1f 93       	push	r17
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	f6 2e       	mov	r15, r22
    27f2:	07 2f       	mov	r16, r23
    27f4:	14 2f       	mov	r17, r20
    27f6:	62 e0       	ldi	r22, 0x02	; 2
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <delay>
    2802:	42 e0       	ldi	r20, 0x02	; 2
    2804:	41 0f       	add	r20, r17
    2806:	64 e2       	ldi	r22, 0x24	; 36
    2808:	82 e3       	ldi	r24, 0x32	; 50
    280a:	9a e0       	ldi	r25, 0x0A	; 10
    280c:	0e 94 2d 2b 	call	0x565a	; 0x565a <_ZN7TwoWire11requestFromEhh>
    2810:	82 e3       	ldi	r24, 0x32	; 50
    2812:	9a e0       	ldi	r25, 0x0A	; 10
    2814:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZN7TwoWire4readEv>
    2818:	cf 2d       	mov	r28, r15
    281a:	d0 2f       	mov	r29, r16
    281c:	ce 01       	movw	r24, r28
    281e:	81 0f       	add	r24, r17
    2820:	91 1d       	adc	r25, r1
    2822:	8c 01       	movw	r16, r24
    2824:	c0 17       	cp	r28, r16
    2826:	d1 07       	cpc	r29, r17
    2828:	61 f0       	breq	.+24     	; 0x2842 <_ZN9NFC_PN5328readdataEPhh+0x5c>
    282a:	61 e0       	ldi	r22, 0x01	; 1
    282c:	70 e0       	ldi	r23, 0x00	; 0
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <delay>
    2836:	82 e3       	ldi	r24, 0x32	; 50
    2838:	9a e0       	ldi	r25, 0x0A	; 10
    283a:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZN7TwoWire4readEv>
    283e:	89 93       	st	Y+, r24
    2840:	f1 cf       	rjmp	.-30     	; 0x2824 <_ZN9NFC_PN5328readdataEPhh+0x3e>
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	1f 91       	pop	r17
    2848:	0f 91       	pop	r16
    284a:	ff 90       	pop	r15
    284c:	08 95       	ret

0000284e <_ZN9NFC_PN5327readackEv>:
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	00 d0       	rcall	.+0      	; 0x2854 <_ZN9NFC_PN5327readackEv+0x6>
    2854:	00 d0       	rcall	.+0      	; 0x2856 <_ZN9NFC_PN5327readackEv+0x8>
    2856:	00 d0       	rcall	.+0      	; 0x2858 <_ZN9NFC_PN5327readackEv+0xa>
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	46 e0       	ldi	r20, 0x06	; 6
    285e:	be 01       	movw	r22, r28
    2860:	6f 5f       	subi	r22, 0xFF	; 255
    2862:	7f 4f       	sbci	r23, 0xFF	; 255
    2864:	c0 df       	rcall	.-128    	; 0x27e6 <_ZN9NFC_PN5328readdataEPhh>
    2866:	46 e0       	ldi	r20, 0x06	; 6
    2868:	50 e0       	ldi	r21, 0x00	; 0
    286a:	6b e6       	ldi	r22, 0x6B	; 107
    286c:	71 e0       	ldi	r23, 0x01	; 1
    286e:	ce 01       	movw	r24, r28
    2870:	01 96       	adiw	r24, 0x01	; 1
    2872:	0e 94 64 36 	call	0x6cc8	; 0x6cc8 <strncmp>
    2876:	21 e0       	ldi	r18, 0x01	; 1
    2878:	89 2b       	or	r24, r25
    287a:	09 f0       	breq	.+2      	; 0x287e <_ZN9NFC_PN5327readackEv+0x30>
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	82 2f       	mov	r24, r18
    2880:	26 96       	adiw	r28, 0x06	; 6
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	08 95       	ret

00002892 <_ZL8i2c_sendh>:
    2892:	68 2f       	mov	r22, r24
    2894:	82 e3       	ldi	r24, 0x32	; 50
    2896:	9a e0       	ldi	r25, 0x0A	; 10
    2898:	0c 94 5f 2a 	jmp	0x54be	; 0x54be <_ZN7TwoWire5writeEh>

0000289c <_ZN9NFC_PN53212writecommandEPhh>:
    289c:	cf 92       	push	r12
    289e:	df 92       	push	r13
    28a0:	ef 92       	push	r14
    28a2:	ff 92       	push	r15
    28a4:	0f 93       	push	r16
    28a6:	1f 93       	push	r17
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	7b 01       	movw	r14, r22
    28ae:	c1 e0       	ldi	r28, 0x01	; 1
    28b0:	c4 0f       	add	r28, r20
    28b2:	62 e0       	ldi	r22, 0x02	; 2
    28b4:	70 e0       	ldi	r23, 0x00	; 0
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <delay>
    28be:	64 e2       	ldi	r22, 0x24	; 36
    28c0:	70 e0       	ldi	r23, 0x00	; 0
    28c2:	82 e3       	ldi	r24, 0x32	; 50
    28c4:	9a e0       	ldi	r25, 0x0A	; 10
    28c6:	0e 94 ba 2a 	call	0x5574	; 0x5574 <_ZN7TwoWire17beginTransmissionEi>
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	e2 df       	rcall	.-60     	; 0x2892 <_ZL8i2c_sendh>
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	e0 df       	rcall	.-64     	; 0x2892 <_ZL8i2c_sendh>
    28d2:	8f ef       	ldi	r24, 0xFF	; 255
    28d4:	de df       	rcall	.-68     	; 0x2892 <_ZL8i2c_sendh>
    28d6:	8c 2f       	mov	r24, r28
    28d8:	dc df       	rcall	.-72     	; 0x2892 <_ZL8i2c_sendh>
    28da:	8c 2f       	mov	r24, r28
    28dc:	81 95       	neg	r24
    28de:	d9 df       	rcall	.-78     	; 0x2892 <_ZL8i2c_sendh>
    28e0:	84 ed       	ldi	r24, 0xD4	; 212
    28e2:	d7 df       	rcall	.-82     	; 0x2892 <_ZL8i2c_sendh>
    28e4:	c1 2c       	mov	r12, r1
    28e6:	83 ed       	ldi	r24, 0xD3	; 211
    28e8:	d8 2e       	mov	r13, r24
    28ea:	d0 e0       	ldi	r29, 0x00	; 0
    28ec:	21 97       	sbiw	r28, 0x01	; 1
    28ee:	0c 2d       	mov	r16, r12
    28f0:	10 e0       	ldi	r17, 0x00	; 0
    28f2:	0c 17       	cp	r16, r28
    28f4:	1d 07       	cpc	r17, r29
    28f6:	54 f4       	brge	.+20     	; 0x290c <_ZN9NFC_PN53212writecommandEPhh+0x70>
    28f8:	0e 0d       	add	r16, r14
    28fa:	1f 1d       	adc	r17, r15
    28fc:	f8 01       	movw	r30, r16
    28fe:	80 81       	ld	r24, Z
    2900:	c8 df       	rcall	.-112    	; 0x2892 <_ZL8i2c_sendh>
    2902:	f8 01       	movw	r30, r16
    2904:	80 81       	ld	r24, Z
    2906:	d8 0e       	add	r13, r24
    2908:	c3 94       	inc	r12
    290a:	f1 cf       	rjmp	.-30     	; 0x28ee <_ZN9NFC_PN53212writecommandEPhh+0x52>
    290c:	8d 2d       	mov	r24, r13
    290e:	80 95       	com	r24
    2910:	c0 df       	rcall	.-128    	; 0x2892 <_ZL8i2c_sendh>
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	be df       	rcall	.-132    	; 0x2892 <_ZL8i2c_sendh>
    2916:	82 e3       	ldi	r24, 0x32	; 50
    2918:	9a e0       	ldi	r25, 0x0A	; 10
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	1f 91       	pop	r17
    2920:	0f 91       	pop	r16
    2922:	ff 90       	pop	r15
    2924:	ef 90       	pop	r14
    2926:	df 90       	pop	r13
    2928:	cf 90       	pop	r12
    292a:	0c 94 31 2b 	jmp	0x5662	; 0x5662 <_ZN7TwoWire15endTransmissionEv>

0000292e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>:
    292e:	0f 93       	push	r16
    2930:	1f 93       	push	r17
    2932:	cf 93       	push	r28
    2934:	df 93       	push	r29
    2936:	ec 01       	movw	r28, r24
    2938:	89 01       	movw	r16, r18
    293a:	b0 df       	rcall	.-160    	; 0x289c <_ZN9NFC_PN53212writecommandEPhh>
    293c:	b8 01       	movw	r22, r16
    293e:	ce 01       	movw	r24, r28
    2940:	24 df       	rcall	.-440    	; 0x278a <_ZN9NFC_PN5329waitreadyEj>
    2942:	88 23       	and	r24, r24
    2944:	31 f0       	breq	.+12     	; 0x2952 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x24>
    2946:	ce 01       	movw	r24, r28
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	7e cf       	rjmp	.-260    	; 0x284e <_ZN9NFC_PN5327readackEv>
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
    2958:	1f 91       	pop	r17
    295a:	0f 91       	pop	r16
    295c:	08 95       	ret

0000295e <_ZN9NFC_PN53218getFirmwareVersionEv>:
    295e:	cf 93       	push	r28
    2960:	df 93       	push	r29
    2962:	ec 01       	movw	r28, r24
    2964:	82 e0       	ldi	r24, 0x02	; 2
    2966:	80 93 39 09 	sts	0x0939, r24	; 0x800939 <pn532_packetbuffer>
    296a:	28 ee       	ldi	r18, 0xE8	; 232
    296c:	33 e0       	ldi	r19, 0x03	; 3
    296e:	41 e0       	ldi	r20, 0x01	; 1
    2970:	69 e3       	ldi	r22, 0x39	; 57
    2972:	79 e0       	ldi	r23, 0x09	; 9
    2974:	ce 01       	movw	r24, r28
    2976:	db df       	rcall	.-74     	; 0x292e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2978:	81 11       	cpse	r24, r1
    297a:	04 c0       	rjmp	.+8      	; 0x2984 <_ZN9NFC_PN53218getFirmwareVersionEv+0x26>
    297c:	60 e0       	ldi	r22, 0x00	; 0
    297e:	70 e0       	ldi	r23, 0x00	; 0
    2980:	cb 01       	movw	r24, r22
    2982:	32 c0       	rjmp	.+100    	; 0x29e8 <_ZN9NFC_PN53218getFirmwareVersionEv+0x8a>
    2984:	4c e0       	ldi	r20, 0x0C	; 12
    2986:	69 e3       	ldi	r22, 0x39	; 57
    2988:	79 e0       	ldi	r23, 0x09	; 9
    298a:	ce 01       	movw	r24, r28
    298c:	2c df       	rcall	.-424    	; 0x27e6 <_ZN9NFC_PN5328readdataEPhh>
    298e:	46 e0       	ldi	r20, 0x06	; 6
    2990:	50 e0       	ldi	r21, 0x00	; 0
    2992:	65 e6       	ldi	r22, 0x65	; 101
    2994:	71 e0       	ldi	r23, 0x01	; 1
    2996:	89 e3       	ldi	r24, 0x39	; 57
    2998:	99 e0       	ldi	r25, 0x09	; 9
    299a:	0e 94 64 36 	call	0x6cc8	; 0x6cc8 <strncmp>
    299e:	89 2b       	or	r24, r25
    29a0:	69 f7       	brne	.-38     	; 0x297c <_ZN9NFC_PN53218getFirmwareVersionEv+0x1e>
    29a2:	8d 89       	ldd	r24, Y+21	; 0x15
    29a4:	81 11       	cpse	r24, r1
    29a6:	03 c0       	rjmp	.+6      	; 0x29ae <_ZN9NFC_PN53218getFirmwareVersionEv+0x50>
    29a8:	e7 e0       	ldi	r30, 0x07	; 7
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	02 c0       	rjmp	.+4      	; 0x29b2 <_ZN9NFC_PN53218getFirmwareVersionEv+0x54>
    29ae:	e6 e0       	ldi	r30, 0x06	; 6
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	e7 5c       	subi	r30, 0xC7	; 199
    29b4:	f6 4f       	sbci	r31, 0xF6	; 246
    29b6:	60 81       	ld	r22, Z
    29b8:	86 2f       	mov	r24, r22
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	a0 e0       	ldi	r26, 0x00	; 0
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	ba 2f       	mov	r27, r26
    29c2:	a9 2f       	mov	r26, r25
    29c4:	98 2f       	mov	r25, r24
    29c6:	88 27       	eor	r24, r24
    29c8:	21 81       	ldd	r18, Z+1	; 0x01
    29ca:	82 2b       	or	r24, r18
    29cc:	ba 2f       	mov	r27, r26
    29ce:	a9 2f       	mov	r26, r25
    29d0:	98 2f       	mov	r25, r24
    29d2:	88 27       	eor	r24, r24
    29d4:	22 81       	ldd	r18, Z+2	; 0x02
    29d6:	82 2b       	or	r24, r18
    29d8:	ba 2f       	mov	r27, r26
    29da:	a9 2f       	mov	r26, r25
    29dc:	98 2f       	mov	r25, r24
    29de:	88 27       	eor	r24, r24
    29e0:	23 81       	ldd	r18, Z+3	; 0x03
    29e2:	bc 01       	movw	r22, r24
    29e4:	cd 01       	movw	r24, r26
    29e6:	62 2b       	or	r22, r18
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	08 95       	ret

000029ee <_ZN9NFC_PN5329SAMConfigEv>:
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	ec 01       	movw	r28, r24
    29f4:	94 e1       	ldi	r25, 0x14	; 20
    29f6:	90 93 39 09 	sts	0x0939, r25	; 0x800939 <pn532_packetbuffer>
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <pn532_packetbuffer+0x1>
    2a00:	90 93 3b 09 	sts	0x093B, r25	; 0x80093b <pn532_packetbuffer+0x2>
    2a04:	80 93 3c 09 	sts	0x093C, r24	; 0x80093c <pn532_packetbuffer+0x3>
    2a08:	28 ee       	ldi	r18, 0xE8	; 232
    2a0a:	33 e0       	ldi	r19, 0x03	; 3
    2a0c:	44 e0       	ldi	r20, 0x04	; 4
    2a0e:	69 e3       	ldi	r22, 0x39	; 57
    2a10:	79 e0       	ldi	r23, 0x09	; 9
    2a12:	ce 01       	movw	r24, r28
    2a14:	8c df       	rcall	.-232    	; 0x292e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2a16:	88 23       	and	r24, r24
    2a18:	a9 f0       	breq	.+42     	; 0x2a44 <_ZN9NFC_PN5329SAMConfigEv+0x56>
    2a1a:	48 e0       	ldi	r20, 0x08	; 8
    2a1c:	69 e3       	ldi	r22, 0x39	; 57
    2a1e:	79 e0       	ldi	r23, 0x09	; 9
    2a20:	ce 01       	movw	r24, r28
    2a22:	e1 de       	rcall	.-574    	; 0x27e6 <_ZN9NFC_PN5328readdataEPhh>
    2a24:	8d 89       	ldd	r24, Y+21	; 0x15
    2a26:	81 11       	cpse	r24, r1
    2a28:	03 c0       	rjmp	.+6      	; 0x2a30 <_ZN9NFC_PN5329SAMConfigEv+0x42>
    2a2a:	86 e0       	ldi	r24, 0x06	; 6
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	02 c0       	rjmp	.+4      	; 0x2a34 <_ZN9NFC_PN5329SAMConfigEv+0x46>
    2a30:	85 e0       	ldi	r24, 0x05	; 5
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	fc 01       	movw	r30, r24
    2a36:	e7 5c       	subi	r30, 0xC7	; 199
    2a38:	f6 4f       	sbci	r31, 0xF6	; 246
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	90 81       	ld	r25, Z
    2a3e:	95 31       	cpi	r25, 0x15	; 21
    2a40:	09 f0       	breq	.+2      	; 0x2a44 <_ZN9NFC_PN5329SAMConfigEv+0x56>
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	df 91       	pop	r29
    2a46:	cf 91       	pop	r28
    2a48:	08 95       	ret

00002a4a <_ZN9NFC_PN53227setPassiveActivationRetriesEh>:
    2a4a:	e9 e3       	ldi	r30, 0x39	; 57
    2a4c:	f9 e0       	ldi	r31, 0x09	; 9
    2a4e:	22 e3       	ldi	r18, 0x32	; 50
    2a50:	20 83       	st	Z, r18
    2a52:	25 e0       	ldi	r18, 0x05	; 5
    2a54:	21 83       	std	Z+1, r18	; 0x01
    2a56:	2f ef       	ldi	r18, 0xFF	; 255
    2a58:	22 83       	std	Z+2, r18	; 0x02
    2a5a:	21 e0       	ldi	r18, 0x01	; 1
    2a5c:	23 83       	std	Z+3, r18	; 0x03
    2a5e:	64 83       	std	Z+4, r22	; 0x04
    2a60:	28 ee       	ldi	r18, 0xE8	; 232
    2a62:	33 e0       	ldi	r19, 0x03	; 3
    2a64:	45 e0       	ldi	r20, 0x05	; 5
    2a66:	bf 01       	movw	r22, r30
    2a68:	62 cf       	rjmp	.-316    	; 0x292e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>

00002a6a <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>:
    2a6a:	af 92       	push	r10
    2a6c:	bf 92       	push	r11
    2a6e:	cf 92       	push	r12
    2a70:	df 92       	push	r13
    2a72:	ef 92       	push	r14
    2a74:	ff 92       	push	r15
    2a76:	0f 93       	push	r16
    2a78:	1f 93       	push	r17
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	ec 01       	movw	r28, r24
    2a80:	7a 01       	movw	r14, r20
    2a82:	59 01       	movw	r10, r18
    2a84:	68 01       	movw	r12, r16
    2a86:	8a e4       	ldi	r24, 0x4A	; 74
    2a88:	80 93 39 09 	sts	0x0939, r24	; 0x800939 <pn532_packetbuffer>
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <pn532_packetbuffer+0x1>
    2a92:	60 93 3b 09 	sts	0x093B, r22	; 0x80093b <pn532_packetbuffer+0x2>
    2a96:	98 01       	movw	r18, r16
    2a98:	43 e0       	ldi	r20, 0x03	; 3
    2a9a:	69 e3       	ldi	r22, 0x39	; 57
    2a9c:	79 e0       	ldi	r23, 0x09	; 9
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	46 df       	rcall	.-372    	; 0x292e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2aa2:	18 2f       	mov	r17, r24
    2aa4:	88 23       	and	r24, r24
    2aa6:	41 f1       	breq	.+80     	; 0x2af8 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    2aa8:	8d 89       	ldd	r24, Y+21	; 0x15
    2aaa:	88 23       	and	r24, r24
    2aac:	79 f0       	breq	.+30     	; 0x2acc <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x62>
    2aae:	44 e1       	ldi	r20, 0x14	; 20
    2ab0:	69 e3       	ldi	r22, 0x39	; 57
    2ab2:	79 e0       	ldi	r23, 0x09	; 9
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	97 de       	rcall	.-722    	; 0x27e6 <_ZN9NFC_PN5328readdataEPhh>
    2ab8:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <pn532_packetbuffer+0x7>
    2abc:	81 30       	cpi	r24, 0x01	; 1
    2abe:	e1 f4       	brne	.+56     	; 0x2af8 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    2ac0:	80 91 45 09 	lds	r24, 0x0945	; 0x800945 <pn532_packetbuffer+0xc>
    2ac4:	f5 01       	movw	r30, r10
    2ac6:	80 83       	st	Z, r24
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	06 c0       	rjmp	.+12     	; 0x2ad8 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    2acc:	b6 01       	movw	r22, r12
    2ace:	ce 01       	movw	r24, r28
    2ad0:	5c de       	rcall	.-840    	; 0x278a <_ZN9NFC_PN5329waitreadyEj>
    2ad2:	81 11       	cpse	r24, r1
    2ad4:	ec cf       	rjmp	.-40     	; 0x2aae <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x44>
    2ad6:	10 c0       	rjmp	.+32     	; 0x2af8 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    2ad8:	90 91 45 09 	lds	r25, 0x0945	; 0x800945 <pn532_packetbuffer+0xc>
    2adc:	89 17       	cp	r24, r25
    2ade:	68 f4       	brcc	.+26     	; 0x2afa <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x90>
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	f9 01       	movw	r30, r18
    2ae6:	e7 5c       	subi	r30, 0xC7	; 199
    2ae8:	f6 4f       	sbci	r31, 0xF6	; 246
    2aea:	95 85       	ldd	r25, Z+13	; 0x0d
    2aec:	f7 01       	movw	r30, r14
    2aee:	e2 0f       	add	r30, r18
    2af0:	f3 1f       	adc	r31, r19
    2af2:	90 83       	st	Z, r25
    2af4:	8f 5f       	subi	r24, 0xFF	; 255
    2af6:	f0 cf       	rjmp	.-32     	; 0x2ad8 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    2af8:	10 e0       	ldi	r17, 0x00	; 0
    2afa:	81 2f       	mov	r24, r17
    2afc:	df 91       	pop	r29
    2afe:	cf 91       	pop	r28
    2b00:	1f 91       	pop	r17
    2b02:	0f 91       	pop	r16
    2b04:	ff 90       	pop	r15
    2b06:	ef 90       	pop	r14
    2b08:	df 90       	pop	r13
    2b0a:	cf 90       	pop	r12
    2b0c:	bf 90       	pop	r11
    2b0e:	af 90       	pop	r10
    2b10:	08 95       	ret

00002b12 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    2b12:	af 92       	push	r10
    2b14:	bf 92       	push	r11
    2b16:	cf 92       	push	r12
    2b18:	df 92       	push	r13
    2b1a:	ef 92       	push	r14
    2b1c:	0f 93       	push	r16
    2b1e:	1f 93       	push	r17
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
    2b24:	ec 01       	movw	r28, r24
    2b26:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    2b28:	5c 01       	movw	r10, r24
    2b2a:	8e e0       	ldi	r24, 0x0E	; 14
    2b2c:	a8 0e       	add	r10, r24
    2b2e:	b1 1c       	adc	r11, r1
    2b30:	86 e0       	ldi	r24, 0x06	; 6
    2b32:	f6 01       	movw	r30, r12
    2b34:	d5 01       	movw	r26, r10
    2b36:	01 90       	ld	r0, Z+
    2b38:	0d 92       	st	X+, r0
    2b3a:	8a 95       	dec	r24
    2b3c:	e1 f7       	brne	.-8      	; 0x2b36 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	ce 01       	movw	r24, r28
    2b42:	06 96       	adiw	r24, 0x06	; 6
    2b44:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <memcpy>
  _uidLen = uidLen;
    2b48:	1d 87       	std	Y+13, r17	; 0x0d
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    NFC_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    2b4a:	80 e4       	ldi	r24, 0x40	; 64
    2b4c:	80 93 39 09 	sts	0x0939, r24	; 0x800939 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    2b56:	e1 10       	cpse	r14, r1
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    2b5a:	80 e6       	ldi	r24, 0x60	; 96
    2b5c:	01 c0       	rjmp	.+2      	; 0x2b60 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    2b5e:	81 e6       	ldi	r24, 0x61	; 97
    2b60:	80 93 3b 09 	sts	0x093B, r24	; 0x80093b <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    2b64:	00 93 3c 09 	sts	0x093C, r16	; 0x80093c <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    2b68:	86 e0       	ldi	r24, 0x06	; 6
    2b6a:	f5 01       	movw	r30, r10
    2b6c:	ad e3       	ldi	r26, 0x3D	; 61
    2b6e:	b9 e0       	ldi	r27, 0x09	; 9
    2b70:	01 90       	ld	r0, Z+
    2b72:	0d 92       	st	X+, r0
    2b74:	8a 95       	dec	r24
    2b76:	e1 f7       	brne	.-8      	; 0x2b70 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b7c:	84 17       	cp	r24, r20
    2b7e:	60 f4       	brcc	.+24     	; 0x2b98 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    2b80:	28 2f       	mov	r18, r24
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	fe 01       	movw	r30, r28
    2b86:	e2 0f       	add	r30, r18
    2b88:	f3 1f       	adc	r31, r19
    2b8a:	96 81       	ldd	r25, Z+6	; 0x06
    2b8c:	f9 01       	movw	r30, r18
    2b8e:	e7 5c       	subi	r30, 0xC7	; 199
    2b90:	f6 4f       	sbci	r31, 0xF6	; 246
    2b92:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    2b94:	8f 5f       	subi	r24, 0xFF	; 255
    2b96:	f1 cf       	rjmp	.-30     	; 0x2b7a <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    2b98:	46 5f       	subi	r20, 0xF6	; 246
    2b9a:	28 ee       	ldi	r18, 0xE8	; 232
    2b9c:	33 e0       	ldi	r19, 0x03	; 3
    2b9e:	69 e3       	ldi	r22, 0x39	; 57
    2ba0:	79 e0       	ldi	r23, 0x09	; 9
    2ba2:	ce 01       	movw	r24, r28
    2ba4:	c4 de       	rcall	.-632    	; 0x292e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2ba6:	88 23       	and	r24, r24
    2ba8:	49 f0       	breq	.+18     	; 0x2bbc <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    2baa:	4c e0       	ldi	r20, 0x0C	; 12
    2bac:	69 e3       	ldi	r22, 0x39	; 57
    2bae:	79 e0       	ldi	r23, 0x09	; 9
    2bb0:	ce 01       	movw	r24, r28
    2bb2:	19 de       	rcall	.-974    	; 0x27e6 <_ZN9NFC_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	90 91 40 09 	lds	r25, 0x0940	; 0x800940 <pn532_packetbuffer+0x7>
    2bba:	91 11       	cpse	r25, r1
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    2bbe:	df 91       	pop	r29
    2bc0:	cf 91       	pop	r28
    2bc2:	1f 91       	pop	r17
    2bc4:	0f 91       	pop	r16
    2bc6:	ef 90       	pop	r14
    2bc8:	df 90       	pop	r13
    2bca:	cf 90       	pop	r12
    2bcc:	bf 90       	pop	r11
    2bce:	af 90       	pop	r10
    2bd0:	08 95       	ret

00002bd2 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    2bd2:	0f 93       	push	r16
    2bd4:	1f 93       	push	r17
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	ec 01       	movw	r28, r24
    2bdc:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    2bde:	80 e4       	ldi	r24, 0x40	; 64
    2be0:	80 93 39 09 	sts	0x0939, r24	; 0x800939 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    2bea:	80 e3       	ldi	r24, 0x30	; 48
    2bec:	80 93 3b 09 	sts	0x093B, r24	; 0x80093b <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    2bf0:	60 93 3c 09 	sts	0x093C, r22	; 0x80093c <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    2bf4:	28 ee       	ldi	r18, 0xE8	; 232
    2bf6:	33 e0       	ldi	r19, 0x03	; 3
    2bf8:	44 e0       	ldi	r20, 0x04	; 4
    2bfa:	69 e3       	ldi	r22, 0x39	; 57
    2bfc:	79 e0       	ldi	r23, 0x09	; 9
    2bfe:	ce 01       	movw	r24, r28
    2c00:	96 de       	rcall	.-724    	; 0x292e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2c02:	81 11       	cpse	r24, r1
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	12 c0       	rjmp	.+36     	; 0x2c2e <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x5c>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    2c0a:	4a e1       	ldi	r20, 0x1A	; 26
    2c0c:	69 e3       	ldi	r22, 0x39	; 57
    2c0e:	79 e0       	ldi	r23, 0x09	; 9
    2c10:	ce 01       	movw	r24, r28
    2c12:	e9 dd       	rcall	.-1070   	; 0x27e6 <_ZN9NFC_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    2c14:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <pn532_packetbuffer+0x7>
    2c18:	81 11       	cpse	r24, r1
    2c1a:	f5 cf       	rjmp	.-22     	; 0x2c06 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    2c1c:	80 e1       	ldi	r24, 0x10	; 16
    2c1e:	e1 e4       	ldi	r30, 0x41	; 65
    2c20:	f9 e0       	ldi	r31, 0x09	; 9
    2c22:	d8 01       	movw	r26, r16
    2c24:	01 90       	ld	r0, Z+
    2c26:	0d 92       	st	X+, r0
    2c28:	8a 95       	dec	r24
    2c2a:	e1 f7       	brne	.-8      	; 0x2c24 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x52>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    NFC_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
}
    2c2e:	df 91       	pop	r29
    2c30:	cf 91       	pop	r28
    2c32:	1f 91       	pop	r17
    2c34:	0f 91       	pop	r16
    2c36:	08 95       	ret

00002c38 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    2c38:	cf 93       	push	r28
    2c3a:	df 93       	push	r29
    2c3c:	ec 01       	movw	r28, r24
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    2c3e:	80 e4       	ldi	r24, 0x40	; 64
    2c40:	80 93 39 09 	sts	0x0939, r24	; 0x800939 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    2c4a:	80 ea       	ldi	r24, 0xA0	; 160
    2c4c:	80 93 3b 09 	sts	0x093B, r24	; 0x80093b <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    2c50:	60 93 3c 09 	sts	0x093C, r22	; 0x80093c <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);          /* Data Payload */
    2c54:	80 e1       	ldi	r24, 0x10	; 16
    2c56:	fa 01       	movw	r30, r20
    2c58:	ad e3       	ldi	r26, 0x3D	; 61
    2c5a:	b9 e0       	ldi	r27, 0x09	; 9
    2c5c:	01 90       	ld	r0, Z+
    2c5e:	0d 92       	st	X+, r0
    2c60:	8a 95       	dec	r24
    2c62:	e1 f7       	brne	.-8      	; 0x2c5c <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    2c64:	28 ee       	ldi	r18, 0xE8	; 232
    2c66:	33 e0       	ldi	r19, 0x03	; 3
    2c68:	44 e1       	ldi	r20, 0x14	; 20
    2c6a:	69 e3       	ldi	r22, 0x39	; 57
    2c6c:	79 e0       	ldi	r23, 0x09	; 9
    2c6e:	ce 01       	movw	r24, r28
    2c70:	5e de       	rcall	.-836    	; 0x292e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2c72:	88 23       	and	r24, r24
    2c74:	69 f0       	breq	.+26     	; 0x2c90 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    #endif

    // Return Failed Signal
    return 0;
  }
  delay(10);
    2c76:	6a e0       	ldi	r22, 0x0A	; 10
    2c78:	70 e0       	ldi	r23, 0x00	; 0
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <delay>

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    2c82:	4a e1       	ldi	r20, 0x1A	; 26
    2c84:	69 e3       	ldi	r22, 0x39	; 57
    2c86:	79 e0       	ldi	r23, 0x09	; 9
    2c88:	ce 01       	movw	r24, r28
    2c8a:	ad dd       	rcall	.-1190   	; 0x27e6 <_ZN9NFC_PN5328readdataEPhh>
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	01 c0       	rjmp	.+2      	; 0x2c92 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
    #endif
    return 0;
    2c90:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    2c92:	df 91       	pop	r29
    2c94:	cf 91       	pop	r28
    2c96:	08 95       	ret

00002c98 <_ZL9date2daysjhh>:
} // of method pinAlarm()                                                     //                                  //
/*******************************************************************************************************************
** Method pinSquareWave() will set the control register flag to make the INT/SQW Pin produce a 1Hz signal         **
*******************************************************************************************************************/
void DS3231M_Class::pinSquareWave() {                                         //                                  //
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)|0x4);                   // Set bit 3 to off                 //
    2c98:	80 3d       	cpi	r24, 0xD0	; 208
    2c9a:	27 e0       	ldi	r18, 0x07	; 7
    2c9c:	92 07       	cpc	r25, r18
    2c9e:	10 f0       	brcs	.+4      	; 0x2ca4 <_ZL9date2daysjhh+0xc>
    2ca0:	80 5d       	subi	r24, 0xD0	; 208
    2ca2:	97 40       	sbci	r25, 0x07	; 7
    2ca4:	50 e0       	ldi	r21, 0x00	; 0
    2ca6:	ed e1       	ldi	r30, 0x1D	; 29
    2ca8:	f2 e0       	ldi	r31, 0x02	; 2
    2caa:	21 e0       	ldi	r18, 0x01	; 1
    2cac:	26 17       	cp	r18, r22
    2cae:	30 f4       	brcc	.+12     	; 0x2cbc <_ZL9date2daysjhh+0x24>
    2cb0:	34 91       	lpm	r19, Z
    2cb2:	43 0f       	add	r20, r19
    2cb4:	51 1d       	adc	r21, r1
    2cb6:	2f 5f       	subi	r18, 0xFF	; 255
    2cb8:	31 96       	adiw	r30, 0x01	; 1
    2cba:	f8 cf       	rjmp	.-16     	; 0x2cac <_ZL9date2daysjhh+0x14>
    2cbc:	63 30       	cpi	r22, 0x03	; 3
    2cbe:	38 f0       	brcs	.+14     	; 0x2cce <_ZL9date2daysjhh+0x36>
    2cc0:	9c 01       	movw	r18, r24
    2cc2:	23 70       	andi	r18, 0x03	; 3
    2cc4:	33 27       	eor	r19, r19
    2cc6:	23 2b       	or	r18, r19
    2cc8:	11 f4       	brne	.+4      	; 0x2cce <_ZL9date2daysjhh+0x36>
    2cca:	4f 5f       	subi	r20, 0xFF	; 255
    2ccc:	5f 4f       	sbci	r21, 0xFF	; 255
    2cce:	bc 01       	movw	r22, r24
    2cd0:	6d 5f       	subi	r22, 0xFD	; 253
    2cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd4:	76 95       	lsr	r23
    2cd6:	67 95       	ror	r22
    2cd8:	76 95       	lsr	r23
    2cda:	67 95       	ror	r22
    2cdc:	ed e6       	ldi	r30, 0x6D	; 109
    2cde:	f1 e0       	ldi	r31, 0x01	; 1
    2ce0:	8e 9f       	mul	r24, r30
    2ce2:	90 01       	movw	r18, r0
    2ce4:	8f 9f       	mul	r24, r31
    2ce6:	30 0d       	add	r19, r0
    2ce8:	9e 9f       	mul	r25, r30
    2cea:	30 0d       	add	r19, r0
    2cec:	11 24       	eor	r1, r1
    2cee:	c9 01       	movw	r24, r18
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	86 0f       	add	r24, r22
    2cf4:	97 1f       	adc	r25, r23
    2cf6:	84 0f       	add	r24, r20
    2cf8:	95 1f       	adc	r25, r21
    2cfa:	08 95       	ret

00002cfc <_ZL6conv2dPKc>:
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	90 81       	ld	r25, Z
    2d00:	90 53       	subi	r25, 0x30	; 48
    2d02:	9a 30       	cpi	r25, 0x0A	; 10
    2d04:	08 f0       	brcs	.+2      	; 0x2d08 <_ZL6conv2dPKc+0xc>
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	81 81       	ldd	r24, Z+1	; 0x01
    2d0a:	80 53       	subi	r24, 0x30	; 48
    2d0c:	2a e0       	ldi	r18, 0x0A	; 10
    2d0e:	92 9f       	mul	r25, r18
    2d10:	80 0d       	add	r24, r0
    2d12:	11 24       	eor	r1, r1
    2d14:	08 95       	ret

00002d16 <_ZN8DateTimeC1Em>:
    2d16:	8f 92       	push	r8
    2d18:	9f 92       	push	r9
    2d1a:	af 92       	push	r10
    2d1c:	bf 92       	push	r11
    2d1e:	cf 92       	push	r12
    2d20:	df 92       	push	r13
    2d22:	ef 92       	push	r14
    2d24:	ff 92       	push	r15
    2d26:	cf 93       	push	r28
    2d28:	df 93       	push	r29
    2d2a:	ec 01       	movw	r28, r24
    2d2c:	6a 01       	movw	r12, r20
    2d2e:	7b 01       	movw	r14, r22
    2d30:	80 e8       	ldi	r24, 0x80	; 128
    2d32:	c8 1a       	sub	r12, r24
    2d34:	83 e4       	ldi	r24, 0x43	; 67
    2d36:	d8 0a       	sbc	r13, r24
    2d38:	8d e6       	ldi	r24, 0x6D	; 109
    2d3a:	e8 0a       	sbc	r14, r24
    2d3c:	88 e3       	ldi	r24, 0x38	; 56
    2d3e:	f8 0a       	sbc	r15, r24
    2d40:	8c e3       	ldi	r24, 0x3C	; 60
    2d42:	88 2e       	mov	r8, r24
    2d44:	91 2c       	mov	r9, r1
    2d46:	a1 2c       	mov	r10, r1
    2d48:	b1 2c       	mov	r11, r1
    2d4a:	c7 01       	movw	r24, r14
    2d4c:	b6 01       	movw	r22, r12
    2d4e:	a5 01       	movw	r20, r10
    2d50:	94 01       	movw	r18, r8
    2d52:	0e 94 d2 33 	call	0x67a4	; 0x67a4 <__udivmodsi4>
    2d56:	6d 83       	std	Y+5, r22	; 0x05
    2d58:	ca 01       	movw	r24, r20
    2d5a:	b9 01       	movw	r22, r18
    2d5c:	a5 01       	movw	r20, r10
    2d5e:	94 01       	movw	r18, r8
    2d60:	0e 94 d2 33 	call	0x67a4	; 0x67a4 <__udivmodsi4>
    2d64:	6c 83       	std	Y+4, r22	; 0x04
    2d66:	c7 01       	movw	r24, r14
    2d68:	b6 01       	movw	r22, r12
    2d6a:	20 e1       	ldi	r18, 0x10	; 16
    2d6c:	3e e0       	ldi	r19, 0x0E	; 14
    2d6e:	40 e0       	ldi	r20, 0x00	; 0
    2d70:	50 e0       	ldi	r21, 0x00	; 0
    2d72:	0e 94 d2 33 	call	0x67a4	; 0x67a4 <__udivmodsi4>
    2d76:	ca 01       	movw	r24, r20
    2d78:	b9 01       	movw	r22, r18
    2d7a:	28 e1       	ldi	r18, 0x18	; 24
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	40 e0       	ldi	r20, 0x00	; 0
    2d80:	50 e0       	ldi	r21, 0x00	; 0
    2d82:	0e 94 d2 33 	call	0x67a4	; 0x67a4 <__udivmodsi4>
    2d86:	6b 83       	std	Y+3, r22	; 0x03
    2d88:	c7 01       	movw	r24, r14
    2d8a:	b6 01       	movw	r22, r12
    2d8c:	20 e8       	ldi	r18, 0x80	; 128
    2d8e:	31 e5       	ldi	r19, 0x51	; 81
    2d90:	41 e0       	ldi	r20, 0x01	; 1
    2d92:	50 e0       	ldi	r21, 0x00	; 0
    2d94:	0e 94 d2 33 	call	0x67a4	; 0x67a4 <__udivmodsi4>
    2d98:	18 82       	st	Y, r1
    2d9a:	88 81       	ld	r24, Y
    2d9c:	98 2f       	mov	r25, r24
    2d9e:	93 70       	andi	r25, 0x03	; 3
    2da0:	41 e0       	ldi	r20, 0x01	; 1
    2da2:	50 e0       	ldi	r21, 0x00	; 0
    2da4:	11 f0       	breq	.+4      	; 0x2daa <_ZN8DateTimeC1Em+0x94>
    2da6:	40 e0       	ldi	r20, 0x00	; 0
    2da8:	50 e0       	ldi	r21, 0x00	; 0
    2daa:	ba 01       	movw	r22, r20
    2dac:	63 59       	subi	r22, 0x93	; 147
    2dae:	7e 4f       	sbci	r23, 0xFE	; 254
    2db0:	26 17       	cp	r18, r22
    2db2:	37 07       	cpc	r19, r23
    2db4:	38 f0       	brcs	.+14     	; 0x2dc4 <_ZN8DateTimeC1Em+0xae>
    2db6:	24 1b       	sub	r18, r20
    2db8:	35 0b       	sbc	r19, r21
    2dba:	2d 56       	subi	r18, 0x6D	; 109
    2dbc:	31 40       	sbci	r19, 0x01	; 1
    2dbe:	8f 5f       	subi	r24, 0xFF	; 255
    2dc0:	88 83       	st	Y, r24
    2dc2:	eb cf       	rjmp	.-42     	; 0x2d9a <_ZN8DateTimeC1Em+0x84>
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	89 83       	std	Y+1, r24	; 0x01
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	e8 2f       	mov	r30, r24
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	e4 5e       	subi	r30, 0xE4	; 228
    2dd0:	fd 4f       	sbci	r31, 0xFD	; 253
    2dd2:	e4 91       	lpm	r30, Z
    2dd4:	91 11       	cpse	r25, r1
    2dd6:	03 c0       	rjmp	.+6      	; 0x2dde <_ZN8DateTimeC1Em+0xc8>
    2dd8:	82 30       	cpi	r24, 0x02	; 2
    2dda:	09 f4       	brne	.+2      	; 0x2dde <_ZN8DateTimeC1Em+0xc8>
    2ddc:	ef 5f       	subi	r30, 0xFF	; 255
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	2e 17       	cp	r18, r30
    2de2:	3f 07       	cpc	r19, r31
    2de4:	20 f0       	brcs	.+8      	; 0x2dee <_ZN8DateTimeC1Em+0xd8>
    2de6:	2e 1b       	sub	r18, r30
    2de8:	3f 0b       	sbc	r19, r31
    2dea:	8f 5f       	subi	r24, 0xFF	; 255
    2dec:	ec cf       	rjmp	.-40     	; 0x2dc6 <_ZN8DateTimeC1Em+0xb0>
    2dee:	2f 5f       	subi	r18, 0xFF	; 255
    2df0:	2a 83       	std	Y+2, r18	; 0x02
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	ff 90       	pop	r15
    2df8:	ef 90       	pop	r14
    2dfa:	df 90       	pop	r13
    2dfc:	cf 90       	pop	r12
    2dfe:	bf 90       	pop	r11
    2e00:	af 90       	pop	r10
    2e02:	9f 90       	pop	r9
    2e04:	8f 90       	pop	r8
    2e06:	08 95       	ret

00002e08 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    2e08:	ef 92       	push	r14
    2e0a:	ff 92       	push	r15
    2e0c:	0f 93       	push	r16
    2e0e:	1f 93       	push	r17
    2e10:	cf 93       	push	r28
    2e12:	df 93       	push	r29
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
    2e18:	2b 97       	sbiw	r28, 0x0b	; 11
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	f8 94       	cli
    2e1e:	de bf       	out	0x3e, r29	; 62
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	cd bf       	out	0x3d, r28	; 61
    2e24:	8c 01       	movw	r16, r24
    2e26:	7a 01       	movw	r14, r20
    2e28:	4b e0       	ldi	r20, 0x0B	; 11
    2e2a:	50 e0       	ldi	r21, 0x00	; 0
    2e2c:	ce 01       	movw	r24, r28
    2e2e:	01 96       	adiw	r24, 0x01	; 1
    2e30:	0e 94 42 36 	call	0x6c84	; 0x6c84 <memcpy_P>
    2e34:	ce 01       	movw	r24, r28
    2e36:	0a 96       	adiw	r24, 0x0a	; 10
    2e38:	61 df       	rcall	.-318    	; 0x2cfc <_ZL6conv2dPKc>
    2e3a:	f8 01       	movw	r30, r16
    2e3c:	80 83       	st	Z, r24
    2e3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e40:	8e 2f       	mov	r24, r30
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	fc 01       	movw	r30, r24
    2e46:	e1 54       	subi	r30, 0x41	; 65
    2e48:	f1 09       	sbc	r31, r1
    2e4a:	e3 31       	cpi	r30, 0x13	; 19
    2e4c:	f1 05       	cpc	r31, r1
    2e4e:	48 f5       	brcc	.+82     	; 0x2ea2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    2e50:	ee 5a       	subi	r30, 0xAE	; 174
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	0c 94 f4 33 	jmp	0x67e8	; 0x67e8 <__tablejump2__>
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	81 36       	cpi	r24, 0x61	; 97
    2e5c:	29 f0       	breq	.+10     	; 0x2e68 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    2e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e60:	8e 36       	cpi	r24, 0x6E	; 110
    2e62:	21 f0       	breq	.+8      	; 0x2e6c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    2e64:	87 e0       	ldi	r24, 0x07	; 7
    2e66:	1b c0       	rjmp	.+54     	; 0x2e9e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	19 c0       	rjmp	.+50     	; 0x2e9e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2e6c:	86 e0       	ldi	r24, 0x06	; 6
    2e6e:	17 c0       	rjmp	.+46     	; 0x2e9e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2e70:	82 e0       	ldi	r24, 0x02	; 2
    2e72:	15 c0       	rjmp	.+42     	; 0x2e9e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2e74:	8b 81       	ldd	r24, Y+3	; 0x03
    2e76:	82 37       	cpi	r24, 0x72	; 114
    2e78:	11 f0       	breq	.+4      	; 0x2e7e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    2e7a:	88 e0       	ldi	r24, 0x08	; 8
    2e7c:	10 c0       	rjmp	.+32     	; 0x2e9e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2e7e:	84 e0       	ldi	r24, 0x04	; 4
    2e80:	0e c0       	rjmp	.+28     	; 0x2e9e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2e82:	8b 81       	ldd	r24, Y+3	; 0x03
    2e84:	82 37       	cpi	r24, 0x72	; 114
    2e86:	11 f0       	breq	.+4      	; 0x2e8c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    2e88:	85 e0       	ldi	r24, 0x05	; 5
    2e8a:	09 c0       	rjmp	.+18     	; 0x2e9e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2e8c:	83 e0       	ldi	r24, 0x03	; 3
    2e8e:	07 c0       	rjmp	.+14     	; 0x2e9e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2e90:	89 e0       	ldi	r24, 0x09	; 9
    2e92:	05 c0       	rjmp	.+10     	; 0x2e9e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2e94:	8a e0       	ldi	r24, 0x0A	; 10
    2e96:	03 c0       	rjmp	.+6      	; 0x2e9e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2e98:	8b e0       	ldi	r24, 0x0B	; 11
    2e9a:	01 c0       	rjmp	.+2      	; 0x2e9e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2e9c:	8c e0       	ldi	r24, 0x0C	; 12
    2e9e:	f8 01       	movw	r30, r16
    2ea0:	81 83       	std	Z+1, r24	; 0x01
    2ea2:	ce 01       	movw	r24, r28
    2ea4:	05 96       	adiw	r24, 0x05	; 5
    2ea6:	2a df       	rcall	.-428    	; 0x2cfc <_ZL6conv2dPKc>
    2ea8:	f8 01       	movw	r30, r16
    2eaa:	82 83       	std	Z+2, r24	; 0x02
    2eac:	48 e0       	ldi	r20, 0x08	; 8
    2eae:	50 e0       	ldi	r21, 0x00	; 0
    2eb0:	b7 01       	movw	r22, r14
    2eb2:	ce 01       	movw	r24, r28
    2eb4:	01 96       	adiw	r24, 0x01	; 1
    2eb6:	0e 94 42 36 	call	0x6c84	; 0x6c84 <memcpy_P>
    2eba:	ce 01       	movw	r24, r28
    2ebc:	01 96       	adiw	r24, 0x01	; 1
    2ebe:	1e df       	rcall	.-452    	; 0x2cfc <_ZL6conv2dPKc>
    2ec0:	f8 01       	movw	r30, r16
    2ec2:	83 83       	std	Z+3, r24	; 0x03
    2ec4:	ce 01       	movw	r24, r28
    2ec6:	04 96       	adiw	r24, 0x04	; 4
    2ec8:	19 df       	rcall	.-462    	; 0x2cfc <_ZL6conv2dPKc>
    2eca:	f8 01       	movw	r30, r16
    2ecc:	84 83       	std	Z+4, r24	; 0x04
    2ece:	ce 01       	movw	r24, r28
    2ed0:	07 96       	adiw	r24, 0x07	; 7
    2ed2:	14 df       	rcall	.-472    	; 0x2cfc <_ZL6conv2dPKc>
    2ed4:	f8 01       	movw	r30, r16
    2ed6:	85 83       	std	Z+5, r24	; 0x05
    2ed8:	2b 96       	adiw	r28, 0x0b	; 11
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	cd bf       	out	0x3d, r28	; 61
    2ee4:	df 91       	pop	r29
    2ee6:	cf 91       	pop	r28
    2ee8:	1f 91       	pop	r17
    2eea:	0f 91       	pop	r16
    2eec:	ff 90       	pop	r15
    2eee:	ef 90       	pop	r14
    2ef0:	08 95       	ret

00002ef2 <_ZNK8DateTime12dayOfTheWeekEv>:
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	80 81       	ld	r24, Z
    2ef6:	42 81       	ldd	r20, Z+2	; 0x02
    2ef8:	61 81       	ldd	r22, Z+1	; 0x01
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	cd de       	rcall	.-614    	; 0x2c98 <_ZL9date2daysjhh>
    2efe:	06 96       	adiw	r24, 0x06	; 6
    2f00:	67 e0       	ldi	r22, 0x07	; 7
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	0c 94 be 33 	jmp	0x677c	; 0x677c <__udivmodhi4>
    2f08:	08 95       	ret

00002f0a <_ZNK8DateTime8unixtimeEv>:
    2f0a:	ef 92       	push	r14
    2f0c:	ff 92       	push	r15
    2f0e:	0f 93       	push	r16
    2f10:	1f 93       	push	r17
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	ec 01       	movw	r28, r24
    2f18:	88 81       	ld	r24, Y
    2f1a:	4a 81       	ldd	r20, Y+2	; 0x02
    2f1c:	69 81       	ldd	r22, Y+1	; 0x01
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	bb de       	rcall	.-650    	; 0x2c98 <_ZL9date2daysjhh>
    2f22:	9c 01       	movw	r18, r24
    2f24:	a8 e1       	ldi	r26, 0x18	; 24
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	0e 94 fd 33 	call	0x67fa	; 0x67fa <__umulhisi3>
    2f2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f2e:	7b 01       	movw	r14, r22
    2f30:	8c 01       	movw	r16, r24
    2f32:	e2 0e       	add	r14, r18
    2f34:	f1 1c       	adc	r15, r1
    2f36:	01 1d       	adc	r16, r1
    2f38:	11 1d       	adc	r17, r1
    2f3a:	a8 01       	movw	r20, r16
    2f3c:	97 01       	movw	r18, r14
    2f3e:	ac e3       	ldi	r26, 0x3C	; 60
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	0e 94 0c 34 	call	0x6818	; 0x6818 <__muluhisi3>
    2f46:	2c 81       	ldd	r18, Y+4	; 0x04
    2f48:	7b 01       	movw	r14, r22
    2f4a:	8c 01       	movw	r16, r24
    2f4c:	e2 0e       	add	r14, r18
    2f4e:	f1 1c       	adc	r15, r1
    2f50:	01 1d       	adc	r16, r1
    2f52:	11 1d       	adc	r17, r1
    2f54:	a8 01       	movw	r20, r16
    2f56:	97 01       	movw	r18, r14
    2f58:	0e 94 0c 34 	call	0x6818	; 0x6818 <__muluhisi3>
    2f5c:	2d 81       	ldd	r18, Y+5	; 0x05
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	82 0f       	add	r24, r18
    2f64:	91 1d       	adc	r25, r1
    2f66:	a1 1d       	adc	r26, r1
    2f68:	b1 1d       	adc	r27, r1
    2f6a:	bc 01       	movw	r22, r24
    2f6c:	cd 01       	movw	r24, r26
    2f6e:	60 58       	subi	r22, 0x80	; 128
    2f70:	7c 4b       	sbci	r23, 0xBC	; 188
    2f72:	82 49       	sbci	r24, 0x92	; 146
    2f74:	97 4c       	sbci	r25, 0xC7	; 199
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	1f 91       	pop	r17
    2f7c:	0f 91       	pop	r16
    2f7e:	ff 90       	pop	r15
    2f80:	ef 90       	pop	r14
    2f82:	08 95       	ret

00002f84 <_ZNK8DateTime11secondstimeEv>:
    2f84:	ef 92       	push	r14
    2f86:	ff 92       	push	r15
    2f88:	0f 93       	push	r16
    2f8a:	1f 93       	push	r17
    2f8c:	cf 93       	push	r28
    2f8e:	df 93       	push	r29
    2f90:	ec 01       	movw	r28, r24
    2f92:	88 81       	ld	r24, Y
    2f94:	4a 81       	ldd	r20, Y+2	; 0x02
    2f96:	69 81       	ldd	r22, Y+1	; 0x01
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	7e de       	rcall	.-772    	; 0x2c98 <_ZL9date2daysjhh>
    2f9c:	9c 01       	movw	r18, r24
    2f9e:	a8 e1       	ldi	r26, 0x18	; 24
    2fa0:	b0 e0       	ldi	r27, 0x00	; 0
    2fa2:	0e 94 fd 33 	call	0x67fa	; 0x67fa <__umulhisi3>
    2fa6:	2b 81       	ldd	r18, Y+3	; 0x03
    2fa8:	7b 01       	movw	r14, r22
    2faa:	8c 01       	movw	r16, r24
    2fac:	e2 0e       	add	r14, r18
    2fae:	f1 1c       	adc	r15, r1
    2fb0:	01 1d       	adc	r16, r1
    2fb2:	11 1d       	adc	r17, r1
    2fb4:	a8 01       	movw	r20, r16
    2fb6:	97 01       	movw	r18, r14
    2fb8:	ac e3       	ldi	r26, 0x3C	; 60
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	0e 94 0c 34 	call	0x6818	; 0x6818 <__muluhisi3>
    2fc0:	2c 81       	ldd	r18, Y+4	; 0x04
    2fc2:	7b 01       	movw	r14, r22
    2fc4:	8c 01       	movw	r16, r24
    2fc6:	e2 0e       	add	r14, r18
    2fc8:	f1 1c       	adc	r15, r1
    2fca:	01 1d       	adc	r16, r1
    2fcc:	11 1d       	adc	r17, r1
    2fce:	a8 01       	movw	r20, r16
    2fd0:	97 01       	movw	r18, r14
    2fd2:	0e 94 0c 34 	call	0x6818	; 0x6818 <__muluhisi3>
    2fd6:	2d 81       	ldd	r18, Y+5	; 0x05
    2fd8:	62 0f       	add	r22, r18
    2fda:	71 1d       	adc	r23, r1
    2fdc:	81 1d       	adc	r24, r1
    2fde:	91 1d       	adc	r25, r1
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	1f 91       	pop	r17
    2fe6:	0f 91       	pop	r16
    2fe8:	ff 90       	pop	r15
    2fea:	ef 90       	pop	r14
    2fec:	08 95       	ret

00002fee <_ZN13DS3231M_ClassC1Ev>:
    2fee:	fc 01       	movw	r30, r24
    2ff0:	10 82       	st	Z, r1
    2ff2:	11 82       	std	Z+1, r1	; 0x01
    2ff4:	12 82       	std	Z+2, r1	; 0x02
    2ff6:	13 82       	std	Z+3, r1	; 0x03
    2ff8:	14 82       	std	Z+4, r1	; 0x04
    2ffa:	08 95       	ret

00002ffc <_ZN13DS3231M_ClassD1Ev>:
    2ffc:	08 95       	ret

00002ffe <_ZN13DS3231M_Class9writeByteEhh>:
    2ffe:	0f 93       	push	r16
    3000:	1f 93       	push	r17
    3002:	cf 93       	push	r28
    3004:	df 93       	push	r29
    3006:	ec 01       	movw	r28, r24
    3008:	06 2f       	mov	r16, r22
    300a:	14 2f       	mov	r17, r20
    300c:	68 e6       	ldi	r22, 0x68	; 104
    300e:	82 e3       	ldi	r24, 0x32	; 50
    3010:	9a e0       	ldi	r25, 0x0A	; 10
    3012:	0e 94 b0 2a 	call	0x5560	; 0x5560 <_ZN7TwoWire17beginTransmissionEh>
    3016:	60 2f       	mov	r22, r16
    3018:	82 e3       	ldi	r24, 0x32	; 50
    301a:	9a e0       	ldi	r25, 0x0A	; 10
    301c:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
    3020:	61 2f       	mov	r22, r17
    3022:	82 e3       	ldi	r24, 0x32	; 50
    3024:	9a e0       	ldi	r25, 0x0A	; 10
    3026:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
    302a:	82 e3       	ldi	r24, 0x32	; 50
    302c:	9a e0       	ldi	r25, 0x0A	; 10
    302e:	0e 94 31 2b 	call	0x5662	; 0x5662 <_ZN7TwoWire15endTransmissionEv>
    3032:	88 83       	st	Y, r24
    3034:	df 91       	pop	r29
    3036:	cf 91       	pop	r28
    3038:	1f 91       	pop	r17
    303a:	0f 91       	pop	r16
    303c:	08 95       	ret

0000303e <_ZN13DS3231M_Class8readByteEh>:
    303e:	1f 93       	push	r17
    3040:	cf 93       	push	r28
    3042:	df 93       	push	r29
    3044:	ec 01       	movw	r28, r24
    3046:	16 2f       	mov	r17, r22
    3048:	68 e6       	ldi	r22, 0x68	; 104
    304a:	82 e3       	ldi	r24, 0x32	; 50
    304c:	9a e0       	ldi	r25, 0x0A	; 10
    304e:	0e 94 b0 2a 	call	0x5560	; 0x5560 <_ZN7TwoWire17beginTransmissionEh>
    3052:	61 2f       	mov	r22, r17
    3054:	82 e3       	ldi	r24, 0x32	; 50
    3056:	9a e0       	ldi	r25, 0x0A	; 10
    3058:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
    305c:	82 e3       	ldi	r24, 0x32	; 50
    305e:	9a e0       	ldi	r25, 0x0A	; 10
    3060:	0e 94 31 2b 	call	0x5662	; 0x5662 <_ZN7TwoWire15endTransmissionEv>
    3064:	88 83       	st	Y, r24
    3066:	41 e0       	ldi	r20, 0x01	; 1
    3068:	68 e6       	ldi	r22, 0x68	; 104
    306a:	82 e3       	ldi	r24, 0x32	; 50
    306c:	9a e0       	ldi	r25, 0x0A	; 10
    306e:	0e 94 2d 2b 	call	0x565a	; 0x565a <_ZN7TwoWire11requestFromEhh>
    3072:	82 e3       	ldi	r24, 0x32	; 50
    3074:	9a e0       	ldi	r25, 0x0A	; 10
    3076:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZN7TwoWire4readEv>
    307a:	df 91       	pop	r29
    307c:	cf 91       	pop	r28
    307e:	1f 91       	pop	r17
    3080:	08 95       	ret

00003082 <_ZN13DS3231M_Class5beginEm>:
    3082:	cf 92       	push	r12
    3084:	df 92       	push	r13
    3086:	ef 92       	push	r14
    3088:	ff 92       	push	r15
    308a:	cf 93       	push	r28
    308c:	df 93       	push	r29
    308e:	ec 01       	movw	r28, r24
    3090:	6a 01       	movw	r12, r20
    3092:	7b 01       	movw	r14, r22
    3094:	82 e3       	ldi	r24, 0x32	; 50
    3096:	9a e0       	ldi	r25, 0x0A	; 10
    3098:	0e 94 9d 2a 	call	0x553a	; 0x553a <_ZN7TwoWire5beginEv>
    309c:	b7 01       	movw	r22, r14
    309e:	a6 01       	movw	r20, r12
    30a0:	82 e3       	ldi	r24, 0x32	; 50
    30a2:	9a e0       	ldi	r25, 0x0A	; 10
    30a4:	0e 94 ad 2a 	call	0x555a	; 0x555a <_ZN7TwoWire8setClockEm>
    30a8:	68 e6       	ldi	r22, 0x68	; 104
    30aa:	82 e3       	ldi	r24, 0x32	; 50
    30ac:	9a e0       	ldi	r25, 0x0A	; 10
    30ae:	0e 94 b0 2a 	call	0x5560	; 0x5560 <_ZN7TwoWire17beginTransmissionEh>
    30b2:	82 e3       	ldi	r24, 0x32	; 50
    30b4:	9a e0       	ldi	r25, 0x0A	; 10
    30b6:	0e 94 31 2b 	call	0x5662	; 0x5662 <_ZN7TwoWire15endTransmissionEv>
    30ba:	81 11       	cpse	r24, r1
    30bc:	0a c0       	rjmp	.+20     	; 0x30d2 <_ZN13DS3231M_Class5beginEm+0x50>
    30be:	62 e0       	ldi	r22, 0x02	; 2
    30c0:	ce 01       	movw	r24, r28
    30c2:	bd df       	rcall	.-134    	; 0x303e <_ZN13DS3231M_Class8readByteEh>
    30c4:	48 2f       	mov	r20, r24
    30c6:	4f 7b       	andi	r20, 0xBF	; 191
    30c8:	62 e0       	ldi	r22, 0x02	; 2
    30ca:	ce 01       	movw	r24, r28
    30cc:	98 df       	rcall	.-208    	; 0x2ffe <_ZN13DS3231M_Class9writeByteEhh>
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	01 c0       	rjmp	.+2      	; 0x30d4 <_ZN13DS3231M_Class5beginEm+0x52>
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	df 91       	pop	r29
    30d6:	cf 91       	pop	r28
    30d8:	ff 90       	pop	r15
    30da:	ef 90       	pop	r14
    30dc:	df 90       	pop	r13
    30de:	cf 90       	pop	r12
    30e0:	08 95       	ret

000030e2 <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    30e2:	0f 93       	push	r16
    30e4:	1f 93       	push	r17
    30e6:	cf 93       	push	r28
    30e8:	df 93       	push	r29
    30ea:	8c 01       	movw	r16, r24
    30ec:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    30ee:	68 e6       	ldi	r22, 0x68	; 104
    30f0:	82 e3       	ldi	r24, 0x32	; 50
    30f2:	9a e0       	ldi	r25, 0x0A	; 10
    30f4:	0e 94 b0 2a 	call	0x5560	; 0x5560 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    30f8:	60 e0       	ldi	r22, 0x00	; 0
    30fa:	82 e3       	ldi	r24, 0x32	; 50
    30fc:	9a e0       	ldi	r25, 0x0A	; 10
    30fe:	0e 94 5f 2a 	call	0x54be	; 0x54be <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    3102:	82 e3       	ldi	r24, 0x32	; 50
    3104:	9a e0       	ldi	r25, 0x0A	; 10
    3106:	0e 94 31 2b 	call	0x5662	; 0x5662 <_ZN7TwoWire15endTransmissionEv>
    310a:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    310c:	47 e0       	ldi	r20, 0x07	; 7
    310e:	68 e6       	ldi	r22, 0x68	; 104
    3110:	82 e3       	ldi	r24, 0x32	; 50
    3112:	9a e0       	ldi	r25, 0x0A	; 10
    3114:	0e 94 2d 2b 	call	0x565a	; 0x565a <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    3118:	82 e3       	ldi	r24, 0x32	; 50
    311a:	9a e0       	ldi	r25, 0x0A	; 10
    311c:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <_ZN7TwoWire9availableEv>
    3120:	07 97       	sbiw	r24, 0x07	; 7
    3122:	09 f0       	breq	.+2      	; 0x3126 <_ZN13DS3231M_Class3nowEv+0x44>
    3124:	64 c0       	rjmp	.+200    	; 0x31ee <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    3126:	82 e3       	ldi	r24, 0x32	; 50
    3128:	9a e0       	ldi	r25, 0x0A	; 10
    312a:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZN7TwoWire4readEv>
    312e:	98 2f       	mov	r25, r24
    3130:	96 95       	lsr	r25
    3132:	96 95       	lsr	r25
    3134:	96 95       	lsr	r25
    3136:	9e 70       	andi	r25, 0x0E	; 14
    3138:	29 2f       	mov	r18, r25
    313a:	22 0f       	add	r18, r18
    313c:	22 0f       	add	r18, r18
    313e:	92 0f       	add	r25, r18
    3140:	8f 70       	andi	r24, 0x0F	; 15
    3142:	89 0f       	add	r24, r25
    3144:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    3146:	82 e3       	ldi	r24, 0x32	; 50
    3148:	9a e0       	ldi	r25, 0x0A	; 10
    314a:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZN7TwoWire4readEv>
    314e:	98 2f       	mov	r25, r24
    3150:	96 95       	lsr	r25
    3152:	96 95       	lsr	r25
    3154:	96 95       	lsr	r25
    3156:	9e 70       	andi	r25, 0x0E	; 14
    3158:	29 2f       	mov	r18, r25
    315a:	22 0f       	add	r18, r18
    315c:	22 0f       	add	r18, r18
    315e:	92 0f       	add	r25, r18
    3160:	8f 70       	andi	r24, 0x0F	; 15
    3162:	89 0f       	add	r24, r25
    3164:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    3166:	82 e3       	ldi	r24, 0x32	; 50
    3168:	9a e0       	ldi	r25, 0x0A	; 10
    316a:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZN7TwoWire4readEv>
    316e:	98 2f       	mov	r25, r24
    3170:	96 95       	lsr	r25
    3172:	96 95       	lsr	r25
    3174:	96 95       	lsr	r25
    3176:	9e 70       	andi	r25, 0x0E	; 14
    3178:	29 2f       	mov	r18, r25
    317a:	22 0f       	add	r18, r18
    317c:	22 0f       	add	r18, r18
    317e:	92 0f       	add	r25, r18
    3180:	8f 70       	andi	r24, 0x0F	; 15
    3182:	89 0f       	add	r24, r25
    3184:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    3186:	82 e3       	ldi	r24, 0x32	; 50
    3188:	9a e0       	ldi	r25, 0x0A	; 10
    318a:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    318e:	82 e3       	ldi	r24, 0x32	; 50
    3190:	9a e0       	ldi	r25, 0x0A	; 10
    3192:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZN7TwoWire4readEv>
    3196:	98 2f       	mov	r25, r24
    3198:	96 95       	lsr	r25
    319a:	96 95       	lsr	r25
    319c:	96 95       	lsr	r25
    319e:	96 70       	andi	r25, 0x06	; 6
    31a0:	29 2f       	mov	r18, r25
    31a2:	22 0f       	add	r18, r18
    31a4:	22 0f       	add	r18, r18
    31a6:	92 0f       	add	r25, r18
    31a8:	8f 70       	andi	r24, 0x0F	; 15
    31aa:	89 0f       	add	r24, r25
    31ac:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    31ae:	82 e3       	ldi	r24, 0x32	; 50
    31b0:	9a e0       	ldi	r25, 0x0A	; 10
    31b2:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZN7TwoWire4readEv>
    31b6:	84 fb       	bst	r24, 4
    31b8:	99 27       	eor	r25, r25
    31ba:	90 f9       	bld	r25, 0
    31bc:	99 0f       	add	r25, r25
    31be:	29 2f       	mov	r18, r25
    31c0:	22 0f       	add	r18, r18
    31c2:	22 0f       	add	r18, r18
    31c4:	92 0f       	add	r25, r18
    31c6:	8f 70       	andi	r24, 0x0F	; 15
    31c8:	89 0f       	add	r24, r25
    31ca:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    31cc:	82 e3       	ldi	r24, 0x32	; 50
    31ce:	9a e0       	ldi	r25, 0x0A	; 10
    31d0:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZN7TwoWire4readEv>
    31d4:	98 2f       	mov	r25, r24
    31d6:	92 95       	swap	r25
    31d8:	9f 70       	andi	r25, 0x0F	; 15
    31da:	8f 70       	andi	r24, 0x0F	; 15
    31dc:	2a e0       	ldi	r18, 0x0A	; 10
    31de:	92 9f       	mul	r25, r18
    31e0:	80 0d       	add	r24, r0
    31e2:	11 24       	eor	r1, r1
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	80 53       	subi	r24, 0x30	; 48
    31e8:	98 4f       	sbci	r25, 0xF8	; 248
    31ea:	9b 87       	std	Y+11, r25	; 0x0b
    31ec:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    31ee:	2d 81       	ldd	r18, Y+5	; 0x05
    31f0:	3e 81       	ldd	r19, Y+6	; 0x06
    31f2:	4f 81       	ldd	r20, Y+7	; 0x07
    31f4:	58 85       	ldd	r21, Y+8	; 0x08
    31f6:	69 85       	ldd	r22, Y+9	; 0x09
    31f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    31fa:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    31fc:	80 3d       	cpi	r24, 0xD0	; 208
    31fe:	77 e0       	ldi	r23, 0x07	; 7
    3200:	97 07       	cpc	r25, r23
    3202:	10 f0       	brcs	.+4      	; 0x3208 <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    3204:	80 5d       	subi	r24, 0xD0	; 208
    3206:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    3208:	f8 01       	movw	r30, r16
    320a:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    320c:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    320e:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    3210:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    3212:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    3214:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    3216:	c8 01       	movw	r24, r16
    3218:	df 91       	pop	r29
    321a:	cf 91       	pop	r28
    321c:	1f 91       	pop	r17
    321e:	0f 91       	pop	r16
    3220:	08 95       	ret

00003222 <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    3222:	df 92       	push	r13
    3224:	ef 92       	push	r14
    3226:	ff 92       	push	r15
    3228:	0f 93       	push	r16
    322a:	1f 93       	push	r17
    322c:	cf 93       	push	r28
    322e:	df 93       	push	r29
    3230:	00 d0       	rcall	.+0      	; 0x3232 <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    3232:	00 d0       	rcall	.+0      	; 0x3234 <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    3234:	00 d0       	rcall	.+0      	; 0x3236 <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    3236:	cd b7       	in	r28, 0x3d	; 61
    3238:	de b7       	in	r29, 0x3e	; 62
    323a:	8c 01       	movw	r16, r24
    323c:	7b 01       	movw	r14, r22
    323e:	fb 01       	movw	r30, r22
    3240:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    3242:	9a e0       	ldi	r25, 0x0A	; 10
    3244:	d9 2e       	mov	r13, r25
    3246:	6d 2d       	mov	r22, r13
    3248:	0e 94 b2 33 	call	0x6764	; 0x6764 <__udivmodqi4>
    324c:	49 2f       	mov	r20, r25
    324e:	f0 e1       	ldi	r31, 0x10	; 16
    3250:	8f 9f       	mul	r24, r31
    3252:	40 0d       	add	r20, r0
    3254:	11 24       	eor	r1, r1
    3256:	60 e0       	ldi	r22, 0x00	; 0
    3258:	c8 01       	movw	r24, r16
    325a:	d1 de       	rcall	.-606    	; 0x2ffe <_ZN13DS3231M_Class9writeByteEhh>
    325c:	f7 01       	movw	r30, r14
    325e:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    3260:	6d 2d       	mov	r22, r13
    3262:	0e 94 b2 33 	call	0x6764	; 0x6764 <__udivmodqi4>
    3266:	49 2f       	mov	r20, r25
    3268:	f0 e1       	ldi	r31, 0x10	; 16
    326a:	8f 9f       	mul	r24, r31
    326c:	40 0d       	add	r20, r0
    326e:	11 24       	eor	r1, r1
    3270:	61 e0       	ldi	r22, 0x01	; 1
    3272:	c8 01       	movw	r24, r16
    3274:	c4 de       	rcall	.-632    	; 0x2ffe <_ZN13DS3231M_Class9writeByteEhh>
    3276:	f7 01       	movw	r30, r14
    3278:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    327a:	6d 2d       	mov	r22, r13
    327c:	0e 94 b2 33 	call	0x6764	; 0x6764 <__udivmodqi4>
    3280:	49 2f       	mov	r20, r25
    3282:	f0 e1       	ldi	r31, 0x10	; 16
    3284:	8f 9f       	mul	r24, r31
    3286:	40 0d       	add	r20, r0
    3288:	11 24       	eor	r1, r1
    328a:	62 e0       	ldi	r22, 0x02	; 2
    328c:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    328e:	b7 de       	rcall	.-658    	; 0x2ffe <_ZN13DS3231M_Class9writeByteEhh>
    3290:	c7 01       	movw	r24, r14
    3292:	2f de       	rcall	.-930    	; 0x2ef2 <_ZNK8DateTime12dayOfTheWeekEv>
    3294:	48 2f       	mov	r20, r24
    3296:	63 e0       	ldi	r22, 0x03	; 3
    3298:	c8 01       	movw	r24, r16
    329a:	b1 de       	rcall	.-670    	; 0x2ffe <_ZN13DS3231M_Class9writeByteEhh>
    329c:	f7 01       	movw	r30, r14
    329e:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    32a0:	6d 2d       	mov	r22, r13
    32a2:	0e 94 b2 33 	call	0x6764	; 0x6764 <__udivmodqi4>
    32a6:	49 2f       	mov	r20, r25
    32a8:	f0 e1       	ldi	r31, 0x10	; 16
    32aa:	8f 9f       	mul	r24, r31
    32ac:	40 0d       	add	r20, r0
    32ae:	11 24       	eor	r1, r1
    32b0:	64 e0       	ldi	r22, 0x04	; 4
    32b2:	c8 01       	movw	r24, r16
    32b4:	a4 de       	rcall	.-696    	; 0x2ffe <_ZN13DS3231M_Class9writeByteEhh>
    32b6:	f7 01       	movw	r30, r14
    32b8:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    32ba:	6d 2d       	mov	r22, r13
    32bc:	0e 94 b2 33 	call	0x6764	; 0x6764 <__udivmodqi4>
    32c0:	49 2f       	mov	r20, r25
    32c2:	f0 e1       	ldi	r31, 0x10	; 16
    32c4:	8f 9f       	mul	r24, r31
    32c6:	40 0d       	add	r20, r0
    32c8:	11 24       	eor	r1, r1
    32ca:	65 e0       	ldi	r22, 0x05	; 5
    32cc:	c8 01       	movw	r24, r16
    32ce:	97 de       	rcall	.-722    	; 0x2ffe <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    32d0:	f7 01       	movw	r30, r14
    32d2:	80 81       	ld	r24, Z
    32d4:	6d 2d       	mov	r22, r13
    32d6:	0e 94 b2 33 	call	0x6764	; 0x6764 <__udivmodqi4>
    32da:	49 2f       	mov	r20, r25
    32dc:	f0 e1       	ldi	r31, 0x10	; 16
    32de:	8f 9f       	mul	r24, r31
    32e0:	40 0d       	add	r20, r0
    32e2:	11 24       	eor	r1, r1
    32e4:	66 e0       	ldi	r22, 0x06	; 6
    32e6:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    32e8:	8a de       	rcall	.-748    	; 0x2ffe <_ZN13DS3231M_Class9writeByteEhh>
    32ea:	6f e0       	ldi	r22, 0x0F	; 15
    32ec:	c8 01       	movw	r24, r16
    32ee:	a7 de       	rcall	.-690    	; 0x303e <_ZN13DS3231M_Class8readByteEh>
    32f0:	48 2f       	mov	r20, r24
    32f2:	4f 77       	andi	r20, 0x7F	; 127
    32f4:	6f e0       	ldi	r22, 0x0F	; 15
    32f6:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    32f8:	82 de       	rcall	.-764    	; 0x2ffe <_ZN13DS3231M_Class9writeByteEhh>
    32fa:	6e e0       	ldi	r22, 0x0E	; 14
    32fc:	c8 01       	movw	r24, r16
    32fe:	9f de       	rcall	.-706    	; 0x303e <_ZN13DS3231M_Class8readByteEh>
    3300:	48 2f       	mov	r20, r24
    3302:	4f 77       	andi	r20, 0x7F	; 127
    3304:	6e e0       	ldi	r22, 0x0E	; 14
    3306:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    3308:	7a de       	rcall	.-780    	; 0x2ffe <_ZN13DS3231M_Class9writeByteEhh>
    330a:	b8 01       	movw	r22, r16
    330c:	ce 01       	movw	r24, r28
    330e:	01 96       	adiw	r24, 0x01	; 1
    3310:	e8 de       	rcall	.-560    	; 0x30e2 <_ZN13DS3231M_Class3nowEv>
    3312:	ce 01       	movw	r24, r28
    3314:	01 96       	adiw	r24, 0x01	; 1
    3316:	f9 dd       	rcall	.-1038   	; 0x2f0a <_ZNK8DateTime8unixtimeEv>
    3318:	f8 01       	movw	r30, r16
    331a:	61 83       	std	Z+1, r22	; 0x01
    331c:	72 83       	std	Z+2, r23	; 0x02
    331e:	83 83       	std	Z+3, r24	; 0x03
    3320:	94 83       	std	Z+4, r25	; 0x04
    3322:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	de bf       	out	0x3e, r29	; 62
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	cd bf       	out	0x3d, r28	; 61
    332e:	df 91       	pop	r29
    3330:	cf 91       	pop	r28
    3332:	1f 91       	pop	r17
    3334:	0f 91       	pop	r16
    3336:	ff 90       	pop	r15
    3338:	ef 90       	pop	r14
    333a:	df 90       	pop	r13
    333c:	08 95       	ret

0000333e <_ZN13DS3231M_Class6adjustEv>:
    333e:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    3340:	1f 93       	push	r17
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	00 d0       	rcall	.+0      	; 0x3348 <_ZN13DS3231M_Class6adjustEv+0xa>
    3348:	00 d0       	rcall	.+0      	; 0x334a <_ZN13DS3231M_Class6adjustEv+0xc>
    334a:	00 d0       	rcall	.+0      	; 0x334c <_ZN13DS3231M_Class6adjustEv+0xe>
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
    3350:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    3352:	44 e1       	ldi	r20, 0x14	; 20
    3354:	52 e0       	ldi	r21, 0x02	; 2
    3356:	68 e0       	ldi	r22, 0x08	; 8
    3358:	72 e0       	ldi	r23, 0x02	; 2
    335a:	ce 01       	movw	r24, r28
    335c:	01 96       	adiw	r24, 0x01	; 1
    335e:	54 dd       	rcall	.-1368   	; 0x2e08 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    3360:	be 01       	movw	r22, r28
    3362:	6f 5f       	subi	r22, 0xFF	; 255
    3364:	7f 4f       	sbci	r23, 0xFF	; 255
    3366:	c8 01       	movw	r24, r16
    3368:	5c df       	rcall	.-328    	; 0x3222 <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    336a:	26 96       	adiw	r28, 0x06	; 6
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	df 91       	pop	r29
    3378:	cf 91       	pop	r28
    337a:	1f 91       	pop	r17
    337c:	0f 91       	pop	r16
    337e:	08 95       	ret

00003380 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    3380:	0f 93       	push	r16
    3382:	00 e0       	ldi	r16, 0x00	; 0
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	40 e0       	ldi	r20, 0x00	; 0
    3388:	60 e0       	ldi	r22, 0x00	; 0
    338a:	89 e7       	ldi	r24, 0x79	; 121
    338c:	99 e0       	ldi	r25, 0x09	; 9
    338e:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <_ZN9IPAddressC1Ehhhh>
    3392:	0f 91       	pop	r16
    3394:	08 95       	ret

00003396 <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3396:	fb 01       	movw	r30, r22
    3398:	42 81       	ldd	r20, Z+2	; 0x02
    339a:	53 81       	ldd	r21, Z+3	; 0x03
    339c:	64 81       	ldd	r22, Z+4	; 0x04
    339e:	75 81       	ldd	r23, Z+5	; 0x05
    33a0:	fc 01       	movw	r30, r24
    33a2:	42 83       	std	Z+2, r20	; 0x02
    33a4:	53 83       	std	Z+3, r21	; 0x03
    33a6:	64 83       	std	Z+4, r22	; 0x04
    33a8:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    33aa:	17 82       	std	Z+7, r1	; 0x07
    33ac:	16 82       	std	Z+6, r1	; 0x06
    33ae:	08 95       	ret

000033b0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    33b0:	cf 93       	push	r28
    33b2:	df 93       	push	r29
    33b4:	da 01       	movw	r26, r20
    33b6:	fb 01       	movw	r30, r22
    33b8:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    33ba:	89 91       	ld	r24, Y+
    33bc:	81 11       	cpse	r24, r1
    33be:	fd cf       	rjmp	.-6      	; 0x33ba <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    33c8:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    33ca:	51 91       	ld	r21, Z+
    33cc:	55 23       	and	r21, r21
    33ce:	e9 f0       	breq	.+58     	; 0x340a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    33d0:	24 30       	cpi	r18, 0x04	; 4
    33d2:	31 05       	cpc	r19, r1
    33d4:	44 f5       	brge	.+80     	; 0x3426 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    33d6:	5e 32       	cpi	r21, 0x2E	; 46
    33d8:	69 f4       	brne	.+26     	; 0x33f4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    33da:	8f 3f       	cpi	r24, 0xFF	; 255
    33dc:	91 05       	cpc	r25, r1
    33de:	09 f0       	breq	.+2      	; 0x33e2 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    33e0:	14 f5       	brge	.+68     	; 0x3426 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    33e2:	ed 01       	movw	r28, r26
    33e4:	c2 0f       	add	r28, r18
    33e6:	d3 1f       	adc	r29, r19
    33e8:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    33ea:	2f 5f       	subi	r18, 0xFF	; 255
    33ec:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	eb cf       	rjmp	.-42     	; 0x33ca <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    33f4:	48 9f       	mul	r20, r24
    33f6:	b0 01       	movw	r22, r0
    33f8:	49 9f       	mul	r20, r25
    33fa:	70 0d       	add	r23, r0
    33fc:	11 24       	eor	r1, r1
    33fe:	85 2f       	mov	r24, r21
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	c0 97       	sbiw	r24, 0x30	; 48
    3404:	86 0f       	add	r24, r22
    3406:	97 1f       	adc	r25, r23
    3408:	e0 cf       	rjmp	.-64     	; 0x33ca <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    340a:	8f 3f       	cpi	r24, 0xFF	; 255
    340c:	91 05       	cpc	r25, r1
    340e:	09 f0       	breq	.+2      	; 0x3412 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    3410:	54 f4       	brge	.+20     	; 0x3426 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    3412:	24 30       	cpi	r18, 0x04	; 4
    3414:	31 05       	cpc	r19, r1
    3416:	3c f4       	brge	.+14     	; 0x3426 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    3418:	fd 01       	movw	r30, r26
    341a:	e2 0f       	add	r30, r18
    341c:	f3 1f       	adc	r31, r19
    341e:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	02 c0       	rjmp	.+4      	; 0x342a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    342a:	df 91       	pop	r29
    342c:	cf 91       	pop	r28
    342e:	08 95       	ret

00003430 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    3430:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3432:	00 e0       	ldi	r16, 0x00	; 0
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	40 e0       	ldi	r20, 0x00	; 0
    3438:	60 e0       	ldi	r22, 0x00	; 0
    343a:	8f e7       	ldi	r24, 0x7F	; 127
    343c:	99 e0       	ldi	r25, 0x09	; 9
    343e:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <_ZN9IPAddressC1Ehhhh>
    3442:	0f 91       	pop	r16
    3444:	08 95       	ret

00003446 <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    3446:	8f 92       	push	r8
    3448:	9f 92       	push	r9
    344a:	af 92       	push	r10
    344c:	bf 92       	push	r11
    344e:	cf 92       	push	r12
    3450:	df 92       	push	r13
    3452:	ef 92       	push	r14
    3454:	ff 92       	push	r15
    3456:	0f 93       	push	r16
    3458:	1f 93       	push	r17
    345a:	cf 93       	push	r28
    345c:	df 93       	push	r29
    345e:	00 d0       	rcall	.+0      	; 0x3460 <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    3460:	1f 92       	push	r1
    3462:	cd b7       	in	r28, 0x3d	; 61
    3464:	de b7       	in	r29, 0x3e	; 62
    3466:	6c 01       	movw	r12, r24
    3468:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    346a:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <millis>
    346e:	f6 01       	movw	r30, r12
    3470:	77 83       	std	Z+7, r23	; 0x07
    3472:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    3474:	86 01       	movw	r16, r12
    3476:	08 5f       	subi	r16, 0xF8	; 248
    3478:	1f 4f       	sbci	r17, 0xFF	; 255
    347a:	b6 01       	movw	r22, r12
    347c:	6a 5f       	subi	r22, 0xFA	; 250
    347e:	7f 4f       	sbci	r23, 0xFF	; 255
    3480:	42 e0       	ldi	r20, 0x02	; 2
    3482:	50 e0       	ldi	r21, 0x00	; 0
    3484:	c8 01       	movw	r24, r16
    3486:	30 d5       	rcall	.+2656   	; 0x3ee8 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	9a 83       	std	Y+2, r25	; 0x02
    348e:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3490:	42 e0       	ldi	r20, 0x02	; 2
    3492:	50 e0       	ldi	r21, 0x00	; 0
    3494:	be 01       	movw	r22, r28
    3496:	6f 5f       	subi	r22, 0xFF	; 255
    3498:	7f 4f       	sbci	r23, 0xFF	; 255
    349a:	c8 01       	movw	r24, r16
    349c:	25 d5       	rcall	.+2634   	; 0x3ee8 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	91 e0       	ldi	r25, 0x01	; 1
    34a2:	9a 83       	std	Y+2, r25	; 0x02
    34a4:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    34a6:	42 e0       	ldi	r20, 0x02	; 2
    34a8:	50 e0       	ldi	r21, 0x00	; 0
    34aa:	be 01       	movw	r22, r28
    34ac:	6f 5f       	subi	r22, 0xFF	; 255
    34ae:	7f 4f       	sbci	r23, 0xFF	; 255
    34b0:	c8 01       	movw	r24, r16
    34b2:	1a d5       	rcall	.+2612   	; 0x3ee8 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    34b4:	1a 82       	std	Y+2, r1	; 0x02
    34b6:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    34b8:	42 e0       	ldi	r20, 0x02	; 2
    34ba:	50 e0       	ldi	r21, 0x00	; 0
    34bc:	be 01       	movw	r22, r28
    34be:	6f 5f       	subi	r22, 0xFF	; 255
    34c0:	7f 4f       	sbci	r23, 0xFF	; 255
    34c2:	c8 01       	movw	r24, r16
    34c4:	11 d5       	rcall	.+2594   	; 0x3ee8 <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    34c6:	42 e0       	ldi	r20, 0x02	; 2
    34c8:	50 e0       	ldi	r21, 0x00	; 0
    34ca:	be 01       	movw	r22, r28
    34cc:	6f 5f       	subi	r22, 0xFF	; 255
    34ce:	7f 4f       	sbci	r23, 0xFF	; 255
    34d0:	c8 01       	movw	r24, r16
    34d2:	0a d5       	rcall	.+2580   	; 0x3ee8 <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    34d4:	42 e0       	ldi	r20, 0x02	; 2
    34d6:	50 e0       	ldi	r21, 0x00	; 0
    34d8:	be 01       	movw	r22, r28
    34da:	6f 5f       	subi	r22, 0xFF	; 255
    34dc:	7f 4f       	sbci	r23, 0xFF	; 255
    34de:	c8 01       	movw	r24, r16
    34e0:	03 d5       	rcall	.+2566   	; 0x3ee8 <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    34e2:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    34e4:	f5 01       	movw	r30, r10
    34e6:	80 81       	ld	r24, Z
    34e8:	88 23       	and	r24, r24
    34ea:	f9 f0       	breq	.+62     	; 0x352a <_ZN9DNSClient12BuildRequestEPKc+0xe4>
    34ec:	a7 01       	movw	r20, r14
    34ee:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    34f0:	f5 01       	movw	r30, r10
    34f2:	81 91       	ld	r24, Z+
    34f4:	6f 01       	movw	r12, r30
    34f6:	88 23       	and	r24, r24
    34f8:	21 f0       	breq	.+8      	; 0x3502 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    34fa:	8e 32       	cpi	r24, 0x2E	; 46
    34fc:	11 f0       	breq	.+4      	; 0x3502 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    34fe:	a6 01       	movw	r20, r12
    3500:	f6 cf       	rjmp	.-20     	; 0x34ee <_ZN9DNSClient12BuildRequestEPKc+0xa8>
        {
            end++;
        }

        if (end-start > 0)
    3502:	4a 01       	movw	r8, r20
    3504:	8e 18       	sub	r8, r14
    3506:	9f 08       	sbc	r9, r15
    3508:	18 14       	cp	r1, r8
    350a:	19 04       	cpc	r1, r9
    350c:	64 f4       	brge	.+24     	; 0x3526 <_ZN9DNSClient12BuildRequestEPKc+0xe0>
        {
            // Write out the size of this section
            len = end-start;
    350e:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    3510:	41 e0       	ldi	r20, 0x01	; 1
    3512:	50 e0       	ldi	r21, 0x00	; 0
    3514:	be 01       	movw	r22, r28
    3516:	6d 5f       	subi	r22, 0xFD	; 253
    3518:	7f 4f       	sbci	r23, 0xFF	; 255
    351a:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    351c:	e5 d4       	rcall	.+2506   	; 0x3ee8 <_ZN11EthernetUDP5writeEPKhj>
    351e:	a4 01       	movw	r20, r8
    3520:	b7 01       	movw	r22, r14
    3522:	c8 01       	movw	r24, r16
    3524:	e1 d4       	rcall	.+2498   	; 0x3ee8 <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    3526:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    3528:	dd cf       	rjmp	.-70     	; 0x34e4 <_ZN9DNSClient12BuildRequestEPKc+0x9e>
    iUdp.write(&len, sizeof(len));
    352a:	1b 82       	std	Y+3, r1	; 0x03
    352c:	41 e0       	ldi	r20, 0x01	; 1
    352e:	50 e0       	ldi	r21, 0x00	; 0
    3530:	be 01       	movw	r22, r28
    3532:	6d 5f       	subi	r22, 0xFD	; 253
    3534:	7f 4f       	sbci	r23, 0xFF	; 255
    3536:	c8 01       	movw	r24, r16
    3538:	d7 d4       	rcall	.+2478   	; 0x3ee8 <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    353a:	e1 2c       	mov	r14, r1
    353c:	ff 24       	eor	r15, r15
    353e:	f3 94       	inc	r15
    3540:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3542:	e9 82       	std	Y+1, r14	; 0x01
    3544:	42 e0       	ldi	r20, 0x02	; 2
    3546:	50 e0       	ldi	r21, 0x00	; 0
    3548:	be 01       	movw	r22, r28
    354a:	6f 5f       	subi	r22, 0xFF	; 255
    354c:	7f 4f       	sbci	r23, 0xFF	; 255
    354e:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    3550:	cb d4       	rcall	.+2454   	; 0x3ee8 <_ZN11EthernetUDP5writeEPKhj>
    3552:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3554:	e9 82       	std	Y+1, r14	; 0x01
    3556:	42 e0       	ldi	r20, 0x02	; 2
    3558:	50 e0       	ldi	r21, 0x00	; 0
    355a:	be 01       	movw	r22, r28
    355c:	6f 5f       	subi	r22, 0xFF	; 255
    355e:	7f 4f       	sbci	r23, 0xFF	; 255
    3560:	c8 01       	movw	r24, r16
    3562:	c2 d4       	rcall	.+2436   	; 0x3ee8 <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	0f 90       	pop	r0
    356a:	0f 90       	pop	r0
    356c:	0f 90       	pop	r0
    356e:	df 91       	pop	r29
    3570:	cf 91       	pop	r28
    3572:	1f 91       	pop	r17
    3574:	0f 91       	pop	r16
    3576:	ff 90       	pop	r15
    3578:	ef 90       	pop	r14
    357a:	df 90       	pop	r13
    357c:	cf 90       	pop	r12
    357e:	bf 90       	pop	r11
    3580:	af 90       	pop	r10
    3582:	9f 90       	pop	r9
    3584:	8f 90       	pop	r8
    3586:	08 95       	ret

00003588 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    3588:	2f 92       	push	r2
    358a:	3f 92       	push	r3
    358c:	4f 92       	push	r4
    358e:	5f 92       	push	r5
    3590:	6f 92       	push	r6
    3592:	7f 92       	push	r7
    3594:	8f 92       	push	r8
    3596:	9f 92       	push	r9
    3598:	af 92       	push	r10
    359a:	bf 92       	push	r11
    359c:	cf 92       	push	r12
    359e:	df 92       	push	r13
    35a0:	ef 92       	push	r14
    35a2:	ff 92       	push	r15
    35a4:	0f 93       	push	r16
    35a6:	1f 93       	push	r17
    35a8:	cf 93       	push	r28
    35aa:	df 93       	push	r29
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	63 97       	sbiw	r28, 0x13	; 19
    35b2:	0f b6       	in	r0, 0x3f	; 63
    35b4:	f8 94       	cli
    35b6:	de bf       	out	0x3e, r29	; 62
    35b8:	0f be       	out	0x3f, r0	; 63
    35ba:	cd bf       	out	0x3d, r28	; 61
    35bc:	7c 01       	movw	r14, r24
    35be:	6b 01       	movw	r12, r22
    35c0:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    35c2:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <millis>
    35c6:	4b 01       	movw	r8, r22
    35c8:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    35ca:	87 01       	movw	r16, r14
    35cc:	08 5f       	subi	r16, 0xF8	; 248
    35ce:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    35d0:	26 01       	movw	r4, r12
    35d2:	61 2c       	mov	r6, r1
    35d4:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    35d6:	c8 01       	movw	r24, r16
    35d8:	29 d5       	rcall	.+2642   	; 0x402c <_ZN11EthernetUDP11parsePacketEv>
    35da:	18 16       	cp	r1, r24
    35dc:	19 06       	cpc	r1, r25
    35de:	a4 f0       	brlt	.+40     	; 0x3608 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x80>
    {
        if((millis() - startTime) > aTimeout)
    35e0:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <millis>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	88 19       	sub	r24, r8
    35ea:	99 09       	sbc	r25, r9
    35ec:	aa 09       	sbc	r26, r10
    35ee:	bb 09       	sbc	r27, r11
    35f0:	48 16       	cp	r4, r24
    35f2:	59 06       	cpc	r5, r25
    35f4:	6a 06       	cpc	r6, r26
    35f6:	7b 06       	cpc	r7, r27
    35f8:	d0 f0       	brcs	.+52     	; 0x362e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
            return TIMED_OUT;
        delay(50);
    35fa:	62 e3       	ldi	r22, 0x32	; 50
    35fc:	70 e0       	ldi	r23, 0x00	; 0
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3606:	e7 cf       	rjmp	.-50     	; 0x35d6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    3608:	f7 01       	movw	r30, r14
    360a:	42 81       	ldd	r20, Z+2	; 0x02
    360c:	53 81       	ldd	r21, Z+3	; 0x03
    360e:	64 81       	ldd	r22, Z+4	; 0x04
    3610:	75 81       	ldd	r23, Z+5	; 0x05
    3612:	81 8d       	ldd	r24, Z+25	; 0x19
    3614:	92 8d       	ldd	r25, Z+26	; 0x1a
    3616:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3618:	b4 8d       	ldd	r27, Z+28	; 0x1c
    361a:	48 17       	cp	r20, r24
    361c:	59 07       	cpc	r21, r25
    361e:	6a 07       	cpc	r22, r26
    3620:	7b 07       	cpc	r23, r27
    3622:	49 f4       	brne	.+18     	; 0x3636 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    3624:	85 8d       	ldd	r24, Z+29	; 0x1d
    3626:	96 8d       	ldd	r25, Z+30	; 0x1e
    3628:	c5 97       	sbiw	r24, 0x35	; 53
    362a:	29 f4       	brne	.+10     	; 0x3636 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    362c:	09 c0       	rjmp	.+18     	; 0x3640 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    362e:	ee 24       	eor	r14, r14
    3630:	ea 94       	dec	r14
    3632:	fe 2c       	mov	r15, r14
    3634:	f0 c0       	rjmp	.+480    	; 0x3816 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    3636:	9e ef       	ldi	r25, 0xFE	; 254
    3638:	e9 2e       	mov	r14, r25
    363a:	ff 24       	eor	r15, r15
    363c:	fa 94       	dec	r15
    363e:	eb c0       	rjmp	.+470    	; 0x3816 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    3640:	c8 01       	movw	r24, r16
    3642:	08 d4       	rcall	.+2064   	; 0x3e54 <_ZN11EthernetUDP9availableEv>
    3644:	0c 97       	sbiw	r24, 0x0c	; 12
    3646:	0c f4       	brge	.+2      	; 0x364a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>
    3648:	e2 c0       	rjmp	.+452    	; 0x380e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    364a:	4c e0       	ldi	r20, 0x0C	; 12
    364c:	50 e0       	ldi	r21, 0x00	; 0
    364e:	be 01       	movw	r22, r28
    3650:	6f 5f       	subi	r22, 0xFF	; 255
    3652:	7f 4f       	sbci	r23, 0xFF	; 255
    3654:	c8 01       	movw	r24, r16
    3656:	83 d4       	rcall	.+2310   	; 0x3f5e <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    3658:	8b 81       	ldd	r24, Y+3	; 0x03
    365a:	9c 81       	ldd	r25, Y+4	; 0x04
    365c:	98 27       	eor	r25, r24
    365e:	89 27       	eor	r24, r25
    3660:	98 27       	eor	r25, r24
    3662:	9a 8b       	std	Y+18, r25	; 0x12
    3664:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    3666:	f7 01       	movw	r30, r14
    3668:	46 81       	ldd	r20, Z+6	; 0x06
    366a:	57 81       	ldd	r21, Z+7	; 0x07
    366c:	29 81       	ldd	r18, Y+1	; 0x01
    366e:	3a 81       	ldd	r19, Y+2	; 0x02
    3670:	42 17       	cp	r20, r18
    3672:	53 07       	cpc	r21, r19
    3674:	11 f4       	brne	.+4      	; 0x367a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf2>
    3676:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    3678:	07 c0       	rjmp	.+14     	; 0x3688 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    367a:	c8 01       	movw	r24, r16
    367c:	05 d4       	rcall	.+2058   	; 0x3e88 <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    367e:	7c ef       	ldi	r23, 0xFC	; 252
    3680:	e7 2e       	mov	r14, r23
    3682:	ff 24       	eor	r15, r15
    3684:	fa 94       	dec	r15
    3686:	c7 c0       	rjmp	.+398    	; 0x3816 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    3688:	8f 70       	andi	r24, 0x0F	; 15
    368a:	92 70       	andi	r25, 0x02	; 2
    368c:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    368e:	39 f0       	breq	.+14     	; 0x369e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    3690:	c8 01       	movw	r24, r16
    3692:	fa d3       	rcall	.+2036   	; 0x3e88 <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    3694:	6b ef       	ldi	r22, 0xFB	; 251
    3696:	e6 2e       	mov	r14, r22
    3698:	ff 24       	eor	r15, r15
    369a:	fa 94       	dec	r15
    369c:	bc c0       	rjmp	.+376    	; 0x3816 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    369e:	cf 80       	ldd	r12, Y+7	; 0x07
    36a0:	d8 84       	ldd	r13, Y+8	; 0x08
    36a2:	dc 24       	eor	r13, r12
    36a4:	cd 24       	eor	r12, r13
    36a6:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    36a8:	c1 14       	cp	r12, r1
    36aa:	d1 04       	cpc	r13, r1
    36ac:	19 f0       	breq	.+6      	; 0x36b4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x12c>
    36ae:	e1 2c       	mov	r14, r1
    36b0:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    36b2:	1f c0       	rjmp	.+62     	; 0x36f2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16a>
    36b4:	c8 01       	movw	r24, r16
    36b6:	e8 d3       	rcall	.+2000   	; 0x3e88 <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    36b8:	5a ef       	ldi	r21, 0xFA	; 250
    36ba:	e5 2e       	mov	r14, r21
    36bc:	ff 24       	eor	r15, r15
    36be:	fa 94       	dec	r15
    36c0:	aa c0       	rjmp	.+340    	; 0x3816 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    36c2:	41 e0       	ldi	r20, 0x01	; 1
    36c4:	50 e0       	ldi	r21, 0x00	; 0
    36c6:	be 01       	movw	r22, r28
    36c8:	63 5f       	subi	r22, 0xF3	; 243
    36ca:	7f 4f       	sbci	r23, 0xFF	; 255
    36cc:	c8 01       	movw	r24, r16
    36ce:	47 d4       	rcall	.+2190   	; 0x3f5e <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    36d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d2:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    36d4:	17 c0       	rjmp	.+46     	; 0x3704 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    36d6:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    36d8:	81 11       	cpse	r24, r1
    36da:	f3 cf       	rjmp	.-26     	; 0x36c2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    36dc:	c8 01       	movw	r24, r16
    36de:	17 d4       	rcall	.+2094   	; 0x3f0e <_ZN11EthernetUDP4readEv>
    36e0:	c8 01       	movw	r24, r16
    36e2:	15 d4       	rcall	.+2090   	; 0x3f0e <_ZN11EthernetUDP4readEv>
    36e4:	c8 01       	movw	r24, r16
    36e6:	13 d4       	rcall	.+2086   	; 0x3f0e <_ZN11EthernetUDP4readEv>
    36e8:	c8 01       	movw	r24, r16
    36ea:	11 d4       	rcall	.+2082   	; 0x3f0e <_ZN11EthernetUDP4readEv>
    36ec:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    36ee:	ef 1a       	sub	r14, r31
    36f0:	ff 0a       	sbc	r15, r31
    36f2:	8d 81       	ldd	r24, Y+5	; 0x05
    36f4:	9e 81       	ldd	r25, Y+6	; 0x06
    36f6:	98 27       	eor	r25, r24
    36f8:	89 27       	eor	r24, r25
    36fa:	98 27       	eor	r25, r24
    36fc:	e8 16       	cp	r14, r24
    36fe:	f9 06       	cpc	r15, r25
    3700:	00 f3       	brcs	.-64     	; 0x36c2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    3702:	09 c0       	rjmp	.+18     	; 0x3716 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18e>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    3704:	8d 85       	ldd	r24, Y+13	; 0x0d
    3706:	9f ef       	ldi	r25, 0xFF	; 255
    3708:	98 0f       	add	r25, r24
    370a:	9d 87       	std	Y+13, r25	; 0x0d
    370c:	88 23       	and	r24, r24
    370e:	19 f3       	breq	.-58     	; 0x36d6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14e>
                {
                    iUdp.read(); // we don't care about the returned byte
    3710:	c8 01       	movw	r24, r16
    3712:	fd d3       	rcall	.+2042   	; 0x3f0e <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    3714:	f7 cf       	rjmp	.-18     	; 0x3704 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    3716:	a1 2c       	mov	r10, r1
    3718:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    371a:	41 e0       	ldi	r20, 0x01	; 1
    371c:	50 e0       	ldi	r21, 0x00	; 0
    371e:	be 01       	movw	r22, r28
    3720:	6d 5e       	subi	r22, 0xED	; 237
    3722:	7f 4f       	sbci	r23, 0xFF	; 255
    3724:	c8 01       	movw	r24, r16
    3726:	1b d4       	rcall	.+2102   	; 0x3f5e <_ZN11EthernetUDP4readEPhj>
    3728:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    372a:	98 2f       	mov	r25, r24
    372c:	90 7c       	andi	r25, 0xC0	; 192
    372e:	59 f4       	brne	.+22     	; 0x3746 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1be>
            {
                // It's just a normal label
                if (len > 0)
    3730:	88 23       	and	r24, r24
    3732:	79 f0       	breq	.+30     	; 0x3752 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    3734:	8b 89       	ldd	r24, Y+19	; 0x13
    3736:	9f ef       	ldi	r25, 0xFF	; 255
    3738:	98 0f       	add	r25, r24
    373a:	9b 8b       	std	Y+19, r25	; 0x13
    373c:	88 23       	and	r24, r24
    373e:	31 f0       	breq	.+12     	; 0x374c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c4>
                    {
                        iUdp.read(); // we don't care about the returned byte
    3740:	c8 01       	movw	r24, r16
    3742:	e5 d3       	rcall	.+1994   	; 0x3f0e <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    3744:	f7 cf       	rjmp	.-18     	; 0x3734 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ac>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    3746:	c8 01       	movw	r24, r16
    3748:	e2 d3       	rcall	.+1988   	; 0x3f0e <_ZN11EthernetUDP4readEv>
    374a:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    374c:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    374e:	81 11       	cpse	r24, r1
    3750:	e4 cf       	rjmp	.-56     	; 0x371a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    3752:	42 e0       	ldi	r20, 0x02	; 2
    3754:	50 e0       	ldi	r21, 0x00	; 0
    3756:	be 01       	movw	r22, r28
    3758:	61 5f       	subi	r22, 0xF1	; 241
    375a:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    375c:	c8 01       	movw	r24, r16
    375e:	ff d3       	rcall	.+2046   	; 0x3f5e <_ZN11EthernetUDP4readEPhj>
    3760:	42 e0       	ldi	r20, 0x02	; 2
    3762:	50 e0       	ldi	r21, 0x00	; 0
    3764:	be 01       	movw	r22, r28
    3766:	63 5f       	subi	r22, 0xF3	; 243
    3768:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    376a:	c8 01       	movw	r24, r16
    376c:	f8 d3       	rcall	.+2032   	; 0x3f5e <_ZN11EthernetUDP4readEPhj>
    376e:	c8 01       	movw	r24, r16
    3770:	ce d3       	rcall	.+1948   	; 0x3f0e <_ZN11EthernetUDP4readEv>
    3772:	c8 01       	movw	r24, r16
    3774:	cc d3       	rcall	.+1944   	; 0x3f0e <_ZN11EthernetUDP4readEv>
    3776:	c8 01       	movw	r24, r16
    3778:	ca d3       	rcall	.+1940   	; 0x3f0e <_ZN11EthernetUDP4readEv>
    377a:	c8 01       	movw	r24, r16
    377c:	c8 d3       	rcall	.+1936   	; 0x3f0e <_ZN11EthernetUDP4readEv>
    377e:	42 e0       	ldi	r20, 0x02	; 2
    3780:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    3782:	be 01       	movw	r22, r28
    3784:	6f 5e       	subi	r22, 0xEF	; 239
    3786:	7f 4f       	sbci	r23, 0xFF	; 255
    3788:	c8 01       	movw	r24, r16
    378a:	e9 d3       	rcall	.+2002   	; 0x3f5e <_ZN11EthernetUDP4readEPhj>
    378c:	8f 85       	ldd	r24, Y+15	; 0x0f
    378e:	98 89       	ldd	r25, Y+16	; 0x10
    3790:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    3792:	91 40       	sbci	r25, 0x01	; 1
    3794:	49 f4       	brne	.+18     	; 0x37a8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
    3796:	ed 84       	ldd	r14, Y+13	; 0x0d
    3798:	fe 84       	ldd	r15, Y+14	; 0x0e
    379a:	fe 24       	eor	r15, r14
    379c:	ef 24       	eor	r14, r15
    379e:	fe 24       	eor	r15, r14
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	e8 16       	cp	r14, r24
    37a4:	f1 04       	cpc	r15, r1
    37a6:	19 f0       	breq	.+6      	; 0x37ae <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x226>
    37a8:	e1 2c       	mov	r14, r1
    37aa:	f1 2c       	mov	r15, r1
    37ac:	14 c0       	rjmp	.+40     	; 0x37d6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    37ae:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    37b0:	9a 89       	ldd	r25, Y+18	; 0x12
    37b2:	81 15       	cp	r24, r1
    37b4:	94 40       	sbci	r25, 0x04	; 4
    37b6:	39 f0       	breq	.+14     	; 0x37c6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x23e>
    37b8:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    37ba:	66 d3       	rcall	.+1740   	; 0x3e88 <_ZN11EthernetUDP5flushEv>
    37bc:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    37be:	e4 2e       	mov	r14, r20
    37c0:	ff 24       	eor	r15, r15
    37c2:	fa 94       	dec	r15
    37c4:	28 c0       	rjmp	.+80     	; 0x3816 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    37c6:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    37c8:	6e 5f       	subi	r22, 0xFE	; 254
    37ca:	7f 4f       	sbci	r23, 0xFF	; 255
    37cc:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    37ce:	50 e0       	ldi	r21, 0x00	; 0
    37d0:	c8 01       	movw	r24, r16
    37d2:	c5 d3       	rcall	.+1930   	; 0x3f5e <_ZN11EthernetUDP4readEPhj>
    37d4:	20 c0       	rjmp	.+64     	; 0x3816 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
            return SUCCESS;
    37d6:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    37d8:	9a 89       	ldd	r25, Y+18	; 0x12
    37da:	98 27       	eor	r25, r24
    37dc:	89 27       	eor	r24, r25
    37de:	98 27       	eor	r25, r24
    37e0:	e8 16       	cp	r14, r24
    37e2:	f9 06       	cpc	r15, r25
    37e4:	30 f4       	brcc	.+12     	; 0x37f2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26a>
    37e6:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    37e8:	92 d3       	rcall	.+1828   	; 0x3f0e <_ZN11EthernetUDP4readEv>
    37ea:	ff ef       	ldi	r31, 0xFF	; 255
    37ec:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    37ee:	ff 0a       	sbc	r15, r31
    37f0:	f2 cf       	rjmp	.-28     	; 0x37d6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    37f2:	2f ef       	ldi	r18, 0xFF	; 255
    37f4:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    37f6:	b2 0a       	sbc	r11, r18
    37f8:	ca 14       	cp	r12, r10
    37fa:	db 04       	cpc	r13, r11
    37fc:	09 f0       	breq	.+2      	; 0x3800 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x278>
    37fe:	8d cf       	rjmp	.-230    	; 0x371a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    3800:	c8 01       	movw	r24, r16
    3802:	42 d3       	rcall	.+1668   	; 0x3e88 <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    3804:	36 ef       	ldi	r19, 0xF6	; 246
    3806:	e3 2e       	mov	r14, r19
    3808:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    380a:	fa 94       	dec	r15
    380c:	04 c0       	rjmp	.+8      	; 0x3816 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    380e:	8d ef       	ldi	r24, 0xFD	; 253
    3810:	e8 2e       	mov	r14, r24
    3812:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    3814:	fa 94       	dec	r15
    3816:	c7 01       	movw	r24, r14
    3818:	63 96       	adiw	r28, 0x13	; 19
    381a:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    381c:	f8 94       	cli
    381e:	de bf       	out	0x3e, r29	; 62
    3820:	0f be       	out	0x3f, r0	; 63
    3822:	cd bf       	out	0x3d, r28	; 61
    3824:	df 91       	pop	r29
    3826:	cf 91       	pop	r28
    3828:	1f 91       	pop	r17
    382a:	0f 91       	pop	r16
    382c:	ff 90       	pop	r15
    382e:	ef 90       	pop	r14
    3830:	df 90       	pop	r13
    3832:	cf 90       	pop	r12
    3834:	bf 90       	pop	r11
    3836:	af 90       	pop	r10
    3838:	9f 90       	pop	r9
    383a:	8f 90       	pop	r8
    383c:	7f 90       	pop	r7
    383e:	6f 90       	pop	r6
    3840:	5f 90       	pop	r5
    3842:	4f 90       	pop	r4
    3844:	3f 90       	pop	r3
    3846:	2f 90       	pop	r2
    3848:	08 95       	ret

0000384a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    384a:	8f 92       	push	r8
    384c:	9f 92       	push	r9
    384e:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    3850:	bf 92       	push	r11
    3852:	cf 92       	push	r12
    3854:	df 92       	push	r13
    3856:	ef 92       	push	r14
    3858:	ff 92       	push	r15
    385a:	0f 93       	push	r16
    385c:	1f 93       	push	r17
    385e:	cf 93       	push	r28
    3860:	df 93       	push	r29
    3862:	00 d0       	rcall	.+0      	; 0x3864 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    3864:	00 d0       	rcall	.+0      	; 0x3866 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    3866:	00 d0       	rcall	.+0      	; 0x3868 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    3868:	cd b7       	in	r28, 0x3d	; 61
    386a:	de b7       	in	r29, 0x3e	; 62
    386c:	7c 01       	movw	r14, r24
    386e:	4b 01       	movw	r8, r22
    3870:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    3872:	9e dd       	rcall	.-1220   	; 0x33b0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    3874:	8c 01       	movw	r16, r24
    3876:	89 2b       	or	r24, r25
    3878:	09 f0       	breq	.+2      	; 0x387c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    387a:	57 c0       	rjmp	.+174    	; 0x392a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    387c:	f7 01       	movw	r30, r14
    387e:	42 81       	ldd	r20, Z+2	; 0x02
    3880:	53 81       	ldd	r21, Z+3	; 0x03
    3882:	64 81       	ldd	r22, Z+4	; 0x04
    3884:	75 81       	ldd	r23, Z+5	; 0x05
    3886:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <_ZL11INADDR_NONE+0x2>
    388a:	90 91 82 09 	lds	r25, 0x0982	; 0x800982 <_ZL11INADDR_NONE+0x3>
    388e:	a0 91 83 09 	lds	r26, 0x0983	; 0x800983 <_ZL11INADDR_NONE+0x4>
    3892:	b0 91 84 09 	lds	r27, 0x0984	; 0x800984 <_ZL11INADDR_NONE+0x5>
    3896:	48 17       	cp	r20, r24
    3898:	59 07       	cpc	r21, r25
    389a:	6a 07       	cpc	r22, r26
    389c:	7b 07       	cpc	r23, r27
    389e:	09 f4       	brne	.+2      	; 0x38a2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    38a0:	47 c0       	rjmp	.+142    	; 0x3930 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    38a2:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <millis>
    38a6:	67 01       	movw	r12, r14
    38a8:	f8 e0       	ldi	r31, 0x08	; 8
    38aa:	cf 0e       	add	r12, r31
    38ac:	d1 1c       	adc	r13, r1
    38ae:	6f 70       	andi	r22, 0x0F	; 15
    38b0:	77 27       	eor	r23, r23
    38b2:	7c 5f       	subi	r23, 0xFC	; 252
    38b4:	c6 01       	movw	r24, r12
    38b6:	89 d3       	rcall	.+1810   	; 0x3fca <_ZN11EthernetUDP5beginEj>
    38b8:	81 30       	cpi	r24, 0x01	; 1
    38ba:	09 f0       	breq	.+2      	; 0x38be <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x74>
    38bc:	3b c0       	rjmp	.+118    	; 0x3934 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    38be:	87 ef       	ldi	r24, 0xF7	; 247
    38c0:	97 e0       	ldi	r25, 0x07	; 7
    38c2:	9a 83       	std	Y+2, r25	; 0x02
    38c4:	89 83       	std	Y+1, r24	; 0x01
    38c6:	f7 01       	movw	r30, r14
    38c8:	82 81       	ldd	r24, Z+2	; 0x02
    38ca:	93 81       	ldd	r25, Z+3	; 0x03
    38cc:	a4 81       	ldd	r26, Z+4	; 0x04
    38ce:	b5 81       	ldd	r27, Z+5	; 0x05
    38d0:	8b 83       	std	Y+3, r24	; 0x03
    38d2:	9c 83       	std	Y+4, r25	; 0x04
    38d4:	ad 83       	std	Y+5, r26	; 0x05
    38d6:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    38d8:	45 e3       	ldi	r20, 0x35	; 53
    38da:	50 e0       	ldi	r21, 0x00	; 0
    38dc:	be 01       	movw	r22, r28
    38de:	6f 5f       	subi	r22, 0xFF	; 255
    38e0:	7f 4f       	sbci	r23, 0xFF	; 255
    38e2:	c6 01       	movw	r24, r12
    38e4:	f7 d2       	rcall	.+1518   	; 0x3ed4 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    38e6:	89 2b       	or	r24, r25
    38e8:	19 f4       	brne	.+6      	; 0x38f0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa6>
    38ea:	00 e0       	ldi	r16, 0x00	; 0
    38ec:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    38ee:	1a c0       	rjmp	.+52     	; 0x3924 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    38f0:	b4 01       	movw	r22, r8
    38f2:	c7 01       	movw	r24, r14
                if (ret != 0)
    38f4:	a8 dd       	rcall	.-1200   	; 0x3446 <_ZN9DNSClient12BuildRequestEPKc>
    38f6:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    38f8:	c1 f3       	breq	.-16     	; 0x38ea <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    38fa:	c6 01       	movw	r24, r12
    38fc:	f2 d2       	rcall	.+1508   	; 0x3ee2 <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    38fe:	89 2b       	or	r24, r25
    3900:	a1 f3       	breq	.-24     	; 0x38ea <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    3902:	83 e0       	ldi	r24, 0x03	; 3
    3904:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    3906:	91 2c       	mov	r9, r1
    3908:	a5 01       	movw	r20, r10
    390a:	68 e8       	ldi	r22, 0x88	; 136
    390c:	73 e1       	ldi	r23, 0x13	; 19
    390e:	c7 01       	movw	r24, r14
    3910:	3b de       	rcall	.-906    	; 0x3588 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    3912:	8c 01       	movw	r16, r24
    3914:	21 e0       	ldi	r18, 0x01	; 1
    3916:	82 1a       	sub	r8, r18
    3918:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    391a:	21 f0       	breq	.+8      	; 0x3924 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    391c:	0f 3f       	cpi	r16, 0xFF	; 255
    391e:	ff ef       	ldi	r31, 0xFF	; 255
    3920:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    3922:	91 f3       	breq	.-28     	; 0x3908 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbe>
    3924:	c6 01       	movw	r24, r12
    3926:	c2 d2       	rcall	.+1412   	; 0x3eac <_ZN11EthernetUDP4stopEv>
    3928:	05 c0       	rjmp	.+10     	; 0x3934 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    392a:	01 e0       	ldi	r16, 0x01	; 1
    392c:	10 e0       	ldi	r17, 0x00	; 0
    392e:	02 c0       	rjmp	.+4      	; 0x3934 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    3930:	0e ef       	ldi	r16, 0xFE	; 254
    3932:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    3934:	c8 01       	movw	r24, r16
    3936:	26 96       	adiw	r28, 0x06	; 6
    3938:	0f b6       	in	r0, 0x3f	; 63
    393a:	f8 94       	cli
    393c:	de bf       	out	0x3e, r29	; 62
    393e:	0f be       	out	0x3f, r0	; 63
    3940:	cd bf       	out	0x3d, r28	; 61
    3942:	df 91       	pop	r29
    3944:	cf 91       	pop	r28
    3946:	1f 91       	pop	r17
    3948:	0f 91       	pop	r16
    394a:	ff 90       	pop	r15
    394c:	ef 90       	pop	r14
    394e:	df 90       	pop	r13
    3950:	cf 90       	pop	r12
    3952:	bf 90       	pop	r11
    3954:	af 90       	pop	r10
    3956:	9f 90       	pop	r9
    3958:	8f 90       	pop	r8
    395a:	08 95       	ret

0000395c <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    395c:	24 e0       	ldi	r18, 0x04	; 4
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	ac 01       	movw	r20, r24
    3962:	64 e0       	ldi	r22, 0x04	; 4
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	35 c6       	rjmp	.+3178   	; 0x45d4 <_ZN10W5500Class5writeEjhPKhj>

0000396a <_ZN10W5500Class9writeSUBREPh>:
    396a:	24 e0       	ldi	r18, 0x04	; 4
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	ac 01       	movw	r20, r24
    3970:	64 e0       	ldi	r22, 0x04	; 4
    3972:	85 e0       	ldi	r24, 0x05	; 5
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	2e c6       	rjmp	.+3164   	; 0x45d4 <_ZN10W5500Class5writeEjhPKhj>

00003978 <_ZN10W5500Class9writeSHAREPh>:
    3978:	26 e0       	ldi	r18, 0x06	; 6
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	ac 01       	movw	r20, r24
    397e:	64 e0       	ldi	r22, 0x04	; 4
    3980:	89 e0       	ldi	r24, 0x09	; 9
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	27 c6       	rjmp	.+3150   	; 0x45d4 <_ZN10W5500Class5writeEjhPKhj>

00003986 <_ZN10W5500Class9writeSIPREPh>:
    3986:	24 e0       	ldi	r18, 0x04	; 4
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	ac 01       	movw	r20, r24
    398c:	64 e0       	ldi	r22, 0x04	; 4
    398e:	8f e0       	ldi	r24, 0x0F	; 15
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	20 c6       	rjmp	.+3136   	; 0x45d4 <_ZN10W5500Class5writeEjhPKhj>

00003994 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    3994:	8f 92       	push	r8
    3996:	9f 92       	push	r9
    3998:	af 92       	push	r10
    399a:	bf 92       	push	r11
    399c:	cf 92       	push	r12
    399e:	df 92       	push	r13
    39a0:	ef 92       	push	r14
    39a2:	ff 92       	push	r15
    39a4:	0f 93       	push	r16
    39a6:	1f 93       	push	r17
    39a8:	cf 93       	push	r28
    39aa:	df 93       	push	r29
    39ac:	4c 01       	movw	r8, r24
    39ae:	5b 01       	movw	r10, r22
    39b0:	6a 01       	movw	r12, r20
    39b2:	e9 01       	movw	r28, r18
    39b4:	fc 01       	movw	r30, r24
    39b6:	64 85       	ldd	r22, Z+12	; 0x0c
    39b8:	8f eb       	ldi	r24, 0xBF	; 191
    39ba:	99 e0       	ldi	r25, 0x09	; 9
    39bc:	53 d6       	rcall	.+3238   	; 0x4664 <_ZN10W5500Class4initEh>
    39be:	c5 01       	movw	r24, r10
    39c0:	db df       	rcall	.-74     	; 0x3978 <_ZN10W5500Class9writeSHAREPh>
    39c2:	c6 01       	movw	r24, r12
    39c4:	02 96       	adiw	r24, 0x02	; 2
    39c6:	df df       	rcall	.-66     	; 0x3986 <_ZN10W5500Class9writeSIPREPh>
    39c8:	c8 01       	movw	r24, r16
    39ca:	02 96       	adiw	r24, 0x02	; 2
    39cc:	c7 df       	rcall	.-114    	; 0x395c <_ZN10W5500Class8writeGAREPh>
    39ce:	c7 01       	movw	r24, r14
    39d0:	02 96       	adiw	r24, 0x02	; 2
    39d2:	cb df       	rcall	.-106    	; 0x396a <_ZN10W5500Class9writeSUBREPh>
    39d4:	8a 81       	ldd	r24, Y+2	; 0x02
    39d6:	9b 81       	ldd	r25, Y+3	; 0x03
    39d8:	ac 81       	ldd	r26, Y+4	; 0x04
    39da:	bd 81       	ldd	r27, Y+5	; 0x05
    39dc:	f4 01       	movw	r30, r8
    39de:	82 83       	std	Z+2, r24	; 0x02
    39e0:	93 83       	std	Z+3, r25	; 0x03
    39e2:	a4 83       	std	Z+4, r26	; 0x04
    39e4:	b5 83       	std	Z+5, r27	; 0x05
    39e6:	df 91       	pop	r29
    39e8:	cf 91       	pop	r28
    39ea:	1f 91       	pop	r17
    39ec:	0f 91       	pop	r16
    39ee:	ff 90       	pop	r15
    39f0:	ef 90       	pop	r14
    39f2:	df 90       	pop	r13
    39f4:	cf 90       	pop	r12
    39f6:	bf 90       	pop	r11
    39f8:	af 90       	pop	r10
    39fa:	9f 90       	pop	r9
    39fc:	8f 90       	pop	r8
    39fe:	08 95       	ret

00003a00 <_ZN13EthernetClass11dnsServerIPEv>:
    3a00:	27 ef       	ldi	r18, 0xF7	; 247
    3a02:	37 e0       	ldi	r19, 0x07	; 7
    3a04:	fc 01       	movw	r30, r24
    3a06:	31 83       	std	Z+1, r19	; 0x01
    3a08:	20 83       	st	Z, r18
    3a0a:	fb 01       	movw	r30, r22
    3a0c:	42 81       	ldd	r20, Z+2	; 0x02
    3a0e:	53 81       	ldd	r21, Z+3	; 0x03
    3a10:	64 81       	ldd	r22, Z+4	; 0x04
    3a12:	75 81       	ldd	r23, Z+5	; 0x05
    3a14:	fc 01       	movw	r30, r24
    3a16:	42 83       	std	Z+2, r20	; 0x02
    3a18:	53 83       	std	Z+3, r21	; 0x03
    3a1a:	64 83       	std	Z+4, r22	; 0x04
    3a1c:	75 83       	std	Z+5, r23	; 0x05
    3a1e:	08 95       	ret

00003a20 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    3a20:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3a22:	00 e0       	ldi	r16, 0x00	; 0
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	40 e0       	ldi	r20, 0x00	; 0
    3a28:	60 e0       	ldi	r22, 0x00	; 0
    3a2a:	82 ea       	ldi	r24, 0xA2	; 162
    3a2c:	99 e0       	ldi	r25, 0x09	; 9
    3a2e:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    3a32:	85 e8       	ldi	r24, 0x85	; 133
    3a34:	99 e0       	ldi	r25, 0x09	; 9
    3a36:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <_ZN9IPAddressC1Ev>
    3a3a:	e5 e8       	ldi	r30, 0x85	; 133
    3a3c:	f9 e0       	ldi	r31, 0x09	; 9
    3a3e:	13 86       	std	Z+11, r1	; 0x0b
    3a40:	12 86       	std	Z+10, r1	; 0x0a
    3a42:	8a e0       	ldi	r24, 0x0A	; 10
    3a44:	84 87       	std	Z+12, r24	; 0x0c
    3a46:	0f 91       	pop	r16
    3a48:	08 95       	ret

00003a4a <_ZN14EthernetClientneERKS_>:
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	ed 91       	ld	r30, X+
    3a4e:	fc 91       	ld	r31, X
    3a50:	02 8c       	ldd	r0, Z+26	; 0x1a
    3a52:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3a54:	e0 2d       	mov	r30, r0
    3a56:	09 95       	icall
    3a58:	91 e0       	ldi	r25, 0x01	; 1
    3a5a:	89 27       	eor	r24, r25
    3a5c:	08 95       	ret

00003a5e <_ZN14EthernetClient5writeEh>:
    3a5e:	cf 93       	push	r28
    3a60:	df 93       	push	r29
    3a62:	1f 92       	push	r1
    3a64:	cd b7       	in	r28, 0x3d	; 61
    3a66:	de b7       	in	r29, 0x3e	; 62
    3a68:	69 83       	std	Y+1, r22	; 0x01
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	ed 91       	ld	r30, X+
    3a6e:	fc 91       	ld	r31, X
    3a70:	02 80       	ldd	r0, Z+2	; 0x02
    3a72:	f3 81       	ldd	r31, Z+3	; 0x03
    3a74:	e0 2d       	mov	r30, r0
    3a76:	41 e0       	ldi	r20, 0x01	; 1
    3a78:	50 e0       	ldi	r21, 0x00	; 0
    3a7a:	be 01       	movw	r22, r28
    3a7c:	6f 5f       	subi	r22, 0xFF	; 255
    3a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a80:	09 95       	icall
    3a82:	0f 90       	pop	r0
    3a84:	df 91       	pop	r29
    3a86:	cf 91       	pop	r28
    3a88:	08 95       	ret

00003a8a <_ZN14EthernetClientcvbEv>:
    3a8a:	21 e0       	ldi	r18, 0x01	; 1
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	84 85       	ldd	r24, Z+12	; 0x0c
    3a90:	88 30       	cpi	r24, 0x08	; 8
    3a92:	09 f4       	brne	.+2      	; 0x3a96 <_ZN14EthernetClientcvbEv+0xc>
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	82 2f       	mov	r24, r18
    3a98:	08 95       	ret

00003a9a <_ZN14EthernetClienteqERKS_>:
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	94 85       	ldd	r25, Z+12	; 0x0c
    3a9e:	fb 01       	movw	r30, r22
    3aa0:	84 85       	ldd	r24, Z+12	; 0x0c
    3aa2:	98 13       	cpse	r25, r24
    3aa4:	03 c0       	rjmp	.+6      	; 0x3aac <_ZN14EthernetClienteqERKS_+0x12>
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	98 30       	cpi	r25, 0x08	; 8
    3aaa:	09 f4       	brne	.+2      	; 0x3aae <_ZN14EthernetClienteqERKS_+0x14>
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	08 95       	ret

00003ab0 <_ZN14EthernetClient7connectEPKcj>:
    3ab0:	cf 92       	push	r12
    3ab2:	df 92       	push	r13
    3ab4:	ef 92       	push	r14
    3ab6:	ff 92       	push	r15
    3ab8:	0f 93       	push	r16
    3aba:	1f 93       	push	r17
    3abc:	cf 93       	push	r28
    3abe:	df 93       	push	r29
    3ac0:	cd b7       	in	r28, 0x3d	; 61
    3ac2:	de b7       	in	r29, 0x3e	; 62
    3ac4:	af 97       	sbiw	r28, 0x2f	; 47
    3ac6:	0f b6       	in	r0, 0x3f	; 63
    3ac8:	f8 94       	cli
    3aca:	de bf       	out	0x3e, r29	; 62
    3acc:	0f be       	out	0x3f, r0	; 63
    3ace:	cd bf       	out	0x3d, r28	; 61
    3ad0:	8c 01       	movw	r16, r24
    3ad2:	6b 01       	movw	r12, r22
    3ad4:	7a 01       	movw	r14, r20
    3ad6:	ce 01       	movw	r24, r28
    3ad8:	01 96       	adiw	r24, 0x01	; 1
    3ada:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <_ZN9IPAddressC1Ev>
    3ade:	ce 01       	movw	r24, r28
    3ae0:	09 96       	adiw	r24, 0x09	; 9
    3ae2:	f3 d2       	rcall	.+1510   	; 0x40ca <_ZN11EthernetUDPC1Ev>
    3ae4:	ce 01       	movw	r24, r28
    3ae6:	8a 96       	adiw	r24, 0x2a	; 42
    3ae8:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <_ZN9IPAddressC1Ev>
    3aec:	65 e8       	ldi	r22, 0x85	; 133
    3aee:	79 e0       	ldi	r23, 0x09	; 9
    3af0:	ce 01       	movw	r24, r28
    3af2:	84 96       	adiw	r24, 0x24	; 36
    3af4:	85 df       	rcall	.-246    	; 0x3a00 <_ZN13EthernetClass11dnsServerIPEv>
    3af6:	be 01       	movw	r22, r28
    3af8:	6c 5d       	subi	r22, 0xDC	; 220
    3afa:	7f 4f       	sbci	r23, 0xFF	; 255
    3afc:	ce 01       	movw	r24, r28
    3afe:	01 96       	adiw	r24, 0x01	; 1
    3b00:	4a dc       	rcall	.-1900   	; 0x3396 <_ZN9DNSClient5beginERK9IPAddress>
    3b02:	ae 01       	movw	r20, r28
    3b04:	46 5d       	subi	r20, 0xD6	; 214
    3b06:	5f 4f       	sbci	r21, 0xFF	; 255
    3b08:	b6 01       	movw	r22, r12
    3b0a:	ce 01       	movw	r24, r28
    3b0c:	01 96       	adiw	r24, 0x01	; 1
    3b0e:	9d de       	rcall	.-710    	; 0x384a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    3b10:	81 30       	cpi	r24, 0x01	; 1
    3b12:	91 05       	cpc	r25, r1
    3b14:	c1 f4       	brne	.+48     	; 0x3b46 <_ZN14EthernetClient7connectEPKcj+0x96>
    3b16:	d8 01       	movw	r26, r16
    3b18:	ed 91       	ld	r30, X+
    3b1a:	fc 91       	ld	r31, X
    3b1c:	06 84       	ldd	r0, Z+14	; 0x0e
    3b1e:	f7 85       	ldd	r31, Z+15	; 0x0f
    3b20:	e0 2d       	mov	r30, r0
    3b22:	87 ef       	ldi	r24, 0xF7	; 247
    3b24:	97 e0       	ldi	r25, 0x07	; 7
    3b26:	9d a3       	std	Y+37, r25	; 0x25
    3b28:	8c a3       	std	Y+36, r24	; 0x24
    3b2a:	8c a5       	ldd	r24, Y+44	; 0x2c
    3b2c:	9d a5       	ldd	r25, Y+45	; 0x2d
    3b2e:	ae a5       	ldd	r26, Y+46	; 0x2e
    3b30:	bf a5       	ldd	r27, Y+47	; 0x2f
    3b32:	8e a3       	std	Y+38, r24	; 0x26
    3b34:	9f a3       	std	Y+39, r25	; 0x27
    3b36:	a8 a7       	std	Y+40, r26	; 0x28
    3b38:	b9 a7       	std	Y+41, r27	; 0x29
    3b3a:	a7 01       	movw	r20, r14
    3b3c:	be 01       	movw	r22, r28
    3b3e:	6c 5d       	subi	r22, 0xDC	; 220
    3b40:	7f 4f       	sbci	r23, 0xFF	; 255
    3b42:	c8 01       	movw	r24, r16
    3b44:	09 95       	icall
    3b46:	af 96       	adiw	r28, 0x2f	; 47
    3b48:	0f b6       	in	r0, 0x3f	; 63
    3b4a:	f8 94       	cli
    3b4c:	de bf       	out	0x3e, r29	; 62
    3b4e:	0f be       	out	0x3f, r0	; 63
    3b50:	cd bf       	out	0x3d, r28	; 61
    3b52:	df 91       	pop	r29
    3b54:	cf 91       	pop	r28
    3b56:	1f 91       	pop	r17
    3b58:	0f 91       	pop	r16
    3b5a:	ff 90       	pop	r15
    3b5c:	ef 90       	pop	r14
    3b5e:	df 90       	pop	r13
    3b60:	cf 90       	pop	r12
    3b62:	08 95       	ret

00003b64 <_ZN14EthernetClient5writeEPKhj>:
    3b64:	0f 93       	push	r16
    3b66:	1f 93       	push	r17
    3b68:	cf 93       	push	r28
    3b6a:	df 93       	push	r29
    3b6c:	8c 01       	movw	r16, r24
    3b6e:	d4 2f       	mov	r29, r20
    3b70:	c5 2f       	mov	r28, r21
    3b72:	fc 01       	movw	r30, r24
    3b74:	84 85       	ldd	r24, Z+12	; 0x0c
    3b76:	88 30       	cpi	r24, 0x08	; 8
    3b78:	41 f4       	brne	.+16     	; 0x3b8a <_ZN14EthernetClient5writeEPKhj+0x26>
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	f8 01       	movw	r30, r16
    3b80:	93 83       	std	Z+3, r25	; 0x03
    3b82:	82 83       	std	Z+2, r24	; 0x02
    3b84:	80 e0       	ldi	r24, 0x00	; 0
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	05 c0       	rjmp	.+10     	; 0x3b94 <_ZN14EthernetClient5writeEPKhj+0x30>
    3b8a:	cf d3       	rcall	.+1950   	; 0x432a <_Z4sendhPKhj>
    3b8c:	89 2b       	or	r24, r25
    3b8e:	a9 f3       	breq	.-22     	; 0x3b7a <_ZN14EthernetClient5writeEPKhj+0x16>
    3b90:	8d 2f       	mov	r24, r29
    3b92:	9c 2f       	mov	r25, r28
    3b94:	df 91       	pop	r29
    3b96:	cf 91       	pop	r28
    3b98:	1f 91       	pop	r17
    3b9a:	0f 91       	pop	r16
    3b9c:	08 95       	ret

00003b9e <_ZN14EthernetClient9availableEv>:
    3b9e:	fc 01       	movw	r30, r24
    3ba0:	64 85       	ldd	r22, Z+12	; 0x0c
    3ba2:	68 30       	cpi	r22, 0x08	; 8
    3ba4:	19 f0       	breq	.+6      	; 0x3bac <_ZN14EthernetClient9availableEv+0xe>
    3ba6:	8f eb       	ldi	r24, 0xBF	; 191
    3ba8:	99 e0       	ldi	r25, 0x09	; 9
    3baa:	d0 c5       	rjmp	.+2976   	; 0x474c <_ZN10W5500Class17getRXReceivedSizeEh>
    3bac:	80 e0       	ldi	r24, 0x00	; 0
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	08 95       	ret

00003bb2 <_ZN14EthernetClient4readEv>:
    3bb2:	cf 93       	push	r28
    3bb4:	df 93       	push	r29
    3bb6:	1f 92       	push	r1
    3bb8:	cd b7       	in	r28, 0x3d	; 61
    3bba:	de b7       	in	r29, 0x3e	; 62
    3bbc:	41 e0       	ldi	r20, 0x01	; 1
    3bbe:	50 e0       	ldi	r21, 0x00	; 0
    3bc0:	be 01       	movw	r22, r28
    3bc2:	6f 5f       	subi	r22, 0xFF	; 255
    3bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	84 85       	ldd	r24, Z+12	; 0x0c
    3bca:	f7 d3       	rcall	.+2030   	; 0x43ba <_Z4recvhPhi>
    3bcc:	18 16       	cp	r1, r24
    3bce:	19 06       	cpc	r1, r25
    3bd0:	1c f4       	brge	.+6      	; 0x3bd8 <_ZN14EthernetClient4readEv+0x26>
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	02 c0       	rjmp	.+4      	; 0x3bdc <_ZN14EthernetClient4readEv+0x2a>
    3bd8:	8f ef       	ldi	r24, 0xFF	; 255
    3bda:	9f ef       	ldi	r25, 0xFF	; 255
    3bdc:	0f 90       	pop	r0
    3bde:	df 91       	pop	r29
    3be0:	cf 91       	pop	r28
    3be2:	08 95       	ret

00003be4 <_ZN14EthernetClient4readEPhj>:
    3be4:	fc 01       	movw	r30, r24
    3be6:	84 85       	ldd	r24, Z+12	; 0x0c
    3be8:	e8 c3       	rjmp	.+2000   	; 0x43ba <_Z4recvhPhi>

00003bea <_ZN14EthernetClient4peekEv>:
    3bea:	0f 93       	push	r16
    3bec:	1f 93       	push	r17
    3bee:	cf 93       	push	r28
    3bf0:	df 93       	push	r29
    3bf2:	1f 92       	push	r1
    3bf4:	cd b7       	in	r28, 0x3d	; 61
    3bf6:	de b7       	in	r29, 0x3e	; 62
    3bf8:	8c 01       	movw	r16, r24
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	ed 91       	ld	r30, X+
    3bfe:	fc 91       	ld	r31, X
    3c00:	00 84       	ldd	r0, Z+8	; 0x08
    3c02:	f1 85       	ldd	r31, Z+9	; 0x09
    3c04:	e0 2d       	mov	r30, r0
    3c06:	09 95       	icall
    3c08:	89 2b       	or	r24, r25
    3c0a:	49 f0       	breq	.+18     	; 0x3c1e <_ZN14EthernetClient4peekEv+0x34>
    3c0c:	be 01       	movw	r22, r28
    3c0e:	6f 5f       	subi	r22, 0xFF	; 255
    3c10:	7f 4f       	sbci	r23, 0xFF	; 255
    3c12:	f8 01       	movw	r30, r16
    3c14:	84 85       	ldd	r24, Z+12	; 0x0c
    3c16:	12 d4       	rcall	.+2084   	; 0x443c <_Z4peekhPh>
    3c18:	89 81       	ldd	r24, Y+1	; 0x01
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	02 c0       	rjmp	.+4      	; 0x3c22 <_ZN14EthernetClient4peekEv+0x38>
    3c1e:	8f ef       	ldi	r24, 0xFF	; 255
    3c20:	9f ef       	ldi	r25, 0xFF	; 255
    3c22:	0f 90       	pop	r0
    3c24:	df 91       	pop	r29
    3c26:	cf 91       	pop	r28
    3c28:	1f 91       	pop	r17
    3c2a:	0f 91       	pop	r16
    3c2c:	08 95       	ret

00003c2e <_ZN14EthernetClient5flushEv>:
    3c2e:	fc 01       	movw	r30, r24
    3c30:	84 85       	ldd	r24, Z+12	; 0x0c
    3c32:	11 c4       	rjmp	.+2082   	; 0x4456 <_Z5flushh>

00003c34 <_ZN14EthernetClientC1Ev>:
    3c34:	fc 01       	movw	r30, r24
    3c36:	13 82       	std	Z+3, r1	; 0x03
    3c38:	12 82       	std	Z+2, r1	; 0x02
    3c3a:	88 ee       	ldi	r24, 0xE8	; 232
    3c3c:	93 e0       	ldi	r25, 0x03	; 3
    3c3e:	a0 e0       	ldi	r26, 0x00	; 0
    3c40:	b0 e0       	ldi	r27, 0x00	; 0
    3c42:	84 83       	std	Z+4, r24	; 0x04
    3c44:	95 83       	std	Z+5, r25	; 0x05
    3c46:	a6 83       	std	Z+6, r26	; 0x06
    3c48:	b7 83       	std	Z+7, r27	; 0x07
    3c4a:	83 e7       	ldi	r24, 0x73	; 115
    3c4c:	97 e0       	ldi	r25, 0x07	; 7
    3c4e:	91 83       	std	Z+1, r25	; 0x01
    3c50:	80 83       	st	Z, r24
    3c52:	88 e0       	ldi	r24, 0x08	; 8
    3c54:	84 87       	std	Z+12, r24	; 0x0c
    3c56:	08 95       	ret

00003c58 <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    3c58:	fc 01       	movw	r30, r24
    3c5a:	64 85       	ldd	r22, Z+12	; 0x0c
    3c5c:	68 30       	cpi	r22, 0x08	; 8
    3c5e:	39 f0       	breq	.+14     	; 0x3c6e <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    3c60:	62 95       	swap	r22
    3c62:	66 0f       	add	r22, r22
    3c64:	60 7e       	andi	r22, 0xE0	; 224
    3c66:	68 5f       	subi	r22, 0xF8	; 248
    3c68:	83 e0       	ldi	r24, 0x03	; 3
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	df c4       	rjmp	.+2494   	; 0x462c <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	08 95       	ret

00003c72 <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    3c72:	cf 93       	push	r28
    3c74:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    3c76:	fc 01       	movw	r30, r24
    3c78:	24 85       	ldd	r18, Z+12	; 0x0c
    3c7a:	28 30       	cpi	r18, 0x08	; 8
    3c7c:	c9 f0       	breq	.+50     	; 0x3cb0 <_ZN14EthernetClient9connectedEv+0x3e>
    3c7e:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    3c80:	eb df       	rcall	.-42     	; 0x3c58 <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    3c82:	84 31       	cpi	r24, 0x14	; 20
    3c84:	81 f0       	breq	.+32     	; 0x3ca6 <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    3c86:	88 23       	and	r24, r24
    3c88:	71 f0       	breq	.+28     	; 0x3ca6 <_ZN14EthernetClient9connectedEv+0x34>
    3c8a:	88 31       	cpi	r24, 0x18	; 24
    3c8c:	61 f0       	breq	.+24     	; 0x3ca6 <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    3c8e:	8c 31       	cpi	r24, 0x1C	; 28
    3c90:	61 f4       	brne	.+24     	; 0x3caa <_ZN14EthernetClient9connectedEv+0x38>
    3c92:	e8 81       	ld	r30, Y
    3c94:	f9 81       	ldd	r31, Y+1	; 0x01
    3c96:	00 84       	ldd	r0, Z+8	; 0x08
    3c98:	f1 85       	ldd	r31, Z+9	; 0x09
    3c9a:	e0 2d       	mov	r30, r0
    3c9c:	ce 01       	movw	r24, r28
    3c9e:	09 95       	icall
    3ca0:	21 e0       	ldi	r18, 0x01	; 1
    3ca2:	89 2b       	or	r24, r25
    3ca4:	19 f4       	brne	.+6      	; 0x3cac <_ZN14EthernetClient9connectedEv+0x3a>
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	01 c0       	rjmp	.+2      	; 0x3cac <_ZN14EthernetClient9connectedEv+0x3a>
    3caa:	21 e0       	ldi	r18, 0x01	; 1
    3cac:	82 2f       	mov	r24, r18
    3cae:	01 c0       	rjmp	.+2      	; 0x3cb2 <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    3cb0:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    3cb2:	df 91       	pop	r29
    3cb4:	cf 91       	pop	r28
    3cb6:	08 95       	ret

00003cb8 <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    3cb8:	cf 92       	push	r12
    3cba:	df 92       	push	r13
    3cbc:	ef 92       	push	r14
    3cbe:	ff 92       	push	r15
    3cc0:	cf 93       	push	r28
    3cc2:	df 93       	push	r29
    3cc4:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    3cc6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cc8:	88 30       	cpi	r24, 0x08	; 8
    3cca:	69 f1       	breq	.+90     	; 0x3d26 <_ZN14EthernetClient4stopEv+0x6e>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    3ccc:	29 d3       	rcall	.+1618   	; 0x4320 <_Z10disconnecth>
  unsigned long start = millis();
    3cce:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <millis>
    3cd2:	6b 01       	movw	r12, r22
    3cd4:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    3cd6:	ce 01       	movw	r24, r28
    3cd8:	bf df       	rcall	.-130    	; 0x3c58 <_ZN14EthernetClient6statusEv>
    3cda:	88 23       	and	r24, r24
    3cdc:	a1 f0       	breq	.+40     	; 0x3d06 <_ZN14EthernetClient4stopEv+0x4e>
    3cde:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <millis>
    3ce2:	dc 01       	movw	r26, r24
    3ce4:	cb 01       	movw	r24, r22
    3ce6:	8c 19       	sub	r24, r12
    3ce8:	9d 09       	sbc	r25, r13
    3cea:	ae 09       	sbc	r26, r14
    3cec:	bf 09       	sbc	r27, r15
    3cee:	88 3e       	cpi	r24, 0xE8	; 232
    3cf0:	93 40       	sbci	r25, 0x03	; 3
    3cf2:	a1 05       	cpc	r26, r1
    3cf4:	b1 05       	cpc	r27, r1
    3cf6:	38 f4       	brcc	.+14     	; 0x3d06 <_ZN14EthernetClient4stopEv+0x4e>
    delay(1);
    3cf8:	61 e0       	ldi	r22, 0x01	; 1
    3cfa:	70 e0       	ldi	r23, 0x00	; 0
    3cfc:	80 e0       	ldi	r24, 0x00	; 0
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    3d04:	e8 cf       	rjmp	.-48     	; 0x3cd6 <_ZN14EthernetClient4stopEv+0x1e>
    3d06:	ce 01       	movw	r24, r28
    3d08:	a7 df       	rcall	.-178    	; 0x3c58 <_ZN14EthernetClient6statusEv>
    3d0a:	88 23       	and	r24, r24
    close(_sock);
    3d0c:	11 f0       	breq	.+4      	; 0x3d12 <_ZN14EthernetClient4stopEv+0x5a>
    3d0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d10:	96 d2       	rcall	.+1324   	; 0x423e <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    3d12:	ec 85       	ldd	r30, Y+12	; 0x0c
    3d14:	f0 e0       	ldi	r31, 0x00	; 0
    3d16:	ee 0f       	add	r30, r30
    3d18:	ff 1f       	adc	r31, r31
    3d1a:	ee 56       	subi	r30, 0x6E	; 110
    3d1c:	f6 4f       	sbci	r31, 0xF6	; 246
    3d1e:	11 82       	std	Z+1, r1	; 0x01
    3d20:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    3d22:	88 e0       	ldi	r24, 0x08	; 8
    3d24:	8c 87       	std	Y+12, r24	; 0x0c
}
    3d26:	df 91       	pop	r29
    3d28:	cf 91       	pop	r28
    3d2a:	ff 90       	pop	r15
    3d2c:	ef 90       	pop	r14
    3d2e:	df 90       	pop	r13
    3d30:	cf 90       	pop	r12
    3d32:	08 95       	ret

00003d34 <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    3d34:	cf 92       	push	r12
    3d36:	df 92       	push	r13
    3d38:	ff 92       	push	r15
    3d3a:	0f 93       	push	r16
    3d3c:	1f 93       	push	r17
    3d3e:	cf 93       	push	r28
    3d40:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    3d42:	fc 01       	movw	r30, r24
    3d44:	24 85       	ldd	r18, Z+12	; 0x0c
    3d46:	28 30       	cpi	r18, 0x08	; 8
    3d48:	c1 f5       	brne	.+112    	; 0x3dba <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    3d4a:	6a 01       	movw	r12, r20
    3d4c:	8b 01       	movw	r16, r22
    3d4e:	ec 01       	movw	r28, r24
    3d50:	f1 2c       	mov	r15, r1
    3d52:	6f 2d       	mov	r22, r15
    3d54:	62 95       	swap	r22
    3d56:	66 0f       	add	r22, r22
    3d58:	60 7e       	andi	r22, 0xE0	; 224
    3d5a:	68 5f       	subi	r22, 0xF8	; 248
    3d5c:	83 e0       	ldi	r24, 0x03	; 3
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	65 d4       	rcall	.+2250   	; 0x462c <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    3d62:	81 11       	cpse	r24, r1
    3d64:	02 c0       	rjmp	.+4      	; 0x3d6a <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    3d66:	fc 86       	std	Y+12, r15	; 0x0c
    3d68:	07 c0       	rjmp	.+14     	; 0x3d78 <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    3d6a:	8b 7f       	andi	r24, 0xFB	; 251
    3d6c:	88 31       	cpi	r24, 0x18	; 24
    3d6e:	d9 f3       	breq	.-10     	; 0x3d66 <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    3d70:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    3d72:	f8 e0       	ldi	r31, 0x08	; 8
    3d74:	ff 12       	cpse	r15, r31
    3d76:	ed cf       	rjmp	.-38     	; 0x3d52 <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    3d78:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d7a:	88 30       	cpi	r24, 0x08	; 8
    3d7c:	f1 f0       	breq	.+60     	; 0x3dba <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    3d7e:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <_ZN14EthernetClient8_srcportE>
    3d82:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <_ZN14EthernetClient8_srcportE+0x1>
    3d86:	2f 5f       	subi	r18, 0xFF	; 255
    3d88:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    3d8a:	11 f4       	brne	.+4      	; 0x3d90 <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	34 e0       	ldi	r19, 0x04	; 4
    3d90:	30 93 72 01 	sts	0x0172, r19	; 0x800172 <_ZN14EthernetClient8_srcportE+0x1>
    3d94:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    3d98:	40 91 71 01 	lds	r20, 0x0171	; 0x800171 <_ZN14EthernetClient8_srcportE>
    3d9c:	50 91 72 01 	lds	r21, 0x0172	; 0x800172 <_ZN14EthernetClient8_srcportE+0x1>
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	61 e0       	ldi	r22, 0x01	; 1
    3da4:	57 d2       	rcall	.+1198   	; 0x4254 <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    3da6:	b8 01       	movw	r22, r16
    3da8:	6e 5f       	subi	r22, 0xFE	; 254
    3daa:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    3dac:	a6 01       	movw	r20, r12
    3dae:	8c 85       	ldd	r24, Y+12	; 0x0c
    3db0:	84 d2       	rcall	.+1288   	; 0x42ba <_Z7connecthPhj>
    3db2:	81 11       	cpse	r24, r1
    3db4:	05 c0       	rjmp	.+10     	; 0x3dc0 <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    3db6:	88 e0       	ldi	r24, 0x08	; 8
    3db8:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    3dbe:	0f c0       	rjmp	.+30     	; 0x3dde <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    3dc0:	ce 01       	movw	r24, r28
    3dc2:	4a df       	rcall	.-364    	; 0x3c58 <_ZN14EthernetClient6statusEv>
    3dc4:	87 31       	cpi	r24, 0x17	; 23
    3dc6:	49 f0       	breq	.+18     	; 0x3dda <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    3dc8:	61 e0       	ldi	r22, 0x01	; 1
    3dca:	70 e0       	ldi	r23, 0x00	; 0
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <delay>
    if (status() == SnSR::CLOSED) {
    3dd4:	ce 01       	movw	r24, r28
    3dd6:	40 df       	rcall	.-384    	; 0x3c58 <_ZN14EthernetClient6statusEv>
    3dd8:	ec cf       	rjmp	.-40     	; 0x3db2 <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
}
    3dde:	df 91       	pop	r29
    3de0:	cf 91       	pop	r28
    3de2:	1f 91       	pop	r17
    3de4:	0f 91       	pop	r16
    3de6:	ff 90       	pop	r15
    3de8:	df 90       	pop	r13
    3dea:	cf 90       	pop	r12
    3dec:	08 95       	ret

00003dee <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    3dee:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3df0:	00 e0       	ldi	r16, 0x00	; 0
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	40 e0       	ldi	r20, 0x00	; 0
    3df6:	60 e0       	ldi	r22, 0x00	; 0
    3df8:	88 ea       	ldi	r24, 0xA8	; 168
    3dfa:	99 e0       	ldi	r25, 0x09	; 9
    3dfc:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <_ZN9IPAddressC1Ehhhh>
    3e00:	0f 91       	pop	r16
    3e02:	08 95       	ret

00003e04 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    3e04:	0f 93       	push	r16
    3e06:	00 e0       	ldi	r16, 0x00	; 0
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	40 e0       	ldi	r20, 0x00	; 0
    3e0c:	60 e0       	ldi	r22, 0x00	; 0
    3e0e:	8e ea       	ldi	r24, 0xAE	; 174
    3e10:	99 e0       	ldi	r25, 0x09	; 9
    3e12:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <_ZN9IPAddressC1Ehhhh>
    3e16:	0f 91       	pop	r16
    3e18:	08 95       	ret

00003e1a <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	08 95       	ret

00003e1e <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    3e1e:	dc 01       	movw	r26, r24
    3e20:	ed 91       	ld	r30, X+
    3e22:	fc 91       	ld	r31, X
    3e24:	04 8c       	ldd	r0, Z+28	; 0x1c
    3e26:	f5 8d       	ldd	r31, Z+29	; 0x1d
    3e28:	e0 2d       	mov	r30, r0
    3e2a:	09 94       	ijmp

00003e2c <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3e2c:	27 ef       	ldi	r18, 0xF7	; 247
    3e2e:	37 e0       	ldi	r19, 0x07	; 7
    3e30:	fc 01       	movw	r30, r24
    3e32:	31 83       	std	Z+1, r19	; 0x01
    3e34:	20 83       	st	Z, r18
    3e36:	fb 01       	movw	r30, r22
    3e38:	41 89       	ldd	r20, Z+17	; 0x11
    3e3a:	52 89       	ldd	r21, Z+18	; 0x12
    3e3c:	63 89       	ldd	r22, Z+19	; 0x13
    3e3e:	74 89       	ldd	r23, Z+20	; 0x14
    3e40:	fc 01       	movw	r30, r24
    3e42:	42 83       	std	Z+2, r20	; 0x02
    3e44:	53 83       	std	Z+3, r21	; 0x03
    3e46:	64 83       	std	Z+4, r22	; 0x04
    3e48:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    3e4a:	08 95       	ret

00003e4c <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	85 89       	ldd	r24, Z+21	; 0x15
    3e50:	96 89       	ldd	r25, Z+22	; 0x16
    3e52:	08 95       	ret

00003e54 <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    3e54:	fc 01       	movw	r30, r24
    3e56:	81 8d       	ldd	r24, Z+25	; 0x19
    3e58:	92 8d       	ldd	r25, Z+26	; 0x1a
    3e5a:	08 95       	ret

00003e5c <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    3e5c:	cf 93       	push	r28
    3e5e:	df 93       	push	r29
    3e60:	1f 92       	push	r1
    3e62:	cd b7       	in	r28, 0x3d	; 61
    3e64:	de b7       	in	r29, 0x3e	; 62
    3e66:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    3e68:	dc 01       	movw	r26, r24
    3e6a:	ed 91       	ld	r30, X+
    3e6c:	fc 91       	ld	r31, X
    3e6e:	02 80       	ldd	r0, Z+2	; 0x02
    3e70:	f3 81       	ldd	r31, Z+3	; 0x03
    3e72:	e0 2d       	mov	r30, r0
    3e74:	41 e0       	ldi	r20, 0x01	; 1
    3e76:	50 e0       	ldi	r21, 0x00	; 0
    3e78:	be 01       	movw	r22, r28
    3e7a:	6f 5f       	subi	r22, 0xFF	; 255
    3e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e7e:	09 95       	icall
}
    3e80:	0f 90       	pop	r0
    3e82:	df 91       	pop	r29
    3e84:	cf 91       	pop	r28
    3e86:	08 95       	ret

00003e88 <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    3e88:	cf 93       	push	r28
    3e8a:	df 93       	push	r29
    3e8c:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    3e8e:	89 8d       	ldd	r24, Y+25	; 0x19
    3e90:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3e92:	89 2b       	or	r24, r25
    3e94:	41 f0       	breq	.+16     	; 0x3ea6 <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    3e96:	e8 81       	ld	r30, Y
    3e98:	f9 81       	ldd	r31, Y+1	; 0x01
    3e9a:	02 84       	ldd	r0, Z+10	; 0x0a
    3e9c:	f3 85       	ldd	r31, Z+11	; 0x0b
    3e9e:	e0 2d       	mov	r30, r0
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    3ea4:	f4 cf       	rjmp	.-24     	; 0x3e8e <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    3ea6:	df 91       	pop	r29
    3ea8:	cf 91       	pop	r28
    3eaa:	08 95       	ret

00003eac <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    3eac:	cf 93       	push	r28
    3eae:	df 93       	push	r29
    3eb0:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    3eb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3eb4:	88 30       	cpi	r24, 0x08	; 8
    3eb6:	59 f0       	breq	.+22     	; 0x3ece <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    3eb8:	c2 d1       	rcall	.+900    	; 0x423e <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    3eba:	ec 85       	ldd	r30, Y+12	; 0x0c
    3ebc:	f0 e0       	ldi	r31, 0x00	; 0
    3ebe:	ee 0f       	add	r30, r30
    3ec0:	ff 1f       	adc	r31, r31
    3ec2:	ee 56       	subi	r30, 0x6E	; 110
    3ec4:	f6 4f       	sbci	r31, 0xF6	; 246
    3ec6:	11 82       	std	Z+1, r1	; 0x01
    3ec8:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    3eca:	88 e0       	ldi	r24, 0x08	; 8
    3ecc:	8c 87       	std	Y+12, r24	; 0x0c
}
    3ece:	df 91       	pop	r29
    3ed0:	cf 91       	pop	r28
    3ed2:	08 95       	ret

00003ed4 <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    3ed4:	fc 01       	movw	r30, r24
    3ed6:	10 8e       	std	Z+24, r1	; 0x18
    3ed8:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    3eda:	6e 5f       	subi	r22, 0xFE	; 254
    3edc:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    3ede:	84 85       	ldd	r24, Z+12	; 0x0c
    3ee0:	e6 c2       	rjmp	.+1484   	; 0x44ae <_Z8startUDPhPhj>

00003ee2 <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    3ee2:	fc 01       	movw	r30, r24
    3ee4:	84 85       	ldd	r24, Z+12	; 0x0c
    3ee6:	06 c3       	rjmp	.+1548   	; 0x44f4 <_Z7sendUDPh>

00003ee8 <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    3ee8:	cf 93       	push	r28
    3eea:	df 93       	push	r29
    3eec:	ec 01       	movw	r28, r24
    3eee:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    3ef0:	8f 89       	ldd	r24, Y+23	; 0x17
    3ef2:	98 8d       	ldd	r25, Y+24	; 0x18
    3ef4:	ab 01       	movw	r20, r22
    3ef6:	bc 01       	movw	r22, r24
    3ef8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3efa:	ae d2       	rcall	.+1372   	; 0x4458 <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    3efc:	2f 89       	ldd	r18, Y+23	; 0x17
    3efe:	38 8d       	ldd	r19, Y+24	; 0x18
    3f00:	28 0f       	add	r18, r24
    3f02:	39 1f       	adc	r19, r25
    3f04:	38 8f       	std	Y+24, r19	; 0x18
    3f06:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    3f08:	df 91       	pop	r29
    3f0a:	cf 91       	pop	r28
    3f0c:	08 95       	ret

00003f0e <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    3f0e:	0f 93       	push	r16
    3f10:	1f 93       	push	r17
    3f12:	cf 93       	push	r28
    3f14:	df 93       	push	r29
    3f16:	1f 92       	push	r1
    3f18:	cd b7       	in	r28, 0x3d	; 61
    3f1a:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    3f1c:	fc 01       	movw	r30, r24
    3f1e:	21 8d       	ldd	r18, Z+25	; 0x19
    3f20:	32 8d       	ldd	r19, Z+26	; 0x1a
    3f22:	23 2b       	or	r18, r19
    3f24:	59 f0       	breq	.+22     	; 0x3f3c <_ZN11EthernetUDP4readEv+0x2e>
    3f26:	8c 01       	movw	r16, r24
    3f28:	41 e0       	ldi	r20, 0x01	; 1
    3f2a:	50 e0       	ldi	r21, 0x00	; 0
    3f2c:	be 01       	movw	r22, r28
    3f2e:	6f 5f       	subi	r22, 0xFF	; 255
    3f30:	7f 4f       	sbci	r23, 0xFF	; 255
    3f32:	84 85       	ldd	r24, Z+12	; 0x0c
    3f34:	42 d2       	rcall	.+1156   	; 0x43ba <_Z4recvhPhi>
    3f36:	18 16       	cp	r1, r24
    3f38:	19 06       	cpc	r1, r25
    3f3a:	1c f0       	brlt	.+6      	; 0x3f42 <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    3f3c:	8f ef       	ldi	r24, 0xFF	; 255
    3f3e:	9f ef       	ldi	r25, 0xFF	; 255
    3f40:	08 c0       	rjmp	.+16     	; 0x3f52 <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    3f42:	f8 01       	movw	r30, r16
    3f44:	81 8d       	ldd	r24, Z+25	; 0x19
    3f46:	92 8d       	ldd	r25, Z+26	; 0x1a
    3f48:	01 97       	sbiw	r24, 0x01	; 1
    3f4a:	92 8f       	std	Z+26, r25	; 0x1a
    3f4c:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    3f4e:	89 81       	ldd	r24, Y+1	; 0x01
    3f50:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    3f52:	0f 90       	pop	r0
    3f54:	df 91       	pop	r29
    3f56:	cf 91       	pop	r28
    3f58:	1f 91       	pop	r17
    3f5a:	0f 91       	pop	r16
    3f5c:	08 95       	ret

00003f5e <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    3f5e:	cf 93       	push	r28
    3f60:	df 93       	push	r29

  if (_remaining > 0)
    3f62:	fc 01       	movw	r30, r24
    3f64:	21 8d       	ldd	r18, Z+25	; 0x19
    3f66:	32 8d       	ldd	r19, Z+26	; 0x1a
    3f68:	21 15       	cp	r18, r1
    3f6a:	31 05       	cpc	r19, r1
    3f6c:	19 f4       	brne	.+6      	; 0x3f74 <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    3f6e:	8f ef       	ldi	r24, 0xFF	; 255
    3f70:	9f ef       	ldi	r25, 0xFF	; 255
    3f72:	10 c0       	rjmp	.+32     	; 0x3f94 <_ZN11EthernetUDP4readEPhj+0x36>
    3f74:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    3f76:	42 17       	cp	r20, r18
    3f78:	53 07       	cpc	r21, r19
    3f7a:	08 f0       	brcs	.+2      	; 0x3f7e <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    3f7c:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    3f7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f80:	1c d2       	rcall	.+1080   	; 0x43ba <_Z4recvhPhi>
    }

    if (got > 0)
    3f82:	18 16       	cp	r1, r24
    3f84:	19 06       	cpc	r1, r25
    3f86:	9c f7       	brge	.-26     	; 0x3f6e <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    3f88:	29 8d       	ldd	r18, Y+25	; 0x19
    3f8a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3f8c:	28 1b       	sub	r18, r24
    3f8e:	39 0b       	sbc	r19, r25
    3f90:	3a 8f       	std	Y+26, r19	; 0x1a
    3f92:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    3f94:	df 91       	pop	r29
    3f96:	cf 91       	pop	r28
    3f98:	08 95       	ret

00003f9a <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    3f9a:	cf 93       	push	r28
    3f9c:	df 93       	push	r29
    3f9e:	1f 92       	push	r1
    3fa0:	cd b7       	in	r28, 0x3d	; 61
    3fa2:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    3fa4:	fc 01       	movw	r30, r24
    3fa6:	21 8d       	ldd	r18, Z+25	; 0x19
    3fa8:	32 8d       	ldd	r19, Z+26	; 0x1a
    3faa:	23 2b       	or	r18, r19
    3fac:	41 f0       	breq	.+16     	; 0x3fbe <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    3fae:	be 01       	movw	r22, r28
    3fb0:	6f 5f       	subi	r22, 0xFF	; 255
    3fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb4:	84 85       	ldd	r24, Z+12	; 0x0c
    3fb6:	42 d2       	rcall	.+1156   	; 0x443c <_Z4peekhPh>
  return b;
    3fb8:	89 81       	ldd	r24, Y+1	; 0x01
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	02 c0       	rjmp	.+4      	; 0x3fc2 <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    3fbe:	8f ef       	ldi	r24, 0xFF	; 255
    3fc0:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    3fc2:	0f 90       	pop	r0
    3fc4:	df 91       	pop	r29
    3fc6:	cf 91       	pop	r28
    3fc8:	08 95       	ret

00003fca <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    3fca:	ef 92       	push	r14
    3fcc:	ff 92       	push	r15
    3fce:	1f 93       	push	r17
    3fd0:	cf 93       	push	r28
    3fd2:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	24 85       	ldd	r18, Z+12	; 0x0c
    3fd8:	28 30       	cpi	r18, 0x08	; 8
    3fda:	11 f0       	breq	.+4      	; 0x3fe0 <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    3fdc:	80 e0       	ldi	r24, 0x00	; 0
    3fde:	20 c0       	rjmp	.+64     	; 0x4020 <_ZN11EthernetUDP5beginEj+0x56>
    3fe0:	7b 01       	movw	r14, r22
    3fe2:	ec 01       	movw	r28, r24
    3fe4:	10 e0       	ldi	r17, 0x00	; 0
    3fe6:	61 2f       	mov	r22, r17
    3fe8:	62 95       	swap	r22
    3fea:	66 0f       	add	r22, r22
    3fec:	60 7e       	andi	r22, 0xE0	; 224
    3fee:	68 5f       	subi	r22, 0xF8	; 248
    3ff0:	83 e0       	ldi	r24, 0x03	; 3
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	1b d3       	rcall	.+1590   	; 0x462c <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    3ff6:	81 11       	cpse	r24, r1
    3ff8:	02 c0       	rjmp	.+4      	; 0x3ffe <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    3ffa:	1c 87       	std	Y+12, r17	; 0x0c
    3ffc:	05 c0       	rjmp	.+10     	; 0x4008 <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    3ffe:	88 31       	cpi	r24, 0x18	; 24
    4000:	e1 f3       	breq	.-8      	; 0x3ffa <_ZN11EthernetUDP5beginEj+0x30>
    4002:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    4004:	18 30       	cpi	r17, 0x08	; 8
    4006:	79 f7       	brne	.-34     	; 0x3fe6 <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    4008:	8c 85       	ldd	r24, Y+12	; 0x0c
    400a:	88 30       	cpi	r24, 0x08	; 8
    400c:	39 f3       	breq	.-50     	; 0x3fdc <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    400e:	fe 86       	std	Y+14, r15	; 0x0e
    4010:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    4012:	1a 8e       	std	Y+26, r1	; 0x1a
    4014:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    4016:	20 e0       	ldi	r18, 0x00	; 0
    4018:	a7 01       	movw	r20, r14
    401a:	62 e0       	ldi	r22, 0x02	; 2
    401c:	1b d1       	rcall	.+566    	; 0x4254 <_Z6sockethhjh>

  return 1;
    401e:	81 e0       	ldi	r24, 0x01	; 1
}
    4020:	df 91       	pop	r29
    4022:	cf 91       	pop	r28
    4024:	1f 91       	pop	r17
    4026:	ff 90       	pop	r15
    4028:	ef 90       	pop	r14
    402a:	08 95       	ret

0000402c <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    402c:	0f 93       	push	r16
    402e:	1f 93       	push	r17
    4030:	cf 93       	push	r28
    4032:	df 93       	push	r29
    4034:	cd b7       	in	r28, 0x3d	; 61
    4036:	de b7       	in	r29, 0x3e	; 62
    4038:	28 97       	sbiw	r28, 0x08	; 8
    403a:	0f b6       	in	r0, 0x3f	; 63
    403c:	f8 94       	cli
    403e:	de bf       	out	0x3e, r29	; 62
    4040:	0f be       	out	0x3f, r0	; 63
    4042:	cd bf       	out	0x3d, r28	; 61
    4044:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    4046:	dc 01       	movw	r26, r24
    4048:	ed 91       	ld	r30, X+
    404a:	fc 91       	ld	r31, X
    404c:	06 80       	ldd	r0, Z+6	; 0x06
    404e:	f7 81       	ldd	r31, Z+7	; 0x07
    4050:	e0 2d       	mov	r30, r0
    4052:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    4054:	f8 01       	movw	r30, r16
    4056:	64 85       	ldd	r22, Z+12	; 0x0c
    4058:	8f eb       	ldi	r24, 0xBF	; 191
    405a:	99 e0       	ldi	r25, 0x09	; 9
    405c:	77 d3       	rcall	.+1774   	; 0x474c <_ZN10W5500Class17getRXReceivedSizeEh>
    405e:	89 2b       	or	r24, r25
    4060:	39 f1       	breq	.+78     	; 0x40b0 <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    4062:	48 e0       	ldi	r20, 0x08	; 8
    4064:	50 e0       	ldi	r21, 0x00	; 0
    4066:	be 01       	movw	r22, r28
    4068:	6f 5f       	subi	r22, 0xFF	; 255
    406a:	7f 4f       	sbci	r23, 0xFF	; 255
    406c:	d8 01       	movw	r26, r16
    406e:	1c 96       	adiw	r26, 0x0c	; 12
    4070:	8c 91       	ld	r24, X
    4072:	a3 d1       	rcall	.+838    	; 0x43ba <_Z4recvhPhi>
    if (ret > 0)
    4074:	18 16       	cp	r1, r24
    4076:	19 06       	cpc	r1, r25
    4078:	ec f4       	brge	.+58     	; 0x40b4 <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    407a:	be 01       	movw	r22, r28
    407c:	6f 5f       	subi	r22, 0xFF	; 255
    407e:	7f 4f       	sbci	r23, 0xFF	; 255
    4080:	c8 01       	movw	r24, r16
    4082:	0f 96       	adiw	r24, 0x0f	; 15
    4084:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    4088:	8d 81       	ldd	r24, Y+5	; 0x05
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	98 2f       	mov	r25, r24
    408e:	88 27       	eor	r24, r24
    4090:	2e 81       	ldd	r18, Y+6	; 0x06
    4092:	82 0f       	add	r24, r18
    4094:	91 1d       	adc	r25, r1
    4096:	f8 01       	movw	r30, r16
    4098:	96 8b       	std	Z+22, r25	; 0x16
    409a:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    409c:	8f 81       	ldd	r24, Y+7	; 0x07
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	98 2f       	mov	r25, r24
    40a2:	88 27       	eor	r24, r24
    40a4:	28 85       	ldd	r18, Y+8	; 0x08
    40a6:	82 0f       	add	r24, r18
    40a8:	91 1d       	adc	r25, r1
    40aa:	92 8f       	std	Z+26, r25	; 0x1a
    40ac:	81 8f       	std	Z+25, r24	; 0x19
    40ae:	02 c0       	rjmp	.+4      	; 0x40b4 <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    40b0:	80 e0       	ldi	r24, 0x00	; 0
    40b2:	90 e0       	ldi	r25, 0x00	; 0
}
    40b4:	28 96       	adiw	r28, 0x08	; 8
    40b6:	0f b6       	in	r0, 0x3f	; 63
    40b8:	f8 94       	cli
    40ba:	de bf       	out	0x3e, r29	; 62
    40bc:	0f be       	out	0x3f, r0	; 63
    40be:	cd bf       	out	0x3d, r28	; 61
    40c0:	df 91       	pop	r29
    40c2:	cf 91       	pop	r28
    40c4:	1f 91       	pop	r17
    40c6:	0f 91       	pop	r16
    40c8:	08 95       	ret

000040ca <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    40ca:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    40cc:	13 82       	std	Z+3, r1	; 0x03
    40ce:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    40d0:	88 ee       	ldi	r24, 0xE8	; 232
    40d2:	93 e0       	ldi	r25, 0x03	; 3
    40d4:	a0 e0       	ldi	r26, 0x00	; 0
    40d6:	b0 e0       	ldi	r27, 0x00	; 0
    40d8:	84 83       	std	Z+4, r24	; 0x04
    40da:	95 83       	std	Z+5, r25	; 0x05
    40dc:	a6 83       	std	Z+6, r26	; 0x06
    40de:	b7 83       	std	Z+7, r27	; 0x07
    40e0:	85 e9       	ldi	r24, 0x95	; 149
    40e2:	97 e0       	ldi	r25, 0x07	; 7
    40e4:	91 83       	std	Z+1, r25	; 0x01
    40e6:	80 83       	st	Z, r24
    40e8:	88 e0       	ldi	r24, 0x08	; 8
    40ea:	84 87       	std	Z+12, r24	; 0x0c
    40ec:	cf 01       	movw	r24, r30
    40ee:	0f 96       	adiw	r24, 0x0f	; 15
    40f0:	0c 94 22 2d 	jmp	0x5a44	; 0x5a44 <_ZN9IPAddressC1Ev>

000040f4 <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    40f4:	cf 92       	push	r12
    40f6:	df 92       	push	r13
    40f8:	ef 92       	push	r14
    40fa:	ff 92       	push	r15
    40fc:	0f 93       	push	r16
    40fe:	1f 93       	push	r17
    4100:	cf 93       	push	r28
    4102:	df 93       	push	r29
    4104:	cd b7       	in	r28, 0x3d	; 61
    4106:	de b7       	in	r29, 0x3e	; 62
    4108:	af 97       	sbiw	r28, 0x2f	; 47
    410a:	0f b6       	in	r0, 0x3f	; 63
    410c:	f8 94       	cli
    410e:	de bf       	out	0x3e, r29	; 62
    4110:	0f be       	out	0x3f, r0	; 63
    4112:	cd bf       	out	0x3d, r28	; 61
    4114:	8c 01       	movw	r16, r24
    4116:	6b 01       	movw	r12, r22
    4118:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    411a:	ce 01       	movw	r24, r28
    411c:	01 96       	adiw	r24, 0x01	; 1
    411e:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <_ZN9IPAddressC1Ev>
    4122:	ce 01       	movw	r24, r28
    4124:	09 96       	adiw	r24, 0x09	; 9
    4126:	d1 df       	rcall	.-94     	; 0x40ca <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    4128:	ce 01       	movw	r24, r28
    412a:	8a 96       	adiw	r24, 0x2a	; 42
    412c:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    4130:	65 e8       	ldi	r22, 0x85	; 133
    4132:	79 e0       	ldi	r23, 0x09	; 9
    4134:	ce 01       	movw	r24, r28
    4136:	84 96       	adiw	r24, 0x24	; 36
    4138:	63 dc       	rcall	.-1850   	; 0x3a00 <_ZN13EthernetClass11dnsServerIPEv>
    413a:	be 01       	movw	r22, r28
    413c:	6c 5d       	subi	r22, 0xDC	; 220
    413e:	7f 4f       	sbci	r23, 0xFF	; 255
    4140:	ce 01       	movw	r24, r28
    4142:	01 96       	adiw	r24, 0x01	; 1
    4144:	28 d9       	rcall	.-3504   	; 0x3396 <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    4146:	ae 01       	movw	r20, r28
    4148:	46 5d       	subi	r20, 0xD6	; 214
    414a:	5f 4f       	sbci	r21, 0xFF	; 255
    414c:	b6 01       	movw	r22, r12
    414e:	ce 01       	movw	r24, r28
    4150:	01 96       	adiw	r24, 0x01	; 1
    4152:	7b db       	rcall	.-2314   	; 0x384a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    4154:	81 30       	cpi	r24, 0x01	; 1
    4156:	91 05       	cpc	r25, r1
    4158:	c1 f4       	brne	.+48     	; 0x418a <__stack+0x8b>
    return beginPacket(remote_addr, port);
    415a:	d8 01       	movw	r26, r16
    415c:	ed 91       	ld	r30, X+
    415e:	fc 91       	ld	r31, X
    4160:	04 88       	ldd	r0, Z+20	; 0x14
    4162:	f5 89       	ldd	r31, Z+21	; 0x15
    4164:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4166:	87 ef       	ldi	r24, 0xF7	; 247
    4168:	97 e0       	ldi	r25, 0x07	; 7
    416a:	9d a3       	std	Y+37, r25	; 0x25
    416c:	8c a3       	std	Y+36, r24	; 0x24
    416e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4170:	9d a5       	ldd	r25, Y+45	; 0x2d
    4172:	ae a5       	ldd	r26, Y+46	; 0x2e
    4174:	bf a5       	ldd	r27, Y+47	; 0x2f
    4176:	8e a3       	std	Y+38, r24	; 0x26
    4178:	9f a3       	std	Y+39, r25	; 0x27
    417a:	a8 a7       	std	Y+40, r26	; 0x28
    417c:	b9 a7       	std	Y+41, r27	; 0x29
    417e:	a7 01       	movw	r20, r14
    4180:	be 01       	movw	r22, r28
    4182:	6c 5d       	subi	r22, 0xDC	; 220
    4184:	7f 4f       	sbci	r23, 0xFF	; 255
    4186:	c8 01       	movw	r24, r16
    4188:	09 95       	icall
  } else {
    return ret;
  }
}
    418a:	af 96       	adiw	r28, 0x2f	; 47
    418c:	0f b6       	in	r0, 0x3f	; 63
    418e:	f8 94       	cli
    4190:	de bf       	out	0x3e, r29	; 62
    4192:	0f be       	out	0x3f, r0	; 63
    4194:	cd bf       	out	0x3d, r28	; 61
    4196:	df 91       	pop	r29
    4198:	cf 91       	pop	r28
    419a:	1f 91       	pop	r17
    419c:	0f 91       	pop	r16
    419e:	ff 90       	pop	r15
    41a0:	ef 90       	pop	r14
    41a2:	df 90       	pop	r13
    41a4:	cf 90       	pop	r12
    41a6:	08 95       	ret

000041a8 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    41a8:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    41aa:	00 e0       	ldi	r16, 0x00	; 0
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	40 e0       	ldi	r20, 0x00	; 0
    41b0:	60 e0       	ldi	r22, 0x00	; 0
    41b2:	84 eb       	ldi	r24, 0xB4	; 180
    41b4:	99 e0       	ldi	r25, 0x09	; 9
    41b6:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <_ZN9IPAddressC1Ehhhh>
    41ba:	0f 91       	pop	r16
    41bc:	08 95       	ret

000041be <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    41be:	ab 01       	movw	r20, r22
    41c0:	82 95       	swap	r24
    41c2:	88 0f       	add	r24, r24
    41c4:	80 7e       	andi	r24, 0xE0	; 224
    41c6:	6c e0       	ldi	r22, 0x0C	; 12
    41c8:	68 0f       	add	r22, r24
    41ca:	24 e0       	ldi	r18, 0x04	; 4
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	8c e0       	ldi	r24, 0x0C	; 12
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	00 c2       	rjmp	.+1024   	; 0x45d4 <_ZN10W5500Class5writeEjhPKhj>

000041d4 <_ZN10W5500Class6readSnEhj>:
    41d4:	9b 01       	movw	r18, r22
    41d6:	82 95       	swap	r24
    41d8:	88 0f       	add	r24, r24
    41da:	80 7e       	andi	r24, 0xE0	; 224
    41dc:	68 e0       	ldi	r22, 0x08	; 8
    41de:	68 0f       	add	r22, r24
    41e0:	c9 01       	movw	r24, r18
    41e2:	24 c2       	rjmp	.+1096   	; 0x462c <_ZN10W5500Class4readEjh>

000041e4 <_ZN10W5500Class8readSnIREh>:
    41e4:	62 e0       	ldi	r22, 0x02	; 2
    41e6:	70 e0       	ldi	r23, 0x00	; 0
    41e8:	f5 cf       	rjmp	.-22     	; 0x41d4 <_ZN10W5500Class6readSnEhj>

000041ea <_ZN10W5500Class7writeSnEhjh>:
    41ea:	9b 01       	movw	r18, r22
    41ec:	82 95       	swap	r24
    41ee:	88 0f       	add	r24, r24
    41f0:	80 7e       	andi	r24, 0xE0	; 224
    41f2:	6c e0       	ldi	r22, 0x0C	; 12
    41f4:	68 0f       	add	r22, r24
    41f6:	c9 01       	movw	r24, r18
    41f8:	cf c1       	rjmp	.+926    	; 0x4598 <_ZN10W5500Class5writeEjhh>

000041fa <_ZN10W5500Class11writeSnPORTEhj>:
    41fa:	cf 93       	push	r28
    41fc:	df 93       	push	r29
    41fe:	c8 2f       	mov	r28, r24
    4200:	d6 2f       	mov	r29, r22
    4202:	47 2f       	mov	r20, r23
    4204:	64 e0       	ldi	r22, 0x04	; 4
    4206:	70 e0       	ldi	r23, 0x00	; 0
    4208:	f0 df       	rcall	.-32     	; 0x41ea <_ZN10W5500Class7writeSnEhjh>
    420a:	4d 2f       	mov	r20, r29
    420c:	65 e0       	ldi	r22, 0x05	; 5
    420e:	70 e0       	ldi	r23, 0x00	; 0
    4210:	8c 2f       	mov	r24, r28
    4212:	df 91       	pop	r29
    4214:	cf 91       	pop	r28
    4216:	e9 cf       	rjmp	.-46     	; 0x41ea <_ZN10W5500Class7writeSnEhjh>

00004218 <_ZN10W5500Class9writeSnIREhh>:
    4218:	46 2f       	mov	r20, r22
    421a:	62 e0       	ldi	r22, 0x02	; 2
    421c:	70 e0       	ldi	r23, 0x00	; 0
    421e:	e5 cf       	rjmp	.-54     	; 0x41ea <_ZN10W5500Class7writeSnEhjh>

00004220 <_ZN10W5500Class12writeSnDPORTEhj>:
    4220:	cf 93       	push	r28
    4222:	df 93       	push	r29
    4224:	c8 2f       	mov	r28, r24
    4226:	d6 2f       	mov	r29, r22
    4228:	47 2f       	mov	r20, r23
    422a:	60 e1       	ldi	r22, 0x10	; 16
    422c:	70 e0       	ldi	r23, 0x00	; 0
    422e:	dd df       	rcall	.-70     	; 0x41ea <_ZN10W5500Class7writeSnEhjh>
    4230:	4d 2f       	mov	r20, r29
    4232:	61 e1       	ldi	r22, 0x11	; 17
    4234:	70 e0       	ldi	r23, 0x00	; 0
    4236:	8c 2f       	mov	r24, r28
    4238:	df 91       	pop	r29
    423a:	cf 91       	pop	r28
    423c:	d6 cf       	rjmp	.-84     	; 0x41ea <_ZN10W5500Class7writeSnEhjh>

0000423e <_Z5closeh>:
    423e:	cf 93       	push	r28
    4240:	c8 2f       	mov	r28, r24
    4242:	40 e1       	ldi	r20, 0x10	; 16
    4244:	68 2f       	mov	r22, r24
    4246:	8f eb       	ldi	r24, 0xBF	; 191
    4248:	99 e0       	ldi	r25, 0x09	; 9
    424a:	70 d3       	rcall	.+1760   	; 0x492c <_ZN10W5500Class9execCmdSnEh7SockCMD>
    424c:	6f ef       	ldi	r22, 0xFF	; 255
    424e:	8c 2f       	mov	r24, r28
    4250:	cf 91       	pop	r28
    4252:	e2 cf       	rjmp	.-60     	; 0x4218 <_ZN10W5500Class9writeSnIREhh>

00004254 <_Z6sockethhjh>:
    4254:	ff 92       	push	r15
    4256:	0f 93       	push	r16
    4258:	1f 93       	push	r17
    425a:	cf 93       	push	r28
    425c:	df 93       	push	r29
    425e:	9f ef       	ldi	r25, 0xFF	; 255
    4260:	96 0f       	add	r25, r22
    4262:	95 30       	cpi	r25, 0x05	; 5
    4264:	18 f5       	brcc	.+70     	; 0x42ac <_Z6sockethhjh+0x58>
    4266:	d2 2f       	mov	r29, r18
    4268:	8a 01       	movw	r16, r20
    426a:	f6 2e       	mov	r15, r22
    426c:	c8 2f       	mov	r28, r24
    426e:	e7 df       	rcall	.-50     	; 0x423e <_Z5closeh>
    4270:	4f 2d       	mov	r20, r15
    4272:	4d 2b       	or	r20, r29
    4274:	60 e0       	ldi	r22, 0x00	; 0
    4276:	70 e0       	ldi	r23, 0x00	; 0
    4278:	8c 2f       	mov	r24, r28
    427a:	b7 df       	rcall	.-146    	; 0x41ea <_ZN10W5500Class7writeSnEhjh>
    427c:	01 15       	cp	r16, r1
    427e:	11 05       	cpc	r17, r1
    4280:	11 f0       	breq	.+4      	; 0x4286 <_Z6sockethhjh+0x32>
    4282:	b8 01       	movw	r22, r16
    4284:	0a c0       	rjmp	.+20     	; 0x429a <_Z6sockethhjh+0x46>
    4286:	60 91 ba 09 	lds	r22, 0x09BA	; 0x8009ba <_ZL10local_port>
    428a:	70 91 bb 09 	lds	r23, 0x09BB	; 0x8009bb <_ZL10local_port+0x1>
    428e:	6f 5f       	subi	r22, 0xFF	; 255
    4290:	7f 4f       	sbci	r23, 0xFF	; 255
    4292:	70 93 bb 09 	sts	0x09BB, r23	; 0x8009bb <_ZL10local_port+0x1>
    4296:	60 93 ba 09 	sts	0x09BA, r22	; 0x8009ba <_ZL10local_port>
    429a:	8c 2f       	mov	r24, r28
    429c:	ae df       	rcall	.-164    	; 0x41fa <_ZN10W5500Class11writeSnPORTEhj>
    429e:	41 e0       	ldi	r20, 0x01	; 1
    42a0:	6c 2f       	mov	r22, r28
    42a2:	8f eb       	ldi	r24, 0xBF	; 191
    42a4:	99 e0       	ldi	r25, 0x09	; 9
    42a6:	42 d3       	rcall	.+1668   	; 0x492c <_ZN10W5500Class9execCmdSnEh7SockCMD>
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	01 c0       	rjmp	.+2      	; 0x42ae <_Z6sockethhjh+0x5a>
    42ac:	80 e0       	ldi	r24, 0x00	; 0
    42ae:	df 91       	pop	r29
    42b0:	cf 91       	pop	r28
    42b2:	1f 91       	pop	r17
    42b4:	0f 91       	pop	r16
    42b6:	ff 90       	pop	r15
    42b8:	08 95       	ret

000042ba <_Z7connecthPhj>:
    42ba:	0f 93       	push	r16
    42bc:	1f 93       	push	r17
    42be:	cf 93       	push	r28
    42c0:	fb 01       	movw	r30, r22
    42c2:	90 81       	ld	r25, Z
    42c4:	9f 3f       	cpi	r25, 0xFF	; 255
    42c6:	51 f4       	brne	.+20     	; 0x42dc <_Z7connecthPhj+0x22>
    42c8:	91 81       	ldd	r25, Z+1	; 0x01
    42ca:	9f 3f       	cpi	r25, 0xFF	; 255
    42cc:	91 f4       	brne	.+36     	; 0x42f2 <_Z7connecthPhj+0x38>
    42ce:	92 81       	ldd	r25, Z+2	; 0x02
    42d0:	9f 3f       	cpi	r25, 0xFF	; 255
    42d2:	79 f4       	brne	.+30     	; 0x42f2 <_Z7connecthPhj+0x38>
    42d4:	93 81       	ldd	r25, Z+3	; 0x03
    42d6:	9f 3f       	cpi	r25, 0xFF	; 255
    42d8:	61 f4       	brne	.+24     	; 0x42f2 <_Z7connecthPhj+0x38>
    42da:	1c c0       	rjmp	.+56     	; 0x4314 <_Z7connecthPhj+0x5a>
    42dc:	91 11       	cpse	r25, r1
    42de:	09 c0       	rjmp	.+18     	; 0x42f2 <_Z7connecthPhj+0x38>
    42e0:	91 81       	ldd	r25, Z+1	; 0x01
    42e2:	91 11       	cpse	r25, r1
    42e4:	06 c0       	rjmp	.+12     	; 0x42f2 <_Z7connecthPhj+0x38>
    42e6:	92 81       	ldd	r25, Z+2	; 0x02
    42e8:	91 11       	cpse	r25, r1
    42ea:	03 c0       	rjmp	.+6      	; 0x42f2 <_Z7connecthPhj+0x38>
    42ec:	93 81       	ldd	r25, Z+3	; 0x03
    42ee:	99 23       	and	r25, r25
    42f0:	91 f0       	breq	.+36     	; 0x4316 <_Z7connecthPhj+0x5c>
    42f2:	41 15       	cp	r20, r1
    42f4:	51 05       	cpc	r21, r1
    42f6:	71 f0       	breq	.+28     	; 0x4314 <_Z7connecthPhj+0x5a>
    42f8:	8a 01       	movw	r16, r20
    42fa:	bf 01       	movw	r22, r30
    42fc:	c8 2f       	mov	r28, r24
    42fe:	5f df       	rcall	.-322    	; 0x41be <_ZN10W5500Class11writeSnDIPREhPh>
    4300:	b8 01       	movw	r22, r16
    4302:	8c 2f       	mov	r24, r28
    4304:	8d df       	rcall	.-230    	; 0x4220 <_ZN10W5500Class12writeSnDPORTEhj>
    4306:	44 e0       	ldi	r20, 0x04	; 4
    4308:	6c 2f       	mov	r22, r28
    430a:	8f eb       	ldi	r24, 0xBF	; 191
    430c:	99 e0       	ldi	r25, 0x09	; 9
    430e:	0e d3       	rcall	.+1564   	; 0x492c <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4310:	91 e0       	ldi	r25, 0x01	; 1
    4312:	01 c0       	rjmp	.+2      	; 0x4316 <_Z7connecthPhj+0x5c>
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	89 2f       	mov	r24, r25
    4318:	cf 91       	pop	r28
    431a:	1f 91       	pop	r17
    431c:	0f 91       	pop	r16
    431e:	08 95       	ret

00004320 <_Z10disconnecth>:
    4320:	48 e0       	ldi	r20, 0x08	; 8
    4322:	68 2f       	mov	r22, r24
    4324:	8f eb       	ldi	r24, 0xBF	; 191
    4326:	99 e0       	ldi	r25, 0x09	; 9
    4328:	01 c3       	rjmp	.+1538   	; 0x492c <_ZN10W5500Class9execCmdSnEh7SockCMD>

0000432a <_Z4sendhPKhj>:
    432a:	cf 92       	push	r12
    432c:	df 92       	push	r13
    432e:	ef 92       	push	r14
    4330:	ff 92       	push	r15
    4332:	0f 93       	push	r16
    4334:	1f 93       	push	r17
    4336:	cf 93       	push	r28
    4338:	c8 2f       	mov	r28, r24
    433a:	7b 01       	movw	r14, r22
    433c:	8a 01       	movw	r16, r20
    433e:	41 30       	cpi	r20, 0x01	; 1
    4340:	58 40       	sbci	r21, 0x08	; 8
    4342:	10 f0       	brcs	.+4      	; 0x4348 <_Z4sendhPKhj+0x1e>
    4344:	00 e0       	ldi	r16, 0x00	; 0
    4346:	18 e0       	ldi	r17, 0x08	; 8
    4348:	6c 2f       	mov	r22, r28
    434a:	8f eb       	ldi	r24, 0xBF	; 191
    434c:	99 e0       	ldi	r25, 0x09	; 9
    434e:	cd d1       	rcall	.+922    	; 0x46ea <_ZN10W5500Class13getTXFreeSizeEh>
    4350:	6c 01       	movw	r12, r24
    4352:	63 e0       	ldi	r22, 0x03	; 3
    4354:	70 e0       	ldi	r23, 0x00	; 0
    4356:	8c 2f       	mov	r24, r28
    4358:	3d df       	rcall	.-390    	; 0x41d4 <_ZN10W5500Class6readSnEhj>
    435a:	87 31       	cpi	r24, 0x17	; 23
    435c:	11 f0       	breq	.+4      	; 0x4362 <_Z4sendhPKhj+0x38>
    435e:	8c 31       	cpi	r24, 0x1C	; 28
    4360:	21 f4       	brne	.+8      	; 0x436a <_Z4sendhPKhj+0x40>
    4362:	c0 16       	cp	r12, r16
    4364:	d1 06       	cpc	r13, r17
    4366:	80 f3       	brcs	.-32     	; 0x4348 <_Z4sendhPKhj+0x1e>
    4368:	02 c0       	rjmp	.+4      	; 0x436e <_Z4sendhPKhj+0x44>
    436a:	00 e0       	ldi	r16, 0x00	; 0
    436c:	10 e0       	ldi	r17, 0x00	; 0
    436e:	98 01       	movw	r18, r16
    4370:	a7 01       	movw	r20, r14
    4372:	6c 2f       	mov	r22, r28
    4374:	8f eb       	ldi	r24, 0xBF	; 191
    4376:	99 e0       	ldi	r25, 0x09	; 9
    4378:	3d d2       	rcall	.+1146   	; 0x47f4 <_ZN10W5500Class20send_data_processingEhPKhj>
    437a:	40 e2       	ldi	r20, 0x20	; 32
    437c:	6c 2f       	mov	r22, r28
    437e:	8f eb       	ldi	r24, 0xBF	; 191
    4380:	99 e0       	ldi	r25, 0x09	; 9
    4382:	d4 d2       	rcall	.+1448   	; 0x492c <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4384:	8c 2f       	mov	r24, r28
    4386:	2e df       	rcall	.-420    	; 0x41e4 <_ZN10W5500Class8readSnIREh>
    4388:	84 fd       	sbrc	r24, 4
    438a:	0b c0       	rjmp	.+22     	; 0x43a2 <_Z4sendhPKhj+0x78>
    438c:	63 e0       	ldi	r22, 0x03	; 3
    438e:	70 e0       	ldi	r23, 0x00	; 0
    4390:	8c 2f       	mov	r24, r28
    4392:	20 df       	rcall	.-448    	; 0x41d4 <_ZN10W5500Class6readSnEhj>
    4394:	81 11       	cpse	r24, r1
    4396:	f6 cf       	rjmp	.-20     	; 0x4384 <_Z4sendhPKhj+0x5a>
    4398:	8c 2f       	mov	r24, r28
    439a:	51 df       	rcall	.-350    	; 0x423e <_Z5closeh>
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	04 c0       	rjmp	.+8      	; 0x43aa <_Z4sendhPKhj+0x80>
    43a2:	60 e1       	ldi	r22, 0x10	; 16
    43a4:	8c 2f       	mov	r24, r28
    43a6:	38 df       	rcall	.-400    	; 0x4218 <_ZN10W5500Class9writeSnIREhh>
    43a8:	c8 01       	movw	r24, r16
    43aa:	cf 91       	pop	r28
    43ac:	1f 91       	pop	r17
    43ae:	0f 91       	pop	r16
    43b0:	ff 90       	pop	r15
    43b2:	ef 90       	pop	r14
    43b4:	df 90       	pop	r13
    43b6:	cf 90       	pop	r12
    43b8:	08 95       	ret

000043ba <_Z4recvhPhi>:
    43ba:	cf 92       	push	r12
    43bc:	df 92       	push	r13
    43be:	ef 92       	push	r14
    43c0:	ff 92       	push	r15
    43c2:	0f 93       	push	r16
    43c4:	1f 93       	push	r17
    43c6:	cf 93       	push	r28
    43c8:	df 93       	push	r29
    43ca:	18 2f       	mov	r17, r24
    43cc:	6b 01       	movw	r12, r22
    43ce:	7a 01       	movw	r14, r20
    43d0:	68 2f       	mov	r22, r24
    43d2:	8f eb       	ldi	r24, 0xBF	; 191
    43d4:	99 e0       	ldi	r25, 0x09	; 9
    43d6:	ba d1       	rcall	.+884    	; 0x474c <_ZN10W5500Class17getRXReceivedSizeEh>
    43d8:	ec 01       	movw	r28, r24
    43da:	00 97       	sbiw	r24, 0x00	; 0
    43dc:	91 f4       	brne	.+36     	; 0x4402 <_Z4recvhPhi+0x48>
    43de:	63 e0       	ldi	r22, 0x03	; 3
    43e0:	70 e0       	ldi	r23, 0x00	; 0
    43e2:	81 2f       	mov	r24, r17
    43e4:	f7 de       	rcall	.-530    	; 0x41d4 <_ZN10W5500Class6readSnEhj>
    43e6:	84 31       	cpi	r24, 0x14	; 20
    43e8:	f9 f0       	breq	.+62     	; 0x4428 <_Z4recvhPhi+0x6e>
    43ea:	88 23       	and	r24, r24
    43ec:	e9 f0       	breq	.+58     	; 0x4428 <_Z4recvhPhi+0x6e>
    43ee:	c1 e0       	ldi	r28, 0x01	; 1
    43f0:	d0 e0       	ldi	r29, 0x00	; 0
    43f2:	8c 31       	cpi	r24, 0x1C	; 28
    43f4:	11 f4       	brne	.+4      	; 0x43fa <_Z4recvhPhi+0x40>
    43f6:	c0 e0       	ldi	r28, 0x00	; 0
    43f8:	d0 e0       	ldi	r29, 0x00	; 0
    43fa:	d1 95       	neg	r29
    43fc:	c1 95       	neg	r28
    43fe:	d1 09       	sbc	r29, r1
    4400:	13 c0       	rjmp	.+38     	; 0x4428 <_Z4recvhPhi+0x6e>
    4402:	e8 16       	cp	r14, r24
    4404:	f9 06       	cpc	r15, r25
    4406:	0c f4       	brge	.+2      	; 0x440a <_Z4recvhPhi+0x50>
    4408:	e7 01       	movw	r28, r14
    440a:	1c 16       	cp	r1, r28
    440c:	1d 06       	cpc	r1, r29
    440e:	64 f4       	brge	.+24     	; 0x4428 <_Z4recvhPhi+0x6e>
    4410:	00 e0       	ldi	r16, 0x00	; 0
    4412:	9e 01       	movw	r18, r28
    4414:	a6 01       	movw	r20, r12
    4416:	61 2f       	mov	r22, r17
    4418:	8f eb       	ldi	r24, 0xBF	; 191
    441a:	99 e0       	ldi	r25, 0x09	; 9
    441c:	3a d2       	rcall	.+1140   	; 0x4892 <_ZN10W5500Class20recv_data_processingEhPhjh>
    441e:	40 e4       	ldi	r20, 0x40	; 64
    4420:	61 2f       	mov	r22, r17
    4422:	8f eb       	ldi	r24, 0xBF	; 191
    4424:	99 e0       	ldi	r25, 0x09	; 9
    4426:	82 d2       	rcall	.+1284   	; 0x492c <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4428:	ce 01       	movw	r24, r28
    442a:	df 91       	pop	r29
    442c:	cf 91       	pop	r28
    442e:	1f 91       	pop	r17
    4430:	0f 91       	pop	r16
    4432:	ff 90       	pop	r15
    4434:	ef 90       	pop	r14
    4436:	df 90       	pop	r13
    4438:	cf 90       	pop	r12
    443a:	08 95       	ret

0000443c <_Z4peekhPh>:
    443c:	0f 93       	push	r16
    443e:	ab 01       	movw	r20, r22
    4440:	01 e0       	ldi	r16, 0x01	; 1
    4442:	21 e0       	ldi	r18, 0x01	; 1
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	68 2f       	mov	r22, r24
    4448:	8f eb       	ldi	r24, 0xBF	; 191
    444a:	99 e0       	ldi	r25, 0x09	; 9
    444c:	22 d2       	rcall	.+1092   	; 0x4892 <_ZN10W5500Class20recv_data_processingEhPhjh>
    444e:	81 e0       	ldi	r24, 0x01	; 1
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	0f 91       	pop	r16
    4454:	08 95       	ret

00004456 <_Z5flushh>:
    4456:	08 95       	ret

00004458 <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    4458:	af 92       	push	r10
    445a:	bf 92       	push	r11
    445c:	cf 92       	push	r12
    445e:	df 92       	push	r13
    4460:	ff 92       	push	r15
    4462:	0f 93       	push	r16
    4464:	1f 93       	push	r17
    4466:	cf 93       	push	r28
    4468:	df 93       	push	r29
    446a:	f8 2e       	mov	r15, r24
    446c:	6b 01       	movw	r12, r22
    446e:	5a 01       	movw	r10, r20
    4470:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    4472:	68 2f       	mov	r22, r24
    4474:	8f eb       	ldi	r24, 0xBF	; 191
    4476:	99 e0       	ldi	r25, 0x09	; 9
    4478:	38 d1       	rcall	.+624    	; 0x46ea <_ZN10W5500Class13getTXFreeSizeEh>
    447a:	8c 17       	cp	r24, r28
    447c:	9d 07       	cpc	r25, r29
    447e:	28 f4       	brcc	.+10     	; 0x448a <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    4480:	6f 2d       	mov	r22, r15
    4482:	8f eb       	ldi	r24, 0xBF	; 191
    4484:	99 e0       	ldi	r25, 0x09	; 9
    4486:	31 d1       	rcall	.+610    	; 0x46ea <_ZN10W5500Class13getTXFreeSizeEh>
    4488:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    448a:	8e 01       	movw	r16, r28
    448c:	95 01       	movw	r18, r10
    448e:	a6 01       	movw	r20, r12
    4490:	6f 2d       	mov	r22, r15
    4492:	8f eb       	ldi	r24, 0xBF	; 191
    4494:	99 e0       	ldi	r25, 0x09	; 9
    4496:	74 d1       	rcall	.+744    	; 0x4780 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    4498:	ce 01       	movw	r24, r28
    449a:	df 91       	pop	r29
    449c:	cf 91       	pop	r28
    449e:	1f 91       	pop	r17
    44a0:	0f 91       	pop	r16
    44a2:	ff 90       	pop	r15
    44a4:	df 90       	pop	r13
    44a6:	cf 90       	pop	r12
    44a8:	bf 90       	pop	r11
    44aa:	af 90       	pop	r10
    44ac:	08 95       	ret

000044ae <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    44ae:	0f 93       	push	r16
    44b0:	1f 93       	push	r17
    44b2:	cf 93       	push	r28
    44b4:	fb 01       	movw	r30, r22
  if
    44b6:	90 81       	ld	r25, Z
    44b8:	91 11       	cpse	r25, r1
    44ba:	09 c0       	rjmp	.+18     	; 0x44ce <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    44bc:	91 81       	ldd	r25, Z+1	; 0x01
    44be:	91 11       	cpse	r25, r1
    44c0:	06 c0       	rjmp	.+12     	; 0x44ce <_Z8startUDPhPhj+0x20>
    44c2:	92 81       	ldd	r25, Z+2	; 0x02
    44c4:	91 11       	cpse	r25, r1
    44c6:	03 c0       	rjmp	.+6      	; 0x44ce <_Z8startUDPhPhj+0x20>
    44c8:	93 81       	ldd	r25, Z+3	; 0x03
    44ca:	99 23       	and	r25, r25
    44cc:	69 f0       	breq	.+26     	; 0x44e8 <_Z8startUDPhPhj+0x3a>
    44ce:	41 15       	cp	r20, r1
    44d0:	51 05       	cpc	r21, r1
    44d2:	51 f0       	breq	.+20     	; 0x44e8 <_Z8startUDPhPhj+0x3a>
    44d4:	8a 01       	movw	r16, r20
    44d6:	bf 01       	movw	r22, r30
    44d8:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    44da:	71 de       	rcall	.-798    	; 0x41be <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    44dc:	b8 01       	movw	r22, r16
    44de:	8c 2f       	mov	r24, r28
    44e0:	9f de       	rcall	.-706    	; 0x4220 <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	02 c0       	rjmp	.+4      	; 0x44ec <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    44e8:	80 e0       	ldi	r24, 0x00	; 0
    44ea:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    44ec:	cf 91       	pop	r28
    44ee:	1f 91       	pop	r17
    44f0:	0f 91       	pop	r16
    44f2:	08 95       	ret

000044f4 <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    44f4:	cf 93       	push	r28
    44f6:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    44f8:	40 e2       	ldi	r20, 0x20	; 32
    44fa:	68 2f       	mov	r22, r24
    44fc:	8f eb       	ldi	r24, 0xBF	; 191
    44fe:	99 e0       	ldi	r25, 0x09	; 9
    4500:	15 d2       	rcall	.+1066   	; 0x492c <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    4502:	8c 2f       	mov	r24, r28
    4504:	6f de       	rcall	.-802    	; 0x41e4 <_ZN10W5500Class8readSnIREh>
    4506:	84 fd       	sbrc	r24, 4
    4508:	0a c0       	rjmp	.+20     	; 0x451e <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    450a:	8c 2f       	mov	r24, r28
    450c:	6b de       	rcall	.-810    	; 0x41e4 <_ZN10W5500Class8readSnIREh>
    450e:	83 ff       	sbrs	r24, 3
    4510:	f8 cf       	rjmp	.-16     	; 0x4502 <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    4512:	68 e1       	ldi	r22, 0x18	; 24
    4514:	8c 2f       	mov	r24, r28
    4516:	80 de       	rcall	.-768    	; 0x4218 <_ZN10W5500Class9writeSnIREhh>
    4518:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	05 c0       	rjmp	.+10     	; 0x4528 <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    451e:	60 e1       	ldi	r22, 0x10	; 16
    4520:	8c 2f       	mov	r24, r28
    4522:	7a de       	rcall	.-780    	; 0x4218 <_ZN10W5500Class9writeSnIREhh>
    4524:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	cf 91       	pop	r28
}
    452a:	08 95       	ret

0000452c <_ZN8SPIClass16beginTransactionE11SPISettings>:
    452c:	20 91 c2 09 	lds	r18, 0x09C2	; 0x8009c2 <_ZN8SPIClass13interruptModeE>
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    4530:	22 23       	and	r18, r18
    4532:	99 f0       	breq	.+38     	; 0x455a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    4534:	4f b7       	in	r20, 0x3f	; 63
    4536:	f8 94       	cli
    4538:	20 91 c2 09 	lds	r18, 0x09C2	; 0x8009c2 <_ZN8SPIClass13interruptModeE>
    453c:	21 30       	cpi	r18, 0x01	; 1
    453e:	59 f4       	brne	.+22     	; 0x4556 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    4540:	2d b3       	in	r18, 0x1d	; 29
    4542:	20 93 c0 09 	sts	0x09C0, r18	; 0x8009c0 <_ZN8SPIClass13interruptSaveE>
    4546:	3d b3       	in	r19, 0x1d	; 29
    4548:	20 91 c1 09 	lds	r18, 0x09C1	; 0x8009c1 <_ZN8SPIClass13interruptMaskE>
    454c:	20 95       	com	r18
    454e:	23 23       	and	r18, r19
    4550:	2d bb       	out	0x1d, r18	; 29
    4552:	4f bf       	out	0x3f, r20	; 63
    4554:	02 c0       	rjmp	.+4      	; 0x455a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    4556:	40 93 c0 09 	sts	0x09C0, r20	; 0x8009c0 <_ZN8SPIClass13interruptSaveE>
    455a:	8c bd       	out	0x2c, r24	; 44
    455c:	9d bd       	out	0x2d, r25	; 45
    455e:	08 95       	ret

00004560 <_ZN8SPIClass8transferEh>:
    4560:	8e bd       	out	0x2e, r24	; 46
    4562:	00 00       	nop
    4564:	0d b4       	in	r0, 0x2d	; 45
    4566:	07 fe       	sbrs	r0, 7
    4568:	fd cf       	rjmp	.-6      	; 0x4564 <_ZN8SPIClass8transferEh+0x4>
    456a:	8e b5       	in	r24, 0x2e	; 46
    456c:	08 95       	ret

0000456e <_ZN8SPIClass14endTransactionEv>:
    456e:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <_ZN8SPIClass13interruptModeE>
    4572:	88 23       	and	r24, r24
    4574:	61 f0       	breq	.+24     	; 0x458e <_ZN8SPIClass14endTransactionEv+0x20>
    4576:	9f b7       	in	r25, 0x3f	; 63
    4578:	f8 94       	cli
    457a:	20 91 c2 09 	lds	r18, 0x09C2	; 0x8009c2 <_ZN8SPIClass13interruptModeE>
    457e:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <_ZN8SPIClass13interruptSaveE>
    4582:	21 30       	cpi	r18, 0x01	; 1
    4584:	19 f4       	brne	.+6      	; 0x458c <_ZN8SPIClass14endTransactionEv+0x1e>
    4586:	8d bb       	out	0x1d, r24	; 29
    4588:	9f bf       	out	0x3f, r25	; 63
    458a:	08 95       	ret
    458c:	8f bf       	out	0x3f, r24	; 63
    458e:	08 95       	ret

00004590 <_ZN10W5500Class5setSSEv>:
    4590:	44 98       	cbi	0x08, 4	; 8
    4592:	08 95       	ret

00004594 <_ZN10W5500Class7resetSSEv>:
    4594:	44 9a       	sbi	0x08, 4	; 8
    4596:	08 95       	ret

00004598 <_ZN10W5500Class5writeEjhh>:
    4598:	0f 93       	push	r16
    459a:	1f 93       	push	r17
    459c:	cf 93       	push	r28
    459e:	df 93       	push	r29
    45a0:	18 2f       	mov	r17, r24
    45a2:	09 2f       	mov	r16, r25
    45a4:	d6 2f       	mov	r29, r22
    45a6:	c4 2f       	mov	r28, r20
    45a8:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <wiznet_SPI_settings>
    45ac:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <wiznet_SPI_settings+0x1>
    45b0:	bd df       	rcall	.-134    	; 0x452c <_ZN8SPIClass16beginTransactionE11SPISettings>
    45b2:	ee df       	rcall	.-36     	; 0x4590 <_ZN10W5500Class5setSSEv>
    45b4:	80 2f       	mov	r24, r16
    45b6:	d4 df       	rcall	.-88     	; 0x4560 <_ZN8SPIClass8transferEh>
    45b8:	81 2f       	mov	r24, r17
    45ba:	d2 df       	rcall	.-92     	; 0x4560 <_ZN8SPIClass8transferEh>
    45bc:	8d 2f       	mov	r24, r29
    45be:	d0 df       	rcall	.-96     	; 0x4560 <_ZN8SPIClass8transferEh>
    45c0:	8c 2f       	mov	r24, r28
    45c2:	ce df       	rcall	.-100    	; 0x4560 <_ZN8SPIClass8transferEh>
    45c4:	e7 df       	rcall	.-50     	; 0x4594 <_ZN10W5500Class7resetSSEv>
    45c6:	d3 df       	rcall	.-90     	; 0x456e <_ZN8SPIClass14endTransactionEv>
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	df 91       	pop	r29
    45cc:	cf 91       	pop	r28
    45ce:	1f 91       	pop	r17
    45d0:	0f 91       	pop	r16
    45d2:	08 95       	ret

000045d4 <_ZN10W5500Class5writeEjhPKhj>:
    45d4:	df 92       	push	r13
    45d6:	ef 92       	push	r14
    45d8:	ff 92       	push	r15
    45da:	0f 93       	push	r16
    45dc:	1f 93       	push	r17
    45de:	cf 93       	push	r28
    45e0:	df 93       	push	r29
    45e2:	d8 2f       	mov	r29, r24
    45e4:	d9 2e       	mov	r13, r25
    45e6:	c6 2f       	mov	r28, r22
    45e8:	7a 01       	movw	r14, r20
    45ea:	89 01       	movw	r16, r18
    45ec:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <wiznet_SPI_settings>
    45f0:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <wiznet_SPI_settings+0x1>
    45f4:	9b df       	rcall	.-202    	; 0x452c <_ZN8SPIClass16beginTransactionE11SPISettings>
    45f6:	cc df       	rcall	.-104    	; 0x4590 <_ZN10W5500Class5setSSEv>
    45f8:	8d 2d       	mov	r24, r13
    45fa:	b2 df       	rcall	.-156    	; 0x4560 <_ZN8SPIClass8transferEh>
    45fc:	8d 2f       	mov	r24, r29
    45fe:	b0 df       	rcall	.-160    	; 0x4560 <_ZN8SPIClass8transferEh>
    4600:	8c 2f       	mov	r24, r28
    4602:	ae df       	rcall	.-164    	; 0x4560 <_ZN8SPIClass8transferEh>
    4604:	e7 01       	movw	r28, r14
    4606:	e0 0e       	add	r14, r16
    4608:	f1 1e       	adc	r15, r17
    460a:	ce 15       	cp	r28, r14
    460c:	df 05       	cpc	r29, r15
    460e:	19 f0       	breq	.+6      	; 0x4616 <_ZN10W5500Class5writeEjhPKhj+0x42>
    4610:	89 91       	ld	r24, Y+
    4612:	a6 df       	rcall	.-180    	; 0x4560 <_ZN8SPIClass8transferEh>
    4614:	fa cf       	rjmp	.-12     	; 0x460a <_ZN10W5500Class5writeEjhPKhj+0x36>
    4616:	be df       	rcall	.-132    	; 0x4594 <_ZN10W5500Class7resetSSEv>
    4618:	aa df       	rcall	.-172    	; 0x456e <_ZN8SPIClass14endTransactionEv>
    461a:	c8 01       	movw	r24, r16
    461c:	df 91       	pop	r29
    461e:	cf 91       	pop	r28
    4620:	1f 91       	pop	r17
    4622:	0f 91       	pop	r16
    4624:	ff 90       	pop	r15
    4626:	ef 90       	pop	r14
    4628:	df 90       	pop	r13
    462a:	08 95       	ret

0000462c <_ZN10W5500Class4readEjh>:
    462c:	1f 93       	push	r17
    462e:	cf 93       	push	r28
    4630:	df 93       	push	r29
    4632:	d8 2f       	mov	r29, r24
    4634:	19 2f       	mov	r17, r25
    4636:	c6 2f       	mov	r28, r22
    4638:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <wiznet_SPI_settings>
    463c:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <wiznet_SPI_settings+0x1>
    4640:	75 df       	rcall	.-278    	; 0x452c <_ZN8SPIClass16beginTransactionE11SPISettings>
    4642:	a6 df       	rcall	.-180    	; 0x4590 <_ZN10W5500Class5setSSEv>
    4644:	81 2f       	mov	r24, r17
    4646:	8c df       	rcall	.-232    	; 0x4560 <_ZN8SPIClass8transferEh>
    4648:	8d 2f       	mov	r24, r29
    464a:	8a df       	rcall	.-236    	; 0x4560 <_ZN8SPIClass8transferEh>
    464c:	8c 2f       	mov	r24, r28
    464e:	88 df       	rcall	.-240    	; 0x4560 <_ZN8SPIClass8transferEh>
    4650:	80 e0       	ldi	r24, 0x00	; 0
    4652:	86 df       	rcall	.-244    	; 0x4560 <_ZN8SPIClass8transferEh>
    4654:	c8 2f       	mov	r28, r24
    4656:	9e df       	rcall	.-196    	; 0x4594 <_ZN10W5500Class7resetSSEv>
    4658:	8a df       	rcall	.-236    	; 0x456e <_ZN8SPIClass14endTransactionEv>
    465a:	8c 2f       	mov	r24, r28
    465c:	df 91       	pop	r29
    465e:	cf 91       	pop	r28
    4660:	1f 91       	pop	r17
    4662:	08 95       	ret

00004664 <_ZN10W5500Class4initEh>:
    4664:	cf 93       	push	r28
    4666:	df 93       	push	r29
    4668:	60 93 bc 09 	sts	0x09BC, r22	; 0x8009bc <SPI_CS>
    466c:	68 ee       	ldi	r22, 0xE8	; 232
    466e:	73 e0       	ldi	r23, 0x03	; 3
    4670:	80 e0       	ldi	r24, 0x00	; 0
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <delay>
    4678:	3c 9a       	sbi	0x07, 4	; 7
    467a:	10 d4       	rcall	.+2080   	; 0x4e9c <_ZN8SPIClass5beginEv>
    467c:	60 e0       	ldi	r22, 0x00	; 0
    467e:	80 e0       	ldi	r24, 0x00	; 0
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	d4 df       	rcall	.-88     	; 0x462c <_ZN10W5500Class4readEjh>
    4684:	48 2f       	mov	r20, r24
    4686:	40 68       	ori	r20, 0x80	; 128
    4688:	64 e0       	ldi	r22, 0x04	; 4
    468a:	80 e0       	ldi	r24, 0x00	; 0
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	84 df       	rcall	.-248    	; 0x4598 <_ZN10W5500Class5writeEjhh>
    4690:	c0 e0       	ldi	r28, 0x00	; 0
    4692:	dc 2f       	mov	r29, r28
    4694:	d2 95       	swap	r29
    4696:	dd 0f       	add	r29, r29
    4698:	d0 7e       	andi	r29, 0xE0	; 224
    469a:	d4 5f       	subi	r29, 0xF4	; 244
    469c:	42 e0       	ldi	r20, 0x02	; 2
    469e:	6d 2f       	mov	r22, r29
    46a0:	8e e1       	ldi	r24, 0x1E	; 30
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	79 df       	rcall	.-270    	; 0x4598 <_ZN10W5500Class5writeEjhh>
    46a6:	42 e0       	ldi	r20, 0x02	; 2
    46a8:	6d 2f       	mov	r22, r29
    46aa:	8f e1       	ldi	r24, 0x1F	; 31
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	74 df       	rcall	.-280    	; 0x4598 <_ZN10W5500Class5writeEjhh>
    46b0:	cf 5f       	subi	r28, 0xFF	; 255
    46b2:	c8 30       	cpi	r28, 0x08	; 8
    46b4:	71 f7       	brne	.-36     	; 0x4692 <_ZN10W5500Class4initEh+0x2e>
    46b6:	df 91       	pop	r29
    46b8:	cf 91       	pop	r28
    46ba:	08 95       	ret

000046bc <_ZN10W5500Class12readSnTX_FSREh>:
    46bc:	1f 93       	push	r17
    46be:	cf 93       	push	r28
    46c0:	df 93       	push	r29
    46c2:	18 2f       	mov	r17, r24
    46c4:	60 e2       	ldi	r22, 0x20	; 32
    46c6:	70 e0       	ldi	r23, 0x00	; 0
    46c8:	85 dd       	rcall	.-1270   	; 0x41d4 <_ZN10W5500Class6readSnEhj>
    46ca:	c8 2f       	mov	r28, r24
    46cc:	d0 e0       	ldi	r29, 0x00	; 0
    46ce:	dc 2f       	mov	r29, r28
    46d0:	cc 27       	eor	r28, r28
    46d2:	61 e2       	ldi	r22, 0x21	; 33
    46d4:	70 e0       	ldi	r23, 0x00	; 0
    46d6:	81 2f       	mov	r24, r17
    46d8:	7d dd       	rcall	.-1286   	; 0x41d4 <_ZN10W5500Class6readSnEhj>
    46da:	9e 01       	movw	r18, r28
    46dc:	28 0f       	add	r18, r24
    46de:	31 1d       	adc	r19, r1
    46e0:	c9 01       	movw	r24, r18
    46e2:	df 91       	pop	r29
    46e4:	cf 91       	pop	r28
    46e6:	1f 91       	pop	r17
    46e8:	08 95       	ret

000046ea <_ZN10W5500Class13getTXFreeSizeEh>:
    46ea:	ff 92       	push	r15
    46ec:	0f 93       	push	r16
    46ee:	1f 93       	push	r17
    46f0:	cf 93       	push	r28
    46f2:	df 93       	push	r29
    46f4:	f6 2e       	mov	r15, r22
    46f6:	c0 e0       	ldi	r28, 0x00	; 0
    46f8:	d0 e0       	ldi	r29, 0x00	; 0
    46fa:	8f 2d       	mov	r24, r15
    46fc:	df df       	rcall	.-66     	; 0x46bc <_ZN10W5500Class12readSnTX_FSREh>
    46fe:	8c 01       	movw	r16, r24
    4700:	89 2b       	or	r24, r25
    4702:	19 f0       	breq	.+6      	; 0x470a <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    4704:	8f 2d       	mov	r24, r15
    4706:	da df       	rcall	.-76     	; 0x46bc <_ZN10W5500Class12readSnTX_FSREh>
    4708:	ec 01       	movw	r28, r24
    470a:	c0 17       	cp	r28, r16
    470c:	d1 07       	cpc	r29, r17
    470e:	a9 f7       	brne	.-22     	; 0x46fa <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    4710:	ce 01       	movw	r24, r28
    4712:	df 91       	pop	r29
    4714:	cf 91       	pop	r28
    4716:	1f 91       	pop	r17
    4718:	0f 91       	pop	r16
    471a:	ff 90       	pop	r15
    471c:	08 95       	ret

0000471e <_ZN10W5500Class12readSnRX_RSREh>:
    471e:	1f 93       	push	r17
    4720:	cf 93       	push	r28
    4722:	df 93       	push	r29
    4724:	18 2f       	mov	r17, r24
    4726:	66 e2       	ldi	r22, 0x26	; 38
    4728:	70 e0       	ldi	r23, 0x00	; 0
    472a:	54 dd       	rcall	.-1368   	; 0x41d4 <_ZN10W5500Class6readSnEhj>
    472c:	c8 2f       	mov	r28, r24
    472e:	d0 e0       	ldi	r29, 0x00	; 0
    4730:	dc 2f       	mov	r29, r28
    4732:	cc 27       	eor	r28, r28
    4734:	67 e2       	ldi	r22, 0x27	; 39
    4736:	70 e0       	ldi	r23, 0x00	; 0
    4738:	81 2f       	mov	r24, r17
    473a:	4c dd       	rcall	.-1384   	; 0x41d4 <_ZN10W5500Class6readSnEhj>
    473c:	9e 01       	movw	r18, r28
    473e:	28 0f       	add	r18, r24
    4740:	31 1d       	adc	r19, r1
    4742:	c9 01       	movw	r24, r18
    4744:	df 91       	pop	r29
    4746:	cf 91       	pop	r28
    4748:	1f 91       	pop	r17
    474a:	08 95       	ret

0000474c <_ZN10W5500Class17getRXReceivedSizeEh>:
    474c:	ff 92       	push	r15
    474e:	0f 93       	push	r16
    4750:	1f 93       	push	r17
    4752:	cf 93       	push	r28
    4754:	df 93       	push	r29
    4756:	f6 2e       	mov	r15, r22
    4758:	c0 e0       	ldi	r28, 0x00	; 0
    475a:	d0 e0       	ldi	r29, 0x00	; 0
    475c:	8f 2d       	mov	r24, r15
    475e:	df df       	rcall	.-66     	; 0x471e <_ZN10W5500Class12readSnRX_RSREh>
    4760:	8c 01       	movw	r16, r24
    4762:	89 2b       	or	r24, r25
    4764:	19 f0       	breq	.+6      	; 0x476c <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    4766:	8f 2d       	mov	r24, r15
    4768:	da df       	rcall	.-76     	; 0x471e <_ZN10W5500Class12readSnRX_RSREh>
    476a:	ec 01       	movw	r28, r24
    476c:	c0 17       	cp	r28, r16
    476e:	d1 07       	cpc	r29, r17
    4770:	a9 f7       	brne	.-22     	; 0x475c <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    4772:	ce 01       	movw	r24, r28
    4774:	df 91       	pop	r29
    4776:	cf 91       	pop	r28
    4778:	1f 91       	pop	r17
    477a:	0f 91       	pop	r16
    477c:	ff 90       	pop	r15
    477e:	08 95       	ret

00004780 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    4780:	af 92       	push	r10
    4782:	bf 92       	push	r11
    4784:	df 92       	push	r13
    4786:	ef 92       	push	r14
    4788:	ff 92       	push	r15
    478a:	0f 93       	push	r16
    478c:	1f 93       	push	r17
    478e:	cf 93       	push	r28
    4790:	df 93       	push	r29
    4792:	d6 2e       	mov	r13, r22
    4794:	7a 01       	movw	r14, r20
    4796:	59 01       	movw	r10, r18
    4798:	64 e2       	ldi	r22, 0x24	; 36
    479a:	70 e0       	ldi	r23, 0x00	; 0
    479c:	8d 2d       	mov	r24, r13
    479e:	1a dd       	rcall	.-1484   	; 0x41d4 <_ZN10W5500Class6readSnEhj>
    47a0:	c8 2f       	mov	r28, r24
    47a2:	65 e2       	ldi	r22, 0x25	; 37
    47a4:	70 e0       	ldi	r23, 0x00	; 0
    47a6:	8d 2d       	mov	r24, r13
    47a8:	15 dd       	rcall	.-1494   	; 0x41d4 <_ZN10W5500Class6readSnEhj>
    47aa:	d0 e0       	ldi	r29, 0x00	; 0
    47ac:	dc 2f       	mov	r29, r28
    47ae:	cc 27       	eor	r28, r28
    47b0:	e8 0e       	add	r14, r24
    47b2:	f1 1c       	adc	r15, r1
    47b4:	ce 0d       	add	r28, r14
    47b6:	df 1d       	adc	r29, r15
    47b8:	6d 2d       	mov	r22, r13
    47ba:	62 95       	swap	r22
    47bc:	66 0f       	add	r22, r22
    47be:	60 7e       	andi	r22, 0xE0	; 224
    47c0:	6c 5e       	subi	r22, 0xEC	; 236
    47c2:	98 01       	movw	r18, r16
    47c4:	a5 01       	movw	r20, r10
    47c6:	ce 01       	movw	r24, r28
    47c8:	05 df       	rcall	.-502    	; 0x45d4 <_ZN10W5500Class5writeEjhPKhj>
    47ca:	c0 0f       	add	r28, r16
    47cc:	d1 1f       	adc	r29, r17
    47ce:	4d 2f       	mov	r20, r29
    47d0:	64 e2       	ldi	r22, 0x24	; 36
    47d2:	70 e0       	ldi	r23, 0x00	; 0
    47d4:	8d 2d       	mov	r24, r13
    47d6:	09 dd       	rcall	.-1518   	; 0x41ea <_ZN10W5500Class7writeSnEhjh>
    47d8:	4c 2f       	mov	r20, r28
    47da:	65 e2       	ldi	r22, 0x25	; 37
    47dc:	70 e0       	ldi	r23, 0x00	; 0
    47de:	8d 2d       	mov	r24, r13
    47e0:	df 91       	pop	r29
    47e2:	cf 91       	pop	r28
    47e4:	1f 91       	pop	r17
    47e6:	0f 91       	pop	r16
    47e8:	ff 90       	pop	r15
    47ea:	ef 90       	pop	r14
    47ec:	df 90       	pop	r13
    47ee:	bf 90       	pop	r11
    47f0:	af 90       	pop	r10
    47f2:	fb cc       	rjmp	.-1546   	; 0x41ea <_ZN10W5500Class7writeSnEhjh>

000047f4 <_ZN10W5500Class20send_data_processingEhPKhj>:
    47f4:	0f 93       	push	r16
    47f6:	1f 93       	push	r17
    47f8:	89 01       	movw	r16, r18
    47fa:	9a 01       	movw	r18, r20
    47fc:	40 e0       	ldi	r20, 0x00	; 0
    47fe:	50 e0       	ldi	r21, 0x00	; 0
    4800:	bf df       	rcall	.-130    	; 0x4780 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    4802:	1f 91       	pop	r17
    4804:	0f 91       	pop	r16
    4806:	08 95       	ret

00004808 <_ZN10W5500Class4readEjhPhj>:
    4808:	df 92       	push	r13
    480a:	ef 92       	push	r14
    480c:	ff 92       	push	r15
    480e:	0f 93       	push	r16
    4810:	1f 93       	push	r17
    4812:	cf 93       	push	r28
    4814:	df 93       	push	r29
    4816:	d8 2f       	mov	r29, r24
    4818:	d9 2e       	mov	r13, r25
    481a:	c6 2f       	mov	r28, r22
    481c:	7a 01       	movw	r14, r20
    481e:	89 01       	movw	r16, r18
    4820:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <wiznet_SPI_settings>
    4824:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <wiznet_SPI_settings+0x1>
    4828:	81 de       	rcall	.-766    	; 0x452c <_ZN8SPIClass16beginTransactionE11SPISettings>
    482a:	b2 de       	rcall	.-668    	; 0x4590 <_ZN10W5500Class5setSSEv>
    482c:	8d 2d       	mov	r24, r13
    482e:	98 de       	rcall	.-720    	; 0x4560 <_ZN8SPIClass8transferEh>
    4830:	8d 2f       	mov	r24, r29
    4832:	96 de       	rcall	.-724    	; 0x4560 <_ZN8SPIClass8transferEh>
    4834:	8c 2f       	mov	r24, r28
    4836:	94 de       	rcall	.-728    	; 0x4560 <_ZN8SPIClass8transferEh>
    4838:	e7 01       	movw	r28, r14
    483a:	e0 0e       	add	r14, r16
    483c:	f1 1e       	adc	r15, r17
    483e:	ce 15       	cp	r28, r14
    4840:	df 05       	cpc	r29, r15
    4842:	21 f0       	breq	.+8      	; 0x484c <_ZN10W5500Class4readEjhPhj+0x44>
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	8c de       	rcall	.-744    	; 0x4560 <_ZN8SPIClass8transferEh>
    4848:	89 93       	st	Y+, r24
    484a:	f9 cf       	rjmp	.-14     	; 0x483e <_ZN10W5500Class4readEjhPhj+0x36>
    484c:	a3 de       	rcall	.-698    	; 0x4594 <_ZN10W5500Class7resetSSEv>
    484e:	8f de       	rcall	.-738    	; 0x456e <_ZN8SPIClass14endTransactionEv>
    4850:	c8 01       	movw	r24, r16
    4852:	df 91       	pop	r29
    4854:	cf 91       	pop	r28
    4856:	1f 91       	pop	r17
    4858:	0f 91       	pop	r16
    485a:	ff 90       	pop	r15
    485c:	ef 90       	pop	r14
    485e:	df 90       	pop	r13
    4860:	08 95       	ret

00004862 <_ZN10W5500Class9read_dataEhjPVhj>:
    4862:	0f 93       	push	r16
    4864:	1f 93       	push	r17
    4866:	cf 93       	push	r28
    4868:	df 93       	push	r29
    486a:	00 d0       	rcall	.+0      	; 0x486c <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    486c:	cd b7       	in	r28, 0x3d	; 61
    486e:	de b7       	in	r29, 0x3e	; 62
    4870:	5a 83       	std	Y+2, r21	; 0x02
    4872:	49 83       	std	Y+1, r20	; 0x01
    4874:	a9 01       	movw	r20, r18
    4876:	98 01       	movw	r18, r16
    4878:	89 81       	ldd	r24, Y+1	; 0x01
    487a:	9a 81       	ldd	r25, Y+2	; 0x02
    487c:	62 95       	swap	r22
    487e:	66 0f       	add	r22, r22
    4880:	60 7e       	andi	r22, 0xE0	; 224
    4882:	68 5e       	subi	r22, 0xE8	; 232
    4884:	0f 90       	pop	r0
    4886:	0f 90       	pop	r0
    4888:	df 91       	pop	r29
    488a:	cf 91       	pop	r28
    488c:	1f 91       	pop	r17
    488e:	0f 91       	pop	r16
    4890:	bb cf       	rjmp	.-138    	; 0x4808 <_ZN10W5500Class4readEjhPhj>

00004892 <_ZN10W5500Class20recv_data_processingEhPhjh>:
    4892:	8f 92       	push	r8
    4894:	9f 92       	push	r9
    4896:	af 92       	push	r10
    4898:	bf 92       	push	r11
    489a:	cf 92       	push	r12
    489c:	df 92       	push	r13
    489e:	ef 92       	push	r14
    48a0:	ff 92       	push	r15
    48a2:	0f 93       	push	r16
    48a4:	1f 93       	push	r17
    48a6:	cf 93       	push	r28
    48a8:	df 93       	push	r29
    48aa:	6c 01       	movw	r12, r24
    48ac:	96 2e       	mov	r9, r22
    48ae:	5a 01       	movw	r10, r20
    48b0:	79 01       	movw	r14, r18
    48b2:	80 2e       	mov	r8, r16
    48b4:	68 e2       	ldi	r22, 0x28	; 40
    48b6:	70 e0       	ldi	r23, 0x00	; 0
    48b8:	89 2d       	mov	r24, r9
    48ba:	8c dc       	rcall	.-1768   	; 0x41d4 <_ZN10W5500Class6readSnEhj>
    48bc:	08 2f       	mov	r16, r24
    48be:	69 e2       	ldi	r22, 0x29	; 41
    48c0:	70 e0       	ldi	r23, 0x00	; 0
    48c2:	89 2d       	mov	r24, r9
    48c4:	87 dc       	rcall	.-1778   	; 0x41d4 <_ZN10W5500Class6readSnEhj>
    48c6:	10 e0       	ldi	r17, 0x00	; 0
    48c8:	10 2f       	mov	r17, r16
    48ca:	00 27       	eor	r16, r16
    48cc:	e8 01       	movw	r28, r16
    48ce:	c8 0f       	add	r28, r24
    48d0:	d1 1d       	adc	r29, r1
    48d2:	87 01       	movw	r16, r14
    48d4:	95 01       	movw	r18, r10
    48d6:	ae 01       	movw	r20, r28
    48d8:	69 2d       	mov	r22, r9
    48da:	c6 01       	movw	r24, r12
    48dc:	c2 df       	rcall	.-124    	; 0x4862 <_ZN10W5500Class9read_dataEhjPVhj>
    48de:	81 10       	cpse	r8, r1
    48e0:	18 c0       	rjmp	.+48     	; 0x4912 <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    48e2:	0c 0f       	add	r16, r28
    48e4:	1d 1f       	adc	r17, r29
    48e6:	41 2f       	mov	r20, r17
    48e8:	68 e2       	ldi	r22, 0x28	; 40
    48ea:	70 e0       	ldi	r23, 0x00	; 0
    48ec:	89 2d       	mov	r24, r9
    48ee:	7d dc       	rcall	.-1798   	; 0x41ea <_ZN10W5500Class7writeSnEhjh>
    48f0:	40 2f       	mov	r20, r16
    48f2:	69 e2       	ldi	r22, 0x29	; 41
    48f4:	70 e0       	ldi	r23, 0x00	; 0
    48f6:	89 2d       	mov	r24, r9
    48f8:	df 91       	pop	r29
    48fa:	cf 91       	pop	r28
    48fc:	1f 91       	pop	r17
    48fe:	0f 91       	pop	r16
    4900:	ff 90       	pop	r15
    4902:	ef 90       	pop	r14
    4904:	df 90       	pop	r13
    4906:	cf 90       	pop	r12
    4908:	bf 90       	pop	r11
    490a:	af 90       	pop	r10
    490c:	9f 90       	pop	r9
    490e:	8f 90       	pop	r8
    4910:	6c cc       	rjmp	.-1832   	; 0x41ea <_ZN10W5500Class7writeSnEhjh>
    4912:	df 91       	pop	r29
    4914:	cf 91       	pop	r28
    4916:	1f 91       	pop	r17
    4918:	0f 91       	pop	r16
    491a:	ff 90       	pop	r15
    491c:	ef 90       	pop	r14
    491e:	df 90       	pop	r13
    4920:	cf 90       	pop	r12
    4922:	bf 90       	pop	r11
    4924:	af 90       	pop	r10
    4926:	9f 90       	pop	r9
    4928:	8f 90       	pop	r8
    492a:	08 95       	ret

0000492c <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    492c:	cf 93       	push	r28
    492e:	c6 2f       	mov	r28, r22
    4930:	61 e0       	ldi	r22, 0x01	; 1
    4932:	70 e0       	ldi	r23, 0x00	; 0
    4934:	8c 2f       	mov	r24, r28
    4936:	59 dc       	rcall	.-1870   	; 0x41ea <_ZN10W5500Class7writeSnEhjh>
    4938:	61 e0       	ldi	r22, 0x01	; 1
    493a:	70 e0       	ldi	r23, 0x00	; 0
    493c:	8c 2f       	mov	r24, r28
    493e:	4a dc       	rcall	.-1900   	; 0x41d4 <_ZN10W5500Class6readSnEhj>
    4940:	81 11       	cpse	r24, r1
    4942:	fa cf       	rjmp	.-12     	; 0x4938 <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    4944:	cf 91       	pop	r28
    4946:	08 95       	ret

00004948 <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    4948:	ed eb       	ldi	r30, 0xBD	; 189
    494a:	f9 e0       	ldi	r31, 0x09	; 9
    494c:	80 e5       	ldi	r24, 0x50	; 80
    494e:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    4950:	81 e0       	ldi	r24, 0x01	; 1
    4952:	81 83       	std	Z+1, r24	; 0x01
    4954:	08 95       	ret

00004956 <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    4956:	fc 01       	movw	r30, r24
    4958:	12 82       	std	Z+2, r1	; 0x02
    495a:	8f ef       	ldi	r24, 0xFF	; 255
    495c:	81 83       	std	Z+1, r24	; 0x01
    495e:	10 82       	st	Z, r1
    4960:	13 82       	std	Z+3, r1	; 0x03
    4962:	08 95       	ret

00004964 <_ZN5I2CIO8portModeEh>:
    4964:	fc 01       	movw	r30, r24
    4966:	83 81       	ldd	r24, Z+3	; 0x03
    4968:	88 23       	and	r24, r24
    496a:	31 f0       	breq	.+12     	; 0x4978 <_ZN5I2CIO8portModeEh+0x14>
    496c:	61 11       	cpse	r22, r1
    496e:	03 c0       	rjmp	.+6      	; 0x4976 <_ZN5I2CIO8portModeEh+0x12>
    4970:	8f ef       	ldi	r24, 0xFF	; 255
    4972:	81 83       	std	Z+1, r24	; 0x01
    4974:	08 95       	ret
    4976:	11 82       	std	Z+1, r1	; 0x01
    4978:	08 95       	ret

0000497a <_ZN5I2CIO11isAvailableEh>:
    497a:	82 e3       	ldi	r24, 0x32	; 50
    497c:	9a e0       	ldi	r25, 0x0A	; 10
    497e:	f0 d5       	rcall	.+3040   	; 0x5560 <_ZN7TwoWire17beginTransmissionEh>
    4980:	82 e3       	ldi	r24, 0x32	; 50
    4982:	9a e0       	ldi	r25, 0x0A	; 10
    4984:	6e d6       	rcall	.+3292   	; 0x5662 <_ZN7TwoWire15endTransmissionEv>
    4986:	91 e0       	ldi	r25, 0x01	; 1
    4988:	81 11       	cpse	r24, r1
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	89 2f       	mov	r24, r25
    498e:	08 95       	ret

00004990 <_ZN5I2CIO5beginEh>:
    4990:	cf 93       	push	r28
    4992:	df 93       	push	r29
    4994:	ec 01       	movw	r28, r24
    4996:	6a 83       	std	Y+2, r22	; 0x02
    4998:	82 e3       	ldi	r24, 0x32	; 50
    499a:	9a e0       	ldi	r25, 0x0A	; 10
    499c:	ce d5       	rcall	.+2972   	; 0x553a <_ZN7TwoWire5beginEv>
    499e:	6a 81       	ldd	r22, Y+2	; 0x02
    49a0:	ce 01       	movw	r24, r28
    49a2:	eb df       	rcall	.-42     	; 0x497a <_ZN5I2CIO11isAvailableEh>
    49a4:	8b 83       	std	Y+3, r24	; 0x03
    49a6:	88 23       	and	r24, r24
    49a8:	21 f0       	breq	.+8      	; 0x49b2 <_ZN5I2CIO5beginEh+0x22>
    49aa:	82 e3       	ldi	r24, 0x32	; 50
    49ac:	9a e0       	ldi	r25, 0x0A	; 10
    49ae:	01 d5       	rcall	.+2562   	; 0x53b2 <_ZN7TwoWire4readEv>
    49b0:	88 83       	st	Y, r24
    49b2:	8b 81       	ldd	r24, Y+3	; 0x03
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	df 91       	pop	r29
    49b8:	cf 91       	pop	r28
    49ba:	08 95       	ret

000049bc <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    49bc:	cf 93       	push	r28
    49be:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    49c0:	fc 01       	movw	r30, r24
    49c2:	23 81       	ldd	r18, Z+3	; 0x03
    49c4:	22 23       	and	r18, r18
    49c6:	99 f0       	breq	.+38     	; 0x49ee <_ZN5I2CIO5writeEh+0x32>
    49c8:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    49ca:	81 81       	ldd	r24, Z+1	; 0x01
    49cc:	80 95       	com	r24
    49ce:	68 23       	and	r22, r24
    49d0:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    49d2:	62 81       	ldd	r22, Z+2	; 0x02
    49d4:	82 e3       	ldi	r24, 0x32	; 50
    49d6:	9a e0       	ldi	r25, 0x0A	; 10
    49d8:	c3 d5       	rcall	.+2950   	; 0x5560 <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    49da:	68 81       	ld	r22, Y
    49dc:	82 e3       	ldi	r24, 0x32	; 50
    49de:	9a e0       	ldi	r25, 0x0A	; 10
    49e0:	6e d5       	rcall	.+2780   	; 0x54be <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    49e2:	82 e3       	ldi	r24, 0x32	; 50
    49e4:	9a e0       	ldi	r25, 0x0A	; 10
    49e6:	3d d6       	rcall	.+3194   	; 0x5662 <_ZN7TwoWire15endTransmissionEv>
    49e8:	28 2f       	mov	r18, r24
    49ea:	30 e0       	ldi	r19, 0x00	; 0
    49ec:	02 c0       	rjmp	.+4      	; 0x49f2 <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    49ee:	20 e0       	ldi	r18, 0x00	; 0
    49f0:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    49f2:	81 e0       	ldi	r24, 0x01	; 1
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	23 2b       	or	r18, r19
    49f8:	11 f0       	breq	.+4      	; 0x49fe <_ZN5I2CIO5writeEh+0x42>
    49fa:	80 e0       	ldi	r24, 0x00	; 0
    49fc:	90 e0       	ldi	r25, 0x00	; 0
}
    49fe:	df 91       	pop	r29
    4a00:	cf 91       	pop	r28
    4a02:	08 95       	ret

00004a04 <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    4a04:	08 95       	ret

00004a06 <_ZN3LCD12setBacklightEh>:
    4a06:	08 95       	ret

00004a08 <_ZN3LCD5writeEh>:
    4a08:	dc 01       	movw	r26, r24
    4a0a:	ed 91       	ld	r30, X+
    4a0c:	fc 91       	ld	r31, X
    4a0e:	06 84       	ldd	r0, Z+14	; 0x0e
    4a10:	f7 85       	ldd	r31, Z+15	; 0x0f
    4a12:	e0 2d       	mov	r30, r0
    4a14:	41 e0       	ldi	r20, 0x01	; 1
    4a16:	09 95       	icall
    4a18:	81 e0       	ldi	r24, 0x01	; 1
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
    4a1c:	08 95       	ret

00004a1e <_ZN3LCDC1Ev>:
    4a1e:	fc 01       	movw	r30, r24
    4a20:	13 82       	std	Z+3, r1	; 0x03
    4a22:	12 82       	std	Z+2, r1	; 0x02
    4a24:	2d eb       	ldi	r18, 0xBD	; 189
    4a26:	37 e0       	ldi	r19, 0x07	; 7
    4a28:	31 83       	std	Z+1, r19	; 0x01
    4a2a:	20 83       	st	Z, r18
    4a2c:	08 95       	ret

00004a2e <_ZN3LCD9backlightEv>:
    4a2e:	dc 01       	movw	r26, r24
    4a30:	ed 91       	ld	r30, X+
    4a32:	fc 91       	ld	r31, X
    4a34:	04 84       	ldd	r0, Z+12	; 0x0c
    4a36:	f5 85       	ldd	r31, Z+13	; 0x0d
    4a38:	e0 2d       	mov	r30, r0
    4a3a:	6f ef       	ldi	r22, 0xFF	; 255
    4a3c:	09 94       	ijmp

00004a3e <_ZN3LCD11noBacklightEv>:
    4a3e:	dc 01       	movw	r26, r24
    4a40:	ed 91       	ld	r30, X+
    4a42:	fc 91       	ld	r31, X
    4a44:	04 84       	ldd	r0, Z+12	; 0x0c
    4a46:	f5 85       	ldd	r31, Z+13	; 0x0d
    4a48:	e0 2d       	mov	r30, r0
    4a4a:	60 e0       	ldi	r22, 0x00	; 0
    4a4c:	09 94       	ijmp

00004a4e <_ZN3LCD7commandEh>:
    4a4e:	dc 01       	movw	r26, r24
    4a50:	ed 91       	ld	r30, X+
    4a52:	fc 91       	ld	r31, X
    4a54:	06 84       	ldd	r0, Z+14	; 0x0e
    4a56:	f7 85       	ldd	r31, Z+15	; 0x0f
    4a58:	e0 2d       	mov	r30, r0
    4a5a:	40 e0       	ldi	r20, 0x00	; 0
    4a5c:	09 94       	ijmp

00004a5e <_ZN3LCD5clearEv>:
    4a5e:	61 e0       	ldi	r22, 0x01	; 1
    4a60:	f6 df       	rcall	.-20     	; 0x4a4e <_ZN3LCD7commandEh>
    4a62:	80 ed       	ldi	r24, 0xD0	; 208
    4a64:	97 e0       	ldi	r25, 0x07	; 7
    4a66:	0c 94 17 2f 	jmp	0x5e2e	; 0x5e2e <delayMicroseconds>

00004a6a <_ZN3LCD9setCursorEhh>:
    4a6a:	cf 93       	push	r28
    4a6c:	df 93       	push	r29
    4a6e:	cd b7       	in	r28, 0x3d	; 61
    4a70:	de b7       	in	r29, 0x3e	; 62
    4a72:	28 97       	sbiw	r28, 0x08	; 8
    4a74:	0f b6       	in	r0, 0x3f	; 63
    4a76:	f8 94       	cli
    4a78:	de bf       	out	0x3e, r29	; 62
    4a7a:	0f be       	out	0x3f, r0	; 63
    4a7c:	cd bf       	out	0x3d, r28	; 61
    4a7e:	fc 01       	movw	r30, r24
    4a80:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <_ZN14EthernetClient8_srcportE+0x8>
    4a84:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <_ZN14EthernetClient8_srcportE+0x9>
    4a88:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <_ZN14EthernetClient8_srcportE+0xa>
    4a8c:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <_ZN14EthernetClient8_srcportE+0xb>
    4a90:	8d 83       	std	Y+5, r24	; 0x05
    4a92:	9e 83       	std	Y+6, r25	; 0x06
    4a94:	af 83       	std	Y+7, r26	; 0x07
    4a96:	b8 87       	std	Y+8, r27	; 0x08
    4a98:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <_ZN14EthernetClient8_srcportE+0xc>
    4a9c:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <_ZN14EthernetClient8_srcportE+0xd>
    4aa0:	a0 91 7f 01 	lds	r26, 0x017F	; 0x80017f <_ZN14EthernetClient8_srcportE+0xe>
    4aa4:	b0 91 80 01 	lds	r27, 0x0180	; 0x800180 <_ZN14EthernetClient8_srcportE+0xf>
    4aa8:	89 83       	std	Y+1, r24	; 0x01
    4aaa:	9a 83       	std	Y+2, r25	; 0x02
    4aac:	ab 83       	std	Y+3, r26	; 0x03
    4aae:	bc 83       	std	Y+4, r27	; 0x04
    4ab0:	87 81       	ldd	r24, Z+7	; 0x07
    4ab2:	48 17       	cp	r20, r24
    4ab4:	10 f0       	brcs	.+4      	; 0x4aba <_ZN3LCD9setCursorEhh+0x50>
    4ab6:	4f ef       	ldi	r20, 0xFF	; 255
    4ab8:	48 0f       	add	r20, r24
    4aba:	90 85       	ldd	r25, Z+8	; 0x08
    4abc:	50 e0       	ldi	r21, 0x00	; 0
    4abe:	de 01       	movw	r26, r28
    4ac0:	a4 0f       	add	r26, r20
    4ac2:	b5 1f       	adc	r27, r21
    4ac4:	90 31       	cpi	r25, 0x10	; 16
    4ac6:	29 f4       	brne	.+10     	; 0x4ad2 <_ZN3LCD9setCursorEhh+0x68>
    4ac8:	84 30       	cpi	r24, 0x04	; 4
    4aca:	19 f4       	brne	.+6      	; 0x4ad2 <_ZN3LCD9setCursorEhh+0x68>
    4acc:	11 96       	adiw	r26, 0x01	; 1
    4ace:	9c 91       	ld	r25, X
    4ad0:	02 c0       	rjmp	.+4      	; 0x4ad6 <_ZN3LCD9setCursorEhh+0x6c>
    4ad2:	15 96       	adiw	r26, 0x05	; 5
    4ad4:	9c 91       	ld	r25, X
    4ad6:	69 0f       	add	r22, r25
    4ad8:	60 68       	ori	r22, 0x80	; 128
    4ada:	cf 01       	movw	r24, r30
    4adc:	28 96       	adiw	r28, 0x08	; 8
    4ade:	0f b6       	in	r0, 0x3f	; 63
    4ae0:	f8 94       	cli
    4ae2:	de bf       	out	0x3e, r29	; 62
    4ae4:	0f be       	out	0x3f, r0	; 63
    4ae6:	cd bf       	out	0x3d, r28	; 61
    4ae8:	df 91       	pop	r29
    4aea:	cf 91       	pop	r28
    4aec:	b0 cf       	rjmp	.-160    	; 0x4a4e <_ZN3LCD7commandEh>

00004aee <_ZN3LCD9noDisplayEv>:
    4aee:	fc 01       	movw	r30, r24
    4af0:	65 81       	ldd	r22, Z+5	; 0x05
    4af2:	6b 7f       	andi	r22, 0xFB	; 251
    4af4:	65 83       	std	Z+5, r22	; 0x05
    4af6:	68 60       	ori	r22, 0x08	; 8
    4af8:	aa cf       	rjmp	.-172    	; 0x4a4e <_ZN3LCD7commandEh>

00004afa <_ZN3LCD7displayEv>:
    4afa:	fc 01       	movw	r30, r24
    4afc:	65 81       	ldd	r22, Z+5	; 0x05
    4afe:	26 2f       	mov	r18, r22
    4b00:	24 60       	ori	r18, 0x04	; 4
    4b02:	25 83       	std	Z+5, r18	; 0x05
    4b04:	6c 60       	ori	r22, 0x0C	; 12
    4b06:	a3 cf       	rjmp	.-186    	; 0x4a4e <_ZN3LCD7commandEh>

00004b08 <_ZN3LCD5beginEhhh>:
    4b08:	cf 93       	push	r28
    4b0a:	df 93       	push	r29
    4b0c:	ec 01       	movw	r28, r24
    4b0e:	42 30       	cpi	r20, 0x02	; 2
    4b10:	18 f0       	brcs	.+6      	; 0x4b18 <_ZN3LCD5beginEhhh+0x10>
    4b12:	8c 81       	ldd	r24, Y+4	; 0x04
    4b14:	88 60       	ori	r24, 0x08	; 8
    4b16:	8c 83       	std	Y+4, r24	; 0x04
    4b18:	4f 83       	std	Y+7, r20	; 0x07
    4b1a:	68 87       	std	Y+8, r22	; 0x08
    4b1c:	22 23       	and	r18, r18
    4b1e:	29 f0       	breq	.+10     	; 0x4b2a <_ZN3LCD5beginEhhh+0x22>
    4b20:	41 30       	cpi	r20, 0x01	; 1
    4b22:	19 f4       	brne	.+6      	; 0x4b2a <_ZN3LCD5beginEhhh+0x22>
    4b24:	8c 81       	ldd	r24, Y+4	; 0x04
    4b26:	84 60       	ori	r24, 0x04	; 4
    4b28:	8c 83       	std	Y+4, r24	; 0x04
    4b2a:	64 e6       	ldi	r22, 0x64	; 100
    4b2c:	70 e0       	ldi	r23, 0x00	; 0
    4b2e:	80 e0       	ldi	r24, 0x00	; 0
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <delay>
    4b36:	6c 81       	ldd	r22, Y+4	; 0x04
    4b38:	64 fd       	sbrc	r22, 4
    4b3a:	31 c0       	rjmp	.+98     	; 0x4b9e <_ZN3LCD5beginEhhh+0x96>
    4b3c:	e8 81       	ld	r30, Y
    4b3e:	f9 81       	ldd	r31, Y+1	; 0x01
    4b40:	06 84       	ldd	r0, Z+14	; 0x0e
    4b42:	f7 85       	ldd	r31, Z+15	; 0x0f
    4b44:	e0 2d       	mov	r30, r0
    4b46:	42 e0       	ldi	r20, 0x02	; 2
    4b48:	63 e0       	ldi	r22, 0x03	; 3
    4b4a:	ce 01       	movw	r24, r28
    4b4c:	09 95       	icall
    4b4e:	84 e9       	ldi	r24, 0x94	; 148
    4b50:	91 e1       	ldi	r25, 0x11	; 17
    4b52:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <delayMicroseconds>
    4b56:	e8 81       	ld	r30, Y
    4b58:	f9 81       	ldd	r31, Y+1	; 0x01
    4b5a:	06 84       	ldd	r0, Z+14	; 0x0e
    4b5c:	f7 85       	ldd	r31, Z+15	; 0x0f
    4b5e:	e0 2d       	mov	r30, r0
    4b60:	42 e0       	ldi	r20, 0x02	; 2
    4b62:	63 e0       	ldi	r22, 0x03	; 3
    4b64:	ce 01       	movw	r24, r28
    4b66:	09 95       	icall
    4b68:	86 e9       	ldi	r24, 0x96	; 150
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
    4b6c:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <delayMicroseconds>
    4b70:	e8 81       	ld	r30, Y
    4b72:	f9 81       	ldd	r31, Y+1	; 0x01
    4b74:	06 84       	ldd	r0, Z+14	; 0x0e
    4b76:	f7 85       	ldd	r31, Z+15	; 0x0f
    4b78:	e0 2d       	mov	r30, r0
    4b7a:	42 e0       	ldi	r20, 0x02	; 2
    4b7c:	63 e0       	ldi	r22, 0x03	; 3
    4b7e:	ce 01       	movw	r24, r28
    4b80:	09 95       	icall
    4b82:	86 e9       	ldi	r24, 0x96	; 150
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <delayMicroseconds>
    4b8a:	e8 81       	ld	r30, Y
    4b8c:	f9 81       	ldd	r31, Y+1	; 0x01
    4b8e:	06 84       	ldd	r0, Z+14	; 0x0e
    4b90:	f7 85       	ldd	r31, Z+15	; 0x0f
    4b92:	e0 2d       	mov	r30, r0
    4b94:	42 e0       	ldi	r20, 0x02	; 2
    4b96:	62 e0       	ldi	r22, 0x02	; 2
    4b98:	ce 01       	movw	r24, r28
    4b9a:	09 95       	icall
    4b9c:	13 c0       	rjmp	.+38     	; 0x4bc4 <_ZN3LCD5beginEhhh+0xbc>
    4b9e:	60 62       	ori	r22, 0x20	; 32
    4ba0:	ce 01       	movw	r24, r28
    4ba2:	55 df       	rcall	.-342    	; 0x4a4e <_ZN3LCD7commandEh>
    4ba4:	84 e9       	ldi	r24, 0x94	; 148
    4ba6:	91 e1       	ldi	r25, 0x11	; 17
    4ba8:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <delayMicroseconds>
    4bac:	6c 81       	ldd	r22, Y+4	; 0x04
    4bae:	60 62       	ori	r22, 0x20	; 32
    4bb0:	ce 01       	movw	r24, r28
    4bb2:	4d df       	rcall	.-358    	; 0x4a4e <_ZN3LCD7commandEh>
    4bb4:	86 e9       	ldi	r24, 0x96	; 150
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <delayMicroseconds>
    4bbc:	6c 81       	ldd	r22, Y+4	; 0x04
    4bbe:	60 62       	ori	r22, 0x20	; 32
    4bc0:	ce 01       	movw	r24, r28
    4bc2:	45 df       	rcall	.-374    	; 0x4a4e <_ZN3LCD7commandEh>
    4bc4:	86 e9       	ldi	r24, 0x96	; 150
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <delayMicroseconds>
    4bcc:	6c 81       	ldd	r22, Y+4	; 0x04
    4bce:	60 62       	ori	r22, 0x20	; 32
    4bd0:	ce 01       	movw	r24, r28
    4bd2:	3d df       	rcall	.-390    	; 0x4a4e <_ZN3LCD7commandEh>
    4bd4:	8c e3       	ldi	r24, 0x3C	; 60
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <delayMicroseconds>
    4bdc:	84 e0       	ldi	r24, 0x04	; 4
    4bde:	8d 83       	std	Y+5, r24	; 0x05
    4be0:	ce 01       	movw	r24, r28
    4be2:	8b df       	rcall	.-234    	; 0x4afa <_ZN3LCD7displayEv>
    4be4:	ce 01       	movw	r24, r28
    4be6:	3b df       	rcall	.-394    	; 0x4a5e <_ZN3LCD5clearEv>
    4be8:	82 e0       	ldi	r24, 0x02	; 2
    4bea:	8e 83       	std	Y+6, r24	; 0x06
    4bec:	66 e0       	ldi	r22, 0x06	; 6
    4bee:	ce 01       	movw	r24, r28
    4bf0:	2e df       	rcall	.-420    	; 0x4a4e <_ZN3LCD7commandEh>
    4bf2:	ce 01       	movw	r24, r28
    4bf4:	df 91       	pop	r29
    4bf6:	cf 91       	pop	r28
    4bf8:	1a cf       	rjmp	.-460    	; 0x4a2e <_ZN3LCD9backlightEv>

00004bfa <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    4bfa:	ef 92       	push	r14
    4bfc:	ff 92       	push	r15
    4bfe:	0f 93       	push	r16
    4c00:	1f 93       	push	r17
    4c02:	cf 93       	push	r28
    4c04:	df 93       	push	r29
    4c06:	8c 01       	movw	r16, r24
    4c08:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    4c0a:	67 70       	andi	r22, 0x07	; 7
    4c0c:	88 e0       	ldi	r24, 0x08	; 8
    4c0e:	68 9f       	mul	r22, r24
    4c10:	b0 01       	movw	r22, r0
    4c12:	11 24       	eor	r1, r1
    4c14:	60 64       	ori	r22, 0x40	; 64
    4c16:	c8 01       	movw	r24, r16
    4c18:	1a df       	rcall	.-460    	; 0x4a4e <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    4c1a:	8e e1       	ldi	r24, 0x1E	; 30
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <delayMicroseconds>
    4c22:	e7 01       	movw	r28, r14
    4c24:	a8 e0       	ldi	r26, 0x08	; 8
    4c26:	ea 0e       	add	r14, r26
    4c28:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    4c2a:	69 91       	ld	r22, Y+
    4c2c:	d8 01       	movw	r26, r16
    4c2e:	ed 91       	ld	r30, X+
    4c30:	fc 91       	ld	r31, X
    4c32:	01 90       	ld	r0, Z+
    4c34:	f0 81       	ld	r31, Z
    4c36:	e0 2d       	mov	r30, r0
    4c38:	c8 01       	movw	r24, r16
    4c3a:	09 95       	icall
      delayMicroseconds(40);
    4c3c:	88 e2       	ldi	r24, 0x28	; 40
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
    4c40:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    4c44:	ce 15       	cp	r28, r14
    4c46:	df 05       	cpc	r29, r15
    4c48:	81 f7       	brne	.-32     	; 0x4c2a <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    4c4a:	df 91       	pop	r29
    4c4c:	cf 91       	pop	r28
    4c4e:	1f 91       	pop	r17
    4c50:	0f 91       	pop	r16
    4c52:	ff 90       	pop	r15
    4c54:	ef 90       	pop	r14
    4c56:	08 95       	ret

00004c58 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    4c58:	21 e0       	ldi	r18, 0x01	; 1
    4c5a:	01 c0       	rjmp	.+2      	; 0x4c5e <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    4c5c:	22 0f       	add	r18, r18
    4c5e:	6a 95       	dec	r22
    4c60:	ea f7       	brpl	.-6      	; 0x4c5c <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    4c62:	dc 01       	movw	r26, r24
    4c64:	1b 96       	adiw	r26, 0x0b	; 11
    4c66:	2c 93       	st	X, r18
    4c68:	1b 97       	sbiw	r26, 0x0b	; 11
    4c6a:	19 96       	adiw	r26, 0x09	; 9
    4c6c:	4c 93       	st	X, r20
    4c6e:	19 97       	sbiw	r26, 0x09	; 9
    4c70:	ed 91       	ld	r30, X+
    4c72:	fc 91       	ld	r31, X
    4c74:	04 84       	ldd	r0, Z+12	; 0x0c
    4c76:	f5 85       	ldd	r31, Z+13	; 0x0d
    4c78:	e0 2d       	mov	r30, r0
    4c7a:	60 e0       	ldi	r22, 0x00	; 0
    4c7c:	09 94       	ijmp

00004c7e <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    4c7e:	fc 01       	movw	r30, r24
    4c80:	83 85       	ldd	r24, Z+11	; 0x0b
    4c82:	88 23       	and	r24, r24
    4c84:	89 f0       	breq	.+34     	; 0x4ca8 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    4c86:	91 85       	ldd	r25, Z+9	; 0x09
    4c88:	91 11       	cpse	r25, r1
    4c8a:	03 c0       	rjmp	.+6      	; 0x4c92 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    4c8c:	61 11       	cpse	r22, r1
    4c8e:	05 c0       	rjmp	.+10     	; 0x4c9a <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    4c90:	06 c0       	rjmp	.+12     	; 0x4c9e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    4c92:	91 30       	cpi	r25, 0x01	; 1
    4c94:	21 f4       	brne	.+8      	; 0x4c9e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    4c96:	61 11       	cpse	r22, r1
    4c98:	02 c0       	rjmp	.+4      	; 0x4c9e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    4c9a:	84 87       	std	Z+12, r24	; 0x0c
    4c9c:	01 c0       	rjmp	.+2      	; 0x4ca0 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    4c9e:	14 86       	std	Z+12, r1	; 0x0c
    4ca0:	64 85       	ldd	r22, Z+12	; 0x0c
    4ca2:	cf 01       	movw	r24, r30
    4ca4:	0d 96       	adiw	r24, 0x0d	; 13
    4ca6:	8a ce       	rjmp	.-748    	; 0x49bc <_ZN5I2CIO5writeEh>
    4ca8:	08 95       	ret

00004caa <_ZN17LiquidCrystal_I2C4initEv>:
    4caa:	0f 93       	push	r16
    4cac:	1f 93       	push	r17
    4cae:	cf 93       	push	r28
    4cb0:	df 93       	push	r29
    4cb2:	8c 01       	movw	r16, r24
    4cb4:	ec 01       	movw	r28, r24
    4cb6:	2d 96       	adiw	r28, 0x0d	; 13
    4cb8:	fc 01       	movw	r30, r24
    4cba:	62 85       	ldd	r22, Z+10	; 0x0a
    4cbc:	ce 01       	movw	r24, r28
    4cbe:	68 de       	rcall	.-816    	; 0x4990 <_ZN5I2CIO5beginEh>
    4cc0:	01 97       	sbiw	r24, 0x01	; 1
    4cc2:	59 f4       	brne	.+22     	; 0x4cda <_ZN17LiquidCrystal_I2C4initEv+0x30>
    4cc4:	61 e0       	ldi	r22, 0x01	; 1
    4cc6:	ce 01       	movw	r24, r28
    4cc8:	4d de       	rcall	.-870    	; 0x4964 <_ZN5I2CIO8portModeEh>
    4cca:	f8 01       	movw	r30, r16
    4ccc:	14 82       	std	Z+4, r1	; 0x04
    4cce:	60 e0       	ldi	r22, 0x00	; 0
    4cd0:	ce 01       	movw	r24, r28
    4cd2:	74 de       	rcall	.-792    	; 0x49bc <_ZN5I2CIO5writeEh>
    4cd4:	81 e0       	ldi	r24, 0x01	; 1
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
    4cd8:	02 c0       	rjmp	.+4      	; 0x4cde <_ZN17LiquidCrystal_I2C4initEv+0x34>
    4cda:	80 e0       	ldi	r24, 0x00	; 0
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	df 91       	pop	r29
    4ce0:	cf 91       	pop	r28
    4ce2:	1f 91       	pop	r17
    4ce4:	0f 91       	pop	r16
    4ce6:	08 95       	ret

00004ce8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    4ce8:	8f 92       	push	r8
    4cea:	af 92       	push	r10
    4cec:	cf 92       	push	r12
    4cee:	ef 92       	push	r14
    4cf0:	0f 93       	push	r16
    4cf2:	cf 93       	push	r28
    4cf4:	df 93       	push	r29
    4cf6:	cd b7       	in	r28, 0x3d	; 61
    4cf8:	de b7       	in	r29, 0x3e	; 62
    4cfa:	fc 01       	movw	r30, r24
    4cfc:	62 87       	std	Z+10, r22	; 0x0a
    4cfe:	13 86       	std	Z+11, r1	; 0x0b
    4d00:	14 86       	std	Z+12, r1	; 0x0c
    4d02:	11 86       	std	Z+9, r1	; 0x09
    4d04:	81 e0       	ldi	r24, 0x01	; 1
    4d06:	98 2f       	mov	r25, r24
    4d08:	01 c0       	rjmp	.+2      	; 0x4d0c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    4d0a:	99 0f       	add	r25, r25
    4d0c:	4a 95       	dec	r20
    4d0e:	ea f7       	brpl	.-6      	; 0x4d0a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    4d10:	91 8b       	std	Z+17, r25	; 0x11
    4d12:	98 2f       	mov	r25, r24
    4d14:	01 c0       	rjmp	.+2      	; 0x4d18 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    4d16:	99 0f       	add	r25, r25
    4d18:	2a 95       	dec	r18
    4d1a:	ea f7       	brpl	.-6      	; 0x4d16 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    4d1c:	92 8b       	std	Z+18, r25	; 0x12
    4d1e:	98 2f       	mov	r25, r24
    4d20:	01 c0       	rjmp	.+2      	; 0x4d24 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    4d22:	99 0f       	add	r25, r25
    4d24:	0a 95       	dec	r16
    4d26:	ea f7       	brpl	.-6      	; 0x4d22 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    4d28:	93 8b       	std	Z+19, r25	; 0x13
    4d2a:	98 2f       	mov	r25, r24
    4d2c:	01 c0       	rjmp	.+2      	; 0x4d30 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    4d2e:	99 0f       	add	r25, r25
    4d30:	ea 94       	dec	r14
    4d32:	ea f7       	brpl	.-6      	; 0x4d2e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    4d34:	94 8b       	std	Z+20, r25	; 0x14
    4d36:	98 2f       	mov	r25, r24
    4d38:	01 c0       	rjmp	.+2      	; 0x4d3c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    4d3a:	99 0f       	add	r25, r25
    4d3c:	ca 94       	dec	r12
    4d3e:	ea f7       	brpl	.-6      	; 0x4d3a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    4d40:	95 8b       	std	Z+21, r25	; 0x15
    4d42:	98 2f       	mov	r25, r24
    4d44:	01 c0       	rjmp	.+2      	; 0x4d48 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    4d46:	99 0f       	add	r25, r25
    4d48:	aa 94       	dec	r10
    4d4a:	ea f7       	brpl	.-6      	; 0x4d46 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    4d4c:	96 8b       	std	Z+22, r25	; 0x16
    4d4e:	01 c0       	rjmp	.+2      	; 0x4d52 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    4d50:	88 0f       	add	r24, r24
    4d52:	8a 94       	dec	r8
    4d54:	ea f7       	brpl	.-6      	; 0x4d50 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    4d56:	87 8b       	std	Z+23, r24	; 0x17
    4d58:	df 91       	pop	r29
    4d5a:	cf 91       	pop	r28
    4d5c:	0f 91       	pop	r16
    4d5e:	ef 90       	pop	r14
    4d60:	cf 90       	pop	r12
    4d62:	af 90       	pop	r10
    4d64:	8f 90       	pop	r8
    4d66:	08 95       	ret

00004d68 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    4d68:	6f 92       	push	r6
    4d6a:	7f 92       	push	r7
    4d6c:	8f 92       	push	r8
    4d6e:	9f 92       	push	r9
    4d70:	af 92       	push	r10
    4d72:	bf 92       	push	r11
    4d74:	cf 92       	push	r12
    4d76:	df 92       	push	r13
    4d78:	ef 92       	push	r14
    4d7a:	ff 92       	push	r15
    4d7c:	0f 93       	push	r16
    4d7e:	1f 93       	push	r17
    4d80:	cf 93       	push	r28
    4d82:	df 93       	push	r29
    4d84:	cd b7       	in	r28, 0x3d	; 61
    4d86:	de b7       	in	r29, 0x3e	; 62
    4d88:	3c 01       	movw	r6, r24
    4d8a:	d6 2e       	mov	r13, r22
    4d8c:	b4 2e       	mov	r11, r20
    4d8e:	92 2e       	mov	r9, r18
    4d90:	19 89       	ldd	r17, Y+17	; 0x11
    4d92:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    4d94:	44 de       	rcall	.-888    	; 0x4a1e <_ZN3LCDC1Ev>
    4d96:	81 ed       	ldi	r24, 0xD1	; 209
    4d98:	97 e0       	ldi	r25, 0x07	; 7
    4d9a:	f3 01       	movw	r30, r6
    4d9c:	91 83       	std	Z+1, r25	; 0x01
    4d9e:	80 83       	st	Z, r24
    4da0:	c3 01       	movw	r24, r6
    4da2:	0d 96       	adiw	r24, 0x0d	; 13
    4da4:	d8 dd       	rcall	.-1104   	; 0x4956 <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    4da6:	29 2d       	mov	r18, r9
    4da8:	4b 2d       	mov	r20, r11
    4daa:	6d 2d       	mov	r22, r13
    4dac:	c3 01       	movw	r24, r6
    4dae:	9c df       	rcall	.-200    	; 0x4ce8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    4db0:	4f 2d       	mov	r20, r15
    4db2:	61 2f       	mov	r22, r17
    4db4:	c3 01       	movw	r24, r6
}
    4db6:	df 91       	pop	r29
    4db8:	cf 91       	pop	r28
    4dba:	1f 91       	pop	r17
    4dbc:	0f 91       	pop	r16
    4dbe:	ff 90       	pop	r15
    4dc0:	ef 90       	pop	r14
    4dc2:	df 90       	pop	r13
    4dc4:	cf 90       	pop	r12
    4dc6:	bf 90       	pop	r11
    4dc8:	af 90       	pop	r10
    4dca:	9f 90       	pop	r9
    4dcc:	8f 90       	pop	r8
    4dce:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    4dd0:	6f 90       	pop	r6
    4dd2:	42 cf       	rjmp	.-380    	; 0x4c58 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

00004dd4 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    4dd4:	ef 92       	push	r14
    4dd6:	ff 92       	push	r15
    4dd8:	0f 93       	push	r16
    4dda:	1f 93       	push	r17
    4ddc:	cf 93       	push	r28
    4dde:	8c 01       	movw	r16, r24
    4de0:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    4de2:	7c 01       	movw	r14, r24
    4de4:	8d e0       	ldi	r24, 0x0D	; 13
    4de6:	e8 0e       	add	r14, r24
    4de8:	f1 1c       	adc	r15, r1
    4dea:	f8 01       	movw	r30, r16
    4dec:	61 89       	ldd	r22, Z+17	; 0x11
    4dee:	6c 2b       	or	r22, r28
    4df0:	c7 01       	movw	r24, r14
    4df2:	e4 dd       	rcall	.-1080   	; 0x49bc <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    4df4:	f8 01       	movw	r30, r16
    4df6:	61 89       	ldd	r22, Z+17	; 0x11
    4df8:	60 95       	com	r22
    4dfa:	6c 23       	and	r22, r28
    4dfc:	c7 01       	movw	r24, r14
    4dfe:	cf 91       	pop	r28
    4e00:	1f 91       	pop	r17
    4e02:	0f 91       	pop	r16
    4e04:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    4e06:	ef 90       	pop	r14
    4e08:	d9 cd       	rjmp	.-1102   	; 0x49bc <_ZN5I2CIO5writeEh>

00004e0a <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    4e0a:	fc 01       	movw	r30, r24
    4e0c:	96 2f       	mov	r25, r22
    4e0e:	df 01       	movw	r26, r30
    4e10:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    4e12:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    4e14:	90 ff       	sbrs	r25, 0
    4e16:	04 c0       	rjmp	.+8      	; 0x4e20 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    4e18:	54 96       	adiw	r26, 0x14	; 20
    4e1a:	2c 91       	ld	r18, X
    4e1c:	54 97       	sbiw	r26, 0x14	; 20
    4e1e:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    4e20:	96 95       	lsr	r25
    4e22:	81 50       	subi	r24, 0x01	; 1
    4e24:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    4e26:	81 11       	cpse	r24, r1
    4e28:	f5 cf       	rjmp	.-22     	; 0x4e14 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    4e2a:	41 30       	cpi	r20, 0x01	; 1
    4e2c:	09 f4       	brne	.+2      	; 0x4e30 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    4e2e:	43 89       	ldd	r20, Z+19	; 0x13
    4e30:	94 85       	ldd	r25, Z+12	; 0x0c
    4e32:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    4e34:	64 2b       	or	r22, r20
    4e36:	cf 01       	movw	r24, r30
    4e38:	cd cf       	rjmp	.-102    	; 0x4dd4 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00004e3a <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    4e3a:	0f 93       	push	r16
    4e3c:	1f 93       	push	r17
    4e3e:	cf 93       	push	r28
    4e40:	df 93       	push	r29
    4e42:	06 2f       	mov	r16, r22
    4e44:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    4e46:	42 30       	cpi	r20, 0x02	; 2
    4e48:	19 f4       	brne	.+6      	; 0x4e50 <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    4e4a:	40 e0       	ldi	r20, 0x00	; 0
    4e4c:	60 2f       	mov	r22, r16
    4e4e:	0d c0       	rjmp	.+26     	; 0x4e6a <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    4e50:	14 2f       	mov	r17, r20
    4e52:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    4e54:	70 e0       	ldi	r23, 0x00	; 0
    4e56:	84 e0       	ldi	r24, 0x04	; 4
    4e58:	75 95       	asr	r23
    4e5a:	67 95       	ror	r22
    4e5c:	8a 95       	dec	r24
    4e5e:	e1 f7       	brne	.-8      	; 0x4e58 <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    4e60:	ce 01       	movw	r24, r28
    4e62:	d3 df       	rcall	.-90     	; 0x4e0a <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    4e64:	41 2f       	mov	r20, r17
    4e66:	60 2f       	mov	r22, r16
    4e68:	ce 01       	movw	r24, r28
   }
}
    4e6a:	df 91       	pop	r29
    4e6c:	cf 91       	pop	r28
    4e6e:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    4e70:	0f 91       	pop	r16
    4e72:	cb cf       	rjmp	.-106    	; 0x4e0a <_ZN17LiquidCrystal_I2C10write4bitsEhh>

00004e74 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    4e74:	ff 92       	push	r15
    4e76:	0f 93       	push	r16
    4e78:	1f 93       	push	r17
    4e7a:	cf 93       	push	r28
    4e7c:	df 93       	push	r29
    4e7e:	ec 01       	movw	r28, r24
    4e80:	16 2f       	mov	r17, r22
    4e82:	04 2f       	mov	r16, r20
    4e84:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    4e86:	11 df       	rcall	.-478    	; 0x4caa <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    4e88:	2f 2d       	mov	r18, r15
    4e8a:	40 2f       	mov	r20, r16
    4e8c:	61 2f       	mov	r22, r17
    4e8e:	ce 01       	movw	r24, r28
}
    4e90:	df 91       	pop	r29
    4e92:	cf 91       	pop	r28
    4e94:	1f 91       	pop	r17
    4e96:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    4e98:	ff 90       	pop	r15
    4e9a:	36 ce       	rjmp	.-916    	; 0x4b08 <_ZN3LCD5beginEhhh>

00004e9c <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    4e9c:	cf 93       	push	r28
  uint8_t sreg = SREG;
    4e9e:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    4ea0:	f8 94       	cli
  if (!initialized) {
    4ea2:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <_ZN8SPIClass11initializedE>
    4ea6:	81 11       	cpse	r24, r1
    4ea8:	27 c0       	rjmp	.+78     	; 0x4ef8 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    4eaa:	e3 e7       	ldi	r30, 0x73	; 115
    4eac:	f2 e0       	ldi	r31, 0x02	; 2
    4eae:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    4eb0:	e3 e5       	ldi	r30, 0x53	; 83
    4eb2:	f2 e0       	ldi	r31, 0x02	; 2
    4eb4:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    4eb6:	e8 2f       	mov	r30, r24
    4eb8:	f0 e0       	ldi	r31, 0x00	; 0
    4eba:	ee 0f       	add	r30, r30
    4ebc:	ff 1f       	adc	r31, r31
    4ebe:	e3 56       	subi	r30, 0x63	; 99
    4ec0:	fd 4f       	sbci	r31, 0xFD	; 253
    4ec2:	a5 91       	lpm	r26, Z+
    4ec4:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    4ec6:	ec 91       	ld	r30, X
    4ec8:	e9 23       	and	r30, r25
    4eca:	21 f4       	brne	.+8      	; 0x4ed4 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    4ecc:	61 e0       	ldi	r22, 0x01	; 1
    4ece:	8a e0       	ldi	r24, 0x0A	; 10
    4ed0:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    4ed4:	61 e0       	ldi	r22, 0x01	; 1
    4ed6:	8a e0       	ldi	r24, 0x0A	; 10
    4ed8:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    4edc:	8c b5       	in	r24, 0x2c	; 44
    4ede:	80 61       	ori	r24, 0x10	; 16
    4ee0:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    4ee2:	8c b5       	in	r24, 0x2c	; 44
    4ee4:	80 64       	ori	r24, 0x40	; 64
    4ee6:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    4ee8:	61 e0       	ldi	r22, 0x01	; 1
    4eea:	8d e0       	ldi	r24, 0x0D	; 13
    4eec:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <pinMode>
    pinMode(MOSI, OUTPUT);
    4ef0:	61 e0       	ldi	r22, 0x01	; 1
    4ef2:	8b e0       	ldi	r24, 0x0B	; 11
    4ef4:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <pinMode>
  }
  initialized++; // reference count
    4ef8:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <_ZN8SPIClass11initializedE>
    4efc:	8f 5f       	subi	r24, 0xFF	; 255
    4efe:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4f02:	cf bf       	out	0x3f, r28	; 63
}
    4f04:	cf 91       	pop	r28
    4f06:	08 95       	ret

00004f08 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4f08:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <twi_state>
    4f0c:	81 e0       	ldi	r24, 0x01	; 1
    4f0e:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <twi_sendStop>
    4f12:	10 92 2e 0a 	sts	0x0A2E, r1	; 0x800a2e <twi_inRepStart>
    4f16:	61 e0       	ldi	r22, 0x01	; 1
    4f18:	8d e1       	ldi	r24, 0x1D	; 29
    4f1a:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <digitalWrite>
    4f1e:	61 e0       	ldi	r22, 0x01	; 1
    4f20:	8c e1       	ldi	r24, 0x1C	; 28
    4f22:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <digitalWrite>
    4f26:	e9 eb       	ldi	r30, 0xB9	; 185
    4f28:	f0 e0       	ldi	r31, 0x00	; 0
    4f2a:	80 81       	ld	r24, Z
    4f2c:	8e 7f       	andi	r24, 0xFE	; 254
    4f2e:	80 83       	st	Z, r24
    4f30:	80 81       	ld	r24, Z
    4f32:	8d 7f       	andi	r24, 0xFD	; 253
    4f34:	80 83       	st	Z, r24
    4f36:	88 e4       	ldi	r24, 0x48	; 72
    4f38:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    4f3c:	85 e4       	ldi	r24, 0x45	; 69
    4f3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4f42:	08 95       	ret

00004f44 <twi_disable>:
    4f44:	ec eb       	ldi	r30, 0xBC	; 188
    4f46:	f0 e0       	ldi	r31, 0x00	; 0
    4f48:	80 81       	ld	r24, Z
    4f4a:	8a 7b       	andi	r24, 0xBA	; 186
    4f4c:	80 83       	st	Z, r24
    4f4e:	60 e0       	ldi	r22, 0x00	; 0
    4f50:	8d e1       	ldi	r24, 0x1D	; 29
    4f52:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <digitalWrite>
    4f56:	60 e0       	ldi	r22, 0x00	; 0
    4f58:	8c e1       	ldi	r24, 0x1C	; 28
    4f5a:	0c 94 c2 2f 	jmp	0x5f84	; 0x5f84 <digitalWrite>

00004f5e <twi_setFrequency>:
    4f5e:	9b 01       	movw	r18, r22
    4f60:	ac 01       	movw	r20, r24
    4f62:	60 e0       	ldi	r22, 0x00	; 0
    4f64:	74 e2       	ldi	r23, 0x24	; 36
    4f66:	84 ef       	ldi	r24, 0xF4	; 244
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	0e 94 d2 33 	call	0x67a4	; 0x67a4 <__udivmodsi4>
    4f6e:	da 01       	movw	r26, r20
    4f70:	c9 01       	movw	r24, r18
    4f72:	40 97       	sbiw	r24, 0x10	; 16
    4f74:	a1 09       	sbc	r26, r1
    4f76:	b1 09       	sbc	r27, r1
    4f78:	b6 95       	lsr	r27
    4f7a:	a7 95       	ror	r26
    4f7c:	97 95       	ror	r25
    4f7e:	87 95       	ror	r24
    4f80:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    4f84:	08 95       	ret

00004f86 <twi_readFrom>:
    4f86:	41 32       	cpi	r20, 0x21	; 33
    4f88:	08 f0       	brcs	.+2      	; 0x4f8c <twi_readFrom+0x6>
    4f8a:	43 c0       	rjmp	.+134    	; 0x5012 <twi_readFrom+0x8c>
    4f8c:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <twi_state>
    4f90:	91 11       	cpse	r25, r1
    4f92:	fc cf       	rjmp	.-8      	; 0x4f8c <twi_readFrom+0x6>
    4f94:	91 e0       	ldi	r25, 0x01	; 1
    4f96:	90 93 31 0a 	sts	0x0A31, r25	; 0x800a31 <twi_state>
    4f9a:	20 93 2f 0a 	sts	0x0A2F, r18	; 0x800a2f <twi_sendStop>
    4f9e:	2f ef       	ldi	r18, 0xFF	; 255
    4fa0:	20 93 c4 09 	sts	0x09C4, r18	; 0x8009c4 <twi_error>
    4fa4:	10 92 09 0a 	sts	0x0A09, r1	; 0x800a09 <twi_masterBufferIndex>
    4fa8:	24 0f       	add	r18, r20
    4faa:	20 93 08 0a 	sts	0x0A08, r18	; 0x800a08 <twi_masterBufferLength>
    4fae:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <twi_slarw>
    4fb2:	90 91 30 0a 	lds	r25, 0x0A30	; 0x800a30 <twi_slarw>
    4fb6:	88 0f       	add	r24, r24
    4fb8:	89 2b       	or	r24, r25
    4fba:	80 93 30 0a 	sts	0x0A30, r24	; 0x800a30 <twi_slarw>
    4fbe:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <twi_inRepStart>
    4fc2:	81 30       	cpi	r24, 0x01	; 1
    4fc4:	61 f4       	brne	.+24     	; 0x4fde <twi_readFrom+0x58>
    4fc6:	10 92 2e 0a 	sts	0x0A2E, r1	; 0x800a2e <twi_inRepStart>
    4fca:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <twi_slarw>
    4fce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4fd2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4fd6:	83 fd       	sbrc	r24, 3
    4fd8:	f8 cf       	rjmp	.-16     	; 0x4fca <twi_readFrom+0x44>
    4fda:	85 ec       	ldi	r24, 0xC5	; 197
    4fdc:	01 c0       	rjmp	.+2      	; 0x4fe0 <twi_readFrom+0x5a>
    4fde:	85 ee       	ldi	r24, 0xE5	; 229
    4fe0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4fe4:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <twi_state>
    4fe8:	81 30       	cpi	r24, 0x01	; 1
    4fea:	e1 f3       	breq	.-8      	; 0x4fe4 <twi_readFrom+0x5e>
    4fec:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <twi_masterBufferIndex>
    4ff0:	84 17       	cp	r24, r20
    4ff2:	10 f4       	brcc	.+4      	; 0x4ff8 <twi_readFrom+0x72>
    4ff4:	40 91 09 0a 	lds	r20, 0x0A09	; 0x800a09 <twi_masterBufferIndex>
    4ff8:	aa e0       	ldi	r26, 0x0A	; 10
    4ffa:	ba e0       	ldi	r27, 0x0A	; 10
    4ffc:	96 2f       	mov	r25, r22
    4ffe:	fb 01       	movw	r30, r22
    5000:	8e 2f       	mov	r24, r30
    5002:	89 1b       	sub	r24, r25
    5004:	84 17       	cp	r24, r20
    5006:	18 f4       	brcc	.+6      	; 0x500e <twi_readFrom+0x88>
    5008:	8d 91       	ld	r24, X+
    500a:	81 93       	st	Z+, r24
    500c:	f9 cf       	rjmp	.-14     	; 0x5000 <twi_readFrom+0x7a>
    500e:	84 2f       	mov	r24, r20
    5010:	08 95       	ret
    5012:	80 e0       	ldi	r24, 0x00	; 0
    5014:	08 95       	ret

00005016 <twi_writeTo>:
    5016:	0f 93       	push	r16
    5018:	41 32       	cpi	r20, 0x21	; 33
    501a:	08 f0       	brcs	.+2      	; 0x501e <twi_writeTo+0x8>
    501c:	4a c0       	rjmp	.+148    	; 0x50b2 <twi_writeTo+0x9c>
    501e:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <twi_state>
    5022:	91 11       	cpse	r25, r1
    5024:	fc cf       	rjmp	.-8      	; 0x501e <twi_writeTo+0x8>
    5026:	32 e0       	ldi	r19, 0x02	; 2
    5028:	30 93 31 0a 	sts	0x0A31, r19	; 0x800a31 <twi_state>
    502c:	00 93 2f 0a 	sts	0x0A2F, r16	; 0x800a2f <twi_sendStop>
    5030:	3f ef       	ldi	r19, 0xFF	; 255
    5032:	30 93 c4 09 	sts	0x09C4, r19	; 0x8009c4 <twi_error>
    5036:	10 92 09 0a 	sts	0x0A09, r1	; 0x800a09 <twi_masterBufferIndex>
    503a:	40 93 08 0a 	sts	0x0A08, r20	; 0x800a08 <twi_masterBufferLength>
    503e:	56 2f       	mov	r21, r22
    5040:	aa e0       	ldi	r26, 0x0A	; 10
    5042:	ba e0       	ldi	r27, 0x0A	; 10
    5044:	fb 01       	movw	r30, r22
    5046:	3e 2f       	mov	r19, r30
    5048:	35 1b       	sub	r19, r21
    504a:	34 17       	cp	r19, r20
    504c:	18 f4       	brcc	.+6      	; 0x5054 <twi_writeTo+0x3e>
    504e:	31 91       	ld	r19, Z+
    5050:	3d 93       	st	X+, r19
    5052:	f9 cf       	rjmp	.-14     	; 0x5046 <twi_writeTo+0x30>
    5054:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <twi_slarw>
    5058:	30 91 30 0a 	lds	r19, 0x0A30	; 0x800a30 <twi_slarw>
    505c:	88 0f       	add	r24, r24
    505e:	83 2b       	or	r24, r19
    5060:	80 93 30 0a 	sts	0x0A30, r24	; 0x800a30 <twi_slarw>
    5064:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <twi_inRepStart>
    5068:	81 30       	cpi	r24, 0x01	; 1
    506a:	61 f4       	brne	.+24     	; 0x5084 <twi_writeTo+0x6e>
    506c:	10 92 2e 0a 	sts	0x0A2E, r1	; 0x800a2e <twi_inRepStart>
    5070:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <twi_slarw>
    5074:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5078:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    507c:	83 fd       	sbrc	r24, 3
    507e:	f8 cf       	rjmp	.-16     	; 0x5070 <twi_writeTo+0x5a>
    5080:	85 ec       	ldi	r24, 0xC5	; 197
    5082:	01 c0       	rjmp	.+2      	; 0x5086 <twi_writeTo+0x70>
    5084:	85 ee       	ldi	r24, 0xE5	; 229
    5086:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    508a:	22 23       	and	r18, r18
    508c:	21 f0       	breq	.+8      	; 0x5096 <twi_writeTo+0x80>
    508e:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <twi_state>
    5092:	82 30       	cpi	r24, 0x02	; 2
    5094:	d1 f3       	breq	.-12     	; 0x508a <twi_writeTo+0x74>
    5096:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <twi_error>
    509a:	8f 3f       	cpi	r24, 0xFF	; 255
    509c:	79 f0       	breq	.+30     	; 0x50bc <twi_writeTo+0xa6>
    509e:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <twi_error>
    50a2:	80 32       	cpi	r24, 0x20	; 32
    50a4:	41 f0       	breq	.+16     	; 0x50b6 <twi_writeTo+0xa0>
    50a6:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <twi_error>
    50aa:	80 33       	cpi	r24, 0x30	; 48
    50ac:	31 f0       	breq	.+12     	; 0x50ba <twi_writeTo+0xa4>
    50ae:	94 e0       	ldi	r25, 0x04	; 4
    50b0:	05 c0       	rjmp	.+10     	; 0x50bc <twi_writeTo+0xa6>
    50b2:	91 e0       	ldi	r25, 0x01	; 1
    50b4:	03 c0       	rjmp	.+6      	; 0x50bc <twi_writeTo+0xa6>
    50b6:	92 e0       	ldi	r25, 0x02	; 2
    50b8:	01 c0       	rjmp	.+2      	; 0x50bc <twi_writeTo+0xa6>
    50ba:	93 e0       	ldi	r25, 0x03	; 3
    50bc:	89 2f       	mov	r24, r25
    50be:	0f 91       	pop	r16
    50c0:	08 95       	ret

000050c2 <twi_transmit>:
    50c2:	40 91 e6 09 	lds	r20, 0x09E6	; 0x8009e6 <twi_txBufferLength>
    50c6:	26 2f       	mov	r18, r22
    50c8:	30 e0       	ldi	r19, 0x00	; 0
    50ca:	24 0f       	add	r18, r20
    50cc:	31 1d       	adc	r19, r1
    50ce:	21 32       	cpi	r18, 0x21	; 33
    50d0:	31 05       	cpc	r19, r1
    50d2:	dc f4       	brge	.+54     	; 0x510a <twi_transmit+0x48>
    50d4:	20 91 31 0a 	lds	r18, 0x0A31	; 0x800a31 <twi_state>
    50d8:	24 30       	cpi	r18, 0x04	; 4
    50da:	c9 f4       	brne	.+50     	; 0x510e <twi_transmit+0x4c>
    50dc:	fc 01       	movw	r30, r24
    50de:	80 e0       	ldi	r24, 0x00	; 0
    50e0:	90 e0       	ldi	r25, 0x00	; 0
    50e2:	86 17       	cp	r24, r22
    50e4:	58 f4       	brcc	.+22     	; 0x50fc <twi_transmit+0x3a>
    50e6:	30 91 e6 09 	lds	r19, 0x09E6	; 0x8009e6 <twi_txBufferLength>
    50ea:	21 91       	ld	r18, Z+
    50ec:	dc 01       	movw	r26, r24
    50ee:	a8 51       	subi	r26, 0x18	; 24
    50f0:	b6 4f       	sbci	r27, 0xF6	; 246
    50f2:	a3 0f       	add	r26, r19
    50f4:	b1 1d       	adc	r27, r1
    50f6:	2c 93       	st	X, r18
    50f8:	01 96       	adiw	r24, 0x01	; 1
    50fa:	f3 cf       	rjmp	.-26     	; 0x50e2 <twi_transmit+0x20>
    50fc:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <twi_txBufferLength>
    5100:	68 0f       	add	r22, r24
    5102:	60 93 e6 09 	sts	0x09E6, r22	; 0x8009e6 <twi_txBufferLength>
    5106:	80 e0       	ldi	r24, 0x00	; 0
    5108:	08 95       	ret
    510a:	81 e0       	ldi	r24, 0x01	; 1
    510c:	08 95       	ret
    510e:	82 e0       	ldi	r24, 0x02	; 2
    5110:	08 95       	ret

00005112 <twi_attachSlaveRxEvent>:
    5112:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <twi_onSlaveReceive+0x1>
    5116:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <twi_onSlaveReceive>
    511a:	08 95       	ret

0000511c <twi_attachSlaveTxEvent>:
    511c:	90 93 2d 0a 	sts	0x0A2D, r25	; 0x800a2d <twi_onSlaveTransmit+0x1>
    5120:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <twi_onSlaveTransmit>
    5124:	08 95       	ret

00005126 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5126:	85 ed       	ldi	r24, 0xD5	; 213
    5128:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    512c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5130:	84 fd       	sbrc	r24, 4
    5132:	fc cf       	rjmp	.-8      	; 0x512c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5134:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <twi_state>
    5138:	08 95       	ret

0000513a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    513a:	85 ec       	ldi	r24, 0xC5	; 197
    513c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    5140:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <twi_state>
    5144:	08 95       	ret

00005146 <__vector_26>:
}

ISR(TWI_vect)
{
    5146:	1f 92       	push	r1
    5148:	0f 92       	push	r0
    514a:	0f b6       	in	r0, 0x3f	; 63
    514c:	0f 92       	push	r0
    514e:	11 24       	eor	r1, r1
    5150:	0b b6       	in	r0, 0x3b	; 59
    5152:	0f 92       	push	r0
    5154:	2f 93       	push	r18
    5156:	3f 93       	push	r19
    5158:	4f 93       	push	r20
    515a:	5f 93       	push	r21
    515c:	6f 93       	push	r22
    515e:	7f 93       	push	r23
    5160:	8f 93       	push	r24
    5162:	9f 93       	push	r25
    5164:	af 93       	push	r26
    5166:	bf 93       	push	r27
    5168:	ef 93       	push	r30
    516a:	ff 93       	push	r31
  switch(TW_STATUS){
    516c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5170:	88 7f       	andi	r24, 0xF8	; 248
    5172:	80 36       	cpi	r24, 0x60	; 96
    5174:	09 f4       	brne	.+2      	; 0x5178 <__vector_26+0x32>
    5176:	9d c0       	rjmp	.+314    	; 0x52b2 <__vector_26+0x16c>
    5178:	70 f5       	brcc	.+92     	; 0x51d6 <__vector_26+0x90>
    517a:	88 32       	cpi	r24, 0x28	; 40
    517c:	09 f4       	brne	.+2      	; 0x5180 <__vector_26+0x3a>
    517e:	5c c0       	rjmp	.+184    	; 0x5238 <__vector_26+0xf2>
    5180:	90 f4       	brcc	.+36     	; 0x51a6 <__vector_26+0x60>
    5182:	80 31       	cpi	r24, 0x10	; 16
    5184:	09 f4       	brne	.+2      	; 0x5188 <__vector_26+0x42>
    5186:	55 c0       	rjmp	.+170    	; 0x5232 <__vector_26+0xec>
    5188:	38 f4       	brcc	.+14     	; 0x5198 <__vector_26+0x52>
    518a:	88 23       	and	r24, r24
    518c:	09 f4       	brne	.+2      	; 0x5190 <__vector_26+0x4a>
    518e:	f3 c0       	rjmp	.+486    	; 0x5376 <__vector_26+0x230>
    5190:	88 30       	cpi	r24, 0x08	; 8
    5192:	09 f4       	brne	.+2      	; 0x5196 <__vector_26+0x50>
    5194:	4e c0       	rjmp	.+156    	; 0x5232 <__vector_26+0xec>
    5196:	f2 c0       	rjmp	.+484    	; 0x537c <__vector_26+0x236>
    5198:	88 31       	cpi	r24, 0x18	; 24
    519a:	09 f4       	brne	.+2      	; 0x519e <__vector_26+0x58>
    519c:	4d c0       	rjmp	.+154    	; 0x5238 <__vector_26+0xf2>
    519e:	80 32       	cpi	r24, 0x20	; 32
    51a0:	09 f4       	brne	.+2      	; 0x51a4 <__vector_26+0x5e>
    51a2:	5e c0       	rjmp	.+188    	; 0x5260 <__vector_26+0x11a>
    51a4:	eb c0       	rjmp	.+470    	; 0x537c <__vector_26+0x236>
    51a6:	80 34       	cpi	r24, 0x40	; 64
    51a8:	09 f4       	brne	.+2      	; 0x51ac <__vector_26+0x66>
    51aa:	69 c0       	rjmp	.+210    	; 0x527e <__vector_26+0x138>
    51ac:	50 f4       	brcc	.+20     	; 0x51c2 <__vector_26+0x7c>
    51ae:	80 33       	cpi	r24, 0x30	; 48
    51b0:	09 f4       	brne	.+2      	; 0x51b4 <__vector_26+0x6e>
    51b2:	56 c0       	rjmp	.+172    	; 0x5260 <__vector_26+0x11a>
    51b4:	88 33       	cpi	r24, 0x38	; 56
    51b6:	09 f0       	breq	.+2      	; 0x51ba <__vector_26+0x74>
    51b8:	e1 c0       	rjmp	.+450    	; 0x537c <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    51ba:	80 93 c4 09 	sts	0x09C4, r24	; 0x8009c4 <twi_error>
      twi_releaseBus();
    51be:	bd df       	rcall	.-134    	; 0x513a <twi_releaseBus>
      break;
    51c0:	dd c0       	rjmp	.+442    	; 0x537c <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    51c2:	80 35       	cpi	r24, 0x50	; 80
    51c4:	09 f4       	brne	.+2      	; 0x51c8 <__vector_26+0x82>
    51c6:	4f c0       	rjmp	.+158    	; 0x5266 <__vector_26+0x120>
    51c8:	88 35       	cpi	r24, 0x58	; 88
    51ca:	09 f4       	brne	.+2      	; 0x51ce <__vector_26+0x88>
    51cc:	5d c0       	rjmp	.+186    	; 0x5288 <__vector_26+0x142>
    51ce:	88 34       	cpi	r24, 0x48	; 72
    51d0:	09 f0       	breq	.+2      	; 0x51d4 <__vector_26+0x8e>
    51d2:	d4 c0       	rjmp	.+424    	; 0x537c <__vector_26+0x236>
    51d4:	d2 c0       	rjmp	.+420    	; 0x537a <__vector_26+0x234>
    51d6:	88 39       	cpi	r24, 0x98	; 152
    51d8:	09 f4       	brne	.+2      	; 0x51dc <__vector_26+0x96>
    51da:	c3 c0       	rjmp	.+390    	; 0x5362 <__vector_26+0x21c>
    51dc:	a8 f4       	brcc	.+42     	; 0x5208 <__vector_26+0xc2>
    51de:	88 37       	cpi	r24, 0x78	; 120
    51e0:	09 f4       	brne	.+2      	; 0x51e4 <__vector_26+0x9e>
    51e2:	67 c0       	rjmp	.+206    	; 0x52b2 <__vector_26+0x16c>
    51e4:	38 f4       	brcc	.+14     	; 0x51f4 <__vector_26+0xae>
    51e6:	88 36       	cpi	r24, 0x68	; 104
    51e8:	09 f4       	brne	.+2      	; 0x51ec <__vector_26+0xa6>
    51ea:	63 c0       	rjmp	.+198    	; 0x52b2 <__vector_26+0x16c>
    51ec:	80 37       	cpi	r24, 0x70	; 112
    51ee:	09 f4       	brne	.+2      	; 0x51f2 <__vector_26+0xac>
    51f0:	60 c0       	rjmp	.+192    	; 0x52b2 <__vector_26+0x16c>
    51f2:	c4 c0       	rjmp	.+392    	; 0x537c <__vector_26+0x236>
    51f4:	88 38       	cpi	r24, 0x88	; 136
    51f6:	09 f4       	brne	.+2      	; 0x51fa <__vector_26+0xb4>
    51f8:	b4 c0       	rjmp	.+360    	; 0x5362 <__vector_26+0x21c>
    51fa:	80 39       	cpi	r24, 0x90	; 144
    51fc:	09 f4       	brne	.+2      	; 0x5200 <__vector_26+0xba>
    51fe:	5f c0       	rjmp	.+190    	; 0x52be <__vector_26+0x178>
    5200:	80 38       	cpi	r24, 0x80	; 128
    5202:	09 f0       	breq	.+2      	; 0x5206 <__vector_26+0xc0>
    5204:	bb c0       	rjmp	.+374    	; 0x537c <__vector_26+0x236>
    5206:	5b c0       	rjmp	.+182    	; 0x52be <__vector_26+0x178>
    5208:	80 3b       	cpi	r24, 0xB0	; 176
    520a:	09 f4       	brne	.+2      	; 0x520e <__vector_26+0xc8>
    520c:	82 c0       	rjmp	.+260    	; 0x5312 <__vector_26+0x1cc>
    520e:	38 f4       	brcc	.+14     	; 0x521e <__vector_26+0xd8>
    5210:	80 3a       	cpi	r24, 0xA0	; 160
    5212:	09 f4       	brne	.+2      	; 0x5216 <__vector_26+0xd0>
    5214:	66 c0       	rjmp	.+204    	; 0x52e2 <__vector_26+0x19c>
    5216:	88 3a       	cpi	r24, 0xA8	; 168
    5218:	09 f4       	brne	.+2      	; 0x521c <__vector_26+0xd6>
    521a:	7b c0       	rjmp	.+246    	; 0x5312 <__vector_26+0x1cc>
    521c:	af c0       	rjmp	.+350    	; 0x537c <__vector_26+0x236>
    521e:	80 3c       	cpi	r24, 0xC0	; 192
    5220:	09 f4       	brne	.+2      	; 0x5224 <__vector_26+0xde>
    5222:	a3 c0       	rjmp	.+326    	; 0x536a <__vector_26+0x224>
    5224:	88 3c       	cpi	r24, 0xC8	; 200
    5226:	09 f4       	brne	.+2      	; 0x522a <__vector_26+0xe4>
    5228:	a0 c0       	rjmp	.+320    	; 0x536a <__vector_26+0x224>
    522a:	88 3b       	cpi	r24, 0xB8	; 184
    522c:	09 f4       	brne	.+2      	; 0x5230 <__vector_26+0xea>
    522e:	86 c0       	rjmp	.+268    	; 0x533c <__vector_26+0x1f6>
    5230:	a5 c0       	rjmp	.+330    	; 0x537c <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    5232:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <twi_slarw>
    5236:	10 c0       	rjmp	.+32     	; 0x5258 <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5238:	90 91 09 0a 	lds	r25, 0x0A09	; 0x800a09 <twi_masterBufferIndex>
    523c:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <twi_masterBufferLength>
    5240:	98 17       	cp	r25, r24
    5242:	70 f5       	brcc	.+92     	; 0x52a0 <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5244:	e0 91 09 0a 	lds	r30, 0x0A09	; 0x800a09 <twi_masterBufferIndex>
    5248:	81 e0       	ldi	r24, 0x01	; 1
    524a:	8e 0f       	add	r24, r30
    524c:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <twi_masterBufferIndex>
    5250:	f0 e0       	ldi	r31, 0x00	; 0
    5252:	e6 5f       	subi	r30, 0xF6	; 246
    5254:	f5 4f       	sbci	r31, 0xF5	; 245
    5256:	80 81       	ld	r24, Z
    5258:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    525c:	85 ec       	ldi	r24, 0xC5	; 197
    525e:	82 c0       	rjmp	.+260    	; 0x5364 <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5260:	80 93 c4 09 	sts	0x09C4, r24	; 0x8009c4 <twi_error>
    5264:	8a c0       	rjmp	.+276    	; 0x537a <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5266:	e0 91 09 0a 	lds	r30, 0x0A09	; 0x800a09 <twi_masterBufferIndex>
    526a:	81 e0       	ldi	r24, 0x01	; 1
    526c:	8e 0f       	add	r24, r30
    526e:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <twi_masterBufferIndex>
    5272:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5276:	f0 e0       	ldi	r31, 0x00	; 0
    5278:	e6 5f       	subi	r30, 0xF6	; 246
    527a:	f5 4f       	sbci	r31, 0xF5	; 245
    527c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    527e:	90 91 09 0a 	lds	r25, 0x0A09	; 0x800a09 <twi_masterBufferIndex>
    5282:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <twi_masterBufferLength>
    5286:	6a c0       	rjmp	.+212    	; 0x535c <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5288:	e0 91 09 0a 	lds	r30, 0x0A09	; 0x800a09 <twi_masterBufferIndex>
    528c:	81 e0       	ldi	r24, 0x01	; 1
    528e:	8e 0f       	add	r24, r30
    5290:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <twi_masterBufferIndex>
    5294:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5298:	f0 e0       	ldi	r31, 0x00	; 0
    529a:	e6 5f       	subi	r30, 0xF6	; 246
    529c:	f5 4f       	sbci	r31, 0xF5	; 245
    529e:	80 83       	st	Z, r24
	if (twi_sendStop)
    52a0:	80 91 2f 0a 	lds	r24, 0x0A2F	; 0x800a2f <twi_sendStop>
    52a4:	81 11       	cpse	r24, r1
    52a6:	69 c0       	rjmp	.+210    	; 0x537a <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    52a8:	81 e0       	ldi	r24, 0x01	; 1
    52aa:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    52ae:	84 ea       	ldi	r24, 0xA4	; 164
    52b0:	5d c0       	rjmp	.+186    	; 0x536c <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    52b2:	83 e0       	ldi	r24, 0x03	; 3
    52b4:	80 93 31 0a 	sts	0x0A31, r24	; 0x800a31 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    52b8:	10 92 c5 09 	sts	0x09C5, r1	; 0x8009c5 <twi_rxBufferIndex>
    52bc:	cf cf       	rjmp	.-98     	; 0x525c <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    52be:	80 91 c5 09 	lds	r24, 0x09C5	; 0x8009c5 <twi_rxBufferIndex>
    52c2:	80 32       	cpi	r24, 0x20	; 32
    52c4:	08 f0       	brcs	.+2      	; 0x52c8 <__vector_26+0x182>
    52c6:	4d c0       	rjmp	.+154    	; 0x5362 <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    52c8:	e0 91 c5 09 	lds	r30, 0x09C5	; 0x8009c5 <twi_rxBufferIndex>
    52cc:	81 e0       	ldi	r24, 0x01	; 1
    52ce:	8e 0f       	add	r24, r30
    52d0:	80 93 c5 09 	sts	0x09C5, r24	; 0x8009c5 <twi_rxBufferIndex>
    52d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    52d8:	f0 e0       	ldi	r31, 0x00	; 0
    52da:	ea 53       	subi	r30, 0x3A	; 58
    52dc:	f6 4f       	sbci	r31, 0xF6	; 246
    52de:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    52e0:	bd cf       	rjmp	.-134    	; 0x525c <__vector_26+0x116>
    52e2:	2b df       	rcall	.-426    	; 0x513a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    52e4:	80 91 c5 09 	lds	r24, 0x09C5	; 0x8009c5 <twi_rxBufferIndex>
    52e8:	80 32       	cpi	r24, 0x20	; 32
    52ea:	30 f4       	brcc	.+12     	; 0x52f8 <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    52ec:	e0 91 c5 09 	lds	r30, 0x09C5	; 0x8009c5 <twi_rxBufferIndex>
    52f0:	f0 e0       	ldi	r31, 0x00	; 0
    52f2:	ea 53       	subi	r30, 0x3A	; 58
    52f4:	f6 4f       	sbci	r31, 0xF6	; 246
    52f6:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    52f8:	60 91 c5 09 	lds	r22, 0x09C5	; 0x8009c5 <twi_rxBufferIndex>
    52fc:	70 e0       	ldi	r23, 0x00	; 0
    52fe:	e0 91 2a 0a 	lds	r30, 0x0A2A	; 0x800a2a <twi_onSlaveReceive>
    5302:	f0 91 2b 0a 	lds	r31, 0x0A2B	; 0x800a2b <twi_onSlaveReceive+0x1>
    5306:	86 ec       	ldi	r24, 0xC6	; 198
    5308:	99 e0       	ldi	r25, 0x09	; 9
    530a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    530c:	10 92 c5 09 	sts	0x09C5, r1	; 0x8009c5 <twi_rxBufferIndex>
      break;
    5310:	35 c0       	rjmp	.+106    	; 0x537c <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5312:	84 e0       	ldi	r24, 0x04	; 4
    5314:	80 93 31 0a 	sts	0x0A31, r24	; 0x800a31 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5318:	10 92 e7 09 	sts	0x09E7, r1	; 0x8009e7 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    531c:	10 92 e6 09 	sts	0x09E6, r1	; 0x8009e6 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5320:	e0 91 2c 0a 	lds	r30, 0x0A2C	; 0x800a2c <twi_onSlaveTransmit>
    5324:	f0 91 2d 0a 	lds	r31, 0x0A2D	; 0x800a2d <twi_onSlaveTransmit+0x1>
    5328:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    532a:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <twi_txBufferLength>
    532e:	81 11       	cpse	r24, r1
    5330:	05 c0       	rjmp	.+10     	; 0x533c <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    5332:	81 e0       	ldi	r24, 0x01	; 1
    5334:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    5338:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    533c:	e0 91 e7 09 	lds	r30, 0x09E7	; 0x8009e7 <twi_txBufferIndex>
    5340:	81 e0       	ldi	r24, 0x01	; 1
    5342:	8e 0f       	add	r24, r30
    5344:	80 93 e7 09 	sts	0x09E7, r24	; 0x8009e7 <twi_txBufferIndex>
    5348:	f0 e0       	ldi	r31, 0x00	; 0
    534a:	e8 51       	subi	r30, 0x18	; 24
    534c:	f6 4f       	sbci	r31, 0xF6	; 246
    534e:	80 81       	ld	r24, Z
    5350:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5354:	90 91 e7 09 	lds	r25, 0x09E7	; 0x8009e7 <twi_txBufferIndex>
    5358:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <twi_txBufferLength>
    535c:	98 17       	cp	r25, r24
    535e:	08 f4       	brcc	.+2      	; 0x5362 <__vector_26+0x21c>
    5360:	7d cf       	rjmp	.-262    	; 0x525c <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5362:	85 e8       	ldi	r24, 0x85	; 133
    5364:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5368:	09 c0       	rjmp	.+18     	; 0x537c <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    536a:	85 ec       	ldi	r24, 0xC5	; 197
    536c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    5370:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <twi_state>
      break;
    5374:	03 c0       	rjmp	.+6      	; 0x537c <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5376:	10 92 c4 09 	sts	0x09C4, r1	; 0x8009c4 <twi_error>
      twi_stop();
    537a:	d5 de       	rcall	.-598    	; 0x5126 <twi_stop>
      break;
  }
}
    537c:	ff 91       	pop	r31
    537e:	ef 91       	pop	r30
    5380:	bf 91       	pop	r27
    5382:	af 91       	pop	r26
    5384:	9f 91       	pop	r25
    5386:	8f 91       	pop	r24
    5388:	7f 91       	pop	r23
    538a:	6f 91       	pop	r22
    538c:	5f 91       	pop	r21
    538e:	4f 91       	pop	r20
    5390:	3f 91       	pop	r19
    5392:	2f 91       	pop	r18
    5394:	0f 90       	pop	r0
    5396:	0b be       	out	0x3b, r0	; 59
    5398:	0f 90       	pop	r0
    539a:	0f be       	out	0x3f, r0	; 63
    539c:	0f 90       	pop	r0
    539e:	1f 90       	pop	r1
    53a0:	18 95       	reti

000053a2 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    53a2:	80 91 66 0a 	lds	r24, 0x0A66	; 0x800a66 <_ZN7TwoWire14rxBufferLengthE>
    53a6:	90 e0       	ldi	r25, 0x00	; 0
    53a8:	20 91 67 0a 	lds	r18, 0x0A67	; 0x800a67 <_ZN7TwoWire13rxBufferIndexE>
    53ac:	82 1b       	sub	r24, r18
    53ae:	91 09       	sbc	r25, r1
    53b0:	08 95       	ret

000053b2 <_ZN7TwoWire4readEv>:
    53b2:	90 91 67 0a 	lds	r25, 0x0A67	; 0x800a67 <_ZN7TwoWire13rxBufferIndexE>
    53b6:	80 91 66 0a 	lds	r24, 0x0A66	; 0x800a66 <_ZN7TwoWire14rxBufferLengthE>
    53ba:	98 17       	cp	r25, r24
    53bc:	50 f4       	brcc	.+20     	; 0x53d2 <_ZN7TwoWire4readEv+0x20>
    53be:	e9 2f       	mov	r30, r25
    53c0:	f0 e0       	ldi	r31, 0x00	; 0
    53c2:	e8 59       	subi	r30, 0x98	; 152
    53c4:	f5 4f       	sbci	r31, 0xF5	; 245
    53c6:	20 81       	ld	r18, Z
    53c8:	30 e0       	ldi	r19, 0x00	; 0
    53ca:	9f 5f       	subi	r25, 0xFF	; 255
    53cc:	90 93 67 0a 	sts	0x0A67, r25	; 0x800a67 <_ZN7TwoWire13rxBufferIndexE>
    53d0:	02 c0       	rjmp	.+4      	; 0x53d6 <_ZN7TwoWire4readEv+0x24>
    53d2:	2f ef       	ldi	r18, 0xFF	; 255
    53d4:	3f ef       	ldi	r19, 0xFF	; 255
    53d6:	c9 01       	movw	r24, r18
    53d8:	08 95       	ret

000053da <_ZN7TwoWire4peekEv>:
    53da:	e0 91 67 0a 	lds	r30, 0x0A67	; 0x800a67 <_ZN7TwoWire13rxBufferIndexE>
    53de:	80 91 66 0a 	lds	r24, 0x0A66	; 0x800a66 <_ZN7TwoWire14rxBufferLengthE>
    53e2:	e8 17       	cp	r30, r24
    53e4:	30 f4       	brcc	.+12     	; 0x53f2 <_ZN7TwoWire4peekEv+0x18>
    53e6:	f0 e0       	ldi	r31, 0x00	; 0
    53e8:	e8 59       	subi	r30, 0x98	; 152
    53ea:	f5 4f       	sbci	r31, 0xF5	; 245
    53ec:	80 81       	ld	r24, Z
    53ee:	90 e0       	ldi	r25, 0x00	; 0
    53f0:	08 95       	ret
    53f2:	8f ef       	ldi	r24, 0xFF	; 255
    53f4:	9f ef       	ldi	r25, 0xFF	; 255
    53f6:	08 95       	ret

000053f8 <_ZN7TwoWire5flushEv>:
    53f8:	08 95       	ret

000053fa <_ZN7TwoWire16onReceiveServiceEPhi>:
    53fa:	cf 93       	push	r28
    53fc:	df 93       	push	r29
    53fe:	ec 01       	movw	r28, r24
    5400:	e0 91 3e 0a 	lds	r30, 0x0A3E	; 0x800a3e <_ZN7TwoWire14user_onReceiveE>
    5404:	f0 91 3f 0a 	lds	r31, 0x0A3F	; 0x800a3f <_ZN7TwoWire14user_onReceiveE+0x1>
    5408:	30 97       	sbiw	r30, 0x00	; 0
    540a:	f1 f0       	breq	.+60     	; 0x5448 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    540c:	90 91 67 0a 	lds	r25, 0x0A67	; 0x800a67 <_ZN7TwoWire13rxBufferIndexE>
    5410:	80 91 66 0a 	lds	r24, 0x0A66	; 0x800a66 <_ZN7TwoWire14rxBufferLengthE>
    5414:	98 17       	cp	r25, r24
    5416:	c0 f0       	brcs	.+48     	; 0x5448 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	29 2f       	mov	r18, r25
    541c:	30 e0       	ldi	r19, 0x00	; 0
    541e:	26 17       	cp	r18, r22
    5420:	37 07       	cpc	r19, r23
    5422:	54 f4       	brge	.+20     	; 0x5438 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    5424:	de 01       	movw	r26, r28
    5426:	a2 0f       	add	r26, r18
    5428:	b3 1f       	adc	r27, r19
    542a:	4c 91       	ld	r20, X
    542c:	d9 01       	movw	r26, r18
    542e:	a8 59       	subi	r26, 0x98	; 152
    5430:	b5 4f       	sbci	r27, 0xF5	; 245
    5432:	4c 93       	st	X, r20
    5434:	9f 5f       	subi	r25, 0xFF	; 255
    5436:	f1 cf       	rjmp	.-30     	; 0x541a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    5438:	10 92 67 0a 	sts	0x0A67, r1	; 0x800a67 <_ZN7TwoWire13rxBufferIndexE>
    543c:	60 93 66 0a 	sts	0x0A66, r22	; 0x800a66 <_ZN7TwoWire14rxBufferLengthE>
    5440:	cb 01       	movw	r24, r22
    5442:	df 91       	pop	r29
    5444:	cf 91       	pop	r28
    5446:	09 94       	ijmp
    5448:	df 91       	pop	r29
    544a:	cf 91       	pop	r28
    544c:	08 95       	ret

0000544e <_ZN7TwoWire16onRequestServiceEv>:
    544e:	e0 91 40 0a 	lds	r30, 0x0A40	; 0x800a40 <_ZN7TwoWire14user_onRequestE>
    5452:	f0 91 41 0a 	lds	r31, 0x0A41	; 0x800a41 <_ZN7TwoWire14user_onRequestE+0x1>
    5456:	30 97       	sbiw	r30, 0x00	; 0
    5458:	29 f0       	breq	.+10     	; 0x5464 <_ZN7TwoWire16onRequestServiceEv+0x16>
    545a:	10 92 44 0a 	sts	0x0A44, r1	; 0x800a44 <_ZN7TwoWire13txBufferIndexE>
    545e:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <_ZN7TwoWire14txBufferLengthE>
    5462:	09 94       	ijmp
    5464:	08 95       	ret

00005466 <_ZN7TwoWire5writeEPKhj>:
    5466:	cf 92       	push	r12
    5468:	df 92       	push	r13
    546a:	ef 92       	push	r14
    546c:	ff 92       	push	r15
    546e:	0f 93       	push	r16
    5470:	1f 93       	push	r17
    5472:	cf 93       	push	r28
    5474:	df 93       	push	r29
    5476:	7c 01       	movw	r14, r24
    5478:	cb 01       	movw	r24, r22
    547a:	8a 01       	movw	r16, r20
    547c:	20 91 42 0a 	lds	r18, 0x0A42	; 0x800a42 <_ZN7TwoWire12transmittingE>
    5480:	22 23       	and	r18, r18
    5482:	89 f0       	breq	.+34     	; 0x54a6 <_ZN7TwoWire5writeEPKhj+0x40>
    5484:	eb 01       	movw	r28, r22
    5486:	6b 01       	movw	r12, r22
    5488:	c4 0e       	add	r12, r20
    548a:	d5 1e       	adc	r13, r21
    548c:	cc 15       	cp	r28, r12
    548e:	dd 05       	cpc	r29, r13
    5490:	61 f0       	breq	.+24     	; 0x54aa <_ZN7TwoWire5writeEPKhj+0x44>
    5492:	69 91       	ld	r22, Y+
    5494:	d7 01       	movw	r26, r14
    5496:	ed 91       	ld	r30, X+
    5498:	fc 91       	ld	r31, X
    549a:	01 90       	ld	r0, Z+
    549c:	f0 81       	ld	r31, Z
    549e:	e0 2d       	mov	r30, r0
    54a0:	c7 01       	movw	r24, r14
    54a2:	09 95       	icall
    54a4:	f3 cf       	rjmp	.-26     	; 0x548c <_ZN7TwoWire5writeEPKhj+0x26>
    54a6:	64 2f       	mov	r22, r20
    54a8:	0c de       	rcall	.-1000   	; 0x50c2 <twi_transmit>
    54aa:	c8 01       	movw	r24, r16
    54ac:	df 91       	pop	r29
    54ae:	cf 91       	pop	r28
    54b0:	1f 91       	pop	r17
    54b2:	0f 91       	pop	r16
    54b4:	ff 90       	pop	r15
    54b6:	ef 90       	pop	r14
    54b8:	df 90       	pop	r13
    54ba:	cf 90       	pop	r12
    54bc:	08 95       	ret

000054be <_ZN7TwoWire5writeEh>:
    54be:	cf 93       	push	r28
    54c0:	df 93       	push	r29
    54c2:	1f 92       	push	r1
    54c4:	cd b7       	in	r28, 0x3d	; 61
    54c6:	de b7       	in	r29, 0x3e	; 62
    54c8:	69 83       	std	Y+1, r22	; 0x01
    54ca:	20 91 42 0a 	lds	r18, 0x0A42	; 0x800a42 <_ZN7TwoWire12transmittingE>
    54ce:	22 23       	and	r18, r18
    54d0:	d1 f0       	breq	.+52     	; 0x5506 <_ZN7TwoWire5writeEh+0x48>
    54d2:	20 91 43 0a 	lds	r18, 0x0A43	; 0x800a43 <_ZN7TwoWire14txBufferLengthE>
    54d6:	20 32       	cpi	r18, 0x20	; 32
    54d8:	40 f0       	brcs	.+16     	; 0x54ea <_ZN7TwoWire5writeEh+0x2c>
    54da:	21 e0       	ldi	r18, 0x01	; 1
    54dc:	30 e0       	ldi	r19, 0x00	; 0
    54de:	fc 01       	movw	r30, r24
    54e0:	33 83       	std	Z+3, r19	; 0x03
    54e2:	22 83       	std	Z+2, r18	; 0x02
    54e4:	80 e0       	ldi	r24, 0x00	; 0
    54e6:	90 e0       	ldi	r25, 0x00	; 0
    54e8:	14 c0       	rjmp	.+40     	; 0x5512 <_ZN7TwoWire5writeEh+0x54>
    54ea:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <_ZN7TwoWire13txBufferIndexE>
    54ee:	e8 2f       	mov	r30, r24
    54f0:	f0 e0       	ldi	r31, 0x00	; 0
    54f2:	eb 5b       	subi	r30, 0xBB	; 187
    54f4:	f5 4f       	sbci	r31, 0xF5	; 245
    54f6:	99 81       	ldd	r25, Y+1	; 0x01
    54f8:	90 83       	st	Z, r25
    54fa:	8f 5f       	subi	r24, 0xFF	; 255
    54fc:	80 93 44 0a 	sts	0x0A44, r24	; 0x800a44 <_ZN7TwoWire13txBufferIndexE>
    5500:	80 93 43 0a 	sts	0x0A43, r24	; 0x800a43 <_ZN7TwoWire14txBufferLengthE>
    5504:	04 c0       	rjmp	.+8      	; 0x550e <_ZN7TwoWire5writeEh+0x50>
    5506:	61 e0       	ldi	r22, 0x01	; 1
    5508:	ce 01       	movw	r24, r28
    550a:	01 96       	adiw	r24, 0x01	; 1
    550c:	da dd       	rcall	.-1100   	; 0x50c2 <twi_transmit>
    550e:	81 e0       	ldi	r24, 0x01	; 1
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	0f 90       	pop	r0
    5514:	df 91       	pop	r29
    5516:	cf 91       	pop	r28
    5518:	08 95       	ret

0000551a <_ZN7TwoWireC1Ev>:
    551a:	fc 01       	movw	r30, r24
    551c:	13 82       	std	Z+3, r1	; 0x03
    551e:	12 82       	std	Z+2, r1	; 0x02
    5520:	88 ee       	ldi	r24, 0xE8	; 232
    5522:	93 e0       	ldi	r25, 0x03	; 3
    5524:	a0 e0       	ldi	r26, 0x00	; 0
    5526:	b0 e0       	ldi	r27, 0x00	; 0
    5528:	84 83       	std	Z+4, r24	; 0x04
    552a:	95 83       	std	Z+5, r25	; 0x05
    552c:	a6 83       	std	Z+6, r26	; 0x06
    552e:	b7 83       	std	Z+7, r27	; 0x07
    5530:	85 ee       	ldi	r24, 0xE5	; 229
    5532:	97 e0       	ldi	r25, 0x07	; 7
    5534:	91 83       	std	Z+1, r25	; 0x01
    5536:	80 83       	st	Z, r24
    5538:	08 95       	ret

0000553a <_ZN7TwoWire5beginEv>:
    553a:	10 92 67 0a 	sts	0x0A67, r1	; 0x800a67 <_ZN7TwoWire13rxBufferIndexE>
    553e:	10 92 66 0a 	sts	0x0A66, r1	; 0x800a66 <_ZN7TwoWire14rxBufferLengthE>
    5542:	10 92 44 0a 	sts	0x0A44, r1	; 0x800a44 <_ZN7TwoWire13txBufferIndexE>
    5546:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <_ZN7TwoWire14txBufferLengthE>
    554a:	de dc       	rcall	.-1604   	; 0x4f08 <twi_init>
    554c:	87 e2       	ldi	r24, 0x27	; 39
    554e:	9a e2       	ldi	r25, 0x2A	; 42
    5550:	e5 dd       	rcall	.-1078   	; 0x511c <twi_attachSlaveTxEvent>
    5552:	8d ef       	ldi	r24, 0xFD	; 253
    5554:	99 e2       	ldi	r25, 0x29	; 41
    5556:	dd cd       	rjmp	.-1094   	; 0x5112 <twi_attachSlaveRxEvent>

00005558 <_ZN7TwoWire3endEv>:
    5558:	f5 cc       	rjmp	.-1558   	; 0x4f44 <twi_disable>

0000555a <_ZN7TwoWire8setClockEm>:
    555a:	cb 01       	movw	r24, r22
    555c:	ba 01       	movw	r22, r20
    555e:	ff cc       	rjmp	.-1538   	; 0x4f5e <twi_setFrequency>

00005560 <_ZN7TwoWire17beginTransmissionEh>:
    5560:	81 e0       	ldi	r24, 0x01	; 1
    5562:	80 93 42 0a 	sts	0x0A42, r24	; 0x800a42 <_ZN7TwoWire12transmittingE>
    5566:	60 93 65 0a 	sts	0x0A65, r22	; 0x800a65 <_ZN7TwoWire9txAddressE>
    556a:	10 92 44 0a 	sts	0x0A44, r1	; 0x800a44 <_ZN7TwoWire13txBufferIndexE>
    556e:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <_ZN7TwoWire14txBufferLengthE>
    5572:	08 95       	ret

00005574 <_ZN7TwoWire17beginTransmissionEi>:
    5574:	f5 cf       	rjmp	.-22     	; 0x5560 <_ZN7TwoWire17beginTransmissionEh>

00005576 <_ZN7TwoWire15endTransmissionEh>:
    5576:	0f 93       	push	r16
    5578:	06 2f       	mov	r16, r22
    557a:	21 e0       	ldi	r18, 0x01	; 1
    557c:	40 91 43 0a 	lds	r20, 0x0A43	; 0x800a43 <_ZN7TwoWire14txBufferLengthE>
    5580:	65 e4       	ldi	r22, 0x45	; 69
    5582:	7a e0       	ldi	r23, 0x0A	; 10
    5584:	80 91 65 0a 	lds	r24, 0x0A65	; 0x800a65 <_ZN7TwoWire9txAddressE>
    5588:	46 dd       	rcall	.-1396   	; 0x5016 <twi_writeTo>
    558a:	10 92 44 0a 	sts	0x0A44, r1	; 0x800a44 <_ZN7TwoWire13txBufferIndexE>
    558e:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <_ZN7TwoWire14txBufferLengthE>
    5592:	10 92 42 0a 	sts	0x0A42, r1	; 0x800a42 <_ZN7TwoWire12transmittingE>
    5596:	0f 91       	pop	r16
    5598:	08 95       	ret

0000559a <_ZN7TwoWire11requestFromEhhmhh>:
    559a:	4f 92       	push	r4
    559c:	5f 92       	push	r5
    559e:	6f 92       	push	r6
    55a0:	7f 92       	push	r7
    55a2:	af 92       	push	r10
    55a4:	bf 92       	push	r11
    55a6:	cf 92       	push	r12
    55a8:	ef 92       	push	r14
    55aa:	ff 92       	push	r15
    55ac:	0f 93       	push	r16
    55ae:	1f 93       	push	r17
    55b0:	cf 93       	push	r28
    55b2:	df 93       	push	r29
    55b4:	5c 01       	movw	r10, r24
    55b6:	f6 2e       	mov	r15, r22
    55b8:	d4 2f       	mov	r29, r20
    55ba:	28 01       	movw	r4, r16
    55bc:	39 01       	movw	r6, r18
    55be:	ee 20       	and	r14, r14
    55c0:	11 f1       	breq	.+68     	; 0x5606 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    55c2:	ce df       	rcall	.-100    	; 0x5560 <_ZN7TwoWire17beginTransmissionEh>
    55c4:	ce 2d       	mov	r28, r14
    55c6:	c4 30       	cpi	r28, 0x04	; 4
    55c8:	08 f0       	brcs	.+2      	; 0x55cc <_ZN7TwoWire11requestFromEhhmhh+0x32>
    55ca:	c3 e0       	ldi	r28, 0x03	; 3
    55cc:	c1 50       	subi	r28, 0x01	; 1
    55ce:	c0 f0       	brcs	.+48     	; 0x5600 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    55d0:	28 e0       	ldi	r18, 0x08	; 8
    55d2:	c2 9f       	mul	r28, r18
    55d4:	c0 01       	movw	r24, r0
    55d6:	11 24       	eor	r1, r1
    55d8:	a3 01       	movw	r20, r6
    55da:	92 01       	movw	r18, r4
    55dc:	04 c0       	rjmp	.+8      	; 0x55e6 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    55de:	56 95       	lsr	r21
    55e0:	47 95       	ror	r20
    55e2:	37 95       	ror	r19
    55e4:	27 95       	ror	r18
    55e6:	8a 95       	dec	r24
    55e8:	d2 f7       	brpl	.-12     	; 0x55de <_ZN7TwoWire11requestFromEhhmhh+0x44>
    55ea:	ca 01       	movw	r24, r20
    55ec:	b9 01       	movw	r22, r18
    55ee:	d5 01       	movw	r26, r10
    55f0:	ed 91       	ld	r30, X+
    55f2:	fc 91       	ld	r31, X
    55f4:	01 90       	ld	r0, Z+
    55f6:	f0 81       	ld	r31, Z
    55f8:	e0 2d       	mov	r30, r0
    55fa:	c5 01       	movw	r24, r10
    55fc:	09 95       	icall
    55fe:	e6 cf       	rjmp	.-52     	; 0x55cc <_ZN7TwoWire11requestFromEhhmhh+0x32>
    5600:	60 e0       	ldi	r22, 0x00	; 0
    5602:	c5 01       	movw	r24, r10
    5604:	b8 df       	rcall	.-144    	; 0x5576 <_ZN7TwoWire15endTransmissionEh>
    5606:	4d 2f       	mov	r20, r29
    5608:	d1 32       	cpi	r29, 0x21	; 33
    560a:	08 f0       	brcs	.+2      	; 0x560e <_ZN7TwoWire11requestFromEhhmhh+0x74>
    560c:	40 e2       	ldi	r20, 0x20	; 32
    560e:	2c 2d       	mov	r18, r12
    5610:	68 e6       	ldi	r22, 0x68	; 104
    5612:	7a e0       	ldi	r23, 0x0A	; 10
    5614:	8f 2d       	mov	r24, r15
    5616:	b7 dc       	rcall	.-1682   	; 0x4f86 <twi_readFrom>
    5618:	10 92 67 0a 	sts	0x0A67, r1	; 0x800a67 <_ZN7TwoWire13rxBufferIndexE>
    561c:	80 93 66 0a 	sts	0x0A66, r24	; 0x800a66 <_ZN7TwoWire14rxBufferLengthE>
    5620:	df 91       	pop	r29
    5622:	cf 91       	pop	r28
    5624:	1f 91       	pop	r17
    5626:	0f 91       	pop	r16
    5628:	ff 90       	pop	r15
    562a:	ef 90       	pop	r14
    562c:	cf 90       	pop	r12
    562e:	bf 90       	pop	r11
    5630:	af 90       	pop	r10
    5632:	7f 90       	pop	r7
    5634:	6f 90       	pop	r6
    5636:	5f 90       	pop	r5
    5638:	4f 90       	pop	r4
    563a:	08 95       	ret

0000563c <_ZN7TwoWire11requestFromEhhh>:
    563c:	cf 92       	push	r12
    563e:	ef 92       	push	r14
    5640:	0f 93       	push	r16
    5642:	1f 93       	push	r17
    5644:	c2 2e       	mov	r12, r18
    5646:	e1 2c       	mov	r14, r1
    5648:	00 e0       	ldi	r16, 0x00	; 0
    564a:	10 e0       	ldi	r17, 0x00	; 0
    564c:	98 01       	movw	r18, r16
    564e:	a5 df       	rcall	.-182    	; 0x559a <_ZN7TwoWire11requestFromEhhmhh>
    5650:	1f 91       	pop	r17
    5652:	0f 91       	pop	r16
    5654:	ef 90       	pop	r14
    5656:	cf 90       	pop	r12
    5658:	08 95       	ret

0000565a <_ZN7TwoWire11requestFromEhh>:
    565a:	21 e0       	ldi	r18, 0x01	; 1
    565c:	ef cf       	rjmp	.-34     	; 0x563c <_ZN7TwoWire11requestFromEhhh>

0000565e <_ZN7TwoWire11requestFromEii>:
    565e:	21 e0       	ldi	r18, 0x01	; 1
    5660:	ed cf       	rjmp	.-38     	; 0x563c <_ZN7TwoWire11requestFromEhhh>

00005662 <_ZN7TwoWire15endTransmissionEv>:
    5662:	61 e0       	ldi	r22, 0x01	; 1
    5664:	88 cf       	rjmp	.-240    	; 0x5576 <_ZN7TwoWire15endTransmissionEh>

00005666 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    5666:	82 e3       	ldi	r24, 0x32	; 50
    5668:	9a e0       	ldi	r25, 0x0A	; 10
    566a:	57 cf       	rjmp	.-338    	; 0x551a <_ZN7TwoWireC1Ev>

0000566c <__cmpsf2>:
    566c:	a8 d0       	rcall	.+336    	; 0x57be <__fp_cmp>
    566e:	08 f4       	brcc	.+2      	; 0x5672 <__cmpsf2+0x6>
    5670:	81 e0       	ldi	r24, 0x01	; 1
    5672:	08 95       	ret

00005674 <__divsf3>:
    5674:	0c d0       	rcall	.+24     	; 0x568e <__divsf3x>
    5676:	de c0       	rjmp	.+444    	; 0x5834 <__fp_round>
    5678:	d6 d0       	rcall	.+428    	; 0x5826 <__fp_pscB>
    567a:	40 f0       	brcs	.+16     	; 0x568c <__divsf3+0x18>
    567c:	cd d0       	rcall	.+410    	; 0x5818 <__fp_pscA>
    567e:	30 f0       	brcs	.+12     	; 0x568c <__divsf3+0x18>
    5680:	21 f4       	brne	.+8      	; 0x568a <__divsf3+0x16>
    5682:	5f 3f       	cpi	r21, 0xFF	; 255
    5684:	19 f0       	breq	.+6      	; 0x568c <__divsf3+0x18>
    5686:	bf c0       	rjmp	.+382    	; 0x5806 <__fp_inf>
    5688:	51 11       	cpse	r21, r1
    568a:	08 c1       	rjmp	.+528    	; 0x589c <__fp_szero>
    568c:	c2 c0       	rjmp	.+388    	; 0x5812 <__fp_nan>

0000568e <__divsf3x>:
    568e:	e3 d0       	rcall	.+454    	; 0x5856 <__fp_split3>
    5690:	98 f3       	brcs	.-26     	; 0x5678 <__divsf3+0x4>

00005692 <__divsf3_pse>:
    5692:	99 23       	and	r25, r25
    5694:	c9 f3       	breq	.-14     	; 0x5688 <__divsf3+0x14>
    5696:	55 23       	and	r21, r21
    5698:	b1 f3       	breq	.-20     	; 0x5686 <__divsf3+0x12>
    569a:	95 1b       	sub	r25, r21
    569c:	55 0b       	sbc	r21, r21
    569e:	bb 27       	eor	r27, r27
    56a0:	aa 27       	eor	r26, r26
    56a2:	62 17       	cp	r22, r18
    56a4:	73 07       	cpc	r23, r19
    56a6:	84 07       	cpc	r24, r20
    56a8:	38 f0       	brcs	.+14     	; 0x56b8 <__divsf3_pse+0x26>
    56aa:	9f 5f       	subi	r25, 0xFF	; 255
    56ac:	5f 4f       	sbci	r21, 0xFF	; 255
    56ae:	22 0f       	add	r18, r18
    56b0:	33 1f       	adc	r19, r19
    56b2:	44 1f       	adc	r20, r20
    56b4:	aa 1f       	adc	r26, r26
    56b6:	a9 f3       	breq	.-22     	; 0x56a2 <__divsf3_pse+0x10>
    56b8:	33 d0       	rcall	.+102    	; 0x5720 <__divsf3_pse+0x8e>
    56ba:	0e 2e       	mov	r0, r30
    56bc:	3a f0       	brmi	.+14     	; 0x56cc <__divsf3_pse+0x3a>
    56be:	e0 e8       	ldi	r30, 0x80	; 128
    56c0:	30 d0       	rcall	.+96     	; 0x5722 <__divsf3_pse+0x90>
    56c2:	91 50       	subi	r25, 0x01	; 1
    56c4:	50 40       	sbci	r21, 0x00	; 0
    56c6:	e6 95       	lsr	r30
    56c8:	00 1c       	adc	r0, r0
    56ca:	ca f7       	brpl	.-14     	; 0x56be <__divsf3_pse+0x2c>
    56cc:	29 d0       	rcall	.+82     	; 0x5720 <__divsf3_pse+0x8e>
    56ce:	fe 2f       	mov	r31, r30
    56d0:	27 d0       	rcall	.+78     	; 0x5720 <__divsf3_pse+0x8e>
    56d2:	66 0f       	add	r22, r22
    56d4:	77 1f       	adc	r23, r23
    56d6:	88 1f       	adc	r24, r24
    56d8:	bb 1f       	adc	r27, r27
    56da:	26 17       	cp	r18, r22
    56dc:	37 07       	cpc	r19, r23
    56de:	48 07       	cpc	r20, r24
    56e0:	ab 07       	cpc	r26, r27
    56e2:	b0 e8       	ldi	r27, 0x80	; 128
    56e4:	09 f0       	breq	.+2      	; 0x56e8 <__divsf3_pse+0x56>
    56e6:	bb 0b       	sbc	r27, r27
    56e8:	80 2d       	mov	r24, r0
    56ea:	bf 01       	movw	r22, r30
    56ec:	ff 27       	eor	r31, r31
    56ee:	93 58       	subi	r25, 0x83	; 131
    56f0:	5f 4f       	sbci	r21, 0xFF	; 255
    56f2:	2a f0       	brmi	.+10     	; 0x56fe <__divsf3_pse+0x6c>
    56f4:	9e 3f       	cpi	r25, 0xFE	; 254
    56f6:	51 05       	cpc	r21, r1
    56f8:	68 f0       	brcs	.+26     	; 0x5714 <__divsf3_pse+0x82>
    56fa:	85 c0       	rjmp	.+266    	; 0x5806 <__fp_inf>
    56fc:	cf c0       	rjmp	.+414    	; 0x589c <__fp_szero>
    56fe:	5f 3f       	cpi	r21, 0xFF	; 255
    5700:	ec f3       	brlt	.-6      	; 0x56fc <__divsf3_pse+0x6a>
    5702:	98 3e       	cpi	r25, 0xE8	; 232
    5704:	dc f3       	brlt	.-10     	; 0x56fc <__divsf3_pse+0x6a>
    5706:	86 95       	lsr	r24
    5708:	77 95       	ror	r23
    570a:	67 95       	ror	r22
    570c:	b7 95       	ror	r27
    570e:	f7 95       	ror	r31
    5710:	9f 5f       	subi	r25, 0xFF	; 255
    5712:	c9 f7       	brne	.-14     	; 0x5706 <__divsf3_pse+0x74>
    5714:	88 0f       	add	r24, r24
    5716:	91 1d       	adc	r25, r1
    5718:	96 95       	lsr	r25
    571a:	87 95       	ror	r24
    571c:	97 f9       	bld	r25, 7
    571e:	08 95       	ret
    5720:	e1 e0       	ldi	r30, 0x01	; 1
    5722:	66 0f       	add	r22, r22
    5724:	77 1f       	adc	r23, r23
    5726:	88 1f       	adc	r24, r24
    5728:	bb 1f       	adc	r27, r27
    572a:	62 17       	cp	r22, r18
    572c:	73 07       	cpc	r23, r19
    572e:	84 07       	cpc	r24, r20
    5730:	ba 07       	cpc	r27, r26
    5732:	20 f0       	brcs	.+8      	; 0x573c <__divsf3_pse+0xaa>
    5734:	62 1b       	sub	r22, r18
    5736:	73 0b       	sbc	r23, r19
    5738:	84 0b       	sbc	r24, r20
    573a:	ba 0b       	sbc	r27, r26
    573c:	ee 1f       	adc	r30, r30
    573e:	88 f7       	brcc	.-30     	; 0x5722 <__divsf3_pse+0x90>
    5740:	e0 95       	com	r30
    5742:	08 95       	ret

00005744 <__floatunsisf>:
    5744:	e8 94       	clt
    5746:	09 c0       	rjmp	.+18     	; 0x575a <__floatsisf+0x12>

00005748 <__floatsisf>:
    5748:	97 fb       	bst	r25, 7
    574a:	3e f4       	brtc	.+14     	; 0x575a <__floatsisf+0x12>
    574c:	90 95       	com	r25
    574e:	80 95       	com	r24
    5750:	70 95       	com	r23
    5752:	61 95       	neg	r22
    5754:	7f 4f       	sbci	r23, 0xFF	; 255
    5756:	8f 4f       	sbci	r24, 0xFF	; 255
    5758:	9f 4f       	sbci	r25, 0xFF	; 255
    575a:	99 23       	and	r25, r25
    575c:	a9 f0       	breq	.+42     	; 0x5788 <__floatsisf+0x40>
    575e:	f9 2f       	mov	r31, r25
    5760:	96 e9       	ldi	r25, 0x96	; 150
    5762:	bb 27       	eor	r27, r27
    5764:	93 95       	inc	r25
    5766:	f6 95       	lsr	r31
    5768:	87 95       	ror	r24
    576a:	77 95       	ror	r23
    576c:	67 95       	ror	r22
    576e:	b7 95       	ror	r27
    5770:	f1 11       	cpse	r31, r1
    5772:	f8 cf       	rjmp	.-16     	; 0x5764 <__floatsisf+0x1c>
    5774:	fa f4       	brpl	.+62     	; 0x57b4 <__floatsisf+0x6c>
    5776:	bb 0f       	add	r27, r27
    5778:	11 f4       	brne	.+4      	; 0x577e <__floatsisf+0x36>
    577a:	60 ff       	sbrs	r22, 0
    577c:	1b c0       	rjmp	.+54     	; 0x57b4 <__floatsisf+0x6c>
    577e:	6f 5f       	subi	r22, 0xFF	; 255
    5780:	7f 4f       	sbci	r23, 0xFF	; 255
    5782:	8f 4f       	sbci	r24, 0xFF	; 255
    5784:	9f 4f       	sbci	r25, 0xFF	; 255
    5786:	16 c0       	rjmp	.+44     	; 0x57b4 <__floatsisf+0x6c>
    5788:	88 23       	and	r24, r24
    578a:	11 f0       	breq	.+4      	; 0x5790 <__floatsisf+0x48>
    578c:	96 e9       	ldi	r25, 0x96	; 150
    578e:	11 c0       	rjmp	.+34     	; 0x57b2 <__floatsisf+0x6a>
    5790:	77 23       	and	r23, r23
    5792:	21 f0       	breq	.+8      	; 0x579c <__floatsisf+0x54>
    5794:	9e e8       	ldi	r25, 0x8E	; 142
    5796:	87 2f       	mov	r24, r23
    5798:	76 2f       	mov	r23, r22
    579a:	05 c0       	rjmp	.+10     	; 0x57a6 <__floatsisf+0x5e>
    579c:	66 23       	and	r22, r22
    579e:	71 f0       	breq	.+28     	; 0x57bc <__floatsisf+0x74>
    57a0:	96 e8       	ldi	r25, 0x86	; 134
    57a2:	86 2f       	mov	r24, r22
    57a4:	70 e0       	ldi	r23, 0x00	; 0
    57a6:	60 e0       	ldi	r22, 0x00	; 0
    57a8:	2a f0       	brmi	.+10     	; 0x57b4 <__floatsisf+0x6c>
    57aa:	9a 95       	dec	r25
    57ac:	66 0f       	add	r22, r22
    57ae:	77 1f       	adc	r23, r23
    57b0:	88 1f       	adc	r24, r24
    57b2:	da f7       	brpl	.-10     	; 0x57aa <__floatsisf+0x62>
    57b4:	88 0f       	add	r24, r24
    57b6:	96 95       	lsr	r25
    57b8:	87 95       	ror	r24
    57ba:	97 f9       	bld	r25, 7
    57bc:	08 95       	ret

000057be <__fp_cmp>:
    57be:	99 0f       	add	r25, r25
    57c0:	00 08       	sbc	r0, r0
    57c2:	55 0f       	add	r21, r21
    57c4:	aa 0b       	sbc	r26, r26
    57c6:	e0 e8       	ldi	r30, 0x80	; 128
    57c8:	fe ef       	ldi	r31, 0xFE	; 254
    57ca:	16 16       	cp	r1, r22
    57cc:	17 06       	cpc	r1, r23
    57ce:	e8 07       	cpc	r30, r24
    57d0:	f9 07       	cpc	r31, r25
    57d2:	c0 f0       	brcs	.+48     	; 0x5804 <__fp_cmp+0x46>
    57d4:	12 16       	cp	r1, r18
    57d6:	13 06       	cpc	r1, r19
    57d8:	e4 07       	cpc	r30, r20
    57da:	f5 07       	cpc	r31, r21
    57dc:	98 f0       	brcs	.+38     	; 0x5804 <__fp_cmp+0x46>
    57de:	62 1b       	sub	r22, r18
    57e0:	73 0b       	sbc	r23, r19
    57e2:	84 0b       	sbc	r24, r20
    57e4:	95 0b       	sbc	r25, r21
    57e6:	39 f4       	brne	.+14     	; 0x57f6 <__fp_cmp+0x38>
    57e8:	0a 26       	eor	r0, r26
    57ea:	61 f0       	breq	.+24     	; 0x5804 <__fp_cmp+0x46>
    57ec:	23 2b       	or	r18, r19
    57ee:	24 2b       	or	r18, r20
    57f0:	25 2b       	or	r18, r21
    57f2:	21 f4       	brne	.+8      	; 0x57fc <__fp_cmp+0x3e>
    57f4:	08 95       	ret
    57f6:	0a 26       	eor	r0, r26
    57f8:	09 f4       	brne	.+2      	; 0x57fc <__fp_cmp+0x3e>
    57fa:	a1 40       	sbci	r26, 0x01	; 1
    57fc:	a6 95       	lsr	r26
    57fe:	8f ef       	ldi	r24, 0xFF	; 255
    5800:	81 1d       	adc	r24, r1
    5802:	81 1d       	adc	r24, r1
    5804:	08 95       	ret

00005806 <__fp_inf>:
    5806:	97 f9       	bld	r25, 7
    5808:	9f 67       	ori	r25, 0x7F	; 127
    580a:	80 e8       	ldi	r24, 0x80	; 128
    580c:	70 e0       	ldi	r23, 0x00	; 0
    580e:	60 e0       	ldi	r22, 0x00	; 0
    5810:	08 95       	ret

00005812 <__fp_nan>:
    5812:	9f ef       	ldi	r25, 0xFF	; 255
    5814:	80 ec       	ldi	r24, 0xC0	; 192
    5816:	08 95       	ret

00005818 <__fp_pscA>:
    5818:	00 24       	eor	r0, r0
    581a:	0a 94       	dec	r0
    581c:	16 16       	cp	r1, r22
    581e:	17 06       	cpc	r1, r23
    5820:	18 06       	cpc	r1, r24
    5822:	09 06       	cpc	r0, r25
    5824:	08 95       	ret

00005826 <__fp_pscB>:
    5826:	00 24       	eor	r0, r0
    5828:	0a 94       	dec	r0
    582a:	12 16       	cp	r1, r18
    582c:	13 06       	cpc	r1, r19
    582e:	14 06       	cpc	r1, r20
    5830:	05 06       	cpc	r0, r21
    5832:	08 95       	ret

00005834 <__fp_round>:
    5834:	09 2e       	mov	r0, r25
    5836:	03 94       	inc	r0
    5838:	00 0c       	add	r0, r0
    583a:	11 f4       	brne	.+4      	; 0x5840 <__fp_round+0xc>
    583c:	88 23       	and	r24, r24
    583e:	52 f0       	brmi	.+20     	; 0x5854 <__fp_round+0x20>
    5840:	bb 0f       	add	r27, r27
    5842:	40 f4       	brcc	.+16     	; 0x5854 <__fp_round+0x20>
    5844:	bf 2b       	or	r27, r31
    5846:	11 f4       	brne	.+4      	; 0x584c <__fp_round+0x18>
    5848:	60 ff       	sbrs	r22, 0
    584a:	04 c0       	rjmp	.+8      	; 0x5854 <__fp_round+0x20>
    584c:	6f 5f       	subi	r22, 0xFF	; 255
    584e:	7f 4f       	sbci	r23, 0xFF	; 255
    5850:	8f 4f       	sbci	r24, 0xFF	; 255
    5852:	9f 4f       	sbci	r25, 0xFF	; 255
    5854:	08 95       	ret

00005856 <__fp_split3>:
    5856:	57 fd       	sbrc	r21, 7
    5858:	90 58       	subi	r25, 0x80	; 128
    585a:	44 0f       	add	r20, r20
    585c:	55 1f       	adc	r21, r21
    585e:	59 f0       	breq	.+22     	; 0x5876 <__fp_splitA+0x10>
    5860:	5f 3f       	cpi	r21, 0xFF	; 255
    5862:	71 f0       	breq	.+28     	; 0x5880 <__fp_splitA+0x1a>
    5864:	47 95       	ror	r20

00005866 <__fp_splitA>:
    5866:	88 0f       	add	r24, r24
    5868:	97 fb       	bst	r25, 7
    586a:	99 1f       	adc	r25, r25
    586c:	61 f0       	breq	.+24     	; 0x5886 <__fp_splitA+0x20>
    586e:	9f 3f       	cpi	r25, 0xFF	; 255
    5870:	79 f0       	breq	.+30     	; 0x5890 <__fp_splitA+0x2a>
    5872:	87 95       	ror	r24
    5874:	08 95       	ret
    5876:	12 16       	cp	r1, r18
    5878:	13 06       	cpc	r1, r19
    587a:	14 06       	cpc	r1, r20
    587c:	55 1f       	adc	r21, r21
    587e:	f2 cf       	rjmp	.-28     	; 0x5864 <__fp_split3+0xe>
    5880:	46 95       	lsr	r20
    5882:	f1 df       	rcall	.-30     	; 0x5866 <__fp_splitA>
    5884:	08 c0       	rjmp	.+16     	; 0x5896 <__fp_splitA+0x30>
    5886:	16 16       	cp	r1, r22
    5888:	17 06       	cpc	r1, r23
    588a:	18 06       	cpc	r1, r24
    588c:	99 1f       	adc	r25, r25
    588e:	f1 cf       	rjmp	.-30     	; 0x5872 <__fp_splitA+0xc>
    5890:	86 95       	lsr	r24
    5892:	71 05       	cpc	r23, r1
    5894:	61 05       	cpc	r22, r1
    5896:	08 94       	sec
    5898:	08 95       	ret

0000589a <__fp_zero>:
    589a:	e8 94       	clt

0000589c <__fp_szero>:
    589c:	bb 27       	eor	r27, r27
    589e:	66 27       	eor	r22, r22
    58a0:	77 27       	eor	r23, r23
    58a2:	cb 01       	movw	r24, r22
    58a4:	97 f9       	bld	r25, 7
    58a6:	08 95       	ret

000058a8 <__cxa_pure_virtual>:
    58a8:	0e 94 36 36 	call	0x6c6c	; 0x6c6c <abort>

000058ac <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    58ac:	1f 92       	push	r1
    58ae:	0f 92       	push	r0
    58b0:	0f b6       	in	r0, 0x3f	; 63
    58b2:	0f 92       	push	r0
    58b4:	11 24       	eor	r1, r1
    58b6:	2f 93       	push	r18
    58b8:	8f 93       	push	r24
    58ba:	9f 93       	push	r25
    58bc:	ef 93       	push	r30
    58be:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    58c0:	e0 91 98 0a 	lds	r30, 0x0A98	; 0x800a98 <Serial+0x10>
    58c4:	f0 91 99 0a 	lds	r31, 0x0A99	; 0x800a99 <Serial+0x11>
    58c8:	80 81       	ld	r24, Z
    58ca:	e0 91 9e 0a 	lds	r30, 0x0A9E	; 0x800a9e <Serial+0x16>
    58ce:	f0 91 9f 0a 	lds	r31, 0x0A9F	; 0x800a9f <Serial+0x17>
    58d2:	82 fd       	sbrc	r24, 2
    58d4:	12 c0       	rjmp	.+36     	; 0x58fa <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    58d6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    58d8:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <Serial+0x19>
    58dc:	8f 5f       	subi	r24, 0xFF	; 255
    58de:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    58e0:	20 91 a2 0a 	lds	r18, 0x0AA2	; 0x800aa2 <Serial+0x1a>
    58e4:	82 17       	cp	r24, r18
    58e6:	51 f0       	breq	.+20     	; 0x58fc <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    58e8:	e0 91 a1 0a 	lds	r30, 0x0AA1	; 0x800aa1 <Serial+0x19>
    58ec:	f0 e0       	ldi	r31, 0x00	; 0
    58ee:	e8 57       	subi	r30, 0x78	; 120
    58f0:	f5 4f       	sbci	r31, 0xF5	; 245
    58f2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    58f4:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <Serial+0x19>
    58f8:	01 c0       	rjmp	.+2      	; 0x58fc <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    58fa:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    58fc:	ff 91       	pop	r31
    58fe:	ef 91       	pop	r30
    5900:	9f 91       	pop	r25
    5902:	8f 91       	pop	r24
    5904:	2f 91       	pop	r18
    5906:	0f 90       	pop	r0
    5908:	0f be       	out	0x3f, r0	; 63
    590a:	0f 90       	pop	r0
    590c:	1f 90       	pop	r1
    590e:	18 95       	reti

00005910 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5910:	1f 92       	push	r1
    5912:	0f 92       	push	r0
    5914:	0f b6       	in	r0, 0x3f	; 63
    5916:	0f 92       	push	r0
    5918:	11 24       	eor	r1, r1
    591a:	2f 93       	push	r18
    591c:	3f 93       	push	r19
    591e:	4f 93       	push	r20
    5920:	5f 93       	push	r21
    5922:	6f 93       	push	r22
    5924:	7f 93       	push	r23
    5926:	8f 93       	push	r24
    5928:	9f 93       	push	r25
    592a:	af 93       	push	r26
    592c:	bf 93       	push	r27
    592e:	ef 93       	push	r30
    5930:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    5932:	88 e8       	ldi	r24, 0x88	; 136
    5934:	9a e0       	ldi	r25, 0x0A	; 10
    5936:	86 d6       	rcall	.+3340   	; 0x6644 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5938:	ff 91       	pop	r31
    593a:	ef 91       	pop	r30
    593c:	bf 91       	pop	r27
    593e:	af 91       	pop	r26
    5940:	9f 91       	pop	r25
    5942:	8f 91       	pop	r24
    5944:	7f 91       	pop	r23
    5946:	6f 91       	pop	r22
    5948:	5f 91       	pop	r21
    594a:	4f 91       	pop	r20
    594c:	3f 91       	pop	r19
    594e:	2f 91       	pop	r18
    5950:	0f 90       	pop	r0
    5952:	0f be       	out	0x3f, r0	; 63
    5954:	0f 90       	pop	r0
    5956:	1f 90       	pop	r1
    5958:	18 95       	reti

0000595a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    595a:	88 e8       	ldi	r24, 0x88	; 136
    595c:	9a e0       	ldi	r25, 0x0A	; 10
    595e:	28 d6       	rcall	.+3152   	; 0x65b0 <_ZN14HardwareSerial9availableEv>
    5960:	21 e0       	ldi	r18, 0x01	; 1
    5962:	89 2b       	or	r24, r25
    5964:	09 f4       	brne	.+2      	; 0x5968 <_Z17Serial0_availablev+0xe>
    5966:	20 e0       	ldi	r18, 0x00	; 0
}
    5968:	82 2f       	mov	r24, r18
    596a:	08 95       	ret

0000596c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    596c:	e8 e8       	ldi	r30, 0x88	; 136
    596e:	fa e0       	ldi	r31, 0x0A	; 10
    5970:	13 82       	std	Z+3, r1	; 0x03
    5972:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5974:	88 ee       	ldi	r24, 0xE8	; 232
    5976:	93 e0       	ldi	r25, 0x03	; 3
    5978:	a0 e0       	ldi	r26, 0x00	; 0
    597a:	b0 e0       	ldi	r27, 0x00	; 0
    597c:	84 83       	std	Z+4, r24	; 0x04
    597e:	95 83       	std	Z+5, r25	; 0x05
    5980:	a6 83       	std	Z+6, r26	; 0x06
    5982:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5984:	89 e0       	ldi	r24, 0x09	; 9
    5986:	98 e0       	ldi	r25, 0x08	; 8
    5988:	91 83       	std	Z+1, r25	; 0x01
    598a:	80 83       	st	Z, r24
    598c:	85 ec       	ldi	r24, 0xC5	; 197
    598e:	90 e0       	ldi	r25, 0x00	; 0
    5990:	95 87       	std	Z+13, r25	; 0x0d
    5992:	84 87       	std	Z+12, r24	; 0x0c
    5994:	84 ec       	ldi	r24, 0xC4	; 196
    5996:	90 e0       	ldi	r25, 0x00	; 0
    5998:	97 87       	std	Z+15, r25	; 0x0f
    599a:	86 87       	std	Z+14, r24	; 0x0e
    599c:	80 ec       	ldi	r24, 0xC0	; 192
    599e:	90 e0       	ldi	r25, 0x00	; 0
    59a0:	91 8b       	std	Z+17, r25	; 0x11
    59a2:	80 8b       	std	Z+16, r24	; 0x10
    59a4:	81 ec       	ldi	r24, 0xC1	; 193
    59a6:	90 e0       	ldi	r25, 0x00	; 0
    59a8:	93 8b       	std	Z+19, r25	; 0x13
    59aa:	82 8b       	std	Z+18, r24	; 0x12
    59ac:	82 ec       	ldi	r24, 0xC2	; 194
    59ae:	90 e0       	ldi	r25, 0x00	; 0
    59b0:	95 8b       	std	Z+21, r25	; 0x15
    59b2:	84 8b       	std	Z+20, r24	; 0x14
    59b4:	86 ec       	ldi	r24, 0xC6	; 198
    59b6:	90 e0       	ldi	r25, 0x00	; 0
    59b8:	97 8b       	std	Z+23, r25	; 0x17
    59ba:	86 8b       	std	Z+22, r24	; 0x16
    59bc:	11 8e       	std	Z+25, r1	; 0x19
    59be:	12 8e       	std	Z+26, r1	; 0x1a
    59c0:	13 8e       	std	Z+27, r1	; 0x1b
    59c2:	14 8e       	std	Z+28, r1	; 0x1c
    59c4:	08 95       	ret

000059c6 <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    59c6:	8f 92       	push	r8
    59c8:	9f 92       	push	r9
    59ca:	af 92       	push	r10
    59cc:	bf 92       	push	r11
    59ce:	cf 92       	push	r12
    59d0:	df 92       	push	r13
    59d2:	ef 92       	push	r14
    59d4:	ff 92       	push	r15
    59d6:	0f 93       	push	r16
    59d8:	1f 93       	push	r17
    59da:	cf 93       	push	r28
    59dc:	df 93       	push	r29
    59de:	7c 01       	movw	r14, r24
    59e0:	8b 01       	movw	r16, r22
    59e2:	4c 01       	movw	r8, r24
    59e4:	82 e0       	ldi	r24, 0x02	; 2
    59e6:	88 0e       	add	r8, r24
    59e8:	91 1c       	adc	r9, r1
    59ea:	57 01       	movw	r10, r14
    59ec:	e5 e0       	ldi	r30, 0x05	; 5
    59ee:	ae 0e       	add	r10, r30
    59f0:	b1 1c       	adc	r11, r1
    59f2:	c0 e0       	ldi	r28, 0x00	; 0
    59f4:	d0 e0       	ldi	r29, 0x00	; 0
    59f6:	f4 01       	movw	r30, r8
    59f8:	61 91       	ld	r22, Z+
    59fa:	4f 01       	movw	r8, r30
    59fc:	4a e0       	ldi	r20, 0x0A	; 10
    59fe:	50 e0       	ldi	r21, 0x00	; 0
    5a00:	c8 01       	movw	r24, r16
    5a02:	4b d1       	rcall	.+662    	; 0x5c9a <_ZN5Print5printEhi>
    5a04:	6c 01       	movw	r12, r24
    5a06:	6e e2       	ldi	r22, 0x2E	; 46
    5a08:	c8 01       	movw	r24, r16
    5a0a:	ba d0       	rcall	.+372    	; 0x5b80 <_ZN5Print5printEc>
    5a0c:	8c 0d       	add	r24, r12
    5a0e:	9d 1d       	adc	r25, r13
    5a10:	c8 0f       	add	r28, r24
    5a12:	d9 1f       	adc	r29, r25
    5a14:	8a 14       	cp	r8, r10
    5a16:	9b 04       	cpc	r9, r11
    5a18:	71 f7       	brne	.-36     	; 0x59f6 <_ZNK9IPAddress7printToER5Print+0x30>
    5a1a:	4a e0       	ldi	r20, 0x0A	; 10
    5a1c:	50 e0       	ldi	r21, 0x00	; 0
    5a1e:	f7 01       	movw	r30, r14
    5a20:	65 81       	ldd	r22, Z+5	; 0x05
    5a22:	c8 01       	movw	r24, r16
    5a24:	3a d1       	rcall	.+628    	; 0x5c9a <_ZN5Print5printEhi>
    5a26:	8c 0f       	add	r24, r28
    5a28:	9d 1f       	adc	r25, r29
    5a2a:	df 91       	pop	r29
    5a2c:	cf 91       	pop	r28
    5a2e:	1f 91       	pop	r17
    5a30:	0f 91       	pop	r16
    5a32:	ff 90       	pop	r15
    5a34:	ef 90       	pop	r14
    5a36:	df 90       	pop	r13
    5a38:	cf 90       	pop	r12
    5a3a:	bf 90       	pop	r11
    5a3c:	af 90       	pop	r10
    5a3e:	9f 90       	pop	r9
    5a40:	8f 90       	pop	r8
    5a42:	08 95       	ret

00005a44 <_ZN9IPAddressC1Ev>:
    5a44:	27 ef       	ldi	r18, 0xF7	; 247
    5a46:	37 e0       	ldi	r19, 0x07	; 7
    5a48:	fc 01       	movw	r30, r24
    5a4a:	31 83       	std	Z+1, r19	; 0x01
    5a4c:	20 83       	st	Z, r18
    5a4e:	12 82       	std	Z+2, r1	; 0x02
    5a50:	13 82       	std	Z+3, r1	; 0x03
    5a52:	14 82       	std	Z+4, r1	; 0x04
    5a54:	15 82       	std	Z+5, r1	; 0x05
    5a56:	08 95       	ret

00005a58 <_ZN9IPAddressC1Ehhhh>:
    5a58:	0f 93       	push	r16
    5a5a:	fc 01       	movw	r30, r24
    5a5c:	87 ef       	ldi	r24, 0xF7	; 247
    5a5e:	97 e0       	ldi	r25, 0x07	; 7
    5a60:	91 83       	std	Z+1, r25	; 0x01
    5a62:	80 83       	st	Z, r24
    5a64:	62 83       	std	Z+2, r22	; 0x02
    5a66:	43 83       	std	Z+3, r20	; 0x03
    5a68:	24 83       	std	Z+4, r18	; 0x04
    5a6a:	05 83       	std	Z+5, r16	; 0x05
    5a6c:	0f 91       	pop	r16
    5a6e:	08 95       	ret

00005a70 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    5a70:	dc 01       	movw	r26, r24
    5a72:	12 96       	adiw	r26, 0x02	; 2
    5a74:	24 e0       	ldi	r18, 0x04	; 4
    5a76:	fb 01       	movw	r30, r22
    5a78:	01 90       	ld	r0, Z+
    5a7a:	0d 92       	st	X+, r0
    5a7c:	2a 95       	dec	r18
    5a7e:	e1 f7       	brne	.-8      	; 0x5a78 <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    5a80:	08 95       	ret

00005a82 <initVariant>:
    5a82:	08 95       	ret

00005a84 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    5a84:	df d1       	rcall	.+958    	; 0x5e44 <init>

	initVariant();
    5a86:	fd df       	rcall	.-6      	; 0x5a82 <initVariant>
    5a88:	0e 94 67 10 	call	0x20ce	; 0x20ce <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    5a8c:	c5 e1       	ldi	r28, 0x15	; 21
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5a8e:	d3 e3       	ldi	r29, 0x33	; 51
    5a90:	0e 94 54 09 	call	0x12a8	; 0x12a8 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    5a94:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    5a96:	e1 f3       	breq	.-8      	; 0x5a90 <main+0xc>
    5a98:	c8 d5       	rcall	.+2960   	; 0x662a <_Z14serialEventRunv>
    5a9a:	fa cf       	rjmp	.-12     	; 0x5a90 <main+0xc>

00005a9c <_ZN5Print5writeEPKhj>:
    5a9c:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    5a9e:	df 92       	push	r13
    5aa0:	ef 92       	push	r14
    5aa2:	ff 92       	push	r15
    5aa4:	0f 93       	push	r16
    5aa6:	1f 93       	push	r17
    5aa8:	cf 93       	push	r28
    5aaa:	df 93       	push	r29
    5aac:	6c 01       	movw	r12, r24
    5aae:	7a 01       	movw	r14, r20
    5ab0:	8b 01       	movw	r16, r22
    5ab2:	c0 e0       	ldi	r28, 0x00	; 0
    5ab4:	d0 e0       	ldi	r29, 0x00	; 0
    5ab6:	ce 15       	cp	r28, r14
    5ab8:	df 05       	cpc	r29, r15
    5aba:	81 f0       	breq	.+32     	; 0x5adc <_ZN5Print5writeEPKhj+0x40>
    5abc:	d8 01       	movw	r26, r16
    5abe:	6d 91       	ld	r22, X+
    5ac0:	8d 01       	movw	r16, r26
    5ac2:	d6 01       	movw	r26, r12
    5ac4:	ed 91       	ld	r30, X+
    5ac6:	fc 91       	ld	r31, X
    5ac8:	01 90       	ld	r0, Z+
    5aca:	f0 81       	ld	r31, Z
    5acc:	e0 2d       	mov	r30, r0
    5ace:	c6 01       	movw	r24, r12
    5ad0:	09 95       	icall
    5ad2:	89 2b       	or	r24, r25
    5ad4:	11 f0       	breq	.+4      	; 0x5ada <_ZN5Print5writeEPKhj+0x3e>
    5ad6:	21 96       	adiw	r28, 0x01	; 1
    5ad8:	ee cf       	rjmp	.-36     	; 0x5ab6 <_ZN5Print5writeEPKhj+0x1a>
    5ada:	7e 01       	movw	r14, r28
    5adc:	c7 01       	movw	r24, r14
    5ade:	df 91       	pop	r29
    5ae0:	cf 91       	pop	r28
    5ae2:	1f 91       	pop	r17
    5ae4:	0f 91       	pop	r16
    5ae6:	ff 90       	pop	r15
    5ae8:	ef 90       	pop	r14
    5aea:	df 90       	pop	r13
    5aec:	cf 90       	pop	r12
    5aee:	08 95       	ret

00005af0 <_ZN5Print5writeEPKc>:
    5af0:	61 15       	cp	r22, r1
    5af2:	71 05       	cpc	r23, r1
    5af4:	79 f0       	breq	.+30     	; 0x5b14 <_ZN5Print5writeEPKc+0x24>
    5af6:	fb 01       	movw	r30, r22
    5af8:	01 90       	ld	r0, Z+
    5afa:	00 20       	and	r0, r0
    5afc:	e9 f7       	brne	.-6      	; 0x5af8 <_ZN5Print5writeEPKc+0x8>
    5afe:	31 97       	sbiw	r30, 0x01	; 1
    5b00:	af 01       	movw	r20, r30
    5b02:	46 1b       	sub	r20, r22
    5b04:	57 0b       	sbc	r21, r23
    5b06:	dc 01       	movw	r26, r24
    5b08:	ed 91       	ld	r30, X+
    5b0a:	fc 91       	ld	r31, X
    5b0c:	02 80       	ldd	r0, Z+2	; 0x02
    5b0e:	f3 81       	ldd	r31, Z+3	; 0x03
    5b10:	e0 2d       	mov	r30, r0
    5b12:	09 94       	ijmp
    5b14:	80 e0       	ldi	r24, 0x00	; 0
    5b16:	90 e0       	ldi	r25, 0x00	; 0
    5b18:	08 95       	ret

00005b1a <_ZN5Print5printEPK19__FlashStringHelper>:
    5b1a:	ef 92       	push	r14
    5b1c:	ff 92       	push	r15
    5b1e:	0f 93       	push	r16
    5b20:	1f 93       	push	r17
    5b22:	cf 93       	push	r28
    5b24:	df 93       	push	r29
    5b26:	8c 01       	movw	r16, r24
    5b28:	7b 01       	movw	r14, r22
    5b2a:	c0 e0       	ldi	r28, 0x00	; 0
    5b2c:	d0 e0       	ldi	r29, 0x00	; 0
    5b2e:	f7 01       	movw	r30, r14
    5b30:	ec 0f       	add	r30, r28
    5b32:	fd 1f       	adc	r31, r29
    5b34:	64 91       	lpm	r22, Z
    5b36:	66 23       	and	r22, r22
    5b38:	61 f0       	breq	.+24     	; 0x5b52 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    5b3a:	d8 01       	movw	r26, r16
    5b3c:	ed 91       	ld	r30, X+
    5b3e:	fc 91       	ld	r31, X
    5b40:	01 90       	ld	r0, Z+
    5b42:	f0 81       	ld	r31, Z
    5b44:	e0 2d       	mov	r30, r0
    5b46:	c8 01       	movw	r24, r16
    5b48:	09 95       	icall
    5b4a:	89 2b       	or	r24, r25
    5b4c:	11 f0       	breq	.+4      	; 0x5b52 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    5b4e:	21 96       	adiw	r28, 0x01	; 1
    5b50:	ee cf       	rjmp	.-36     	; 0x5b2e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    5b52:	ce 01       	movw	r24, r28
    5b54:	df 91       	pop	r29
    5b56:	cf 91       	pop	r28
    5b58:	1f 91       	pop	r17
    5b5a:	0f 91       	pop	r16
    5b5c:	ff 90       	pop	r15
    5b5e:	ef 90       	pop	r14
    5b60:	08 95       	ret

00005b62 <_ZN5Print5printERK6String>:
    5b62:	db 01       	movw	r26, r22
    5b64:	14 96       	adiw	r26, 0x04	; 4
    5b66:	4d 91       	ld	r20, X+
    5b68:	5c 91       	ld	r21, X
    5b6a:	15 97       	sbiw	r26, 0x05	; 5
    5b6c:	6d 91       	ld	r22, X+
    5b6e:	7c 91       	ld	r23, X
    5b70:	dc 01       	movw	r26, r24
    5b72:	ed 91       	ld	r30, X+
    5b74:	fc 91       	ld	r31, X
    5b76:	02 80       	ldd	r0, Z+2	; 0x02
    5b78:	f3 81       	ldd	r31, Z+3	; 0x03
    5b7a:	e0 2d       	mov	r30, r0
    5b7c:	09 94       	ijmp

00005b7e <_ZN5Print5printEPKc>:
    5b7e:	b8 cf       	rjmp	.-144    	; 0x5af0 <_ZN5Print5writeEPKc>

00005b80 <_ZN5Print5printEc>:
    5b80:	dc 01       	movw	r26, r24
    5b82:	ed 91       	ld	r30, X+
    5b84:	fc 91       	ld	r31, X
    5b86:	01 90       	ld	r0, Z+
    5b88:	f0 81       	ld	r31, Z
    5b8a:	e0 2d       	mov	r30, r0
    5b8c:	09 94       	ijmp

00005b8e <_ZN5Print7printlnEv>:
    5b8e:	6b ef       	ldi	r22, 0xFB	; 251
    5b90:	73 e0       	ldi	r23, 0x03	; 3
    5b92:	ae cf       	rjmp	.-164    	; 0x5af0 <_ZN5Print5writeEPKc>

00005b94 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    5b94:	0f 93       	push	r16
    5b96:	1f 93       	push	r17
    5b98:	cf 93       	push	r28
    5b9a:	df 93       	push	r29
    5b9c:	ec 01       	movw	r28, r24
    5b9e:	bd df       	rcall	.-134    	; 0x5b1a <_ZN5Print5printEPK19__FlashStringHelper>
    5ba0:	8c 01       	movw	r16, r24
    5ba2:	ce 01       	movw	r24, r28
    5ba4:	f4 df       	rcall	.-24     	; 0x5b8e <_ZN5Print7printlnEv>
    5ba6:	80 0f       	add	r24, r16
    5ba8:	91 1f       	adc	r25, r17
    5baa:	df 91       	pop	r29
    5bac:	cf 91       	pop	r28
    5bae:	1f 91       	pop	r17
    5bb0:	0f 91       	pop	r16
    5bb2:	08 95       	ret

00005bb4 <_ZN5Print7printlnERK6String>:
    5bb4:	0f 93       	push	r16
    5bb6:	1f 93       	push	r17
    5bb8:	cf 93       	push	r28
    5bba:	df 93       	push	r29
    5bbc:	ec 01       	movw	r28, r24
    5bbe:	d1 df       	rcall	.-94     	; 0x5b62 <_ZN5Print5printERK6String>
    5bc0:	8c 01       	movw	r16, r24
    5bc2:	ce 01       	movw	r24, r28
    5bc4:	e4 df       	rcall	.-56     	; 0x5b8e <_ZN5Print7printlnEv>
    5bc6:	80 0f       	add	r24, r16
    5bc8:	91 1f       	adc	r25, r17
    5bca:	df 91       	pop	r29
    5bcc:	cf 91       	pop	r28
    5bce:	1f 91       	pop	r17
    5bd0:	0f 91       	pop	r16
    5bd2:	08 95       	ret

00005bd4 <_ZN5Print7printlnEPKc>:
    5bd4:	0f 93       	push	r16
    5bd6:	1f 93       	push	r17
    5bd8:	cf 93       	push	r28
    5bda:	df 93       	push	r29
    5bdc:	ec 01       	movw	r28, r24
    5bde:	88 df       	rcall	.-240    	; 0x5af0 <_ZN5Print5writeEPKc>
    5be0:	8c 01       	movw	r16, r24
    5be2:	ce 01       	movw	r24, r28
    5be4:	d4 df       	rcall	.-88     	; 0x5b8e <_ZN5Print7printlnEv>
    5be6:	80 0f       	add	r24, r16
    5be8:	91 1f       	adc	r25, r17
    5bea:	df 91       	pop	r29
    5bec:	cf 91       	pop	r28
    5bee:	1f 91       	pop	r17
    5bf0:	0f 91       	pop	r16
    5bf2:	08 95       	ret

00005bf4 <_ZN5Print11printNumberEmh>:
    5bf4:	8f 92       	push	r8
    5bf6:	9f 92       	push	r9
    5bf8:	af 92       	push	r10
    5bfa:	bf 92       	push	r11
    5bfc:	ef 92       	push	r14
    5bfe:	ff 92       	push	r15
    5c00:	0f 93       	push	r16
    5c02:	1f 93       	push	r17
    5c04:	cf 93       	push	r28
    5c06:	df 93       	push	r29
    5c08:	cd b7       	in	r28, 0x3d	; 61
    5c0a:	de b7       	in	r29, 0x3e	; 62
    5c0c:	a1 97       	sbiw	r28, 0x21	; 33
    5c0e:	0f b6       	in	r0, 0x3f	; 63
    5c10:	f8 94       	cli
    5c12:	de bf       	out	0x3e, r29	; 62
    5c14:	0f be       	out	0x3f, r0	; 63
    5c16:	cd bf       	out	0x3d, r28	; 61
    5c18:	7c 01       	movw	r14, r24
    5c1a:	fa 01       	movw	r30, r20
    5c1c:	cb 01       	movw	r24, r22
    5c1e:	19 a2       	std	Y+33, r1	; 0x21
    5c20:	22 30       	cpi	r18, 0x02	; 2
    5c22:	08 f4       	brcc	.+2      	; 0x5c26 <_ZN5Print11printNumberEmh+0x32>
    5c24:	2a e0       	ldi	r18, 0x0A	; 10
    5c26:	8e 01       	movw	r16, r28
    5c28:	0f 5d       	subi	r16, 0xDF	; 223
    5c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    5c2c:	82 2e       	mov	r8, r18
    5c2e:	91 2c       	mov	r9, r1
    5c30:	a1 2c       	mov	r10, r1
    5c32:	b1 2c       	mov	r11, r1
    5c34:	bf 01       	movw	r22, r30
    5c36:	a5 01       	movw	r20, r10
    5c38:	94 01       	movw	r18, r8
    5c3a:	b4 d5       	rcall	.+2920   	; 0x67a4 <__udivmodsi4>
    5c3c:	f9 01       	movw	r30, r18
    5c3e:	ca 01       	movw	r24, r20
    5c40:	01 50       	subi	r16, 0x01	; 1
    5c42:	11 09       	sbc	r17, r1
    5c44:	6a 30       	cpi	r22, 0x0A	; 10
    5c46:	10 f4       	brcc	.+4      	; 0x5c4c <_ZN5Print11printNumberEmh+0x58>
    5c48:	60 5d       	subi	r22, 0xD0	; 208
    5c4a:	01 c0       	rjmp	.+2      	; 0x5c4e <_ZN5Print11printNumberEmh+0x5a>
    5c4c:	69 5c       	subi	r22, 0xC9	; 201
    5c4e:	d8 01       	movw	r26, r16
    5c50:	6c 93       	st	X, r22
    5c52:	23 2b       	or	r18, r19
    5c54:	24 2b       	or	r18, r20
    5c56:	25 2b       	or	r18, r21
    5c58:	69 f7       	brne	.-38     	; 0x5c34 <_ZN5Print11printNumberEmh+0x40>
    5c5a:	b8 01       	movw	r22, r16
    5c5c:	c7 01       	movw	r24, r14
    5c5e:	48 df       	rcall	.-368    	; 0x5af0 <_ZN5Print5writeEPKc>
    5c60:	a1 96       	adiw	r28, 0x21	; 33
    5c62:	0f b6       	in	r0, 0x3f	; 63
    5c64:	f8 94       	cli
    5c66:	de bf       	out	0x3e, r29	; 62
    5c68:	0f be       	out	0x3f, r0	; 63
    5c6a:	cd bf       	out	0x3d, r28	; 61
    5c6c:	df 91       	pop	r29
    5c6e:	cf 91       	pop	r28
    5c70:	1f 91       	pop	r17
    5c72:	0f 91       	pop	r16
    5c74:	ff 90       	pop	r15
    5c76:	ef 90       	pop	r14
    5c78:	bf 90       	pop	r11
    5c7a:	af 90       	pop	r10
    5c7c:	9f 90       	pop	r9
    5c7e:	8f 90       	pop	r8
    5c80:	08 95       	ret

00005c82 <_ZN5Print5printEmi>:
    5c82:	21 15       	cp	r18, r1
    5c84:	31 05       	cpc	r19, r1
    5c86:	41 f4       	brne	.+16     	; 0x5c98 <_ZN5Print5printEmi+0x16>
    5c88:	dc 01       	movw	r26, r24
    5c8a:	ed 91       	ld	r30, X+
    5c8c:	fc 91       	ld	r31, X
    5c8e:	01 90       	ld	r0, Z+
    5c90:	f0 81       	ld	r31, Z
    5c92:	e0 2d       	mov	r30, r0
    5c94:	64 2f       	mov	r22, r20
    5c96:	09 94       	ijmp
    5c98:	ad cf       	rjmp	.-166    	; 0x5bf4 <_ZN5Print11printNumberEmh>

00005c9a <_ZN5Print5printEhi>:
    5c9a:	9a 01       	movw	r18, r20
    5c9c:	46 2f       	mov	r20, r22
    5c9e:	50 e0       	ldi	r21, 0x00	; 0
    5ca0:	60 e0       	ldi	r22, 0x00	; 0
    5ca2:	70 e0       	ldi	r23, 0x00	; 0
    5ca4:	ee cf       	rjmp	.-36     	; 0x5c82 <_ZN5Print5printEmi>

00005ca6 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    5ca6:	0f 93       	push	r16
    5ca8:	1f 93       	push	r17
    5caa:	cf 93       	push	r28
    5cac:	df 93       	push	r29
    5cae:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    5cb0:	e8 df       	rcall	.-48     	; 0x5c82 <_ZN5Print5printEmi>
    5cb2:	8c 01       	movw	r16, r24
  n += println();
    5cb4:	ce 01       	movw	r24, r28
    5cb6:	6b df       	rcall	.-298    	; 0x5b8e <_ZN5Print7printlnEv>
  return n;
}
    5cb8:	80 0f       	add	r24, r16
    5cba:	91 1f       	adc	r25, r17
    5cbc:	df 91       	pop	r29
    5cbe:	cf 91       	pop	r28
    5cc0:	1f 91       	pop	r17
    5cc2:	0f 91       	pop	r16
    5cc4:	08 95       	ret

00005cc6 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5cc6:	1f 92       	push	r1
    5cc8:	0f 92       	push	r0
    5cca:	0f b6       	in	r0, 0x3f	; 63
    5ccc:	0f 92       	push	r0
    5cce:	11 24       	eor	r1, r1
    5cd0:	2f 93       	push	r18
    5cd2:	3f 93       	push	r19
    5cd4:	8f 93       	push	r24
    5cd6:	9f 93       	push	r25
    5cd8:	af 93       	push	r26
    5cda:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5cdc:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <timer0_millis>
    5ce0:	90 91 27 0b 	lds	r25, 0x0B27	; 0x800b27 <timer0_millis+0x1>
    5ce4:	a0 91 28 0b 	lds	r26, 0x0B28	; 0x800b28 <timer0_millis+0x2>
    5ce8:	b0 91 29 0b 	lds	r27, 0x0B29	; 0x800b29 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    5cec:	30 91 25 0b 	lds	r19, 0x0B25	; 0x800b25 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    5cf0:	23 e0       	ldi	r18, 0x03	; 3
    5cf2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    5cf4:	2d 37       	cpi	r18, 0x7D	; 125
    5cf6:	20 f4       	brcc	.+8      	; 0x5d00 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5cf8:	01 96       	adiw	r24, 0x01	; 1
    5cfa:	a1 1d       	adc	r26, r1
    5cfc:	b1 1d       	adc	r27, r1
    5cfe:	05 c0       	rjmp	.+10     	; 0x5d0a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    5d00:	26 e8       	ldi	r18, 0x86	; 134
    5d02:	23 0f       	add	r18, r19
		m += 1;
    5d04:	02 96       	adiw	r24, 0x02	; 2
    5d06:	a1 1d       	adc	r26, r1
    5d08:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5d0a:	20 93 25 0b 	sts	0x0B25, r18	; 0x800b25 <timer0_fract>
	timer0_millis = m;
    5d0e:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <timer0_millis>
    5d12:	90 93 27 0b 	sts	0x0B27, r25	; 0x800b27 <timer0_millis+0x1>
    5d16:	a0 93 28 0b 	sts	0x0B28, r26	; 0x800b28 <timer0_millis+0x2>
    5d1a:	b0 93 29 0b 	sts	0x0B29, r27	; 0x800b29 <timer0_millis+0x3>
	timer0_overflow_count++;
    5d1e:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <timer0_overflow_count>
    5d22:	90 91 2b 0b 	lds	r25, 0x0B2B	; 0x800b2b <timer0_overflow_count+0x1>
    5d26:	a0 91 2c 0b 	lds	r26, 0x0B2C	; 0x800b2c <timer0_overflow_count+0x2>
    5d2a:	b0 91 2d 0b 	lds	r27, 0x0B2D	; 0x800b2d <timer0_overflow_count+0x3>
    5d2e:	01 96       	adiw	r24, 0x01	; 1
    5d30:	a1 1d       	adc	r26, r1
    5d32:	b1 1d       	adc	r27, r1
    5d34:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <timer0_overflow_count>
    5d38:	90 93 2b 0b 	sts	0x0B2B, r25	; 0x800b2b <timer0_overflow_count+0x1>
    5d3c:	a0 93 2c 0b 	sts	0x0B2C, r26	; 0x800b2c <timer0_overflow_count+0x2>
    5d40:	b0 93 2d 0b 	sts	0x0B2D, r27	; 0x800b2d <timer0_overflow_count+0x3>
}
    5d44:	bf 91       	pop	r27
    5d46:	af 91       	pop	r26
    5d48:	9f 91       	pop	r25
    5d4a:	8f 91       	pop	r24
    5d4c:	3f 91       	pop	r19
    5d4e:	2f 91       	pop	r18
    5d50:	0f 90       	pop	r0
    5d52:	0f be       	out	0x3f, r0	; 63
    5d54:	0f 90       	pop	r0
    5d56:	1f 90       	pop	r1
    5d58:	18 95       	reti

00005d5a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5d5a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5d5c:	f8 94       	cli
	m = timer0_millis;
    5d5e:	60 91 26 0b 	lds	r22, 0x0B26	; 0x800b26 <timer0_millis>
    5d62:	70 91 27 0b 	lds	r23, 0x0B27	; 0x800b27 <timer0_millis+0x1>
    5d66:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <timer0_millis+0x2>
    5d6a:	90 91 29 0b 	lds	r25, 0x0B29	; 0x800b29 <timer0_millis+0x3>
	SREG = oldSREG;
    5d6e:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    5d70:	08 95       	ret

00005d72 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5d72:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    5d74:	f8 94       	cli
	m = timer0_overflow_count;
    5d76:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <timer0_overflow_count>
    5d7a:	90 91 2b 0b 	lds	r25, 0x0B2B	; 0x800b2b <timer0_overflow_count+0x1>
    5d7e:	a0 91 2c 0b 	lds	r26, 0x0B2C	; 0x800b2c <timer0_overflow_count+0x2>
    5d82:	b0 91 2d 0b 	lds	r27, 0x0B2D	; 0x800b2d <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    5d86:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5d88:	a8 9b       	sbis	0x15, 0	; 21
    5d8a:	05 c0       	rjmp	.+10     	; 0x5d96 <micros+0x24>
    5d8c:	2f 3f       	cpi	r18, 0xFF	; 255
    5d8e:	19 f0       	breq	.+6      	; 0x5d96 <micros+0x24>
		m++;
    5d90:	01 96       	adiw	r24, 0x01	; 1
    5d92:	a1 1d       	adc	r26, r1
    5d94:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5d96:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5d98:	ba 2f       	mov	r27, r26
    5d9a:	a9 2f       	mov	r26, r25
    5d9c:	98 2f       	mov	r25, r24
    5d9e:	88 27       	eor	r24, r24
    5da0:	82 0f       	add	r24, r18
    5da2:	91 1d       	adc	r25, r1
    5da4:	a1 1d       	adc	r26, r1
    5da6:	b1 1d       	adc	r27, r1
    5da8:	bc 01       	movw	r22, r24
    5daa:	cd 01       	movw	r24, r26
    5dac:	42 e0       	ldi	r20, 0x02	; 2
    5dae:	66 0f       	add	r22, r22
    5db0:	77 1f       	adc	r23, r23
    5db2:	88 1f       	adc	r24, r24
    5db4:	99 1f       	adc	r25, r25
    5db6:	4a 95       	dec	r20
    5db8:	d1 f7       	brne	.-12     	; 0x5dae <micros+0x3c>
}
    5dba:	08 95       	ret

00005dbc <delay>:

void delay(unsigned long ms)
{
    5dbc:	8f 92       	push	r8
    5dbe:	9f 92       	push	r9
    5dc0:	af 92       	push	r10
    5dc2:	bf 92       	push	r11
    5dc4:	cf 92       	push	r12
    5dc6:	df 92       	push	r13
    5dc8:	ef 92       	push	r14
    5dca:	ff 92       	push	r15
    5dcc:	6b 01       	movw	r12, r22
    5dce:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    5dd0:	d0 df       	rcall	.-96     	; 0x5d72 <micros>
    5dd2:	4b 01       	movw	r8, r22
    5dd4:	5c 01       	movw	r10, r24

	while (ms > 0) {
    5dd6:	c1 14       	cp	r12, r1
    5dd8:	d1 04       	cpc	r13, r1
    5dda:	e1 04       	cpc	r14, r1
    5ddc:	f1 04       	cpc	r15, r1
		yield();
    5dde:	f1 f0       	breq	.+60     	; 0x5e1c <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    5de0:	c0 d4       	rcall	.+2432   	; 0x6762 <yield>
    5de2:	c7 df       	rcall	.-114    	; 0x5d72 <micros>
    5de4:	dc 01       	movw	r26, r24
    5de6:	cb 01       	movw	r24, r22
    5de8:	88 19       	sub	r24, r8
    5dea:	99 09       	sbc	r25, r9
    5dec:	aa 09       	sbc	r26, r10
    5dee:	bb 09       	sbc	r27, r11
    5df0:	88 3e       	cpi	r24, 0xE8	; 232
    5df2:	93 40       	sbci	r25, 0x03	; 3
    5df4:	a1 05       	cpc	r26, r1
    5df6:	b1 05       	cpc	r27, r1
    5df8:	70 f3       	brcs	.-36     	; 0x5dd6 <delay+0x1a>
			ms--;
    5dfa:	21 e0       	ldi	r18, 0x01	; 1
    5dfc:	c2 1a       	sub	r12, r18
    5dfe:	d1 08       	sbc	r13, r1
    5e00:	e1 08       	sbc	r14, r1
    5e02:	f1 08       	sbc	r15, r1
			start += 1000;
    5e04:	88 ee       	ldi	r24, 0xE8	; 232
    5e06:	88 0e       	add	r8, r24
    5e08:	83 e0       	ldi	r24, 0x03	; 3
    5e0a:	98 1e       	adc	r9, r24
    5e0c:	a1 1c       	adc	r10, r1
    5e0e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    5e10:	c1 14       	cp	r12, r1
    5e12:	d1 04       	cpc	r13, r1
    5e14:	e1 04       	cpc	r14, r1
    5e16:	f1 04       	cpc	r15, r1
    5e18:	21 f7       	brne	.-56     	; 0x5de2 <delay+0x26>
    5e1a:	dd cf       	rjmp	.-70     	; 0x5dd6 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    5e1c:	ff 90       	pop	r15
    5e1e:	ef 90       	pop	r14
    5e20:	df 90       	pop	r13
    5e22:	cf 90       	pop	r12
    5e24:	bf 90       	pop	r11
    5e26:	af 90       	pop	r10
    5e28:	9f 90       	pop	r9
    5e2a:	8f 90       	pop	r8
    5e2c:	08 95       	ret

00005e2e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    5e2e:	82 30       	cpi	r24, 0x02	; 2
    5e30:	91 05       	cpc	r25, r1
    5e32:	38 f0       	brcs	.+14     	; 0x5e42 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    5e34:	88 0f       	add	r24, r24
    5e36:	99 1f       	adc	r25, r25
    5e38:	88 0f       	add	r24, r24
    5e3a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    5e3c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    5e3e:	01 97       	sbiw	r24, 0x01	; 1
    5e40:	f1 f7       	brne	.-4      	; 0x5e3e <delayMicroseconds+0x10>
    5e42:	08 95       	ret

00005e44 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    5e44:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    5e46:	84 b5       	in	r24, 0x24	; 36
    5e48:	82 60       	ori	r24, 0x02	; 2
    5e4a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    5e4c:	84 b5       	in	r24, 0x24	; 36
    5e4e:	81 60       	ori	r24, 0x01	; 1
    5e50:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    5e52:	85 b5       	in	r24, 0x25	; 37
    5e54:	82 60       	ori	r24, 0x02	; 2
    5e56:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5e58:	85 b5       	in	r24, 0x25	; 37
    5e5a:	81 60       	ori	r24, 0x01	; 1
    5e5c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5e5e:	ee e6       	ldi	r30, 0x6E	; 110
    5e60:	f0 e0       	ldi	r31, 0x00	; 0
    5e62:	80 81       	ld	r24, Z
    5e64:	81 60       	ori	r24, 0x01	; 1
    5e66:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5e68:	e1 e8       	ldi	r30, 0x81	; 129
    5e6a:	f0 e0       	ldi	r31, 0x00	; 0
    5e6c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5e6e:	80 81       	ld	r24, Z
    5e70:	82 60       	ori	r24, 0x02	; 2
    5e72:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5e74:	80 81       	ld	r24, Z
    5e76:	81 60       	ori	r24, 0x01	; 1
    5e78:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5e7a:	e0 e8       	ldi	r30, 0x80	; 128
    5e7c:	f0 e0       	ldi	r31, 0x00	; 0
    5e7e:	80 81       	ld	r24, Z
    5e80:	81 60       	ori	r24, 0x01	; 1
    5e82:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5e84:	e1 eb       	ldi	r30, 0xB1	; 177
    5e86:	f0 e0       	ldi	r31, 0x00	; 0
    5e88:	80 81       	ld	r24, Z
    5e8a:	84 60       	ori	r24, 0x04	; 4
    5e8c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5e8e:	e0 eb       	ldi	r30, 0xB0	; 176
    5e90:	f0 e0       	ldi	r31, 0x00	; 0
    5e92:	80 81       	ld	r24, Z
    5e94:	81 60       	ori	r24, 0x01	; 1
    5e96:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    5e98:	ea e7       	ldi	r30, 0x7A	; 122
    5e9a:	f0 e0       	ldi	r31, 0x00	; 0
    5e9c:	80 81       	ld	r24, Z
    5e9e:	84 60       	ori	r24, 0x04	; 4
    5ea0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    5ea2:	80 81       	ld	r24, Z
    5ea4:	82 60       	ori	r24, 0x02	; 2
    5ea6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    5ea8:	80 81       	ld	r24, Z
    5eaa:	81 60       	ori	r24, 0x01	; 1
    5eac:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5eae:	80 81       	ld	r24, Z
    5eb0:	80 68       	ori	r24, 0x80	; 128
    5eb2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5eb4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5eb8:	08 95       	ret

00005eba <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5eba:	83 30       	cpi	r24, 0x03	; 3
    5ebc:	81 f0       	breq	.+32     	; 0x5ede <turnOffPWM+0x24>
    5ebe:	28 f4       	brcc	.+10     	; 0x5eca <turnOffPWM+0x10>
    5ec0:	81 30       	cpi	r24, 0x01	; 1
    5ec2:	99 f0       	breq	.+38     	; 0x5eea <turnOffPWM+0x30>
    5ec4:	82 30       	cpi	r24, 0x02	; 2
    5ec6:	a1 f0       	breq	.+40     	; 0x5ef0 <turnOffPWM+0x36>
    5ec8:	08 95       	ret
    5eca:	87 30       	cpi	r24, 0x07	; 7
    5ecc:	a9 f0       	breq	.+42     	; 0x5ef8 <turnOffPWM+0x3e>
    5ece:	88 30       	cpi	r24, 0x08	; 8
    5ed0:	b9 f0       	breq	.+46     	; 0x5f00 <turnOffPWM+0x46>
    5ed2:	84 30       	cpi	r24, 0x04	; 4
    5ed4:	d1 f4       	brne	.+52     	; 0x5f0a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5ed6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5eda:	8f 7d       	andi	r24, 0xDF	; 223
    5edc:	03 c0       	rjmp	.+6      	; 0x5ee4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5ede:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5ee2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5ee4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5ee8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5eea:	84 b5       	in	r24, 0x24	; 36
    5eec:	8f 77       	andi	r24, 0x7F	; 127
    5eee:	02 c0       	rjmp	.+4      	; 0x5ef4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5ef0:	84 b5       	in	r24, 0x24	; 36
    5ef2:	8f 7d       	andi	r24, 0xDF	; 223
    5ef4:	84 bd       	out	0x24, r24	; 36
    5ef6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5ef8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5efc:	8f 77       	andi	r24, 0x7F	; 127
    5efe:	03 c0       	rjmp	.+6      	; 0x5f06 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5f00:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5f04:	8f 7d       	andi	r24, 0xDF	; 223
    5f06:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5f0a:	08 95       	ret

00005f0c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5f0c:	cf 93       	push	r28
    5f0e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5f10:	90 e0       	ldi	r25, 0x00	; 0
    5f12:	fc 01       	movw	r30, r24
    5f14:	e7 5b       	subi	r30, 0xB7	; 183
    5f16:	fd 4f       	sbci	r31, 0xFD	; 253
    5f18:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    5f1a:	fc 01       	movw	r30, r24
    5f1c:	e7 59       	subi	r30, 0x97	; 151
    5f1e:	fd 4f       	sbci	r31, 0xFD	; 253
    5f20:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5f22:	88 23       	and	r24, r24
    5f24:	61 f1       	breq	.+88     	; 0x5f7e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5f26:	90 e0       	ldi	r25, 0x00	; 0
    5f28:	88 0f       	add	r24, r24
    5f2a:	99 1f       	adc	r25, r25
    5f2c:	fc 01       	movw	r30, r24
    5f2e:	e3 56       	subi	r30, 0x63	; 99
    5f30:	fd 4f       	sbci	r31, 0xFD	; 253
    5f32:	c5 91       	lpm	r28, Z+
    5f34:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    5f36:	fc 01       	movw	r30, r24
    5f38:	ed 56       	subi	r30, 0x6D	; 109
    5f3a:	fd 4f       	sbci	r31, 0xFD	; 253
    5f3c:	a5 91       	lpm	r26, Z+
    5f3e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    5f40:	61 11       	cpse	r22, r1
    5f42:	09 c0       	rjmp	.+18     	; 0x5f56 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    5f44:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5f46:	f8 94       	cli
		*reg &= ~bit;
    5f48:	88 81       	ld	r24, Y
    5f4a:	20 95       	com	r18
    5f4c:	82 23       	and	r24, r18
    5f4e:	88 83       	st	Y, r24
		*out &= ~bit;
    5f50:	ec 91       	ld	r30, X
    5f52:	2e 23       	and	r18, r30
    5f54:	0b c0       	rjmp	.+22     	; 0x5f6c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5f56:	62 30       	cpi	r22, 0x02	; 2
    5f58:	61 f4       	brne	.+24     	; 0x5f72 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5f5a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5f5c:	f8 94       	cli
		*reg &= ~bit;
    5f5e:	88 81       	ld	r24, Y
    5f60:	32 2f       	mov	r19, r18
    5f62:	30 95       	com	r19
    5f64:	83 23       	and	r24, r19
    5f66:	88 83       	st	Y, r24
		*out |= bit;
    5f68:	ec 91       	ld	r30, X
    5f6a:	2e 2b       	or	r18, r30
    5f6c:	2c 93       	st	X, r18
		SREG = oldSREG;
    5f6e:	9f bf       	out	0x3f, r25	; 63
    5f70:	06 c0       	rjmp	.+12     	; 0x5f7e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    5f72:	8f b7       	in	r24, 0x3f	; 63
                cli();
    5f74:	f8 94       	cli
		*reg |= bit;
    5f76:	e8 81       	ld	r30, Y
    5f78:	2e 2b       	or	r18, r30
    5f7a:	28 83       	st	Y, r18
		SREG = oldSREG;
    5f7c:	8f bf       	out	0x3f, r24	; 63
	}
}
    5f7e:	df 91       	pop	r29
    5f80:	cf 91       	pop	r28
    5f82:	08 95       	ret

00005f84 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    5f84:	1f 93       	push	r17
    5f86:	cf 93       	push	r28
    5f88:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5f8a:	28 2f       	mov	r18, r24
    5f8c:	30 e0       	ldi	r19, 0x00	; 0
    5f8e:	f9 01       	movw	r30, r18
    5f90:	e7 5d       	subi	r30, 0xD7	; 215
    5f92:	fd 4f       	sbci	r31, 0xFD	; 253
    5f94:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5f96:	f9 01       	movw	r30, r18
    5f98:	e7 5b       	subi	r30, 0xB7	; 183
    5f9a:	fd 4f       	sbci	r31, 0xFD	; 253
    5f9c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5f9e:	f9 01       	movw	r30, r18
    5fa0:	e7 59       	subi	r30, 0x97	; 151
    5fa2:	fd 4f       	sbci	r31, 0xFD	; 253
    5fa4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5fa6:	cc 23       	and	r28, r28
    5fa8:	b9 f0       	breq	.+46     	; 0x5fd8 <digitalWrite+0x54>
    5faa:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5fac:	81 11       	cpse	r24, r1
    5fae:	85 df       	rcall	.-246    	; 0x5eba <turnOffPWM>

	out = portOutputRegister(port);
    5fb0:	ec 2f       	mov	r30, r28
    5fb2:	f0 e0       	ldi	r31, 0x00	; 0
    5fb4:	ee 0f       	add	r30, r30
    5fb6:	ff 1f       	adc	r31, r31
    5fb8:	ed 56       	subi	r30, 0x6D	; 109
    5fba:	fd 4f       	sbci	r31, 0xFD	; 253
    5fbc:	a5 91       	lpm	r26, Z+
    5fbe:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    5fc0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    5fc2:	f8 94       	cli

	if (val == LOW) {
    5fc4:	11 11       	cpse	r17, r1
    5fc6:	04 c0       	rjmp	.+8      	; 0x5fd0 <digitalWrite+0x4c>
		*out &= ~bit;
    5fc8:	8c 91       	ld	r24, X
    5fca:	d0 95       	com	r29
    5fcc:	d8 23       	and	r29, r24
    5fce:	02 c0       	rjmp	.+4      	; 0x5fd4 <digitalWrite+0x50>
	} else {
		*out |= bit;
    5fd0:	ec 91       	ld	r30, X
    5fd2:	de 2b       	or	r29, r30
    5fd4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    5fd6:	9f bf       	out	0x3f, r25	; 63
}
    5fd8:	df 91       	pop	r29
    5fda:	cf 91       	pop	r28
    5fdc:	1f 91       	pop	r17
    5fde:	08 95       	ret

00005fe0 <digitalRead>:

int digitalRead(uint8_t pin)
{
    5fe0:	cf 93       	push	r28
    5fe2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5fe4:	28 2f       	mov	r18, r24
    5fe6:	30 e0       	ldi	r19, 0x00	; 0
    5fe8:	f9 01       	movw	r30, r18
    5fea:	e7 5d       	subi	r30, 0xD7	; 215
    5fec:	fd 4f       	sbci	r31, 0xFD	; 253
    5fee:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5ff0:	f9 01       	movw	r30, r18
    5ff2:	e7 5b       	subi	r30, 0xB7	; 183
    5ff4:	fd 4f       	sbci	r31, 0xFD	; 253
    5ff6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5ff8:	f9 01       	movw	r30, r18
    5ffa:	e7 59       	subi	r30, 0x97	; 151
    5ffc:	fd 4f       	sbci	r31, 0xFD	; 253
    5ffe:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    6000:	cc 23       	and	r28, r28
    6002:	89 f0       	breq	.+34     	; 0x6026 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6004:	81 11       	cpse	r24, r1
    6006:	59 df       	rcall	.-334    	; 0x5eba <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    6008:	ec 2f       	mov	r30, r28
    600a:	f0 e0       	ldi	r31, 0x00	; 0
    600c:	ee 0f       	add	r30, r30
    600e:	ff 1f       	adc	r31, r31
    6010:	e7 57       	subi	r30, 0x77	; 119
    6012:	fd 4f       	sbci	r31, 0xFD	; 253
    6014:	a5 91       	lpm	r26, Z+
    6016:	b4 91       	lpm	r27, Z
    6018:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    601a:	ed 23       	and	r30, r29
    601c:	81 e0       	ldi	r24, 0x01	; 1
    601e:	90 e0       	ldi	r25, 0x00	; 0
    6020:	21 f4       	brne	.+8      	; 0x602a <digitalRead+0x4a>
    6022:	80 e0       	ldi	r24, 0x00	; 0
    6024:	02 c0       	rjmp	.+4      	; 0x602a <digitalRead+0x4a>
    6026:	80 e0       	ldi	r24, 0x00	; 0
    6028:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    602a:	df 91       	pop	r29
    602c:	cf 91       	pop	r28
    602e:	08 95       	ret

00006030 <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    6030:	08 95       	ret

00006032 <_ZN6StringD1Ev>:
    6032:	fc 01       	movw	r30, r24
    6034:	80 81       	ld	r24, Z
    6036:	91 81       	ldd	r25, Z+1	; 0x01
    6038:	b0 c4       	rjmp	.+2400   	; 0x699a <free>

0000603a <_ZN6String10invalidateEv>:
    603a:	cf 93       	push	r28
    603c:	df 93       	push	r29
    603e:	ec 01       	movw	r28, r24
    6040:	88 81       	ld	r24, Y
    6042:	99 81       	ldd	r25, Y+1	; 0x01
    6044:	00 97       	sbiw	r24, 0x00	; 0
    6046:	09 f0       	breq	.+2      	; 0x604a <_ZN6String10invalidateEv+0x10>
    6048:	a8 d4       	rcall	.+2384   	; 0x699a <free>
    604a:	19 82       	std	Y+1, r1	; 0x01
    604c:	18 82       	st	Y, r1
    604e:	1d 82       	std	Y+5, r1	; 0x05
    6050:	1c 82       	std	Y+4, r1	; 0x04
    6052:	1b 82       	std	Y+3, r1	; 0x03
    6054:	1a 82       	std	Y+2, r1	; 0x02
    6056:	df 91       	pop	r29
    6058:	cf 91       	pop	r28
    605a:	08 95       	ret

0000605c <_ZN6String12changeBufferEj>:
    605c:	0f 93       	push	r16
    605e:	1f 93       	push	r17
    6060:	cf 93       	push	r28
    6062:	df 93       	push	r29
    6064:	ec 01       	movw	r28, r24
    6066:	8b 01       	movw	r16, r22
    6068:	6f 5f       	subi	r22, 0xFF	; 255
    606a:	7f 4f       	sbci	r23, 0xFF	; 255
    606c:	88 81       	ld	r24, Y
    606e:	99 81       	ldd	r25, Y+1	; 0x01
    6070:	1d d5       	rcall	.+2618   	; 0x6aac <realloc>
    6072:	00 97       	sbiw	r24, 0x00	; 0
    6074:	31 f0       	breq	.+12     	; 0x6082 <_ZN6String12changeBufferEj+0x26>
    6076:	99 83       	std	Y+1, r25	; 0x01
    6078:	88 83       	st	Y, r24
    607a:	1b 83       	std	Y+3, r17	; 0x03
    607c:	0a 83       	std	Y+2, r16	; 0x02
    607e:	81 e0       	ldi	r24, 0x01	; 1
    6080:	01 c0       	rjmp	.+2      	; 0x6084 <_ZN6String12changeBufferEj+0x28>
    6082:	80 e0       	ldi	r24, 0x00	; 0
    6084:	df 91       	pop	r29
    6086:	cf 91       	pop	r28
    6088:	1f 91       	pop	r17
    608a:	0f 91       	pop	r16
    608c:	08 95       	ret

0000608e <_ZN6String7reserveEj>:
    608e:	cf 93       	push	r28
    6090:	df 93       	push	r29
    6092:	ec 01       	movw	r28, r24
    6094:	88 81       	ld	r24, Y
    6096:	99 81       	ldd	r25, Y+1	; 0x01
    6098:	89 2b       	or	r24, r25
    609a:	29 f0       	breq	.+10     	; 0x60a6 <_ZN6String7reserveEj+0x18>
    609c:	8a 81       	ldd	r24, Y+2	; 0x02
    609e:	9b 81       	ldd	r25, Y+3	; 0x03
    60a0:	86 17       	cp	r24, r22
    60a2:	97 07       	cpc	r25, r23
    60a4:	58 f4       	brcc	.+22     	; 0x60bc <_ZN6String7reserveEj+0x2e>
    60a6:	ce 01       	movw	r24, r28
    60a8:	d9 df       	rcall	.-78     	; 0x605c <_ZN6String12changeBufferEj>
    60aa:	88 23       	and	r24, r24
    60ac:	41 f0       	breq	.+16     	; 0x60be <_ZN6String7reserveEj+0x30>
    60ae:	8c 81       	ldd	r24, Y+4	; 0x04
    60b0:	9d 81       	ldd	r25, Y+5	; 0x05
    60b2:	89 2b       	or	r24, r25
    60b4:	19 f4       	brne	.+6      	; 0x60bc <_ZN6String7reserveEj+0x2e>
    60b6:	e8 81       	ld	r30, Y
    60b8:	f9 81       	ldd	r31, Y+1	; 0x01
    60ba:	10 82       	st	Z, r1
    60bc:	81 e0       	ldi	r24, 0x01	; 1
    60be:	df 91       	pop	r29
    60c0:	cf 91       	pop	r28
    60c2:	08 95       	ret

000060c4 <_ZN6String4copyEPKcj>:
    60c4:	ef 92       	push	r14
    60c6:	ff 92       	push	r15
    60c8:	0f 93       	push	r16
    60ca:	1f 93       	push	r17
    60cc:	cf 93       	push	r28
    60ce:	df 93       	push	r29
    60d0:	ec 01       	movw	r28, r24
    60d2:	7b 01       	movw	r14, r22
    60d4:	8a 01       	movw	r16, r20
    60d6:	ba 01       	movw	r22, r20
    60d8:	da df       	rcall	.-76     	; 0x608e <_ZN6String7reserveEj>
    60da:	81 11       	cpse	r24, r1
    60dc:	03 c0       	rjmp	.+6      	; 0x60e4 <_ZN6String4copyEPKcj+0x20>
    60de:	ce 01       	movw	r24, r28
    60e0:	ac df       	rcall	.-168    	; 0x603a <_ZN6String10invalidateEv>
    60e2:	06 c0       	rjmp	.+12     	; 0x60f0 <_ZN6String4copyEPKcj+0x2c>
    60e4:	1d 83       	std	Y+5, r17	; 0x05
    60e6:	0c 83       	std	Y+4, r16	; 0x04
    60e8:	b7 01       	movw	r22, r14
    60ea:	88 81       	ld	r24, Y
    60ec:	99 81       	ldd	r25, Y+1	; 0x01
    60ee:	e5 d5       	rcall	.+3018   	; 0x6cba <strcpy>
    60f0:	ce 01       	movw	r24, r28
    60f2:	df 91       	pop	r29
    60f4:	cf 91       	pop	r28
    60f6:	1f 91       	pop	r17
    60f8:	0f 91       	pop	r16
    60fa:	ff 90       	pop	r15
    60fc:	ef 90       	pop	r14
    60fe:	08 95       	ret

00006100 <_ZN6StringC1EPKc>:
    6100:	fc 01       	movw	r30, r24
    6102:	11 82       	std	Z+1, r1	; 0x01
    6104:	10 82       	st	Z, r1
    6106:	13 82       	std	Z+3, r1	; 0x03
    6108:	12 82       	std	Z+2, r1	; 0x02
    610a:	15 82       	std	Z+5, r1	; 0x05
    610c:	14 82       	std	Z+4, r1	; 0x04
    610e:	61 15       	cp	r22, r1
    6110:	71 05       	cpc	r23, r1
    6112:	49 f0       	breq	.+18     	; 0x6126 <_ZN6StringC1EPKc+0x26>
    6114:	fb 01       	movw	r30, r22
    6116:	01 90       	ld	r0, Z+
    6118:	00 20       	and	r0, r0
    611a:	e9 f7       	brne	.-6      	; 0x6116 <_ZN6StringC1EPKc+0x16>
    611c:	31 97       	sbiw	r30, 0x01	; 1
    611e:	af 01       	movw	r20, r30
    6120:	46 1b       	sub	r20, r22
    6122:	57 0b       	sbc	r21, r23
    6124:	cf cf       	rjmp	.-98     	; 0x60c4 <_ZN6String4copyEPKcj>
    6126:	08 95       	ret

00006128 <_ZN6String4moveERS_>:
    6128:	0f 93       	push	r16
    612a:	1f 93       	push	r17
    612c:	cf 93       	push	r28
    612e:	df 93       	push	r29
    6130:	8c 01       	movw	r16, r24
    6132:	eb 01       	movw	r28, r22
    6134:	fc 01       	movw	r30, r24
    6136:	80 81       	ld	r24, Z
    6138:	91 81       	ldd	r25, Z+1	; 0x01
    613a:	00 97       	sbiw	r24, 0x00	; 0
    613c:	c1 f0       	breq	.+48     	; 0x616e <_ZN6String4moveERS_+0x46>
    613e:	68 81       	ld	r22, Y
    6140:	79 81       	ldd	r23, Y+1	; 0x01
    6142:	61 15       	cp	r22, r1
    6144:	71 05       	cpc	r23, r1
    6146:	91 f0       	breq	.+36     	; 0x616c <_ZN6String4moveERS_+0x44>
    6148:	28 e1       	ldi	r18, 0x18	; 24
    614a:	30 e3       	ldi	r19, 0x30	; 48
    614c:	23 2b       	or	r18, r19
    614e:	71 f0       	breq	.+28     	; 0x616c <_ZN6String4moveERS_+0x44>
    6150:	42 81       	ldd	r20, Z+2	; 0x02
    6152:	53 81       	ldd	r21, Z+3	; 0x03
    6154:	2c 81       	ldd	r18, Y+4	; 0x04
    6156:	3d 81       	ldd	r19, Y+5	; 0x05
    6158:	42 17       	cp	r20, r18
    615a:	53 07       	cpc	r21, r19
    615c:	38 f0       	brcs	.+14     	; 0x616c <_ZN6String4moveERS_+0x44>
    615e:	ad d5       	rcall	.+2906   	; 0x6cba <strcpy>
    6160:	8c 81       	ldd	r24, Y+4	; 0x04
    6162:	9d 81       	ldd	r25, Y+5	; 0x05
    6164:	f8 01       	movw	r30, r16
    6166:	95 83       	std	Z+5, r25	; 0x05
    6168:	84 83       	std	Z+4, r24	; 0x04
    616a:	12 c0       	rjmp	.+36     	; 0x6190 <_ZN6String4moveERS_+0x68>
    616c:	16 d4       	rcall	.+2092   	; 0x699a <free>
    616e:	88 81       	ld	r24, Y
    6170:	99 81       	ldd	r25, Y+1	; 0x01
    6172:	f8 01       	movw	r30, r16
    6174:	91 83       	std	Z+1, r25	; 0x01
    6176:	80 83       	st	Z, r24
    6178:	8a 81       	ldd	r24, Y+2	; 0x02
    617a:	9b 81       	ldd	r25, Y+3	; 0x03
    617c:	93 83       	std	Z+3, r25	; 0x03
    617e:	82 83       	std	Z+2, r24	; 0x02
    6180:	8c 81       	ldd	r24, Y+4	; 0x04
    6182:	9d 81       	ldd	r25, Y+5	; 0x05
    6184:	95 83       	std	Z+5, r25	; 0x05
    6186:	84 83       	std	Z+4, r24	; 0x04
    6188:	19 82       	std	Y+1, r1	; 0x01
    618a:	18 82       	st	Y, r1
    618c:	1b 82       	std	Y+3, r1	; 0x03
    618e:	1a 82       	std	Y+2, r1	; 0x02
    6190:	1d 82       	std	Y+5, r1	; 0x05
    6192:	1c 82       	std	Y+4, r1	; 0x04
    6194:	df 91       	pop	r29
    6196:	cf 91       	pop	r28
    6198:	1f 91       	pop	r17
    619a:	0f 91       	pop	r16
    619c:	08 95       	ret

0000619e <_ZN6StringC1EOS_>:
    619e:	fc 01       	movw	r30, r24
    61a0:	11 82       	std	Z+1, r1	; 0x01
    61a2:	10 82       	st	Z, r1
    61a4:	13 82       	std	Z+3, r1	; 0x03
    61a6:	12 82       	std	Z+2, r1	; 0x02
    61a8:	15 82       	std	Z+5, r1	; 0x05
    61aa:	14 82       	std	Z+4, r1	; 0x04
    61ac:	bd cf       	rjmp	.-134    	; 0x6128 <_ZN6String4moveERS_>

000061ae <_ZN6StringaSERKS_>:
    61ae:	cf 93       	push	r28
    61b0:	df 93       	push	r29
    61b2:	ec 01       	movw	r28, r24
    61b4:	fb 01       	movw	r30, r22
    61b6:	86 17       	cp	r24, r22
    61b8:	97 07       	cpc	r25, r23
    61ba:	51 f0       	breq	.+20     	; 0x61d0 <_ZN6StringaSERKS_+0x22>
    61bc:	60 81       	ld	r22, Z
    61be:	71 81       	ldd	r23, Z+1	; 0x01
    61c0:	61 15       	cp	r22, r1
    61c2:	71 05       	cpc	r23, r1
    61c4:	21 f0       	breq	.+8      	; 0x61ce <_ZN6StringaSERKS_+0x20>
    61c6:	44 81       	ldd	r20, Z+4	; 0x04
    61c8:	55 81       	ldd	r21, Z+5	; 0x05
    61ca:	7c df       	rcall	.-264    	; 0x60c4 <_ZN6String4copyEPKcj>
    61cc:	01 c0       	rjmp	.+2      	; 0x61d0 <_ZN6StringaSERKS_+0x22>
    61ce:	35 df       	rcall	.-406    	; 0x603a <_ZN6String10invalidateEv>
    61d0:	ce 01       	movw	r24, r28
    61d2:	df 91       	pop	r29
    61d4:	cf 91       	pop	r28
    61d6:	08 95       	ret

000061d8 <_ZN6StringC1ERKS_>:
    61d8:	fc 01       	movw	r30, r24
    61da:	11 82       	std	Z+1, r1	; 0x01
    61dc:	10 82       	st	Z, r1
    61de:	13 82       	std	Z+3, r1	; 0x03
    61e0:	12 82       	std	Z+2, r1	; 0x02
    61e2:	15 82       	std	Z+5, r1	; 0x05
    61e4:	14 82       	std	Z+4, r1	; 0x04
    61e6:	e3 cf       	rjmp	.-58     	; 0x61ae <_ZN6StringaSERKS_>

000061e8 <_ZN6StringaSEOS_>:
    61e8:	cf 93       	push	r28
    61ea:	df 93       	push	r29
    61ec:	ec 01       	movw	r28, r24
    61ee:	86 17       	cp	r24, r22
    61f0:	97 07       	cpc	r25, r23
    61f2:	09 f0       	breq	.+2      	; 0x61f6 <_ZN6StringaSEOS_+0xe>
    61f4:	99 df       	rcall	.-206    	; 0x6128 <_ZN6String4moveERS_>
    61f6:	ce 01       	movw	r24, r28
    61f8:	df 91       	pop	r29
    61fa:	cf 91       	pop	r28
    61fc:	08 95       	ret

000061fe <_ZN6StringaSEPKc>:
    61fe:	cf 93       	push	r28
    6200:	df 93       	push	r29
    6202:	ec 01       	movw	r28, r24
    6204:	61 15       	cp	r22, r1
    6206:	71 05       	cpc	r23, r1
    6208:	51 f0       	breq	.+20     	; 0x621e <_ZN6StringaSEPKc+0x20>
    620a:	fb 01       	movw	r30, r22
    620c:	01 90       	ld	r0, Z+
    620e:	00 20       	and	r0, r0
    6210:	e9 f7       	brne	.-6      	; 0x620c <_ZN6StringaSEPKc+0xe>
    6212:	31 97       	sbiw	r30, 0x01	; 1
    6214:	af 01       	movw	r20, r30
    6216:	46 1b       	sub	r20, r22
    6218:	57 0b       	sbc	r21, r23
    621a:	54 df       	rcall	.-344    	; 0x60c4 <_ZN6String4copyEPKcj>
    621c:	01 c0       	rjmp	.+2      	; 0x6220 <_ZN6StringaSEPKc+0x22>
    621e:	0d df       	rcall	.-486    	; 0x603a <_ZN6String10invalidateEv>
    6220:	ce 01       	movw	r24, r28
    6222:	df 91       	pop	r29
    6224:	cf 91       	pop	r28
    6226:	08 95       	ret

00006228 <_ZN6StringC1Ehh>:
    6228:	0f 93       	push	r16
    622a:	1f 93       	push	r17
    622c:	cf 93       	push	r28
    622e:	df 93       	push	r29
    6230:	cd b7       	in	r28, 0x3d	; 61
    6232:	de b7       	in	r29, 0x3e	; 62
    6234:	29 97       	sbiw	r28, 0x09	; 9
    6236:	0f b6       	in	r0, 0x3f	; 63
    6238:	f8 94       	cli
    623a:	de bf       	out	0x3e, r29	; 62
    623c:	0f be       	out	0x3f, r0	; 63
    623e:	cd bf       	out	0x3d, r28	; 61
    6240:	8c 01       	movw	r16, r24
    6242:	86 2f       	mov	r24, r22
    6244:	f8 01       	movw	r30, r16
    6246:	11 82       	std	Z+1, r1	; 0x01
    6248:	10 82       	st	Z, r1
    624a:	13 82       	std	Z+3, r1	; 0x03
    624c:	12 82       	std	Z+2, r1	; 0x02
    624e:	15 82       	std	Z+5, r1	; 0x05
    6250:	14 82       	std	Z+4, r1	; 0x04
    6252:	50 e0       	ldi	r21, 0x00	; 0
    6254:	be 01       	movw	r22, r28
    6256:	6f 5f       	subi	r22, 0xFF	; 255
    6258:	7f 4f       	sbci	r23, 0xFF	; 255
    625a:	90 e0       	ldi	r25, 0x00	; 0
    625c:	78 d5       	rcall	.+2800   	; 0x6d4e <utoa>
    625e:	be 01       	movw	r22, r28
    6260:	6f 5f       	subi	r22, 0xFF	; 255
    6262:	7f 4f       	sbci	r23, 0xFF	; 255
    6264:	c8 01       	movw	r24, r16
    6266:	cb df       	rcall	.-106    	; 0x61fe <_ZN6StringaSEPKc>
    6268:	29 96       	adiw	r28, 0x09	; 9
    626a:	0f b6       	in	r0, 0x3f	; 63
    626c:	f8 94       	cli
    626e:	de bf       	out	0x3e, r29	; 62
    6270:	0f be       	out	0x3f, r0	; 63
    6272:	cd bf       	out	0x3d, r28	; 61
    6274:	df 91       	pop	r29
    6276:	cf 91       	pop	r28
    6278:	1f 91       	pop	r17
    627a:	0f 91       	pop	r16
    627c:	08 95       	ret

0000627e <_ZN6StringC1Emh>:
    627e:	0f 93       	push	r16
    6280:	1f 93       	push	r17
    6282:	cf 93       	push	r28
    6284:	df 93       	push	r29
    6286:	cd b7       	in	r28, 0x3d	; 61
    6288:	de b7       	in	r29, 0x3e	; 62
    628a:	a1 97       	sbiw	r28, 0x21	; 33
    628c:	0f b6       	in	r0, 0x3f	; 63
    628e:	f8 94       	cli
    6290:	de bf       	out	0x3e, r29	; 62
    6292:	0f be       	out	0x3f, r0	; 63
    6294:	cd bf       	out	0x3d, r28	; 61
    6296:	8c 01       	movw	r16, r24
    6298:	cb 01       	movw	r24, r22
    629a:	ba 01       	movw	r22, r20
    629c:	f8 01       	movw	r30, r16
    629e:	11 82       	std	Z+1, r1	; 0x01
    62a0:	10 82       	st	Z, r1
    62a2:	13 82       	std	Z+3, r1	; 0x03
    62a4:	12 82       	std	Z+2, r1	; 0x02
    62a6:	15 82       	std	Z+5, r1	; 0x05
    62a8:	14 82       	std	Z+4, r1	; 0x04
    62aa:	30 e0       	ldi	r19, 0x00	; 0
    62ac:	ae 01       	movw	r20, r28
    62ae:	4f 5f       	subi	r20, 0xFF	; 255
    62b0:	5f 4f       	sbci	r21, 0xFF	; 255
    62b2:	22 d5       	rcall	.+2628   	; 0x6cf8 <ultoa>
    62b4:	be 01       	movw	r22, r28
    62b6:	6f 5f       	subi	r22, 0xFF	; 255
    62b8:	7f 4f       	sbci	r23, 0xFF	; 255
    62ba:	c8 01       	movw	r24, r16
    62bc:	a0 df       	rcall	.-192    	; 0x61fe <_ZN6StringaSEPKc>
    62be:	a1 96       	adiw	r28, 0x21	; 33
    62c0:	0f b6       	in	r0, 0x3f	; 63
    62c2:	f8 94       	cli
    62c4:	de bf       	out	0x3e, r29	; 62
    62c6:	0f be       	out	0x3f, r0	; 63
    62c8:	cd bf       	out	0x3d, r28	; 61
    62ca:	df 91       	pop	r29
    62cc:	cf 91       	pop	r28
    62ce:	1f 91       	pop	r17
    62d0:	0f 91       	pop	r16
    62d2:	08 95       	ret

000062d4 <_ZN6StringC1Edh>:
    62d4:	ef 92       	push	r14
    62d6:	ff 92       	push	r15
    62d8:	0f 93       	push	r16
    62da:	1f 93       	push	r17
    62dc:	cf 93       	push	r28
    62de:	df 93       	push	r29
    62e0:	cd b7       	in	r28, 0x3d	; 61
    62e2:	de b7       	in	r29, 0x3e	; 62
    62e4:	a1 97       	sbiw	r28, 0x21	; 33
    62e6:	0f b6       	in	r0, 0x3f	; 63
    62e8:	f8 94       	cli
    62ea:	de bf       	out	0x3e, r29	; 62
    62ec:	0f be       	out	0x3f, r0	; 63
    62ee:	cd bf       	out	0x3d, r28	; 61
    62f0:	7c 01       	movw	r14, r24
    62f2:	cb 01       	movw	r24, r22
    62f4:	ba 01       	movw	r22, r20
    62f6:	f7 01       	movw	r30, r14
    62f8:	11 82       	std	Z+1, r1	; 0x01
    62fa:	10 82       	st	Z, r1
    62fc:	13 82       	std	Z+3, r1	; 0x03
    62fe:	12 82       	std	Z+2, r1	; 0x02
    6300:	15 82       	std	Z+5, r1	; 0x05
    6302:	14 82       	std	Z+4, r1	; 0x04
    6304:	42 e0       	ldi	r20, 0x02	; 2
    6306:	42 0f       	add	r20, r18
    6308:	8e 01       	movw	r16, r28
    630a:	0f 5f       	subi	r16, 0xFF	; 255
    630c:	1f 4f       	sbci	r17, 0xFF	; 255
    630e:	8e d2       	rcall	.+1308   	; 0x682c <dtostrf>
    6310:	bc 01       	movw	r22, r24
    6312:	c7 01       	movw	r24, r14
    6314:	74 df       	rcall	.-280    	; 0x61fe <_ZN6StringaSEPKc>
    6316:	a1 96       	adiw	r28, 0x21	; 33
    6318:	0f b6       	in	r0, 0x3f	; 63
    631a:	f8 94       	cli
    631c:	de bf       	out	0x3e, r29	; 62
    631e:	0f be       	out	0x3f, r0	; 63
    6320:	cd bf       	out	0x3d, r28	; 61
    6322:	df 91       	pop	r29
    6324:	cf 91       	pop	r28
    6326:	1f 91       	pop	r17
    6328:	0f 91       	pop	r16
    632a:	ff 90       	pop	r15
    632c:	ef 90       	pop	r14
    632e:	08 95       	ret

00006330 <_ZN6String6concatEPKcj>:
    6330:	ef 92       	push	r14
    6332:	ff 92       	push	r15
    6334:	0f 93       	push	r16
    6336:	1f 93       	push	r17
    6338:	cf 93       	push	r28
    633a:	df 93       	push	r29
    633c:	61 15       	cp	r22, r1
    633e:	71 05       	cpc	r23, r1
    6340:	11 f4       	brne	.+4      	; 0x6346 <_ZN6String6concatEPKcj+0x16>
    6342:	80 e0       	ldi	r24, 0x00	; 0
    6344:	1a c0       	rjmp	.+52     	; 0x637a <_ZN6String6concatEPKcj+0x4a>
    6346:	41 15       	cp	r20, r1
    6348:	51 05       	cpc	r21, r1
    634a:	b1 f0       	breq	.+44     	; 0x6378 <_ZN6String6concatEPKcj+0x48>
    634c:	7b 01       	movw	r14, r22
    634e:	ec 01       	movw	r28, r24
    6350:	8c 81       	ldd	r24, Y+4	; 0x04
    6352:	9d 81       	ldd	r25, Y+5	; 0x05
    6354:	8a 01       	movw	r16, r20
    6356:	08 0f       	add	r16, r24
    6358:	19 1f       	adc	r17, r25
    635a:	b8 01       	movw	r22, r16
    635c:	ce 01       	movw	r24, r28
    635e:	97 de       	rcall	.-722    	; 0x608e <_ZN6String7reserveEj>
    6360:	88 23       	and	r24, r24
    6362:	79 f3       	breq	.-34     	; 0x6342 <_ZN6String6concatEPKcj+0x12>
    6364:	28 81       	ld	r18, Y
    6366:	39 81       	ldd	r19, Y+1	; 0x01
    6368:	8c 81       	ldd	r24, Y+4	; 0x04
    636a:	9d 81       	ldd	r25, Y+5	; 0x05
    636c:	b7 01       	movw	r22, r14
    636e:	82 0f       	add	r24, r18
    6370:	93 1f       	adc	r25, r19
    6372:	a3 d4       	rcall	.+2374   	; 0x6cba <strcpy>
    6374:	1d 83       	std	Y+5, r17	; 0x05
    6376:	0c 83       	std	Y+4, r16	; 0x04
    6378:	81 e0       	ldi	r24, 0x01	; 1
    637a:	df 91       	pop	r29
    637c:	cf 91       	pop	r28
    637e:	1f 91       	pop	r17
    6380:	0f 91       	pop	r16
    6382:	ff 90       	pop	r15
    6384:	ef 90       	pop	r14
    6386:	08 95       	ret

00006388 <_ZN6String6concatERKS_>:
    6388:	fb 01       	movw	r30, r22
    638a:	44 81       	ldd	r20, Z+4	; 0x04
    638c:	55 81       	ldd	r21, Z+5	; 0x05
    638e:	60 81       	ld	r22, Z
    6390:	71 81       	ldd	r23, Z+1	; 0x01
    6392:	ce cf       	rjmp	.-100    	; 0x6330 <_ZN6String6concatEPKcj>

00006394 <_ZN6String6concatEPKc>:
    6394:	61 15       	cp	r22, r1
    6396:	71 05       	cpc	r23, r1
    6398:	49 f0       	breq	.+18     	; 0x63ac <_ZN6String6concatEPKc+0x18>
    639a:	fb 01       	movw	r30, r22
    639c:	01 90       	ld	r0, Z+
    639e:	00 20       	and	r0, r0
    63a0:	e9 f7       	brne	.-6      	; 0x639c <_ZN6String6concatEPKc+0x8>
    63a2:	31 97       	sbiw	r30, 0x01	; 1
    63a4:	af 01       	movw	r20, r30
    63a6:	46 1b       	sub	r20, r22
    63a8:	57 0b       	sbc	r21, r23
    63aa:	c2 cf       	rjmp	.-124    	; 0x6330 <_ZN6String6concatEPKcj>
    63ac:	80 e0       	ldi	r24, 0x00	; 0
    63ae:	08 95       	ret

000063b0 <_ZN6String6concatEc>:
    63b0:	cf 93       	push	r28
    63b2:	df 93       	push	r29
    63b4:	00 d0       	rcall	.+0      	; 0x63b6 <_ZN6String6concatEc+0x6>
    63b6:	cd b7       	in	r28, 0x3d	; 61
    63b8:	de b7       	in	r29, 0x3e	; 62
    63ba:	69 83       	std	Y+1, r22	; 0x01
    63bc:	1a 82       	std	Y+2, r1	; 0x02
    63be:	41 e0       	ldi	r20, 0x01	; 1
    63c0:	50 e0       	ldi	r21, 0x00	; 0
    63c2:	be 01       	movw	r22, r28
    63c4:	6f 5f       	subi	r22, 0xFF	; 255
    63c6:	7f 4f       	sbci	r23, 0xFF	; 255
    63c8:	b3 df       	rcall	.-154    	; 0x6330 <_ZN6String6concatEPKcj>
    63ca:	0f 90       	pop	r0
    63cc:	0f 90       	pop	r0
    63ce:	df 91       	pop	r29
    63d0:	cf 91       	pop	r28
    63d2:	08 95       	ret

000063d4 <_ZplRK15StringSumHelperRK6String>:
    63d4:	cf 93       	push	r28
    63d6:	df 93       	push	r29
    63d8:	ec 01       	movw	r28, r24
    63da:	fb 01       	movw	r30, r22
    63dc:	44 81       	ldd	r20, Z+4	; 0x04
    63de:	55 81       	ldd	r21, Z+5	; 0x05
    63e0:	60 81       	ld	r22, Z
    63e2:	71 81       	ldd	r23, Z+1	; 0x01
    63e4:	a5 df       	rcall	.-182    	; 0x6330 <_ZN6String6concatEPKcj>
    63e6:	81 11       	cpse	r24, r1
    63e8:	02 c0       	rjmp	.+4      	; 0x63ee <_ZplRK15StringSumHelperRK6String+0x1a>
    63ea:	ce 01       	movw	r24, r28
    63ec:	26 de       	rcall	.-948    	; 0x603a <_ZN6String10invalidateEv>
    63ee:	ce 01       	movw	r24, r28
    63f0:	df 91       	pop	r29
    63f2:	cf 91       	pop	r28
    63f4:	08 95       	ret

000063f6 <_ZplRK15StringSumHelperPKc>:
    63f6:	cf 93       	push	r28
    63f8:	df 93       	push	r29
    63fa:	ec 01       	movw	r28, r24
    63fc:	61 15       	cp	r22, r1
    63fe:	71 05       	cpc	r23, r1
    6400:	59 f0       	breq	.+22     	; 0x6418 <_ZplRK15StringSumHelperPKc+0x22>
    6402:	fb 01       	movw	r30, r22
    6404:	01 90       	ld	r0, Z+
    6406:	00 20       	and	r0, r0
    6408:	e9 f7       	brne	.-6      	; 0x6404 <_ZplRK15StringSumHelperPKc+0xe>
    640a:	31 97       	sbiw	r30, 0x01	; 1
    640c:	af 01       	movw	r20, r30
    640e:	46 1b       	sub	r20, r22
    6410:	57 0b       	sbc	r21, r23
    6412:	8e df       	rcall	.-228    	; 0x6330 <_ZN6String6concatEPKcj>
    6414:	81 11       	cpse	r24, r1
    6416:	02 c0       	rjmp	.+4      	; 0x641c <_ZplRK15StringSumHelperPKc+0x26>
    6418:	ce 01       	movw	r24, r28
    641a:	0f de       	rcall	.-994    	; 0x603a <_ZN6String10invalidateEv>
    641c:	ce 01       	movw	r24, r28
    641e:	df 91       	pop	r29
    6420:	cf 91       	pop	r28
    6422:	08 95       	ret

00006424 <_ZplRK15StringSumHelperc>:
    6424:	cf 93       	push	r28
    6426:	df 93       	push	r29
    6428:	ec 01       	movw	r28, r24
    642a:	c2 df       	rcall	.-124    	; 0x63b0 <_ZN6String6concatEc>
    642c:	81 11       	cpse	r24, r1
    642e:	02 c0       	rjmp	.+4      	; 0x6434 <_ZplRK15StringSumHelperc+0x10>
    6430:	ce 01       	movw	r24, r28
    6432:	03 de       	rcall	.-1018   	; 0x603a <_ZN6String10invalidateEv>
    6434:	ce 01       	movw	r24, r28
    6436:	df 91       	pop	r29
    6438:	cf 91       	pop	r28
    643a:	08 95       	ret

0000643c <_ZNK6String6equalsEPKc>:
    643c:	fc 01       	movw	r30, r24
    643e:	24 81       	ldd	r18, Z+4	; 0x04
    6440:	35 81       	ldd	r19, Z+5	; 0x05
    6442:	23 2b       	or	r18, r19
    6444:	31 f4       	brne	.+12     	; 0x6452 <_ZNK6String6equalsEPKc+0x16>
    6446:	21 e0       	ldi	r18, 0x01	; 1
    6448:	61 15       	cp	r22, r1
    644a:	71 05       	cpc	r23, r1
    644c:	99 f0       	breq	.+38     	; 0x6474 <_ZNK6String6equalsEPKc+0x38>
    644e:	fb 01       	movw	r30, r22
    6450:	08 c0       	rjmp	.+16     	; 0x6462 <_ZNK6String6equalsEPKc+0x26>
    6452:	fc 01       	movw	r30, r24
    6454:	80 81       	ld	r24, Z
    6456:	91 81       	ldd	r25, Z+1	; 0x01
    6458:	61 15       	cp	r22, r1
    645a:	71 05       	cpc	r23, r1
    645c:	31 f4       	brne	.+12     	; 0x646a <_ZNK6String6equalsEPKc+0x2e>
    645e:	21 e0       	ldi	r18, 0x01	; 1
    6460:	fc 01       	movw	r30, r24
    6462:	80 81       	ld	r24, Z
    6464:	88 23       	and	r24, r24
    6466:	31 f0       	breq	.+12     	; 0x6474 <_ZNK6String6equalsEPKc+0x38>
    6468:	04 c0       	rjmp	.+8      	; 0x6472 <_ZNK6String6equalsEPKc+0x36>
    646a:	1e d4       	rcall	.+2108   	; 0x6ca8 <strcmp>
    646c:	21 e0       	ldi	r18, 0x01	; 1
    646e:	89 2b       	or	r24, r25
    6470:	09 f0       	breq	.+2      	; 0x6474 <_ZNK6String6equalsEPKc+0x38>
    6472:	20 e0       	ldi	r18, 0x00	; 0
    6474:	82 2f       	mov	r24, r18
    6476:	08 95       	ret

00006478 <_ZNK6String9substringEjj>:
    6478:	bf 92       	push	r11
    647a:	cf 92       	push	r12
    647c:	df 92       	push	r13
    647e:	ef 92       	push	r14
    6480:	ff 92       	push	r15
    6482:	0f 93       	push	r16
    6484:	1f 93       	push	r17
    6486:	cf 93       	push	r28
    6488:	df 93       	push	r29
    648a:	7c 01       	movw	r14, r24
    648c:	6b 01       	movw	r12, r22
    648e:	8a 01       	movw	r16, r20
    6490:	e9 01       	movw	r28, r18
    6492:	24 17       	cp	r18, r20
    6494:	35 07       	cpc	r19, r21
    6496:	20 f4       	brcc	.+8      	; 0x64a0 <_ZNK6String9substringEjj+0x28>
    6498:	81 2f       	mov	r24, r17
    649a:	89 01       	movw	r16, r18
    649c:	c4 2f       	mov	r28, r20
    649e:	d8 2f       	mov	r29, r24
    64a0:	64 e8       	ldi	r22, 0x84	; 132
    64a2:	71 e0       	ldi	r23, 0x01	; 1
    64a4:	c7 01       	movw	r24, r14
    64a6:	2c de       	rcall	.-936    	; 0x6100 <_ZN6StringC1EPKc>
    64a8:	d6 01       	movw	r26, r12
    64aa:	14 96       	adiw	r26, 0x04	; 4
    64ac:	8d 91       	ld	r24, X+
    64ae:	9c 91       	ld	r25, X
    64b0:	15 97       	sbiw	r26, 0x05	; 5
    64b2:	08 17       	cp	r16, r24
    64b4:	19 07       	cpc	r17, r25
    64b6:	c0 f4       	brcc	.+48     	; 0x64e8 <_ZNK6String9substringEjj+0x70>
    64b8:	8c 17       	cp	r24, r28
    64ba:	9d 07       	cpc	r25, r29
    64bc:	08 f4       	brcc	.+2      	; 0x64c0 <_ZNK6String9substringEjj+0x48>
    64be:	ec 01       	movw	r28, r24
    64c0:	d6 01       	movw	r26, r12
    64c2:	ed 91       	ld	r30, X+
    64c4:	fc 91       	ld	r31, X
    64c6:	11 97       	sbiw	r26, 0x01	; 1
    64c8:	ec 0f       	add	r30, r28
    64ca:	fd 1f       	adc	r31, r29
    64cc:	b0 80       	ld	r11, Z
    64ce:	10 82       	st	Z, r1
    64d0:	6d 91       	ld	r22, X+
    64d2:	7c 91       	ld	r23, X
    64d4:	60 0f       	add	r22, r16
    64d6:	71 1f       	adc	r23, r17
    64d8:	c7 01       	movw	r24, r14
    64da:	91 de       	rcall	.-734    	; 0x61fe <_ZN6StringaSEPKc>
    64dc:	d6 01       	movw	r26, r12
    64de:	ed 91       	ld	r30, X+
    64e0:	fc 91       	ld	r31, X
    64e2:	ec 0f       	add	r30, r28
    64e4:	fd 1f       	adc	r31, r29
    64e6:	b0 82       	st	Z, r11
    64e8:	c7 01       	movw	r24, r14
    64ea:	df 91       	pop	r29
    64ec:	cf 91       	pop	r28
    64ee:	1f 91       	pop	r17
    64f0:	0f 91       	pop	r16
    64f2:	ff 90       	pop	r15
    64f4:	ef 90       	pop	r14
    64f6:	df 90       	pop	r13
    64f8:	cf 90       	pop	r12
    64fa:	bf 90       	pop	r11
    64fc:	08 95       	ret

000064fe <_ZN6String4trimEv>:

void String::trim(void)
{
    64fe:	af 92       	push	r10
    6500:	bf 92       	push	r11
    6502:	cf 92       	push	r12
    6504:	df 92       	push	r13
    6506:	ef 92       	push	r14
    6508:	ff 92       	push	r15
    650a:	0f 93       	push	r16
    650c:	1f 93       	push	r17
    650e:	cf 93       	push	r28
    6510:	df 93       	push	r29
	if (!buffer || len == 0) return;
    6512:	dc 01       	movw	r26, r24
    6514:	cd 90       	ld	r12, X+
    6516:	dc 90       	ld	r13, X
    6518:	11 97       	sbiw	r26, 0x01	; 1
    651a:	c1 14       	cp	r12, r1
    651c:	d1 04       	cpc	r13, r1
    651e:	09 f4       	brne	.+2      	; 0x6522 <_ZN6String4trimEv+0x24>
    6520:	3c c0       	rjmp	.+120    	; 0x659a <_ZN6String4trimEv+0x9c>
    6522:	14 96       	adiw	r26, 0x04	; 4
    6524:	cd 91       	ld	r28, X+
    6526:	dc 91       	ld	r29, X
    6528:	15 97       	sbiw	r26, 0x05	; 5
    652a:	20 97       	sbiw	r28, 0x00	; 0
    652c:	b1 f1       	breq	.+108    	; 0x659a <_ZN6String4trimEv+0x9c>
    652e:	8c 01       	movw	r16, r24
    6530:	76 01       	movw	r14, r12
    6532:	57 01       	movw	r10, r14
    6534:	bf ef       	ldi	r27, 0xFF	; 255
    6536:	ab 1a       	sub	r10, r27
    6538:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    653a:	f7 01       	movw	r30, r14
    653c:	80 81       	ld	r24, Z
    653e:	90 e0       	ldi	r25, 0x00	; 0
    6540:	99 d3       	rcall	.+1842   	; 0x6c74 <isspace>
    6542:	89 2b       	or	r24, r25
    6544:	11 f0       	breq	.+4      	; 0x654a <_ZN6String4trimEv+0x4c>
    6546:	75 01       	movw	r14, r10
    6548:	f4 cf       	rjmp	.-24     	; 0x6532 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    654a:	21 97       	sbiw	r28, 0x01	; 1
    654c:	cc 0d       	add	r28, r12
    654e:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    6550:	88 81       	ld	r24, Y
    6552:	90 e0       	ldi	r25, 0x00	; 0
    6554:	8f d3       	rcall	.+1822   	; 0x6c74 <isspace>
    6556:	89 2b       	or	r24, r25
    6558:	29 f0       	breq	.+10     	; 0x6564 <_ZN6String4trimEv+0x66>
    655a:	ce 15       	cp	r28, r14
    655c:	df 05       	cpc	r29, r15
    655e:	10 f0       	brcs	.+4      	; 0x6564 <_ZN6String4trimEv+0x66>
    6560:	21 97       	sbiw	r28, 0x01	; 1
    6562:	f6 cf       	rjmp	.-20     	; 0x6550 <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    6564:	ae 01       	movw	r20, r28
    6566:	4f 5f       	subi	r20, 0xFF	; 255
    6568:	5f 4f       	sbci	r21, 0xFF	; 255
    656a:	4e 19       	sub	r20, r14
    656c:	5f 09       	sbc	r21, r15
    656e:	d8 01       	movw	r26, r16
    6570:	15 96       	adiw	r26, 0x05	; 5
    6572:	5c 93       	st	X, r21
    6574:	4e 93       	st	-X, r20
    6576:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    6578:	ce 14       	cp	r12, r14
    657a:	df 04       	cpc	r13, r15
    657c:	18 f4       	brcc	.+6      	; 0x6584 <_ZN6String4trimEv+0x86>
    657e:	b7 01       	movw	r22, r14
    6580:	c6 01       	movw	r24, r12
    6582:	89 d3       	rcall	.+1810   	; 0x6c96 <memcpy>
	buffer[len] = 0;
    6584:	d8 01       	movw	r26, r16
    6586:	ed 91       	ld	r30, X+
    6588:	fc 91       	ld	r31, X
    658a:	11 97       	sbiw	r26, 0x01	; 1
    658c:	14 96       	adiw	r26, 0x04	; 4
    658e:	8d 91       	ld	r24, X+
    6590:	9c 91       	ld	r25, X
    6592:	15 97       	sbiw	r26, 0x05	; 5
    6594:	e8 0f       	add	r30, r24
    6596:	f9 1f       	adc	r31, r25
    6598:	10 82       	st	Z, r1
}
    659a:	df 91       	pop	r29
    659c:	cf 91       	pop	r28
    659e:	1f 91       	pop	r17
    65a0:	0f 91       	pop	r16
    65a2:	ff 90       	pop	r15
    65a4:	ef 90       	pop	r14
    65a6:	df 90       	pop	r13
    65a8:	cf 90       	pop	r12
    65aa:	bf 90       	pop	r11
    65ac:	af 90       	pop	r10
    65ae:	08 95       	ret

000065b0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    65b0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    65b2:	91 8d       	ldd	r25, Z+25	; 0x19
    65b4:	22 8d       	ldd	r18, Z+26	; 0x1a
    65b6:	89 2f       	mov	r24, r25
    65b8:	90 e0       	ldi	r25, 0x00	; 0
    65ba:	80 5c       	subi	r24, 0xC0	; 192
    65bc:	9f 4f       	sbci	r25, 0xFF	; 255
    65be:	82 1b       	sub	r24, r18
    65c0:	91 09       	sbc	r25, r1
}
    65c2:	8f 73       	andi	r24, 0x3F	; 63
    65c4:	99 27       	eor	r25, r25
    65c6:	08 95       	ret

000065c8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    65c8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    65ca:	91 8d       	ldd	r25, Z+25	; 0x19
    65cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    65ce:	98 17       	cp	r25, r24
    65d0:	31 f0       	breq	.+12     	; 0x65de <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    65d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    65d4:	e8 0f       	add	r30, r24
    65d6:	f1 1d       	adc	r31, r1
    65d8:	85 8d       	ldd	r24, Z+29	; 0x1d
    65da:	90 e0       	ldi	r25, 0x00	; 0
    65dc:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    65de:	8f ef       	ldi	r24, 0xFF	; 255
    65e0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    65e2:	08 95       	ret

000065e4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    65e4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    65e6:	91 8d       	ldd	r25, Z+25	; 0x19
    65e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    65ea:	98 17       	cp	r25, r24
    65ec:	61 f0       	breq	.+24     	; 0x6606 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    65ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    65f0:	df 01       	movw	r26, r30
    65f2:	a8 0f       	add	r26, r24
    65f4:	b1 1d       	adc	r27, r1
    65f6:	5d 96       	adiw	r26, 0x1d	; 29
    65f8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    65fa:	92 8d       	ldd	r25, Z+26	; 0x1a
    65fc:	9f 5f       	subi	r25, 0xFF	; 255
    65fe:	9f 73       	andi	r25, 0x3F	; 63
    6600:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    6602:	90 e0       	ldi	r25, 0x00	; 0
    6604:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    6606:	8f ef       	ldi	r24, 0xFF	; 255
    6608:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    660a:	08 95       	ret

0000660c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    660c:	fc 01       	movw	r30, r24
    660e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    6610:	44 8d       	ldd	r20, Z+28	; 0x1c
    6612:	25 2f       	mov	r18, r21
    6614:	30 e0       	ldi	r19, 0x00	; 0
    6616:	84 2f       	mov	r24, r20
    6618:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    661a:	82 1b       	sub	r24, r18
    661c:	93 0b       	sbc	r25, r19
    661e:	54 17       	cp	r21, r20
    6620:	10 f0       	brcs	.+4      	; 0x6626 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    6622:	cf 96       	adiw	r24, 0x3f	; 63
    6624:	08 95       	ret
  return tail - head - 1;
    6626:	01 97       	sbiw	r24, 0x01	; 1
}
    6628:	08 95       	ret

0000662a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    662a:	8d ea       	ldi	r24, 0xAD	; 173
    662c:	9c e2       	ldi	r25, 0x2C	; 44
    662e:	89 2b       	or	r24, r25
    6630:	41 f0       	breq	.+16     	; 0x6642 <_Z14serialEventRunv+0x18>
    6632:	80 e0       	ldi	r24, 0x00	; 0
    6634:	90 e0       	ldi	r25, 0x00	; 0
    6636:	89 2b       	or	r24, r25
    6638:	21 f0       	breq	.+8      	; 0x6642 <_Z14serialEventRunv+0x18>
    663a:	8f d9       	rcall	.-3298   	; 0x595a <_Z17Serial0_availablev>
    663c:	81 11       	cpse	r24, r1
    663e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    6642:	08 95       	ret

00006644 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    6644:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    6646:	84 8d       	ldd	r24, Z+28	; 0x1c
    6648:	df 01       	movw	r26, r30
    664a:	a8 0f       	add	r26, r24
    664c:	b1 1d       	adc	r27, r1
    664e:	a3 5a       	subi	r26, 0xA3	; 163
    6650:	bf 4f       	sbci	r27, 0xFF	; 255
    6652:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    6654:	84 8d       	ldd	r24, Z+28	; 0x1c
    6656:	90 e0       	ldi	r25, 0x00	; 0
    6658:	01 96       	adiw	r24, 0x01	; 1
    665a:	8f 73       	andi	r24, 0x3F	; 63
    665c:	99 27       	eor	r25, r25
    665e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    6660:	a6 89       	ldd	r26, Z+22	; 0x16
    6662:	b7 89       	ldd	r27, Z+23	; 0x17
    6664:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    6666:	a0 89       	ldd	r26, Z+16	; 0x10
    6668:	b1 89       	ldd	r27, Z+17	; 0x11
    666a:	8c 91       	ld	r24, X
    666c:	83 70       	andi	r24, 0x03	; 3
    666e:	80 64       	ori	r24, 0x40	; 64
    6670:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    6672:	93 8d       	ldd	r25, Z+27	; 0x1b
    6674:	84 8d       	ldd	r24, Z+28	; 0x1c
    6676:	98 13       	cpse	r25, r24
    6678:	06 c0       	rjmp	.+12     	; 0x6686 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    667a:	02 88       	ldd	r0, Z+18	; 0x12
    667c:	f3 89       	ldd	r31, Z+19	; 0x13
    667e:	e0 2d       	mov	r30, r0
    6680:	80 81       	ld	r24, Z
    6682:	8f 7d       	andi	r24, 0xDF	; 223
    6684:	80 83       	st	Z, r24
    6686:	08 95       	ret

00006688 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    6688:	ef 92       	push	r14
    668a:	ff 92       	push	r15
    668c:	0f 93       	push	r16
    668e:	1f 93       	push	r17
    6690:	cf 93       	push	r28
    6692:	df 93       	push	r29
    6694:	ec 01       	movw	r28, r24
  _written = true;
    6696:	81 e0       	ldi	r24, 0x01	; 1
    6698:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    669a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    669c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    669e:	98 13       	cpse	r25, r24
    66a0:	05 c0       	rjmp	.+10     	; 0x66ac <_ZN14HardwareSerial5writeEh+0x24>
    66a2:	e8 89       	ldd	r30, Y+16	; 0x10
    66a4:	f9 89       	ldd	r31, Y+17	; 0x11
    66a6:	80 81       	ld	r24, Z
    66a8:	85 fd       	sbrc	r24, 5
    66aa:	25 c0       	rjmp	.+74     	; 0x66f6 <_ZN14HardwareSerial5writeEh+0x6e>
    66ac:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    66ae:	0b 8d       	ldd	r16, Y+27	; 0x1b
    66b0:	10 e0       	ldi	r17, 0x00	; 0
    66b2:	0f 5f       	subi	r16, 0xFF	; 255
    66b4:	1f 4f       	sbci	r17, 0xFF	; 255
    66b6:	0f 73       	andi	r16, 0x3F	; 63
    66b8:	11 27       	eor	r17, r17
    66ba:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    66bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    66be:	e8 12       	cpse	r14, r24
    66c0:	0b c0       	rjmp	.+22     	; 0x66d8 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    66c2:	0f b6       	in	r0, 0x3f	; 63
    66c4:	07 fc       	sbrc	r0, 7
    66c6:	fa cf       	rjmp	.-12     	; 0x66bc <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    66c8:	e8 89       	ldd	r30, Y+16	; 0x10
    66ca:	f9 89       	ldd	r31, Y+17	; 0x11
    66cc:	80 81       	ld	r24, Z
    66ce:	85 ff       	sbrs	r24, 5
    66d0:	f5 cf       	rjmp	.-22     	; 0x66bc <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    66d2:	ce 01       	movw	r24, r28
    66d4:	b7 df       	rcall	.-146    	; 0x6644 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    66d6:	f2 cf       	rjmp	.-28     	; 0x66bc <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    66d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    66da:	fe 01       	movw	r30, r28
    66dc:	e8 0f       	add	r30, r24
    66de:	f1 1d       	adc	r31, r1
    66e0:	e3 5a       	subi	r30, 0xA3	; 163
    66e2:	ff 4f       	sbci	r31, 0xFF	; 255
    66e4:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    66e6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    66e8:	f8 94       	cli
    _tx_buffer_head = i;
    66ea:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    66ec:	ea 89       	ldd	r30, Y+18	; 0x12
    66ee:	fb 89       	ldd	r31, Y+19	; 0x13
    66f0:	80 81       	ld	r24, Z
    66f2:	80 62       	ori	r24, 0x20	; 32
    66f4:	0a c0       	rjmp	.+20     	; 0x670a <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    66f6:	9f b7       	in	r25, 0x3f	; 63
    66f8:	f8 94       	cli
      *_udr = c;
    66fa:	ee 89       	ldd	r30, Y+22	; 0x16
    66fc:	ff 89       	ldd	r31, Y+23	; 0x17
    66fe:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    6700:	e8 89       	ldd	r30, Y+16	; 0x10
    6702:	f9 89       	ldd	r31, Y+17	; 0x11
    6704:	80 81       	ld	r24, Z
    6706:	83 70       	andi	r24, 0x03	; 3
    6708:	80 64       	ori	r24, 0x40	; 64
    670a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    670c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    670e:	81 e0       	ldi	r24, 0x01	; 1
    6710:	90 e0       	ldi	r25, 0x00	; 0
    6712:	df 91       	pop	r29
    6714:	cf 91       	pop	r28
    6716:	1f 91       	pop	r17
    6718:	0f 91       	pop	r16
    671a:	ff 90       	pop	r15
    671c:	ef 90       	pop	r14
    671e:	08 95       	ret

00006720 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    6720:	cf 93       	push	r28
    6722:	df 93       	push	r29
    6724:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    6726:	88 8d       	ldd	r24, Y+24	; 0x18
    6728:	88 23       	and	r24, r24
    672a:	c1 f0       	breq	.+48     	; 0x675c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    672c:	ea 89       	ldd	r30, Y+18	; 0x12
    672e:	fb 89       	ldd	r31, Y+19	; 0x13
    6730:	80 81       	ld	r24, Z
    6732:	85 fd       	sbrc	r24, 5
    6734:	05 c0       	rjmp	.+10     	; 0x6740 <_ZN14HardwareSerial5flushEv+0x20>
    6736:	a8 89       	ldd	r26, Y+16	; 0x10
    6738:	b9 89       	ldd	r27, Y+17	; 0x11
    673a:	8c 91       	ld	r24, X
    673c:	86 fd       	sbrc	r24, 6
    673e:	0e c0       	rjmp	.+28     	; 0x675c <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    6740:	0f b6       	in	r0, 0x3f	; 63
    6742:	07 fc       	sbrc	r0, 7
    6744:	f5 cf       	rjmp	.-22     	; 0x6730 <_ZN14HardwareSerial5flushEv+0x10>
    6746:	80 81       	ld	r24, Z
    6748:	85 ff       	sbrs	r24, 5
    674a:	f2 cf       	rjmp	.-28     	; 0x6730 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    674c:	a8 89       	ldd	r26, Y+16	; 0x10
    674e:	b9 89       	ldd	r27, Y+17	; 0x11
    6750:	8c 91       	ld	r24, X
    6752:	85 ff       	sbrs	r24, 5
    6754:	ed cf       	rjmp	.-38     	; 0x6730 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    6756:	ce 01       	movw	r24, r28
    6758:	75 df       	rcall	.-278    	; 0x6644 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    675a:	e8 cf       	rjmp	.-48     	; 0x672c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    675c:	df 91       	pop	r29
    675e:	cf 91       	pop	r28
    6760:	08 95       	ret

00006762 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    6762:	08 95       	ret

00006764 <__udivmodqi4>:
    6764:	99 1b       	sub	r25, r25
    6766:	79 e0       	ldi	r23, 0x09	; 9
    6768:	04 c0       	rjmp	.+8      	; 0x6772 <__udivmodqi4_ep>

0000676a <__udivmodqi4_loop>:
    676a:	99 1f       	adc	r25, r25
    676c:	96 17       	cp	r25, r22
    676e:	08 f0       	brcs	.+2      	; 0x6772 <__udivmodqi4_ep>
    6770:	96 1b       	sub	r25, r22

00006772 <__udivmodqi4_ep>:
    6772:	88 1f       	adc	r24, r24
    6774:	7a 95       	dec	r23
    6776:	c9 f7       	brne	.-14     	; 0x676a <__udivmodqi4_loop>
    6778:	80 95       	com	r24
    677a:	08 95       	ret

0000677c <__udivmodhi4>:
    677c:	aa 1b       	sub	r26, r26
    677e:	bb 1b       	sub	r27, r27
    6780:	51 e1       	ldi	r21, 0x11	; 17
    6782:	07 c0       	rjmp	.+14     	; 0x6792 <__udivmodhi4_ep>

00006784 <__udivmodhi4_loop>:
    6784:	aa 1f       	adc	r26, r26
    6786:	bb 1f       	adc	r27, r27
    6788:	a6 17       	cp	r26, r22
    678a:	b7 07       	cpc	r27, r23
    678c:	10 f0       	brcs	.+4      	; 0x6792 <__udivmodhi4_ep>
    678e:	a6 1b       	sub	r26, r22
    6790:	b7 0b       	sbc	r27, r23

00006792 <__udivmodhi4_ep>:
    6792:	88 1f       	adc	r24, r24
    6794:	99 1f       	adc	r25, r25
    6796:	5a 95       	dec	r21
    6798:	a9 f7       	brne	.-22     	; 0x6784 <__udivmodhi4_loop>
    679a:	80 95       	com	r24
    679c:	90 95       	com	r25
    679e:	bc 01       	movw	r22, r24
    67a0:	cd 01       	movw	r24, r26
    67a2:	08 95       	ret

000067a4 <__udivmodsi4>:
    67a4:	a1 e2       	ldi	r26, 0x21	; 33
    67a6:	1a 2e       	mov	r1, r26
    67a8:	aa 1b       	sub	r26, r26
    67aa:	bb 1b       	sub	r27, r27
    67ac:	fd 01       	movw	r30, r26
    67ae:	0d c0       	rjmp	.+26     	; 0x67ca <__udivmodsi4_ep>

000067b0 <__udivmodsi4_loop>:
    67b0:	aa 1f       	adc	r26, r26
    67b2:	bb 1f       	adc	r27, r27
    67b4:	ee 1f       	adc	r30, r30
    67b6:	ff 1f       	adc	r31, r31
    67b8:	a2 17       	cp	r26, r18
    67ba:	b3 07       	cpc	r27, r19
    67bc:	e4 07       	cpc	r30, r20
    67be:	f5 07       	cpc	r31, r21
    67c0:	20 f0       	brcs	.+8      	; 0x67ca <__udivmodsi4_ep>
    67c2:	a2 1b       	sub	r26, r18
    67c4:	b3 0b       	sbc	r27, r19
    67c6:	e4 0b       	sbc	r30, r20
    67c8:	f5 0b       	sbc	r31, r21

000067ca <__udivmodsi4_ep>:
    67ca:	66 1f       	adc	r22, r22
    67cc:	77 1f       	adc	r23, r23
    67ce:	88 1f       	adc	r24, r24
    67d0:	99 1f       	adc	r25, r25
    67d2:	1a 94       	dec	r1
    67d4:	69 f7       	brne	.-38     	; 0x67b0 <__udivmodsi4_loop>
    67d6:	60 95       	com	r22
    67d8:	70 95       	com	r23
    67da:	80 95       	com	r24
    67dc:	90 95       	com	r25
    67de:	9b 01       	movw	r18, r22
    67e0:	ac 01       	movw	r20, r24
    67e2:	bd 01       	movw	r22, r26
    67e4:	cf 01       	movw	r24, r30
    67e6:	08 95       	ret

000067e8 <__tablejump2__>:
    67e8:	ee 0f       	add	r30, r30
    67ea:	ff 1f       	adc	r31, r31
    67ec:	00 24       	eor	r0, r0
    67ee:	00 1c       	adc	r0, r0
    67f0:	0b be       	out	0x3b, r0	; 59
    67f2:	07 90       	elpm	r0, Z+
    67f4:	f6 91       	elpm	r31, Z
    67f6:	e0 2d       	mov	r30, r0
    67f8:	09 94       	ijmp

000067fa <__umulhisi3>:
    67fa:	a2 9f       	mul	r26, r18
    67fc:	b0 01       	movw	r22, r0
    67fe:	b3 9f       	mul	r27, r19
    6800:	c0 01       	movw	r24, r0
    6802:	a3 9f       	mul	r26, r19
    6804:	70 0d       	add	r23, r0
    6806:	81 1d       	adc	r24, r1
    6808:	11 24       	eor	r1, r1
    680a:	91 1d       	adc	r25, r1
    680c:	b2 9f       	mul	r27, r18
    680e:	70 0d       	add	r23, r0
    6810:	81 1d       	adc	r24, r1
    6812:	11 24       	eor	r1, r1
    6814:	91 1d       	adc	r25, r1
    6816:	08 95       	ret

00006818 <__muluhisi3>:
    6818:	f0 df       	rcall	.-32     	; 0x67fa <__umulhisi3>
    681a:	a5 9f       	mul	r26, r21
    681c:	90 0d       	add	r25, r0
    681e:	b4 9f       	mul	r27, r20
    6820:	90 0d       	add	r25, r0
    6822:	a4 9f       	mul	r26, r20
    6824:	80 0d       	add	r24, r0
    6826:	91 1d       	adc	r25, r1
    6828:	11 24       	eor	r1, r1
    682a:	08 95       	ret

0000682c <dtostrf>:
    682c:	ef 92       	push	r14
    682e:	0f 93       	push	r16
    6830:	1f 93       	push	r17
    6832:	cf 93       	push	r28
    6834:	df 93       	push	r29
    6836:	e8 01       	movw	r28, r16
    6838:	47 fd       	sbrc	r20, 7
    683a:	02 c0       	rjmp	.+4      	; 0x6840 <dtostrf+0x14>
    683c:	34 e0       	ldi	r19, 0x04	; 4
    683e:	01 c0       	rjmp	.+2      	; 0x6842 <dtostrf+0x16>
    6840:	34 e1       	ldi	r19, 0x14	; 20
    6842:	04 2e       	mov	r0, r20
    6844:	00 0c       	add	r0, r0
    6846:	55 0b       	sbc	r21, r21
    6848:	57 ff       	sbrs	r21, 7
    684a:	03 c0       	rjmp	.+6      	; 0x6852 <dtostrf+0x26>
    684c:	51 95       	neg	r21
    684e:	41 95       	neg	r20
    6850:	51 09       	sbc	r21, r1
    6852:	e3 2e       	mov	r14, r19
    6854:	02 2f       	mov	r16, r18
    6856:	24 2f       	mov	r18, r20
    6858:	ae 01       	movw	r20, r28
    685a:	9c d2       	rcall	.+1336   	; 0x6d94 <dtoa_prf>
    685c:	ce 01       	movw	r24, r28
    685e:	df 91       	pop	r29
    6860:	cf 91       	pop	r28
    6862:	1f 91       	pop	r17
    6864:	0f 91       	pop	r16
    6866:	ef 90       	pop	r14
    6868:	08 95       	ret

0000686a <malloc>:
    686a:	0f 93       	push	r16
    686c:	1f 93       	push	r17
    686e:	cf 93       	push	r28
    6870:	df 93       	push	r29
    6872:	82 30       	cpi	r24, 0x02	; 2
    6874:	91 05       	cpc	r25, r1
    6876:	10 f4       	brcc	.+4      	; 0x687c <malloc+0x12>
    6878:	82 e0       	ldi	r24, 0x02	; 2
    687a:	90 e0       	ldi	r25, 0x00	; 0
    687c:	e0 91 30 0b 	lds	r30, 0x0B30	; 0x800b30 <__flp>
    6880:	f0 91 31 0b 	lds	r31, 0x0B31	; 0x800b31 <__flp+0x1>
    6884:	20 e0       	ldi	r18, 0x00	; 0
    6886:	30 e0       	ldi	r19, 0x00	; 0
    6888:	a0 e0       	ldi	r26, 0x00	; 0
    688a:	b0 e0       	ldi	r27, 0x00	; 0
    688c:	30 97       	sbiw	r30, 0x00	; 0
    688e:	19 f1       	breq	.+70     	; 0x68d6 <malloc+0x6c>
    6890:	40 81       	ld	r20, Z
    6892:	51 81       	ldd	r21, Z+1	; 0x01
    6894:	02 81       	ldd	r16, Z+2	; 0x02
    6896:	13 81       	ldd	r17, Z+3	; 0x03
    6898:	48 17       	cp	r20, r24
    689a:	59 07       	cpc	r21, r25
    689c:	c8 f0       	brcs	.+50     	; 0x68d0 <malloc+0x66>
    689e:	84 17       	cp	r24, r20
    68a0:	95 07       	cpc	r25, r21
    68a2:	69 f4       	brne	.+26     	; 0x68be <malloc+0x54>
    68a4:	10 97       	sbiw	r26, 0x00	; 0
    68a6:	31 f0       	breq	.+12     	; 0x68b4 <malloc+0x4a>
    68a8:	12 96       	adiw	r26, 0x02	; 2
    68aa:	0c 93       	st	X, r16
    68ac:	12 97       	sbiw	r26, 0x02	; 2
    68ae:	13 96       	adiw	r26, 0x03	; 3
    68b0:	1c 93       	st	X, r17
    68b2:	27 c0       	rjmp	.+78     	; 0x6902 <malloc+0x98>
    68b4:	00 93 30 0b 	sts	0x0B30, r16	; 0x800b30 <__flp>
    68b8:	10 93 31 0b 	sts	0x0B31, r17	; 0x800b31 <__flp+0x1>
    68bc:	22 c0       	rjmp	.+68     	; 0x6902 <malloc+0x98>
    68be:	21 15       	cp	r18, r1
    68c0:	31 05       	cpc	r19, r1
    68c2:	19 f0       	breq	.+6      	; 0x68ca <malloc+0x60>
    68c4:	42 17       	cp	r20, r18
    68c6:	53 07       	cpc	r21, r19
    68c8:	18 f4       	brcc	.+6      	; 0x68d0 <malloc+0x66>
    68ca:	9a 01       	movw	r18, r20
    68cc:	bd 01       	movw	r22, r26
    68ce:	ef 01       	movw	r28, r30
    68d0:	df 01       	movw	r26, r30
    68d2:	f8 01       	movw	r30, r16
    68d4:	db cf       	rjmp	.-74     	; 0x688c <malloc+0x22>
    68d6:	21 15       	cp	r18, r1
    68d8:	31 05       	cpc	r19, r1
    68da:	f9 f0       	breq	.+62     	; 0x691a <malloc+0xb0>
    68dc:	28 1b       	sub	r18, r24
    68de:	39 0b       	sbc	r19, r25
    68e0:	24 30       	cpi	r18, 0x04	; 4
    68e2:	31 05       	cpc	r19, r1
    68e4:	80 f4       	brcc	.+32     	; 0x6906 <malloc+0x9c>
    68e6:	8a 81       	ldd	r24, Y+2	; 0x02
    68e8:	9b 81       	ldd	r25, Y+3	; 0x03
    68ea:	61 15       	cp	r22, r1
    68ec:	71 05       	cpc	r23, r1
    68ee:	21 f0       	breq	.+8      	; 0x68f8 <malloc+0x8e>
    68f0:	fb 01       	movw	r30, r22
    68f2:	93 83       	std	Z+3, r25	; 0x03
    68f4:	82 83       	std	Z+2, r24	; 0x02
    68f6:	04 c0       	rjmp	.+8      	; 0x6900 <malloc+0x96>
    68f8:	90 93 31 0b 	sts	0x0B31, r25	; 0x800b31 <__flp+0x1>
    68fc:	80 93 30 0b 	sts	0x0B30, r24	; 0x800b30 <__flp>
    6900:	fe 01       	movw	r30, r28
    6902:	32 96       	adiw	r30, 0x02	; 2
    6904:	44 c0       	rjmp	.+136    	; 0x698e <malloc+0x124>
    6906:	fe 01       	movw	r30, r28
    6908:	e2 0f       	add	r30, r18
    690a:	f3 1f       	adc	r31, r19
    690c:	81 93       	st	Z+, r24
    690e:	91 93       	st	Z+, r25
    6910:	22 50       	subi	r18, 0x02	; 2
    6912:	31 09       	sbc	r19, r1
    6914:	39 83       	std	Y+1, r19	; 0x01
    6916:	28 83       	st	Y, r18
    6918:	3a c0       	rjmp	.+116    	; 0x698e <malloc+0x124>
    691a:	20 91 2e 0b 	lds	r18, 0x0B2E	; 0x800b2e <__brkval>
    691e:	30 91 2f 0b 	lds	r19, 0x0B2F	; 0x800b2f <__brkval+0x1>
    6922:	23 2b       	or	r18, r19
    6924:	41 f4       	brne	.+16     	; 0x6936 <malloc+0xcc>
    6926:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    692a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    692e:	30 93 2f 0b 	sts	0x0B2F, r19	; 0x800b2f <__brkval+0x1>
    6932:	20 93 2e 0b 	sts	0x0B2E, r18	; 0x800b2e <__brkval>
    6936:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    693a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    693e:	21 15       	cp	r18, r1
    6940:	31 05       	cpc	r19, r1
    6942:	41 f4       	brne	.+16     	; 0x6954 <malloc+0xea>
    6944:	2d b7       	in	r18, 0x3d	; 61
    6946:	3e b7       	in	r19, 0x3e	; 62
    6948:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    694c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6950:	24 1b       	sub	r18, r20
    6952:	35 0b       	sbc	r19, r21
    6954:	e0 91 2e 0b 	lds	r30, 0x0B2E	; 0x800b2e <__brkval>
    6958:	f0 91 2f 0b 	lds	r31, 0x0B2F	; 0x800b2f <__brkval+0x1>
    695c:	e2 17       	cp	r30, r18
    695e:	f3 07       	cpc	r31, r19
    6960:	a0 f4       	brcc	.+40     	; 0x698a <malloc+0x120>
    6962:	2e 1b       	sub	r18, r30
    6964:	3f 0b       	sbc	r19, r31
    6966:	28 17       	cp	r18, r24
    6968:	39 07       	cpc	r19, r25
    696a:	78 f0       	brcs	.+30     	; 0x698a <malloc+0x120>
    696c:	ac 01       	movw	r20, r24
    696e:	4e 5f       	subi	r20, 0xFE	; 254
    6970:	5f 4f       	sbci	r21, 0xFF	; 255
    6972:	24 17       	cp	r18, r20
    6974:	35 07       	cpc	r19, r21
    6976:	48 f0       	brcs	.+18     	; 0x698a <malloc+0x120>
    6978:	4e 0f       	add	r20, r30
    697a:	5f 1f       	adc	r21, r31
    697c:	50 93 2f 0b 	sts	0x0B2F, r21	; 0x800b2f <__brkval+0x1>
    6980:	40 93 2e 0b 	sts	0x0B2E, r20	; 0x800b2e <__brkval>
    6984:	81 93       	st	Z+, r24
    6986:	91 93       	st	Z+, r25
    6988:	02 c0       	rjmp	.+4      	; 0x698e <malloc+0x124>
    698a:	e0 e0       	ldi	r30, 0x00	; 0
    698c:	f0 e0       	ldi	r31, 0x00	; 0
    698e:	cf 01       	movw	r24, r30
    6990:	df 91       	pop	r29
    6992:	cf 91       	pop	r28
    6994:	1f 91       	pop	r17
    6996:	0f 91       	pop	r16
    6998:	08 95       	ret

0000699a <free>:
    699a:	cf 93       	push	r28
    699c:	df 93       	push	r29
    699e:	00 97       	sbiw	r24, 0x00	; 0
    69a0:	09 f4       	brne	.+2      	; 0x69a4 <free+0xa>
    69a2:	81 c0       	rjmp	.+258    	; 0x6aa6 <free+0x10c>
    69a4:	fc 01       	movw	r30, r24
    69a6:	32 97       	sbiw	r30, 0x02	; 2
    69a8:	13 82       	std	Z+3, r1	; 0x03
    69aa:	12 82       	std	Z+2, r1	; 0x02
    69ac:	a0 91 30 0b 	lds	r26, 0x0B30	; 0x800b30 <__flp>
    69b0:	b0 91 31 0b 	lds	r27, 0x0B31	; 0x800b31 <__flp+0x1>
    69b4:	10 97       	sbiw	r26, 0x00	; 0
    69b6:	81 f4       	brne	.+32     	; 0x69d8 <free+0x3e>
    69b8:	20 81       	ld	r18, Z
    69ba:	31 81       	ldd	r19, Z+1	; 0x01
    69bc:	82 0f       	add	r24, r18
    69be:	93 1f       	adc	r25, r19
    69c0:	20 91 2e 0b 	lds	r18, 0x0B2E	; 0x800b2e <__brkval>
    69c4:	30 91 2f 0b 	lds	r19, 0x0B2F	; 0x800b2f <__brkval+0x1>
    69c8:	28 17       	cp	r18, r24
    69ca:	39 07       	cpc	r19, r25
    69cc:	51 f5       	brne	.+84     	; 0x6a22 <free+0x88>
    69ce:	f0 93 2f 0b 	sts	0x0B2F, r31	; 0x800b2f <__brkval+0x1>
    69d2:	e0 93 2e 0b 	sts	0x0B2E, r30	; 0x800b2e <__brkval>
    69d6:	67 c0       	rjmp	.+206    	; 0x6aa6 <free+0x10c>
    69d8:	ed 01       	movw	r28, r26
    69da:	20 e0       	ldi	r18, 0x00	; 0
    69dc:	30 e0       	ldi	r19, 0x00	; 0
    69de:	ce 17       	cp	r28, r30
    69e0:	df 07       	cpc	r29, r31
    69e2:	40 f4       	brcc	.+16     	; 0x69f4 <free+0x5a>
    69e4:	4a 81       	ldd	r20, Y+2	; 0x02
    69e6:	5b 81       	ldd	r21, Y+3	; 0x03
    69e8:	9e 01       	movw	r18, r28
    69ea:	41 15       	cp	r20, r1
    69ec:	51 05       	cpc	r21, r1
    69ee:	f1 f0       	breq	.+60     	; 0x6a2c <free+0x92>
    69f0:	ea 01       	movw	r28, r20
    69f2:	f5 cf       	rjmp	.-22     	; 0x69de <free+0x44>
    69f4:	d3 83       	std	Z+3, r29	; 0x03
    69f6:	c2 83       	std	Z+2, r28	; 0x02
    69f8:	40 81       	ld	r20, Z
    69fa:	51 81       	ldd	r21, Z+1	; 0x01
    69fc:	84 0f       	add	r24, r20
    69fe:	95 1f       	adc	r25, r21
    6a00:	c8 17       	cp	r28, r24
    6a02:	d9 07       	cpc	r29, r25
    6a04:	59 f4       	brne	.+22     	; 0x6a1c <free+0x82>
    6a06:	88 81       	ld	r24, Y
    6a08:	99 81       	ldd	r25, Y+1	; 0x01
    6a0a:	84 0f       	add	r24, r20
    6a0c:	95 1f       	adc	r25, r21
    6a0e:	02 96       	adiw	r24, 0x02	; 2
    6a10:	91 83       	std	Z+1, r25	; 0x01
    6a12:	80 83       	st	Z, r24
    6a14:	8a 81       	ldd	r24, Y+2	; 0x02
    6a16:	9b 81       	ldd	r25, Y+3	; 0x03
    6a18:	93 83       	std	Z+3, r25	; 0x03
    6a1a:	82 83       	std	Z+2, r24	; 0x02
    6a1c:	21 15       	cp	r18, r1
    6a1e:	31 05       	cpc	r19, r1
    6a20:	29 f4       	brne	.+10     	; 0x6a2c <free+0x92>
    6a22:	f0 93 31 0b 	sts	0x0B31, r31	; 0x800b31 <__flp+0x1>
    6a26:	e0 93 30 0b 	sts	0x0B30, r30	; 0x800b30 <__flp>
    6a2a:	3d c0       	rjmp	.+122    	; 0x6aa6 <free+0x10c>
    6a2c:	e9 01       	movw	r28, r18
    6a2e:	fb 83       	std	Y+3, r31	; 0x03
    6a30:	ea 83       	std	Y+2, r30	; 0x02
    6a32:	49 91       	ld	r20, Y+
    6a34:	59 91       	ld	r21, Y+
    6a36:	c4 0f       	add	r28, r20
    6a38:	d5 1f       	adc	r29, r21
    6a3a:	ec 17       	cp	r30, r28
    6a3c:	fd 07       	cpc	r31, r29
    6a3e:	61 f4       	brne	.+24     	; 0x6a58 <free+0xbe>
    6a40:	80 81       	ld	r24, Z
    6a42:	91 81       	ldd	r25, Z+1	; 0x01
    6a44:	84 0f       	add	r24, r20
    6a46:	95 1f       	adc	r25, r21
    6a48:	02 96       	adiw	r24, 0x02	; 2
    6a4a:	e9 01       	movw	r28, r18
    6a4c:	99 83       	std	Y+1, r25	; 0x01
    6a4e:	88 83       	st	Y, r24
    6a50:	82 81       	ldd	r24, Z+2	; 0x02
    6a52:	93 81       	ldd	r25, Z+3	; 0x03
    6a54:	9b 83       	std	Y+3, r25	; 0x03
    6a56:	8a 83       	std	Y+2, r24	; 0x02
    6a58:	e0 e0       	ldi	r30, 0x00	; 0
    6a5a:	f0 e0       	ldi	r31, 0x00	; 0
    6a5c:	12 96       	adiw	r26, 0x02	; 2
    6a5e:	8d 91       	ld	r24, X+
    6a60:	9c 91       	ld	r25, X
    6a62:	13 97       	sbiw	r26, 0x03	; 3
    6a64:	00 97       	sbiw	r24, 0x00	; 0
    6a66:	19 f0       	breq	.+6      	; 0x6a6e <free+0xd4>
    6a68:	fd 01       	movw	r30, r26
    6a6a:	dc 01       	movw	r26, r24
    6a6c:	f7 cf       	rjmp	.-18     	; 0x6a5c <free+0xc2>
    6a6e:	8d 91       	ld	r24, X+
    6a70:	9c 91       	ld	r25, X
    6a72:	11 97       	sbiw	r26, 0x01	; 1
    6a74:	9d 01       	movw	r18, r26
    6a76:	2e 5f       	subi	r18, 0xFE	; 254
    6a78:	3f 4f       	sbci	r19, 0xFF	; 255
    6a7a:	82 0f       	add	r24, r18
    6a7c:	93 1f       	adc	r25, r19
    6a7e:	20 91 2e 0b 	lds	r18, 0x0B2E	; 0x800b2e <__brkval>
    6a82:	30 91 2f 0b 	lds	r19, 0x0B2F	; 0x800b2f <__brkval+0x1>
    6a86:	28 17       	cp	r18, r24
    6a88:	39 07       	cpc	r19, r25
    6a8a:	69 f4       	brne	.+26     	; 0x6aa6 <free+0x10c>
    6a8c:	30 97       	sbiw	r30, 0x00	; 0
    6a8e:	29 f4       	brne	.+10     	; 0x6a9a <free+0x100>
    6a90:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <__flp+0x1>
    6a94:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <__flp>
    6a98:	02 c0       	rjmp	.+4      	; 0x6a9e <free+0x104>
    6a9a:	13 82       	std	Z+3, r1	; 0x03
    6a9c:	12 82       	std	Z+2, r1	; 0x02
    6a9e:	b0 93 2f 0b 	sts	0x0B2F, r27	; 0x800b2f <__brkval+0x1>
    6aa2:	a0 93 2e 0b 	sts	0x0B2E, r26	; 0x800b2e <__brkval>
    6aa6:	df 91       	pop	r29
    6aa8:	cf 91       	pop	r28
    6aaa:	08 95       	ret

00006aac <realloc>:
    6aac:	6f 92       	push	r6
    6aae:	7f 92       	push	r7
    6ab0:	8f 92       	push	r8
    6ab2:	9f 92       	push	r9
    6ab4:	af 92       	push	r10
    6ab6:	bf 92       	push	r11
    6ab8:	cf 92       	push	r12
    6aba:	df 92       	push	r13
    6abc:	ef 92       	push	r14
    6abe:	ff 92       	push	r15
    6ac0:	0f 93       	push	r16
    6ac2:	1f 93       	push	r17
    6ac4:	cf 93       	push	r28
    6ac6:	df 93       	push	r29
    6ac8:	00 97       	sbiw	r24, 0x00	; 0
    6aca:	81 f4       	brne	.+32     	; 0x6aec <realloc+0x40>
    6acc:	cb 01       	movw	r24, r22
    6ace:	df 91       	pop	r29
    6ad0:	cf 91       	pop	r28
    6ad2:	1f 91       	pop	r17
    6ad4:	0f 91       	pop	r16
    6ad6:	ff 90       	pop	r15
    6ad8:	ef 90       	pop	r14
    6ada:	df 90       	pop	r13
    6adc:	cf 90       	pop	r12
    6ade:	bf 90       	pop	r11
    6ae0:	af 90       	pop	r10
    6ae2:	9f 90       	pop	r9
    6ae4:	8f 90       	pop	r8
    6ae6:	7f 90       	pop	r7
    6ae8:	6f 90       	pop	r6
    6aea:	bf ce       	rjmp	.-642    	; 0x686a <malloc>
    6aec:	fc 01       	movw	r30, r24
    6aee:	e6 0f       	add	r30, r22
    6af0:	f7 1f       	adc	r31, r23
    6af2:	9c 01       	movw	r18, r24
    6af4:	22 50       	subi	r18, 0x02	; 2
    6af6:	31 09       	sbc	r19, r1
    6af8:	e2 17       	cp	r30, r18
    6afa:	f3 07       	cpc	r31, r19
    6afc:	08 f4       	brcc	.+2      	; 0x6b00 <realloc+0x54>
    6afe:	a5 c0       	rjmp	.+330    	; 0x6c4a <realloc+0x19e>
    6b00:	ec 01       	movw	r28, r24
    6b02:	d9 01       	movw	r26, r18
    6b04:	0d 91       	ld	r16, X+
    6b06:	1c 91       	ld	r17, X
    6b08:	11 97       	sbiw	r26, 0x01	; 1
    6b0a:	06 17       	cp	r16, r22
    6b0c:	17 07       	cpc	r17, r23
    6b0e:	a8 f0       	brcs	.+42     	; 0x6b3a <realloc+0x8e>
    6b10:	05 30       	cpi	r16, 0x05	; 5
    6b12:	11 05       	cpc	r17, r1
    6b14:	08 f4       	brcc	.+2      	; 0x6b18 <realloc+0x6c>
    6b16:	97 c0       	rjmp	.+302    	; 0x6c46 <realloc+0x19a>
    6b18:	c8 01       	movw	r24, r16
    6b1a:	04 97       	sbiw	r24, 0x04	; 4
    6b1c:	86 17       	cp	r24, r22
    6b1e:	97 07       	cpc	r25, r23
    6b20:	08 f4       	brcc	.+2      	; 0x6b24 <realloc+0x78>
    6b22:	91 c0       	rjmp	.+290    	; 0x6c46 <realloc+0x19a>
    6b24:	02 50       	subi	r16, 0x02	; 2
    6b26:	11 09       	sbc	r17, r1
    6b28:	06 1b       	sub	r16, r22
    6b2a:	17 0b       	sbc	r17, r23
    6b2c:	01 93       	st	Z+, r16
    6b2e:	11 93       	st	Z+, r17
    6b30:	6d 93       	st	X+, r22
    6b32:	7c 93       	st	X, r23
    6b34:	cf 01       	movw	r24, r30
    6b36:	31 df       	rcall	.-414    	; 0x699a <free>
    6b38:	86 c0       	rjmp	.+268    	; 0x6c46 <realloc+0x19a>
    6b3a:	5b 01       	movw	r10, r22
    6b3c:	a0 1a       	sub	r10, r16
    6b3e:	b1 0a       	sbc	r11, r17
    6b40:	4c 01       	movw	r8, r24
    6b42:	80 0e       	add	r8, r16
    6b44:	91 1e       	adc	r9, r17
    6b46:	a0 91 30 0b 	lds	r26, 0x0B30	; 0x800b30 <__flp>
    6b4a:	b0 91 31 0b 	lds	r27, 0x0B31	; 0x800b31 <__flp+0x1>
    6b4e:	61 2c       	mov	r6, r1
    6b50:	71 2c       	mov	r7, r1
    6b52:	e1 2c       	mov	r14, r1
    6b54:	f1 2c       	mov	r15, r1
    6b56:	10 97       	sbiw	r26, 0x00	; 0
    6b58:	09 f4       	brne	.+2      	; 0x6b5c <realloc+0xb0>
    6b5a:	46 c0       	rjmp	.+140    	; 0x6be8 <realloc+0x13c>
    6b5c:	8d 91       	ld	r24, X+
    6b5e:	9c 91       	ld	r25, X
    6b60:	11 97       	sbiw	r26, 0x01	; 1
    6b62:	a8 15       	cp	r26, r8
    6b64:	b9 05       	cpc	r27, r9
    6b66:	b1 f5       	brne	.+108    	; 0x6bd4 <realloc+0x128>
    6b68:	6c 01       	movw	r12, r24
    6b6a:	42 e0       	ldi	r20, 0x02	; 2
    6b6c:	c4 0e       	add	r12, r20
    6b6e:	d1 1c       	adc	r13, r1
    6b70:	ca 14       	cp	r12, r10
    6b72:	db 04       	cpc	r13, r11
    6b74:	78 f1       	brcs	.+94     	; 0x6bd4 <realloc+0x128>
    6b76:	4c 01       	movw	r8, r24
    6b78:	8a 18       	sub	r8, r10
    6b7a:	9b 08       	sbc	r9, r11
    6b7c:	64 01       	movw	r12, r8
    6b7e:	42 e0       	ldi	r20, 0x02	; 2
    6b80:	c4 0e       	add	r12, r20
    6b82:	d1 1c       	adc	r13, r1
    6b84:	12 96       	adiw	r26, 0x02	; 2
    6b86:	bc 90       	ld	r11, X
    6b88:	12 97       	sbiw	r26, 0x02	; 2
    6b8a:	13 96       	adiw	r26, 0x03	; 3
    6b8c:	ac 91       	ld	r26, X
    6b8e:	b5 e0       	ldi	r27, 0x05	; 5
    6b90:	cb 16       	cp	r12, r27
    6b92:	d1 04       	cpc	r13, r1
    6b94:	40 f0       	brcs	.+16     	; 0x6ba6 <realloc+0xfa>
    6b96:	b2 82       	std	Z+2, r11	; 0x02
    6b98:	a3 83       	std	Z+3, r26	; 0x03
    6b9a:	91 82       	std	Z+1, r9	; 0x01
    6b9c:	80 82       	st	Z, r8
    6b9e:	d9 01       	movw	r26, r18
    6ba0:	6d 93       	st	X+, r22
    6ba2:	7c 93       	st	X, r23
    6ba4:	09 c0       	rjmp	.+18     	; 0x6bb8 <realloc+0x10c>
    6ba6:	0e 5f       	subi	r16, 0xFE	; 254
    6ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    6baa:	80 0f       	add	r24, r16
    6bac:	91 1f       	adc	r25, r17
    6bae:	f9 01       	movw	r30, r18
    6bb0:	91 83       	std	Z+1, r25	; 0x01
    6bb2:	80 83       	st	Z, r24
    6bb4:	eb 2d       	mov	r30, r11
    6bb6:	fa 2f       	mov	r31, r26
    6bb8:	e1 14       	cp	r14, r1
    6bba:	f1 04       	cpc	r15, r1
    6bbc:	31 f0       	breq	.+12     	; 0x6bca <realloc+0x11e>
    6bbe:	d7 01       	movw	r26, r14
    6bc0:	13 96       	adiw	r26, 0x03	; 3
    6bc2:	fc 93       	st	X, r31
    6bc4:	ee 93       	st	-X, r30
    6bc6:	12 97       	sbiw	r26, 0x02	; 2
    6bc8:	3e c0       	rjmp	.+124    	; 0x6c46 <realloc+0x19a>
    6bca:	f0 93 31 0b 	sts	0x0B31, r31	; 0x800b31 <__flp+0x1>
    6bce:	e0 93 30 0b 	sts	0x0B30, r30	; 0x800b30 <__flp>
    6bd2:	39 c0       	rjmp	.+114    	; 0x6c46 <realloc+0x19a>
    6bd4:	68 16       	cp	r6, r24
    6bd6:	79 06       	cpc	r7, r25
    6bd8:	08 f4       	brcc	.+2      	; 0x6bdc <realloc+0x130>
    6bda:	3c 01       	movw	r6, r24
    6bdc:	7d 01       	movw	r14, r26
    6bde:	12 96       	adiw	r26, 0x02	; 2
    6be0:	0d 90       	ld	r0, X+
    6be2:	bc 91       	ld	r27, X
    6be4:	a0 2d       	mov	r26, r0
    6be6:	b7 cf       	rjmp	.-146    	; 0x6b56 <realloc+0xaa>
    6be8:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <__brkval>
    6bec:	90 91 2f 0b 	lds	r25, 0x0B2F	; 0x800b2f <__brkval+0x1>
    6bf0:	88 16       	cp	r8, r24
    6bf2:	99 06       	cpc	r9, r25
    6bf4:	e1 f4       	brne	.+56     	; 0x6c2e <realloc+0x182>
    6bf6:	66 16       	cp	r6, r22
    6bf8:	77 06       	cpc	r7, r23
    6bfa:	c8 f4       	brcc	.+50     	; 0x6c2e <realloc+0x182>
    6bfc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    6c00:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    6c04:	00 97       	sbiw	r24, 0x00	; 0
    6c06:	41 f4       	brne	.+16     	; 0x6c18 <realloc+0x16c>
    6c08:	8d b7       	in	r24, 0x3d	; 61
    6c0a:	9e b7       	in	r25, 0x3e	; 62
    6c0c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6c10:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6c14:	84 1b       	sub	r24, r20
    6c16:	95 0b       	sbc	r25, r21
    6c18:	e8 17       	cp	r30, r24
    6c1a:	f9 07       	cpc	r31, r25
    6c1c:	b0 f4       	brcc	.+44     	; 0x6c4a <realloc+0x19e>
    6c1e:	f0 93 2f 0b 	sts	0x0B2F, r31	; 0x800b2f <__brkval+0x1>
    6c22:	e0 93 2e 0b 	sts	0x0B2E, r30	; 0x800b2e <__brkval>
    6c26:	f9 01       	movw	r30, r18
    6c28:	71 83       	std	Z+1, r23	; 0x01
    6c2a:	60 83       	st	Z, r22
    6c2c:	0c c0       	rjmp	.+24     	; 0x6c46 <realloc+0x19a>
    6c2e:	cb 01       	movw	r24, r22
    6c30:	1c de       	rcall	.-968    	; 0x686a <malloc>
    6c32:	7c 01       	movw	r14, r24
    6c34:	00 97       	sbiw	r24, 0x00	; 0
    6c36:	49 f0       	breq	.+18     	; 0x6c4a <realloc+0x19e>
    6c38:	a8 01       	movw	r20, r16
    6c3a:	be 01       	movw	r22, r28
    6c3c:	2c d0       	rcall	.+88     	; 0x6c96 <memcpy>
    6c3e:	ce 01       	movw	r24, r28
    6c40:	ac de       	rcall	.-680    	; 0x699a <free>
    6c42:	c7 01       	movw	r24, r14
    6c44:	04 c0       	rjmp	.+8      	; 0x6c4e <realloc+0x1a2>
    6c46:	ce 01       	movw	r24, r28
    6c48:	02 c0       	rjmp	.+4      	; 0x6c4e <realloc+0x1a2>
    6c4a:	80 e0       	ldi	r24, 0x00	; 0
    6c4c:	90 e0       	ldi	r25, 0x00	; 0
    6c4e:	df 91       	pop	r29
    6c50:	cf 91       	pop	r28
    6c52:	1f 91       	pop	r17
    6c54:	0f 91       	pop	r16
    6c56:	ff 90       	pop	r15
    6c58:	ef 90       	pop	r14
    6c5a:	df 90       	pop	r13
    6c5c:	cf 90       	pop	r12
    6c5e:	bf 90       	pop	r11
    6c60:	af 90       	pop	r10
    6c62:	9f 90       	pop	r9
    6c64:	8f 90       	pop	r8
    6c66:	7f 90       	pop	r7
    6c68:	6f 90       	pop	r6
    6c6a:	08 95       	ret

00006c6c <abort>:
    6c6c:	81 e0       	ldi	r24, 0x01	; 1
    6c6e:	90 e0       	ldi	r25, 0x00	; 0
    6c70:	f8 94       	cli
    6c72:	f1 c2       	rjmp	.+1506   	; 0x7256 <__do_global_dtors>

00006c74 <isspace>:
    6c74:	91 11       	cpse	r25, r1
    6c76:	dc c2       	rjmp	.+1464   	; 0x7230 <__ctype_isfalse>
    6c78:	80 32       	cpi	r24, 0x20	; 32
    6c7a:	19 f0       	breq	.+6      	; 0x6c82 <isspace+0xe>
    6c7c:	89 50       	subi	r24, 0x09	; 9
    6c7e:	85 50       	subi	r24, 0x05	; 5
    6c80:	d0 f7       	brcc	.-12     	; 0x6c76 <isspace+0x2>
    6c82:	08 95       	ret

00006c84 <memcpy_P>:
    6c84:	fb 01       	movw	r30, r22
    6c86:	dc 01       	movw	r26, r24
    6c88:	02 c0       	rjmp	.+4      	; 0x6c8e <memcpy_P+0xa>
    6c8a:	05 90       	lpm	r0, Z+
    6c8c:	0d 92       	st	X+, r0
    6c8e:	41 50       	subi	r20, 0x01	; 1
    6c90:	50 40       	sbci	r21, 0x00	; 0
    6c92:	d8 f7       	brcc	.-10     	; 0x6c8a <memcpy_P+0x6>
    6c94:	08 95       	ret

00006c96 <memcpy>:
    6c96:	fb 01       	movw	r30, r22
    6c98:	dc 01       	movw	r26, r24
    6c9a:	02 c0       	rjmp	.+4      	; 0x6ca0 <memcpy+0xa>
    6c9c:	01 90       	ld	r0, Z+
    6c9e:	0d 92       	st	X+, r0
    6ca0:	41 50       	subi	r20, 0x01	; 1
    6ca2:	50 40       	sbci	r21, 0x00	; 0
    6ca4:	d8 f7       	brcc	.-10     	; 0x6c9c <memcpy+0x6>
    6ca6:	08 95       	ret

00006ca8 <strcmp>:
    6ca8:	fb 01       	movw	r30, r22
    6caa:	dc 01       	movw	r26, r24
    6cac:	8d 91       	ld	r24, X+
    6cae:	01 90       	ld	r0, Z+
    6cb0:	80 19       	sub	r24, r0
    6cb2:	01 10       	cpse	r0, r1
    6cb4:	d9 f3       	breq	.-10     	; 0x6cac <strcmp+0x4>
    6cb6:	99 0b       	sbc	r25, r25
    6cb8:	08 95       	ret

00006cba <strcpy>:
    6cba:	fb 01       	movw	r30, r22
    6cbc:	dc 01       	movw	r26, r24
    6cbe:	01 90       	ld	r0, Z+
    6cc0:	0d 92       	st	X+, r0
    6cc2:	00 20       	and	r0, r0
    6cc4:	e1 f7       	brne	.-8      	; 0x6cbe <strcpy+0x4>
    6cc6:	08 95       	ret

00006cc8 <strncmp>:
    6cc8:	fb 01       	movw	r30, r22
    6cca:	dc 01       	movw	r26, r24
    6ccc:	41 50       	subi	r20, 0x01	; 1
    6cce:	50 40       	sbci	r21, 0x00	; 0
    6cd0:	30 f0       	brcs	.+12     	; 0x6cde <strncmp+0x16>
    6cd2:	8d 91       	ld	r24, X+
    6cd4:	01 90       	ld	r0, Z+
    6cd6:	80 19       	sub	r24, r0
    6cd8:	19 f4       	brne	.+6      	; 0x6ce0 <strncmp+0x18>
    6cda:	00 20       	and	r0, r0
    6cdc:	b9 f7       	brne	.-18     	; 0x6ccc <strncmp+0x4>
    6cde:	88 1b       	sub	r24, r24
    6ce0:	99 0b       	sbc	r25, r25
    6ce2:	08 95       	ret

00006ce4 <__itoa_ncheck>:
    6ce4:	bb 27       	eor	r27, r27
    6ce6:	4a 30       	cpi	r20, 0x0A	; 10
    6ce8:	31 f4       	brne	.+12     	; 0x6cf6 <__itoa_ncheck+0x12>
    6cea:	99 23       	and	r25, r25
    6cec:	22 f4       	brpl	.+8      	; 0x6cf6 <__itoa_ncheck+0x12>
    6cee:	bd e2       	ldi	r27, 0x2D	; 45
    6cf0:	90 95       	com	r25
    6cf2:	81 95       	neg	r24
    6cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    6cf6:	36 c0       	rjmp	.+108    	; 0x6d64 <__utoa_common>

00006cf8 <ultoa>:
    6cf8:	25 32       	cpi	r18, 0x25	; 37
    6cfa:	31 05       	cpc	r19, r1
    6cfc:	18 f4       	brcc	.+6      	; 0x6d04 <ultoa+0xc>
    6cfe:	22 30       	cpi	r18, 0x02	; 2
    6d00:	08 f0       	brcs	.+2      	; 0x6d04 <ultoa+0xc>
    6d02:	04 c0       	rjmp	.+8      	; 0x6d0c <__ultoa_ncheck>
    6d04:	fa 01       	movw	r30, r20
    6d06:	10 82       	st	Z, r1
    6d08:	ca 01       	movw	r24, r20
    6d0a:	08 95       	ret

00006d0c <__ultoa_ncheck>:
    6d0c:	bb 27       	eor	r27, r27

00006d0e <__ultoa_common>:
    6d0e:	fa 01       	movw	r30, r20
    6d10:	a6 2f       	mov	r26, r22
    6d12:	62 17       	cp	r22, r18
    6d14:	71 05       	cpc	r23, r1
    6d16:	81 05       	cpc	r24, r1
    6d18:	91 05       	cpc	r25, r1
    6d1a:	33 0b       	sbc	r19, r19
    6d1c:	30 fb       	bst	r19, 0
    6d1e:	66 f0       	brts	.+24     	; 0x6d38 <__ultoa_common+0x2a>
    6d20:	aa 27       	eor	r26, r26
    6d22:	66 0f       	add	r22, r22
    6d24:	77 1f       	adc	r23, r23
    6d26:	88 1f       	adc	r24, r24
    6d28:	99 1f       	adc	r25, r25
    6d2a:	aa 1f       	adc	r26, r26
    6d2c:	a2 17       	cp	r26, r18
    6d2e:	10 f0       	brcs	.+4      	; 0x6d34 <__ultoa_common+0x26>
    6d30:	a2 1b       	sub	r26, r18
    6d32:	63 95       	inc	r22
    6d34:	38 50       	subi	r19, 0x08	; 8
    6d36:	a9 f7       	brne	.-22     	; 0x6d22 <__ultoa_common+0x14>
    6d38:	a0 5d       	subi	r26, 0xD0	; 208
    6d3a:	aa 33       	cpi	r26, 0x3A	; 58
    6d3c:	08 f0       	brcs	.+2      	; 0x6d40 <__ultoa_common+0x32>
    6d3e:	a9 5d       	subi	r26, 0xD9	; 217
    6d40:	a1 93       	st	Z+, r26
    6d42:	36 f7       	brtc	.-52     	; 0x6d10 <__ultoa_common+0x2>
    6d44:	b1 11       	cpse	r27, r1
    6d46:	b1 93       	st	Z+, r27
    6d48:	10 82       	st	Z, r1
    6d4a:	ca 01       	movw	r24, r20
    6d4c:	74 c2       	rjmp	.+1256   	; 0x7236 <strrev>

00006d4e <utoa>:
    6d4e:	45 32       	cpi	r20, 0x25	; 37
    6d50:	51 05       	cpc	r21, r1
    6d52:	18 f4       	brcc	.+6      	; 0x6d5a <utoa+0xc>
    6d54:	42 30       	cpi	r20, 0x02	; 2
    6d56:	08 f0       	brcs	.+2      	; 0x6d5a <utoa+0xc>
    6d58:	04 c0       	rjmp	.+8      	; 0x6d62 <__utoa_ncheck>
    6d5a:	fb 01       	movw	r30, r22
    6d5c:	10 82       	st	Z, r1
    6d5e:	cb 01       	movw	r24, r22
    6d60:	08 95       	ret

00006d62 <__utoa_ncheck>:
    6d62:	bb 27       	eor	r27, r27

00006d64 <__utoa_common>:
    6d64:	fb 01       	movw	r30, r22
    6d66:	55 27       	eor	r21, r21
    6d68:	aa 27       	eor	r26, r26
    6d6a:	88 0f       	add	r24, r24
    6d6c:	99 1f       	adc	r25, r25
    6d6e:	aa 1f       	adc	r26, r26
    6d70:	a4 17       	cp	r26, r20
    6d72:	10 f0       	brcs	.+4      	; 0x6d78 <__utoa_common+0x14>
    6d74:	a4 1b       	sub	r26, r20
    6d76:	83 95       	inc	r24
    6d78:	50 51       	subi	r21, 0x10	; 16
    6d7a:	b9 f7       	brne	.-18     	; 0x6d6a <__utoa_common+0x6>
    6d7c:	a0 5d       	subi	r26, 0xD0	; 208
    6d7e:	aa 33       	cpi	r26, 0x3A	; 58
    6d80:	08 f0       	brcs	.+2      	; 0x6d84 <__utoa_common+0x20>
    6d82:	a9 5d       	subi	r26, 0xD9	; 217
    6d84:	a1 93       	st	Z+, r26
    6d86:	00 97       	sbiw	r24, 0x00	; 0
    6d88:	79 f7       	brne	.-34     	; 0x6d68 <__utoa_common+0x4>
    6d8a:	b1 11       	cpse	r27, r1
    6d8c:	b1 93       	st	Z+, r27
    6d8e:	11 92       	st	Z+, r1
    6d90:	cb 01       	movw	r24, r22
    6d92:	51 c2       	rjmp	.+1186   	; 0x7236 <strrev>

00006d94 <dtoa_prf>:
    6d94:	8f 92       	push	r8
    6d96:	9f 92       	push	r9
    6d98:	af 92       	push	r10
    6d9a:	bf 92       	push	r11
    6d9c:	cf 92       	push	r12
    6d9e:	df 92       	push	r13
    6da0:	ef 92       	push	r14
    6da2:	ff 92       	push	r15
    6da4:	0f 93       	push	r16
    6da6:	1f 93       	push	r17
    6da8:	cf 93       	push	r28
    6daa:	df 93       	push	r29
    6dac:	cd b7       	in	r28, 0x3d	; 61
    6dae:	de b7       	in	r29, 0x3e	; 62
    6db0:	29 97       	sbiw	r28, 0x09	; 9
    6db2:	0f b6       	in	r0, 0x3f	; 63
    6db4:	f8 94       	cli
    6db6:	de bf       	out	0x3e, r29	; 62
    6db8:	0f be       	out	0x3f, r0	; 63
    6dba:	cd bf       	out	0x3d, r28	; 61
    6dbc:	6a 01       	movw	r12, r20
    6dbe:	12 2f       	mov	r17, r18
    6dc0:	b0 2e       	mov	r11, r16
    6dc2:	2b e3       	ldi	r18, 0x3B	; 59
    6dc4:	20 17       	cp	r18, r16
    6dc6:	20 f0       	brcs	.+8      	; 0x6dd0 <dtoa_prf+0x3c>
    6dc8:	ff 24       	eor	r15, r15
    6dca:	f3 94       	inc	r15
    6dcc:	f0 0e       	add	r15, r16
    6dce:	02 c0       	rjmp	.+4      	; 0x6dd4 <dtoa_prf+0x40>
    6dd0:	2c e3       	ldi	r18, 0x3C	; 60
    6dd2:	f2 2e       	mov	r15, r18
    6dd4:	0f 2d       	mov	r16, r15
    6dd6:	27 e0       	ldi	r18, 0x07	; 7
    6dd8:	ae 01       	movw	r20, r28
    6dda:	4f 5f       	subi	r20, 0xFF	; 255
    6ddc:	5f 4f       	sbci	r21, 0xFF	; 255
    6dde:	50 d1       	rcall	.+672    	; 0x7080 <__ftoa_engine>
    6de0:	bc 01       	movw	r22, r24
    6de2:	49 81       	ldd	r20, Y+1	; 0x01
    6de4:	84 2f       	mov	r24, r20
    6de6:	89 70       	andi	r24, 0x09	; 9
    6de8:	81 30       	cpi	r24, 0x01	; 1
    6dea:	31 f0       	breq	.+12     	; 0x6df8 <dtoa_prf+0x64>
    6dec:	e1 fc       	sbrc	r14, 1
    6dee:	06 c0       	rjmp	.+12     	; 0x6dfc <dtoa_prf+0x68>
    6df0:	e0 fe       	sbrs	r14, 0
    6df2:	06 c0       	rjmp	.+12     	; 0x6e00 <dtoa_prf+0x6c>
    6df4:	90 e2       	ldi	r25, 0x20	; 32
    6df6:	05 c0       	rjmp	.+10     	; 0x6e02 <dtoa_prf+0x6e>
    6df8:	9d e2       	ldi	r25, 0x2D	; 45
    6dfa:	03 c0       	rjmp	.+6      	; 0x6e02 <dtoa_prf+0x6e>
    6dfc:	9b e2       	ldi	r25, 0x2B	; 43
    6dfe:	01 c0       	rjmp	.+2      	; 0x6e02 <dtoa_prf+0x6e>
    6e00:	90 e0       	ldi	r25, 0x00	; 0
    6e02:	5e 2d       	mov	r21, r14
    6e04:	50 71       	andi	r21, 0x10	; 16
    6e06:	43 ff       	sbrs	r20, 3
    6e08:	3c c0       	rjmp	.+120    	; 0x6e82 <dtoa_prf+0xee>
    6e0a:	91 11       	cpse	r25, r1
    6e0c:	02 c0       	rjmp	.+4      	; 0x6e12 <dtoa_prf+0x7e>
    6e0e:	83 e0       	ldi	r24, 0x03	; 3
    6e10:	01 c0       	rjmp	.+2      	; 0x6e14 <dtoa_prf+0x80>
    6e12:	84 e0       	ldi	r24, 0x04	; 4
    6e14:	81 17       	cp	r24, r17
    6e16:	18 f4       	brcc	.+6      	; 0x6e1e <dtoa_prf+0x8a>
    6e18:	21 2f       	mov	r18, r17
    6e1a:	28 1b       	sub	r18, r24
    6e1c:	01 c0       	rjmp	.+2      	; 0x6e20 <dtoa_prf+0x8c>
    6e1e:	20 e0       	ldi	r18, 0x00	; 0
    6e20:	51 11       	cpse	r21, r1
    6e22:	0b c0       	rjmp	.+22     	; 0x6e3a <dtoa_prf+0xa6>
    6e24:	f6 01       	movw	r30, r12
    6e26:	82 2f       	mov	r24, r18
    6e28:	30 e2       	ldi	r19, 0x20	; 32
    6e2a:	88 23       	and	r24, r24
    6e2c:	19 f0       	breq	.+6      	; 0x6e34 <dtoa_prf+0xa0>
    6e2e:	31 93       	st	Z+, r19
    6e30:	81 50       	subi	r24, 0x01	; 1
    6e32:	fb cf       	rjmp	.-10     	; 0x6e2a <dtoa_prf+0x96>
    6e34:	c2 0e       	add	r12, r18
    6e36:	d1 1c       	adc	r13, r1
    6e38:	20 e0       	ldi	r18, 0x00	; 0
    6e3a:	99 23       	and	r25, r25
    6e3c:	29 f0       	breq	.+10     	; 0x6e48 <dtoa_prf+0xb4>
    6e3e:	d6 01       	movw	r26, r12
    6e40:	9c 93       	st	X, r25
    6e42:	f6 01       	movw	r30, r12
    6e44:	31 96       	adiw	r30, 0x01	; 1
    6e46:	6f 01       	movw	r12, r30
    6e48:	c6 01       	movw	r24, r12
    6e4a:	03 96       	adiw	r24, 0x03	; 3
    6e4c:	e2 fe       	sbrs	r14, 2
    6e4e:	0a c0       	rjmp	.+20     	; 0x6e64 <dtoa_prf+0xd0>
    6e50:	3e e4       	ldi	r19, 0x4E	; 78
    6e52:	d6 01       	movw	r26, r12
    6e54:	3c 93       	st	X, r19
    6e56:	41 e4       	ldi	r20, 0x41	; 65
    6e58:	11 96       	adiw	r26, 0x01	; 1
    6e5a:	4c 93       	st	X, r20
    6e5c:	11 97       	sbiw	r26, 0x01	; 1
    6e5e:	12 96       	adiw	r26, 0x02	; 2
    6e60:	3c 93       	st	X, r19
    6e62:	06 c0       	rjmp	.+12     	; 0x6e70 <dtoa_prf+0xdc>
    6e64:	3e e6       	ldi	r19, 0x6E	; 110
    6e66:	f6 01       	movw	r30, r12
    6e68:	30 83       	st	Z, r19
    6e6a:	41 e6       	ldi	r20, 0x61	; 97
    6e6c:	41 83       	std	Z+1, r20	; 0x01
    6e6e:	32 83       	std	Z+2, r19	; 0x02
    6e70:	fc 01       	movw	r30, r24
    6e72:	32 2f       	mov	r19, r18
    6e74:	40 e2       	ldi	r20, 0x20	; 32
    6e76:	33 23       	and	r19, r19
    6e78:	09 f4       	brne	.+2      	; 0x6e7c <dtoa_prf+0xe8>
    6e7a:	42 c0       	rjmp	.+132    	; 0x6f00 <dtoa_prf+0x16c>
    6e7c:	41 93       	st	Z+, r20
    6e7e:	31 50       	subi	r19, 0x01	; 1
    6e80:	fa cf       	rjmp	.-12     	; 0x6e76 <dtoa_prf+0xe2>
    6e82:	42 ff       	sbrs	r20, 2
    6e84:	44 c0       	rjmp	.+136    	; 0x6f0e <dtoa_prf+0x17a>
    6e86:	91 11       	cpse	r25, r1
    6e88:	02 c0       	rjmp	.+4      	; 0x6e8e <dtoa_prf+0xfa>
    6e8a:	83 e0       	ldi	r24, 0x03	; 3
    6e8c:	01 c0       	rjmp	.+2      	; 0x6e90 <dtoa_prf+0xfc>
    6e8e:	84 e0       	ldi	r24, 0x04	; 4
    6e90:	81 17       	cp	r24, r17
    6e92:	18 f4       	brcc	.+6      	; 0x6e9a <dtoa_prf+0x106>
    6e94:	21 2f       	mov	r18, r17
    6e96:	28 1b       	sub	r18, r24
    6e98:	01 c0       	rjmp	.+2      	; 0x6e9c <dtoa_prf+0x108>
    6e9a:	20 e0       	ldi	r18, 0x00	; 0
    6e9c:	51 11       	cpse	r21, r1
    6e9e:	0b c0       	rjmp	.+22     	; 0x6eb6 <dtoa_prf+0x122>
    6ea0:	f6 01       	movw	r30, r12
    6ea2:	82 2f       	mov	r24, r18
    6ea4:	30 e2       	ldi	r19, 0x20	; 32
    6ea6:	88 23       	and	r24, r24
    6ea8:	19 f0       	breq	.+6      	; 0x6eb0 <dtoa_prf+0x11c>
    6eaa:	31 93       	st	Z+, r19
    6eac:	81 50       	subi	r24, 0x01	; 1
    6eae:	fb cf       	rjmp	.-10     	; 0x6ea6 <dtoa_prf+0x112>
    6eb0:	c2 0e       	add	r12, r18
    6eb2:	d1 1c       	adc	r13, r1
    6eb4:	20 e0       	ldi	r18, 0x00	; 0
    6eb6:	99 23       	and	r25, r25
    6eb8:	29 f0       	breq	.+10     	; 0x6ec4 <dtoa_prf+0x130>
    6eba:	d6 01       	movw	r26, r12
    6ebc:	9c 93       	st	X, r25
    6ebe:	f6 01       	movw	r30, r12
    6ec0:	31 96       	adiw	r30, 0x01	; 1
    6ec2:	6f 01       	movw	r12, r30
    6ec4:	c6 01       	movw	r24, r12
    6ec6:	03 96       	adiw	r24, 0x03	; 3
    6ec8:	e2 fe       	sbrs	r14, 2
    6eca:	0b c0       	rjmp	.+22     	; 0x6ee2 <dtoa_prf+0x14e>
    6ecc:	39 e4       	ldi	r19, 0x49	; 73
    6ece:	d6 01       	movw	r26, r12
    6ed0:	3c 93       	st	X, r19
    6ed2:	3e e4       	ldi	r19, 0x4E	; 78
    6ed4:	11 96       	adiw	r26, 0x01	; 1
    6ed6:	3c 93       	st	X, r19
    6ed8:	11 97       	sbiw	r26, 0x01	; 1
    6eda:	36 e4       	ldi	r19, 0x46	; 70
    6edc:	12 96       	adiw	r26, 0x02	; 2
    6ede:	3c 93       	st	X, r19
    6ee0:	07 c0       	rjmp	.+14     	; 0x6ef0 <dtoa_prf+0x15c>
    6ee2:	39 e6       	ldi	r19, 0x69	; 105
    6ee4:	f6 01       	movw	r30, r12
    6ee6:	30 83       	st	Z, r19
    6ee8:	3e e6       	ldi	r19, 0x6E	; 110
    6eea:	31 83       	std	Z+1, r19	; 0x01
    6eec:	36 e6       	ldi	r19, 0x66	; 102
    6eee:	32 83       	std	Z+2, r19	; 0x02
    6ef0:	fc 01       	movw	r30, r24
    6ef2:	32 2f       	mov	r19, r18
    6ef4:	40 e2       	ldi	r20, 0x20	; 32
    6ef6:	33 23       	and	r19, r19
    6ef8:	19 f0       	breq	.+6      	; 0x6f00 <dtoa_prf+0x16c>
    6efa:	41 93       	st	Z+, r20
    6efc:	31 50       	subi	r19, 0x01	; 1
    6efe:	fb cf       	rjmp	.-10     	; 0x6ef6 <dtoa_prf+0x162>
    6f00:	fc 01       	movw	r30, r24
    6f02:	e2 0f       	add	r30, r18
    6f04:	f1 1d       	adc	r31, r1
    6f06:	10 82       	st	Z, r1
    6f08:	8e ef       	ldi	r24, 0xFE	; 254
    6f0a:	9f ef       	ldi	r25, 0xFF	; 255
    6f0c:	a6 c0       	rjmp	.+332    	; 0x705a <dtoa_prf+0x2c6>
    6f0e:	21 e0       	ldi	r18, 0x01	; 1
    6f10:	30 e0       	ldi	r19, 0x00	; 0
    6f12:	91 11       	cpse	r25, r1
    6f14:	02 c0       	rjmp	.+4      	; 0x6f1a <dtoa_prf+0x186>
    6f16:	20 e0       	ldi	r18, 0x00	; 0
    6f18:	30 e0       	ldi	r19, 0x00	; 0
    6f1a:	16 16       	cp	r1, r22
    6f1c:	17 06       	cpc	r1, r23
    6f1e:	1c f4       	brge	.+6      	; 0x6f26 <dtoa_prf+0x192>
    6f20:	fb 01       	movw	r30, r22
    6f22:	31 96       	adiw	r30, 0x01	; 1
    6f24:	02 c0       	rjmp	.+4      	; 0x6f2a <dtoa_prf+0x196>
    6f26:	e1 e0       	ldi	r30, 0x01	; 1
    6f28:	f0 e0       	ldi	r31, 0x00	; 0
    6f2a:	2e 0f       	add	r18, r30
    6f2c:	3f 1f       	adc	r19, r31
    6f2e:	bb 20       	and	r11, r11
    6f30:	21 f0       	breq	.+8      	; 0x6f3a <dtoa_prf+0x1a6>
    6f32:	eb 2d       	mov	r30, r11
    6f34:	f0 e0       	ldi	r31, 0x00	; 0
    6f36:	31 96       	adiw	r30, 0x01	; 1
    6f38:	02 c0       	rjmp	.+4      	; 0x6f3e <dtoa_prf+0x1aa>
    6f3a:	e0 e0       	ldi	r30, 0x00	; 0
    6f3c:	f0 e0       	ldi	r31, 0x00	; 0
    6f3e:	2e 0f       	add	r18, r30
    6f40:	3f 1f       	adc	r19, r31
    6f42:	e1 2f       	mov	r30, r17
    6f44:	f0 e0       	ldi	r31, 0x00	; 0
    6f46:	2e 17       	cp	r18, r30
    6f48:	3f 07       	cpc	r19, r31
    6f4a:	1c f4       	brge	.+6      	; 0x6f52 <dtoa_prf+0x1be>
    6f4c:	12 1b       	sub	r17, r18
    6f4e:	21 2f       	mov	r18, r17
    6f50:	01 c0       	rjmp	.+2      	; 0x6f54 <dtoa_prf+0x1c0>
    6f52:	20 e0       	ldi	r18, 0x00	; 0
    6f54:	8e 2d       	mov	r24, r14
    6f56:	88 71       	andi	r24, 0x18	; 24
    6f58:	59 f4       	brne	.+22     	; 0x6f70 <dtoa_prf+0x1dc>
    6f5a:	f6 01       	movw	r30, r12
    6f5c:	82 2f       	mov	r24, r18
    6f5e:	30 e2       	ldi	r19, 0x20	; 32
    6f60:	88 23       	and	r24, r24
    6f62:	19 f0       	breq	.+6      	; 0x6f6a <dtoa_prf+0x1d6>
    6f64:	31 93       	st	Z+, r19
    6f66:	81 50       	subi	r24, 0x01	; 1
    6f68:	fb cf       	rjmp	.-10     	; 0x6f60 <dtoa_prf+0x1cc>
    6f6a:	c2 0e       	add	r12, r18
    6f6c:	d1 1c       	adc	r13, r1
    6f6e:	20 e0       	ldi	r18, 0x00	; 0
    6f70:	99 23       	and	r25, r25
    6f72:	29 f0       	breq	.+10     	; 0x6f7e <dtoa_prf+0x1ea>
    6f74:	d6 01       	movw	r26, r12
    6f76:	9c 93       	st	X, r25
    6f78:	f6 01       	movw	r30, r12
    6f7a:	31 96       	adiw	r30, 0x01	; 1
    6f7c:	6f 01       	movw	r12, r30
    6f7e:	51 11       	cpse	r21, r1
    6f80:	0b c0       	rjmp	.+22     	; 0x6f98 <dtoa_prf+0x204>
    6f82:	f6 01       	movw	r30, r12
    6f84:	82 2f       	mov	r24, r18
    6f86:	90 e3       	ldi	r25, 0x30	; 48
    6f88:	88 23       	and	r24, r24
    6f8a:	19 f0       	breq	.+6      	; 0x6f92 <dtoa_prf+0x1fe>
    6f8c:	91 93       	st	Z+, r25
    6f8e:	81 50       	subi	r24, 0x01	; 1
    6f90:	fb cf       	rjmp	.-10     	; 0x6f88 <dtoa_prf+0x1f4>
    6f92:	c2 0e       	add	r12, r18
    6f94:	d1 1c       	adc	r13, r1
    6f96:	20 e0       	ldi	r18, 0x00	; 0
    6f98:	0f 2d       	mov	r16, r15
    6f9a:	06 0f       	add	r16, r22
    6f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    6f9e:	34 2f       	mov	r19, r20
    6fa0:	30 71       	andi	r19, 0x10	; 16
    6fa2:	44 ff       	sbrs	r20, 4
    6fa4:	03 c0       	rjmp	.+6      	; 0x6fac <dtoa_prf+0x218>
    6fa6:	91 33       	cpi	r25, 0x31	; 49
    6fa8:	09 f4       	brne	.+2      	; 0x6fac <dtoa_prf+0x218>
    6faa:	01 50       	subi	r16, 0x01	; 1
    6fac:	10 16       	cp	r1, r16
    6fae:	24 f4       	brge	.+8      	; 0x6fb8 <dtoa_prf+0x224>
    6fb0:	09 30       	cpi	r16, 0x09	; 9
    6fb2:	18 f0       	brcs	.+6      	; 0x6fba <dtoa_prf+0x226>
    6fb4:	08 e0       	ldi	r16, 0x08	; 8
    6fb6:	01 c0       	rjmp	.+2      	; 0x6fba <dtoa_prf+0x226>
    6fb8:	01 e0       	ldi	r16, 0x01	; 1
    6fba:	ab 01       	movw	r20, r22
    6fbc:	77 ff       	sbrs	r23, 7
    6fbe:	02 c0       	rjmp	.+4      	; 0x6fc4 <dtoa_prf+0x230>
    6fc0:	40 e0       	ldi	r20, 0x00	; 0
    6fc2:	50 e0       	ldi	r21, 0x00	; 0
    6fc4:	fb 01       	movw	r30, r22
    6fc6:	e4 1b       	sub	r30, r20
    6fc8:	f5 0b       	sbc	r31, r21
    6fca:	a1 e0       	ldi	r26, 0x01	; 1
    6fcc:	b0 e0       	ldi	r27, 0x00	; 0
    6fce:	ac 0f       	add	r26, r28
    6fd0:	bd 1f       	adc	r27, r29
    6fd2:	ea 0f       	add	r30, r26
    6fd4:	fb 1f       	adc	r31, r27
    6fd6:	8e e2       	ldi	r24, 0x2E	; 46
    6fd8:	a8 2e       	mov	r10, r24
    6fda:	4b 01       	movw	r8, r22
    6fdc:	80 1a       	sub	r8, r16
    6fde:	91 08       	sbc	r9, r1
    6fe0:	0b 2d       	mov	r16, r11
    6fe2:	10 e0       	ldi	r17, 0x00	; 0
    6fe4:	11 95       	neg	r17
    6fe6:	01 95       	neg	r16
    6fe8:	11 09       	sbc	r17, r1
    6fea:	4f 3f       	cpi	r20, 0xFF	; 255
    6fec:	bf ef       	ldi	r27, 0xFF	; 255
    6fee:	5b 07       	cpc	r21, r27
    6ff0:	21 f4       	brne	.+8      	; 0x6ffa <dtoa_prf+0x266>
    6ff2:	d6 01       	movw	r26, r12
    6ff4:	ac 92       	st	X, r10
    6ff6:	11 96       	adiw	r26, 0x01	; 1
    6ff8:	6d 01       	movw	r12, r26
    6ffa:	64 17       	cp	r22, r20
    6ffc:	75 07       	cpc	r23, r21
    6ffe:	2c f0       	brlt	.+10     	; 0x700a <dtoa_prf+0x276>
    7000:	84 16       	cp	r8, r20
    7002:	95 06       	cpc	r9, r21
    7004:	14 f4       	brge	.+4      	; 0x700a <dtoa_prf+0x276>
    7006:	81 81       	ldd	r24, Z+1	; 0x01
    7008:	01 c0       	rjmp	.+2      	; 0x700c <dtoa_prf+0x278>
    700a:	80 e3       	ldi	r24, 0x30	; 48
    700c:	41 50       	subi	r20, 0x01	; 1
    700e:	51 09       	sbc	r21, r1
    7010:	31 96       	adiw	r30, 0x01	; 1
    7012:	d6 01       	movw	r26, r12
    7014:	11 96       	adiw	r26, 0x01	; 1
    7016:	7d 01       	movw	r14, r26
    7018:	40 17       	cp	r20, r16
    701a:	51 07       	cpc	r21, r17
    701c:	24 f0       	brlt	.+8      	; 0x7026 <dtoa_prf+0x292>
    701e:	d6 01       	movw	r26, r12
    7020:	8c 93       	st	X, r24
    7022:	67 01       	movw	r12, r14
    7024:	e2 cf       	rjmp	.-60     	; 0x6fea <dtoa_prf+0x256>
    7026:	64 17       	cp	r22, r20
    7028:	75 07       	cpc	r23, r21
    702a:	39 f4       	brne	.+14     	; 0x703a <dtoa_prf+0x2a6>
    702c:	96 33       	cpi	r25, 0x36	; 54
    702e:	20 f4       	brcc	.+8      	; 0x7038 <dtoa_prf+0x2a4>
    7030:	95 33       	cpi	r25, 0x35	; 53
    7032:	19 f4       	brne	.+6      	; 0x703a <dtoa_prf+0x2a6>
    7034:	31 11       	cpse	r19, r1
    7036:	01 c0       	rjmp	.+2      	; 0x703a <dtoa_prf+0x2a6>
    7038:	81 e3       	ldi	r24, 0x31	; 49
    703a:	f6 01       	movw	r30, r12
    703c:	80 83       	st	Z, r24
    703e:	f7 01       	movw	r30, r14
    7040:	82 2f       	mov	r24, r18
    7042:	90 e2       	ldi	r25, 0x20	; 32
    7044:	88 23       	and	r24, r24
    7046:	19 f0       	breq	.+6      	; 0x704e <dtoa_prf+0x2ba>
    7048:	91 93       	st	Z+, r25
    704a:	81 50       	subi	r24, 0x01	; 1
    704c:	fb cf       	rjmp	.-10     	; 0x7044 <dtoa_prf+0x2b0>
    704e:	f7 01       	movw	r30, r14
    7050:	e2 0f       	add	r30, r18
    7052:	f1 1d       	adc	r31, r1
    7054:	10 82       	st	Z, r1
    7056:	80 e0       	ldi	r24, 0x00	; 0
    7058:	90 e0       	ldi	r25, 0x00	; 0
    705a:	29 96       	adiw	r28, 0x09	; 9
    705c:	0f b6       	in	r0, 0x3f	; 63
    705e:	f8 94       	cli
    7060:	de bf       	out	0x3e, r29	; 62
    7062:	0f be       	out	0x3f, r0	; 63
    7064:	cd bf       	out	0x3d, r28	; 61
    7066:	df 91       	pop	r29
    7068:	cf 91       	pop	r28
    706a:	1f 91       	pop	r17
    706c:	0f 91       	pop	r16
    706e:	ff 90       	pop	r15
    7070:	ef 90       	pop	r14
    7072:	df 90       	pop	r13
    7074:	cf 90       	pop	r12
    7076:	bf 90       	pop	r11
    7078:	af 90       	pop	r10
    707a:	9f 90       	pop	r9
    707c:	8f 90       	pop	r8
    707e:	08 95       	ret

00007080 <__ftoa_engine>:
    7080:	28 30       	cpi	r18, 0x08	; 8
    7082:	08 f0       	brcs	.+2      	; 0x7086 <__ftoa_engine+0x6>
    7084:	27 e0       	ldi	r18, 0x07	; 7
    7086:	33 27       	eor	r19, r19
    7088:	da 01       	movw	r26, r20
    708a:	99 0f       	add	r25, r25
    708c:	31 1d       	adc	r19, r1
    708e:	87 fd       	sbrc	r24, 7
    7090:	91 60       	ori	r25, 0x01	; 1
    7092:	00 96       	adiw	r24, 0x00	; 0
    7094:	61 05       	cpc	r22, r1
    7096:	71 05       	cpc	r23, r1
    7098:	39 f4       	brne	.+14     	; 0x70a8 <__ftoa_engine+0x28>
    709a:	32 60       	ori	r19, 0x02	; 2
    709c:	2e 5f       	subi	r18, 0xFE	; 254
    709e:	3d 93       	st	X+, r19
    70a0:	30 e3       	ldi	r19, 0x30	; 48
    70a2:	2a 95       	dec	r18
    70a4:	e1 f7       	brne	.-8      	; 0x709e <__ftoa_engine+0x1e>
    70a6:	08 95       	ret
    70a8:	9f 3f       	cpi	r25, 0xFF	; 255
    70aa:	30 f0       	brcs	.+12     	; 0x70b8 <__ftoa_engine+0x38>
    70ac:	80 38       	cpi	r24, 0x80	; 128
    70ae:	71 05       	cpc	r23, r1
    70b0:	61 05       	cpc	r22, r1
    70b2:	09 f0       	breq	.+2      	; 0x70b6 <__ftoa_engine+0x36>
    70b4:	3c 5f       	subi	r19, 0xFC	; 252
    70b6:	3c 5f       	subi	r19, 0xFC	; 252
    70b8:	3d 93       	st	X+, r19
    70ba:	91 30       	cpi	r25, 0x01	; 1
    70bc:	08 f0       	brcs	.+2      	; 0x70c0 <__ftoa_engine+0x40>
    70be:	80 68       	ori	r24, 0x80	; 128
    70c0:	91 1d       	adc	r25, r1
    70c2:	df 93       	push	r29
    70c4:	cf 93       	push	r28
    70c6:	1f 93       	push	r17
    70c8:	0f 93       	push	r16
    70ca:	ff 92       	push	r15
    70cc:	ef 92       	push	r14
    70ce:	19 2f       	mov	r17, r25
    70d0:	98 7f       	andi	r25, 0xF8	; 248
    70d2:	96 95       	lsr	r25
    70d4:	e9 2f       	mov	r30, r25
    70d6:	96 95       	lsr	r25
    70d8:	96 95       	lsr	r25
    70da:	e9 0f       	add	r30, r25
    70dc:	ff 27       	eor	r31, r31
    70de:	ec 5d       	subi	r30, 0xDC	; 220
    70e0:	fe 4f       	sbci	r31, 0xFE	; 254
    70e2:	99 27       	eor	r25, r25
    70e4:	33 27       	eor	r19, r19
    70e6:	ee 24       	eor	r14, r14
    70e8:	ff 24       	eor	r15, r15
    70ea:	a7 01       	movw	r20, r14
    70ec:	e7 01       	movw	r28, r14
    70ee:	05 90       	lpm	r0, Z+
    70f0:	08 94       	sec
    70f2:	07 94       	ror	r0
    70f4:	28 f4       	brcc	.+10     	; 0x7100 <__ftoa_engine+0x80>
    70f6:	36 0f       	add	r19, r22
    70f8:	e7 1e       	adc	r14, r23
    70fa:	f8 1e       	adc	r15, r24
    70fc:	49 1f       	adc	r20, r25
    70fe:	51 1d       	adc	r21, r1
    7100:	66 0f       	add	r22, r22
    7102:	77 1f       	adc	r23, r23
    7104:	88 1f       	adc	r24, r24
    7106:	99 1f       	adc	r25, r25
    7108:	06 94       	lsr	r0
    710a:	a1 f7       	brne	.-24     	; 0x70f4 <__ftoa_engine+0x74>
    710c:	05 90       	lpm	r0, Z+
    710e:	07 94       	ror	r0
    7110:	28 f4       	brcc	.+10     	; 0x711c <__ftoa_engine+0x9c>
    7112:	e7 0e       	add	r14, r23
    7114:	f8 1e       	adc	r15, r24
    7116:	49 1f       	adc	r20, r25
    7118:	56 1f       	adc	r21, r22
    711a:	c1 1d       	adc	r28, r1
    711c:	77 0f       	add	r23, r23
    711e:	88 1f       	adc	r24, r24
    7120:	99 1f       	adc	r25, r25
    7122:	66 1f       	adc	r22, r22
    7124:	06 94       	lsr	r0
    7126:	a1 f7       	brne	.-24     	; 0x7110 <__ftoa_engine+0x90>
    7128:	05 90       	lpm	r0, Z+
    712a:	07 94       	ror	r0
    712c:	28 f4       	brcc	.+10     	; 0x7138 <__ftoa_engine+0xb8>
    712e:	f8 0e       	add	r15, r24
    7130:	49 1f       	adc	r20, r25
    7132:	56 1f       	adc	r21, r22
    7134:	c7 1f       	adc	r28, r23
    7136:	d1 1d       	adc	r29, r1
    7138:	88 0f       	add	r24, r24
    713a:	99 1f       	adc	r25, r25
    713c:	66 1f       	adc	r22, r22
    713e:	77 1f       	adc	r23, r23
    7140:	06 94       	lsr	r0
    7142:	a1 f7       	brne	.-24     	; 0x712c <__ftoa_engine+0xac>
    7144:	05 90       	lpm	r0, Z+
    7146:	07 94       	ror	r0
    7148:	20 f4       	brcc	.+8      	; 0x7152 <__ftoa_engine+0xd2>
    714a:	49 0f       	add	r20, r25
    714c:	56 1f       	adc	r21, r22
    714e:	c7 1f       	adc	r28, r23
    7150:	d8 1f       	adc	r29, r24
    7152:	99 0f       	add	r25, r25
    7154:	66 1f       	adc	r22, r22
    7156:	77 1f       	adc	r23, r23
    7158:	88 1f       	adc	r24, r24
    715a:	06 94       	lsr	r0
    715c:	a9 f7       	brne	.-22     	; 0x7148 <__ftoa_engine+0xc8>
    715e:	84 91       	lpm	r24, Z
    7160:	10 95       	com	r17
    7162:	17 70       	andi	r17, 0x07	; 7
    7164:	41 f0       	breq	.+16     	; 0x7176 <__ftoa_engine+0xf6>
    7166:	d6 95       	lsr	r29
    7168:	c7 95       	ror	r28
    716a:	57 95       	ror	r21
    716c:	47 95       	ror	r20
    716e:	f7 94       	ror	r15
    7170:	e7 94       	ror	r14
    7172:	1a 95       	dec	r17
    7174:	c1 f7       	brne	.-16     	; 0x7166 <__ftoa_engine+0xe6>
    7176:	ea ec       	ldi	r30, 0xCA	; 202
    7178:	f0 e0       	ldi	r31, 0x00	; 0
    717a:	68 94       	set
    717c:	15 90       	lpm	r1, Z+
    717e:	15 91       	lpm	r17, Z+
    7180:	35 91       	lpm	r19, Z+
    7182:	65 91       	lpm	r22, Z+
    7184:	95 91       	lpm	r25, Z+
    7186:	05 90       	lpm	r0, Z+
    7188:	7f e2       	ldi	r23, 0x2F	; 47
    718a:	73 95       	inc	r23
    718c:	e1 18       	sub	r14, r1
    718e:	f1 0a       	sbc	r15, r17
    7190:	43 0b       	sbc	r20, r19
    7192:	56 0b       	sbc	r21, r22
    7194:	c9 0b       	sbc	r28, r25
    7196:	d0 09       	sbc	r29, r0
    7198:	c0 f7       	brcc	.-16     	; 0x718a <__ftoa_engine+0x10a>
    719a:	e1 0c       	add	r14, r1
    719c:	f1 1e       	adc	r15, r17
    719e:	43 1f       	adc	r20, r19
    71a0:	56 1f       	adc	r21, r22
    71a2:	c9 1f       	adc	r28, r25
    71a4:	d0 1d       	adc	r29, r0
    71a6:	7e f4       	brtc	.+30     	; 0x71c6 <__ftoa_engine+0x146>
    71a8:	70 33       	cpi	r23, 0x30	; 48
    71aa:	11 f4       	brne	.+4      	; 0x71b0 <__ftoa_engine+0x130>
    71ac:	8a 95       	dec	r24
    71ae:	e6 cf       	rjmp	.-52     	; 0x717c <__ftoa_engine+0xfc>
    71b0:	e8 94       	clt
    71b2:	01 50       	subi	r16, 0x01	; 1
    71b4:	30 f0       	brcs	.+12     	; 0x71c2 <__ftoa_engine+0x142>
    71b6:	08 0f       	add	r16, r24
    71b8:	0a f4       	brpl	.+2      	; 0x71bc <__ftoa_engine+0x13c>
    71ba:	00 27       	eor	r16, r16
    71bc:	02 17       	cp	r16, r18
    71be:	08 f4       	brcc	.+2      	; 0x71c2 <__ftoa_engine+0x142>
    71c0:	20 2f       	mov	r18, r16
    71c2:	23 95       	inc	r18
    71c4:	02 2f       	mov	r16, r18
    71c6:	7a 33       	cpi	r23, 0x3A	; 58
    71c8:	28 f0       	brcs	.+10     	; 0x71d4 <__ftoa_engine+0x154>
    71ca:	79 e3       	ldi	r23, 0x39	; 57
    71cc:	7d 93       	st	X+, r23
    71ce:	2a 95       	dec	r18
    71d0:	e9 f7       	brne	.-6      	; 0x71cc <__ftoa_engine+0x14c>
    71d2:	10 c0       	rjmp	.+32     	; 0x71f4 <__ftoa_engine+0x174>
    71d4:	7d 93       	st	X+, r23
    71d6:	2a 95       	dec	r18
    71d8:	89 f6       	brne	.-94     	; 0x717c <__ftoa_engine+0xfc>
    71da:	06 94       	lsr	r0
    71dc:	97 95       	ror	r25
    71de:	67 95       	ror	r22
    71e0:	37 95       	ror	r19
    71e2:	17 95       	ror	r17
    71e4:	17 94       	ror	r1
    71e6:	e1 18       	sub	r14, r1
    71e8:	f1 0a       	sbc	r15, r17
    71ea:	43 0b       	sbc	r20, r19
    71ec:	56 0b       	sbc	r21, r22
    71ee:	c9 0b       	sbc	r28, r25
    71f0:	d0 09       	sbc	r29, r0
    71f2:	98 f0       	brcs	.+38     	; 0x721a <__ftoa_engine+0x19a>
    71f4:	23 95       	inc	r18
    71f6:	7e 91       	ld	r23, -X
    71f8:	73 95       	inc	r23
    71fa:	7a 33       	cpi	r23, 0x3A	; 58
    71fc:	08 f0       	brcs	.+2      	; 0x7200 <__ftoa_engine+0x180>
    71fe:	70 e3       	ldi	r23, 0x30	; 48
    7200:	7c 93       	st	X, r23
    7202:	20 13       	cpse	r18, r16
    7204:	b8 f7       	brcc	.-18     	; 0x71f4 <__ftoa_engine+0x174>
    7206:	7e 91       	ld	r23, -X
    7208:	70 61       	ori	r23, 0x10	; 16
    720a:	7d 93       	st	X+, r23
    720c:	30 f0       	brcs	.+12     	; 0x721a <__ftoa_engine+0x19a>
    720e:	83 95       	inc	r24
    7210:	71 e3       	ldi	r23, 0x31	; 49
    7212:	7d 93       	st	X+, r23
    7214:	70 e3       	ldi	r23, 0x30	; 48
    7216:	2a 95       	dec	r18
    7218:	e1 f7       	brne	.-8      	; 0x7212 <__ftoa_engine+0x192>
    721a:	11 24       	eor	r1, r1
    721c:	ef 90       	pop	r14
    721e:	ff 90       	pop	r15
    7220:	0f 91       	pop	r16
    7222:	1f 91       	pop	r17
    7224:	cf 91       	pop	r28
    7226:	df 91       	pop	r29
    7228:	99 27       	eor	r25, r25
    722a:	87 fd       	sbrc	r24, 7
    722c:	90 95       	com	r25
    722e:	08 95       	ret

00007230 <__ctype_isfalse>:
    7230:	99 27       	eor	r25, r25
    7232:	88 27       	eor	r24, r24

00007234 <__ctype_istrue>:
    7234:	08 95       	ret

00007236 <strrev>:
    7236:	dc 01       	movw	r26, r24
    7238:	fc 01       	movw	r30, r24
    723a:	67 2f       	mov	r22, r23
    723c:	71 91       	ld	r23, Z+
    723e:	77 23       	and	r23, r23
    7240:	e1 f7       	brne	.-8      	; 0x723a <strrev+0x4>
    7242:	32 97       	sbiw	r30, 0x02	; 2
    7244:	04 c0       	rjmp	.+8      	; 0x724e <strrev+0x18>
    7246:	7c 91       	ld	r23, X
    7248:	6d 93       	st	X+, r22
    724a:	70 83       	st	Z, r23
    724c:	62 91       	ld	r22, -Z
    724e:	ae 17       	cp	r26, r30
    7250:	bf 07       	cpc	r27, r31
    7252:	c8 f3       	brcs	.-14     	; 0x7246 <strrev+0x10>
    7254:	08 95       	ret

00007256 <__do_global_dtors>:
    7256:	11 e0       	ldi	r17, 0x01	; 1
    7258:	ce e5       	ldi	r28, 0x5E	; 94
    725a:	d1 e0       	ldi	r29, 0x01	; 1
    725c:	03 c0       	rjmp	.+6      	; 0x7264 <__do_global_dtors+0xe>
    725e:	fe 01       	movw	r30, r28
    7260:	c3 da       	rcall	.-2682   	; 0x67e8 <__tablejump2__>
    7262:	21 96       	adiw	r28, 0x01	; 1
    7264:	cf 35       	cpi	r28, 0x5F	; 95
    7266:	d1 07       	cpc	r29, r17
    7268:	d1 f7       	brne	.-12     	; 0x725e <__do_global_dtors+0x8>
    726a:	f8 94       	cli

0000726c <__stop_program>:
    726c:	ff cf       	rjmp	.-2      	; 0x726c <__stop_program>
