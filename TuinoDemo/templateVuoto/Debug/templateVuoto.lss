
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000900  00800100  00008e04  00008e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008e04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000047f  00800a00  00800a00  00009798  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00009798  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000097c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001570  00000000  00000000  00009808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00046336  00000000  00000000  0000ad78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008469  00000000  00000000  000510ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000e057  00000000  00000000  00059517  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005138  00000000  00000000  00067570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009b3d  00000000  00000000  0006c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001e907  00000000  00000000  000761e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001780  00000000  00000000  00094aec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__dtors_end>
       2:	00 00       	nop
       4:	8e c1       	rjmp	.+796    	; 0x322 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c1       	rjmp	.+792    	; 0x322 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c1       	rjmp	.+788    	; 0x322 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__vector_4>
      14:	86 c1       	rjmp	.+780    	; 0x322 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c1       	rjmp	.+776    	; 0x322 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__vector_7>
      20:	80 c1       	rjmp	.+768    	; 0x322 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c1       	rjmp	.+764    	; 0x322 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c1       	rjmp	.+760    	; 0x322 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c1       	rjmp	.+756    	; 0x322 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c1       	rjmp	.+752    	; 0x322 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c1       	rjmp	.+748    	; 0x322 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c1       	rjmp	.+744    	; 0x322 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c1       	rjmp	.+740    	; 0x322 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 fd 3a 	jmp	0x75fa	; 0x75fa <__vector_16>
      44:	6e c1       	rjmp	.+732    	; 0x322 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 d4 38 	jmp	0x71a8	; 0x71a8 <__vector_18>
      4c:	0c 94 06 39 	jmp	0x720c	; 0x720c <__vector_19>
      50:	68 c1       	rjmp	.+720    	; 0x322 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c1       	rjmp	.+716    	; 0x322 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c1       	rjmp	.+712    	; 0x322 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c1       	rjmp	.+708    	; 0x322 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c1       	rjmp	.+704    	; 0x322 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c1       	rjmp	.+700    	; 0x322 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 21 35 	jmp	0x6a42	; 0x6a42 <__vector_26>
      6c:	5a c1       	rjmp	.+692    	; 0x322 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c1       	rjmp	.+688    	; 0x322 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c1       	rjmp	.+684    	; 0x322 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c1       	rjmp	.+680    	; 0x322 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c1       	rjmp	.+676    	; 0x322 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c1       	rjmp	.+672    	; 0x322 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c1       	rjmp	.+668    	; 0x322 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c1       	rjmp	.+664    	; 0x322 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b5 12       	cpse	r11, r21
      8e:	db 12       	cpse	r13, r27
      90:	04 13       	cpse	r16, r20
      92:	2c 13       	cpse	r18, r28
      94:	7e 13       	cpse	r23, r30
      96:	b2 13       	cpse	r27, r18
      98:	38 14       	cp	r3, r8
      9a:	87 14       	cp	r8, r7
      9c:	bf 14       	cp	r11, r15
      9e:	22 15       	cp	r18, r2
      a0:	c4 15       	cp	r28, r4
      a2:	6a 1d       	adc	r22, r10
      a4:	81 1d       	adc	r24, r1
      a6:	81 1d       	adc	r24, r1
      a8:	7e 1d       	adc	r23, r14
      aa:	81 1d       	adc	r24, r1
      ac:	68 1d       	adc	r22, r8
      ae:	81 1d       	adc	r24, r1
      b0:	81 1d       	adc	r24, r1
      b2:	81 1d       	adc	r24, r1
      b4:	5c 1d       	adc	r21, r12
      b6:	81 1d       	adc	r24, r1
      b8:	81 1d       	adc	r24, r1
      ba:	71 1d       	adc	r23, r1
      bc:	7c 1d       	adc	r23, r12
      be:	7a 1d       	adc	r23, r10
      c0:	81 1d       	adc	r24, r1
      c2:	81 1d       	adc	r24, r1
      c4:	81 1d       	adc	r24, r1
      c6:	78 1d       	adc	r23, r8

000000c8 <__trampolines_end>:
      c8:	00 40       	sbci	r16, 0x00	; 0
      ca:	7a 10       	cpse	r7, r10
      cc:	f3 5a       	subi	r31, 0xA3	; 163
      ce:	00 a0       	ldd	r0, Z+32	; 0x20
      d0:	72 4e       	sbci	r23, 0xE2	; 226
      d2:	18 09       	sbc	r17, r8
      d4:	00 10       	cpse	r0, r0
      d6:	a5 d4       	rcall	.+2378   	; 0xa22 <_Z10displayLCDP6Stringii+0xc>
      d8:	e8 00       	.word	0x00e8	; ????
      da:	00 e8       	ldi	r16, 0x80	; 128
      dc:	76 48       	sbci	r23, 0x86	; 134
      de:	17 00       	.word	0x0017	; ????
      e0:	00 e4       	ldi	r16, 0x40	; 64
      e2:	0b 54       	subi	r16, 0x4B	; 75
      e4:	02 00       	.word	0x0002	; ????
      e6:	00 ca       	rjmp	.-3072   	; 0xfffff4e8 <__eeprom_end+0xff7ef4e8>
      e8:	9a 3b       	cpi	r25, 0xBA	; 186
      ea:	00 00       	nop
      ec:	00 e1       	ldi	r16, 0x10	; 16
      ee:	f5 05       	cpc	r31, r5
      f0:	00 00       	nop
      f2:	80 96       	adiw	r24, 0x20	; 32
      f4:	98 00       	.word	0x0098	; ????
      f6:	00 00       	nop
      f8:	40 42       	sbci	r20, 0x20	; 32
      fa:	0f 00       	.word	0x000f	; ????
      fc:	00 00       	nop
      fe:	a0 86       	std	Z+8, r10	; 0x08
     100:	01 00       	.word	0x0001	; ????
     102:	00 00       	nop
     104:	10 27       	eor	r17, r16
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	e8 03       	fmulsu	r22, r16
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	64 00       	.word	0x0064	; ????
     112:	00 00       	nop
     114:	00 00       	nop
     116:	0a 00       	.word	0x000a	; ????
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	01 00       	.word	0x0001	; ????
     11e:	00 00       	nop
     120:	00 00       	nop
     122:	2c 76       	andi	r18, 0x6C	; 108
     124:	d8 88       	ldd	r13, Y+16	; 0x10
     126:	dc 67       	ori	r29, 0x7C	; 124
     128:	4f 08       	sbc	r4, r15
     12a:	23 df       	rcall	.-442    	; 0xffffff72 <__eeprom_end+0xff7eff72>
     12c:	c1 df       	rcall	.-126    	; 0xb0 <__SREG__+0x71>
     12e:	ae 59       	subi	r26, 0x9E	; 158
     130:	e1 b1       	in	r30, 0x01	; 1
     132:	b7 96       	adiw	r30, 0x27	; 39
     134:	e5 e3       	ldi	r30, 0x35	; 53
     136:	e4 53       	subi	r30, 0x34	; 52
     138:	c6 3a       	cpi	r28, 0xA6	; 166
     13a:	e6 51       	subi	r30, 0x16	; 22
     13c:	99 76       	andi	r25, 0x69	; 105
     13e:	96 e8       	ldi	r25, 0x86	; 134
     140:	e6 c2       	rjmp	.+1484   	; 0x70e <_Z13eraseChipTestv+0x28>
     142:	84 26       	eor	r8, r20
     144:	eb 89       	ldd	r30, Y+19	; 0x13
     146:	8c 9b       	sbis	0x11, 4	; 17
     148:	62 ed       	ldi	r22, 0xD2	; 210
     14a:	40 7c       	andi	r20, 0xC0	; 192
     14c:	6f fc       	.word	0xfc6f	; ????
     14e:	ef bc       	out	0x2f, r14	; 47
     150:	9c 9f       	mul	r25, r28
     152:	40 f2       	brcs	.-112    	; 0xe4 <__trampolines_end+0x1c>
     154:	ba a5       	ldd	r27, Y+42	; 0x2a
     156:	6f a5       	ldd	r22, Y+47	; 0x2f
     158:	f4 90       	lpm	r15, Z
     15a:	05 5a       	subi	r16, 0xA5	; 165
     15c:	2a f7       	brpl	.-54     	; 0x128 <__trampolines_end+0x60>
     15e:	5c 93       	st	X, r21
     160:	6b 6c       	ori	r22, 0xCB	; 203
     162:	f9 67       	ori	r31, 0x79	; 121
     164:	6d c1       	rjmp	.+730    	; 0x440 <_Z4passb+0xc>
     166:	1b fc       	.word	0xfc1b	; ????
     168:	e0 e4       	ldi	r30, 0x40	; 64
     16a:	0d 47       	sbci	r16, 0x7D	; 125
     16c:	fe f5       	brtc	.+126    	; 0x1ec <_ZZ5setupE3__c+0x15>
     16e:	20 e6       	ldi	r18, 0x60	; 96
     170:	b5 00       	.word	0x00b5	; ????
     172:	d0 ed       	ldi	r29, 0xD0	; 208
     174:	90 2e       	mov	r9, r16
     176:	03 00       	.word	0x0003	; ????
     178:	94 35       	cpi	r25, 0x54	; 84
     17a:	77 05       	cpc	r23, r7
     17c:	00 80       	ld	r0, Z
     17e:	84 1e       	adc	r8, r20
     180:	08 00       	.word	0x0008	; ????
     182:	00 20       	and	r0, r0
     184:	4e 0a       	sbc	r4, r30
     186:	00 00       	nop
     188:	00 c8       	rjmp	.-4096   	; 0xfffff18a <__eeprom_end+0xff7ef18a>
     18a:	0c 33       	cpi	r16, 0x3C	; 60
     18c:	33 33       	cpi	r19, 0x33	; 51
     18e:	33 0f       	add	r19, r19
     190:	98 6e       	ori	r25, 0xE8	; 232
     192:	12 83       	std	Z+2, r17	; 0x02
     194:	11 41       	sbci	r17, 0x11	; 17
     196:	ef 8d       	ldd	r30, Y+31	; 0x1f
     198:	21 14       	cp	r2, r1
     19a:	89 3b       	cpi	r24, 0xB9	; 185
     19c:	e6 55       	subi	r30, 0x56	; 86
     19e:	16 cf       	rjmp	.-468    	; 0xffffffcc <__eeprom_end+0xff7effcc>
     1a0:	fe e6       	ldi	r31, 0x6E	; 110
     1a2:	db 18       	sub	r13, r11
     1a4:	d1 84       	ldd	r13, Z+9	; 0x09
     1a6:	4b 38       	cpi	r20, 0x8B	; 139
     1a8:	1b f7       	brvc	.-58     	; 0x170 <__trampolines_end+0xa8>
     1aa:	7c 1d       	adc	r23, r12
     1ac:	90 1d       	adc	r25, r0
     1ae:	a4 bb       	out	0x14, r26	; 20
     1b0:	e4 24       	eor	r14, r4
     1b2:	20 32       	cpi	r18, 0x20	; 32
     1b4:	84 72       	andi	r24, 0x24	; 36
     1b6:	5e 22       	and	r5, r30
     1b8:	81 00       	.word	0x0081	; ????
     1ba:	c9 f1       	breq	.+114    	; 0x22e <_ZZN11Diagnostics15_printErrorCodeEvE3__c+0x5>
     1bc:	24 ec       	ldi	r18, 0xC4	; 196
     1be:	a1 e5       	ldi	r26, 0x51	; 81
     1c0:	3d 27       	eor	r19, r29

000001c2 <_ZZ5setupE3__c_0>:
     1c2:	44 53 33 32 33 31 4d 20 69 6e 69 74 69 61 6c 69     DS3231M initiali
     1d2:	7a 65 64 2e 00                                      zed..

000001d7 <_ZZ5setupE3__c>:
     1d7:	55 6e 61 62 6c 65 20 74 6f 20 66 69 6e 64 20 44     Unable to find D
     1e7:	53 33 32 33 31 4d 4d 2e 20 43 68 65 63 6b 69 6e     S3231MM. Checkin
     1f7:	67 20 61 67 61 69 6e 20 69 6e 20 33 73 2e 00        g again in 3s..

00000206 <_ZZN13DS3231M_Class6adjustEvE3__c>:
     206:	41 70 72 20 32 38 20 32 30 32 30 00                 Apr 28 2020.

00000212 <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     212:	31 36 3a 34 36 3a 32 35 00                          16:46:25.

0000021b <_ZL11daysInMonth>:
     21b:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000227 <_ZZN11Diagnostics15_printErrorCodeEvE3__c_0>:
     227:	30 00                                               0.

00000229 <_ZZN11Diagnostics15_printErrorCodeEvE3__c>:
     229:	45 72 72 6f 72 20 63 6f 64 65 3a 20 30 78 00        Error code: 0x.

00000238 <digital_pin_to_timer_PGM>:
     238:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     254:	00 00 00 01                                         ....

00000258 <digital_pin_to_bit_mask_PGM>:
     258:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     268:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

00000278 <digital_pin_to_port_PGM>:
     278:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     288:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

00000298 <port_to_input_PGM>:
     298:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002a2 <port_to_output_PGM>:
     2a2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002ac <port_to_mode_PGM>:
     2ac:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002b6 <__ctors_start>:
     2b6:	4c 0b       	sbc	r20, r28
     2b8:	f0 1f       	adc	r31, r16
     2ba:	48 20       	and	r4, r8
     2bc:	40 23       	and	r20, r16
     2be:	3c 25       	eor	r19, r12
     2c0:	57 26       	eor	r5, r23
     2c2:	29 28       	or	r2, r9
     2c4:	34 28       	or	r3, r4
     2c6:	f3 2b       	or	r31, r19
     2c8:	b1 37       	cpi	r27, 0x71	; 113
     2ca:	34 39       	cpi	r19, 0x94	; 148

000002cc <__ctors_end>:
     2cc:	3e 0c       	add	r3, r14

000002ce <__dtors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d0 e4       	ldi	r29, 0x40	; 64
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61

000002da <__do_copy_data>:
     2da:	1a e0       	ldi	r17, 0x0A	; 10
     2dc:	a0 e0       	ldi	r26, 0x00	; 0
     2de:	b1 e0       	ldi	r27, 0x01	; 1
     2e0:	e4 e0       	ldi	r30, 0x04	; 4
     2e2:	fe e8       	ldi	r31, 0x8E	; 142
     2e4:	00 e0       	ldi	r16, 0x00	; 0
     2e6:	0b bf       	out	0x3b, r16	; 59
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <__do_copy_data+0x14>
     2ea:	07 90       	elpm	r0, Z+
     2ec:	0d 92       	st	X+, r0
     2ee:	a0 30       	cpi	r26, 0x00	; 0
     2f0:	b1 07       	cpc	r27, r17
     2f2:	d9 f7       	brne	.-10     	; 0x2ea <__do_copy_data+0x10>

000002f4 <__do_clear_bss>:
     2f4:	2e e0       	ldi	r18, 0x0E	; 14
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	ba e0       	ldi	r27, 0x0A	; 10
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <.do_clear_bss_start>

000002fc <.do_clear_bss_loop>:
     2fc:	1d 92       	st	X+, r1

000002fe <.do_clear_bss_start>:
     2fe:	af 37       	cpi	r26, 0x7F	; 127
     300:	b2 07       	cpc	r27, r18
     302:	e1 f7       	brne	.-8      	; 0x2fc <.do_clear_bss_loop>

00000304 <__do_global_ctors>:
     304:	11 e0       	ldi	r17, 0x01	; 1
     306:	c6 e6       	ldi	r28, 0x66	; 102
     308:	d1 e0       	ldi	r29, 0x01	; 1
     30a:	04 c0       	rjmp	.+8      	; 0x314 <__do_global_ctors+0x10>
     30c:	21 97       	sbiw	r28, 0x01	; 1
     30e:	fe 01       	movw	r30, r28
     310:	0e 94 9e 40 	call	0x813c	; 0x813c <__tablejump2__>
     314:	cb 35       	cpi	r28, 0x5B	; 91
     316:	d1 07       	cpc	r29, r17
     318:	c9 f7       	brne	.-14     	; 0x30c <__do_global_ctors+0x8>
     31a:	0e 94 cc 39 	call	0x7398	; 0x7398 <main>
     31e:	0c 94 f6 46 	jmp	0x8dec	; 0x8dec <__do_global_dtors>

00000322 <__bad_interrupt>:
     322:	6e ce       	rjmp	.-804    	; 0x0 <__vectors>

00000324 <_ZL11disable_ETHv>:
      if (rispostaGetTimbrature == "200"){ valida = 1; }
      _delay_ms(80);
    }
  }
  return valida;
}
     324:	44 9a       	sbi	0x08, 4	; 8
     326:	08 95       	ret

00000328 <_ZN7TwoWire5writeEi>:
     328:	dc 01       	movw	r26, r24
     32a:	ed 91       	ld	r30, X+
     32c:	fc 91       	ld	r31, X
     32e:	01 90       	ld	r0, Z+
     330:	f0 81       	ld	r31, Z
     332:	e0 2d       	mov	r30, r0
     334:	09 94       	ijmp

00000336 <_Z14initIOExpanderv>:
     336:	8f e7       	ldi	r24, 0x7F	; 127
     338:	9d e0       	ldi	r25, 0x0D	; 13
     33a:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <_ZN7TwoWire5beginEv>
     33e:	60 e2       	ldi	r22, 0x20	; 32
     340:	8f e7       	ldi	r24, 0x7F	; 127
     342:	9d e0       	ldi	r25, 0x0D	; 13
     344:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	70 e0       	ldi	r23, 0x00	; 0
     34c:	8f e7       	ldi	r24, 0x7F	; 127
     34e:	9d e0       	ldi	r25, 0x0D	; 13
     350:	eb df       	rcall	.-42     	; 0x328 <_ZN7TwoWire5writeEi>
     352:	63 ec       	ldi	r22, 0xC3	; 195
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	8f e7       	ldi	r24, 0x7F	; 127
     358:	9d e0       	ldi	r25, 0x0D	; 13
     35a:	e6 df       	rcall	.-52     	; 0x328 <_ZN7TwoWire5writeEi>
     35c:	8f e7       	ldi	r24, 0x7F	; 127
     35e:	9d e0       	ldi	r25, 0x0D	; 13
     360:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
     364:	60 e2       	ldi	r22, 0x20	; 32
     366:	8f e7       	ldi	r24, 0x7F	; 127
     368:	9d e0       	ldi	r25, 0x0D	; 13
     36a:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>
     36e:	62 e0       	ldi	r22, 0x02	; 2
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	8f e7       	ldi	r24, 0x7F	; 127
     374:	9d e0       	ldi	r25, 0x0D	; 13
     376:	d8 df       	rcall	.-80     	; 0x328 <_ZN7TwoWire5writeEi>
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	8f e7       	ldi	r24, 0x7F	; 127
     37e:	9d e0       	ldi	r25, 0x0D	; 13
     380:	d3 df       	rcall	.-90     	; 0x328 <_ZN7TwoWire5writeEi>
     382:	8f e7       	ldi	r24, 0x7F	; 127
     384:	9d e0       	ldi	r25, 0x0D	; 13
     386:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
     38a:	8f e3       	ldi	r24, 0x3F	; 63
     38c:	9c e9       	ldi	r25, 0x9C	; 156
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <_Z14initIOExpanderv+0x58>
     392:	00 c0       	rjmp	.+0      	; 0x394 <_Z14initIOExpanderv+0x5e>
     394:	00 00       	nop
     396:	60 e2       	ldi	r22, 0x20	; 32
     398:	8f e7       	ldi	r24, 0x7F	; 127
     39a:	9d e0       	ldi	r25, 0x0D	; 13
     39c:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>
     3a0:	63 e0       	ldi	r22, 0x03	; 3
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	8f e7       	ldi	r24, 0x7F	; 127
     3a6:	9d e0       	ldi	r25, 0x0D	; 13
     3a8:	bf df       	rcall	.-130    	; 0x328 <_ZN7TwoWire5writeEi>
     3aa:	6c e3       	ldi	r22, 0x3C	; 60
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	8f e7       	ldi	r24, 0x7F	; 127
     3b0:	9d e0       	ldi	r25, 0x0D	; 13
     3b2:	ba df       	rcall	.-140    	; 0x328 <_ZN7TwoWire5writeEi>
     3b4:	8f e7       	ldi	r24, 0x7F	; 127
     3b6:	9d e0       	ldi	r25, 0x0D	; 13
     3b8:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
     3bc:	8f e3       	ldi	r24, 0x3F	; 63
     3be:	9c e9       	ldi	r25, 0x9C	; 156
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <_Z14initIOExpanderv+0x8a>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <_Z14initIOExpanderv+0x90>
     3c6:	00 00       	nop
     3c8:	60 e2       	ldi	r22, 0x20	; 32
     3ca:	8f e7       	ldi	r24, 0x7F	; 127
     3cc:	9d e0       	ldi	r25, 0x0D	; 13
     3ce:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	8f e7       	ldi	r24, 0x7F	; 127
     3d8:	9d e0       	ldi	r25, 0x0D	; 13
     3da:	a6 df       	rcall	.-180    	; 0x328 <_ZN7TwoWire5writeEi>
     3dc:	8f e7       	ldi	r24, 0x7F	; 127
     3de:	9d e0       	ldi	r25, 0x0D	; 13
     3e0:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
     3e4:	8f e7       	ldi	r24, 0x7F	; 127
     3e6:	9d e0       	ldi	r25, 0x0D	; 13
     3e8:	0c 94 1b 37 	jmp	0x6e36	; 0x6e36 <_ZN7TwoWire5beginEv>

000003ec <_Z9printLinev>:
     3ec:	cf 93       	push	r28
     3ee:	85 ed       	ldi	r24, 0xD5	; 213
     3f0:	9d e0       	ldi	r25, 0x0D	; 13
     3f2:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <_ZN5Print7printlnEv>
     3f6:	cd e7       	ldi	r28, 0x7D	; 125
     3f8:	6c eb       	ldi	r22, 0xBC	; 188
     3fa:	71 e0       	ldi	r23, 0x01	; 1
     3fc:	85 ed       	ldi	r24, 0xD5	; 213
     3fe:	9d e0       	ldi	r25, 0x0D	; 13
     400:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     404:	c1 50       	subi	r28, 0x01	; 1
     406:	c1 f7       	brne	.-16     	; 0x3f8 <_Z9printLinev+0xc>
     408:	85 ed       	ldi	r24, 0xD5	; 213
     40a:	9d e0       	ldi	r25, 0x0D	; 13
     40c:	cf 91       	pop	r28
     40e:	0c 94 51 3a 	jmp	0x74a2	; 0x74a2 <_ZN5Print7printlnEv>

00000412 <_Z8printTabh>:
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	d8 2f       	mov	r29, r24
     418:	c0 e0       	ldi	r28, 0x00	; 0
     41a:	cd 17       	cp	r28, r29
     41c:	41 f0       	breq	.+16     	; 0x42e <_Z8printTabh+0x1c>
     41e:	6e eb       	ldi	r22, 0xBE	; 190
     420:	71 e0       	ldi	r23, 0x01	; 1
     422:	85 ed       	ldi	r24, 0xD5	; 213
     424:	9d e0       	ldi	r25, 0x0D	; 13
     426:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     42a:	cf 5f       	subi	r28, 0xFF	; 255
     42c:	f6 cf       	rjmp	.-20     	; 0x41a <_Z8printTabh+0x8>
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <_Z4passb>:
     434:	cf 93       	push	r28
     436:	c8 2f       	mov	r28, r24
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	eb df       	rcall	.-42     	; 0x412 <_Z8printTabh>
     43c:	60 ec       	ldi	r22, 0xC0	; 192
     43e:	71 e0       	ldi	r23, 0x01	; 1
     440:	85 ed       	ldi	r24, 0xD5	; 213
     442:	9d e0       	ldi	r25, 0x0D	; 13
     444:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     448:	cc 23       	and	r28, r28
     44a:	19 f0       	breq	.+6      	; 0x452 <_Z4passb+0x1e>
     44c:	64 ec       	ldi	r22, 0xC4	; 196
     44e:	71 e0       	ldi	r23, 0x01	; 1
     450:	02 c0       	rjmp	.+4      	; 0x456 <_Z4passb+0x22>
     452:	69 ec       	ldi	r22, 0xC9	; 201
     454:	71 e0       	ldi	r23, 0x01	; 1
     456:	85 ed       	ldi	r24, 0xD5	; 213
     458:	9d e0       	ldi	r25, 0x0D	; 13
     45a:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	cf 91       	pop	r28
     462:	d7 cf       	rjmp	.-82     	; 0x412 <_Z8printTabh>

00000464 <_Z13printUniqueIDv>:
     464:	4f 92       	push	r4
     466:	5f 92       	push	r5
     468:	6f 92       	push	r6
     46a:	7f 92       	push	r7
     46c:	8f 92       	push	r8
     46e:	9f 92       	push	r9
     470:	af 92       	push	r10
     472:	bf 92       	push	r11
     474:	cf 92       	push	r12
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	9a e0       	ldi	r25, 0x0A	; 10
     488:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <_ZN8SPIFlash11getUniqueIDEv>
     48c:	49 01       	movw	r8, r18
     48e:	d4 2f       	mov	r29, r20
     490:	c5 2f       	mov	r28, r21
     492:	2b 01       	movw	r4, r22
     494:	3c 01       	movw	r6, r24
     496:	a0 e0       	ldi	r26, 0x00	; 0
     498:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <__cmpdi2_s8>
     49c:	09 f4       	brne	.+2      	; 0x4a0 <_Z13printUniqueIDv+0x3c>
     49e:	60 c0       	rjmp	.+192    	; 0x560 <_Z13printUniqueIDv+0xfc>
     4a0:	6e ec       	ldi	r22, 0xCE	; 206
     4a2:	71 e0       	ldi	r23, 0x01	; 1
     4a4:	85 ed       	ldi	r24, 0xD5	; 213
     4a6:	9d e0       	ldi	r25, 0x0D	; 13
     4a8:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     4ac:	80 e4       	ldi	r24, 0x40	; 64
     4ae:	a8 2e       	mov	r10, r24
     4b0:	92 e4       	ldi	r25, 0x42	; 66
     4b2:	b9 2e       	mov	r11, r25
     4b4:	2f e0       	ldi	r18, 0x0F	; 15
     4b6:	c2 2e       	mov	r12, r18
     4b8:	d1 2c       	mov	r13, r1
     4ba:	e1 2c       	mov	r14, r1
     4bc:	f1 2c       	mov	r15, r1
     4be:	00 e0       	ldi	r16, 0x00	; 0
     4c0:	10 e0       	ldi	r17, 0x00	; 0
     4c2:	94 01       	movw	r18, r8
     4c4:	4d 2f       	mov	r20, r29
     4c6:	5c 2f       	mov	r21, r28
     4c8:	b2 01       	movw	r22, r4
     4ca:	c3 01       	movw	r24, r6
     4cc:	0e 94 c2 40 	call	0x8184	; 0x8184 <__divdi3>
     4d0:	f2 2f       	mov	r31, r18
     4d2:	e3 2f       	mov	r30, r19
     4d4:	2a e0       	ldi	r18, 0x0A	; 10
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	cf 01       	movw	r24, r30
     4da:	ba 01       	movw	r22, r20
     4dc:	49 2f       	mov	r20, r25
     4de:	58 2f       	mov	r21, r24
     4e0:	85 ed       	ldi	r24, 0xD5	; 213
     4e2:	9d e0       	ldi	r25, 0x0D	; 13
     4e4:	0e 94 cb 3a 	call	0x7596	; 0x7596 <_ZN5Print5printEmi>
     4e8:	94 01       	movw	r18, r8
     4ea:	4d 2f       	mov	r20, r29
     4ec:	5c 2f       	mov	r21, r28
     4ee:	b2 01       	movw	r22, r4
     4f0:	c3 01       	movw	r24, r6
     4f2:	0e 94 c0 40 	call	0x8180	; 0x8180 <__moddi3>
     4f6:	f2 2f       	mov	r31, r18
     4f8:	e3 2f       	mov	r30, r19
     4fa:	2a e0       	ldi	r18, 0x0A	; 10
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	cf 01       	movw	r24, r30
     500:	ba 01       	movw	r22, r20
     502:	49 2f       	mov	r20, r25
     504:	58 2f       	mov	r21, r24
     506:	85 ed       	ldi	r24, 0xD5	; 213
     508:	9d e0       	ldi	r25, 0x0D	; 13
     50a:	0e 94 cb 3a 	call	0x7596	; 0x7596 <_ZN5Print5printEmi>
     50e:	6a ed       	ldi	r22, 0xDA	; 218
     510:	71 e0       	ldi	r23, 0x01	; 1
     512:	85 ed       	ldi	r24, 0xD5	; 213
     514:	9d e0       	ldi	r25, 0x0D	; 13
     516:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     51a:	65 ee       	ldi	r22, 0xE5	; 229
     51c:	72 e0       	ldi	r23, 0x02	; 2
     51e:	85 ed       	ldi	r24, 0xD5	; 213
     520:	9d e0       	ldi	r25, 0x0D	; 13
     522:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     526:	94 01       	movw	r18, r8
     528:	4d 2f       	mov	r20, r29
     52a:	5c 2f       	mov	r21, r28
     52c:	b2 01       	movw	r22, r4
     52e:	c3 01       	movw	r24, r6
     530:	00 e2       	ldi	r16, 0x20	; 32
     532:	0e 94 a9 41 	call	0x8352	; 0x8352 <__ashrdi3>
     536:	f2 2f       	mov	r31, r18
     538:	e3 2f       	mov	r30, r19
     53a:	20 e1       	ldi	r18, 0x10	; 16
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	cf 01       	movw	r24, r30
     540:	ba 01       	movw	r22, r20
     542:	49 2f       	mov	r20, r25
     544:	58 2f       	mov	r21, r24
     546:	85 ed       	ldi	r24, 0xD5	; 213
     548:	9d e0       	ldi	r25, 0x0D	; 13
     54a:	0e 94 cb 3a 	call	0x7596	; 0x7596 <_ZN5Print5printEmi>
     54e:	20 e1       	ldi	r18, 0x10	; 16
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	a4 01       	movw	r20, r8
     554:	6d 2f       	mov	r22, r29
     556:	7c 2f       	mov	r23, r28
     558:	85 ed       	ldi	r24, 0xD5	; 213
     55a:	9d e0       	ldi	r25, 0x0D	; 13
     55c:	0e 94 cb 3a 	call	0x7596	; 0x7596 <_ZN5Print5printEmi>
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	df 90       	pop	r13
     56e:	cf 90       	pop	r12
     570:	bf 90       	pop	r11
     572:	af 90       	pop	r10
     574:	9f 90       	pop	r9
     576:	8f 90       	pop	r8
     578:	7f 90       	pop	r7
     57a:	6f 90       	pop	r6
     57c:	5f 90       	pop	r5
     57e:	4f 90       	pop	r4
     580:	35 cf       	rjmp	.-406    	; 0x3ec <_Z9printLinev>

00000582 <_Z16FlasheraseSectorm>:
     582:	cf 92       	push	r12
     584:	df 92       	push	r13
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	6b 01       	movw	r12, r22
     58c:	7c 01       	movw	r14, r24
     58e:	83 e0       	ldi	r24, 0x03	; 3
     590:	40 df       	rcall	.-384    	; 0x412 <_Z8printTabh>
     592:	6d ed       	ldi	r22, 0xDD	; 221
     594:	71 e0       	ldi	r23, 0x01	; 1
     596:	85 ed       	ldi	r24, 0xD5	; 213
     598:	9d e0       	ldi	r25, 0x0D	; 13
     59a:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	38 df       	rcall	.-400    	; 0x412 <_Z8printTabh>
     5a2:	b7 01       	movw	r22, r14
     5a4:	a6 01       	movw	r20, r12
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	9a e0       	ldi	r25, 0x0A	; 10
     5aa:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <_ZN8SPIFlash11eraseSectorEm>
     5ae:	88 23       	and	r24, r24
     5b0:	f9 f0       	breq	.+62     	; 0x5f0 <_Z16FlasheraseSectorm+0x6e>
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	3f df       	rcall	.-386    	; 0x434 <_Z4passb>
     5b6:	67 ee       	ldi	r22, 0xE7	; 231
     5b8:	71 e0       	ldi	r23, 0x01	; 1
     5ba:	85 ed       	ldi	r24, 0xD5	; 213
     5bc:	9d e0       	ldi	r25, 0x0D	; 13
     5be:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     5c2:	69 ef       	ldi	r22, 0xF9	; 249
     5c4:	71 e0       	ldi	r23, 0x01	; 1
     5c6:	85 ed       	ldi	r24, 0xD5	; 213
     5c8:	9d e0       	ldi	r25, 0x0D	; 13
     5ca:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	20 df       	rcall	.-448    	; 0x412 <_Z8printTabh>
     5d2:	0c df       	rcall	.-488    	; 0x3ec <_Z9printLinev>
     5d4:	2f ef       	ldi	r18, 0xFF	; 255
     5d6:	83 ed       	ldi	r24, 0xD3	; 211
     5d8:	90 e3       	ldi	r25, 0x30	; 48
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	80 40       	sbci	r24, 0x00	; 0
     5de:	90 40       	sbci	r25, 0x00	; 0
     5e0:	e1 f7       	brne	.-8      	; 0x5da <_Z16FlasheraseSectorm+0x58>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <_Z16FlasheraseSectorm+0x62>
     5e4:	00 00       	nop
     5e6:	ff 90       	pop	r15
     5e8:	ef 90       	pop	r14
     5ea:	df 90       	pop	r13
     5ec:	cf 90       	pop	r12
     5ee:	08 95       	ret
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	df 90       	pop	r13
     5f8:	cf 90       	pop	r12
     5fa:	1c cf       	rjmp	.-456    	; 0x434 <_Z4passb>

000005fc <_ZN10erogazioniC1Ev>:
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	8c 01       	movw	r16, r24
     606:	0e 5f       	subi	r16, 0xFE	; 254
     608:	1f 4f       	sbci	r17, 0xFF	; 255
     60a:	ec 01       	movw	r28, r24
     60c:	ca 54       	subi	r28, 0x4A	; 74
     60e:	df 4f       	sbci	r29, 0xFF	; 255
     610:	6f eb       	ldi	r22, 0xBF	; 191
     612:	71 e0       	ldi	r23, 0x01	; 1
     614:	c8 01       	movw	r24, r16
     616:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
     61a:	0a 5f       	subi	r16, 0xFA	; 250
     61c:	1f 4f       	sbci	r17, 0xFF	; 255
     61e:	0c 17       	cp	r16, r28
     620:	1d 07       	cpc	r17, r29
     622:	b1 f7       	brne	.-20     	; 0x610 <_ZN10erogazioniC1Ev+0x14>
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	08 95       	ret

0000062e <_Z14FlashpowerDownv>:
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	f0 de       	rcall	.-544    	; 0x412 <_Z8printTabh>
     632:	66 e0       	ldi	r22, 0x06	; 6
     634:	72 e0       	ldi	r23, 0x02	; 2
     636:	85 ed       	ldi	r24, 0xD5	; 213
     638:	9d e0       	ldi	r25, 0x0D	; 13
     63a:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	e8 de       	rcall	.-560    	; 0x412 <_Z8printTabh>
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	9a e0       	ldi	r25, 0x0A	; 10
     646:	0e 94 4f 30 	call	0x609e	; 0x609e <_ZN8SPIFlash9powerDownEv>
     64a:	88 23       	and	r24, r24
     64c:	d1 f0       	breq	.+52     	; 0x682 <_Z14FlashpowerDownv+0x54>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	f1 de       	rcall	.-542    	; 0x434 <_Z4passb>
     652:	67 ee       	ldi	r22, 0xE7	; 231
     654:	71 e0       	ldi	r23, 0x01	; 1
     656:	85 ed       	ldi	r24, 0xD5	; 213
     658:	9d e0       	ldi	r25, 0x0D	; 13
     65a:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     65e:	61 e1       	ldi	r22, 0x11	; 17
     660:	72 e0       	ldi	r23, 0x02	; 2
     662:	85 ed       	ldi	r24, 0xD5	; 213
     664:	9d e0       	ldi	r25, 0x0D	; 13
     666:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     66a:	2f ef       	ldi	r18, 0xFF	; 255
     66c:	83 ed       	ldi	r24, 0xD3	; 211
     66e:	90 e3       	ldi	r25, 0x30	; 48
     670:	21 50       	subi	r18, 0x01	; 1
     672:	80 40       	sbci	r24, 0x00	; 0
     674:	90 40       	sbci	r25, 0x00	; 0
     676:	e1 f7       	brne	.-8      	; 0x670 <_Z14FlashpowerDownv+0x42>
     678:	00 c0       	rjmp	.+0      	; 0x67a <_Z14FlashpowerDownv+0x4c>
     67a:	00 00       	nop
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	c9 de       	rcall	.-622    	; 0x412 <_Z8printTabh>
     680:	b5 ce       	rjmp	.-662    	; 0x3ec <_Z9printLinev>
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	d7 de       	rcall	.-594    	; 0x434 <_Z4passb>
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	c4 de       	rcall	.-632    	; 0x412 <_Z8printTabh>
     68a:	6f e1       	ldi	r22, 0x1F	; 31
     68c:	72 e0       	ldi	r23, 0x02	; 2
     68e:	85 ed       	ldi	r24, 0xD5	; 213
     690:	9d e0       	ldi	r25, 0x0D	; 13
     692:	0c 94 49 3a 	jmp	0x7492	; 0x7492 <_ZN5Print5printEPKc>

00000696 <_Z12FlashpowerUpv>:
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	bc de       	rcall	.-648    	; 0x412 <_Z8printTabh>
     69a:	67 e5       	ldi	r22, 0x57	; 87
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	85 ed       	ldi	r24, 0xD5	; 213
     6a0:	9d e0       	ldi	r25, 0x0D	; 13
     6a2:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	b4 de       	rcall	.-664    	; 0x412 <_Z8printTabh>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	9a e0       	ldi	r25, 0x0A	; 10
     6ae:	0e 94 79 30 	call	0x60f2	; 0x60f2 <_ZN8SPIFlash7powerUpEv>
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f0       	breq	.+40     	; 0x6de <_Z12FlashpowerUpv+0x48>
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	bd de       	rcall	.-646    	; 0x434 <_Z4passb>
     6ba:	60 e6       	ldi	r22, 0x60	; 96
     6bc:	72 e0       	ldi	r23, 0x02	; 2
     6be:	85 ed       	ldi	r24, 0xD5	; 213
     6c0:	9d e0       	ldi	r25, 0x0D	; 13
     6c2:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     6c6:	2f ef       	ldi	r18, 0xFF	; 255
     6c8:	83 ed       	ldi	r24, 0xD3	; 211
     6ca:	90 e3       	ldi	r25, 0x30	; 48
     6cc:	21 50       	subi	r18, 0x01	; 1
     6ce:	80 40       	sbci	r24, 0x00	; 0
     6d0:	90 40       	sbci	r25, 0x00	; 0
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <_Z12FlashpowerUpv+0x36>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <_Z12FlashpowerUpv+0x40>
     6d6:	00 00       	nop
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	9b de       	rcall	.-714    	; 0x412 <_Z8printTabh>
     6dc:	87 ce       	rjmp	.-754    	; 0x3ec <_Z9printLinev>
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	a9 de       	rcall	.-686    	; 0x434 <_Z4passb>
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	96 ce       	rjmp	.-724    	; 0x412 <_Z8printTabh>

000006e6 <_Z13eraseChipTestv>:
     6e6:	83 e0       	ldi	r24, 0x03	; 3
     6e8:	94 de       	rcall	.-728    	; 0x412 <_Z8printTabh>
     6ea:	6c e6       	ldi	r22, 0x6C	; 108
     6ec:	72 e0       	ldi	r23, 0x02	; 2
     6ee:	85 ed       	ldi	r24, 0xD5	; 213
     6f0:	9d e0       	ldi	r25, 0x0D	; 13
     6f2:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	8c de       	rcall	.-744    	; 0x412 <_Z8printTabh>
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	9a e0       	ldi	r25, 0x0A	; 10
     6fe:	0e 94 25 30 	call	0x604a	; 0x604a <_ZN8SPIFlash9eraseChipEv>
     702:	88 23       	and	r24, r24
     704:	d1 f0       	breq	.+52     	; 0x73a <_Z13eraseChipTestv+0x54>
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	95 de       	rcall	.-726    	; 0x434 <_Z4passb>
     70a:	67 ee       	ldi	r22, 0xE7	; 231
     70c:	71 e0       	ldi	r23, 0x01	; 1
     70e:	85 ed       	ldi	r24, 0xD5	; 213
     710:	9d e0       	ldi	r25, 0x0D	; 13
     712:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     716:	67 e7       	ldi	r22, 0x77	; 119
     718:	72 e0       	ldi	r23, 0x02	; 2
     71a:	85 ed       	ldi	r24, 0xD5	; 213
     71c:	9d e0       	ldi	r25, 0x0D	; 13
     71e:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     722:	2f ef       	ldi	r18, 0xFF	; 255
     724:	83 ed       	ldi	r24, 0xD3	; 211
     726:	90 e3       	ldi	r25, 0x30	; 48
     728:	21 50       	subi	r18, 0x01	; 1
     72a:	80 40       	sbci	r24, 0x00	; 0
     72c:	90 40       	sbci	r25, 0x00	; 0
     72e:	e1 f7       	brne	.-8      	; 0x728 <_Z13eraseChipTestv+0x42>
     730:	00 c0       	rjmp	.+0      	; 0x732 <_Z13eraseChipTestv+0x4c>
     732:	00 00       	nop
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	6d de       	rcall	.-806    	; 0x412 <_Z8printTabh>
     738:	59 ce       	rjmp	.-846    	; 0x3ec <_Z9printLinev>
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	7b ce       	rjmp	.-778    	; 0x434 <_Z4passb>

0000073e <_Z5getIDv>:
     73e:	8f 92       	push	r8
     740:	9f 92       	push	r9
     742:	af 92       	push	r10
     744:	bf 92       	push	r11
     746:	cf 92       	push	r12
     748:	df 92       	push	r13
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	85 ed       	ldi	r24, 0xD5	; 213
     750:	9d e0       	ldi	r25, 0x0D	; 13
     752:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <_ZN5Print7printlnEv>
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	9a e0       	ldi	r25, 0x0A	; 10
     75a:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <_ZN8SPIFlash10getJEDECIDEv>
     75e:	6b 01       	movw	r12, r22
     760:	7c 01       	movw	r14, r24
     762:	67 2b       	or	r22, r23
     764:	68 2b       	or	r22, r24
     766:	69 2b       	or	r22, r25
     768:	41 f4       	brne	.+16     	; 0x77a <_Z5getIDv+0x3c>
     76a:	65 e8       	ldi	r22, 0x85	; 133
     76c:	72 e0       	ldi	r23, 0x02	; 2
     76e:	85 ed       	ldi	r24, 0xD5	; 213
     770:	9d e0       	ldi	r25, 0x0D	; 13
     772:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	b2 c0       	rjmp	.+356    	; 0x8de <_Z5getIDv+0x1a0>
     77a:	6b ed       	ldi	r22, 0xDB	; 219
     77c:	72 e0       	ldi	r23, 0x02	; 2
     77e:	85 ed       	ldi	r24, 0xD5	; 213
     780:	9d e0       	ldi	r25, 0x0D	; 13
     782:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     786:	20 e1       	ldi	r18, 0x10	; 16
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	b7 01       	movw	r22, r14
     78c:	a6 01       	movw	r20, r12
     78e:	85 ed       	ldi	r24, 0xD5	; 213
     790:	9d e0       	ldi	r25, 0x0D	; 13
     792:	0e 94 ed 3a 	call	0x75da	; 0x75da <_ZN5Print7printlnEmi>
     796:	68 ee       	ldi	r22, 0xE8	; 232
     798:	72 e0       	ldi	r23, 0x02	; 2
     79a:	85 ed       	ldi	r24, 0xD5	; 213
     79c:	9d e0       	ldi	r25, 0x0D	; 13
     79e:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     7a2:	b7 01       	movw	r22, r14
     7a4:	88 27       	eor	r24, r24
     7a6:	99 27       	eor	r25, r25
     7a8:	40 e1       	ldi	r20, 0x10	; 16
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	85 ed       	ldi	r24, 0xD5	; 213
     7ae:	9d e0       	ldi	r25, 0x0D	; 13
     7b0:	0e 94 dd 3a 	call	0x75ba	; 0x75ba <_ZN5Print7printlnEhi>
     7b4:	63 ef       	ldi	r22, 0xF3	; 243
     7b6:	72 e0       	ldi	r23, 0x02	; 2
     7b8:	85 ed       	ldi	r24, 0xD5	; 213
     7ba:	9d e0       	ldi	r25, 0x0D	; 13
     7bc:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     7c0:	8d 2c       	mov	r8, r13
     7c2:	9e 2c       	mov	r9, r14
     7c4:	af 2c       	mov	r10, r15
     7c6:	bb 24       	eor	r11, r11
     7c8:	40 e1       	ldi	r20, 0x10	; 16
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	68 2d       	mov	r22, r8
     7ce:	85 ed       	ldi	r24, 0xD5	; 213
     7d0:	9d e0       	ldi	r25, 0x0D	; 13
     7d2:	0e 94 dd 3a 	call	0x75ba	; 0x75ba <_ZN5Print7printlnEhi>
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	73 e0       	ldi	r23, 0x03	; 3
     7da:	85 ed       	ldi	r24, 0xD5	; 213
     7dc:	9d e0       	ldi	r25, 0x0D	; 13
     7de:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	9a e0       	ldi	r25, 0x0A	; 10
     7e6:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <_ZN8SPIFlash11getCapacityEv>
     7ea:	ab 01       	movw	r20, r22
     7ec:	bc 01       	movw	r22, r24
     7ee:	2a e0       	ldi	r18, 0x0A	; 10
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	85 ed       	ldi	r24, 0xD5	; 213
     7f4:	9d e0       	ldi	r25, 0x0D	; 13
     7f6:	0e 94 ed 3a 	call	0x75da	; 0x75da <_ZN5Print7printlnEmi>
     7fa:	6c e0       	ldi	r22, 0x0C	; 12
     7fc:	73 e0       	ldi	r23, 0x03	; 3
     7fe:	85 ed       	ldi	r24, 0xD5	; 213
     800:	9d e0       	ldi	r25, 0x0D	; 13
     802:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	9a e0       	ldi	r25, 0x0A	; 10
     80a:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <_ZN8SPIFlash10getMaxPageEv>
     80e:	ab 01       	movw	r20, r22
     810:	bc 01       	movw	r22, r24
     812:	2a e0       	ldi	r18, 0x0A	; 10
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	85 ed       	ldi	r24, 0xD5	; 213
     818:	9d e0       	ldi	r25, 0x0D	; 13
     81a:	0e 94 ed 3a 	call	0x75da	; 0x75da <_ZN5Print7printlnEmi>
     81e:	22 de       	rcall	.-956    	; 0x464 <_Z13printUniqueIDv>
     820:	86 e4       	ldi	r24, 0x46	; 70
     822:	9c e0       	ldi	r25, 0x0C	; 12
     824:	0e 94 85 2c 	call	0x590a	; 0x590a <_ZN3LCD5clearEv>
     828:	6b ed       	ldi	r22, 0xDB	; 219
     82a:	72 e0       	ldi	r23, 0x02	; 2
     82c:	86 e4       	ldi	r24, 0x46	; 70
     82e:	9c e0       	ldi	r25, 0x0C	; 12
     830:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     834:	20 e1       	ldi	r18, 0x10	; 16
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	b7 01       	movw	r22, r14
     83a:	a6 01       	movw	r20, r12
     83c:	86 e4       	ldi	r24, 0x46	; 70
     83e:	9c e0       	ldi	r25, 0x0C	; 12
     840:	0e 94 cb 3a 	call	0x7596	; 0x7596 <_ZN5Print5printEmi>
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	86 e4       	ldi	r24, 0x46	; 70
     84a:	9c e0       	ldi	r25, 0x0C	; 12
     84c:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN3LCD9setCursorEhh>
     850:	68 e1       	ldi	r22, 0x18	; 24
     852:	73 e0       	ldi	r23, 0x03	; 3
     854:	86 e4       	ldi	r24, 0x46	; 70
     856:	9c e0       	ldi	r25, 0x0C	; 12
     858:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	9a e0       	ldi	r25, 0x0A	; 10
     860:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <_ZN8SPIFlash11getCapacityEv>
     864:	ab 01       	movw	r20, r22
     866:	bc 01       	movw	r22, r24
     868:	2a e0       	ldi	r18, 0x0A	; 10
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	86 e4       	ldi	r24, 0x46	; 70
     86e:	9c e0       	ldi	r25, 0x0C	; 12
     870:	0e 94 cb 3a 	call	0x7596	; 0x7596 <_ZN5Print5printEmi>
     874:	42 e0       	ldi	r20, 0x02	; 2
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	86 e4       	ldi	r24, 0x46	; 70
     87a:	9c e0       	ldi	r25, 0x0C	; 12
     87c:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN3LCD9setCursorEhh>
     880:	63 ef       	ldi	r22, 0xF3	; 243
     882:	72 e0       	ldi	r23, 0x02	; 2
     884:	86 e4       	ldi	r24, 0x46	; 70
     886:	9c e0       	ldi	r25, 0x0C	; 12
     888:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     88c:	40 e1       	ldi	r20, 0x10	; 16
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	68 2d       	mov	r22, r8
     892:	86 e4       	ldi	r24, 0x46	; 70
     894:	9c e0       	ldi	r25, 0x0C	; 12
     896:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <_ZN5Print5printEhi>
     89a:	43 e0       	ldi	r20, 0x03	; 3
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	86 e4       	ldi	r24, 0x46	; 70
     8a0:	9c e0       	ldi	r25, 0x0C	; 12
     8a2:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN3LCD9setCursorEhh>
     8a6:	6c e0       	ldi	r22, 0x0C	; 12
     8a8:	73 e0       	ldi	r23, 0x03	; 3
     8aa:	86 e4       	ldi	r24, 0x46	; 70
     8ac:	9c e0       	ldi	r25, 0x0C	; 12
     8ae:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	9a e0       	ldi	r25, 0x0A	; 10
     8b6:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <_ZN8SPIFlash10getMaxPageEv>
     8ba:	ab 01       	movw	r20, r22
     8bc:	bc 01       	movw	r22, r24
     8be:	2a e0       	ldi	r18, 0x0A	; 10
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	86 e4       	ldi	r24, 0x46	; 70
     8c4:	9c e0       	ldi	r25, 0x0C	; 12
     8c6:	0e 94 cb 3a 	call	0x7596	; 0x7596 <_ZN5Print5printEmi>
     8ca:	2f ef       	ldi	r18, 0xFF	; 255
     8cc:	8b e7       	ldi	r24, 0x7B	; 123
     8ce:	92 e9       	ldi	r25, 0x92	; 146
     8d0:	21 50       	subi	r18, 0x01	; 1
     8d2:	80 40       	sbci	r24, 0x00	; 0
     8d4:	90 40       	sbci	r25, 0x00	; 0
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <_Z5getIDv+0x192>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <_Z5getIDv+0x19c>
     8da:	00 00       	nop
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	bf 90       	pop	r11
     8e8:	af 90       	pop	r10
     8ea:	9f 90       	pop	r9
     8ec:	8f 90       	pop	r8
     8ee:	08 95       	ret

000008f0 <_Z11my_delay_msi>:
     8f0:	18 16       	cp	r1, r24
     8f2:	19 06       	cpc	r1, r25
     8f4:	44 f4       	brge	.+16     	; 0x906 <_Z11my_delay_msi+0x16>
     8f6:	ef e9       	ldi	r30, 0x9F	; 159
     8f8:	ff e0       	ldi	r31, 0x0F	; 15
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <_Z11my_delay_msi+0xa>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <_Z11my_delay_msi+0x10>
     900:	00 00       	nop
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	f5 cf       	rjmp	.-22     	; 0x8f0 <_Z11my_delay_msi>
     906:	08 95       	ret

00000908 <_Z6Buzzerhm>:
     908:	8f 92       	push	r8
     90a:	9f 92       	push	r9
     90c:	af 92       	push	r10
     90e:	bf 92       	push	r11
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	4a 01       	movw	r8, r20
     91c:	5b 01       	movw	r10, r22
     91e:	c0 e0       	ldi	r28, 0x00	; 0
     920:	d0 e0       	ldi	r29, 0x00	; 0
     922:	08 2f       	mov	r16, r24
     924:	10 e0       	ldi	r17, 0x00	; 0
     926:	80 e4       	ldi	r24, 0x40	; 64
     928:	f8 2e       	mov	r15, r24
     92a:	c0 17       	cp	r28, r16
     92c:	d1 07       	cpc	r29, r17
     92e:	5c f4       	brge	.+22     	; 0x946 <_Z6Buzzerhm+0x3e>
     930:	3e 9a       	sbi	0x07, 6	; 7
     932:	98 b1       	in	r25, 0x08	; 8
     934:	9f 25       	eor	r25, r15
     936:	98 b9       	out	0x08, r25	; 8
     938:	c4 01       	movw	r24, r8
     93a:	da df       	rcall	.-76     	; 0x8f0 <_Z11my_delay_msi>
     93c:	98 b1       	in	r25, 0x08	; 8
     93e:	9f 25       	eor	r25, r15
     940:	98 b9       	out	0x08, r25	; 8
     942:	21 96       	adiw	r28, 0x01	; 1
     944:	f2 cf       	rjmp	.-28     	; 0x92a <_Z6Buzzerhm+0x22>
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	bf 90       	pop	r11
     952:	af 90       	pop	r10
     954:	9f 90       	pop	r9
     956:	8f 90       	pop	r8
     958:	08 95       	ret

0000095a <_Z10leggiRighev>:
     95a:	60 e2       	ldi	r22, 0x20	; 32
     95c:	8f e7       	ldi	r24, 0x7F	; 127
     95e:	9d e0       	ldi	r25, 0x0D	; 13
     960:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>
     964:	63 e0       	ldi	r22, 0x03	; 3
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	8f e7       	ldi	r24, 0x7F	; 127
     96a:	9d e0       	ldi	r25, 0x0D	; 13
     96c:	dd dc       	rcall	.-1606   	; 0x328 <_ZN7TwoWire5writeEi>
     96e:	63 ec       	ldi	r22, 0xC3	; 195
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	8f e7       	ldi	r24, 0x7F	; 127
     974:	9d e0       	ldi	r25, 0x0D	; 13
     976:	d8 dc       	rcall	.-1616   	; 0x328 <_ZN7TwoWire5writeEi>
     978:	8f e7       	ldi	r24, 0x7F	; 127
     97a:	9d e0       	ldi	r25, 0x0D	; 13
     97c:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
     980:	8f e1       	ldi	r24, 0x1F	; 31
     982:	9e e4       	ldi	r25, 0x4E	; 78
     984:	01 97       	sbiw	r24, 0x01	; 1
     986:	f1 f7       	brne	.-4      	; 0x984 <_Z10leggiRighev+0x2a>
     988:	00 c0       	rjmp	.+0      	; 0x98a <_Z10leggiRighev+0x30>
     98a:	00 00       	nop
     98c:	08 95       	ret

0000098e <_Z12leggiColonnev>:
     98e:	60 e2       	ldi	r22, 0x20	; 32
     990:	8f e7       	ldi	r24, 0x7F	; 127
     992:	9d e0       	ldi	r25, 0x0D	; 13
     994:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>
     998:	63 e0       	ldi	r22, 0x03	; 3
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	8f e7       	ldi	r24, 0x7F	; 127
     99e:	9d e0       	ldi	r25, 0x0D	; 13
     9a0:	c3 dc       	rcall	.-1658   	; 0x328 <_ZN7TwoWire5writeEi>
     9a2:	6c e3       	ldi	r22, 0x3C	; 60
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	8f e7       	ldi	r24, 0x7F	; 127
     9a8:	9d e0       	ldi	r25, 0x0D	; 13
     9aa:	be dc       	rcall	.-1668   	; 0x328 <_ZN7TwoWire5writeEi>
     9ac:	8f e7       	ldi	r24, 0x7F	; 127
     9ae:	9d e0       	ldi	r25, 0x0D	; 13
     9b0:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
     9b4:	8f e1       	ldi	r24, 0x1F	; 31
     9b6:	9e e4       	ldi	r25, 0x4E	; 78
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	f1 f7       	brne	.-4      	; 0x9b8 <_Z12leggiColonnev+0x2a>
     9bc:	00 c0       	rjmp	.+0      	; 0x9be <_Z12leggiColonnev+0x30>
     9be:	00 00       	nop
     9c0:	08 95       	ret

000009c2 <_Z17leggi_IP_REGISTERv>:
     9c2:	60 e2       	ldi	r22, 0x20	; 32
     9c4:	8f e7       	ldi	r24, 0x7F	; 127
     9c6:	9d e0       	ldi	r25, 0x0D	; 13
     9c8:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	8f e7       	ldi	r24, 0x7F	; 127
     9d2:	9d e0       	ldi	r25, 0x0D	; 13
     9d4:	a9 dc       	rcall	.-1710   	; 0x328 <_ZN7TwoWire5writeEi>
     9d6:	8f e7       	ldi	r24, 0x7F	; 127
     9d8:	9d e0       	ldi	r25, 0x0D	; 13
     9da:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
     9de:	8f e1       	ldi	r24, 0x1F	; 31
     9e0:	9e e4       	ldi	r25, 0x4E	; 78
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <_Z17leggi_IP_REGISTERv+0x20>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <_Z17leggi_IP_REGISTERv+0x26>
     9e8:	00 00       	nop
     9ea:	08 95       	ret

000009ec <_Z17leggi_OP_REGISTERv>:
     9ec:	60 e2       	ldi	r22, 0x20	; 32
     9ee:	8f e7       	ldi	r24, 0x7F	; 127
     9f0:	9d e0       	ldi	r25, 0x0D	; 13
     9f2:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	8f e7       	ldi	r24, 0x7F	; 127
     9fc:	9d e0       	ldi	r25, 0x0D	; 13
     9fe:	94 dc       	rcall	.-1752   	; 0x328 <_ZN7TwoWire5writeEi>
     a00:	8f e7       	ldi	r24, 0x7F	; 127
     a02:	9d e0       	ldi	r25, 0x0D	; 13
     a04:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
     a08:	8f e1       	ldi	r24, 0x1F	; 31
     a0a:	9e e4       	ldi	r25, 0x4E	; 78
     a0c:	01 97       	sbiw	r24, 0x01	; 1
     a0e:	f1 f7       	brne	.-4      	; 0xa0c <_Z17leggi_OP_REGISTERv+0x20>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <_Z17leggi_OP_REGISTERv+0x26>
     a12:	00 00       	nop
     a14:	08 95       	ret

00000a16 <_Z10displayLCDP6Stringii>:
     a16:	cf 92       	push	r12
     a18:	df 92       	push	r13
     a1a:	ef 92       	push	r14
     a1c:	ff 92       	push	r15
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
     a2a:	2c 97       	sbiw	r28, 0x0c	; 12
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	de bf       	out	0x3e, r29	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	cd bf       	out	0x3d, r28	; 61
     a36:	8c 01       	movw	r16, r24
     a38:	6b 01       	movw	r12, r22
     a3a:	7a 01       	movw	r14, r20
     a3c:	86 e4       	ldi	r24, 0x46	; 70
     a3e:	9c e0       	ldi	r25, 0x0C	; 12
     a40:	0e 94 85 2c 	call	0x590a	; 0x590a <_ZN3LCD5clearEv>
     a44:	83 e0       	ldi	r24, 0x03	; 3
     a46:	c8 16       	cp	r12, r24
     a48:	d1 04       	cpc	r13, r1
     a4a:	0c f4       	brge	.+2      	; 0xa4e <_Z10displayLCDP6Stringii+0x38>
     a4c:	47 c0       	rjmp	.+142    	; 0xadc <_Z10displayLCDP6Stringii+0xc6>
     a4e:	40 91 fe 0a 	lds	r20, 0x0AFE	; 0x800afe <UltimoPassaggioStato>
     a52:	50 91 ff 0a 	lds	r21, 0x0AFF	; 0x800aff <UltimoPassaggioStato+0x1>
     a56:	60 91 00 0b 	lds	r22, 0x0B00	; 0x800b00 <UltimoPassaggioStato+0x2>
     a5a:	70 91 01 0b 	lds	r23, 0x0B01	; 0x800b01 <UltimoPassaggioStato+0x3>
     a5e:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <Timer>
     a62:	90 91 fb 0a 	lds	r25, 0x0AFB	; 0x800afb <Timer+0x1>
     a66:	a0 91 fc 0a 	lds	r26, 0x0AFC	; 0x800afc <Timer+0x2>
     a6a:	b0 91 fd 0a 	lds	r27, 0x0AFD	; 0x800afd <Timer+0x3>
     a6e:	48 0f       	add	r20, r24
     a70:	59 1f       	adc	r21, r25
     a72:	6a 1f       	adc	r22, r26
     a74:	7b 1f       	adc	r23, r27
     a76:	41 50       	subi	r20, 0x01	; 1
     a78:	51 09       	sbc	r21, r1
     a7a:	61 09       	sbc	r22, r1
     a7c:	71 09       	sbc	r23, r1
     a7e:	80 91 02 0b 	lds	r24, 0x0B02	; 0x800b02 <secs>
     a82:	90 91 03 0b 	lds	r25, 0x0B03	; 0x800b03 <secs+0x1>
     a86:	a0 91 04 0b 	lds	r26, 0x0B04	; 0x800b04 <secs+0x2>
     a8a:	b0 91 05 0b 	lds	r27, 0x0B05	; 0x800b05 <secs+0x3>
     a8e:	48 1b       	sub	r20, r24
     a90:	59 0b       	sbc	r21, r25
     a92:	6a 0b       	sbc	r22, r26
     a94:	7b 0b       	sbc	r23, r27
     a96:	2a e0       	ldi	r18, 0x0A	; 10
     a98:	ce 01       	movw	r24, r28
     a9a:	07 96       	adiw	r24, 0x07	; 7
     a9c:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <_ZN6StringC1Emh>
     aa0:	6e e1       	ldi	r22, 0x1E	; 30
     aa2:	73 e0       	ldi	r23, 0x03	; 3
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
     aac:	be 01       	movw	r22, r28
     aae:	69 5f       	subi	r22, 0xF9	; 249
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255
     ab2:	ce 01       	movw	r24, r28
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
     aba:	66 e2       	ldi	r22, 0x26	; 38
     abc:	73 e0       	ldi	r23, 0x03	; 3
     abe:	0e 94 83 3e 	call	0x7d06	; 0x7d06 <_ZplRK15StringSumHelperPKc>
     ac2:	bc 01       	movw	r22, r24
     ac4:	86 e4       	ldi	r24, 0x46	; 70
     ac6:	9c e0       	ldi	r25, 0x0C	; 12
     ac8:	0e 94 3b 3a 	call	0x7476	; 0x7476 <_ZN5Print5printERK6String>
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
     ad4:	ce 01       	movw	r24, r28
     ad6:	07 96       	adiw	r24, 0x07	; 7
     ad8:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
     adc:	61 e0       	ldi	r22, 0x01	; 1
     ade:	86 e4       	ldi	r24, 0x46	; 70
     ae0:	9c e0       	ldi	r25, 0x0C	; 12
     ae2:	0e 94 4a 3a 	call	0x7494	; 0x7494 <_ZN5Print5printEc>
     ae6:	41 e0       	ldi	r20, 0x01	; 1
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	86 e4       	ldi	r24, 0x46	; 70
     aec:	9c e0       	ldi	r25, 0x0C	; 12
     aee:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN3LCD9setCursorEhh>
     af2:	b8 01       	movw	r22, r16
     af4:	6a 5f       	subi	r22, 0xFA	; 250
     af6:	7f 4f       	sbci	r23, 0xFF	; 255
     af8:	86 e4       	ldi	r24, 0x46	; 70
     afa:	9c e0       	ldi	r25, 0x0C	; 12
     afc:	0e 94 3b 3a 	call	0x7476	; 0x7476 <_ZN5Print5printERK6String>
     b00:	42 e0       	ldi	r20, 0x02	; 2
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	86 e4       	ldi	r24, 0x46	; 70
     b06:	9c e0       	ldi	r25, 0x0C	; 12
     b08:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN3LCD9setCursorEhh>
     b0c:	b8 01       	movw	r22, r16
     b0e:	64 5f       	subi	r22, 0xF4	; 244
     b10:	7f 4f       	sbci	r23, 0xFF	; 255
     b12:	86 e4       	ldi	r24, 0x46	; 70
     b14:	9c e0       	ldi	r25, 0x0C	; 12
     b16:	0e 94 3b 3a 	call	0x7476	; 0x7476 <_ZN5Print5printERK6String>
     b1a:	43 e0       	ldi	r20, 0x03	; 3
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	86 e4       	ldi	r24, 0x46	; 70
     b20:	9c e0       	ldi	r25, 0x0C	; 12
     b22:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN3LCD9setCursorEhh>
     b26:	b8 01       	movw	r22, r16
     b28:	6e 5e       	subi	r22, 0xEE	; 238
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	86 e4       	ldi	r24, 0x46	; 70
     b2e:	9c e0       	ldi	r25, 0x0C	; 12
     b30:	0e 94 3b 3a 	call	0x7476	; 0x7476 <_ZN5Print5printERK6String>
     b34:	c7 01       	movw	r24, r14
     b36:	dc de       	rcall	.-584    	; 0x8f0 <_Z11my_delay_msi>
     b38:	2c 96       	adiw	r28, 0x0c	; 12
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	08 95       	ret

00000b56 <_Z11avanzaStatom>:
     b56:	60 93 fa 0a 	sts	0x0AFA, r22	; 0x800afa <Timer>
     b5a:	70 93 fb 0a 	sts	0x0AFB, r23	; 0x800afb <Timer+0x1>
     b5e:	80 93 fc 0a 	sts	0x0AFC, r24	; 0x800afc <Timer+0x2>
     b62:	90 93 fd 0a 	sts	0x0AFD, r25	; 0x800afd <Timer+0x3>
     b66:	84 ef       	ldi	r24, 0xF4	; 244
     b68:	9a e0       	ldi	r25, 0x0A	; 10
     b6a:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <_ZNK8DateTime11secondstimeEv>
     b6e:	60 93 fe 0a 	sts	0x0AFE, r22	; 0x800afe <UltimoPassaggioStato>
     b72:	70 93 ff 0a 	sts	0x0AFF, r23	; 0x800aff <UltimoPassaggioStato+0x1>
     b76:	80 93 00 0b 	sts	0x0B00, r24	; 0x800b00 <UltimoPassaggioStato+0x2>
     b7a:	90 93 01 0b 	sts	0x0B01, r25	; 0x800b01 <UltimoPassaggioStato+0x3>
     b7e:	80 91 1d 0c 	lds	r24, 0x0C1D	; 0x800c1d <stato_procedura>
     b82:	90 91 1e 0c 	lds	r25, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	90 93 1e 0c 	sts	0x0C1E, r25	; 0x800c1e <stato_procedura+0x1>
     b8c:	80 93 1d 0c 	sts	0x0C1D, r24	; 0x800c1d <stato_procedura>
     b90:	08 95       	ret

00000b92 <_Z14leggiTAG_Mezzob>:
     b92:	af 92       	push	r10
     b94:	bf 92       	push	r11
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	a2 97       	sbiw	r28, 0x22	; 34
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	5c 01       	movw	r10, r24
     bb8:	f6 2e       	mov	r15, r22
     bba:	6f eb       	ldi	r22, 0xBF	; 191
     bbc:	71 e0       	ldi	r23, 0x01	; 1
     bbe:	ce 01       	movw	r24, r28
     bc0:	4d 96       	adiw	r24, 0x1d	; 29
     bc2:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
     bc6:	08 ec       	ldi	r16, 0xC8	; 200
     bc8:	10 e0       	ldi	r17, 0x00	; 0
     bca:	26 e6       	ldi	r18, 0x66	; 102
     bcc:	3c e0       	ldi	r19, 0x0C	; 12
     bce:	4f e5       	ldi	r20, 0x5F	; 95
     bd0:	5c e0       	ldi	r21, 0x0C	; 12
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	8f e2       	ldi	r24, 0x2F	; 47
     bd6:	9c e0       	ldi	r25, 0x0C	; 12
     bd8:	0e 94 65 1b 	call	0x36ca	; 0x36ca <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j>
     bdc:	80 93 67 0c 	sts	0x0C67, r24	; 0x800c67 <success>
     be0:	88 23       	and	r24, r24
     be2:	09 f4       	brne	.+2      	; 0xbe6 <_Z14leggiTAG_Mezzob+0x54>
     be4:	9d c0       	rjmp	.+314    	; 0xd20 <_Z14leggiTAG_Mezzob+0x18e>
     be6:	4e e1       	ldi	r20, 0x1E	; 30
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	8b de       	rcall	.-746    	; 0x908 <_Z6Buzzerhm>
     bf2:	80 91 66 0c 	lds	r24, 0x0C66	; 0x800c66 <uidLength>
     bf6:	84 30       	cpi	r24, 0x04	; 4
     bf8:	09 f0       	breq	.+2      	; 0xbfc <_Z14leggiTAG_Mezzob+0x6a>
     bfa:	8c c0       	rjmp	.+280    	; 0xd14 <_Z14leggiTAG_Mezzob+0x182>
     bfc:	86 e0       	ldi	r24, 0x06	; 6
     bfe:	e8 e4       	ldi	r30, 0x48	; 72
     c00:	f1 e0       	ldi	r31, 0x01	; 1
     c02:	de 01       	movw	r26, r28
     c04:	57 96       	adiw	r26, 0x17	; 23
     c06:	01 90       	ld	r0, Z+
     c08:	0d 92       	st	X+, r0
     c0a:	8a 95       	dec	r24
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <_Z14leggiTAG_Mezzob+0x74>
     c0e:	ce 01       	movw	r24, r28
     c10:	47 96       	adiw	r24, 0x17	; 23
     c12:	6c 01       	movw	r12, r24
     c14:	e1 2c       	mov	r14, r1
     c16:	04 e0       	ldi	r16, 0x04	; 4
     c18:	10 e0       	ldi	r17, 0x00	; 0
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	44 e0       	ldi	r20, 0x04	; 4
     c20:	6f e5       	ldi	r22, 0x5F	; 95
     c22:	7c e0       	ldi	r23, 0x0C	; 12
     c24:	8f e2       	ldi	r24, 0x2F	; 47
     c26:	9c e0       	ldi	r25, 0x0C	; 12
     c28:	0e 94 b9 1b 	call	0x3772	; 0x3772 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     c2c:	80 93 67 0c 	sts	0x0C67, r24	; 0x800c67 <success>
     c30:	88 23       	and	r24, r24
     c32:	09 f4       	brne	.+2      	; 0xc36 <_Z14leggiTAG_Mezzob+0xa4>
     c34:	5f c0       	rjmp	.+190    	; 0xcf4 <_Z14leggiTAG_Mezzob+0x162>
     c36:	ff 20       	and	r15, r15
     c38:	99 f0       	breq	.+38     	; 0xc60 <_Z14leggiTAG_Mezzob+0xce>
     c3a:	80 e1       	ldi	r24, 0x10	; 16
     c3c:	e0 e3       	ldi	r30, 0x30	; 48
     c3e:	f9 e0       	ldi	r31, 0x09	; 9
     c40:	de 01       	movw	r26, r28
     c42:	11 96       	adiw	r26, 0x01	; 1
     c44:	01 90       	ld	r0, Z+
     c46:	0d 92       	st	X+, r0
     c48:	8a 95       	dec	r24
     c4a:	e1 f7       	brne	.-8      	; 0xc44 <_Z14leggiTAG_Mezzob+0xb2>
     c4c:	ae 01       	movw	r20, r28
     c4e:	4f 5f       	subi	r20, 0xFF	; 255
     c50:	5f 4f       	sbci	r21, 0xFF	; 255
     c52:	64 e0       	ldi	r22, 0x04	; 4
     c54:	8f e2       	ldi	r24, 0x2F	; 47
     c56:	9c e0       	ldi	r25, 0x0C	; 12
     c58:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh>
     c5c:	80 93 67 0c 	sts	0x0C67, r24	; 0x800c67 <success>
     c60:	ae 01       	movw	r20, r28
     c62:	4f 5f       	subi	r20, 0xFF	; 255
     c64:	5f 4f       	sbci	r21, 0xFF	; 255
     c66:	64 e0       	ldi	r22, 0x04	; 4
     c68:	8f e2       	ldi	r24, 0x2F	; 47
     c6a:	9c e0       	ldi	r25, 0x0C	; 12
     c6c:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh>
     c70:	80 93 67 0c 	sts	0x0C67, r24	; 0x800c67 <success>
     c74:	88 23       	and	r24, r24
     c76:	89 f1       	breq	.+98     	; 0xcda <_Z14leggiTAG_Mezzob+0x148>
     c78:	6c e2       	ldi	r22, 0x2C	; 44
     c7a:	73 e0       	ldi	r23, 0x03	; 3
     c7c:	85 ed       	ldi	r24, 0xD5	; 213
     c7e:	9d e0       	ldi	r25, 0x0D	; 13
     c80:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
     c84:	be 01       	movw	r22, r28
     c86:	6f 5f       	subi	r22, 0xFF	; 255
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	ce 01       	movw	r24, r28
     c8c:	41 96       	adiw	r24, 0x11	; 17
     c8e:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
     c92:	be 01       	movw	r22, r28
     c94:	6f 5e       	subi	r22, 0xEF	; 239
     c96:	7f 4f       	sbci	r23, 0xFF	; 255
     c98:	85 ed       	ldi	r24, 0xD5	; 213
     c9a:	9d e0       	ldi	r25, 0x0D	; 13
     c9c:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <_ZN5Print7printlnERK6String>
     ca0:	8d 89       	ldd	r24, Y+21	; 0x15
     ca2:	9e 89       	ldd	r25, Y+22	; 0x16
     ca4:	06 97       	sbiw	r24, 0x06	; 6
     ca6:	59 f4       	brne	.+22     	; 0xcbe <_Z14leggiTAG_Mezzob+0x12c>
     ca8:	be 01       	movw	r22, r28
     caa:	6f 5e       	subi	r22, 0xEF	; 239
     cac:	7f 4f       	sbci	r23, 0xFF	; 255
     cae:	c5 01       	movw	r24, r10
     cb0:	0e 94 69 3d 	call	0x7ad2	; 0x7ad2 <_ZN6StringC1EOS_>
     cb4:	ce 01       	movw	r24, r28
     cb6:	41 96       	adiw	r24, 0x11	; 17
     cb8:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <_Z14leggiTAG_Mezzob+0x19a>
     cbe:	9f ef       	ldi	r25, 0xFF	; 255
     cc0:	21 ee       	ldi	r18, 0xE1	; 225
     cc2:	84 e0       	ldi	r24, 0x04	; 4
     cc4:	91 50       	subi	r25, 0x01	; 1
     cc6:	20 40       	sbci	r18, 0x00	; 0
     cc8:	80 40       	sbci	r24, 0x00	; 0
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <_Z14leggiTAG_Mezzob+0x132>
     ccc:	00 c0       	rjmp	.+0      	; 0xcce <_Z14leggiTAG_Mezzob+0x13c>
     cce:	00 00       	nop
     cd0:	ce 01       	movw	r24, r28
     cd2:	41 96       	adiw	r24, 0x11	; 17
     cd4:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
     cd8:	1d c0       	rjmp	.+58     	; 0xd14 <_Z14leggiTAG_Mezzob+0x182>
     cda:	86 e4       	ldi	r24, 0x46	; 70
     cdc:	9c e0       	ldi	r25, 0x0C	; 12
     cde:	0e 94 85 2c 	call	0x590a	; 0x590a <_ZN3LCD5clearEv>
     ce2:	41 e0       	ldi	r20, 0x01	; 1
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	86 e4       	ldi	r24, 0x46	; 70
     ce8:	9c e0       	ldi	r25, 0x0C	; 12
     cea:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN3LCD9setCursorEhh>
     cee:	6a e3       	ldi	r22, 0x3A	; 58
     cf0:	73 e0       	ldi	r23, 0x03	; 3
     cf2:	0c c0       	rjmp	.+24     	; 0xd0c <_Z14leggiTAG_Mezzob+0x17a>
     cf4:	86 e4       	ldi	r24, 0x46	; 70
     cf6:	9c e0       	ldi	r25, 0x0C	; 12
     cf8:	0e 94 85 2c 	call	0x590a	; 0x590a <_ZN3LCD5clearEv>
     cfc:	41 e0       	ldi	r20, 0x01	; 1
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	86 e4       	ldi	r24, 0x46	; 70
     d02:	9c e0       	ldi	r25, 0x0C	; 12
     d04:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN3LCD9setCursorEhh>
     d08:	64 e4       	ldi	r22, 0x44	; 68
     d0a:	73 e0       	ldi	r23, 0x03	; 3
     d0c:	86 e4       	ldi	r24, 0x46	; 70
     d0e:	9c e0       	ldi	r25, 0x0C	; 12
     d10:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
     d14:	6f eb       	ldi	r22, 0xBF	; 191
     d16:	71 e0       	ldi	r23, 0x01	; 1
     d18:	85 ed       	ldi	r24, 0xD5	; 213
     d1a:	9d e0       	ldi	r25, 0x0D	; 13
     d1c:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
     d20:	be 01       	movw	r22, r28
     d22:	63 5e       	subi	r22, 0xE3	; 227
     d24:	7f 4f       	sbci	r23, 0xFF	; 255
     d26:	c5 01       	movw	r24, r10
     d28:	0e 94 69 3d 	call	0x7ad2	; 0x7ad2 <_ZN6StringC1EOS_>
     d2c:	ce 01       	movw	r24, r28
     d2e:	4d 96       	adiw	r24, 0x1d	; 29
     d30:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
     d34:	c5 01       	movw	r24, r10
     d36:	a2 96       	adiw	r28, 0x22	; 34
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	df 90       	pop	r13
     d50:	cf 90       	pop	r12
     d52:	bf 90       	pop	r11
     d54:	af 90       	pop	r10
     d56:	08 95       	ret

00000d58 <_Z14GetCodeRfidATev>:
     d58:	cf 92       	push	r12
     d5a:	df 92       	push	r13
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	64 97       	sbiw	r28, 0x14	; 20
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	7c 01       	movw	r14, r24
     d7a:	ce 01       	movw	r24, r28
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	6c 01       	movw	r12, r24
     d80:	87 e0       	ldi	r24, 0x07	; 7
     d82:	f6 01       	movw	r30, r12
     d84:	11 92       	st	Z+, r1
     d86:	8a 95       	dec	r24
     d88:	e9 f7       	brne	.-6      	; 0xd84 <_Z14GetCodeRfidATev+0x2c>
     d8a:	6c e4       	ldi	r22, 0x4C	; 76
     d8c:	73 e0       	ldi	r23, 0x03	; 3
     d8e:	c7 01       	movw	r24, r14
     d90:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
     d94:	00 e0       	ldi	r16, 0x00	; 0
     d96:	10 e0       	ldi	r17, 0x00	; 0
     d98:	9e 01       	movw	r18, r28
     d9a:	2c 5e       	subi	r18, 0xEC	; 236
     d9c:	3f 4f       	sbci	r19, 0xFF	; 255
     d9e:	a6 01       	movw	r20, r12
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	8f e2       	ldi	r24, 0x2F	; 47
     da4:	9c e0       	ldi	r25, 0x0C	; 12
     da6:	0e 94 65 1b 	call	0x36ca	; 0x36ca <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j>
     daa:	88 23       	and	r24, r24
     dac:	59 f1       	breq	.+86     	; 0xe04 <_Z14GetCodeRfidATev+0xac>
     dae:	0c 89       	ldd	r16, Y+20	; 0x14
     db0:	10 e0       	ldi	r17, 0x00	; 0
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	a6 01       	movw	r20, r12
     db8:	6f e2       	ldi	r22, 0x2F	; 47
     dba:	7c e0       	ldi	r23, 0x0C	; 12
     dbc:	ce 01       	movw	r24, r28
     dbe:	0e 96       	adiw	r24, 0x0e	; 14
     dc0:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <_ZN14Adafruit_PN53210GetHexCodeEPKhm>
     dc4:	ce 01       	movw	r24, r28
     dc6:	0e 96       	adiw	r24, 0x0e	; 14
     dc8:	0e 94 29 3f 	call	0x7e52	; 0x7e52 <_ZN6String4trimEv>
     dcc:	28 e0       	ldi	r18, 0x08	; 8
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 e0       	ldi	r20, 0x00	; 0
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	be 01       	movw	r22, r28
     dd6:	62 5f       	subi	r22, 0xF2	; 242
     dd8:	7f 4f       	sbci	r23, 0xFF	; 255
     dda:	ce 01       	movw	r24, r28
     ddc:	08 96       	adiw	r24, 0x08	; 8
     dde:	0e 94 e6 3e 	call	0x7dcc	; 0x7dcc <_ZNK6String9substringEjj>
     de2:	be 01       	movw	r22, r28
     de4:	68 5f       	subi	r22, 0xF8	; 248
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	c7 01       	movw	r24, r14
     dea:	0e 94 8e 3d 	call	0x7b1c	; 0x7b1c <_ZN6StringaSEOS_>
     dee:	ce 01       	movw	r24, r28
     df0:	08 96       	adiw	r24, 0x08	; 8
     df2:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	80 93 5e 0c 	sts	0x0C5E, r24	; 0x800c5e <alreadyTimbrata>
     dfc:	ce 01       	movw	r24, r28
     dfe:	0e 96       	adiw	r24, 0x0e	; 14
     e00:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
     e04:	c7 01       	movw	r24, r14
     e06:	64 96       	adiw	r28, 0x14	; 20
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	df 90       	pop	r13
     e20:	cf 90       	pop	r12
     e22:	08 95       	ret

00000e24 <_Z15abilitaPulsantiv>:
     e24:	57 98       	cbi	0x0a, 7	; 10
     e26:	56 98       	cbi	0x0a, 6	; 10
     e28:	88 e0       	ldi	r24, 0x08	; 8
     e2a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     e2e:	80 ec       	ldi	r24, 0xC0	; 192
     e30:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     e34:	78 94       	sei
     e36:	08 95       	ret

00000e38 <_Z22abilitaContattiPistolav>:
     e38:	09 98       	cbi	0x01, 1	; 1
     e3a:	0a 98       	cbi	0x01, 2	; 1
     e3c:	08 95       	ret

00000e3e <_Z13abilitaPulserc>:
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     e44:	84 34       	cpi	r24, 0x44	; 68
     e46:	19 f4       	brne	.+6      	; 0xe4e <_Z13abilitaPulserc+0x10>
     e48:	0d 98       	cbi	0x01, 5	; 1
     e4a:	80 e2       	ldi	r24, 0x20	; 32
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <_Z13abilitaPulserc+0x14>
     e4e:	0e 98       	cbi	0x01, 6	; 1
     e50:	80 e4       	ldi	r24, 0x40	; 64
     e52:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     e56:	78 94       	sei
     e58:	08 95       	ret

00000e5a <_Z14impulsiToLitrii>:
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	bc 01       	movw	r22, r24
     e64:	99 0f       	add	r25, r25
     e66:	88 0b       	sbc	r24, r24
     e68:	99 0b       	sbc	r25, r25
     e6a:	0e 94 22 38 	call	0x7044	; 0x7044 <__floatsisf>
     e6e:	6b 01       	movw	r12, r22
     e70:	7c 01       	movw	r14, r24
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	a9 01       	movw	r20, r18
     e78:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <__cmpsf2>
     e7c:	87 ff       	sbrs	r24, 7
     e7e:	03 c0       	rjmp	.+6      	; 0xe86 <_Z14impulsiToLitrii+0x2c>
     e80:	c1 2c       	mov	r12, r1
     e82:	d1 2c       	mov	r13, r1
     e84:	76 01       	movw	r14, r12
     e86:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <ImpulsiLitro>
     e8a:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <ImpulsiLitro+0x1>
     e8e:	07 2e       	mov	r0, r23
     e90:	00 0c       	add	r0, r0
     e92:	88 0b       	sbc	r24, r24
     e94:	99 0b       	sbc	r25, r25
     e96:	0e 94 22 38 	call	0x7044	; 0x7044 <__floatsisf>
     e9a:	9b 01       	movw	r18, r22
     e9c:	ac 01       	movw	r20, r24
     e9e:	c7 01       	movw	r24, r14
     ea0:	b6 01       	movw	r22, r12
     ea2:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__divsf3>
     ea6:	ff 90       	pop	r15
     ea8:	ef 90       	pop	r14
     eaa:	df 90       	pop	r13
     eac:	cf 90       	pop	r12
     eae:	08 95       	ret

00000eb0 <_Z18Rele_Abilitazione1ii>:
     eb0:	3f 9a       	sbi	0x07, 7	; 7
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	91 05       	cpc	r25, r1
     eb6:	71 f0       	breq	.+28     	; 0xed4 <_Z18Rele_Abilitazione1ii+0x24>
     eb8:	82 30       	cpi	r24, 0x02	; 2
     eba:	91 05       	cpc	r25, r1
     ebc:	e1 f0       	breq	.+56     	; 0xef6 <_Z18Rele_Abilitazione1ii+0x46>
     ebe:	89 2b       	or	r24, r25
     ec0:	89 f5       	brne	.+98     	; 0xf24 <_Z18Rele_Abilitazione1ii+0x74>
     ec2:	47 98       	cbi	0x08, 7	; 8
     ec4:	2f ef       	ldi	r18, 0xFF	; 255
     ec6:	30 e7       	ldi	r19, 0x70	; 112
     ec8:	42 e0       	ldi	r20, 0x02	; 2
     eca:	21 50       	subi	r18, 0x01	; 1
     ecc:	30 40       	sbci	r19, 0x00	; 0
     ece:	40 40       	sbci	r20, 0x00	; 0
     ed0:	e1 f7       	brne	.-8      	; 0xeca <_Z18Rele_Abilitazione1ii+0x1a>
     ed2:	0e c0       	rjmp	.+28     	; 0xef0 <_Z18Rele_Abilitazione1ii+0x40>
     ed4:	28 b1       	in	r18, 0x08	; 8
     ed6:	01 c0       	rjmp	.+2      	; 0xeda <_Z18Rele_Abilitazione1ii+0x2a>
     ed8:	88 0f       	add	r24, r24
     eda:	6a 95       	dec	r22
     edc:	ea f7       	brpl	.-6      	; 0xed8 <_Z18Rele_Abilitazione1ii+0x28>
     ede:	82 2b       	or	r24, r18
     ee0:	88 b9       	out	0x08, r24	; 8
     ee2:	8f ef       	ldi	r24, 0xFF	; 255
     ee4:	90 e7       	ldi	r25, 0x70	; 112
     ee6:	22 e0       	ldi	r18, 0x02	; 2
     ee8:	81 50       	subi	r24, 0x01	; 1
     eea:	90 40       	sbci	r25, 0x00	; 0
     eec:	20 40       	sbci	r18, 0x00	; 0
     eee:	e1 f7       	brne	.-8      	; 0xee8 <_Z18Rele_Abilitazione1ii+0x38>
     ef0:	00 c0       	rjmp	.+0      	; 0xef2 <_Z18Rele_Abilitazione1ii+0x42>
     ef2:	00 00       	nop
     ef4:	08 95       	ret
     ef6:	28 b1       	in	r18, 0x08	; 8
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <_Z18Rele_Abilitazione1ii+0x50>
     efe:	88 0f       	add	r24, r24
     f00:	6a 95       	dec	r22
     f02:	ea f7       	brpl	.-6      	; 0xefe <_Z18Rele_Abilitazione1ii+0x4e>
     f04:	98 2f       	mov	r25, r24
     f06:	90 95       	com	r25
     f08:	92 23       	and	r25, r18
     f0a:	98 b9       	out	0x08, r25	; 8
     f0c:	3f ef       	ldi	r19, 0xFF	; 255
     f0e:	45 ea       	ldi	r20, 0xA5	; 165
     f10:	2e e0       	ldi	r18, 0x0E	; 14
     f12:	31 50       	subi	r19, 0x01	; 1
     f14:	40 40       	sbci	r20, 0x00	; 0
     f16:	20 40       	sbci	r18, 0x00	; 0
     f18:	e1 f7       	brne	.-8      	; 0xf12 <_Z18Rele_Abilitazione1ii+0x62>
     f1a:	00 c0       	rjmp	.+0      	; 0xf1c <_Z18Rele_Abilitazione1ii+0x6c>
     f1c:	00 00       	nop
     f1e:	98 b1       	in	r25, 0x08	; 8
     f20:	89 2b       	or	r24, r25
     f22:	88 b9       	out	0x08, r24	; 8
     f24:	08 95       	ret

00000f26 <_Z18Rele_Abilitazione2ii>:
     f26:	0f 9a       	sbi	0x01, 7	; 1
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	91 05       	cpc	r25, r1
     f2c:	b9 f0       	breq	.+46     	; 0xf5c <_Z18Rele_Abilitazione2ii+0x36>
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	29 f1       	breq	.+74     	; 0xf7e <_Z18Rele_Abilitazione2ii+0x58>
     f34:	89 2b       	or	r24, r25
     f36:	d1 f5       	brne	.+116    	; 0xfac <_Z18Rele_Abilitazione2ii+0x86>
     f38:	22 b1       	in	r18, 0x02	; 2
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <_Z18Rele_Abilitazione2ii+0x1c>
     f40:	88 0f       	add	r24, r24
     f42:	6a 95       	dec	r22
     f44:	ea f7       	brpl	.-6      	; 0xf40 <_Z18Rele_Abilitazione2ii+0x1a>
     f46:	80 95       	com	r24
     f48:	82 23       	and	r24, r18
     f4a:	82 b9       	out	0x02, r24	; 2
     f4c:	2f ef       	ldi	r18, 0xFF	; 255
     f4e:	30 e7       	ldi	r19, 0x70	; 112
     f50:	42 e0       	ldi	r20, 0x02	; 2
     f52:	21 50       	subi	r18, 0x01	; 1
     f54:	30 40       	sbci	r19, 0x00	; 0
     f56:	40 40       	sbci	r20, 0x00	; 0
     f58:	e1 f7       	brne	.-8      	; 0xf52 <_Z18Rele_Abilitazione2ii+0x2c>
     f5a:	0e c0       	rjmp	.+28     	; 0xf78 <_Z18Rele_Abilitazione2ii+0x52>
     f5c:	22 b1       	in	r18, 0x02	; 2
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <_Z18Rele_Abilitazione2ii+0x3c>
     f60:	88 0f       	add	r24, r24
     f62:	6a 95       	dec	r22
     f64:	ea f7       	brpl	.-6      	; 0xf60 <_Z18Rele_Abilitazione2ii+0x3a>
     f66:	82 2b       	or	r24, r18
     f68:	82 b9       	out	0x02, r24	; 2
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	90 e7       	ldi	r25, 0x70	; 112
     f6e:	22 e0       	ldi	r18, 0x02	; 2
     f70:	81 50       	subi	r24, 0x01	; 1
     f72:	90 40       	sbci	r25, 0x00	; 0
     f74:	20 40       	sbci	r18, 0x00	; 0
     f76:	e1 f7       	brne	.-8      	; 0xf70 <_Z18Rele_Abilitazione2ii+0x4a>
     f78:	00 c0       	rjmp	.+0      	; 0xf7a <_Z18Rele_Abilitazione2ii+0x54>
     f7a:	00 00       	nop
     f7c:	08 95       	ret
     f7e:	22 b1       	in	r18, 0x02	; 2
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	01 c0       	rjmp	.+2      	; 0xf88 <_Z18Rele_Abilitazione2ii+0x62>
     f86:	88 0f       	add	r24, r24
     f88:	6a 95       	dec	r22
     f8a:	ea f7       	brpl	.-6      	; 0xf86 <_Z18Rele_Abilitazione2ii+0x60>
     f8c:	98 2f       	mov	r25, r24
     f8e:	90 95       	com	r25
     f90:	92 23       	and	r25, r18
     f92:	92 b9       	out	0x02, r25	; 2
     f94:	3f ef       	ldi	r19, 0xFF	; 255
     f96:	45 ea       	ldi	r20, 0xA5	; 165
     f98:	2e e0       	ldi	r18, 0x0E	; 14
     f9a:	31 50       	subi	r19, 0x01	; 1
     f9c:	40 40       	sbci	r20, 0x00	; 0
     f9e:	20 40       	sbci	r18, 0x00	; 0
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <_Z18Rele_Abilitazione2ii+0x74>
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <_Z18Rele_Abilitazione2ii+0x7e>
     fa4:	00 00       	nop
     fa6:	92 b1       	in	r25, 0x02	; 2
     fa8:	89 2b       	or	r24, r25
     faa:	82 b9       	out	0x02, r24	; 2
     fac:	08 95       	ret

00000fae <_Z12Control_WIFIi>:
     fae:	23 9a       	sbi	0x04, 3	; 4
     fb0:	2f ef       	ldi	r18, 0xFF	; 255
     fb2:	36 e7       	ldi	r19, 0x76	; 118
     fb4:	41 e0       	ldi	r20, 0x01	; 1
     fb6:	21 50       	subi	r18, 0x01	; 1
     fb8:	30 40       	sbci	r19, 0x00	; 0
     fba:	40 40       	sbci	r20, 0x00	; 0
     fbc:	e1 f7       	brne	.-8      	; 0xfb6 <_Z12Control_WIFIi+0x8>
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <_Z12Control_WIFIi+0x12>
     fc0:	00 00       	nop
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	91 05       	cpc	r25, r1
     fc6:	11 f4       	brne	.+4      	; 0xfcc <_Z12Control_WIFIi+0x1e>
     fc8:	2b 9a       	sbi	0x05, 3	; 5
     fca:	08 95       	ret
     fcc:	89 2b       	or	r24, r25
     fce:	09 f4       	brne	.+2      	; 0xfd2 <_Z12Control_WIFIi+0x24>
     fd0:	2b 98       	cbi	0x05, 3	; 5
     fd2:	08 95       	ret

00000fd4 <_Z32CompletoRifornimentoPerInvioDatii>:
     fd4:	10 92 1c 0c 	sts	0x0C1C, r1	; 0x800c1c <impulsi+0x1>
     fd8:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <impulsi>
     fdc:	10 92 22 0c 	sts	0x0C22, r1	; 0x800c22 <Litri+0x1>
     fe0:	10 92 21 0c 	sts	0x0C21, r1	; 0x800c21 <Litri>
     fe4:	61 e1       	ldi	r22, 0x11	; 17
     fe6:	77 e0       	ldi	r23, 0x07	; 7
     fe8:	83 ed       	ldi	r24, 0xD3	; 211
     fea:	9b e0       	ldi	r25, 0x0B	; 11
     fec:	0e 94 64 3e 	call	0x7cc8	; 0x7cc8 <_ZN6String6concatEPKc>
     ff0:	2f ef       	ldi	r18, 0xFF	; 255
     ff2:	81 ee       	ldi	r24, 0xE1	; 225
     ff4:	94 e0       	ldi	r25, 0x04	; 4
     ff6:	21 50       	subi	r18, 0x01	; 1
     ff8:	80 40       	sbci	r24, 0x00	; 0
     ffa:	90 40       	sbci	r25, 0x00	; 0
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <_Z32CompletoRifornimentoPerInvioDatii+0x22>
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <_Z32CompletoRifornimentoPerInvioDatii+0x2c>
    1000:	00 00       	nop
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	44 e6       	ldi	r20, 0x64	; 100
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	67 e5       	ldi	r22, 0x57	; 87
    100c:	7b e0       	ldi	r23, 0x0B	; 11
    100e:	83 ed       	ldi	r24, 0xD3	; 211
    1010:	9b e0       	ldi	r25, 0x0B	; 11
    1012:	0c 94 b8 3e 	jmp	0x7d70	; 0x7d70 <_ZNK6String8getBytesEPhjj>

00001016 <__vector_4>:
    1016:	1f 92       	push	r1
    1018:	0f 92       	push	r0
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	0f 92       	push	r0
    101e:	11 24       	eor	r1, r1
    1020:	8f 93       	push	r24
    1022:	9f 93       	push	r25
    1024:	05 9b       	sbis	0x00, 5	; 0
    1026:	09 c0       	rjmp	.+18     	; 0x103a <__vector_4+0x24>
    1028:	80 91 1b 0c 	lds	r24, 0x0C1B	; 0x800c1b <impulsi>
    102c:	90 91 1c 0c 	lds	r25, 0x0C1C	; 0x800c1c <impulsi+0x1>
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	90 93 1c 0c 	sts	0x0C1C, r25	; 0x800c1c <impulsi+0x1>
    1036:	80 93 1b 0c 	sts	0x0C1B, r24	; 0x800c1b <impulsi>
    103a:	06 9b       	sbis	0x00, 6	; 0
    103c:	09 c0       	rjmp	.+18     	; 0x1050 <__vector_4+0x3a>
    103e:	80 91 1b 0c 	lds	r24, 0x0C1B	; 0x800c1b <impulsi>
    1042:	90 91 1c 0c 	lds	r25, 0x0C1C	; 0x800c1c <impulsi+0x1>
    1046:	01 96       	adiw	r24, 0x01	; 1
    1048:	90 93 1c 0c 	sts	0x0C1C, r25	; 0x800c1c <impulsi+0x1>
    104c:	80 93 1b 0c 	sts	0x0C1B, r24	; 0x800c1b <impulsi>
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	0f 90       	pop	r0
    105a:	1f 90       	pop	r1
    105c:	18 95       	reti

0000105e <__vector_7>:
    105e:	1f 92       	push	r1
    1060:	0f 92       	push	r0
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	0b b6       	in	r0, 0x3b	; 59
    106a:	0f 92       	push	r0
    106c:	2f 93       	push	r18
    106e:	3f 93       	push	r19
    1070:	4f 93       	push	r20
    1072:	5f 93       	push	r21
    1074:	6f 93       	push	r22
    1076:	7f 93       	push	r23
    1078:	8f 93       	push	r24
    107a:	9f 93       	push	r25
    107c:	af 93       	push	r26
    107e:	bf 93       	push	r27
    1080:	ef 93       	push	r30
    1082:	ff 93       	push	r31
    1084:	80 91 1d 0c 	lds	r24, 0x0C1D	; 0x800c1d <stato_procedura>
    1088:	90 91 1e 0c 	lds	r25, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    108c:	04 97       	sbiw	r24, 0x04	; 4
    108e:	09 f0       	breq	.+2      	; 0x1092 <__vector_7+0x34>
    1090:	84 c0       	rjmp	.+264    	; 0x119a <__vector_7+0x13c>
    1092:	4e 9b       	sbis	0x09, 6	; 9
    1094:	29 c0       	rjmp	.+82     	; 0x10e8 <__vector_7+0x8a>
    1096:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <intConsecutivePresses>
    109a:	90 91 78 0c 	lds	r25, 0x0C78	; 0x800c78 <intConsecutivePresses+0x1>
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	90 93 78 0c 	sts	0x0C78, r25	; 0x800c78 <intConsecutivePresses+0x1>
    10a4:	80 93 77 0c 	sts	0x0C77, r24	; 0x800c77 <intConsecutivePresses>
    10a8:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <intConsecutivePresses>
    10ac:	90 91 78 0c 	lds	r25, 0x0C78	; 0x800c78 <intConsecutivePresses+0x1>
    10b0:	18 16       	cp	r1, r24
    10b2:	19 06       	cpc	r1, r25
    10b4:	84 f5       	brge	.+96     	; 0x1116 <__vector_7+0xb8>
    10b6:	82 e4       	ldi	r24, 0x42	; 66
    10b8:	c2 de       	rcall	.-636    	; 0xe3e <_Z13abilitaPulserc>
    10ba:	67 e0       	ldi	r22, 0x07	; 7
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	31 df       	rcall	.-414    	; 0xf26 <_Z18Rele_Abilitazione2ii>
    10c4:	65 ee       	ldi	r22, 0xE5	; 229
    10c6:	71 e0       	ldi	r23, 0x01	; 1
    10c8:	8b ee       	ldi	r24, 0xEB	; 235
    10ca:	9b e0       	ldi	r25, 0x0B	; 11
    10cc:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    10d0:	6b e5       	ldi	r22, 0x5B	; 91
    10d2:	73 e0       	ldi	r23, 0x03	; 3
    10d4:	89 e2       	ldi	r24, 0x29	; 41
    10d6:	9c e0       	ldi	r25, 0x0C	; 12
    10d8:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    10dc:	6a e0       	ldi	r22, 0x0A	; 10
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	38 dd       	rcall	.-1424   	; 0xb56 <_Z11avanzaStatom>
    10e6:	0f c0       	rjmp	.+30     	; 0x1106 <__vector_7+0xa8>
    10e8:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <intConsecutiveNonPresses>
    10ec:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <intConsecutiveNonPresses+0x1>
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	90 93 76 0c 	sts	0x0C76, r25	; 0x800c76 <intConsecutiveNonPresses+0x1>
    10f6:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <intConsecutiveNonPresses>
    10fa:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <intConsecutiveNonPresses>
    10fe:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <intConsecutiveNonPresses+0x1>
    1102:	02 97       	sbiw	r24, 0x02	; 2
    1104:	44 f0       	brlt	.+16     	; 0x1116 <__vector_7+0xb8>
    1106:	10 92 78 0c 	sts	0x0C78, r1	; 0x800c78 <intConsecutivePresses+0x1>
    110a:	10 92 77 0c 	sts	0x0C77, r1	; 0x800c77 <intConsecutivePresses>
    110e:	10 92 76 0c 	sts	0x0C76, r1	; 0x800c76 <intConsecutiveNonPresses+0x1>
    1112:	10 92 75 0c 	sts	0x0C75, r1	; 0x800c75 <intConsecutiveNonPresses>
    1116:	4f 9b       	sbis	0x09, 7	; 9
    1118:	29 c0       	rjmp	.+82     	; 0x116c <__vector_7+0x10e>
    111a:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <intConsecutivePresses>
    111e:	90 91 78 0c 	lds	r25, 0x0C78	; 0x800c78 <intConsecutivePresses+0x1>
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	90 93 78 0c 	sts	0x0C78, r25	; 0x800c78 <intConsecutivePresses+0x1>
    1128:	80 93 77 0c 	sts	0x0C77, r24	; 0x800c77 <intConsecutivePresses>
    112c:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <intConsecutivePresses>
    1130:	90 91 78 0c 	lds	r25, 0x0C78	; 0x800c78 <intConsecutivePresses+0x1>
    1134:	18 16       	cp	r1, r24
    1136:	19 06       	cpc	r1, r25
    1138:	84 f5       	brge	.+96     	; 0x119a <__vector_7+0x13c>
    113a:	84 e4       	ldi	r24, 0x44	; 68
    113c:	80 de       	rcall	.-768    	; 0xe3e <_Z13abilitaPulserc>
    113e:	67 e0       	ldi	r22, 0x07	; 7
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	b4 de       	rcall	.-664    	; 0xeb0 <_Z18Rele_Abilitazione1ii>
    1148:	63 e6       	ldi	r22, 0x63	; 99
    114a:	73 e0       	ldi	r23, 0x03	; 3
    114c:	8b ee       	ldi	r24, 0xEB	; 235
    114e:	9b e0       	ldi	r25, 0x0B	; 11
    1150:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    1154:	65 e6       	ldi	r22, 0x65	; 101
    1156:	73 e0       	ldi	r23, 0x03	; 3
    1158:	89 e2       	ldi	r24, 0x29	; 41
    115a:	9c e0       	ldi	r25, 0x0C	; 12
    115c:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    1160:	6a e0       	ldi	r22, 0x0A	; 10
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	f6 dc       	rcall	.-1556   	; 0xb56 <_Z11avanzaStatom>
    116a:	0f c0       	rjmp	.+30     	; 0x118a <__vector_7+0x12c>
    116c:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <intConsecutiveNonPresses>
    1170:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <intConsecutiveNonPresses+0x1>
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	90 93 76 0c 	sts	0x0C76, r25	; 0x800c76 <intConsecutiveNonPresses+0x1>
    117a:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <intConsecutiveNonPresses>
    117e:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <intConsecutiveNonPresses>
    1182:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <intConsecutiveNonPresses+0x1>
    1186:	02 97       	sbiw	r24, 0x02	; 2
    1188:	44 f0       	brlt	.+16     	; 0x119a <__vector_7+0x13c>
    118a:	10 92 78 0c 	sts	0x0C78, r1	; 0x800c78 <intConsecutivePresses+0x1>
    118e:	10 92 77 0c 	sts	0x0C77, r1	; 0x800c77 <intConsecutivePresses>
    1192:	10 92 76 0c 	sts	0x0C76, r1	; 0x800c76 <intConsecutiveNonPresses+0x1>
    1196:	10 92 75 0c 	sts	0x0C75, r1	; 0x800c75 <intConsecutiveNonPresses>
    119a:	ff 91       	pop	r31
    119c:	ef 91       	pop	r30
    119e:	bf 91       	pop	r27
    11a0:	af 91       	pop	r26
    11a2:	9f 91       	pop	r25
    11a4:	8f 91       	pop	r24
    11a6:	7f 91       	pop	r23
    11a8:	6f 91       	pop	r22
    11aa:	5f 91       	pop	r21
    11ac:	4f 91       	pop	r20
    11ae:	3f 91       	pop	r19
    11b0:	2f 91       	pop	r18
    11b2:	0f 90       	pop	r0
    11b4:	0b be       	out	0x3b, r0	; 59
    11b6:	0f 90       	pop	r0
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	0f 90       	pop	r0
    11bc:	1f 90       	pop	r1
    11be:	18 95       	reti

000011c0 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh>:
    11c0:	2f 92       	push	r2
    11c2:	3f 92       	push	r3
    11c4:	4f 92       	push	r4
    11c6:	5f 92       	push	r5
    11c8:	6f 92       	push	r6
    11ca:	7f 92       	push	r7
    11cc:	8f 92       	push	r8
    11ce:	9f 92       	push	r9
    11d0:	af 92       	push	r10
    11d2:	bf 92       	push	r11
    11d4:	cf 92       	push	r12
    11d6:	df 92       	push	r13
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	62 97       	sbiw	r28, 0x12	; 18
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	9a 8b       	std	Y+18, r25	; 0x12
    11f6:	89 8b       	std	Y+17, r24	; 0x11
    11f8:	4a 87       	std	Y+10, r20	; 0x0a
    11fa:	5b 87       	std	Y+11, r21	; 0x0b
    11fc:	6c 87       	std	Y+12, r22	; 0x0c
    11fe:	7d 87       	std	Y+13, r23	; 0x0d
    1200:	19 01       	movw	r2, r18
    1202:	47 01       	movw	r8, r14
    1204:	58 01       	movw	r10, r16
    1206:	c8 8a       	std	Y+16, r12	; 0x10
    1208:	9a 01       	movw	r18, r20
    120a:	ab 01       	movw	r20, r22
    120c:	62 e0       	ldi	r22, 0x02	; 2
    120e:	0e 94 25 32 	call	0x644a	; 0x644a <_ZN8SPIFlash5_prepEhmm>
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	88 23       	and	r24, r24
    1216:	09 f4       	brne	.+2      	; 0x121a <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x5a>
    1218:	2f c1       	rjmp	.+606    	; 0x1478 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x2b8>
    121a:	e9 89       	ldd	r30, Y+17	; 0x11
    121c:	fa 89       	ldd	r31, Y+18	; 0x12
    121e:	e6 5a       	subi	r30, 0xA6	; 166
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	80 81       	ld	r24, Z
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	31 e0       	ldi	r19, 0x01	; 1
    1228:	89 01       	movw	r16, r18
    122a:	08 1b       	sub	r16, r24
    122c:	11 09       	sbc	r17, r1
    122e:	e9 89       	ldd	r30, Y+17	; 0x11
    1230:	fa 89       	ldd	r31, Y+18	; 0x12
    1232:	86 85       	ldd	r24, Z+14	; 0x0e
    1234:	81 11       	cpse	r24, r1
    1236:	03 c0       	rjmp	.+6      	; 0x123e <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x7e>
    1238:	cf 01       	movw	r24, r30
    123a:	0e 94 04 31 	call	0x6208	; 0x6208 <_ZN8SPIFlash12_startSPIBusEv>
    123e:	2c 98       	cbi	0x05, 4	; 5
    1240:	42 e0       	ldi	r20, 0x02	; 2
    1242:	e9 89       	ldd	r30, Y+17	; 0x11
    1244:	fa 89       	ldd	r31, Y+18	; 0x12
    1246:	65 8d       	ldd	r22, Z+29	; 0x1d
    1248:	cf 01       	movw	r24, r30
    124a:	0e 94 8f 31 	call	0x631e	; 0x631e <_ZN8SPIFlash9_nextByteEch>
    124e:	89 89       	ldd	r24, Y+17	; 0x11
    1250:	9a 89       	ldd	r25, Y+18	; 0x12
    1252:	0e 94 e7 30 	call	0x61ce	; 0x61ce <_ZN8SPIFlash16_transferAddressEv>
    1256:	c8 01       	movw	r24, r16
    1258:	a0 e0       	ldi	r26, 0x00	; 0
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	88 16       	cp	r8, r24
    125e:	99 06       	cpc	r9, r25
    1260:	aa 06       	cpc	r10, r26
    1262:	bb 06       	cpc	r11, r27
    1264:	b8 f4       	brcc	.+46     	; 0x1294 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0xd4>
    1266:	81 01       	movw	r16, r2
    1268:	c8 01       	movw	r24, r16
    126a:	82 19       	sub	r24, r2
    126c:	93 09       	sbc	r25, r3
    126e:	a0 e0       	ldi	r26, 0x00	; 0
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	88 15       	cp	r24, r8
    1274:	99 05       	cpc	r25, r9
    1276:	aa 05       	cpc	r26, r10
    1278:	bb 05       	cpc	r27, r11
    127a:	50 f4       	brcc	.+20     	; 0x1290 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0xd0>
    127c:	f8 01       	movw	r30, r16
    127e:	41 91       	ld	r20, Z+
    1280:	8f 01       	movw	r16, r30
    1282:	e9 89       	ldd	r30, Y+17	; 0x11
    1284:	fa 89       	ldd	r31, Y+18	; 0x12
    1286:	65 8d       	ldd	r22, Z+29	; 0x1d
    1288:	cf 01       	movw	r24, r30
    128a:	0e 94 8f 31 	call	0x631e	; 0x631e <_ZN8SPIFlash9_nextByteEch>
    128e:	ec cf       	rjmp	.-40     	; 0x1268 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0xa8>
    1290:	2c 9a       	sbi	0x05, 4	; 5
    1292:	a1 c0       	rjmp	.+322    	; 0x13d6 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x216>
    1294:	24 01       	movw	r4, r8
    1296:	35 01       	movw	r6, r10
    1298:	3d 82       	std	Y+5, r3	; 0x05
    129a:	2c 82       	std	Y+4, r2	; 0x04
    129c:	1f 82       	std	Y+7, r1	; 0x07
    129e:	1e 82       	std	Y+6, r1	; 0x06
    12a0:	29 89       	ldd	r18, Y+17	; 0x11
    12a2:	3a 89       	ldd	r19, Y+18	; 0x12
    12a4:	26 5a       	subi	r18, 0xA6	; 166
    12a6:	3f 4f       	sbci	r19, 0xFF	; 255
    12a8:	3b 83       	std	Y+3, r19	; 0x03
    12aa:	2a 83       	std	Y+2, r18	; 0x02
    12ac:	89 89       	ldd	r24, Y+17	; 0x11
    12ae:	9a 89       	ldd	r25, Y+18	; 0x12
    12b0:	82 5a       	subi	r24, 0xA2	; 162
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	9f 87       	std	Y+15, r25	; 0x0f
    12b6:	8e 87       	std	Y+14, r24	; 0x0e
    12b8:	68 01       	movw	r12, r16
    12ba:	e1 2c       	mov	r14, r1
    12bc:	f1 2c       	mov	r15, r1
    12be:	4c 14       	cp	r4, r12
    12c0:	5d 04       	cpc	r5, r13
    12c2:	6e 04       	cpc	r6, r14
    12c4:	7f 04       	cpc	r7, r15
    12c6:	10 f4       	brcc	.+4      	; 0x12cc <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x10c>
    12c8:	73 01       	movw	r14, r6
    12ca:	62 01       	movw	r12, r4
    12cc:	ea 81       	ldd	r30, Y+2	; 0x02
    12ce:	fb 81       	ldd	r31, Y+3	; 0x03
    12d0:	80 81       	ld	r24, Z
    12d2:	81 11       	cpse	r24, r1
    12d4:	0c c0       	rjmp	.+24     	; 0x12ee <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x12e>
    12d6:	2c 98       	cbi	0x05, 4	; 5
    12d8:	42 e0       	ldi	r20, 0x02	; 2
    12da:	e9 89       	ldd	r30, Y+17	; 0x11
    12dc:	fa 89       	ldd	r31, Y+18	; 0x12
    12de:	65 8d       	ldd	r22, Z+29	; 0x1d
    12e0:	cf 01       	movw	r24, r30
    12e2:	0e 94 8f 31 	call	0x631e	; 0x631e <_ZN8SPIFlash9_nextByteEch>
    12e6:	89 89       	ldd	r24, Y+17	; 0x11
    12e8:	9a 89       	ldd	r25, Y+18	; 0x12
    12ea:	0e 94 e7 30 	call	0x61ce	; 0x61ce <_ZN8SPIFlash16_transferAddressEv>
    12ee:	2c 81       	ldd	r18, Y+4	; 0x04
    12f0:	3d 81       	ldd	r19, Y+5	; 0x05
    12f2:	39 87       	std	Y+9, r19	; 0x09
    12f4:	28 87       	std	Y+8, r18	; 0x08
    12f6:	89 01       	movw	r16, r18
    12f8:	1d 83       	std	Y+5, r17	; 0x05
    12fa:	0c 83       	std	Y+4, r16	; 0x04
    12fc:	c8 01       	movw	r24, r16
    12fe:	e8 85       	ldd	r30, Y+8	; 0x08
    1300:	f9 85       	ldd	r31, Y+9	; 0x09
    1302:	8e 1b       	sub	r24, r30
    1304:	9f 0b       	sbc	r25, r31
    1306:	a0 e0       	ldi	r26, 0x00	; 0
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	8c 15       	cp	r24, r12
    130c:	9d 05       	cpc	r25, r13
    130e:	ae 05       	cpc	r26, r14
    1310:	bf 05       	cpc	r27, r15
    1312:	60 f4       	brcc	.+24     	; 0x132c <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x16c>
    1314:	0f 5f       	subi	r16, 0xFF	; 255
    1316:	1f 4f       	sbci	r17, 0xFF	; 255
    1318:	ec 81       	ldd	r30, Y+4	; 0x04
    131a:	fd 81       	ldd	r31, Y+5	; 0x05
    131c:	40 81       	ld	r20, Z
    131e:	e9 89       	ldd	r30, Y+17	; 0x11
    1320:	fa 89       	ldd	r31, Y+18	; 0x12
    1322:	65 8d       	ldd	r22, Z+29	; 0x1d
    1324:	cf 01       	movw	r24, r30
    1326:	0e 94 8f 31 	call	0x631e	; 0x631e <_ZN8SPIFlash9_nextByteEch>
    132a:	e6 cf       	rjmp	.-52     	; 0x12f8 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x138>
    132c:	2c 9a       	sbi	0x05, 4	; 5
    132e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1330:	ff 85       	ldd	r31, Y+15	; 0x0f
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
    1336:	a2 81       	ldd	r26, Z+2	; 0x02
    1338:	b3 81       	ldd	r27, Z+3	; 0x03
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	a1 05       	cpc	r26, r1
    133e:	b1 05       	cpc	r27, r1
    1340:	79 f4       	brne	.+30     	; 0x1360 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x1a0>
    1342:	ea 81       	ldd	r30, Y+2	; 0x02
    1344:	fb 81       	ldd	r31, Y+3	; 0x03
    1346:	80 81       	ld	r24, Z
    1348:	91 81       	ldd	r25, Z+1	; 0x01
    134a:	a2 81       	ldd	r26, Z+2	; 0x02
    134c:	b3 81       	ldd	r27, Z+3	; 0x03
    134e:	8c 0d       	add	r24, r12
    1350:	9d 1d       	adc	r25, r13
    1352:	ae 1d       	adc	r26, r14
    1354:	bf 1d       	adc	r27, r15
    1356:	80 83       	st	Z, r24
    1358:	91 83       	std	Z+1, r25	; 0x01
    135a:	a2 83       	std	Z+2, r26	; 0x02
    135c:	b3 83       	std	Z+3, r27	; 0x03
    135e:	16 c0       	rjmp	.+44     	; 0x138c <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x1cc>
    1360:	2e 81       	ldd	r18, Y+6	; 0x06
    1362:	3f 81       	ldd	r19, Y+7	; 0x07
    1364:	a9 01       	movw	r20, r18
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	48 17       	cp	r20, r24
    136c:	59 07       	cpc	r21, r25
    136e:	6a 07       	cpc	r22, r26
    1370:	7b 07       	cpc	r23, r27
    1372:	60 f0       	brcs	.+24     	; 0x138c <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x1cc>
    1374:	ea 81       	ldd	r30, Y+2	; 0x02
    1376:	fb 81       	ldd	r31, Y+3	; 0x03
    1378:	10 82       	st	Z, r1
    137a:	11 82       	std	Z+1, r1	; 0x01
    137c:	12 82       	std	Z+2, r1	; 0x02
    137e:	13 82       	std	Z+3, r1	; 0x03
    1380:	ee 85       	ldd	r30, Y+14	; 0x0e
    1382:	ff 85       	ldd	r31, Y+15	; 0x0f
    1384:	10 82       	st	Z, r1
    1386:	11 82       	std	Z+1, r1	; 0x01
    1388:	12 82       	std	Z+2, r1	; 0x02
    138a:	13 82       	std	Z+3, r1	; 0x03
    138c:	2e 81       	ldd	r18, Y+6	; 0x06
    138e:	3f 81       	ldd	r19, Y+7	; 0x07
    1390:	2c 0d       	add	r18, r12
    1392:	3d 1d       	adc	r19, r13
    1394:	3f 83       	std	Y+7, r19	; 0x07
    1396:	2e 83       	std	Y+6, r18	; 0x06
    1398:	4c 18       	sub	r4, r12
    139a:	5d 08       	sbc	r5, r13
    139c:	6e 08       	sbc	r6, r14
    139e:	7f 08       	sbc	r7, r15
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	5a ec       	ldi	r21, 0xCA	; 202
    13a4:	6a e9       	ldi	r22, 0x9A	; 154
    13a6:	7b e3       	ldi	r23, 0x3B	; 59
    13a8:	89 89       	ldd	r24, Y+17	; 0x11
    13aa:	9a 89       	ldd	r25, Y+18	; 0x12
    13ac:	0e 94 c3 31 	call	0x6386	; 0x6386 <_ZN8SPIFlash8_notBusyEm>
    13b0:	88 23       	and	r24, r24
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x1f6>
    13b4:	61 c0       	rjmp	.+194    	; 0x1478 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x2b8>
    13b6:	61 e0       	ldi	r22, 0x01	; 1
    13b8:	89 89       	ldd	r24, Y+17	; 0x11
    13ba:	9a 89       	ldd	r25, Y+18	; 0x12
    13bc:	0e 94 0a 32 	call	0x6414	; 0x6414 <_ZN8SPIFlash12_writeEnableEb>
    13c0:	88 23       	and	r24, r24
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x206>
    13c4:	59 c0       	rjmp	.+178    	; 0x1478 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x2b8>
    13c6:	00 e0       	ldi	r16, 0x00	; 0
    13c8:	11 e0       	ldi	r17, 0x01	; 1
    13ca:	41 14       	cp	r4, r1
    13cc:	51 04       	cpc	r5, r1
    13ce:	61 04       	cpc	r6, r1
    13d0:	71 04       	cpc	r7, r1
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x216>
    13d4:	71 cf       	rjmp	.-286    	; 0x12b8 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0xf8>
    13d6:	38 89       	ldd	r19, Y+16	; 0x10
    13d8:	31 11       	cpse	r19, r1
    13da:	05 c0       	rjmp	.+10     	; 0x13e6 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x226>
    13dc:	89 89       	ldd	r24, Y+17	; 0x11
    13de:	9a 89       	ldd	r25, Y+18	; 0x12
    13e0:	0e 94 91 31 	call	0x6322	; 0x6322 <_ZN8SPIFlash7_endSPIEv>
    13e4:	4a c0       	rjmp	.+148    	; 0x147a <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x2ba>
    13e6:	89 89       	ldd	r24, Y+17	; 0x11
    13e8:	9a 89       	ldd	r25, Y+18	; 0x12
    13ea:	0e 94 b6 31 	call	0x636c	; 0x636c <_ZN8SPIFlash18_isChipPoweredDownEv>
    13ee:	81 11       	cpse	r24, r1
    13f0:	43 c0       	rjmp	.+134    	; 0x1478 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x2b8>
    13f2:	95 01       	movw	r18, r10
    13f4:	84 01       	movw	r16, r8
    13f6:	4a 85       	ldd	r20, Y+10	; 0x0a
    13f8:	5b 85       	ldd	r21, Y+11	; 0x0b
    13fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    13fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    13fe:	89 89       	ldd	r24, Y+17	; 0x11
    1400:	9a 89       	ldd	r25, Y+18	; 0x12
    1402:	0e 94 92 30 	call	0x6124	; 0x6124 <_ZN8SPIFlash13_addressCheckEmm>
    1406:	88 23       	and	r24, r24
    1408:	b9 f1       	breq	.+110    	; 0x1478 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x2b8>
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	5a ec       	ldi	r21, 0xCA	; 202
    140e:	6a e9       	ldi	r22, 0x9A	; 154
    1410:	7b e3       	ldi	r23, 0x3B	; 59
    1412:	89 89       	ldd	r24, Y+17	; 0x11
    1414:	9a 89       	ldd	r25, Y+18	; 0x12
    1416:	0e 94 c3 31 	call	0x6386	; 0x6386 <_ZN8SPIFlash8_notBusyEm>
    141a:	88 23       	and	r24, r24
    141c:	69 f1       	breq	.+90     	; 0x1478 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x2b8>
    141e:	2c 98       	cbi	0x05, 4	; 5
    1420:	43 e0       	ldi	r20, 0x03	; 3
    1422:	e9 89       	ldd	r30, Y+17	; 0x11
    1424:	fa 89       	ldd	r31, Y+18	; 0x12
    1426:	65 8d       	ldd	r22, Z+29	; 0x1d
    1428:	cf 01       	movw	r24, r30
    142a:	0e 94 8f 31 	call	0x631e	; 0x631e <_ZN8SPIFlash9_nextByteEch>
    142e:	89 89       	ldd	r24, Y+17	; 0x11
    1430:	9a 89       	ldd	r25, Y+18	; 0x12
    1432:	0e 94 e7 30 	call	0x61ce	; 0x61ce <_ZN8SPIFlash16_transferAddressEv>
    1436:	81 01       	movw	r16, r2
    1438:	c8 01       	movw	r24, r16
    143a:	82 19       	sub	r24, r2
    143c:	93 09       	sbc	r25, r3
    143e:	a0 e0       	ldi	r26, 0x00	; 0
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	88 15       	cp	r24, r8
    1444:	99 05       	cpc	r25, r9
    1446:	aa 05       	cpc	r26, r10
    1448:	bb 05       	cpc	r27, r11
    144a:	40 f6       	brcc	.-112    	; 0x13dc <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x21c>
    144c:	f8 01       	movw	r30, r16
    144e:	f1 90       	ld	r15, Z+
    1450:	8f 01       	movw	r16, r30
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	e9 89       	ldd	r30, Y+17	; 0x11
    1456:	fa 89       	ldd	r31, Y+18	; 0x12
    1458:	64 8d       	ldd	r22, Z+28	; 0x1c
    145a:	cf 01       	movw	r24, r30
    145c:	0e 94 8f 31 	call	0x631e	; 0x631e <_ZN8SPIFlash9_nextByteEch>
    1460:	f8 16       	cp	r15, r24
    1462:	51 f3       	breq	.-44     	; 0x1438 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh+0x278>
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	6a e0       	ldi	r22, 0x0A	; 10
    1468:	89 89       	ldd	r24, Y+17	; 0x11
    146a:	9a 89       	ldd	r25, Y+18	; 0x12
    146c:	0e 94 c9 33 	call	0x6792	; 0x6792 <_ZN8SPIFlash13_troubleshootEhb>
    1470:	89 89       	ldd	r24, Y+17	; 0x11
    1472:	9a 89       	ldd	r25, Y+18	; 0x12
    1474:	0e 94 91 31 	call	0x6322	; 0x6322 <_ZN8SPIFlash7_endSPIEv>
    1478:	19 82       	std	Y+1, r1	; 0x01
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	62 96       	adiw	r28, 0x12	; 18
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	bf 90       	pop	r11
    149a:	af 90       	pop	r10
    149c:	9f 90       	pop	r9
    149e:	8f 90       	pop	r8
    14a0:	7f 90       	pop	r7
    14a2:	6f 90       	pop	r6
    14a4:	5f 90       	pop	r5
    14a6:	4f 90       	pop	r4
    14a8:	3f 90       	pop	r3
    14aa:	2f 90       	pop	r2
    14ac:	08 95       	ret

000014ae <_Z15erogazioniSaverm6String>:
    14ae:	4f 92       	push	r4
    14b0:	5f 92       	push	r5
    14b2:	6f 92       	push	r6
    14b4:	7f 92       	push	r7
    14b6:	8f 92       	push	r8
    14b8:	9f 92       	push	r9
    14ba:	af 92       	push	r10
    14bc:	cf 92       	push	r12
    14be:	df 92       	push	r13
    14c0:	ef 92       	push	r14
    14c2:	ff 92       	push	r15
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	cc 56       	subi	r28, 0x6C	; 108
    14d2:	d1 40       	sbci	r29, 0x01	; 1
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	2b 01       	movw	r4, r22
    14e0:	3c 01       	movw	r6, r24
    14e2:	6a 01       	movw	r12, r20
    14e4:	4e 01       	movw	r8, r28
    14e6:	87 eb       	ldi	r24, 0xB7	; 183
    14e8:	88 0e       	add	r8, r24
    14ea:	91 1c       	adc	r9, r1
    14ec:	c4 01       	movw	r24, r8
    14ee:	86 d8       	rcall	.-3828   	; 0x5fc <_ZN10erogazioniC1Ev>
    14f0:	ce 01       	movw	r24, r28
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	83 d8       	rcall	.-3834   	; 0x5fc <_ZN10erogazioniC1Ev>
    14f6:	6d e6       	ldi	r22, 0x6D	; 109
    14f8:	73 e0       	ldi	r23, 0x03	; 3
    14fa:	c6 01       	movw	r24, r12
    14fc:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <_ZNK6String6equalsEPKc>
    1500:	88 23       	and	r24, r24
    1502:	09 f4       	brne	.+2      	; 0x1506 <_Z15erogazioniSaverm6String+0x58>
    1504:	45 c0       	rjmp	.+138    	; 0x1590 <_Z15erogazioniSaverm6String+0xe2>
    1506:	f4 01       	movw	r30, r8
    1508:	11 92       	st	Z+, r1
    150a:	11 92       	st	Z+, r1
    150c:	8f 01       	movw	r16, r30
    150e:	6e 01       	movw	r12, r28
    1510:	f3 e9       	ldi	r31, 0x93	; 147
    1512:	cf 1a       	sub	r12, r31
    1514:	fe ef       	ldi	r31, 0xFE	; 254
    1516:	df 0a       	sbc	r13, r31
    1518:	8f e1       	ldi	r24, 0x1F	; 31
    151a:	9e e4       	ldi	r25, 0x4E	; 78
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <_Z15erogazioniSaverm6String+0x6e>
    1520:	00 c0       	rjmp	.+0      	; 0x1522 <_Z15erogazioniSaverm6String+0x74>
    1522:	00 00       	nop
    1524:	63 e7       	ldi	r22, 0x73	; 115
    1526:	73 e0       	ldi	r23, 0x03	; 3
    1528:	c8 01       	movw	r24, r16
    152a:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    152e:	0a 5f       	subi	r16, 0xFA	; 250
    1530:	1f 4f       	sbci	r17, 0xFF	; 255
    1532:	0c 15       	cp	r16, r12
    1534:	1d 05       	cpc	r17, r13
    1536:	81 f7       	brne	.-32     	; 0x1518 <_Z15erogazioniSaverm6String+0x6a>
    1538:	ef e1       	ldi	r30, 0x1F	; 31
    153a:	fe e4       	ldi	r31, 0x4E	; 78
    153c:	31 97       	sbiw	r30, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <_Z15erogazioniSaverm6String+0x8e>
    1540:	00 c0       	rjmp	.+0      	; 0x1542 <_Z15erogazioniSaverm6String+0x94>
    1542:	00 00       	nop
    1544:	c3 01       	movw	r24, r6
    1546:	b2 01       	movw	r22, r4
    1548:	1c d8       	rcall	.-4040   	; 0x582 <_Z16FlasheraseSectorm>
    154a:	8f e1       	ldi	r24, 0x1F	; 31
    154c:	9e e4       	ldi	r25, 0x4E	; 78
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <_Z15erogazioniSaverm6String+0xa0>
    1552:	00 c0       	rjmp	.+0      	; 0x1554 <_Z15erogazioniSaverm6String+0xa6>
    1554:	00 00       	nop
    1556:	3b e0       	ldi	r19, 0x0B	; 11
    1558:	a3 2e       	mov	r10, r19
    155a:	cc 24       	eor	r12, r12
    155c:	c3 94       	inc	r12
    155e:	16 eb       	ldi	r17, 0xB6	; 182
    1560:	e1 2e       	mov	r14, r17
    1562:	f1 2c       	mov	r15, r1
    1564:	00 e0       	ldi	r16, 0x00	; 0
    1566:	10 e0       	ldi	r17, 0x00	; 0
    1568:	94 01       	movw	r18, r8
    156a:	b3 01       	movw	r22, r6
    156c:	a2 01       	movw	r20, r4
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	9a e0       	ldi	r25, 0x0A	; 10
    1572:	26 de       	rcall	.-948    	; 0x11c0 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh>
    1574:	88 23       	and	r24, r24
    1576:	31 f0       	breq	.+12     	; 0x1584 <_Z15erogazioniSaverm6String+0xd6>
    1578:	65 e7       	ldi	r22, 0x75	; 117
    157a:	73 e0       	ldi	r23, 0x03	; 3
    157c:	85 ed       	ldi	r24, 0xD5	; 213
    157e:	9d e0       	ldi	r25, 0x0D	; 13
    1580:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
    1584:	84 01       	movw	r16, r8
    1586:	6e 01       	movw	r12, r28
    1588:	93 e0       	ldi	r25, 0x03	; 3
    158a:	c9 0e       	add	r12, r25
    158c:	d1 1c       	adc	r13, r1
    158e:	57 c0       	rjmp	.+174    	; 0x163e <_Z15erogazioniSaverm6String+0x190>
    1590:	16 eb       	ldi	r17, 0xB6	; 182
    1592:	e1 2e       	mov	r14, r17
    1594:	f1 2c       	mov	r15, r1
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	10 e0       	ldi	r17, 0x00	; 0
    159a:	a3 01       	movw	r20, r6
    159c:	92 01       	movw	r18, r4
    159e:	63 e0       	ldi	r22, 0x03	; 3
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	9a e0       	ldi	r25, 0x0A	; 10
    15a4:	0e 94 25 32 	call	0x644a	; 0x644a <_ZN8SPIFlash5_prepEhmm>
    15a8:	88 23       	and	r24, r24
    15aa:	d1 f0       	breq	.+52     	; 0x15e0 <_Z15erogazioniSaverm6String+0x132>
    15ac:	2c 98       	cbi	0x05, 4	; 5
    15ae:	63 e0       	ldi	r22, 0x03	; 3
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	9a e0       	ldi	r25, 0x0A	; 10
    15b4:	0e 94 27 31 	call	0x624e	; 0x624e <_ZN8SPIFlash9_beginSPIEh>
    15b8:	8e 01       	movw	r16, r28
    15ba:	0f 5f       	subi	r16, 0xFF	; 255
    15bc:	1f 4f       	sbci	r17, 0xFF	; 255
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	60 91 1c 0a 	lds	r22, 0x0A1C	; 0x800a1c <__data_end+0x1c>
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	9a e0       	ldi	r25, 0x0A	; 10
    15c8:	0e 94 8f 31 	call	0x631e	; 0x631e <_ZN8SPIFlash9_nextByteEch>
    15cc:	f8 01       	movw	r30, r16
    15ce:	81 93       	st	Z+, r24
    15d0:	8f 01       	movw	r16, r30
    15d2:	8e 16       	cp	r8, r30
    15d4:	9f 06       	cpc	r9, r31
    15d6:	99 f7       	brne	.-26     	; 0x15be <_Z15erogazioniSaverm6String+0x110>
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	9a e0       	ldi	r25, 0x0A	; 10
    15dc:	0e 94 91 31 	call	0x6322	; 0x6322 <_ZN8SPIFlash7_endSPIEv>
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	4e 97       	sbiw	r24, 0x1e	; 30
    15e6:	21 f4       	brne	.+8      	; 0x15f0 <_Z15erogazioniSaverm6String+0x142>
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	9f ef       	ldi	r25, 0xFF	; 255
    15ec:	9a 83       	std	Y+2, r25	; 0x02
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	b6 01       	movw	r22, r12
    15f2:	ce 01       	movw	r24, r28
    15f4:	03 96       	adiw	r24, 0x03	; 3
    15f6:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <_ZN6StringaSERKS_>
    15fa:	8f e1       	ldi	r24, 0x1F	; 31
    15fc:	9e e4       	ldi	r25, 0x4E	; 78
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <_Z15erogazioniSaverm6String+0x150>
    1602:	00 c0       	rjmp	.+0      	; 0x1604 <_Z15erogazioniSaverm6String+0x156>
    1604:	00 00       	nop
    1606:	c3 01       	movw	r24, r6
    1608:	b2 01       	movw	r22, r4
    160a:	0e 94 c1 02 	call	0x582	; 0x582 <_Z16FlasheraseSectorm>
    160e:	ef e1       	ldi	r30, 0x1F	; 31
    1610:	fe e4       	ldi	r31, 0x4E	; 78
    1612:	31 97       	sbiw	r30, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <_Z15erogazioniSaverm6String+0x164>
    1616:	00 c0       	rjmp	.+0      	; 0x1618 <_Z15erogazioniSaverm6String+0x16a>
    1618:	00 00       	nop
    161a:	8b e0       	ldi	r24, 0x0B	; 11
    161c:	a8 2e       	mov	r10, r24
    161e:	cc 24       	eor	r12, r12
    1620:	c3 94       	inc	r12
    1622:	16 eb       	ldi	r17, 0xB6	; 182
    1624:	e1 2e       	mov	r14, r17
    1626:	f1 2c       	mov	r15, r1
    1628:	00 e0       	ldi	r16, 0x00	; 0
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	9e 01       	movw	r18, r28
    162e:	2f 5f       	subi	r18, 0xFF	; 255
    1630:	3f 4f       	sbci	r19, 0xFF	; 255
    1632:	b3 01       	movw	r22, r6
    1634:	a2 01       	movw	r20, r4
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	9a e0       	ldi	r25, 0x0A	; 10
    163a:	c2 dd       	rcall	.-1148   	; 0x11c0 <_ZN8SPIFlash6_writeI10erogazioniEEbmRKT_mbh>
    163c:	a3 cf       	rjmp	.-186    	; 0x1584 <_Z15erogazioniSaverm6String+0xd6>
    163e:	06 50       	subi	r16, 0x06	; 6
    1640:	11 09       	sbc	r17, r1
    1642:	c8 01       	movw	r24, r16
    1644:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    1648:	0c 15       	cp	r16, r12
    164a:	1d 05       	cpc	r17, r13
    164c:	c1 f7       	brne	.-16     	; 0x163e <_Z15erogazioniSaverm6String+0x190>
    164e:	8e 01       	movw	r16, r28
    1650:	03 59       	subi	r16, 0x93	; 147
    1652:	1e 4f       	sbci	r17, 0xFE	; 254
    1654:	f2 e0       	ldi	r31, 0x02	; 2
    1656:	8f 0e       	add	r8, r31
    1658:	91 1c       	adc	r9, r1
    165a:	06 50       	subi	r16, 0x06	; 6
    165c:	11 09       	sbc	r17, r1
    165e:	c8 01       	movw	r24, r16
    1660:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    1664:	08 15       	cp	r16, r8
    1666:	19 05       	cpc	r17, r9
    1668:	c1 f7       	brne	.-16     	; 0x165a <_Z15erogazioniSaverm6String+0x1ac>
    166a:	c4 59       	subi	r28, 0x94	; 148
    166c:	de 4f       	sbci	r29, 0xFE	; 254
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	cf 90       	pop	r12
    1688:	af 90       	pop	r10
    168a:	9f 90       	pop	r9
    168c:	8f 90       	pop	r8
    168e:	7f 90       	pop	r7
    1690:	6f 90       	pop	r6
    1692:	5f 90       	pop	r5
    1694:	4f 90       	pop	r4
    1696:	08 95       	ret

00001698 <_GLOBAL__sub_I_intConsecutivePresses>:
    1698:	8f 92       	push	r8
    169a:	af 92       	push	r10
    169c:	cf 92       	push	r12
    169e:	ef 92       	push	r14
    16a0:	0f 93       	push	r16
    16a2:	00 e0       	ldi	r16, 0x00	; 0
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	89 e7       	ldi	r24, 0x79	; 121
    16ac:	9c e0       	ldi	r25, 0x0C	; 12
    16ae:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN9IPAddressC1Ehhhh>
    16b2:	6f eb       	ldi	r22, 0xBF	; 191
    16b4:	71 e0       	ldi	r23, 0x01	; 1
    16b6:	88 e6       	ldi	r24, 0x68	; 104
    16b8:	9c e0       	ldi	r25, 0x0C	; 12
    16ba:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    16be:	6f eb       	ldi	r22, 0xBF	; 191
    16c0:	71 e0       	ldi	r23, 0x01	; 1
    16c2:	8e e6       	ldi	r24, 0x6E	; 110
    16c4:	9c e0       	ldi	r25, 0x0C	; 12
    16c6:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    16ca:	1f 92       	push	r1
    16cc:	83 e0       	ldi	r24, 0x03	; 3
    16ce:	8f 93       	push	r24
    16d0:	87 e0       	ldi	r24, 0x07	; 7
    16d2:	88 2e       	mov	r8, r24
    16d4:	96 e0       	ldi	r25, 0x06	; 6
    16d6:	a9 2e       	mov	r10, r25
    16d8:	25 e0       	ldi	r18, 0x05	; 5
    16da:	c2 2e       	mov	r12, r18
    16dc:	34 e0       	ldi	r19, 0x04	; 4
    16de:	e3 2e       	mov	r14, r19
    16e0:	21 e0       	ldi	r18, 0x01	; 1
    16e2:	42 e0       	ldi	r20, 0x02	; 2
    16e4:	67 e2       	ldi	r22, 0x27	; 39
    16e6:	86 e4       	ldi	r24, 0x46	; 70
    16e8:	9c e0       	ldi	r25, 0x0C	; 12
    16ea:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
    16ee:	43 e0       	ldi	r20, 0x03	; 3
    16f0:	64 e0       	ldi	r22, 0x04	; 4
    16f2:	8f e2       	ldi	r24, 0x2F	; 47
    16f4:	9c e0       	ldi	r25, 0x0C	; 12
    16f6:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <_ZN14Adafruit_PN532C1Ehh>
    16fa:	6e e7       	ldi	r22, 0x7E	; 126
    16fc:	73 e0       	ldi	r23, 0x03	; 3
    16fe:	89 e2       	ldi	r24, 0x29	; 41
    1700:	9c e0       	ldi	r25, 0x0C	; 12
    1702:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    1706:	6f eb       	ldi	r22, 0xBF	; 191
    1708:	71 e0       	ldi	r23, 0x01	; 1
    170a:	83 e2       	ldi	r24, 0x23	; 35
    170c:	9c e0       	ldi	r25, 0x0C	; 12
    170e:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    1712:	6f eb       	ldi	r22, 0xBF	; 191
    1714:	71 e0       	ldi	r23, 0x01	; 1
    1716:	85 e1       	ldi	r24, 0x15	; 21
    1718:	9c e0       	ldi	r25, 0x0C	; 12
    171a:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    171e:	6f eb       	ldi	r22, 0xBF	; 191
    1720:	71 e0       	ldi	r23, 0x01	; 1
    1722:	81 ef       	ldi	r24, 0xF1	; 241
    1724:	9b e0       	ldi	r25, 0x0B	; 11
    1726:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    172a:	6f eb       	ldi	r22, 0xBF	; 191
    172c:	71 e0       	ldi	r23, 0x01	; 1
    172e:	87 ef       	ldi	r24, 0xF7	; 247
    1730:	9b e0       	ldi	r25, 0x0B	; 11
    1732:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    1736:	6f eb       	ldi	r22, 0xBF	; 191
    1738:	71 e0       	ldi	r23, 0x01	; 1
    173a:	8d ef       	ldi	r24, 0xFD	; 253
    173c:	9b e0       	ldi	r25, 0x0B	; 11
    173e:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    1742:	6f eb       	ldi	r22, 0xBF	; 191
    1744:	71 e0       	ldi	r23, 0x01	; 1
    1746:	83 e0       	ldi	r24, 0x03	; 3
    1748:	9c e0       	ldi	r25, 0x0C	; 12
    174a:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    174e:	6f eb       	ldi	r22, 0xBF	; 191
    1750:	71 e0       	ldi	r23, 0x01	; 1
    1752:	89 e0       	ldi	r24, 0x09	; 9
    1754:	9c e0       	ldi	r25, 0x0C	; 12
    1756:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    175a:	6f eb       	ldi	r22, 0xBF	; 191
    175c:	71 e0       	ldi	r23, 0x01	; 1
    175e:	8f e0       	ldi	r24, 0x0F	; 15
    1760:	9c e0       	ldi	r25, 0x0C	; 12
    1762:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    1766:	63 e7       	ldi	r22, 0x73	; 115
    1768:	73 e0       	ldi	r23, 0x03	; 3
    176a:	8b ee       	ldi	r24, 0xEB	; 235
    176c:	9b e0       	ldi	r25, 0x0B	; 11
    176e:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    1772:	63 e7       	ldi	r22, 0x73	; 115
    1774:	73 e0       	ldi	r23, 0x03	; 3
    1776:	8f ed       	ldi	r24, 0xDF	; 223
    1778:	9b e0       	ldi	r25, 0x0B	; 11
    177a:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    177e:	63 e7       	ldi	r22, 0x73	; 115
    1780:	73 e0       	ldi	r23, 0x03	; 3
    1782:	85 ee       	ldi	r24, 0xE5	; 229
    1784:	9b e0       	ldi	r25, 0x0B	; 11
    1786:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    178a:	6f eb       	ldi	r22, 0xBF	; 191
    178c:	71 e0       	ldi	r23, 0x01	; 1
    178e:	89 ed       	ldi	r24, 0xD9	; 217
    1790:	9b e0       	ldi	r25, 0x0B	; 11
    1792:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    1796:	6f eb       	ldi	r22, 0xBF	; 191
    1798:	71 e0       	ldi	r23, 0x01	; 1
    179a:	83 ed       	ldi	r24, 0xD3	; 211
    179c:	9b e0       	ldi	r25, 0x0B	; 11
    179e:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    17a2:	63 e7       	ldi	r22, 0x73	; 115
    17a4:	73 e0       	ldi	r23, 0x03	; 3
    17a6:	8b eb       	ldi	r24, 0xBB	; 187
    17a8:	9b e0       	ldi	r25, 0x0B	; 11
    17aa:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    17ae:	63 e7       	ldi	r22, 0x73	; 115
    17b0:	73 e0       	ldi	r23, 0x03	; 3
    17b2:	81 ec       	ldi	r24, 0xC1	; 193
    17b4:	9b e0       	ldi	r25, 0x0B	; 11
    17b6:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    17ba:	63 e7       	ldi	r22, 0x73	; 115
    17bc:	73 e0       	ldi	r23, 0x03	; 3
    17be:	87 ec       	ldi	r24, 0xC7	; 199
    17c0:	9b e0       	ldi	r25, 0x0B	; 11
    17c2:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    17c6:	63 e7       	ldi	r22, 0x73	; 115
    17c8:	73 e0       	ldi	r23, 0x03	; 3
    17ca:	8d ec       	ldi	r24, 0xCD	; 205
    17cc:	9b e0       	ldi	r25, 0x0B	; 11
    17ce:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    17d2:	09 e0       	ldi	r16, 0x09	; 9
    17d4:	25 e0       	ldi	r18, 0x05	; 5
    17d6:	48 ea       	ldi	r20, 0xA8	; 168
    17d8:	60 ec       	ldi	r22, 0xC0	; 192
    17da:	81 e5       	ldi	r24, 0x51	; 81
    17dc:	9b e0       	ldi	r25, 0x0B	; 11
    17de:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN9IPAddressC1Ehhhh>
    17e2:	05 e1       	ldi	r16, 0x15	; 21
    17e4:	21 e0       	ldi	r18, 0x01	; 1
    17e6:	48 ea       	ldi	r20, 0xA8	; 168
    17e8:	60 ec       	ldi	r22, 0xC0	; 192
    17ea:	8b e4       	ldi	r24, 0x4B	; 75
    17ec:	9b e0       	ldi	r25, 0x0B	; 11
    17ee:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN9IPAddressC1Ehhhh>
    17f2:	01 e0       	ldi	r16, 0x01	; 1
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	48 ea       	ldi	r20, 0xA8	; 168
    17f8:	60 ec       	ldi	r22, 0xC0	; 192
    17fa:	85 e4       	ldi	r24, 0x45	; 69
    17fc:	9b e0       	ldi	r25, 0x0B	; 11
    17fe:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN9IPAddressC1Ehhhh>
    1802:	00 e0       	ldi	r16, 0x00	; 0
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	4f ef       	ldi	r20, 0xFF	; 255
    1808:	6f ef       	ldi	r22, 0xFF	; 255
    180a:	8f e3       	ldi	r24, 0x3F	; 63
    180c:	9b e0       	ldi	r25, 0x0B	; 11
    180e:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN9IPAddressC1Ehhhh>
    1812:	82 e3       	ldi	r24, 0x32	; 50
    1814:	9b e0       	ldi	r25, 0x0B	; 11
    1816:	0e 94 4e 24 	call	0x489c	; 0x489c <_ZN14EthernetClientC1Ev>
    181a:	85 e2       	ldi	r24, 0x25	; 37
    181c:	9b e0       	ldi	r25, 0x0B	; 11
    181e:	0e 94 4e 24 	call	0x489c	; 0x489c <_ZN14EthernetClientC1Ev>
    1822:	69 e1       	ldi	r22, 0x19	; 25
    1824:	79 e7       	ldi	r23, 0x79	; 121
    1826:	8f e1       	ldi	r24, 0x1F	; 31
    1828:	9b e0       	ldi	r25, 0x0B	; 11
    182a:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN14EthernetServerC1Ej>
    182e:	82 e1       	ldi	r24, 0x12	; 18
    1830:	9b e0       	ldi	r25, 0x0B	; 11
    1832:	0e 94 4e 24 	call	0x489c	; 0x489c <_ZN14EthernetClientC1Ev>
    1836:	86 e0       	ldi	r24, 0x06	; 6
    1838:	9b e0       	ldi	r25, 0x0B	; 11
    183a:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <_ZN13DS3231M_ClassC1Ev>
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	50 e0       	ldi	r21, 0x00	; 0
    1842:	ba 01       	movw	r22, r20
    1844:	84 ef       	ldi	r24, 0xF4	; 244
    1846:	9a e0       	ldi	r25, 0x0A	; 10
    1848:	0e 94 bb 1c 	call	0x3976	; 0x3976 <_ZN8DateTimeC1Em>
    184c:	6f eb       	ldi	r22, 0xBF	; 191
    184e:	71 e0       	ldi	r23, 0x01	; 1
    1850:	8a ee       	ldi	r24, 0xEA	; 234
    1852:	9a e0       	ldi	r25, 0x0A	; 10
    1854:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    1858:	6f eb       	ldi	r22, 0xBF	; 191
    185a:	71 e0       	ldi	r23, 0x01	; 1
    185c:	84 ee       	ldi	r24, 0xE4	; 228
    185e:	9a e0       	ldi	r25, 0x0A	; 10
    1860:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	64 e0       	ldi	r22, 0x04	; 4
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	9a e0       	ldi	r25, 0x0A	; 10
    186e:	0f 91       	pop	r16
    1870:	ef 90       	pop	r14
    1872:	cf 90       	pop	r12
    1874:	af 90       	pop	r10
    1876:	8f 90       	pop	r8
    1878:	0c 94 c4 2e 	jmp	0x5d88	; 0x5d88 <_ZN8SPIFlashC1Eh>

0000187c <_GLOBAL__sub_D_intConsecutivePresses>:
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	84 ee       	ldi	r24, 0xE4	; 228
    1882:	9a e0       	ldi	r25, 0x0A	; 10
    1884:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    1888:	8a ee       	ldi	r24, 0xEA	; 234
    188a:	9a e0       	ldi	r25, 0x0A	; 10
    188c:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    1890:	86 e0       	ldi	r24, 0x06	; 6
    1892:	9b e0       	ldi	r25, 0x0B	; 11
    1894:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <_ZN13DS3231M_ClassD1Ev>
    1898:	8d ec       	ldi	r24, 0xCD	; 205
    189a:	9b e0       	ldi	r25, 0x0B	; 11
    189c:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    18a0:	87 ec       	ldi	r24, 0xC7	; 199
    18a2:	9b e0       	ldi	r25, 0x0B	; 11
    18a4:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    18a8:	81 ec       	ldi	r24, 0xC1	; 193
    18aa:	9b e0       	ldi	r25, 0x0B	; 11
    18ac:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    18b0:	8b eb       	ldi	r24, 0xBB	; 187
    18b2:	9b e0       	ldi	r25, 0x0B	; 11
    18b4:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    18b8:	83 ed       	ldi	r24, 0xD3	; 211
    18ba:	9b e0       	ldi	r25, 0x0B	; 11
    18bc:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    18c0:	89 ed       	ldi	r24, 0xD9	; 217
    18c2:	9b e0       	ldi	r25, 0x0B	; 11
    18c4:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    18c8:	85 ee       	ldi	r24, 0xE5	; 229
    18ca:	9b e0       	ldi	r25, 0x0B	; 11
    18cc:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    18d0:	8f ed       	ldi	r24, 0xDF	; 223
    18d2:	9b e0       	ldi	r25, 0x0B	; 11
    18d4:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    18d8:	8b ee       	ldi	r24, 0xEB	; 235
    18da:	9b e0       	ldi	r25, 0x0B	; 11
    18dc:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    18e0:	c5 e1       	ldi	r28, 0x15	; 21
    18e2:	dc e0       	ldi	r29, 0x0C	; 12
    18e4:	26 97       	sbiw	r28, 0x06	; 6
    18e6:	ce 01       	movw	r24, r28
    18e8:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    18ec:	8b e0       	ldi	r24, 0x0B	; 11
    18ee:	c1 3f       	cpi	r28, 0xF1	; 241
    18f0:	d8 07       	cpc	r29, r24
    18f2:	c1 f7       	brne	.-16     	; 0x18e4 <_GLOBAL__sub_D_intConsecutivePresses+0x68>
    18f4:	85 e1       	ldi	r24, 0x15	; 21
    18f6:	9c e0       	ldi	r25, 0x0C	; 12
    18f8:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    18fc:	83 e2       	ldi	r24, 0x23	; 35
    18fe:	9c e0       	ldi	r25, 0x0C	; 12
    1900:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    1904:	89 e2       	ldi	r24, 0x29	; 41
    1906:	9c e0       	ldi	r25, 0x0C	; 12
    1908:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    190c:	8e e6       	ldi	r24, 0x6E	; 110
    190e:	9c e0       	ldi	r25, 0x0C	; 12
    1910:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    1914:	88 e6       	ldi	r24, 0x68	; 104
    1916:	9c e0       	ldi	r25, 0x0C	; 12
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	0c 94 b3 3c 	jmp	0x7966	; 0x7966 <_ZN6StringD1Ev>

00001920 <_Z19InizializzaEthernetv>:
    1920:	cf 92       	push	r12
    1922:	df 92       	push	r13
    1924:	ef 92       	push	r14
    1926:	ff 92       	push	r15
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	68 97       	sbiw	r28, 0x18	; 24
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	8f ed       	ldi	r24, 0xDF	; 223
    1942:	c8 2e       	mov	r12, r24
    1944:	89 e0       	ldi	r24, 0x09	; 9
    1946:	d8 2e       	mov	r13, r24
    1948:	da 82       	std	Y+2, r13	; 0x02
    194a:	c9 82       	std	Y+1, r12	; 0x01
    194c:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <subnet+0x2>
    1950:	90 91 42 0b 	lds	r25, 0x0B42	; 0x800b42 <subnet+0x3>
    1954:	a0 91 43 0b 	lds	r26, 0x0B43	; 0x800b43 <subnet+0x4>
    1958:	b0 91 44 0b 	lds	r27, 0x0B44	; 0x800b44 <subnet+0x5>
    195c:	8b 83       	std	Y+3, r24	; 0x03
    195e:	9c 83       	std	Y+4, r25	; 0x04
    1960:	ad 83       	std	Y+5, r26	; 0x05
    1962:	be 83       	std	Y+6, r27	; 0x06
    1964:	d8 86       	std	Y+8, r13	; 0x08
    1966:	cf 82       	std	Y+7, r12	; 0x07
    1968:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <gateway+0x2>
    196c:	90 91 48 0b 	lds	r25, 0x0B48	; 0x800b48 <gateway+0x3>
    1970:	a0 91 49 0b 	lds	r26, 0x0B49	; 0x800b49 <gateway+0x4>
    1974:	b0 91 4a 0b 	lds	r27, 0x0B4A	; 0x800b4a <gateway+0x5>
    1978:	89 87       	std	Y+9, r24	; 0x09
    197a:	9a 87       	std	Y+10, r25	; 0x0a
    197c:	ab 87       	std	Y+11, r26	; 0x0b
    197e:	bc 87       	std	Y+12, r27	; 0x0c
    1980:	de 86       	std	Y+14, r13	; 0x0e
    1982:	cd 86       	std	Y+13, r12	; 0x0d
    1984:	80 91 4d 0b 	lds	r24, 0x0B4D	; 0x800b4d <myDns+0x2>
    1988:	90 91 4e 0b 	lds	r25, 0x0B4E	; 0x800b4e <myDns+0x3>
    198c:	a0 91 4f 0b 	lds	r26, 0x0B4F	; 0x800b4f <myDns+0x4>
    1990:	b0 91 50 0b 	lds	r27, 0x0B50	; 0x800b50 <myDns+0x5>
    1994:	8f 87       	std	Y+15, r24	; 0x0f
    1996:	98 8b       	std	Y+16, r25	; 0x10
    1998:	a9 8b       	std	Y+17, r26	; 0x11
    199a:	ba 8b       	std	Y+18, r27	; 0x12
    199c:	6c e2       	ldi	r22, 0x2C	; 44
    199e:	71 e0       	ldi	r23, 0x01	; 1
    19a0:	ce 01       	movw	r24, r28
    19a2:	43 96       	adiw	r24, 0x13	; 19
    19a4:	0e 94 b6 39 	call	0x736c	; 0x736c <_ZN9IPAddressC1EPKh>
    19a8:	ce 01       	movw	r24, r28
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	7c 01       	movw	r14, r24
    19ae:	8e 01       	movw	r16, r28
    19b0:	09 5f       	subi	r16, 0xF9	; 249
    19b2:	1f 4f       	sbci	r17, 0xFF	; 255
    19b4:	9e 01       	movw	r18, r28
    19b6:	23 5f       	subi	r18, 0xF3	; 243
    19b8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ba:	ae 01       	movw	r20, r28
    19bc:	4d 5e       	subi	r20, 0xED	; 237
    19be:	5f 4f       	sbci	r21, 0xFF	; 255
    19c0:	66 e2       	ldi	r22, 0x26	; 38
    19c2:	71 e0       	ldi	r23, 0x01	; 1
    19c4:	8b ec       	ldi	r24, 0xCB	; 203
    19c6:	9c e0       	ldi	r25, 0x0C	; 12
    19c8:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
    19cc:	8f e1       	ldi	r24, 0x1F	; 31
    19ce:	9b e0       	ldi	r25, 0x0B	; 11
    19d0:	0e 94 5d 25 	call	0x4aba	; 0x4aba <_ZN14EthernetServer5beginEv>
    19d4:	da 82       	std	Y+2, r13	; 0x02
    19d6:	c9 82       	std	Y+1, r12	; 0x01
    19d8:	80 91 53 0b 	lds	r24, 0x0B53	; 0x800b53 <servizio+0x2>
    19dc:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <servizio+0x3>
    19e0:	a0 91 55 0b 	lds	r26, 0x0B55	; 0x800b55 <servizio+0x4>
    19e4:	b0 91 56 0b 	lds	r27, 0x0B56	; 0x800b56 <servizio+0x5>
    19e8:	8b 83       	std	Y+3, r24	; 0x03
    19ea:	9c 83       	std	Y+4, r25	; 0x04
    19ec:	ad 83       	std	Y+5, r26	; 0x05
    19ee:	be 83       	std	Y+6, r27	; 0x06
    19f0:	49 ef       	ldi	r20, 0xF9	; 249
    19f2:	5a e2       	ldi	r21, 0x2A	; 42
    19f4:	b7 01       	movw	r22, r14
    19f6:	85 e2       	ldi	r24, 0x25	; 37
    19f8:	9b e0       	ldi	r25, 0x0B	; 11
    19fa:	0e 94 df 24 	call	0x49be	; 0x49be <_ZN14EthernetClient7connectE9IPAddressj>
    19fe:	89 2b       	or	r24, r25
    1a00:	81 f0       	breq	.+32     	; 0x1a22 <_Z19InizializzaEthernetv+0x102>
    1a02:	67 e8       	ldi	r22, 0x87	; 135
    1a04:	73 e0       	ldi	r23, 0x03	; 3
    1a06:	85 ed       	ldi	r24, 0xD5	; 213
    1a08:	9d e0       	ldi	r25, 0x0D	; 13
    1a0a:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
    1a0e:	85 e2       	ldi	r24, 0x25	; 37
    1a10:	9b e0       	ldi	r25, 0x0B	; 11
    1a12:	0e 94 7e 24 	call	0x48fc	; 0x48fc <_ZN14EthernetClient9connectedEv>
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	90 93 20 0c 	sts	0x0C20, r25	; 0x800c20 <Connected+0x1>
    1a1c:	80 93 1f 0c 	sts	0x0C1F, r24	; 0x800c1f <Connected>
    1a20:	06 c0       	rjmp	.+12     	; 0x1a2e <_Z19InizializzaEthernetv+0x10e>
    1a22:	6a e9       	ldi	r22, 0x9A	; 154
    1a24:	73 e0       	ldi	r23, 0x03	; 3
    1a26:	85 ed       	ldi	r24, 0xD5	; 213
    1a28:	9d e0       	ldi	r25, 0x0D	; 13
    1a2a:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
    1a2e:	68 96       	adiw	r28, 0x18	; 24
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	ff 90       	pop	r15
    1a44:	ef 90       	pop	r14
    1a46:	df 90       	pop	r13
    1a48:	cf 90       	pop	r12
    1a4a:	08 95       	ret

00001a4c <setup>:
    1a4c:	cf 92       	push	r12
    1a4e:	df 92       	push	r13
    1a50:	ef 92       	push	r14
    1a52:	ff 92       	push	r15
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <setup+0x12>
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <setup+0x14>
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <setup+0x16>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	6e ea       	ldi	r22, 0xAE	; 174
    1a68:	73 e0       	ldi	r23, 0x03	; 3
    1a6a:	85 ed       	ldi	r24, 0xD5	; 213
    1a6c:	9d e0       	ldi	r25, 0x0D	; 13
    1a6e:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
    1a72:	3c 9a       	sbi	0x07, 4	; 7
    1a74:	8f e1       	ldi	r24, 0x1F	; 31
    1a76:	9e e4       	ldi	r25, 0x4E	; 78
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <setup+0x2c>
    1a7c:	00 c0       	rjmp	.+0      	; 0x1a7e <setup+0x32>
    1a7e:	00 00       	nop
    1a80:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    1a84:	8f e1       	ldi	r24, 0x1F	; 31
    1a86:	9e e4       	ldi	r25, 0x4E	; 78
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <setup+0x3c>
    1a8c:	00 c0       	rjmp	.+0      	; 0x1a8e <setup+0x42>
    1a8e:	00 00       	nop
    1a90:	24 9a       	sbi	0x04, 4	; 4
    1a92:	8f e1       	ldi	r24, 0x1F	; 31
    1a94:	9e e4       	ldi	r25, 0x4E	; 78
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <setup+0x4a>
    1a9a:	00 c0       	rjmp	.+0      	; 0x1a9c <setup+0x50>
    1a9c:	00 00       	nop
    1a9e:	2c 9a       	sbi	0x05, 4	; 5
    1aa0:	8f e1       	ldi	r24, 0x1F	; 31
    1aa2:	9e e4       	ldi	r25, 0x4E	; 78
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <setup+0x58>
    1aa8:	00 c0       	rjmp	.+0      	; 0x1aaa <setup+0x5e>
    1aaa:	00 00       	nop
    1aac:	3f 9a       	sbi	0x07, 7	; 7
    1aae:	0f 9a       	sbi	0x01, 7	; 1
    1ab0:	8f e3       	ldi	r24, 0x3F	; 63
    1ab2:	9c e9       	ldi	r25, 0x9C	; 156
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <setup+0x68>
    1ab8:	00 c0       	rjmp	.+0      	; 0x1aba <setup+0x6e>
    1aba:	00 00       	nop
    1abc:	47 9a       	sbi	0x08, 7	; 8
    1abe:	8f e3       	ldi	r24, 0x3F	; 63
    1ac0:	9c e9       	ldi	r25, 0x9C	; 156
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <setup+0x76>
    1ac6:	00 c0       	rjmp	.+0      	; 0x1ac8 <setup+0x7c>
    1ac8:	00 00       	nop
    1aca:	17 9a       	sbi	0x02, 7	; 2
    1acc:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	44 e0       	ldi	r20, 0x04	; 4
    1ad4:	64 e1       	ldi	r22, 0x14	; 20
    1ad6:	86 e4       	ldi	r24, 0x46	; 70
    1ad8:	9c e0       	ldi	r25, 0x0C	; 12
    1ada:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN17LiquidCrystal_I2C5beginEhhh>
    1ade:	86 e4       	ldi	r24, 0x46	; 70
    1ae0:	9c e0       	ldi	r25, 0x0C	; 12
    1ae2:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN3LCD9backlightEv>
    1ae6:	9f ef       	ldi	r25, 0xFF	; 255
    1ae8:	24 e3       	ldi	r18, 0x34	; 52
    1aea:	8c e0       	ldi	r24, 0x0C	; 12
    1aec:	91 50       	subi	r25, 0x01	; 1
    1aee:	20 40       	sbci	r18, 0x00	; 0
    1af0:	80 40       	sbci	r24, 0x00	; 0
    1af2:	e1 f7       	brne	.-8      	; 0x1aec <setup+0xa0>
    1af4:	00 c0       	rjmp	.+0      	; 0x1af6 <setup+0xaa>
    1af6:	00 00       	nop
    1af8:	86 e4       	ldi	r24, 0x46	; 70
    1afa:	9c e0       	ldi	r25, 0x0C	; 12
    1afc:	0e 94 75 2c 	call	0x58ea	; 0x58ea <_ZN3LCD11noBacklightEv>
    1b00:	9f ef       	ldi	r25, 0xFF	; 255
    1b02:	24 e3       	ldi	r18, 0x34	; 52
    1b04:	8c e0       	ldi	r24, 0x0C	; 12
    1b06:	91 50       	subi	r25, 0x01	; 1
    1b08:	20 40       	sbci	r18, 0x00	; 0
    1b0a:	80 40       	sbci	r24, 0x00	; 0
    1b0c:	e1 f7       	brne	.-8      	; 0x1b06 <setup+0xba>
    1b0e:	00 c0       	rjmp	.+0      	; 0x1b10 <setup+0xc4>
    1b10:	00 00       	nop
    1b12:	86 e4       	ldi	r24, 0x46	; 70
    1b14:	9c e0       	ldi	r25, 0x0C	; 12
    1b16:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN3LCD9backlightEv>
    1b1a:	9f ef       	ldi	r25, 0xFF	; 255
    1b1c:	24 e3       	ldi	r18, 0x34	; 52
    1b1e:	8c e0       	ldi	r24, 0x0C	; 12
    1b20:	91 50       	subi	r25, 0x01	; 1
    1b22:	20 40       	sbci	r18, 0x00	; 0
    1b24:	80 40       	sbci	r24, 0x00	; 0
    1b26:	e1 f7       	brne	.-8      	; 0x1b20 <setup+0xd4>
    1b28:	00 c0       	rjmp	.+0      	; 0x1b2a <setup+0xde>
    1b2a:	00 00       	nop
    1b2c:	86 e4       	ldi	r24, 0x46	; 70
    1b2e:	9c e0       	ldi	r25, 0x0C	; 12
    1b30:	0e 94 75 2c 	call	0x58ea	; 0x58ea <_ZN3LCD11noBacklightEv>
    1b34:	9f ef       	ldi	r25, 0xFF	; 255
    1b36:	24 e3       	ldi	r18, 0x34	; 52
    1b38:	8c e0       	ldi	r24, 0x0C	; 12
    1b3a:	91 50       	subi	r25, 0x01	; 1
    1b3c:	20 40       	sbci	r18, 0x00	; 0
    1b3e:	80 40       	sbci	r24, 0x00	; 0
    1b40:	e1 f7       	brne	.-8      	; 0x1b3a <setup+0xee>
    1b42:	00 c0       	rjmp	.+0      	; 0x1b44 <setup+0xf8>
    1b44:	00 00       	nop
    1b46:	42 e3       	ldi	r20, 0x32	; 50
    1b48:	51 e0       	ldi	r21, 0x01	; 1
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	86 e4       	ldi	r24, 0x46	; 70
    1b4e:	9c e0       	ldi	r25, 0x0C	; 12
    1b50:	0e 94 53 2d 	call	0x5aa6	; 0x5aa6 <_ZN3LCD10createCharEhPh>
    1b54:	9f ef       	ldi	r25, 0xFF	; 255
    1b56:	29 ef       	ldi	r18, 0xF9	; 249
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	91 50       	subi	r25, 0x01	; 1
    1b5c:	20 40       	sbci	r18, 0x00	; 0
    1b5e:	80 40       	sbci	r24, 0x00	; 0
    1b60:	e1 f7       	brne	.-8      	; 0x1b5a <setup+0x10e>
    1b62:	00 c0       	rjmp	.+0      	; 0x1b64 <setup+0x118>
    1b64:	00 00       	nop
    1b66:	86 e4       	ldi	r24, 0x46	; 70
    1b68:	9c e0       	ldi	r25, 0x0C	; 12
    1b6a:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN3LCD9backlightEv>
    1b6e:	0b eb       	ldi	r16, 0xBB	; 187
    1b70:	1b e0       	ldi	r17, 0x0B	; 11
    1b72:	6f eb       	ldi	r22, 0xBF	; 191
    1b74:	71 e0       	ldi	r23, 0x01	; 1
    1b76:	c8 01       	movw	r24, r16
    1b78:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    1b7c:	0a 5f       	subi	r16, 0xFA	; 250
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	9b e0       	ldi	r25, 0x0B	; 11
    1b82:	03 3d       	cpi	r16, 0xD3	; 211
    1b84:	19 07       	cpc	r17, r25
    1b86:	a9 f7       	brne	.-22     	; 0x1b72 <setup+0x126>
    1b88:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
    1b8c:	8f e2       	ldi	r24, 0x2F	; 47
    1b8e:	9c e0       	ldi	r25, 0x0C	; 12
    1b90:	0e 94 92 1a 	call	0x3524	; 0x3524 <_ZN14Adafruit_PN5325beginEv>
    1b94:	2f ef       	ldi	r18, 0xFF	; 255
    1b96:	80 e7       	ldi	r24, 0x70	; 112
    1b98:	92 e0       	ldi	r25, 0x02	; 2
    1b9a:	21 50       	subi	r18, 0x01	; 1
    1b9c:	80 40       	sbci	r24, 0x00	; 0
    1b9e:	90 40       	sbci	r25, 0x00	; 0
    1ba0:	e1 f7       	brne	.-8      	; 0x1b9a <setup+0x14e>
    1ba2:	00 c0       	rjmp	.+0      	; 0x1ba4 <setup+0x158>
    1ba4:	00 00       	nop
    1ba6:	8f e2       	ldi	r24, 0x2F	; 47
    1ba8:	9c e0       	ldi	r25, 0x0C	; 12
    1baa:	0e 94 df 1a 	call	0x35be	; 0x35be <_ZN14Adafruit_PN53218getFirmwareVersionEv>
    1bae:	6b 01       	movw	r12, r22
    1bb0:	7c 01       	movw	r14, r24
    1bb2:	67 2b       	or	r22, r23
    1bb4:	68 2b       	or	r22, r24
    1bb6:	69 2b       	or	r22, r25
    1bb8:	69 f5       	brne	.+90     	; 0x1c14 <setup+0x1c8>
    1bba:	63 ec       	ldi	r22, 0xC3	; 195
    1bbc:	73 e0       	ldi	r23, 0x03	; 3
    1bbe:	85 ed       	ldi	r24, 0xD5	; 213
    1bc0:	9d e0       	ldi	r25, 0x0D	; 13
    1bc2:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
    1bc6:	86 e4       	ldi	r24, 0x46	; 70
    1bc8:	9c e0       	ldi	r25, 0x0C	; 12
    1bca:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN3LCD9backlightEv>
    1bce:	2f ef       	ldi	r18, 0xFF	; 255
    1bd0:	84 e3       	ldi	r24, 0x34	; 52
    1bd2:	9c e0       	ldi	r25, 0x0C	; 12
    1bd4:	21 50       	subi	r18, 0x01	; 1
    1bd6:	80 40       	sbci	r24, 0x00	; 0
    1bd8:	90 40       	sbci	r25, 0x00	; 0
    1bda:	e1 f7       	brne	.-8      	; 0x1bd4 <setup+0x188>
    1bdc:	00 c0       	rjmp	.+0      	; 0x1bde <setup+0x192>
    1bde:	00 00       	nop
    1be0:	86 e4       	ldi	r24, 0x46	; 70
    1be2:	9c e0       	ldi	r25, 0x0C	; 12
    1be4:	0e 94 85 2c 	call	0x590a	; 0x590a <_ZN3LCD5clearEv>
    1be8:	6c ed       	ldi	r22, 0xDC	; 220
    1bea:	73 e0       	ldi	r23, 0x03	; 3
    1bec:	86 e4       	ldi	r24, 0x46	; 70
    1bee:	9c e0       	ldi	r25, 0x0C	; 12
    1bf0:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
    1bf4:	2f ef       	ldi	r18, 0xFF	; 255
    1bf6:	87 ea       	ldi	r24, 0xA7	; 167
    1bf8:	91 e6       	ldi	r25, 0x61	; 97
    1bfa:	21 50       	subi	r18, 0x01	; 1
    1bfc:	80 40       	sbci	r24, 0x00	; 0
    1bfe:	90 40       	sbci	r25, 0x00	; 0
    1c00:	e1 f7       	brne	.-8      	; 0x1bfa <setup+0x1ae>
    1c02:	00 c0       	rjmp	.+0      	; 0x1c04 <setup+0x1b8>
    1c04:	00 00       	nop
    1c06:	66 ef       	ldi	r22, 0xF6	; 246
    1c08:	73 e0       	ldi	r23, 0x03	; 3
    1c0a:	89 e2       	ldi	r24, 0x29	; 41
    1c0c:	9c e0       	ldi	r25, 0x0C	; 12
    1c0e:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    1c12:	06 c0       	rjmp	.+12     	; 0x1c20 <setup+0x1d4>
    1c14:	69 e0       	ldi	r22, 0x09	; 9
    1c16:	74 e0       	ldi	r23, 0x04	; 4
    1c18:	85 ed       	ldi	r24, 0xD5	; 213
    1c1a:	9d e0       	ldi	r25, 0x0D	; 13
    1c1c:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
    1c20:	6e e1       	ldi	r22, 0x1E	; 30
    1c22:	74 e0       	ldi	r23, 0x04	; 4
    1c24:	85 ed       	ldi	r24, 0xD5	; 213
    1c26:	9d e0       	ldi	r25, 0x0D	; 13
    1c28:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
    1c2c:	4f 2d       	mov	r20, r15
    1c2e:	55 27       	eor	r21, r21
    1c30:	66 27       	eor	r22, r22
    1c32:	77 27       	eor	r23, r23
    1c34:	20 e1       	ldi	r18, 0x10	; 16
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	85 ed       	ldi	r24, 0xD5	; 213
    1c3a:	9d e0       	ldi	r25, 0x0D	; 13
    1c3c:	0e 94 ed 3a 	call	0x75da	; 0x75da <_ZN5Print7printlnEmi>
    1c40:	6d e2       	ldi	r22, 0x2D	; 45
    1c42:	74 e0       	ldi	r23, 0x04	; 4
    1c44:	85 ed       	ldi	r24, 0xD5	; 213
    1c46:	9d e0       	ldi	r25, 0x0D	; 13
    1c48:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
    1c4c:	4e 2d       	mov	r20, r14
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	2a e0       	ldi	r18, 0x0A	; 10
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	85 ed       	ldi	r24, 0xD5	; 213
    1c5a:	9d e0       	ldi	r25, 0x0D	; 13
    1c5c:	0e 94 cb 3a 	call	0x7596	; 0x7596 <_ZN5Print5printEmi>
    1c60:	6e e2       	ldi	r22, 0x2E	; 46
    1c62:	85 ed       	ldi	r24, 0xD5	; 213
    1c64:	9d e0       	ldi	r25, 0x0D	; 13
    1c66:	0e 94 4a 3a 	call	0x7494	; 0x7494 <_ZN5Print5printEc>
    1c6a:	4d 2d       	mov	r20, r13
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	2a e0       	ldi	r18, 0x0A	; 10
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	85 ed       	ldi	r24, 0xD5	; 213
    1c78:	9d e0       	ldi	r25, 0x0D	; 13
    1c7a:	0e 94 ed 3a 	call	0x75da	; 0x75da <_ZN5Print7printlnEmi>
    1c7e:	6f ef       	ldi	r22, 0xFF	; 255
    1c80:	8f e2       	ldi	r24, 0x2F	; 47
    1c82:	9c e0       	ldi	r25, 0x0C	; 12
    1c84:	0e 94 55 1b 	call	0x36aa	; 0x36aa <_ZN14Adafruit_PN53227setPassiveActivationRetriesEh>
    1c88:	8f e2       	ldi	r24, 0x2F	; 47
    1c8a:	9c e0       	ldi	r25, 0x0C	; 12
    1c8c:	0e 94 27 1b 	call	0x364e	; 0x364e <_ZN14Adafruit_PN5329SAMConfigEv>
    1c90:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
    1c94:	2c 98       	cbi	0x05, 4	; 5
    1c96:	60 e0       	ldi	r22, 0x00	; 0
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	9a e0       	ldi	r25, 0x0A	; 10
    1c9c:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <_ZN8SPIFlash5errorEb>
    1ca0:	88 23       	and	r24, r24
    1ca2:	61 f0       	breq	.+24     	; 0x1cbc <setup+0x270>
    1ca4:	61 e0       	ldi	r22, 0x01	; 1
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	9a e0       	ldi	r25, 0x0A	; 10
    1caa:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <_ZN8SPIFlash5errorEb>
    1cae:	4a e0       	ldi	r20, 0x0A	; 10
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	68 2f       	mov	r22, r24
    1cb4:	85 ed       	ldi	r24, 0xD5	; 213
    1cb6:	9d e0       	ldi	r25, 0x0D	; 13
    1cb8:	0e 94 dd 3a 	call	0x75ba	; 0x75ba <_ZN5Print7printlnEhi>
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	ba 01       	movw	r22, r20
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	9a e0       	ldi	r25, 0x0A	; 10
    1cc6:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <_ZN8SPIFlash5beginEm>
    1cca:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z5getIDv>
    1cce:	88 23       	and	r24, r24
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <setup+0x288>
    1cd2:	43 c0       	rjmp	.+134    	; 0x1d5a <setup+0x30e>
    1cd4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
    1cd8:	87 e0       	ldi	r24, 0x07	; 7
    1cda:	0e 94 09 02 	call	0x412	; 0x412 <_Z8printTabh>
    1cde:	6c e3       	ldi	r22, 0x3C	; 60
    1ce0:	74 e0       	ldi	r23, 0x04	; 4
    1ce2:	85 ed       	ldi	r24, 0xD5	; 213
    1ce4:	9d e0       	ldi	r25, 0x0D	; 13
    1ce6:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
    1cea:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
    1cee:	83 e0       	ldi	r24, 0x03	; 3
    1cf0:	0e 94 09 02 	call	0x412	; 0x412 <_Z8printTabh>
    1cf4:	61 e5       	ldi	r22, 0x51	; 81
    1cf6:	74 e0       	ldi	r23, 0x04	; 4
    1cf8:	85 ed       	ldi	r24, 0xD5	; 213
    1cfa:	9d e0       	ldi	r25, 0x0D	; 13
    1cfc:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
    1d00:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	0e 94 09 02 	call	0x412	; 0x412 <_Z8printTabh>
    1d0a:	0e 94 4b 03 	call	0x696	; 0x696 <_Z12FlashpowerUpv>
    1d0e:	85 ed       	ldi	r24, 0xD5	; 213
    1d10:	9d e0       	ldi	r25, 0x0D	; 13
    1d12:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <_ZN5Print7printlnEv>
    1d16:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z13eraseChipTestv>
    1d1a:	85 ed       	ldi	r24, 0xD5	; 213
    1d1c:	9d e0       	ldi	r25, 0x0D	; 13
    1d1e:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <_ZN5Print7printlnEv>
    1d22:	6d e6       	ldi	r22, 0x6D	; 109
    1d24:	73 e0       	ldi	r23, 0x03	; 3
    1d26:	ce 01       	movw	r24, r28
    1d28:	01 96       	adiw	r24, 0x01	; 1
    1d2a:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    1d2e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <addr_erog>
    1d32:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <addr_erog+0x1>
    1d36:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <addr_erog+0x2>
    1d3a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <addr_erog+0x3>
    1d3e:	ae 01       	movw	r20, r28
    1d40:	4f 5f       	subi	r20, 0xFF	; 255
    1d42:	5f 4f       	sbci	r21, 0xFF	; 255
    1d44:	b4 db       	rcall	.-2200   	; 0x14ae <_Z15erogazioniSaverm6String>
    1d46:	ce 01       	movw	r24, r28
    1d48:	01 96       	adiw	r24, 0x01	; 1
    1d4a:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    1d4e:	0e 94 17 03 	call	0x62e	; 0x62e <_Z14FlashpowerDownv>
    1d52:	85 ed       	ldi	r24, 0xD5	; 213
    1d54:	9d e0       	ldi	r25, 0x0D	; 13
    1d56:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <_ZN5Print7printlnEv>
    1d5a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
    1d5e:	40 ea       	ldi	r20, 0xA0	; 160
    1d60:	56 e8       	ldi	r21, 0x86	; 134
    1d62:	61 e0       	ldi	r22, 0x01	; 1
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	86 e0       	ldi	r24, 0x06	; 6
    1d68:	9b e0       	ldi	r25, 0x0B	; 11
    1d6a:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <_ZN13DS3231M_Class5beginEm>
    1d6e:	81 11       	cpse	r24, r1
    1d70:	10 c0       	rjmp	.+32     	; 0x1d92 <setup+0x346>
    1d72:	67 ed       	ldi	r22, 0xD7	; 215
    1d74:	71 e0       	ldi	r23, 0x01	; 1
    1d76:	85 ed       	ldi	r24, 0xD5	; 213
    1d78:	9d e0       	ldi	r25, 0x0D	; 13
    1d7a:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1d7e:	2f ef       	ldi	r18, 0xFF	; 255
    1d80:	83 ed       	ldi	r24, 0xD3	; 211
    1d82:	90 e3       	ldi	r25, 0x30	; 48
    1d84:	21 50       	subi	r18, 0x01	; 1
    1d86:	80 40       	sbci	r24, 0x00	; 0
    1d88:	90 40       	sbci	r25, 0x00	; 0
    1d8a:	e1 f7       	brne	.-8      	; 0x1d84 <setup+0x338>
    1d8c:	00 c0       	rjmp	.+0      	; 0x1d8e <setup+0x342>
    1d8e:	00 00       	nop
    1d90:	e6 cf       	rjmp	.-52     	; 0x1d5e <setup+0x312>
    1d92:	2f ef       	ldi	r18, 0xFF	; 255
    1d94:	80 e7       	ldi	r24, 0x70	; 112
    1d96:	92 e0       	ldi	r25, 0x02	; 2
    1d98:	21 50       	subi	r18, 0x01	; 1
    1d9a:	80 40       	sbci	r24, 0x00	; 0
    1d9c:	90 40       	sbci	r25, 0x00	; 0
    1d9e:	e1 f7       	brne	.-8      	; 0x1d98 <setup+0x34c>
    1da0:	00 c0       	rjmp	.+0      	; 0x1da2 <setup+0x356>
    1da2:	00 00       	nop
    1da4:	62 ec       	ldi	r22, 0xC2	; 194
    1da6:	71 e0       	ldi	r23, 0x01	; 1
    1da8:	85 ed       	ldi	r24, 0xD5	; 213
    1daa:	9d e0       	ldi	r25, 0x0D	; 13
    1dac:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1db0:	86 e0       	ldi	r24, 0x06	; 6
    1db2:	9b e0       	ldi	r25, 0x0B	; 11
    1db4:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <_ZN13DS3231M_Class6adjustEv>
    1db8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
    1dbc:	6a e5       	ldi	r22, 0x5A	; 90
    1dbe:	74 e0       	ldi	r23, 0x04	; 4
    1dc0:	85 ed       	ldi	r24, 0xD5	; 213
    1dc2:	9d e0       	ldi	r25, 0x0D	; 13
    1dc4:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
    1dc8:	8f e7       	ldi	r24, 0x7F	; 127
    1dca:	9d e0       	ldi	r25, 0x0D	; 13
    1dcc:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <_ZN7TwoWire5beginEv>
    1dd0:	68 e2       	ldi	r22, 0x28	; 40
    1dd2:	70 e0       	ldi	r23, 0x00	; 0
    1dd4:	8f e7       	ldi	r24, 0x7F	; 127
    1dd6:	9d e0       	ldi	r25, 0x0D	; 13
    1dd8:	0e 94 38 37 	call	0x6e70	; 0x6e70 <_ZN7TwoWire17beginTransmissionEi>
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	8f e7       	ldi	r24, 0x7F	; 127
    1de0:	9d e0       	ldi	r25, 0x0D	; 13
    1de2:	0e 94 dd 36 	call	0x6dba	; 0x6dba <_ZN7TwoWire5writeEh>
    1de6:	62 e3       	ldi	r22, 0x32	; 50
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	8f e7       	ldi	r24, 0x7F	; 127
    1dec:	9d e0       	ldi	r25, 0x0D	; 13
    1dee:	0e 94 94 01 	call	0x328	; 0x328 <_ZN7TwoWire5writeEi>
    1df2:	8f e7       	ldi	r24, 0x7F	; 127
    1df4:	9d e0       	ldi	r25, 0x0D	; 13
    1df6:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
    1dfa:	2f ef       	ldi	r18, 0xFF	; 255
    1dfc:	80 e7       	ldi	r24, 0x70	; 112
    1dfe:	92 e0       	ldi	r25, 0x02	; 2
    1e00:	21 50       	subi	r18, 0x01	; 1
    1e02:	80 40       	sbci	r24, 0x00	; 0
    1e04:	90 40       	sbci	r25, 0x00	; 0
    1e06:	e1 f7       	brne	.-8      	; 0x1e00 <setup+0x3b4>
    1e08:	00 c0       	rjmp	.+0      	; 0x1e0a <setup+0x3be>
    1e0a:	00 00       	nop
    1e0c:	62 e5       	ldi	r22, 0x52	; 82
    1e0e:	70 e0       	ldi	r23, 0x00	; 0
    1e10:	8f e7       	ldi	r24, 0x7F	; 127
    1e12:	9d e0       	ldi	r25, 0x0D	; 13
    1e14:	0e 94 38 37 	call	0x6e70	; 0x6e70 <_ZN7TwoWire17beginTransmissionEi>
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	8f e7       	ldi	r24, 0x7F	; 127
    1e1c:	9d e0       	ldi	r25, 0x0D	; 13
    1e1e:	0e 94 dd 36 	call	0x6dba	; 0x6dba <_ZN7TwoWire5writeEh>
    1e22:	62 e3       	ldi	r22, 0x32	; 50
    1e24:	70 e0       	ldi	r23, 0x00	; 0
    1e26:	8f e7       	ldi	r24, 0x7F	; 127
    1e28:	9d e0       	ldi	r25, 0x0D	; 13
    1e2a:	0e 94 94 01 	call	0x328	; 0x328 <_ZN7TwoWire5writeEi>
    1e2e:	8f e7       	ldi	r24, 0x7F	; 127
    1e30:	9d e0       	ldi	r25, 0x0D	; 13
    1e32:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
    1e36:	8f e7       	ldi	r24, 0x7F	; 127
    1e38:	9d e0       	ldi	r25, 0x0D	; 13
    1e3a:	0e 94 2a 37 	call	0x6e54	; 0x6e54 <_ZN7TwoWire3endEv>
    1e3e:	6e e8       	ldi	r22, 0x8E	; 142
    1e40:	74 e0       	ldi	r23, 0x04	; 4
    1e42:	85 ed       	ldi	r24, 0xD5	; 213
    1e44:	9d e0       	ldi	r25, 0x0D	; 13
    1e46:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
    1e4a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
    1e4e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
    1e52:	6f e9       	ldi	r22, 0x9F	; 159
    1e54:	74 e0       	ldi	r23, 0x04	; 4
    1e56:	85 ed       	ldi	r24, 0xD5	; 213
    1e58:	9d e0       	ldi	r25, 0x0D	; 13
    1e5a:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
    1e5e:	66 ed       	ldi	r22, 0xD6	; 214
    1e60:	74 e0       	ldi	r23, 0x04	; 4
    1e62:	85 ed       	ldi	r24, 0xD5	; 213
    1e64:	9d e0       	ldi	r25, 0x0D	; 13
    1e66:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
    1e6a:	2f ef       	ldi	r18, 0xFF	; 255
    1e6c:	80 e7       	ldi	r24, 0x70	; 112
    1e6e:	92 e0       	ldi	r25, 0x02	; 2
    1e70:	21 50       	subi	r18, 0x01	; 1
    1e72:	80 40       	sbci	r24, 0x00	; 0
    1e74:	90 40       	sbci	r25, 0x00	; 0
    1e76:	e1 f7       	brne	.-8      	; 0x1e70 <setup+0x424>
    1e78:	00 c0       	rjmp	.+0      	; 0x1e7a <setup+0x42e>
    1e7a:	00 00       	nop
    1e7c:	0e 94 9b 01 	call	0x336	; 0x336 <_Z14initIOExpanderv>
    1e80:	2f ef       	ldi	r18, 0xFF	; 255
    1e82:	80 e7       	ldi	r24, 0x70	; 112
    1e84:	92 e0       	ldi	r25, 0x02	; 2
    1e86:	21 50       	subi	r18, 0x01	; 1
    1e88:	80 40       	sbci	r24, 0x00	; 0
    1e8a:	90 40       	sbci	r25, 0x00	; 0
    1e8c:	e1 f7       	brne	.-8      	; 0x1e86 <setup+0x43a>
    1e8e:	00 c0       	rjmp	.+0      	; 0x1e90 <setup+0x444>
    1e90:	00 00       	nop
    1e92:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
    1e96:	8e ef       	ldi	r24, 0xFE	; 254
    1e98:	9f ef       	ldi	r25, 0xFF	; 255
    1e9a:	90 93 1e 0c 	sts	0x0C1E, r25	; 0x800c1e <stato_procedura+0x1>
    1e9e:	80 93 1d 0c 	sts	0x0C1D, r24	; 0x800c1d <stato_procedura>
    1ea2:	61 ef       	ldi	r22, 0xF1	; 241
    1ea4:	74 e0       	ldi	r23, 0x04	; 4
    1ea6:	89 e2       	ldi	r24, 0x29	; 41
    1ea8:	9c e0       	ldi	r25, 0x0C	; 12
    1eaa:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    1eae:	69 e2       	ldi	r22, 0x29	; 41
    1eb0:	7c e0       	ldi	r23, 0x0C	; 12
    1eb2:	85 ed       	ldi	r24, 0xD5	; 213
    1eb4:	9d e0       	ldi	r25, 0x0D	; 13
    1eb6:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <_ZN5Print7printlnERK6String>
    1eba:	26 96       	adiw	r28, 0x06	; 6
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	1f 91       	pop	r17
    1ecc:	0f 91       	pop	r16
    1ece:	ff 90       	pop	r15
    1ed0:	ef 90       	pop	r14
    1ed2:	df 90       	pop	r13
    1ed4:	cf 90       	pop	r12
    1ed6:	08 95       	ret

00001ed8 <_Z23getTastoPremuto_x_targav>:
    1ed8:	ef 92       	push	r14
    1eda:	ff 92       	push	r15
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	62 97       	sbiw	r28, 0x12	; 18
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	8f e7       	ldi	r24, 0x7F	; 127
    1ef6:	9d e0       	ldi	r25, 0x0D	; 13
    1ef8:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <_ZN7TwoWire5flushEv>
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	50 e0       	ldi	r21, 0x00	; 0
    1f00:	60 e2       	ldi	r22, 0x20	; 32
    1f02:	70 e0       	ldi	r23, 0x00	; 0
    1f04:	8f e7       	ldi	r24, 0x7F	; 127
    1f06:	9d e0       	ldi	r25, 0x0D	; 13
    1f08:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <_ZN7TwoWire11requestFromEii>
    1f0c:	6f eb       	ldi	r22, 0xBF	; 191
    1f0e:	71 e0       	ldi	r23, 0x01	; 1
    1f10:	ce 01       	movw	r24, r28
    1f12:	0d 96       	adiw	r24, 0x0d	; 13
    1f14:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    1f18:	11 e0       	ldi	r17, 0x01	; 1
    1f1a:	02 e0       	ldi	r16, 0x02	; 2
    1f1c:	83 e0       	ldi	r24, 0x03	; 3
    1f1e:	f8 2e       	mov	r15, r24
    1f20:	94 e0       	ldi	r25, 0x04	; 4
    1f22:	e9 2e       	mov	r14, r25
    1f24:	8f e7       	ldi	r24, 0x7F	; 127
    1f26:	9d e0       	ldi	r25, 0x0D	; 13
    1f28:	0e 94 4f 36 	call	0x6c9e	; 0x6c9e <_ZN7TwoWire9availableEv>
    1f2c:	89 2b       	or	r24, r25
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <_Z23getTastoPremuto_x_targav+0x5a>
    1f30:	55 c1       	rjmp	.+682    	; 0x21dc <_Z23getTastoPremuto_x_targav+0x304>
    1f32:	8f e7       	ldi	r24, 0x7F	; 127
    1f34:	9d e0       	ldi	r25, 0x0D	; 13
    1f36:	0e 94 57 36 	call	0x6cae	; 0x6cae <_ZN7TwoWire4readEv>
    1f3a:	99 27       	eor	r25, r25
    1f3c:	82 3c       	cpi	r24, 0xC2	; 194
    1f3e:	91 05       	cpc	r25, r1
    1f40:	49 f1       	breq	.+82     	; 0x1f94 <_Z23getTastoPremuto_x_targav+0xbc>
    1f42:	94 f4       	brge	.+36     	; 0x1f68 <_Z23getTastoPremuto_x_targav+0x90>
    1f44:	83 34       	cpi	r24, 0x43	; 67
    1f46:	91 05       	cpc	r25, r1
    1f48:	41 f1       	breq	.+80     	; 0x1f9a <_Z23getTastoPremuto_x_targav+0xc2>
    1f4a:	24 f4       	brge	.+8      	; 0x1f54 <_Z23getTastoPremuto_x_targav+0x7c>
    1f4c:	cc 97       	sbiw	r24, 0x3c	; 60
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <_Z23getTastoPremuto_x_targav+0x7a>
    1f50:	49 c0       	rjmp	.+146    	; 0x1fe4 <_Z23getTastoPremuto_x_targav+0x10c>
    1f52:	46 c0       	rjmp	.+140    	; 0x1fe0 <_Z23getTastoPremuto_x_targav+0x108>
    1f54:	83 38       	cpi	r24, 0x83	; 131
    1f56:	91 05       	cpc	r25, r1
    1f58:	81 f1       	breq	.+96     	; 0x1fba <_Z23getTastoPremuto_x_targav+0xe2>
    1f5a:	81 3c       	cpi	r24, 0xC1	; 193
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <_Z23getTastoPremuto_x_targav+0x8a>
    1f60:	3f c0       	rjmp	.+126    	; 0x1fe0 <_Z23getTastoPremuto_x_targav+0x108>
    1f62:	00 93 f2 0a 	sts	0x0AF2, r16	; 0x800af2 <key_idx>
    1f66:	1b c0       	rjmp	.+54     	; 0x1f9e <_Z23getTastoPremuto_x_targav+0xc6>
    1f68:	8b 3c       	cpi	r24, 0xCB	; 203
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	49 f1       	breq	.+82     	; 0x1fc0 <_Z23getTastoPremuto_x_targav+0xe8>
    1f6e:	4c f4       	brge	.+18     	; 0x1f82 <_Z23getTastoPremuto_x_targav+0xaa>
    1f70:	83 3c       	cpi	r24, 0xC3	; 195
    1f72:	91 05       	cpc	r25, r1
    1f74:	b9 f1       	breq	.+110    	; 0x1fe4 <_Z23getTastoPremuto_x_targav+0x10c>
    1f76:	87 3c       	cpi	r24, 0xC7	; 199
    1f78:	91 05       	cpc	r25, r1
    1f7a:	91 f5       	brne	.+100    	; 0x1fe0 <_Z23getTastoPremuto_x_targav+0x108>
    1f7c:	10 93 f3 0a 	sts	0x0AF3, r17	; 0x800af3 <key_idx+0x1>
    1f80:	24 c0       	rjmp	.+72     	; 0x1fca <_Z23getTastoPremuto_x_targav+0xf2>
    1f82:	83 3d       	cpi	r24, 0xD3	; 211
    1f84:	91 05       	cpc	r25, r1
    1f86:	f9 f0       	breq	.+62     	; 0x1fc6 <_Z23getTastoPremuto_x_targav+0xee>
    1f88:	83 3e       	cpi	r24, 0xE3	; 227
    1f8a:	91 05       	cpc	r25, r1
    1f8c:	49 f5       	brne	.+82     	; 0x1fe0 <_Z23getTastoPremuto_x_targav+0x108>
    1f8e:	e0 92 f3 0a 	sts	0x0AF3, r14	; 0x800af3 <key_idx+0x1>
    1f92:	1b c0       	rjmp	.+54     	; 0x1fca <_Z23getTastoPremuto_x_targav+0xf2>
    1f94:	10 93 f2 0a 	sts	0x0AF2, r17	; 0x800af2 <key_idx>
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <_Z23getTastoPremuto_x_targav+0xc6>
    1f9a:	f0 92 f2 0a 	sts	0x0AF2, r15	; 0x800af2 <key_idx>
    1f9e:	8f e1       	ldi	r24, 0x1F	; 31
    1fa0:	9e e4       	ldi	r25, 0x4E	; 78
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <_Z23getTastoPremuto_x_targav+0xca>
    1fa6:	00 c0       	rjmp	.+0      	; 0x1fa8 <_Z23getTastoPremuto_x_targav+0xd0>
    1fa8:	00 00       	nop
    1faa:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12leggiColonnev>
    1fae:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <premuto>
    1fb2:	8f 5f       	subi	r24, 0xFF	; 255
    1fb4:	80 93 f1 0a 	sts	0x0AF1, r24	; 0x800af1 <premuto>
    1fb8:	15 c0       	rjmp	.+42     	; 0x1fe4 <_Z23getTastoPremuto_x_targav+0x10c>
    1fba:	e0 92 f2 0a 	sts	0x0AF2, r14	; 0x800af2 <key_idx>
    1fbe:	ef cf       	rjmp	.-34     	; 0x1f9e <_Z23getTastoPremuto_x_targav+0xc6>
    1fc0:	00 93 f3 0a 	sts	0x0AF3, r16	; 0x800af3 <key_idx+0x1>
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <_Z23getTastoPremuto_x_targav+0xf2>
    1fc6:	f0 92 f3 0a 	sts	0x0AF3, r15	; 0x800af3 <key_idx+0x1>
    1fca:	8f e1       	ldi	r24, 0x1F	; 31
    1fcc:	9e e4       	ldi	r25, 0x4E	; 78
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <_Z23getTastoPremuto_x_targav+0xf6>
    1fd2:	00 c0       	rjmp	.+0      	; 0x1fd4 <_Z23getTastoPremuto_x_targav+0xfc>
    1fd4:	00 00       	nop
    1fd6:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z10leggiRighev>
    1fda:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_Z17leggi_OP_REGISTERv>
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <_Z23getTastoPremuto_x_targav+0x10c>
    1fe0:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12leggiColonnev>
    1fe4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <_Z17leggi_IP_REGISTERv>
    1fe8:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <premuto>
    1fec:	88 23       	and	r24, r24
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <_Z23getTastoPremuto_x_targav+0x11a>
    1ff0:	ee c0       	rjmp	.+476    	; 0x21ce <_Z23getTastoPremuto_x_targav+0x2f6>
    1ff2:	60 91 f2 0a 	lds	r22, 0x0AF2	; 0x800af2 <key_idx>
    1ff6:	94 e0       	ldi	r25, 0x04	; 4
    1ff8:	69 9f       	mul	r22, r25
    1ffa:	b0 01       	movw	r22, r0
    1ffc:	11 24       	eor	r1, r1
    1ffe:	6a 5f       	subi	r22, 0xFA	; 250
    2000:	7e 4f       	sbci	r23, 0xFE	; 254
    2002:	8a ee       	ldi	r24, 0xEA	; 234
    2004:	9a e0       	ldi	r25, 0x0A	; 10
    2006:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    200a:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <key_idx>
    200e:	84 30       	cpi	r24, 0x04	; 4
    2010:	09 f0       	breq	.+2      	; 0x2014 <_Z23getTastoPremuto_x_targav+0x13c>
    2012:	69 c0       	rjmp	.+210    	; 0x20e6 <_Z23getTastoPremuto_x_targav+0x20e>
    2014:	80 91 f3 0a 	lds	r24, 0x0AF3	; 0x800af3 <key_idx+0x1>
    2018:	83 30       	cpi	r24, 0x03	; 3
    201a:	81 f4       	brne	.+32     	; 0x203c <_Z23getTastoPremuto_x_targav+0x164>
    201c:	80 91 f0 0a 	lds	r24, 0x0AF0	; 0x800af0 <prolungato>
    2020:	8f 5f       	subi	r24, 0xFF	; 255
    2022:	80 93 f0 0a 	sts	0x0AF0, r24	; 0x800af0 <prolungato>
    2026:	83 30       	cpi	r24, 0x03	; 3
    2028:	08 f4       	brcc	.+2      	; 0x202c <_Z23getTastoPremuto_x_targav+0x154>
    202a:	cf c0       	rjmp	.+414    	; 0x21ca <_Z23getTastoPremuto_x_targav+0x2f2>
    202c:	80 91 e8 0a 	lds	r24, 0x0AE8	; 0x800ae8 <TARGA+0x4>
    2030:	90 91 e9 0a 	lds	r25, 0x0AE9	; 0x800ae9 <TARGA+0x5>
    2034:	05 97       	sbiw	r24, 0x05	; 5
    2036:	09 f0       	breq	.+2      	; 0x203a <_Z23getTastoPremuto_x_targav+0x162>
    2038:	c8 c0       	rjmp	.+400    	; 0x21ca <_Z23getTastoPremuto_x_targav+0x2f2>
    203a:	4e c1       	rjmp	.+668    	; 0x22d8 <_Z23getTastoPremuto_x_targav+0x400>
    203c:	81 30       	cpi	r24, 0x01	; 1
    203e:	09 f0       	breq	.+2      	; 0x2042 <_Z23getTastoPremuto_x_targav+0x16a>
    2040:	5a c0       	rjmp	.+180    	; 0x20f6 <_Z23getTastoPremuto_x_targav+0x21e>
    2042:	80 91 f0 0a 	lds	r24, 0x0AF0	; 0x800af0 <prolungato>
    2046:	8f 5f       	subi	r24, 0xFF	; 255
    2048:	80 93 f0 0a 	sts	0x0AF0, r24	; 0x800af0 <prolungato>
    204c:	83 30       	cpi	r24, 0x03	; 3
    204e:	08 f4       	brcc	.+2      	; 0x2052 <_Z23getTastoPremuto_x_targav+0x17a>
    2050:	bc c0       	rjmp	.+376    	; 0x21ca <_Z23getTastoPremuto_x_targav+0x2f2>
    2052:	46 e9       	ldi	r20, 0x96	; 150
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	0e 94 84 04 	call	0x908	; 0x908 <_Z6Buzzerhm>
    2060:	6f eb       	ldi	r22, 0xBF	; 191
    2062:	71 e0       	ldi	r23, 0x01	; 1
    2064:	84 ee       	ldi	r24, 0xE4	; 228
    2066:	9a e0       	ldi	r25, 0x0A	; 10
    2068:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    206c:	6f ef       	ldi	r22, 0xFF	; 255
    206e:	74 e0       	ldi	r23, 0x04	; 4
    2070:	81 ec       	ldi	r24, 0xC1	; 193
    2072:	9b e0       	ldi	r25, 0x0B	; 11
    2074:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    2078:	6f eb       	ldi	r22, 0xBF	; 191
    207a:	71 e0       	ldi	r23, 0x01	; 1
    207c:	87 ec       	ldi	r24, 0xC7	; 199
    207e:	9b e0       	ldi	r25, 0x0B	; 11
    2080:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    2084:	63 e1       	ldi	r22, 0x13	; 19
    2086:	75 e0       	ldi	r23, 0x05	; 5
    2088:	ce 01       	movw	r24, r28
    208a:	01 96       	adiw	r24, 0x01	; 1
    208c:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    2090:	64 ee       	ldi	r22, 0xE4	; 228
    2092:	7a e0       	ldi	r23, 0x0A	; 10
    2094:	ce 01       	movw	r24, r28
    2096:	01 96       	adiw	r24, 0x01	; 1
    2098:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
    209c:	bc 01       	movw	r22, r24
    209e:	8d ec       	ldi	r24, 0xCD	; 205
    20a0:	9b e0       	ldi	r25, 0x0B	; 11
    20a2:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <_ZN6StringaSERKS_>
    20a6:	ce 01       	movw	r24, r28
    20a8:	01 96       	adiw	r24, 0x01	; 1
    20aa:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    20ae:	86 e4       	ldi	r24, 0x46	; 70
    20b0:	9c e0       	ldi	r25, 0x0C	; 12
    20b2:	0e 94 85 2c 	call	0x590a	; 0x590a <_ZN3LCD5clearEv>
    20b6:	43 e0       	ldi	r20, 0x03	; 3
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	86 e4       	ldi	r24, 0x46	; 70
    20bc:	9c e0       	ldi	r25, 0x0C	; 12
    20be:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN3LCD9setCursorEhh>
    20c2:	63 e1       	ldi	r22, 0x13	; 19
    20c4:	75 e0       	ldi	r23, 0x05	; 5
    20c6:	ce 01       	movw	r24, r28
    20c8:	01 96       	adiw	r24, 0x01	; 1
    20ca:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    20ce:	64 ee       	ldi	r22, 0xE4	; 228
    20d0:	7a e0       	ldi	r23, 0x0A	; 10
    20d2:	ce 01       	movw	r24, r28
    20d4:	01 96       	adiw	r24, 0x01	; 1
    20d6:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
    20da:	bc 01       	movw	r22, r24
    20dc:	86 e4       	ldi	r24, 0x46	; 70
    20de:	9c e0       	ldi	r25, 0x0C	; 12
    20e0:	0e 94 3b 3a 	call	0x7476	; 0x7476 <_ZN5Print5printERK6String>
    20e4:	27 c0       	rjmp	.+78     	; 0x2134 <_Z23getTastoPremuto_x_targav+0x25c>
    20e6:	81 30       	cpi	r24, 0x01	; 1
    20e8:	21 f0       	breq	.+8      	; 0x20f2 <_Z23getTastoPremuto_x_targav+0x21a>
    20ea:	82 30       	cpi	r24, 0x02	; 2
    20ec:	11 f0       	breq	.+4      	; 0x20f2 <_Z23getTastoPremuto_x_targav+0x21a>
    20ee:	83 30       	cpi	r24, 0x03	; 3
    20f0:	31 f5       	brne	.+76     	; 0x213e <_Z23getTastoPremuto_x_targav+0x266>
    20f2:	80 91 f3 0a 	lds	r24, 0x0AF3	; 0x800af3 <key_idx+0x1>
    20f6:	84 30       	cpi	r24, 0x04	; 4
    20f8:	11 f5       	brne	.+68     	; 0x213e <_Z23getTastoPremuto_x_targav+0x266>
    20fa:	6f ef       	ldi	r22, 0xFF	; 255
    20fc:	74 e0       	ldi	r23, 0x04	; 4
    20fe:	81 ec       	ldi	r24, 0xC1	; 193
    2100:	9b e0       	ldi	r25, 0x0B	; 11
    2102:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    2106:	6f eb       	ldi	r22, 0xBF	; 191
    2108:	71 e0       	ldi	r23, 0x01	; 1
    210a:	87 ec       	ldi	r24, 0xC7	; 199
    210c:	9b e0       	ldi	r25, 0x0B	; 11
    210e:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    2112:	63 e1       	ldi	r22, 0x13	; 19
    2114:	75 e0       	ldi	r23, 0x05	; 5
    2116:	ce 01       	movw	r24, r28
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    211e:	64 ee       	ldi	r22, 0xE4	; 228
    2120:	7a e0       	ldi	r23, 0x0A	; 10
    2122:	ce 01       	movw	r24, r28
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
    212a:	bc 01       	movw	r22, r24
    212c:	8d ec       	ldi	r24, 0xCD	; 205
    212e:	9b e0       	ldi	r25, 0x0B	; 11
    2130:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <_ZN6StringaSERKS_>
    2134:	ce 01       	movw	r24, r28
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    213c:	46 c0       	rjmp	.+140    	; 0x21ca <_Z23getTastoPremuto_x_targav+0x2f2>
    213e:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <premuto>
    2142:	82 30       	cpi	r24, 0x02	; 2
    2144:	08 f0       	brcs	.+2      	; 0x2148 <_Z23getTastoPremuto_x_targav+0x270>
    2146:	41 c0       	rjmp	.+130    	; 0x21ca <_Z23getTastoPremuto_x_targav+0x2f2>
    2148:	20 91 f3 0a 	lds	r18, 0x0AF3	; 0x800af3 <key_idx+0x1>
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	a9 01       	movw	r20, r18
    2150:	41 50       	subi	r20, 0x01	; 1
    2152:	51 09       	sbc	r21, r1
    2154:	6a ee       	ldi	r22, 0xEA	; 234
    2156:	7a e0       	ldi	r23, 0x0A	; 10
    2158:	ce 01       	movw	r24, r28
    215a:	01 96       	adiw	r24, 0x01	; 1
    215c:	0e 94 e6 3e 	call	0x7dcc	; 0x7dcc <_ZNK6String9substringEjj>
    2160:	be 01       	movw	r22, r28
    2162:	6f 5f       	subi	r22, 0xFF	; 255
    2164:	7f 4f       	sbci	r23, 0xFF	; 255
    2166:	84 ee       	ldi	r24, 0xE4	; 228
    2168:	9a e0       	ldi	r25, 0x0A	; 10
    216a:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6String6concatERKS_>
    216e:	ce 01       	movw	r24, r28
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    2176:	6f ef       	ldi	r22, 0xFF	; 255
    2178:	74 e0       	ldi	r23, 0x04	; 4
    217a:	81 ec       	ldi	r24, 0xC1	; 193
    217c:	9b e0       	ldi	r25, 0x0B	; 11
    217e:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    2182:	6f eb       	ldi	r22, 0xBF	; 191
    2184:	71 e0       	ldi	r23, 0x01	; 1
    2186:	87 ec       	ldi	r24, 0xC7	; 199
    2188:	9b e0       	ldi	r25, 0x0B	; 11
    218a:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    218e:	63 e1       	ldi	r22, 0x13	; 19
    2190:	75 e0       	ldi	r23, 0x05	; 5
    2192:	ce 01       	movw	r24, r28
    2194:	01 96       	adiw	r24, 0x01	; 1
    2196:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    219a:	64 ee       	ldi	r22, 0xE4	; 228
    219c:	7a e0       	ldi	r23, 0x0A	; 10
    219e:	ce 01       	movw	r24, r28
    21a0:	01 96       	adiw	r24, 0x01	; 1
    21a2:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
    21a6:	bc 01       	movw	r22, r24
    21a8:	8d ec       	ldi	r24, 0xCD	; 205
    21aa:	9b e0       	ldi	r25, 0x0B	; 11
    21ac:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <_ZN6StringaSERKS_>
    21b0:	ce 01       	movw	r24, r28
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    21b8:	10 92 f0 0a 	sts	0x0AF0, r1	; 0x800af0 <prolungato>
    21bc:	4a e0       	ldi	r20, 0x0A	; 10
    21be:	50 e0       	ldi	r21, 0x00	; 0
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	0e 94 84 04 	call	0x908	; 0x908 <_Z6Buzzerhm>
    21ca:	10 92 f1 0a 	sts	0x0AF1, r1	; 0x800af1 <premuto>
    21ce:	8f e3       	ldi	r24, 0x3F	; 63
    21d0:	9f e1       	ldi	r25, 0x1F	; 31
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <_Z23getTastoPremuto_x_targav+0x2fa>
    21d6:	00 c0       	rjmp	.+0      	; 0x21d8 <_Z23getTastoPremuto_x_targav+0x300>
    21d8:	00 00       	nop
    21da:	a4 ce       	rjmp	.-696    	; 0x1f24 <_Z23getTastoPremuto_x_targav+0x4c>
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	60 e0       	ldi	r22, 0x00	; 0
    21e0:	86 e4       	ldi	r24, 0x46	; 70
    21e2:	9c e0       	ldi	r25, 0x0C	; 12
    21e4:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN3LCD9setCursorEhh>
    21e8:	40 91 fe 0a 	lds	r20, 0x0AFE	; 0x800afe <UltimoPassaggioStato>
    21ec:	50 91 ff 0a 	lds	r21, 0x0AFF	; 0x800aff <UltimoPassaggioStato+0x1>
    21f0:	60 91 00 0b 	lds	r22, 0x0B00	; 0x800b00 <UltimoPassaggioStato+0x2>
    21f4:	70 91 01 0b 	lds	r23, 0x0B01	; 0x800b01 <UltimoPassaggioStato+0x3>
    21f8:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <Timer>
    21fc:	90 91 fb 0a 	lds	r25, 0x0AFB	; 0x800afb <Timer+0x1>
    2200:	a0 91 fc 0a 	lds	r26, 0x0AFC	; 0x800afc <Timer+0x2>
    2204:	b0 91 fd 0a 	lds	r27, 0x0AFD	; 0x800afd <Timer+0x3>
    2208:	48 0f       	add	r20, r24
    220a:	59 1f       	adc	r21, r25
    220c:	6a 1f       	adc	r22, r26
    220e:	7b 1f       	adc	r23, r27
    2210:	41 50       	subi	r20, 0x01	; 1
    2212:	51 09       	sbc	r21, r1
    2214:	61 09       	sbc	r22, r1
    2216:	71 09       	sbc	r23, r1
    2218:	80 91 02 0b 	lds	r24, 0x0B02	; 0x800b02 <secs>
    221c:	90 91 03 0b 	lds	r25, 0x0B03	; 0x800b03 <secs+0x1>
    2220:	a0 91 04 0b 	lds	r26, 0x0B04	; 0x800b04 <secs+0x2>
    2224:	b0 91 05 0b 	lds	r27, 0x0B05	; 0x800b05 <secs+0x3>
    2228:	48 1b       	sub	r20, r24
    222a:	59 0b       	sbc	r21, r25
    222c:	6a 0b       	sbc	r22, r26
    222e:	7b 0b       	sbc	r23, r27
    2230:	2a e0       	ldi	r18, 0x0A	; 10
    2232:	ce 01       	movw	r24, r28
    2234:	07 96       	adiw	r24, 0x07	; 7
    2236:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <_ZN6StringC1Emh>
    223a:	6e e1       	ldi	r22, 0x1E	; 30
    223c:	73 e0       	ldi	r23, 0x03	; 3
    223e:	ce 01       	movw	r24, r28
    2240:	01 96       	adiw	r24, 0x01	; 1
    2242:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    2246:	be 01       	movw	r22, r28
    2248:	69 5f       	subi	r22, 0xF9	; 249
    224a:	7f 4f       	sbci	r23, 0xFF	; 255
    224c:	ce 01       	movw	r24, r28
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
    2254:	66 e2       	ldi	r22, 0x26	; 38
    2256:	73 e0       	ldi	r23, 0x03	; 3
    2258:	0e 94 83 3e 	call	0x7d06	; 0x7d06 <_ZplRK15StringSumHelperPKc>
    225c:	bc 01       	movw	r22, r24
    225e:	86 e4       	ldi	r24, 0x46	; 70
    2260:	9c e0       	ldi	r25, 0x0C	; 12
    2262:	0e 94 3b 3a 	call	0x7476	; 0x7476 <_ZN5Print5printERK6String>
    2266:	ce 01       	movw	r24, r28
    2268:	01 96       	adiw	r24, 0x01	; 1
    226a:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    226e:	ce 01       	movw	r24, r28
    2270:	07 96       	adiw	r24, 0x07	; 7
    2272:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    2276:	61 e0       	ldi	r22, 0x01	; 1
    2278:	86 e4       	ldi	r24, 0x46	; 70
    227a:	9c e0       	ldi	r25, 0x0C	; 12
    227c:	0e 94 4a 3a 	call	0x7494	; 0x7494 <_ZN5Print5printEc>
    2280:	43 e0       	ldi	r20, 0x03	; 3
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	86 e4       	ldi	r24, 0x46	; 70
    2286:	9c e0       	ldi	r25, 0x0C	; 12
    2288:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN3LCD9setCursorEhh>
    228c:	63 e1       	ldi	r22, 0x13	; 19
    228e:	75 e0       	ldi	r23, 0x05	; 5
    2290:	ce 01       	movw	r24, r28
    2292:	01 96       	adiw	r24, 0x01	; 1
    2294:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    2298:	64 ee       	ldi	r22, 0xE4	; 228
    229a:	7a e0       	ldi	r23, 0x0A	; 10
    229c:	ce 01       	movw	r24, r28
    229e:	01 96       	adiw	r24, 0x01	; 1
    22a0:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
    22a4:	bc 01       	movw	r22, r24
    22a6:	86 e4       	ldi	r24, 0x46	; 70
    22a8:	9c e0       	ldi	r25, 0x0C	; 12
    22aa:	0e 94 3b 3a 	call	0x7476	; 0x7476 <_ZN5Print5printERK6String>
    22ae:	ce 01       	movw	r24, r28
    22b0:	01 96       	adiw	r24, 0x01	; 1
    22b2:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    22b6:	ce 01       	movw	r24, r28
    22b8:	0d 96       	adiw	r24, 0x0d	; 13
    22ba:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    22be:	62 96       	adiw	r28, 0x12	; 18
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	1f 91       	pop	r17
    22d0:	0f 91       	pop	r16
    22d2:	ff 90       	pop	r15
    22d4:	ef 90       	pop	r14
    22d6:	08 95       	ret
    22d8:	44 e6       	ldi	r20, 0x64	; 100
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	60 e0       	ldi	r22, 0x00	; 0
    22de:	70 e0       	ldi	r23, 0x00	; 0
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	0e 94 84 04 	call	0x908	; 0x908 <_Z6Buzzerhm>
    22e6:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    22ea:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    22ee:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    22f2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    22f6:	0e 94 ab 05 	call	0xb56	; 0xb56 <_Z11avanzaStatom>
    22fa:	67 cf       	rjmp	.-306    	; 0x21ca <_Z23getTastoPremuto_x_targav+0x2f2>

000022fc <_Z6Azzerav>:
   if (azione == 1) {SET_BIT(PORTB,3);} else if (azione == 0) { CLEAR_BIT(PORTB,3); }
}

void Azzera()
{
   RispostaHTTP = "";
    22fc:	6f eb       	ldi	r22, 0xBF	; 191
    22fe:	71 e0       	ldi	r23, 0x01	; 1
    2300:	85 e1       	ldi	r24, 0x15	; 21
    2302:	9c e0       	ldi	r25, 0x0C	; 12
    2304:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
   impulsi = 0;
    2308:	10 92 1c 0c 	sts	0x0C1C, r1	; 0x800c1c <impulsi+0x1>
    230c:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <impulsi>
   alreadyTimbrata = false;
    2310:	10 92 5e 0c 	sts	0x0C5E, r1	; 0x800c5e <alreadyTimbrata>
   
   Carburante = "X";
    2314:	63 e7       	ldi	r22, 0x73	; 115
    2316:	73 e0       	ldi	r23, 0x03	; 3
    2318:	8b ee       	ldi	r24, 0xEB	; 235
    231a:	9b e0       	ldi	r25, 0x0B	; 11
    231c:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
   SequenzaKeypad[0] = "";
    2320:	6f eb       	ldi	r22, 0xBF	; 191
    2322:	71 e0       	ldi	r23, 0x01	; 1
    2324:	8f ed       	ldi	r24, 0xDF	; 223
    2326:	9b e0       	ldi	r25, 0x0B	; 11
    2328:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
   SequenzaKeypad[1] = "";
    232c:	6f eb       	ldi	r22, 0xBF	; 191
    232e:	71 e0       	ldi	r23, 0x01	; 1
    2330:	85 ee       	ldi	r24, 0xE5	; 229
    2332:	9b e0       	ldi	r25, 0x0B	; 11
    2334:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
   
   Rele_Abilitazione1(1,7);
    2338:	67 e0       	ldi	r22, 0x07	; 7
    233a:	70 e0       	ldi	r23, 0x00	; 0
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_Z18Rele_Abilitazione1ii>
   Rele_Abilitazione2(1,7);
    2344:	67 e0       	ldi	r22, 0x07	; 7
    2346:	70 e0       	ldi	r23, 0x00	; 0
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	0e 94 93 07 	call	0xf26	; 0xf26 <_Z18Rele_Abilitazione2ii>
   Control_WIFI(0);
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	0e 94 d7 07 	call	0xfae	; 0xfae <_Z12Control_WIFIi>
   
   clientToServizio.flush();
    2358:	85 e2       	ldi	r24, 0x25	; 37
    235a:	9b e0       	ldi	r25, 0x0B	; 11
    235c:	0e 94 4b 24 	call	0x4896	; 0x4896 <_ZN14EthernetClient5flushEv>
   clientToServizio.stop();
    2360:	85 e2       	ldi	r24, 0x25	; 37
    2362:	9b e0       	ldi	r25, 0x0B	; 11
    2364:	0e 94 a1 24 	call	0x4942	; 0x4942 <_ZN14EthernetClient4stopEv>
   clientREST.flush();
    2368:	82 e3       	ldi	r24, 0x32	; 50
    236a:	9b e0       	ldi	r25, 0x0B	; 11
    236c:	0e 94 4b 24 	call	0x4896	; 0x4896 <_ZN14EthernetClient5flushEv>
   clientREST.stop();
    2370:	82 e3       	ldi	r24, 0x32	; 50
    2372:	9b e0       	ldi	r25, 0x0B	; 11
    2374:	0e 94 a1 24 	call	0x4942	; 0x4942 <_ZN14EthernetClient4stopEv>
   Connected = false;
    2378:	10 92 20 0c 	sts	0x0C20, r1	; 0x800c20 <Connected+0x1>
    237c:	10 92 1f 0c 	sts	0x0C1F, r1	; 0x800c1f <Connected>
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
    2380:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2382:	8f e1       	ldi	r24, 0x1F	; 31
    2384:	9e e4       	ldi	r25, 0x4E	; 78
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <_Z6Azzerav+0x8a>
    238a:	00 c0       	rjmp	.+0      	; 0x238c <_Z6Azzerav+0x90>
    238c:	00 00       	nop
static inline void disable_ETH()   { PORTC |= (1 << PC4);  } // Set 1 Bit 4 PORTC Register
static inline void disable_FLASH() { PORTB |= (1 << PB4);  } // Set 1 Bit 4 PORTB Register
    238e:	2c 9a       	sbi	0x05, 4	; 5
    2390:	8f e1       	ldi	r24, 0x1F	; 31
    2392:	9e e4       	ldi	r25, 0x4E	; 78
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <_Z6Azzerav+0x98>
    2398:	00 c0       	rjmp	.+0      	; 0x239a <_Z6Azzerav+0x9e>
    239a:	00 00       	nop
   
   enable_FLASH();
   _delay_ms(5);
   disable_FLASH();
   _delay_ms(5);
   disable_ETH();
    239c:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    23a0:	8f e1       	ldi	r24, 0x1F	; 31
    23a2:	9e e4       	ldi	r25, 0x4E	; 78
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <_Z6Azzerav+0xa8>
    23a8:	00 c0       	rjmp	.+0      	; 0x23aa <_Z6Azzerav+0xae>
    23aa:	00 00       	nop
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    23ac:	44 98       	cbi	0x08, 4	; 8
   _delay_ms(5);
   disable_ETH();
   _delay_ms(5); 
   enable_ETH(); 
     
   SET_BIT(PORTA,A1);
    23ae:	82 b1       	in	r24, 0x02	; 2
    23b0:	82 b9       	out	0x02, r24	; 2
   SET_BIT(PORTA,A2);
    23b2:	82 b1       	in	r24, 0x02	; 2
    23b4:	82 b9       	out	0x02, r24	; 2
   
   righeDisplay[1] =  "";
    23b6:	6f eb       	ldi	r22, 0xBF	; 191
    23b8:	71 e0       	ldi	r23, 0x01	; 1
    23ba:	81 ec       	ldi	r24, 0xC1	; 193
    23bc:	9b e0       	ldi	r25, 0x0B	; 11
    23be:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    23c2:	6f eb       	ldi	r22, 0xBF	; 191
    23c4:	71 e0       	ldi	r23, 0x01	; 1
    23c6:	87 ec       	ldi	r24, 0xC7	; 199
    23c8:	9b e0       	ldi	r25, 0x0B	; 11
    23ca:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    23ce:	6f eb       	ldi	r22, 0xBF	; 191
    23d0:	71 e0       	ldi	r23, 0x01	; 1
    23d2:	87 ec       	ldi	r24, 0xC7	; 199
    23d4:	9b e0       	ldi	r25, 0x0B	; 11
    23d6:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
   
   lcd.noBacklight();
    23da:	86 e4       	ldi	r24, 0x46	; 70
    23dc:	9c e0       	ldi	r25, 0x0C	; 12
    23de:	0e 94 75 2c 	call	0x58ea	; 0x58ea <_ZN3LCD11noBacklightEv>
   lcd.noDisplay();
    23e2:	86 e4       	ldi	r24, 0x46	; 70
    23e4:	9c e0       	ldi	r25, 0x0C	; 12
    23e6:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN3LCD9noDisplayEv>
   secs = 0;
    23ea:	10 92 02 0b 	sts	0x0B02, r1	; 0x800b02 <secs>
    23ee:	10 92 03 0b 	sts	0x0B03, r1	; 0x800b03 <secs+0x1>
    23f2:	10 92 04 0b 	sts	0x0B04, r1	; 0x800b04 <secs+0x2>
    23f6:	10 92 05 0b 	sts	0x0B05, r1	; 0x800b05 <secs+0x3>
   UltimoPassaggioStato = 0;
    23fa:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <UltimoPassaggioStato>
    23fe:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <UltimoPassaggioStato+0x1>
    2402:	10 92 00 0b 	sts	0x0B00, r1	; 0x800b00 <UltimoPassaggioStato+0x2>
    2406:	10 92 01 0b 	sts	0x0B01, r1	; 0x800b01 <UltimoPassaggioStato+0x3>
   
   printLine();
    240a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
   Serial.println("Azzera....... OK");
    240e:	66 e4       	ldi	r22, 0x46	; 70
    2410:	77 e0       	ldi	r23, 0x07	; 7
    2412:	85 ed       	ldi	r24, 0xD5	; 213
    2414:	9d e0       	ldi	r25, 0x0D	; 13
    2416:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
   printLine();
    241a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
   
   stato_procedura = -2;
    241e:	8e ef       	ldi	r24, 0xFE	; 254
    2420:	9f ef       	ldi	r25, 0xFF	; 255
    2422:	90 93 1e 0c 	sts	0x0C1E, r25	; 0x800c1e <stato_procedura+0x1>
    2426:	80 93 1d 0c 	sts	0x0C1D, r24	; 0x800c1d <stato_procedura>
    242a:	08 95       	ret

0000242c <_Z17InviaRifornimentoiiPci6String>:

/********************************************************************/


bool InviaRifornimento(int P_stato,int p_connesso, char P_datiVerifica[],int P_l_buffer,String P_prefisso)
{ 
    242c:	af 92       	push	r10
    242e:	bf 92       	push	r11
    2430:	cf 92       	push	r12
    2432:	df 92       	push	r13
    2434:	ef 92       	push	r14
    2436:	ff 92       	push	r15
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	00 d0       	rcall	.+0      	; 0x2442 <_Z17InviaRifornimentoiiPci6String+0x16>
    2442:	00 d0       	rcall	.+0      	; 0x2444 <_Z17InviaRifornimentoiiPci6String+0x18>
    2444:	00 d0       	rcall	.+0      	; 0x2446 <_Z17InviaRifornimentoiiPci6String+0x1a>
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	5b 01       	movw	r10, r22
    244c:	8a 01       	movw	r16, r20
    244e:	69 01       	movw	r12, r18
    clientToServizio.flush();
    //clientToServizio.stop();
    return true;
  }
  else {return false;};
}
    2450:	ed b6       	in	r14, 0x3d	; 61
    2452:	fe b6       	in	r15, 0x3e	; 62


bool InviaRifornimento(int P_stato,int p_connesso, char P_datiVerifica[],int P_l_buffer,String P_prefisso)
{ 
  //Risposta = "999";
  Serial.println("START InviaRifornimento !!");
    2454:	67 e5       	ldi	r22, 0x57	; 87
    2456:	77 e0       	ldi	r23, 0x07	; 7
    2458:	85 ed       	ldi	r24, 0xD5	; 213
    245a:	9d e0       	ldi	r25, 0x0D	; 13
    245c:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
  
  if ((p_connesso))// && (P_stato == 7 ))
    2460:	ab 28       	or	r10, r11
    2462:	09 f4       	brne	.+2      	; 0x2466 <_Z17InviaRifornimentoiiPci6String+0x3a>
    2464:	4e c0       	rjmp	.+156    	; 0x2502 <_Z17InviaRifornimentoiiPci6String+0xd6>
  {
    Serial.println("Connected to Server -- Invio Erogazione !!");
    2466:	62 e7       	ldi	r22, 0x72	; 114
    2468:	77 e0       	ldi	r23, 0x07	; 7
    246a:	85 ed       	ldi	r24, 0xD5	; 213
    246c:	9d e0       	ldi	r25, 0x0D	; 13
    246e:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
    stato_procedura++;
    2472:	80 91 1d 0c 	lds	r24, 0x0C1D	; 0x800c1d <stato_procedura>
    2476:	90 91 1e 0c 	lds	r25, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    247a:	01 96       	adiw	r24, 0x01	; 1
    247c:	90 93 1e 0c 	sts	0x0C1E, r25	; 0x800c1e <stato_procedura+0x1>
    2480:	80 93 1d 0c 	sts	0x0C1D, r24	; 0x800c1d <stato_procedura>
    String TX =  String(P_datiVerifica);
    2484:	b8 01       	movw	r22, r16
    2486:	ce 01       	movw	r24, r28
    2488:	01 96       	adiw	r24, 0x01	; 1
    248a:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    char Invio[P_l_buffer];
    248e:	8d b7       	in	r24, 0x3d	; 61
    2490:	9e b7       	in	r25, 0x3e	; 62
    2492:	8c 19       	sub	r24, r12
    2494:	9d 09       	sbc	r25, r13
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	9e bf       	out	0x3e, r25	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	8d bf       	out	0x3d, r24	; 61
    24a0:	0d b7       	in	r16, 0x3d	; 61
    24a2:	1e b7       	in	r17, 0x3e	; 62
    24a4:	0f 5f       	subi	r16, 0xFF	; 255
    24a6:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	a6 01       	movw	r20, r12
    24ae:	b8 01       	movw	r22, r16
    24b0:	ce 01       	movw	r24, r28
    24b2:	01 96       	adiw	r24, 0x01	; 1
    24b4:	0e 94 b8 3e 	call	0x7d70	; 0x7d70 <_ZNK6String8getBytesEPhjj>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    24b8:	f8 01       	movw	r30, r16
    24ba:	01 90       	ld	r0, Z+
    24bc:	00 20       	and	r0, r0
    24be:	e9 f7       	brne	.-6      	; 0x24ba <_Z17InviaRifornimentoiiPci6String+0x8e>
    24c0:	31 97       	sbiw	r30, 0x01	; 1
    24c2:	af 01       	movw	r20, r30
    24c4:	40 1b       	sub	r20, r16
    24c6:	51 0b       	sbc	r21, r17
    24c8:	b8 01       	movw	r22, r16
    24ca:	85 e2       	ldi	r24, 0x25	; 37
    24cc:	9b e0       	ldi	r25, 0x0B	; 11
    24ce:	0e 94 e6 23 	call	0x47cc	; 0x47cc <_ZN14EthernetClient5writeEPKhj>
    24d2:	9f ef       	ldi	r25, 0xFF	; 255
    24d4:	29 ef       	ldi	r18, 0xF9	; 249
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	91 50       	subi	r25, 0x01	; 1
    24da:	20 40       	sbci	r18, 0x00	; 0
    24dc:	80 40       	sbci	r24, 0x00	; 0
    24de:	e1 f7       	brne	.-8      	; 0x24d8 <_Z17InviaRifornimentoiiPci6String+0xac>
    24e0:	00 c0       	rjmp	.+0      	; 0x24e2 <_Z17InviaRifornimentoiiPci6String+0xb6>
    24e2:	00 00       	nop
    TX.toCharArray(Invio,P_l_buffer);
    clientToServizio.write(Invio);
    _delay_ms(20);
    clientToServizio.flush();
    24e4:	85 e2       	ldi	r24, 0x25	; 37
    24e6:	9b e0       	ldi	r25, 0x0B	; 11
    24e8:	0e 94 4b 24 	call	0x4896	; 0x4896 <_ZN14EthernetClient5flushEv>
  
  if ((p_connesso))// && (P_stato == 7 ))
  {
    Serial.println("Connected to Server -- Invio Erogazione !!");
    stato_procedura++;
    String TX =  String(P_datiVerifica);
    24ec:	ce 01       	movw	r24, r28
    24ee:	01 96       	adiw	r24, 0x01	; 1
    24f0:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	fe be       	out	0x3e, r15	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	ed be       	out	0x3d, r14	; 61
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	01 c0       	rjmp	.+2      	; 0x2504 <_Z17InviaRifornimentoiiPci6String+0xd8>
    _delay_ms(20);
    clientToServizio.flush();
    //clientToServizio.stop();
    return true;
  }
  else {return false;};
    2502:	80 e0       	ldi	r24, 0x00	; 0
}
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	fe be       	out	0x3e, r15	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	ed be       	out	0x3d, r14	; 61
    250e:	26 96       	adiw	r28, 0x06	; 6
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	df 91       	pop	r29
    251c:	cf 91       	pop	r28
    251e:	1f 91       	pop	r17
    2520:	0f 91       	pop	r16
    2522:	ff 90       	pop	r15
    2524:	ef 90       	pop	r14
    2526:	df 90       	pop	r13
    2528:	cf 90       	pop	r12
    252a:	bf 90       	pop	r11
    252c:	af 90       	pop	r10
    252e:	08 95       	ret

00002530 <loop>:
    _delay_ms(100);
    Messaggio.toCharArray(MessaggioToServer, 100);  
}

/**************************LOOP PROCEDURA************************************/
void loop() {
    2530:	cf 92       	push	r12
    2532:	df 92       	push	r13
    2534:	ef 92       	push	r14
    2536:	ff 92       	push	r15
    2538:	0f 93       	push	r16
    253a:	1f 93       	push	r17
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	6e 97       	sbiw	r28, 0x1e	; 30
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
      
  switch (stato_procedura) {
    2550:	e0 91 1d 0c 	lds	r30, 0x0C1D	; 0x800c1d <stato_procedura>
    2554:	f0 91 1e 0c 	lds	r31, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    2558:	32 96       	adiw	r30, 0x02	; 2
    255a:	eb 30       	cpi	r30, 0x0B	; 11
    255c:	f1 05       	cpc	r31, r1
    255e:	08 f0       	brcs	.+2      	; 0x2562 <loop+0x32>
    2560:	59 c3       	rjmp	.+1714   	; 0x2c14 <loop+0x6e4>
    2562:	ea 5b       	subi	r30, 0xBA	; 186
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	0c 94 9e 40 	jmp	0x813c	; 0x813c <__tablejump2__>
    case -2:
    { //cli(); // disable interrupt      
            
      righeDisplay[1] =  "";
    256a:	6f eb       	ldi	r22, 0xBF	; 191
    256c:	71 e0       	ldi	r23, 0x01	; 1
    256e:	81 ec       	ldi	r24, 0xC1	; 193
    2570:	9b e0       	ldi	r25, 0x0B	; 11
    2572:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      righeDisplay[2] = "Setting....";
    2576:	6d e9       	ldi	r22, 0x9D	; 157
    2578:	77 e0       	ldi	r23, 0x07	; 7
    257a:	87 ec       	ldi	r24, 0xC7	; 199
    257c:	9b e0       	ldi	r25, 0x0B	; 11
    257e:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    2582:	6f eb       	ldi	r22, 0xBF	; 191
    2584:	71 e0       	ldi	r23, 0x01	; 1
    2586:	8d ec       	ldi	r24, 0xCD	; 205
    2588:	9b e0       	ldi	r25, 0x0B	; 11
    258a:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      
      displayLCD(righeDisplay,stato_procedura,100);
    258e:	60 91 1d 0c 	lds	r22, 0x0C1D	; 0x800c1d <stato_procedura>
    2592:	70 91 1e 0c 	lds	r23, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    2596:	44 e6       	ldi	r20, 0x64	; 100
    2598:	50 e0       	ldi	r21, 0x00	; 0
    259a:	8b eb       	ldi	r24, 0xBB	; 187
    259c:	9b e0       	ldi	r25, 0x0B	; 11
    259e:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z10displayLCDP6Stringii>
    25a2:	2f ef       	ldi	r18, 0xFF	; 255
    25a4:	83 ec       	ldi	r24, 0xC3	; 195
    25a6:	99 e0       	ldi	r25, 0x09	; 9
    25a8:	21 50       	subi	r18, 0x01	; 1
    25aa:	80 40       	sbci	r24, 0x00	; 0
    25ac:	90 40       	sbci	r25, 0x00	; 0
    25ae:	e1 f7       	brne	.-8      	; 0x25a8 <loop+0x78>
    25b0:	00 c0       	rjmp	.+0      	; 0x25b2 <loop+0x82>
    25b2:	00 00       	nop
    25b4:	1f c0       	rjmp	.+62     	; 0x25f4 <loop+0xc4>
      stato_procedura++;
    }
    break;
    case -1:
    {   
    righeDisplay[1] =  "";
    25b6:	6f eb       	ldi	r22, 0xBF	; 191
    25b8:	71 e0       	ldi	r23, 0x01	; 1
    25ba:	81 ec       	ldi	r24, 0xC1	; 193
    25bc:	9b e0       	ldi	r25, 0x0B	; 11
    25be:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    25c2:	6f eb       	ldi	r22, 0xBF	; 191
    25c4:	71 e0       	ldi	r23, 0x01	; 1
    25c6:	87 ec       	ldi	r24, 0xC7	; 199
    25c8:	9b e0       	ldi	r25, 0x0B	; 11
    25ca:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    25ce:	6f eb       	ldi	r22, 0xBF	; 191
    25d0:	71 e0       	ldi	r23, 0x01	; 1
    25d2:	8d ec       	ldi	r24, 0xCD	; 205
    25d4:	9b e0       	ldi	r25, 0x0B	; 11
    25d6:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      
      abilitaPulsanti();
    25da:	0e 94 12 07 	call	0xe24	; 0xe24 <_Z15abilitaPulsantiv>
    25de:	2f ef       	ldi	r18, 0xFF	; 255
    25e0:	89 ef       	ldi	r24, 0xF9	; 249
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	21 50       	subi	r18, 0x01	; 1
    25e6:	80 40       	sbci	r24, 0x00	; 0
    25e8:	90 40       	sbci	r25, 0x00	; 0
    25ea:	e1 f7       	brne	.-8      	; 0x25e4 <loop+0xb4>
    25ec:	00 c0       	rjmp	.+0      	; 0x25ee <loop+0xbe>
    25ee:	00 00       	nop
      _delay_ms(20);
      abilitaContattiPistola();
    25f0:	0e 94 1c 07 	call	0xe38	; 0xe38 <_Z22abilitaContattiPistolav>
      stato_procedura++;
    25f4:	80 91 1d 0c 	lds	r24, 0x0C1D	; 0x800c1d <stato_procedura>
    25f8:	90 91 1e 0c 	lds	r25, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    25fc:	01 96       	adiw	r24, 0x01	; 1
    25fe:	90 93 1e 0c 	sts	0x0C1E, r25	; 0x800c1e <stato_procedura+0x1>
    2602:	80 93 1d 0c 	sts	0x0C1D, r24	; 0x800c1d <stato_procedura>
    }
    break;
    2606:	06 c3       	rjmp	.+1548   	; 0x2c14 <loop+0x6e4>
    case 0:
    { 
    righeDisplay[1] =  "";
    2608:	6f eb       	ldi	r22, 0xBF	; 191
    260a:	71 e0       	ldi	r23, 0x01	; 1
    260c:	81 ec       	ldi	r24, 0xC1	; 193
    260e:	9b e0       	ldi	r25, 0x0B	; 11
    2610:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    2614:	6f eb       	ldi	r22, 0xBF	; 191
    2616:	71 e0       	ldi	r23, 0x01	; 1
    2618:	87 ec       	ldi	r24, 0xC7	; 199
    261a:	9b e0       	ldi	r25, 0x0B	; 11
    261c:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    2620:	6f eb       	ldi	r22, 0xBF	; 191
    2622:	71 e0       	ldi	r23, 0x01	; 1
    2624:	8d ec       	ldi	r24, 0xCD	; 205
    2626:	9b e0       	ldi	r25, 0x0B	; 11
    2628:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
          
      displayLCD(righeDisplay,stato_procedura,100);
    262c:	60 91 1d 0c 	lds	r22, 0x0C1D	; 0x800c1d <stato_procedura>
    2630:	70 91 1e 0c 	lds	r23, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    2634:	44 e6       	ldi	r20, 0x64	; 100
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	8b eb       	ldi	r24, 0xBB	; 187
    263a:	9b e0       	ldi	r25, 0x0B	; 11
    263c:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z10displayLCDP6Stringii>
    2640:	2f ef       	ldi	r18, 0xFF	; 255
    2642:	87 ea       	ldi	r24, 0xA7	; 167
    2644:	91 e6       	ldi	r25, 0x61	; 97
    2646:	21 50       	subi	r18, 0x01	; 1
    2648:	80 40       	sbci	r24, 0x00	; 0
    264a:	90 40       	sbci	r25, 0x00	; 0
    264c:	e1 f7       	brne	.-8      	; 0x2646 <loop+0x116>
    264e:	00 c0       	rjmp	.+0      	; 0x2650 <loop+0x120>
    2650:	00 00       	nop
      _delay_ms(2000);
      alreadyTimbrata = false;  
    2652:	10 92 5e 0c 	sts	0x0C5E, r1	; 0x800c5e <alreadyTimbrata>
    2656:	ce cf       	rjmp	.-100    	; 0x25f4 <loop+0xc4>
    stato_procedura++;
    }
    break;
    case 1:
    { 
      righeDisplay[1] = " * AUTENTICAZIONE *";
    2658:	69 ea       	ldi	r22, 0xA9	; 169
    265a:	77 e0       	ldi	r23, 0x07	; 7
    265c:	81 ec       	ldi	r24, 0xC1	; 193
    265e:	9b e0       	ldi	r25, 0x0B	; 11
    2660:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      righeDisplay[2] = "";
    2664:	6f eb       	ldi	r22, 0xBF	; 191
    2666:	71 e0       	ldi	r23, 0x01	; 1
    2668:	87 ec       	ldi	r24, 0xC7	; 199
    266a:	9b e0       	ldi	r25, 0x0B	; 11
    266c:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      righeDisplay[3] = "    Avvicina ATE  ";
    2670:	6d eb       	ldi	r22, 0xBD	; 189
    2672:	77 e0       	ldi	r23, 0x07	; 7
    2674:	8d ec       	ldi	r24, 0xCD	; 205
    2676:	9b e0       	ldi	r25, 0x0B	; 11
    2678:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    
      displayLCD(righeDisplay,stato_procedura,100);     
    267c:	60 91 1d 0c 	lds	r22, 0x0C1D	; 0x800c1d <stato_procedura>
    2680:	70 91 1e 0c 	lds	r23, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    2684:	44 e6       	ldi	r20, 0x64	; 100
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	8b eb       	ldi	r24, 0xBB	; 187
    268a:	9b e0       	ldi	r25, 0x0B	; 11
    268c:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z10displayLCDP6Stringii>
      
      String ATe = "ERRORE";
    2690:	6c e4       	ldi	r22, 0x4C	; 76
    2692:	73 e0       	ldi	r23, 0x03	; 3
    2694:	ce 01       	movw	r24, r28
    2696:	49 96       	adiw	r24, 0x19	; 25
    2698:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>

      if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
    269c:	80 91 5e 0c 	lds	r24, 0x0C5E	; 0x800c5e <alreadyTimbrata>
    26a0:	81 11       	cpse	r24, r1
    26a2:	16 c0       	rjmp	.+44     	; 0x26d0 <loop+0x1a0>
    26a4:	ce 01       	movw	r24, r28
    26a6:	01 96       	adiw	r24, 0x01	; 1
    26a8:	0e 94 ac 06 	call	0xd58	; 0xd58 <_Z14GetCodeRfidATev>
    26ac:	be 01       	movw	r22, r28
    26ae:	6f 5f       	subi	r22, 0xFF	; 255
    26b0:	7f 4f       	sbci	r23, 0xFF	; 255
    26b2:	ce 01       	movw	r24, r28
    26b4:	49 96       	adiw	r24, 0x19	; 25
    26b6:	0e 94 8e 3d 	call	0x7b1c	; 0x7b1c <_ZN6StringaSEOS_>
    26ba:	ce 01       	movw	r24, r28
    26bc:	01 96       	adiw	r24, 0x01	; 1
    26be:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    26c2:	44 e6       	ldi	r20, 0x64	; 100
    26c4:	50 e0       	ldi	r21, 0x00	; 0
    26c6:	60 e0       	ldi	r22, 0x00	; 0
    26c8:	70 e0       	ldi	r23, 0x00	; 0
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	0e 94 84 04 	call	0x908	; 0x908 <_Z6Buzzerhm>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    26d0:	6c e4       	ldi	r22, 0x4C	; 76
    26d2:	73 e0       	ldi	r23, 0x03	; 3
    26d4:	ce 01       	movw	r24, r28
    26d6:	49 96       	adiw	r24, 0x19	; 25
    26d8:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <_ZNK6String6equalsEPKc>
      
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
    26dc:	81 11       	cpse	r24, r1
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <loop+0x1b4>
    26e0:	44 9b       	sbis	0x08, 4	; 8
    26e2:	d5 c2       	rjmp	.+1450   	; 0x2c8e <loop+0x75e>

         // Effettua chiamata REST per validare CARD NFC
         // Se la CARD è valida memorizza in memoria l'operazione e prosegui
         // Altrimenti Memorizza in Memoria e Azzera la procedura.
      
         stato_procedura++; // da commentare
    26e4:	80 91 1d 0c 	lds	r24, 0x0C1D	; 0x800c1d <stato_procedura>
    26e8:	90 91 1e 0c 	lds	r25, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    26ec:	01 96       	adiw	r24, 0x01	; 1
    26ee:	90 93 1e 0c 	sts	0x0C1E, r25	; 0x800c1e <stato_procedura+0x1>
    26f2:	80 93 1d 0c 	sts	0x0C1D, r24	; 0x800c1d <stato_procedura>
      righeDisplay[2] = "";
      righeDisplay[3] = "    Avvicina ATE  ";
    
      displayLCD(righeDisplay,stato_procedura,100);     
      
      String ATe = "ERRORE";
    26f6:	ce 01       	movw	r24, r28
    26f8:	49 96       	adiw	r24, 0x19	; 25
    26fa:	b7 c0       	rjmp	.+366    	; 0x286a <loop+0x33a>
          *****************************************************/
    }
    break;
    case 2:
    {   
      disable_ETH();
    26fc:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    2700:	8f e3       	ldi	r24, 0x3F	; 63
    2702:	9f e1       	ldi	r25, 0x1F	; 31
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <loop+0x1d4>
    2708:	00 c0       	rjmp	.+0      	; 0x270a <loop+0x1da>
    270a:	00 00       	nop
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    270c:	44 98       	cbi	0x08, 4	; 8
      // da commentare
      // Carburante = "D"; // Simulo Abilitazione Diesel
      // da commentare
      // Carburante = "B"; // Simulo Abilitazione Benzina
      
      TARGA = "";
    270e:	6f eb       	ldi	r22, 0xBF	; 191
    2710:	71 e0       	ldi	r23, 0x01	; 1
    2712:	84 ee       	ldi	r24, 0xE4	; 228
    2714:	9a e0       	ldi	r25, 0x0A	; 10
    2716:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      righeDisplay[1] =  "****** TARGA ******";
    271a:	6f ef       	ldi	r22, 0xFF	; 255
    271c:	74 e0       	ldi	r23, 0x04	; 4
    271e:	81 ec       	ldi	r24, 0xC1	; 193
    2720:	9b e0       	ldi	r25, 0x0B	; 11
    2722:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    2726:	6f eb       	ldi	r22, 0xBF	; 191
    2728:	71 e0       	ldi	r23, 0x01	; 1
    272a:	87 ec       	ldi	r24, 0xC7	; 199
    272c:	9b e0       	ldi	r25, 0x0B	; 11
    272e:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      righeDisplay[3] = "TARGA:";
    2732:	63 e1       	ldi	r22, 0x13	; 19
    2734:	75 e0       	ldi	r23, 0x05	; 5
    2736:	8d ec       	ldi	r24, 0xCD	; 205
    2738:	9b e0       	ldi	r25, 0x0B	; 11
    273a:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      displayLCD(righeDisplay,stato_procedura,10);
    273e:	60 91 1d 0c 	lds	r22, 0x0C1D	; 0x800c1d <stato_procedura>
    2742:	70 91 1e 0c 	lds	r23, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    2746:	4a e0       	ldi	r20, 0x0A	; 10
    2748:	50 e0       	ldi	r21, 0x00	; 0
    274a:	8b eb       	ldi	r24, 0xBB	; 187
    274c:	9b e0       	ldi	r25, 0x0B	; 11
    274e:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z10displayLCDP6Stringii>
      
      avanzaStato(TinputTarga);
    2752:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputTarga>
    2756:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputTarga+0x1>
    275a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputTarga+0x2>
    275e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputTarga+0x3>
    2762:	bd c0       	rjmp	.+378    	; 0x28de <loop+0x3ae>
    }
    break;
    case 3:
    {       
       getTastoPremuto_x_targa();
    2764:	b9 db       	rcall	.-2190   	; 0x1ed8 <_Z23getTastoPremuto_x_targav>
      String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC
    2766:	60 e0       	ldi	r22, 0x00	; 0
    2768:	ce 01       	movw	r24, r28
    276a:	07 96       	adiw	r24, 0x07	; 7
    276c:	0e 94 c9 05 	call	0xb92	; 0xb92 <_Z14leggiTAG_Mezzob>
    2770:	8f e3       	ldi	r24, 0x3F	; 63
    2772:	9c e9       	ldi	r25, 0x9C	; 156
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <loop+0x244>
    2778:	00 c0       	rjmp	.+0      	; 0x277a <loop+0x24a>
    277a:	00 00       	nop
      _delay_ms(10);

      Serial.println(mezzoString);
    277c:	be 01       	movw	r22, r28
    277e:	69 5f       	subi	r22, 0xF9	; 249
    2780:	7f 4f       	sbci	r23, 0xFF	; 255
    2782:	85 ed       	ldi	r24, 0xD5	; 213
    2784:	9d e0       	ldi	r25, 0x0D	; 13
    2786:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    278a:	2b 85       	ldd	r18, Y+11	; 0x0b
    278c:	3c 85       	ldd	r19, Y+12	; 0x0c
    278e:	45 e0       	ldi	r20, 0x05	; 5
    2790:	50 e0       	ldi	r21, 0x00	; 0
    2792:	be 01       	movw	r22, r28
    2794:	69 5f       	subi	r22, 0xF9	; 249
    2796:	7f 4f       	sbci	r23, 0xFF	; 255
    2798:	ce 01       	movw	r24, r28
    279a:	01 96       	adiw	r24, 0x01	; 1
    279c:	0e 94 e6 3e 	call	0x7dcc	; 0x7dcc <_ZNK6String9substringEjj>
      
      mezzo.Carb = mezzoString.substring(5);
    27a0:	be 01       	movw	r22, r28
    27a2:	6f 5f       	subi	r22, 0xFF	; 255
    27a4:	7f 4f       	sbci	r23, 0xFF	; 255
    27a6:	88 e6       	ldi	r24, 0x68	; 104
    27a8:	9c e0       	ldi	r25, 0x0C	; 12
    27aa:	0e 94 8e 3d 	call	0x7b1c	; 0x7b1c <_ZN6StringaSEOS_>
    27ae:	ce 01       	movw	r24, r28
    27b0:	01 96       	adiw	r24, 0x01	; 1
    27b2:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
      mezzo.TARGA = mezzoString.substring(0,5);
    27b6:	25 e0       	ldi	r18, 0x05	; 5
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	be 01       	movw	r22, r28
    27c0:	69 5f       	subi	r22, 0xF9	; 249
    27c2:	7f 4f       	sbci	r23, 0xFF	; 255
    27c4:	ce 01       	movw	r24, r28
    27c6:	01 96       	adiw	r24, 0x01	; 1
    27c8:	0e 94 e6 3e 	call	0x7dcc	; 0x7dcc <_ZNK6String9substringEjj>
    27cc:	be 01       	movw	r22, r28
    27ce:	6f 5f       	subi	r22, 0xFF	; 255
    27d0:	7f 4f       	sbci	r23, 0xFF	; 255
    27d2:	8e e6       	ldi	r24, 0x6E	; 110
    27d4:	9c e0       	ldi	r25, 0x0C	; 12
    27d6:	0e 94 8e 3d 	call	0x7b1c	; 0x7b1c <_ZN6StringaSEOS_>
    27da:	ce 01       	movw	r24, r28
    27dc:	01 96       	adiw	r24, 0x01	; 1
    27de:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
      mezzo.KM = 0;
    27e2:	10 92 74 0c 	sts	0x0C74, r1	; 0x800c74 <mezzo+0xc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    27e6:	60 ed       	ldi	r22, 0xD0	; 208
    27e8:	77 e0       	ldi	r23, 0x07	; 7
    27ea:	ce 01       	movw	r24, r28
    27ec:	01 96       	adiw	r24, 0x01	; 1
    27ee:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>

      Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
    27f2:	68 e6       	ldi	r22, 0x68	; 104
    27f4:	7c e0       	ldi	r23, 0x0C	; 12
    27f6:	ce 01       	movw	r24, r28
    27f8:	01 96       	adiw	r24, 0x01	; 1
    27fa:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
    27fe:	bc 01       	movw	r22, r24
    2800:	85 ed       	ldi	r24, 0xD5	; 213
    2802:	9d e0       	ldi	r25, 0x0D	; 13
    2804:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2808:	ce 01       	movw	r24, r28
    280a:	01 96       	adiw	r24, 0x01	; 1
    280c:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2810:	62 ee       	ldi	r22, 0xE2	; 226
    2812:	77 e0       	ldi	r23, 0x07	; 7
    2814:	ce 01       	movw	r24, r28
    2816:	01 96       	adiw	r24, 0x01	; 1
    2818:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
      Serial.println("TARGA: " + mezzo.TARGA);              
    281c:	6e e6       	ldi	r22, 0x6E	; 110
    281e:	7c e0       	ldi	r23, 0x0C	; 12
    2820:	ce 01       	movw	r24, r28
    2822:	01 96       	adiw	r24, 0x01	; 1
    2824:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
    2828:	bc 01       	movw	r22, r24
    282a:	85 ed       	ldi	r24, 0xD5	; 213
    282c:	9d e0       	ldi	r25, 0x0D	; 13
    282e:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2832:	ce 01       	movw	r24, r28
    2834:	01 96       	adiw	r24, 0x01	; 1
    2836:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>

      Carburante = mezzo.Carb;                 
    283a:	68 e6       	ldi	r22, 0x68	; 104
    283c:	7c e0       	ldi	r23, 0x0C	; 12
    283e:	8b ee       	ldi	r24, 0xEB	; 235
    2840:	9b e0       	ldi	r25, 0x0B	; 11
    2842:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <_ZN6StringaSERKS_>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2846:	65 ee       	ldi	r22, 0xE5	; 229
    2848:	71 e0       	ldi	r23, 0x01	; 1
    284a:	88 e6       	ldi	r24, 0x68	; 104
    284c:	9c e0       	ldi	r25, 0x0C	; 12
    284e:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <_ZNK6String6equalsEPKc>
      if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    2852:	81 11       	cpse	r24, r1
    2854:	d9 c2       	rjmp	.+1458   	; 0x2e08 <loop+0x8d8>
    2856:	63 e6       	ldi	r22, 0x63	; 99
    2858:	73 e0       	ldi	r23, 0x03	; 3
    285a:	88 e6       	ldi	r24, 0x68	; 104
    285c:	9c e0       	ldi	r25, 0x0C	; 12
    285e:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <_ZNK6String6equalsEPKc>
    2862:	81 11       	cpse	r24, r1
    2864:	d1 c2       	rjmp	.+1442   	; 0x2e08 <loop+0x8d8>
    }
    break;
    case 3:
    {       
       getTastoPremuto_x_targa();
      String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC
    2866:	ce 01       	movw	r24, r28
    2868:	07 96       	adiw	r24, 0x07	; 7
    286a:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
      }     
      
      // da commentare
      // avanzaStato(TselDistributore);  
    }
    break;
    286e:	d2 c1       	rjmp	.+932    	; 0x2c14 <loop+0x6e4>
    case 4:
    { 
    righeDisplay[1] =  "****** DISTRIBUTORE ******";
    2870:	6a ee       	ldi	r22, 0xEA	; 234
    2872:	77 e0       	ldi	r23, 0x07	; 7
    2874:	81 ec       	ldi	r24, 0xC1	; 193
    2876:	9b e0       	ldi	r25, 0x0B	; 11
    2878:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    righeDisplay[2] =  "";
    287c:	6f eb       	ldi	r22, 0xBF	; 191
    287e:	71 e0       	ldi	r23, 0x01	; 1
    2880:	87 ec       	ldi	r24, 0xC7	; 199
    2882:	9b e0       	ldi	r25, 0x0B	; 11
    2884:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    righeDisplay[3] = "**** SCEGLI ****";
    2888:	65 e0       	ldi	r22, 0x05	; 5
    288a:	78 e0       	ldi	r23, 0x08	; 8
    288c:	8d ec       	ldi	r24, 0xCD	; 205
    288e:	9b e0       	ldi	r25, 0x0B	; 11
    2890:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>

    displayLCD(righeDisplay,stato_procedura,100);
    2894:	60 91 1d 0c 	lds	r22, 0x0C1D	; 0x800c1d <stato_procedura>
    2898:	70 91 1e 0c 	lds	r23, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    289c:	44 e6       	ldi	r20, 0x64	; 100
    289e:	50 e0       	ldi	r21, 0x00	; 0
    28a0:	8b eb       	ldi	r24, 0xBB	; 187
    28a2:	9b e0       	ldi	r25, 0x0B	; 11
    28a4:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z10displayLCDP6Stringii>
    28a8:	65 ee       	ldi	r22, 0xE5	; 229
    28aa:	71 e0       	ldi	r23, 0x01	; 1
    28ac:	88 e6       	ldi	r24, 0x68	; 104
    28ae:	9c e0       	ldi	r25, 0x0C	; 12
    28b0:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <_ZNK6String6equalsEPKc>

    // Verifica scelta distributore
    
      if (mezzo.Carb == "B")
    28b4:	88 23       	and	r24, r24
    28b6:	b1 f0       	breq	.+44     	; 0x28e4 <loop+0x3b4>
      {
        abilitaPulser('B');
    28b8:	82 e4       	ldi	r24, 0x42	; 66
    28ba:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z13abilitaPulserc>
        Rele_Abilitazione2(0,7); // chiudi relè
    28be:	67 e0       	ldi	r22, 0x07	; 7
    28c0:	70 e0       	ldi	r23, 0x00	; 0
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0e 94 93 07 	call	0xf26	; 0xf26 <_Z18Rele_Abilitazione2ii>
        StatoAttuale = "BENZINA";
    28ca:	6b e5       	ldi	r22, 0x5B	; 91
    28cc:	73 e0       	ldi	r23, 0x03	; 3
    28ce:	89 e2       	ldi	r24, 0x29	; 41
    28d0:	9c e0       	ldi	r25, 0x0C	; 12
    28d2:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
        avanzaStato(10);
    28d6:	6a e0       	ldi	r22, 0x0A	; 10
    28d8:	70 e0       	ldi	r23, 0x00	; 0
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	0e 94 ab 05 	call	0xb56	; 0xb56 <_Z11avanzaStatom>
    28e2:	98 c1       	rjmp	.+816    	; 0x2c14 <loop+0x6e4>
    28e4:	63 e6       	ldi	r22, 0x63	; 99
    28e6:	73 e0       	ldi	r23, 0x03	; 3
    28e8:	88 e6       	ldi	r24, 0x68	; 104
    28ea:	9c e0       	ldi	r25, 0x0C	; 12
    28ec:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <_ZNK6String6equalsEPKc>
      }
      else if (mezzo.Carb == "D")
    28f0:	88 23       	and	r24, r24
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <loop+0x3c6>
    28f4:	8f c1       	rjmp	.+798    	; 0x2c14 <loop+0x6e4>
      {
        abilitaPulser('D');
    28f6:	84 e4       	ldi	r24, 0x44	; 68
    28f8:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z13abilitaPulserc>
        Rele_Abilitazione1(0,7); // chiudi relè
    28fc:	67 e0       	ldi	r22, 0x07	; 7
    28fe:	70 e0       	ldi	r23, 0x00	; 0
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_Z18Rele_Abilitazione1ii>
        StatoAttuale = "GASOLIO";
    2908:	65 e6       	ldi	r22, 0x65	; 101
    290a:	73 e0       	ldi	r23, 0x03	; 3
    290c:	e0 cf       	rjmp	.-64     	; 0x28ce <loop+0x39e>
    break;
    case 5:
    {             
      // VALIDA MEZZO CON WBSERVICES
      
      impulsi = 0;
    290e:	10 92 1c 0c 	sts	0x0C1C, r1	; 0x800c1c <impulsi+0x1>
    2912:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <impulsi>
      
      righeDisplay[1] = "**** Distributore ****";
    2916:	66 e1       	ldi	r22, 0x16	; 22
    2918:	78 e0       	ldi	r23, 0x08	; 8
    291a:	81 ec       	ldi	r24, 0xC1	; 193
    291c:	9b e0       	ldi	r25, 0x0B	; 11
    291e:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    2922:	6f eb       	ldi	r22, 0xBF	; 191
    2924:	71 e0       	ldi	r23, 0x01	; 1
    2926:	87 ec       	ldi	r24, 0xC7	; 199
    2928:	9b e0       	ldi	r25, 0x0B	; 11
    292a:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    292e:	6d e2       	ldi	r22, 0x2D	; 45
    2930:	78 e0       	ldi	r23, 0x08	; 8
    2932:	ce 01       	movw	r24, r28
    2934:	01 96       	adiw	r24, 0x01	; 1
    2936:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
      righeDisplay[3] = "***** " + StatoAttuale + " *****";
    293a:	69 e2       	ldi	r22, 0x29	; 41
    293c:	7c e0       	ldi	r23, 0x0C	; 12
    293e:	ce 01       	movw	r24, r28
    2940:	01 96       	adiw	r24, 0x01	; 1
    2942:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
    2946:	64 e3       	ldi	r22, 0x34	; 52
    2948:	78 e0       	ldi	r23, 0x08	; 8
    294a:	0e 94 83 3e 	call	0x7d06	; 0x7d06 <_ZplRK15StringSumHelperPKc>
    294e:	bc 01       	movw	r22, r24
    2950:	8d ec       	ldi	r24, 0xCD	; 205
    2952:	9b e0       	ldi	r25, 0x0B	; 11
    2954:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2958:	ce 01       	movw	r24, r28
    295a:	01 96       	adiw	r24, 0x01	; 1
    295c:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
      
      displayLCD(righeDisplay,stato_procedura,100);
    2960:	60 91 1d 0c 	lds	r22, 0x0C1D	; 0x800c1d <stato_procedura>
    2964:	70 91 1e 0c 	lds	r23, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    2968:	44 e6       	ldi	r20, 0x64	; 100
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	8b eb       	ldi	r24, 0xBB	; 187
    296e:	9b e0       	ldi	r25, 0x0B	; 11
    2970:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z10displayLCDP6Stringii>

      avanzaStato(20);
    2974:	64 e1       	ldi	r22, 0x14	; 20
    2976:	70 e0       	ldi	r23, 0x00	; 0
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	b0 cf       	rjmp	.-160    	; 0x28de <loop+0x3ae>
    }
    break;
    case 6:
    { 
      double lt = impulsiToLitri(impulsi);      
    297e:	80 91 1b 0c 	lds	r24, 0x0C1B	; 0x800c1b <impulsi>
    2982:	90 91 1c 0c 	lds	r25, 0x0C1C	; 0x800c1c <impulsi+0x1>
    2986:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_Z14impulsiToLitrii>
    298a:	6b 01       	movw	r12, r22
    298c:	7c 01       	movw	r14, r24
      
      righeDisplay[1] = "LITRI :" + String(lt);
    298e:	22 e0       	ldi	r18, 0x02	; 2
    2990:	ab 01       	movw	r20, r22
    2992:	bc 01       	movw	r22, r24
    2994:	ce 01       	movw	r24, r28
    2996:	07 96       	adiw	r24, 0x07	; 7
    2998:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <_ZN6StringC1Edh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    299c:	6b e3       	ldi	r22, 0x3B	; 59
    299e:	78 e0       	ldi	r23, 0x08	; 8
    29a0:	ce 01       	movw	r24, r28
    29a2:	01 96       	adiw	r24, 0x01	; 1
    29a4:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    29a8:	be 01       	movw	r22, r28
    29aa:	69 5f       	subi	r22, 0xF9	; 249
    29ac:	7f 4f       	sbci	r23, 0xFF	; 255
    29ae:	ce 01       	movw	r24, r28
    29b0:	01 96       	adiw	r24, 0x01	; 1
    29b2:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
    29b6:	bc 01       	movw	r22, r24
    29b8:	81 ec       	ldi	r24, 0xC1	; 193
    29ba:	9b e0       	ldi	r25, 0x0B	; 11
    29bc:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    29c0:	ce 01       	movw	r24, r28
    29c2:	01 96       	adiw	r24, 0x01	; 1
    29c4:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    29c8:	ce 01       	movw	r24, r28
    29ca:	07 96       	adiw	r24, 0x07	; 7
    29cc:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
      righeDisplay[2] = "";     
    29d0:	6f eb       	ldi	r22, 0xBF	; 191
    29d2:	71 e0       	ldi	r23, 0x01	; 1
    29d4:	87 ec       	ldi	r24, 0xC7	; 199
    29d6:	9b e0       	ldi	r25, 0x0B	; 11
    29d8:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    29dc:	63 e4       	ldi	r22, 0x43	; 67
    29de:	78 e0       	ldi	r23, 0x08	; 8
    29e0:	ce 01       	movw	r24, r28
    29e2:	01 96       	adiw	r24, 0x01	; 1
    29e4:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
      righeDisplay[3] = "Erogazione: " + StatoAttuale;
    29e8:	69 e2       	ldi	r22, 0x29	; 41
    29ea:	7c e0       	ldi	r23, 0x0C	; 12
    29ec:	ce 01       	movw	r24, r28
    29ee:	01 96       	adiw	r24, 0x01	; 1
    29f0:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
    29f4:	bc 01       	movw	r22, r24
    29f6:	8d ec       	ldi	r24, 0xCD	; 205
    29f8:	9b e0       	ldi	r25, 0x0B	; 11
    29fa:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    29fe:	ce 01       	movw	r24, r28
    2a00:	01 96       	adiw	r24, 0x01	; 1
    2a02:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
      
      displayLCD(righeDisplay,stato_procedura,100);   
    2a06:	60 91 1d 0c 	lds	r22, 0x0C1D	; 0x800c1d <stato_procedura>
    2a0a:	70 91 1e 0c 	lds	r23, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    2a0e:	44 e6       	ldi	r20, 0x64	; 100
    2a10:	50 e0       	ldi	r21, 0x00	; 0
    2a12:	8b eb       	ldi	r24, 0xBB	; 187
    2a14:	9b e0       	ldi	r25, 0x0B	; 11
    2a16:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z10displayLCDP6Stringii>

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
    2a1a:	01 9b       	sbis	0x00, 1	; 0
    2a1c:	08 c0       	rjmp	.+16     	; 0x2a2e <loop+0x4fe>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2a1e:	63 e6       	ldi	r22, 0x63	; 99
    2a20:	73 e0       	ldi	r23, 0x03	; 3
    2a22:	8b ee       	ldi	r24, 0xEB	; 235
    2a24:	9b e0       	ldi	r25, 0x0B	; 11
    2a26:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <_ZNK6String6equalsEPKc>
    2a2a:	81 11       	cpse	r24, r1
    2a2c:	04 c2       	rjmp	.+1032   	; 0x2e36 <loop+0x906>
        avanzaStato(10);
      }
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
    2a2e:	19 9b       	sbis	0x03, 1	; 3
    2a30:	f1 c0       	rjmp	.+482    	; 0x2c14 <loop+0x6e4>
    2a32:	65 ee       	ldi	r22, 0xE5	; 229
    2a34:	71 e0       	ldi	r23, 0x01	; 1
    2a36:	8b ee       	ldi	r24, 0xEB	; 235
    2a38:	9b e0       	ldi	r25, 0x0B	; 11
    2a3a:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <_ZNK6String6equalsEPKc>
    2a3e:	81 11       	cpse	r24, r1
    2a40:	25 c2       	rjmp	.+1098   	; 0x2e8c <loop+0x95c>
    2a42:	e8 c0       	rjmp	.+464    	; 0x2c14 <loop+0x6e4>
      /**************************************
       Control_WIFI(1);
       _delay_ms(2000);
      /**************************************/
      
      righeDisplay[1] =  "";      
    2a44:	6f eb       	ldi	r22, 0xBF	; 191
    2a46:	71 e0       	ldi	r23, 0x01	; 1
    2a48:	81 ec       	ldi	r24, 0xC1	; 193
    2a4a:	9b e0       	ldi	r25, 0x0B	; 11
    2a4c:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      righeDisplay[2] = "Invio........";
    2a50:	60 e5       	ldi	r22, 0x50	; 80
    2a52:	78 e0       	ldi	r23, 0x08	; 8
    2a54:	87 ec       	ldi	r24, 0xC7	; 199
    2a56:	9b e0       	ldi	r25, 0x0B	; 11
    2a58:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    2a5c:	6f eb       	ldi	r22, 0xBF	; 191
    2a5e:	71 e0       	ldi	r23, 0x01	; 1
    2a60:	8d ec       	ldi	r24, 0xCD	; 205
    2a62:	9b e0       	ldi	r25, 0x0B	; 11
    2a64:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
          
      if (BIT_IS_CLEAR(PORTC,4)) 
    2a68:	44 99       	sbic	0x08, 4	; 8
    2a6a:	d4 c0       	rjmp	.+424    	; 0x2c14 <loop+0x6e4>
      {
        displayLCD(righeDisplay,stato_procedura,10);  
    2a6c:	60 91 1d 0c 	lds	r22, 0x0C1D	; 0x800c1d <stato_procedura>
    2a70:	70 91 1e 0c 	lds	r23, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    2a74:	4a e0       	ldi	r20, 0x0A	; 10
    2a76:	50 e0       	ldi	r21, 0x00	; 0
    2a78:	8b eb       	ldi	r24, 0xBB	; 187
    2a7a:	9b e0       	ldi	r25, 0x0B	; 11
    2a7c:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z10displayLCDP6Stringii>
        InizializzaEthernet();
    2a80:	0e 94 90 0c 	call	0x1920	; 0x1920 <_Z19InizializzaEthernetv>
    2a84:	9f ef       	ldi	r25, 0xFF	; 255
    2a86:	23 ed       	ldi	r18, 0xD3	; 211
    2a88:	80 e3       	ldi	r24, 0x30	; 48
    2a8a:	91 50       	subi	r25, 0x01	; 1
    2a8c:	20 40       	sbci	r18, 0x00	; 0
    2a8e:	80 40       	sbci	r24, 0x00	; 0
    2a90:	e1 f7       	brne	.-8      	; 0x2a8a <loop+0x55a>
    2a92:	00 c0       	rjmp	.+0      	; 0x2a94 <loop+0x564>
    2a94:	00 00       	nop
        _delay_ms(1000);
        //Control_WIFI(0);
        
        Messaggio = ""; 
    2a96:	6f eb       	ldi	r22, 0xBF	; 191
    2a98:	71 e0       	ldi	r23, 0x01	; 1
    2a9a:	83 ed       	ldi	r24, 0xD3	; 211
    2a9c:	9b e0       	ldi	r25, 0x0B	; 11
    2a9e:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
    2aa2:	01 ef       	ldi	r16, 0xF1	; 241
    2aa4:	1b e0       	ldi	r17, 0x0B	; 11
    2aa6:	89 e0       	ldi	r24, 0x09	; 9
    2aa8:	e8 2e       	mov	r14, r24
    2aaa:	8c e0       	ldi	r24, 0x0C	; 12
    2aac:	f8 2e       	mov	r15, r24
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2aae:	b8 01       	movw	r22, r16
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	01 96       	adiw	r24, 0x01	; 1
    2ab4:	0e 94 86 3d 	call	0x7b0c	; 0x7b0c <_ZN6StringC1ERKS_>
        
        for (int k = 0;k<4;k++)
          Messaggio.concat(RaccoltaDati[k]+";");        
    2ab8:	6e e5       	ldi	r22, 0x5E	; 94
    2aba:	78 e0       	ldi	r23, 0x08	; 8
    2abc:	ce 01       	movw	r24, r28
    2abe:	01 96       	adiw	r24, 0x01	; 1
    2ac0:	0e 94 83 3e 	call	0x7d06	; 0x7d06 <_ZplRK15StringSumHelperPKc>
    2ac4:	bc 01       	movw	r22, r24
    2ac6:	83 ed       	ldi	r24, 0xD3	; 211
    2ac8:	9b e0       	ldi	r25, 0x0B	; 11
    2aca:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2ace:	ce 01       	movw	r24, r28
    2ad0:	01 96       	adiw	r24, 0x01	; 1
    2ad2:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    2ad6:	0a 5f       	subi	r16, 0xFA	; 250
    2ad8:	1f 4f       	sbci	r17, 0xFF	; 255
        _delay_ms(1000);
        //Control_WIFI(0);
        
        Messaggio = ""; 
        
        for (int k = 0;k<4;k++)
    2ada:	e0 16       	cp	r14, r16
    2adc:	f1 06       	cpc	r15, r17
    2ade:	39 f7       	brne	.-50     	; 0x2aae <loop+0x57e>
          Messaggio.concat(RaccoltaDati[k]+";");        
        
        //Messaggio = "000;2149016745;00001;2658;Diesel;70.00";
        CompletoRifornimentoPerInvioDati(stato_procedura);
    2ae0:	80 91 1d 0c 	lds	r24, 0x0C1D	; 0x800c1d <stato_procedura>
    2ae4:	90 91 1e 0c 	lds	r25, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    2ae8:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_Z32CompletoRifornimentoPerInvioDatii>
        
        if(InviaRifornimento(stato_procedura,Connected,MessaggioToServer,100,""))
    2aec:	6f eb       	ldi	r22, 0xBF	; 191
    2aee:	71 e0       	ldi	r23, 0x01	; 1
    2af0:	ce 01       	movw	r24, r28
    2af2:	01 96       	adiw	r24, 0x01	; 1
    2af4:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    2af8:	60 91 1f 0c 	lds	r22, 0x0C1F	; 0x800c1f <Connected>
    2afc:	70 91 20 0c 	lds	r23, 0x0C20	; 0x800c20 <Connected+0x1>
    2b00:	8e 01       	movw	r16, r28
    2b02:	0f 5f       	subi	r16, 0xFF	; 255
    2b04:	1f 4f       	sbci	r17, 0xFF	; 255
    2b06:	24 e6       	ldi	r18, 0x64	; 100
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	47 e5       	ldi	r20, 0x57	; 87
    2b0c:	5b e0       	ldi	r21, 0x0B	; 11
    2b0e:	80 91 1d 0c 	lds	r24, 0x0C1D	; 0x800c1d <stato_procedura>
    2b12:	90 91 1e 0c 	lds	r25, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    2b16:	8a dc       	rcall	.-1772   	; 0x242c <_Z17InviaRifornimentoiiPci6String>
    2b18:	18 2f       	mov	r17, r24
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	01 96       	adiw	r24, 0x01	; 1
    2b1e:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    2b22:	11 23       	and	r17, r17
    2b24:	41 f1       	breq	.+80     	; 0x2b76 <loop+0x646>
        { 
       
          disable_ETH();
    2b26:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
          
          righeDisplay[1] = "";
    2b2a:	6f eb       	ldi	r22, 0xBF	; 191
    2b2c:	71 e0       	ldi	r23, 0x01	; 1
    2b2e:	81 ec       	ldi	r24, 0xC1	; 193
    2b30:	9b e0       	ldi	r25, 0x0B	; 11
    2b32:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
          righeDisplay[2] = " Dati Inviati ";
    2b36:	60 e6       	ldi	r22, 0x60	; 96
    2b38:	78 e0       	ldi	r23, 0x08	; 8
    2b3a:	87 ec       	ldi	r24, 0xC7	; 199
    2b3c:	9b e0       	ldi	r25, 0x0B	; 11
    2b3e:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
          righeDisplay[3] =  "";
    2b42:	6f eb       	ldi	r22, 0xBF	; 191
    2b44:	71 e0       	ldi	r23, 0x01	; 1
    2b46:	8d ec       	ldi	r24, 0xCD	; 205
    2b48:	9b e0       	ldi	r25, 0x0B	; 11
    2b4a:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
          
          displayLCD(righeDisplay,stato_procedura,100);
    2b4e:	60 91 1d 0c 	lds	r22, 0x0C1D	; 0x800c1d <stato_procedura>
    2b52:	70 91 1e 0c 	lds	r23, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    2b56:	44 e6       	ldi	r20, 0x64	; 100
    2b58:	50 e0       	ldi	r21, 0x00	; 0
    2b5a:	8b eb       	ldi	r24, 0xBB	; 187
    2b5c:	9b e0       	ldi	r25, 0x0B	; 11
    2b5e:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z10displayLCDP6Stringii>
    2b62:	9f ef       	ldi	r25, 0xFF	; 255
    2b64:	29 ef       	ldi	r18, 0xF9	; 249
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	91 50       	subi	r25, 0x01	; 1
    2b6a:	20 40       	sbci	r18, 0x00	; 0
    2b6c:	80 40       	sbci	r24, 0x00	; 0
    2b6e:	e1 f7       	brne	.-8      	; 0x2b68 <loop+0x638>
    2b70:	00 c0       	rjmp	.+0      	; 0x2b72 <loop+0x642>
    2b72:	00 00       	nop
    2b74:	4e c0       	rjmp	.+156    	; 0x2c12 <loop+0x6e2>
          
          Azzera();
        }
        else { 
           // stato_procedura++;
           avanzaStato(TmaxSalvataggio);
    2b76:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxSalvataggio>
    2b7a:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxSalvataggio+0x1>
    2b7e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxSalvataggio+0x2>
    2b82:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxSalvataggio+0x3>
    2b86:	ab ce       	rjmp	.-682    	; 0x28de <loop+0x3ae>
      }
    }
    break;
    case 8:
    { 
          righeDisplay[1] =  "";
    2b88:	6f eb       	ldi	r22, 0xBF	; 191
    2b8a:	71 e0       	ldi	r23, 0x01	; 1
    2b8c:	81 ec       	ldi	r24, 0xC1	; 193
    2b8e:	9b e0       	ldi	r25, 0x0B	; 11
    2b90:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
          righeDisplay[2] = "Salvo Dati........";
    2b94:	6f e6       	ldi	r22, 0x6F	; 111
    2b96:	78 e0       	ldi	r23, 0x08	; 8
    2b98:	87 ec       	ldi	r24, 0xC7	; 199
    2b9a:	9b e0       	ldi	r25, 0x0B	; 11
    2b9c:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
          righeDisplay[3] =  "";  
    2ba0:	6f eb       	ldi	r22, 0xBF	; 191
    2ba2:	71 e0       	ldi	r23, 0x01	; 1
    2ba4:	8d ec       	ldi	r24, 0xCD	; 205
    2ba6:	9b e0       	ldi	r25, 0x0B	; 11
    2ba8:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
          displayLCD(righeDisplay,stato_procedura,10);
    2bac:	60 91 1d 0c 	lds	r22, 0x0C1D	; 0x800c1d <stato_procedura>
    2bb0:	70 91 1e 0c 	lds	r23, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    2bb4:	4a e0       	ldi	r20, 0x0A	; 10
    2bb6:	50 e0       	ldi	r21, 0x00	; 0
    2bb8:	8b eb       	ldi	r24, 0xBB	; 187
    2bba:	9b e0       	ldi	r25, 0x0B	; 11
    2bbc:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z10displayLCDP6Stringii>
    2bc0:	8f e1       	ldi	r24, 0x1F	; 31
    2bc2:	9e e4       	ldi	r25, 0x4E	; 78
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	f1 f7       	brne	.-4      	; 0x2bc4 <loop+0x694>
    2bc8:	00 c0       	rjmp	.+0      	; 0x2bca <loop+0x69a>
    2bca:	00 00       	nop
          /*******************************/
          _delay_ms(5);
          disable_ETH();
    2bcc:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
          Serial.println("ETH Disabilitata");
    2bd0:	62 e8       	ldi	r22, 0x82	; 130
    2bd2:	78 e0       	ldi	r23, 0x08	; 8
    2bd4:	85 ed       	ldi	r24, 0xD5	; 213
    2bd6:	9d e0       	ldi	r25, 0x0D	; 13
    2bd8:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
    2bdc:	8f e1       	ldi	r24, 0x1F	; 31
    2bde:	9e e4       	ldi	r25, 0x4E	; 78
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <loop+0x6b0>
    2be4:	00 c0       	rjmp	.+0      	; 0x2be6 <loop+0x6b6>
    2be6:	00 00       	nop
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
    2be8:	2c 98       	cbi	0x05, 4	; 5
          disable_ETH();
          Serial.println("ETH Disabilitata");
          /*******************************/
          _delay_ms(5);
          enable_FLASH();
          Serial.println("FLASH Ablitata");
    2bea:	63 e9       	ldi	r22, 0x93	; 147
    2bec:	78 e0       	ldi	r23, 0x08	; 8
    2bee:	85 ed       	ldi	r24, 0xD5	; 213
    2bf0:	9d e0       	ldi	r25, 0x0D	; 13
    2bf2:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
          printLine();
    2bf6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
          /******************************/        
          FlashpowerUp(); 
    2bfa:	0e 94 4b 03 	call	0x696	; 0x696 <_Z12FlashpowerUpv>
    2bfe:	8f e1       	ldi	r24, 0x1F	; 31
    2c00:	9e e4       	ldi	r25, 0x4E	; 78
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	f1 f7       	brne	.-4      	; 0x2c02 <loop+0x6d2>
    2c06:	00 c0       	rjmp	.+0      	; 0x2c08 <loop+0x6d8>
    2c08:	00 00       	nop
          _delay_ms(5); 
          //erogazioniSaver(addr_erog,Messaggio);   
          //_delay_ms(50);
          FlashpowerDown();          
    2c0a:	0e 94 17 03 	call	0x62e	; 0x62e <_Z14FlashpowerDownv>
          printLine();
    2c0e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z9printLinev>
          Azzera();
    2c12:	74 db       	rcall	.-2328   	; 0x22fc <_Z6Azzerav>
    {      
    }
    break;
  }

  nowTimer = DS3231M.now();
    2c14:	66 e0       	ldi	r22, 0x06	; 6
    2c16:	7b e0       	ldi	r23, 0x0B	; 11
    2c18:	ce 01       	movw	r24, r28
    2c1a:	01 96       	adiw	r24, 0x01	; 1
    2c1c:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <_ZN13DS3231M_Class3nowEv>
    2c20:	86 e0       	ldi	r24, 0x06	; 6
    2c22:	fe 01       	movw	r30, r28
    2c24:	31 96       	adiw	r30, 0x01	; 1
    2c26:	a4 ef       	ldi	r26, 0xF4	; 244
    2c28:	ba e0       	ldi	r27, 0x0A	; 10
    2c2a:	01 90       	ld	r0, Z+
    2c2c:	0d 92       	st	X+, r0
    2c2e:	8a 95       	dec	r24
  secs = nowTimer.secondstime();
    2c30:	e1 f7       	brne	.-8      	; 0x2c2a <loop+0x6fa>
    2c32:	84 ef       	ldi	r24, 0xF4	; 244
    2c34:	9a e0       	ldi	r25, 0x0A	; 10
    2c36:	d6 d7       	rcall	.+4012   	; 0x3be4 <_ZNK8DateTime11secondstimeEv>
    2c38:	60 93 02 0b 	sts	0x0B02, r22	; 0x800b02 <secs>
    2c3c:	70 93 03 0b 	sts	0x0B03, r23	; 0x800b03 <secs+0x1>
    2c40:	80 93 04 0b 	sts	0x0B04, r24	; 0x800b04 <secs+0x2>
    2c44:	90 93 05 0b 	sts	0x0B05, r25	; 0x800b05 <secs+0x3>
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();
    2c48:	00 91 fe 0a 	lds	r16, 0x0AFE	; 0x800afe <UltimoPassaggioStato>
    2c4c:	10 91 ff 0a 	lds	r17, 0x0AFF	; 0x800aff <UltimoPassaggioStato+0x1>
    2c50:	20 91 00 0b 	lds	r18, 0x0B00	; 0x800b00 <UltimoPassaggioStato+0x2>
    2c54:	30 91 01 0b 	lds	r19, 0x0B01	; 0x800b01 <UltimoPassaggioStato+0x3>
    2c58:	c0 90 fa 0a 	lds	r12, 0x0AFA	; 0x800afa <Timer>
    2c5c:	d0 90 fb 0a 	lds	r13, 0x0AFB	; 0x800afb <Timer+0x1>
    2c60:	e0 90 fc 0a 	lds	r14, 0x0AFC	; 0x800afc <Timer+0x2>
    2c64:	f0 90 fd 0a 	lds	r15, 0x0AFD	; 0x800afd <Timer+0x3>
    2c68:	0c 0d       	add	r16, r12
    2c6a:	1d 1d       	adc	r17, r13
    2c6c:	2e 1d       	adc	r18, r14
    2c6e:	3f 1d       	adc	r19, r15
    2c70:	68 01       	movw	r12, r16
    2c72:	79 01       	movw	r14, r18
    2c74:	c6 1a       	sub	r12, r22
    2c76:	d7 0a       	sbc	r13, r23
    2c78:	e8 0a       	sbc	r14, r24
    2c7a:	f9 0a       	sbc	r15, r25
    2c7c:	d7 01       	movw	r26, r14
    2c7e:	c6 01       	movw	r24, r12
    2c80:	02 97       	sbiw	r24, 0x02	; 2
    2c82:	a1 05       	cpc	r26, r1
    2c84:	b1 05       	cpc	r27, r1
    2c86:	08 f0       	brcs	.+2      	; 0x2c8a <loop+0x75a>
    2c88:	26 c1       	rjmp	.+588    	; 0x2ed6 <loop+0x9a6>
    2c8a:	38 db       	rcall	.-2448   	; 0x22fc <_Z6Azzerav>

}
    2c8c:	24 c1       	rjmp	.+584    	; 0x2ed6 <loop+0x9a6>

      if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
      
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
        { 
           Serial.println("");
    2c8e:	6f eb       	ldi	r22, 0xBF	; 191
    2c90:	71 e0       	ldi	r23, 0x01	; 1
    2c92:	85 ed       	ldi	r24, 0xD5	; 213
    2c94:	9d e0       	ldi	r25, 0x0D	; 13
    2c96:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
           Serial.print("***************************************************************");
    2c9a:	62 ea       	ldi	r22, 0xA2	; 162
    2c9c:	78 e0       	ldi	r23, 0x08	; 8
    2c9e:	85 ed       	ldi	r24, 0xD5	; 213
    2ca0:	9d e0       	ldi	r25, 0x0D	; 13
    2ca2:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2ca6:	62 ee       	ldi	r22, 0xE2	; 226
    2ca8:	78 e0       	ldi	r23, 0x08	; 8
    2caa:	ce 01       	movw	r24, r28
    2cac:	01 96       	adiw	r24, 0x01	; 1
    2cae:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
           Serial.println(" Tessera ID : " + ATe);
    2cb2:	be 01       	movw	r22, r28
    2cb4:	67 5e       	subi	r22, 0xE7	; 231
    2cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb8:	ce 01       	movw	r24, r28
    2cba:	01 96       	adiw	r24, 0x01	; 1
    2cbc:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
    2cc0:	bc 01       	movw	r22, r24
    2cc2:	85 ed       	ldi	r24, 0xD5	; 213
    2cc4:	9d e0       	ldi	r25, 0x0D	; 13
    2cc6:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2cca:	ce 01       	movw	r24, r28
    2ccc:	01 96       	adiw	r24, 0x01	; 1
    2cce:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
           Serial.print("***************************************************************");
    2cd2:	62 ea       	ldi	r22, 0xA2	; 162
    2cd4:	78 e0       	ldi	r23, 0x08	; 8
    2cd6:	85 ed       	ldi	r24, 0xD5	; 213
    2cd8:	9d e0       	ldi	r25, 0x0D	; 13
    2cda:	0e 94 49 3a 	call	0x7492	; 0x7492 <_ZN5Print5printEPKc>
           Serial.println("Riconoscimento Tessera .............");
    2cde:	61 ef       	ldi	r22, 0xF1	; 241
    2ce0:	78 e0       	ldi	r23, 0x08	; 8
    2ce2:	85 ed       	ldi	r24, 0xD5	; 213
    2ce4:	9d e0       	ldi	r25, 0x0D	; 13
    2ce6:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
                     
           RaccoltaDati[0] = ATe;
    2cea:	be 01       	movw	r22, r28
    2cec:	67 5e       	subi	r22, 0xE7	; 231
    2cee:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf0:	81 ef       	ldi	r24, 0xF1	; 241
    2cf2:	9b e0       	ldi	r25, 0x0B	; 11
    2cf4:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <_ZN6StringaSERKS_>
           
           lcd.backlight();
    2cf8:	86 e4       	ldi	r24, 0x46	; 70
    2cfa:	9c e0       	ldi	r25, 0x0C	; 12
    2cfc:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN3LCD9backlightEv>
           lcd.display();          
    2d00:	86 e4       	ldi	r24, 0x46	; 70
    2d02:	9c e0       	ldi	r25, 0x0C	; 12
    2d04:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <_ZN3LCD7displayEv>
    2d08:	8f e3       	ldi	r24, 0x3F	; 63
    2d0a:	9c e9       	ldi	r25, 0x9C	; 156
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	f1 f7       	brne	.-4      	; 0x2d0c <loop+0x7dc>
    2d10:	00 c0       	rjmp	.+0      	; 0x2d12 <loop+0x7e2>
    2d12:	00 00       	nop
           _delay_ms(10);
            
           righeDisplay[1] = " * AUTENTICAZIONE *";
    2d14:	69 ea       	ldi	r22, 0xA9	; 169
    2d16:	77 e0       	ldi	r23, 0x07	; 7
    2d18:	81 ec       	ldi	r24, 0xC1	; 193
    2d1a:	9b e0       	ldi	r25, 0x0B	; 11
    2d1c:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
           righeDisplay[2] = "";
    2d20:	6f eb       	ldi	r22, 0xBF	; 191
    2d22:	71 e0       	ldi	r23, 0x01	; 1
    2d24:	87 ec       	ldi	r24, 0xC7	; 199
    2d26:	9b e0       	ldi	r25, 0x0B	; 11
    2d28:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2d2c:	66 e1       	ldi	r22, 0x16	; 22
    2d2e:	79 e0       	ldi	r23, 0x09	; 9
    2d30:	ce 01       	movw	r24, r28
    2d32:	01 96       	adiw	r24, 0x01	; 1
    2d34:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
           righeDisplay[3] = "   Rfid: " + ATe;
    2d38:	be 01       	movw	r22, r28
    2d3a:	67 5e       	subi	r22, 0xE7	; 231
    2d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d3e:	ce 01       	movw	r24, r28
    2d40:	01 96       	adiw	r24, 0x01	; 1
    2d42:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
    2d46:	bc 01       	movw	r22, r24
    2d48:	8d ec       	ldi	r24, 0xCD	; 205
    2d4a:	9b e0       	ldi	r25, 0x0B	; 11
    2d4c:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2d50:	ce 01       	movw	r24, r28
    2d52:	01 96       	adiw	r24, 0x01	; 1
    2d54:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
         
           displayLCD(righeDisplay,stato_procedura,100);
    2d58:	60 91 1d 0c 	lds	r22, 0x0C1D	; 0x800c1d <stato_procedura>
    2d5c:	70 91 1e 0c 	lds	r23, 0x0C1E	; 0x800c1e <stato_procedura+0x1>
    2d60:	44 e6       	ldi	r20, 0x64	; 100
    2d62:	50 e0       	ldi	r21, 0x00	; 0
    2d64:	8b eb       	ldi	r24, 0xBB	; 187
    2d66:	9b e0       	ldi	r25, 0x0B	; 11
    2d68:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z10displayLCDP6Stringii>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    2d6c:	8f ed       	ldi	r24, 0xDF	; 223
    2d6e:	99 e0       	ldi	r25, 0x09	; 9
    2d70:	9a 83       	std	Y+2, r25	; 0x02
    2d72:	89 83       	std	Y+1, r24	; 0x01
    2d74:	40 91 41 0b 	lds	r20, 0x0B41	; 0x800b41 <subnet+0x2>
    2d78:	50 91 42 0b 	lds	r21, 0x0B42	; 0x800b42 <subnet+0x3>
    2d7c:	60 91 43 0b 	lds	r22, 0x0B43	; 0x800b43 <subnet+0x4>
    2d80:	70 91 44 0b 	lds	r23, 0x0B44	; 0x800b44 <subnet+0x5>
    2d84:	4b 83       	std	Y+3, r20	; 0x03
    2d86:	5c 83       	std	Y+4, r21	; 0x04
    2d88:	6d 83       	std	Y+5, r22	; 0x05
    2d8a:	7e 83       	std	Y+6, r23	; 0x06
    2d8c:	98 87       	std	Y+8, r25	; 0x08
    2d8e:	8f 83       	std	Y+7, r24	; 0x07
    2d90:	40 91 47 0b 	lds	r20, 0x0B47	; 0x800b47 <gateway+0x2>
    2d94:	50 91 48 0b 	lds	r21, 0x0B48	; 0x800b48 <gateway+0x3>
    2d98:	60 91 49 0b 	lds	r22, 0x0B49	; 0x800b49 <gateway+0x4>
    2d9c:	70 91 4a 0b 	lds	r23, 0x0B4A	; 0x800b4a <gateway+0x5>
    2da0:	49 87       	std	Y+9, r20	; 0x09
    2da2:	5a 87       	std	Y+10, r21	; 0x0a
    2da4:	6b 87       	std	Y+11, r22	; 0x0b
    2da6:	7c 87       	std	Y+12, r23	; 0x0c
    2da8:	9e 87       	std	Y+14, r25	; 0x0e
    2daa:	8d 87       	std	Y+13, r24	; 0x0d
    2dac:	80 91 4d 0b 	lds	r24, 0x0B4D	; 0x800b4d <myDns+0x2>
    2db0:	90 91 4e 0b 	lds	r25, 0x0B4E	; 0x800b4e <myDns+0x3>
    2db4:	a0 91 4f 0b 	lds	r26, 0x0B4F	; 0x800b4f <myDns+0x4>
    2db8:	b0 91 50 0b 	lds	r27, 0x0B50	; 0x800b50 <myDns+0x5>
    2dbc:	8f 87       	std	Y+15, r24	; 0x0f
    2dbe:	98 8b       	std	Y+16, r25	; 0x10
    2dc0:	a9 8b       	std	Y+17, r26	; 0x11
    2dc2:	ba 8b       	std	Y+18, r27	; 0x12
           Ethernet.begin(mac, ip, myDns, gateway, subnet);
    2dc4:	6c e2       	ldi	r22, 0x2C	; 44
    2dc6:	71 e0       	ldi	r23, 0x01	; 1
    2dc8:	ce 01       	movw	r24, r28
    2dca:	43 96       	adiw	r24, 0x13	; 19
    2dcc:	0e 94 b6 39 	call	0x736c	; 0x736c <_ZN9IPAddressC1EPKh>
    2dd0:	ce 01       	movw	r24, r28
    2dd2:	01 96       	adiw	r24, 0x01	; 1
    2dd4:	7c 01       	movw	r14, r24
    2dd6:	8e 01       	movw	r16, r28
    2dd8:	09 5f       	subi	r16, 0xF9	; 249
    2dda:	1f 4f       	sbci	r17, 0xFF	; 255
    2ddc:	9e 01       	movw	r18, r28
    2dde:	23 5f       	subi	r18, 0xF3	; 243
    2de0:	3f 4f       	sbci	r19, 0xFF	; 255
    2de2:	ae 01       	movw	r20, r28
    2de4:	4d 5e       	subi	r20, 0xED	; 237
    2de6:	5f 4f       	sbci	r21, 0xFF	; 255
    2de8:	66 e2       	ldi	r22, 0x26	; 38
    2dea:	71 e0       	ldi	r23, 0x01	; 1
    2dec:	8b ec       	ldi	r24, 0xCB	; 203
    2dee:	9c e0       	ldi	r25, 0x0C	; 12
    2df0:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
    2df4:	9f ef       	ldi	r25, 0xFF	; 255
    2df6:	23 ed       	ldi	r18, 0xD3	; 211
    2df8:	80 e3       	ldi	r24, 0x30	; 48
    2dfa:	91 50       	subi	r25, 0x01	; 1
    2dfc:	20 40       	sbci	r18, 0x00	; 0
    2dfe:	80 40       	sbci	r24, 0x00	; 0
    2e00:	e1 f7       	brne	.-8      	; 0x2dfa <loop+0x8ca>
    2e02:	00 c0       	rjmp	.+0      	; 0x2e04 <loop+0x8d4>
    2e04:	00 00       	nop
    2e06:	6e cc       	rjmp	.-1828   	; 0x26e4 <loop+0x1b4>
      Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
      Serial.println("TARGA: " + mezzo.TARGA);              

      Carburante = mezzo.Carb;                 
      if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
        RaccoltaDati[1] = mezzo.TARGA;
    2e08:	6e e6       	ldi	r22, 0x6E	; 110
    2e0a:	7c e0       	ldi	r23, 0x0C	; 12
    2e0c:	87 ef       	ldi	r24, 0xF7	; 247
    2e0e:	9b e0       	ldi	r25, 0x0B	; 11
    2e10:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <_ZN6StringaSERKS_>
        RaccoltaDati[2] = mezzo.Carb;
    2e14:	68 e6       	ldi	r22, 0x68	; 104
    2e16:	7c e0       	ldi	r23, 0x0C	; 12
    2e18:	8d ef       	ldi	r24, 0xFD	; 253
    2e1a:	9b e0       	ldi	r25, 0x0B	; 11
    2e1c:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <_ZN6StringaSERKS_>
        avanzaStato(TselDistributore); 
    2e20:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    2e24:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    2e28:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    2e2c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    2e30:	0e 94 ab 05 	call	0xb56	; 0xb56 <_Z11avanzaStatom>
    2e34:	18 cd       	rjmp	.-1488   	; 0x2866 <loop+0x336>

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
      {       
        RaccoltaDati[3] = String(lt);
    2e36:	22 e0       	ldi	r18, 0x02	; 2
    2e38:	b7 01       	movw	r22, r14
    2e3a:	a6 01       	movw	r20, r12
    2e3c:	ce 01       	movw	r24, r28
    2e3e:	01 96       	adiw	r24, 0x01	; 1
    2e40:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <_ZN6StringC1Edh>
    2e44:	be 01       	movw	r22, r28
    2e46:	6f 5f       	subi	r22, 0xFF	; 255
    2e48:	7f 4f       	sbci	r23, 0xFF	; 255
    2e4a:	83 e0       	ldi	r24, 0x03	; 3
    2e4c:	9c e0       	ldi	r25, 0x0C	; 12
    2e4e:	0e 94 8e 3d 	call	0x7b1c	; 0x7b1c <_ZN6StringaSEOS_>
    2e52:	ce 01       	movw	r24, r28
    2e54:	01 96       	adiw	r24, 0x01	; 1
    2e56:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
        
        StatoAttuale = "STOP EROGAZIONE";
    2e5a:	60 e2       	ldi	r22, 0x20	; 32
    2e5c:	79 e0       	ldi	r23, 0x09	; 9
    2e5e:	89 e2       	ldi	r24, 0x29	; 41
    2e60:	9c e0       	ldi	r25, 0x0C	; 12
    2e62:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
        Rele_Abilitazione2(1,7); //  apri relè
    2e66:	67 e0       	ldi	r22, 0x07	; 7
    2e68:	70 e0       	ldi	r23, 0x00	; 0
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	0e 94 93 07 	call	0xf26	; 0xf26 <_Z18Rele_Abilitazione2ii>
        Rele_Abilitazione1(1,7); //  apri relè  
    2e72:	67 e0       	ldi	r22, 0x07	; 7
    2e74:	70 e0       	ldi	r23, 0x00	; 0
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_Z18Rele_Abilitazione1ii>
        // TOGGLE_BIT(PORTA,1);      
        avanzaStato(10);
    2e7e:	6a e0       	ldi	r22, 0x0A	; 10
    2e80:	70 e0       	ldi	r23, 0x00	; 0
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	0e 94 ab 05 	call	0xb56	; 0xb56 <_Z11avanzaStatom>
    2e8a:	d1 cd       	rjmp	.-1118   	; 0x2a2e <loop+0x4fe>
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
      {
        RaccoltaDati[3] = String(lt);
    2e8c:	22 e0       	ldi	r18, 0x02	; 2
    2e8e:	b7 01       	movw	r22, r14
    2e90:	a6 01       	movw	r20, r12
    2e92:	ce 01       	movw	r24, r28
    2e94:	01 96       	adiw	r24, 0x01	; 1
    2e96:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <_ZN6StringC1Edh>
    2e9a:	be 01       	movw	r22, r28
    2e9c:	6f 5f       	subi	r22, 0xFF	; 255
    2e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea0:	83 e0       	ldi	r24, 0x03	; 3
    2ea2:	9c e0       	ldi	r25, 0x0C	; 12
    2ea4:	0e 94 8e 3d 	call	0x7b1c	; 0x7b1c <_ZN6StringaSEOS_>
    2ea8:	ce 01       	movw	r24, r28
    2eaa:	01 96       	adiw	r24, 0x01	; 1
    2eac:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
        
        StatoAttuale = "STOP EROGAZIONE";
    2eb0:	60 e2       	ldi	r22, 0x20	; 32
    2eb2:	79 e0       	ldi	r23, 0x09	; 9
    2eb4:	89 e2       	ldi	r24, 0x29	; 41
    2eb6:	9c e0       	ldi	r25, 0x0C	; 12
    2eb8:	0e 94 99 3d 	call	0x7b32	; 0x7b32 <_ZN6StringaSEPKc>
        Rele_Abilitazione2(1,7); //  apri relè
    2ebc:	67 e0       	ldi	r22, 0x07	; 7
    2ebe:	70 e0       	ldi	r23, 0x00	; 0
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	0e 94 93 07 	call	0xf26	; 0xf26 <_Z18Rele_Abilitazione2ii>
        Rele_Abilitazione1(1,7); //  apri relè        
    2ec8:	67 e0       	ldi	r22, 0x07	; 7
    2eca:	70 e0       	ldi	r23, 0x00	; 0
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_Z18Rele_Abilitazione1ii>
    2ed4:	00 cd       	rjmp	.-1536   	; 0x28d6 <loop+0x3a6>

  nowTimer = DS3231M.now();
  secs = nowTimer.secondstime();
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();

}
    2ed6:	6e 96       	adiw	r28, 0x1e	; 30
    2ed8:	0f b6       	in	r0, 0x3f	; 63
    2eda:	f8 94       	cli
    2edc:	de bf       	out	0x3e, r29	; 62
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	cd bf       	out	0x3d, r28	; 61
    2ee2:	df 91       	pop	r29
    2ee4:	cf 91       	pop	r28
    2ee6:	1f 91       	pop	r17
    2ee8:	0f 91       	pop	r16
    2eea:	ff 90       	pop	r15
    2eec:	ef 90       	pop	r14
    2eee:	df 90       	pop	r13
    2ef0:	cf 90       	pop	r12
    2ef2:	08 95       	ret

00002ef4 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    #endif
    return false;
  }

  return true;
}
    2ef4:	20 91 0f 0d 	lds	r18, 0x0D0F	; 0x800d0f <_ZN8SPIClass13interruptModeE>
    2ef8:	22 23       	and	r18, r18
    2efa:	99 f0       	breq	.+38     	; 0x2f22 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    2efc:	4f b7       	in	r20, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	20 91 0f 0d 	lds	r18, 0x0D0F	; 0x800d0f <_ZN8SPIClass13interruptModeE>
    2f04:	21 30       	cpi	r18, 0x01	; 1
    2f06:	59 f4       	brne	.+22     	; 0x2f1e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    2f08:	2d b3       	in	r18, 0x1d	; 29
    2f0a:	20 93 0d 0d 	sts	0x0D0D, r18	; 0x800d0d <_ZN8SPIClass13interruptSaveE>
    2f0e:	3d b3       	in	r19, 0x1d	; 29
    2f10:	20 91 0e 0d 	lds	r18, 0x0D0E	; 0x800d0e <_ZN8SPIClass13interruptMaskE>
    2f14:	20 95       	com	r18
    2f16:	23 23       	and	r18, r19
    2f18:	2d bb       	out	0x1d, r18	; 29
    2f1a:	4f bf       	out	0x3f, r20	; 63
    2f1c:	02 c0       	rjmp	.+4      	; 0x2f22 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    2f1e:	40 93 0d 0d 	sts	0x0D0D, r20	; 0x800d0d <_ZN8SPIClass13interruptSaveE>
    2f22:	8c bd       	out	0x2c, r24	; 44
    2f24:	9d bd       	out	0x2d, r25	; 45
    2f26:	08 95       	ret

00002f28 <_ZN8SPIClass14endTransactionEv>:
    2f28:	80 91 0f 0d 	lds	r24, 0x0D0F	; 0x800d0f <_ZN8SPIClass13interruptModeE>
    2f2c:	88 23       	and	r24, r24
    2f2e:	61 f0       	breq	.+24     	; 0x2f48 <_ZN8SPIClass14endTransactionEv+0x20>
    2f30:	9f b7       	in	r25, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	20 91 0f 0d 	lds	r18, 0x0D0F	; 0x800d0f <_ZN8SPIClass13interruptModeE>
    2f38:	80 91 0d 0d 	lds	r24, 0x0D0D	; 0x800d0d <_ZN8SPIClass13interruptSaveE>
    2f3c:	21 30       	cpi	r18, 0x01	; 1
    2f3e:	19 f4       	brne	.+6      	; 0x2f46 <_ZN8SPIClass14endTransactionEv+0x1e>
    2f40:	8d bb       	out	0x1d, r24	; 29
    2f42:	9f bf       	out	0x3f, r25	; 63
    2f44:	08 95       	ret
    2f46:	8f bf       	out	0x3f, r24	; 63
    2f48:	08 95       	ret

00002f4a <_ZN14Adafruit_PN532C1Ehh>:
    2f4a:	cf 93       	push	r28
    2f4c:	df 93       	push	r29
    2f4e:	ec 01       	movw	r28, r24
    2f50:	86 2f       	mov	r24, r22
    2f52:	18 82       	st	Y, r1
    2f54:	19 82       	std	Y+1, r1	; 0x01
    2f56:	1a 82       	std	Y+2, r1	; 0x02
    2f58:	1b 82       	std	Y+3, r1	; 0x03
    2f5a:	6c 83       	std	Y+4, r22	; 0x04
    2f5c:	4d 83       	std	Y+5, r20	; 0x05
    2f5e:	1d 8a       	std	Y+21, r1	; 0x15
    2f60:	1e 8a       	std	Y+22, r1	; 0x16
    2f62:	60 e0       	ldi	r22, 0x00	; 0
    2f64:	0e 94 20 3c 	call	0x7840	; 0x7840 <pinMode>
    2f68:	61 e0       	ldi	r22, 0x01	; 1
    2f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6c:	df 91       	pop	r29
    2f6e:	cf 91       	pop	r28
    2f70:	0c 94 20 3c 	jmp	0x7840	; 0x7840 <pinMode>

00002f74 <_ZN14Adafruit_PN53210GetHexCodeEPKhm>:
    2f74:	4f 92       	push	r4
    2f76:	5f 92       	push	r5
    2f78:	6f 92       	push	r6
    2f7a:	7f 92       	push	r7
    2f7c:	8f 92       	push	r8
    2f7e:	9f 92       	push	r9
    2f80:	af 92       	push	r10
    2f82:	bf 92       	push	r11
    2f84:	ef 92       	push	r14
    2f86:	ff 92       	push	r15
    2f88:	0f 93       	push	r16
    2f8a:	1f 93       	push	r17
    2f8c:	cf 93       	push	r28
    2f8e:	df 93       	push	r29
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	2c 97       	sbiw	r28, 0x0c	; 12
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	cd bf       	out	0x3d, r28	; 61
    2fa0:	7c 01       	movw	r14, r24
    2fa2:	5a 01       	movw	r10, r20
    2fa4:	28 01       	movw	r4, r16
    2fa6:	39 01       	movw	r6, r18
    2fa8:	6f eb       	ldi	r22, 0xBF	; 191
    2faa:	71 e0       	ldi	r23, 0x01	; 1
    2fac:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <_ZN6StringC1EPKc>
    2fb0:	85 01       	movw	r16, r10
    2fb2:	81 2c       	mov	r8, r1
    2fb4:	91 2c       	mov	r9, r1
    2fb6:	54 01       	movw	r10, r8
    2fb8:	84 14       	cp	r8, r4
    2fba:	95 04       	cpc	r9, r5
    2fbc:	a6 04       	cpc	r10, r6
    2fbe:	b7 04       	cpc	r11, r7
    2fc0:	09 f4       	brne	.+2      	; 0x2fc4 <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0x50>
    2fc2:	46 c0       	rjmp	.+140    	; 0x3050 <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0xdc>
    2fc4:	f8 01       	movw	r30, r16
    2fc6:	61 91       	ld	r22, Z+
    2fc8:	8f 01       	movw	r16, r30
    2fca:	40 e1       	ldi	r20, 0x10	; 16
    2fcc:	ce 01       	movw	r24, r28
    2fce:	60 31       	cpi	r22, 0x10	; 16
    2fd0:	f0 f4       	brcc	.+60     	; 0x300e <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0x9a>
    2fd2:	01 96       	adiw	r24, 0x01	; 1
    2fd4:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <_ZN6StringC1Ehh>
    2fd8:	b7 01       	movw	r22, r14
    2fda:	ce 01       	movw	r24, r28
    2fdc:	07 96       	adiw	r24, 0x07	; 7
    2fde:	0e 94 86 3d 	call	0x7b0c	; 0x7b0c <_ZN6StringC1ERKS_>
    2fe2:	6d ec       	ldi	r22, 0xCD	; 205
    2fe4:	76 e0       	ldi	r23, 0x06	; 6
    2fe6:	ce 01       	movw	r24, r28
    2fe8:	07 96       	adiw	r24, 0x07	; 7
    2fea:	0e 94 83 3e 	call	0x7d06	; 0x7d06 <_ZplRK15StringSumHelperPKc>
    2fee:	be 01       	movw	r22, r28
    2ff0:	6f 5f       	subi	r22, 0xFF	; 255
    2ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff4:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
    2ff8:	bc 01       	movw	r22, r24
    2ffa:	c7 01       	movw	r24, r14
    2ffc:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <_ZN6StringaSERKS_>
    3000:	ce 01       	movw	r24, r28
    3002:	07 96       	adiw	r24, 0x07	; 7
    3004:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    3008:	ce 01       	movw	r24, r28
    300a:	01 96       	adiw	r24, 0x01	; 1
    300c:	19 c0       	rjmp	.+50     	; 0x3040 <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0xcc>
    300e:	07 96       	adiw	r24, 0x07	; 7
    3010:	0e 94 ae 3d 	call	0x7b5c	; 0x7b5c <_ZN6StringC1Ehh>
    3014:	b7 01       	movw	r22, r14
    3016:	ce 01       	movw	r24, r28
    3018:	01 96       	adiw	r24, 0x01	; 1
    301a:	0e 94 86 3d 	call	0x7b0c	; 0x7b0c <_ZN6StringC1ERKS_>
    301e:	be 01       	movw	r22, r28
    3020:	69 5f       	subi	r22, 0xF9	; 249
    3022:	7f 4f       	sbci	r23, 0xFF	; 255
    3024:	ce 01       	movw	r24, r28
    3026:	01 96       	adiw	r24, 0x01	; 1
    3028:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <_ZplRK15StringSumHelperRK6String>
    302c:	bc 01       	movw	r22, r24
    302e:	c7 01       	movw	r24, r14
    3030:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <_ZN6StringaSERKS_>
    3034:	ce 01       	movw	r24, r28
    3036:	01 96       	adiw	r24, 0x01	; 1
    3038:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    303c:	ce 01       	movw	r24, r28
    303e:	07 96       	adiw	r24, 0x07	; 7
    3040:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_ZN6StringD1Ev>
    3044:	ff ef       	ldi	r31, 0xFF	; 255
    3046:	8f 1a       	sub	r8, r31
    3048:	9f 0a       	sbc	r9, r31
    304a:	af 0a       	sbc	r10, r31
    304c:	bf 0a       	sbc	r11, r31
    304e:	b4 cf       	rjmp	.-152    	; 0x2fb8 <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0x44>
    3050:	85 ed       	ldi	r24, 0xD5	; 213
    3052:	9d e0       	ldi	r25, 0x0D	; 13
    3054:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <_ZN5Print7printlnEv>
    3058:	c7 01       	movw	r24, r14
    305a:	2c 96       	adiw	r28, 0x0c	; 12
    305c:	0f b6       	in	r0, 0x3f	; 63
    305e:	f8 94       	cli
    3060:	de bf       	out	0x3e, r29	; 62
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	df 91       	pop	r29
    3068:	cf 91       	pop	r28
    306a:	1f 91       	pop	r17
    306c:	0f 91       	pop	r16
    306e:	ff 90       	pop	r15
    3070:	ef 90       	pop	r14
    3072:	bf 90       	pop	r11
    3074:	af 90       	pop	r10
    3076:	9f 90       	pop	r9
    3078:	8f 90       	pop	r8
    307a:	7f 90       	pop	r7
    307c:	6f 90       	pop	r6
    307e:	5f 90       	pop	r5
    3080:	4f 90       	pop	r4
    3082:	08 95       	ret

00003084 <_ZN14Adafruit_PN5329spi_writeEh>:
    3084:	ef 92       	push	r14
    3086:	ff 92       	push	r15
    3088:	0f 93       	push	r16
    308a:	1f 93       	push	r17
    308c:	cf 93       	push	r28
    308e:	df 93       	push	r29
    3090:	fc 01       	movw	r30, r24
    3092:	26 89       	ldd	r18, Z+22	; 0x16
    3094:	22 23       	and	r18, r18
    3096:	39 f0       	breq	.+14     	; 0x30a6 <_ZN14Adafruit_PN5329spi_writeEh+0x22>
    3098:	6e bd       	out	0x2e, r22	; 46
    309a:	00 00       	nop
    309c:	0d b4       	in	r0, 0x2d	; 45
    309e:	07 fe       	sbrs	r0, 7
    30a0:	fd cf       	rjmp	.-6      	; 0x309c <_ZN14Adafruit_PN5329spi_writeEh+0x18>
    30a2:	8e b5       	in	r24, 0x2e	; 46
    30a4:	27 c0       	rjmp	.+78     	; 0x30f4 <_ZN14Adafruit_PN5329spi_writeEh+0x70>
    30a6:	06 2f       	mov	r16, r22
    30a8:	ec 01       	movw	r28, r24
    30aa:	61 e0       	ldi	r22, 0x01	; 1
    30ac:	81 81       	ldd	r24, Z+1	; 0x01
    30ae:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    30b2:	e1 2c       	mov	r14, r1
    30b4:	f1 2c       	mov	r15, r1
    30b6:	10 e0       	ldi	r17, 0x00	; 0
    30b8:	60 e0       	ldi	r22, 0x00	; 0
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    30c0:	c8 01       	movw	r24, r16
    30c2:	0e 2c       	mov	r0, r14
    30c4:	02 c0       	rjmp	.+4      	; 0x30ca <_ZN14Adafruit_PN5329spi_writeEh+0x46>
    30c6:	95 95       	asr	r25
    30c8:	87 95       	ror	r24
    30ca:	0a 94       	dec	r0
    30cc:	e2 f7       	brpl	.-8      	; 0x30c6 <_ZN14Adafruit_PN5329spi_writeEh+0x42>
    30ce:	80 ff       	sbrs	r24, 0
    30d0:	02 c0       	rjmp	.+4      	; 0x30d6 <_ZN14Adafruit_PN5329spi_writeEh+0x52>
    30d2:	61 e0       	ldi	r22, 0x01	; 1
    30d4:	01 c0       	rjmp	.+2      	; 0x30d8 <_ZN14Adafruit_PN5329spi_writeEh+0x54>
    30d6:	60 e0       	ldi	r22, 0x00	; 0
    30d8:	8a 81       	ldd	r24, Y+2	; 0x02
    30da:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    30de:	61 e0       	ldi	r22, 0x01	; 1
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    30e6:	ff ef       	ldi	r31, 0xFF	; 255
    30e8:	ef 1a       	sub	r14, r31
    30ea:	ff 0a       	sbc	r15, r31
    30ec:	88 e0       	ldi	r24, 0x08	; 8
    30ee:	e8 16       	cp	r14, r24
    30f0:	f1 04       	cpc	r15, r1
    30f2:	11 f7       	brne	.-60     	; 0x30b8 <_ZN14Adafruit_PN5329spi_writeEh+0x34>
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	1f 91       	pop	r17
    30fa:	0f 91       	pop	r16
    30fc:	ff 90       	pop	r15
    30fe:	ef 90       	pop	r14
    3100:	08 95       	ret

00003102 <_ZN14Adafruit_PN5328spi_readEv>:
    3102:	cf 92       	push	r12
    3104:	df 92       	push	r13
    3106:	ef 92       	push	r14
    3108:	ff 92       	push	r15
    310a:	1f 93       	push	r17
    310c:	cf 93       	push	r28
    310e:	df 93       	push	r29
    3110:	fc 01       	movw	r30, r24
    3112:	26 89       	ldd	r18, Z+22	; 0x16
    3114:	22 23       	and	r18, r18
    3116:	39 f0       	breq	.+14     	; 0x3126 <_ZN14Adafruit_PN5328spi_readEv+0x24>
    3118:	1e bc       	out	0x2e, r1	; 46
    311a:	00 00       	nop
    311c:	0d b4       	in	r0, 0x2d	; 45
    311e:	07 fe       	sbrs	r0, 7
    3120:	fd cf       	rjmp	.-6      	; 0x311c <_ZN14Adafruit_PN5328spi_readEv+0x1a>
    3122:	1e b5       	in	r17, 0x2e	; 46
    3124:	26 c0       	rjmp	.+76     	; 0x3172 <_ZN14Adafruit_PN5328spi_readEv+0x70>
    3126:	ec 01       	movw	r28, r24
    3128:	61 e0       	ldi	r22, 0x01	; 1
    312a:	81 81       	ldd	r24, Z+1	; 0x01
    312c:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    3130:	e1 2c       	mov	r14, r1
    3132:	f1 2c       	mov	r15, r1
    3134:	10 e0       	ldi	r17, 0x00	; 0
    3136:	cc 24       	eor	r12, r12
    3138:	c3 94       	inc	r12
    313a:	d1 2c       	mov	r13, r1
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	0e 94 8a 3c 	call	0x7914	; 0x7914 <digitalRead>
    3142:	89 2b       	or	r24, r25
    3144:	39 f0       	breq	.+14     	; 0x3154 <_ZN14Adafruit_PN5328spi_readEv+0x52>
    3146:	c6 01       	movw	r24, r12
    3148:	0e 2c       	mov	r0, r14
    314a:	01 c0       	rjmp	.+2      	; 0x314e <_ZN14Adafruit_PN5328spi_readEv+0x4c>
    314c:	88 0f       	add	r24, r24
    314e:	0a 94       	dec	r0
    3150:	ea f7       	brpl	.-6      	; 0x314c <_ZN14Adafruit_PN5328spi_readEv+0x4a>
    3152:	18 2b       	or	r17, r24
    3154:	60 e0       	ldi	r22, 0x00	; 0
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    315c:	61 e0       	ldi	r22, 0x01	; 1
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    3164:	ff ef       	ldi	r31, 0xFF	; 255
    3166:	ef 1a       	sub	r14, r31
    3168:	ff 0a       	sbc	r15, r31
    316a:	88 e0       	ldi	r24, 0x08	; 8
    316c:	e8 16       	cp	r14, r24
    316e:	f1 04       	cpc	r15, r1
    3170:	29 f7       	brne	.-54     	; 0x313c <_ZN14Adafruit_PN5328spi_readEv+0x3a>
    3172:	81 2f       	mov	r24, r17
    3174:	df 91       	pop	r29
    3176:	cf 91       	pop	r28
    3178:	1f 91       	pop	r17
    317a:	ff 90       	pop	r15
    317c:	ef 90       	pop	r14
    317e:	df 90       	pop	r13
    3180:	cf 90       	pop	r12
    3182:	08 95       	ret

00003184 <_ZN14Adafruit_PN5327isreadyEv>:
    3184:	1f 93       	push	r17
    3186:	cf 93       	push	r28
    3188:	df 93       	push	r29
    318a:	ec 01       	movw	r28, r24
    318c:	8d 89       	ldd	r24, Y+21	; 0x15
    318e:	88 23       	and	r24, r24
    3190:	09 f1       	breq	.+66     	; 0x31d4 <_ZN14Adafruit_PN5327isreadyEv+0x50>
    3192:	8e 89       	ldd	r24, Y+22	; 0x16
    3194:	88 23       	and	r24, r24
    3196:	19 f0       	breq	.+6      	; 0x319e <_ZN14Adafruit_PN5327isreadyEv+0x1a>
    3198:	81 e7       	ldi	r24, 0x71	; 113
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	ab de       	rcall	.-682    	; 0x2ef4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    319e:	60 e0       	ldi	r22, 0x00	; 0
    31a0:	88 81       	ld	r24, Y
    31a2:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    31a6:	62 e0       	ldi	r22, 0x02	; 2
    31a8:	70 e0       	ldi	r23, 0x00	; 0
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>
    31b2:	62 e0       	ldi	r22, 0x02	; 2
    31b4:	ce 01       	movw	r24, r28
    31b6:	66 df       	rcall	.-308    	; 0x3084 <_ZN14Adafruit_PN5329spi_writeEh>
    31b8:	ce 01       	movw	r24, r28
    31ba:	a3 df       	rcall	.-186    	; 0x3102 <_ZN14Adafruit_PN5328spi_readEv>
    31bc:	18 2f       	mov	r17, r24
    31be:	61 e0       	ldi	r22, 0x01	; 1
    31c0:	88 81       	ld	r24, Y
    31c2:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    31c6:	8e 89       	ldd	r24, Y+22	; 0x16
    31c8:	81 11       	cpse	r24, r1
    31ca:	ae de       	rcall	.-676    	; 0x2f28 <_ZN8SPIClass14endTransactionEv>
    31cc:	91 e0       	ldi	r25, 0x01	; 1
    31ce:	11 30       	cpi	r17, 0x01	; 1
    31d0:	31 f4       	brne	.+12     	; 0x31de <_ZN14Adafruit_PN5327isreadyEv+0x5a>
    31d2:	06 c0       	rjmp	.+12     	; 0x31e0 <_ZN14Adafruit_PN5327isreadyEv+0x5c>
    31d4:	8c 81       	ldd	r24, Y+4	; 0x04
    31d6:	0e 94 8a 3c 	call	0x7914	; 0x7914 <digitalRead>
    31da:	91 e0       	ldi	r25, 0x01	; 1
    31dc:	81 11       	cpse	r24, r1
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	89 2f       	mov	r24, r25
    31e2:	df 91       	pop	r29
    31e4:	cf 91       	pop	r28
    31e6:	1f 91       	pop	r17
    31e8:	08 95       	ret

000031ea <_ZN14Adafruit_PN5329waitreadyEj>:
    31ea:	cf 92       	push	r12
    31ec:	df 92       	push	r13
    31ee:	ef 92       	push	r14
    31f0:	ff 92       	push	r15
    31f2:	1f 93       	push	r17
    31f4:	cf 93       	push	r28
    31f6:	df 93       	push	r29
    31f8:	6c 01       	movw	r12, r24
    31fa:	7b 01       	movw	r14, r22
    31fc:	c0 e0       	ldi	r28, 0x00	; 0
    31fe:	d0 e0       	ldi	r29, 0x00	; 0
    3200:	c6 01       	movw	r24, r12
    3202:	c0 df       	rcall	.-128    	; 0x3184 <_ZN14Adafruit_PN5327isreadyEv>
    3204:	18 2f       	mov	r17, r24
    3206:	81 11       	cpse	r24, r1
    3208:	15 c0       	rjmp	.+42     	; 0x3234 <_ZN14Adafruit_PN5329waitreadyEj+0x4a>
    320a:	e1 14       	cp	r14, r1
    320c:	f1 04       	cpc	r15, r1
    320e:	59 f0       	breq	.+22     	; 0x3226 <_ZN14Adafruit_PN5329waitreadyEj+0x3c>
    3210:	2a 96       	adiw	r28, 0x0a	; 10
    3212:	ec 16       	cp	r14, r28
    3214:	fd 06       	cpc	r15, r29
    3216:	38 f4       	brcc	.+14     	; 0x3226 <_ZN14Adafruit_PN5329waitreadyEj+0x3c>
    3218:	60 e4       	ldi	r22, 0x40	; 64
    321a:	79 e0       	ldi	r23, 0x09	; 9
    321c:	85 ed       	ldi	r24, 0xD5	; 213
    321e:	9d e0       	ldi	r25, 0x0D	; 13
    3220:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <_ZN5Print7printlnEPKc>
    3224:	07 c0       	rjmp	.+14     	; 0x3234 <_ZN14Adafruit_PN5329waitreadyEj+0x4a>
    3226:	6a e0       	ldi	r22, 0x0A	; 10
    3228:	70 e0       	ldi	r23, 0x00	; 0
    322a:	80 e0       	ldi	r24, 0x00	; 0
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>
    3232:	e6 cf       	rjmp	.-52     	; 0x3200 <_ZN14Adafruit_PN5329waitreadyEj+0x16>
    3234:	81 2f       	mov	r24, r17
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	1f 91       	pop	r17
    323c:	ff 90       	pop	r15
    323e:	ef 90       	pop	r14
    3240:	df 90       	pop	r13
    3242:	cf 90       	pop	r12
    3244:	08 95       	ret

00003246 <_ZN14Adafruit_PN5328readdataEPhh>:
    3246:	cf 92       	push	r12
    3248:	df 92       	push	r13
    324a:	ef 92       	push	r14
    324c:	ff 92       	push	r15
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	ec 01       	movw	r28, r24
    3258:	6b 01       	movw	r12, r22
    325a:	f4 2e       	mov	r15, r20
    325c:	8d 89       	ldd	r24, Y+21	; 0x15
    325e:	04 2f       	mov	r16, r20
    3260:	10 e0       	ldi	r17, 0x00	; 0
    3262:	88 23       	and	r24, r24
    3264:	a9 f1       	breq	.+106    	; 0x32d0 <_ZN14Adafruit_PN5328readdataEPhh+0x8a>
    3266:	8e 89       	ldd	r24, Y+22	; 0x16
    3268:	88 23       	and	r24, r24
    326a:	19 f0       	breq	.+6      	; 0x3272 <_ZN14Adafruit_PN5328readdataEPhh+0x2c>
    326c:	81 e7       	ldi	r24, 0x71	; 113
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	41 de       	rcall	.-894    	; 0x2ef4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    3272:	60 e0       	ldi	r22, 0x00	; 0
    3274:	88 81       	ld	r24, Y
    3276:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    327a:	62 e0       	ldi	r22, 0x02	; 2
    327c:	70 e0       	ldi	r23, 0x00	; 0
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>
    3286:	63 e0       	ldi	r22, 0x03	; 3
    3288:	ce 01       	movw	r24, r28
    328a:	fc de       	rcall	.-520    	; 0x3084 <_ZN14Adafruit_PN5329spi_writeEh>
    328c:	76 01       	movw	r14, r12
    328e:	0c 0d       	add	r16, r12
    3290:	1d 1d       	adc	r17, r13
    3292:	0e 15       	cp	r16, r14
    3294:	1f 05       	cpc	r17, r15
    3296:	61 f0       	breq	.+24     	; 0x32b0 <_ZN14Adafruit_PN5328readdataEPhh+0x6a>
    3298:	61 e0       	ldi	r22, 0x01	; 1
    329a:	70 e0       	ldi	r23, 0x00	; 0
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>
    32a4:	ce 01       	movw	r24, r28
    32a6:	2d df       	rcall	.-422    	; 0x3102 <_ZN14Adafruit_PN5328spi_readEv>
    32a8:	f7 01       	movw	r30, r14
    32aa:	81 93       	st	Z+, r24
    32ac:	7f 01       	movw	r14, r30
    32ae:	f1 cf       	rjmp	.-30     	; 0x3292 <_ZN14Adafruit_PN5328readdataEPhh+0x4c>
    32b0:	61 e0       	ldi	r22, 0x01	; 1
    32b2:	88 81       	ld	r24, Y
    32b4:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    32b8:	8e 89       	ldd	r24, Y+22	; 0x16
    32ba:	88 23       	and	r24, r24
    32bc:	61 f1       	breq	.+88     	; 0x3316 <_ZN14Adafruit_PN5328readdataEPhh+0xd0>
    32be:	df 91       	pop	r29
    32c0:	cf 91       	pop	r28
    32c2:	1f 91       	pop	r17
    32c4:	0f 91       	pop	r16
    32c6:	ff 90       	pop	r15
    32c8:	ef 90       	pop	r14
    32ca:	df 90       	pop	r13
    32cc:	cf 90       	pop	r12
    32ce:	2c ce       	rjmp	.-936    	; 0x2f28 <_ZN8SPIClass14endTransactionEv>
    32d0:	62 e0       	ldi	r22, 0x02	; 2
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>
    32dc:	42 e0       	ldi	r20, 0x02	; 2
    32de:	4f 0d       	add	r20, r15
    32e0:	64 e2       	ldi	r22, 0x24	; 36
    32e2:	8f e7       	ldi	r24, 0x7F	; 127
    32e4:	9d e0       	ldi	r25, 0x0D	; 13
    32e6:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <_ZN7TwoWire11requestFromEhh>
    32ea:	8f e7       	ldi	r24, 0x7F	; 127
    32ec:	9d e0       	ldi	r25, 0x0D	; 13
    32ee:	0e 94 57 36 	call	0x6cae	; 0x6cae <_ZN7TwoWire4readEv>
    32f2:	e6 01       	movw	r28, r12
    32f4:	0c 0d       	add	r16, r12
    32f6:	1d 1d       	adc	r17, r13
    32f8:	c0 17       	cp	r28, r16
    32fa:	d1 07       	cpc	r29, r17
    32fc:	61 f0       	breq	.+24     	; 0x3316 <_ZN14Adafruit_PN5328readdataEPhh+0xd0>
    32fe:	61 e0       	ldi	r22, 0x01	; 1
    3300:	70 e0       	ldi	r23, 0x00	; 0
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>
    330a:	8f e7       	ldi	r24, 0x7F	; 127
    330c:	9d e0       	ldi	r25, 0x0D	; 13
    330e:	0e 94 57 36 	call	0x6cae	; 0x6cae <_ZN7TwoWire4readEv>
    3312:	89 93       	st	Y+, r24
    3314:	f1 cf       	rjmp	.-30     	; 0x32f8 <_ZN14Adafruit_PN5328readdataEPhh+0xb2>
    3316:	df 91       	pop	r29
    3318:	cf 91       	pop	r28
    331a:	1f 91       	pop	r17
    331c:	0f 91       	pop	r16
    331e:	ff 90       	pop	r15
    3320:	ef 90       	pop	r14
    3322:	df 90       	pop	r13
    3324:	cf 90       	pop	r12
    3326:	08 95       	ret

00003328 <_ZN14Adafruit_PN5327readackEv>:
    3328:	cf 93       	push	r28
    332a:	df 93       	push	r29
    332c:	00 d0       	rcall	.+0      	; 0x332e <_ZN14Adafruit_PN5327readackEv+0x6>
    332e:	00 d0       	rcall	.+0      	; 0x3330 <_ZN14Adafruit_PN5327readackEv+0x8>
    3330:	00 d0       	rcall	.+0      	; 0x3332 <_ZN14Adafruit_PN5327readackEv+0xa>
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
    3336:	46 e0       	ldi	r20, 0x06	; 6
    3338:	be 01       	movw	r22, r28
    333a:	6f 5f       	subi	r22, 0xFF	; 255
    333c:	7f 4f       	sbci	r23, 0xFF	; 255
    333e:	83 df       	rcall	.-250    	; 0x3246 <_ZN14Adafruit_PN5328readdataEPhh>
    3340:	46 e0       	ldi	r20, 0x06	; 6
    3342:	50 e0       	ldi	r21, 0x00	; 0
    3344:	60 e4       	ldi	r22, 0x40	; 64
    3346:	71 e0       	ldi	r23, 0x01	; 1
    3348:	ce 01       	movw	r24, r28
    334a:	01 96       	adiw	r24, 0x01	; 1
    334c:	0e 94 2a 44 	call	0x8854	; 0x8854 <strncmp>
    3350:	21 e0       	ldi	r18, 0x01	; 1
    3352:	89 2b       	or	r24, r25
    3354:	09 f0       	breq	.+2      	; 0x3358 <_ZN14Adafruit_PN5327readackEv+0x30>
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	82 2f       	mov	r24, r18
    335a:	26 96       	adiw	r28, 0x06	; 6
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
    336a:	08 95       	ret

0000336c <_ZL8i2c_sendh>:
    336c:	68 2f       	mov	r22, r24
    336e:	8f e7       	ldi	r24, 0x7F	; 127
    3370:	9d e0       	ldi	r25, 0x0D	; 13
    3372:	0c 94 dd 36 	jmp	0x6dba	; 0x6dba <_ZN7TwoWire5writeEh>

00003376 <_ZN14Adafruit_PN53212writecommandEPhh>:
    3376:	af 92       	push	r10
    3378:	bf 92       	push	r11
    337a:	cf 92       	push	r12
    337c:	df 92       	push	r13
    337e:	ef 92       	push	r14
    3380:	ff 92       	push	r15
    3382:	0f 93       	push	r16
    3384:	1f 93       	push	r17
    3386:	cf 93       	push	r28
    3388:	df 93       	push	r29
    338a:	7c 01       	movw	r14, r24
    338c:	8b 01       	movw	r16, r22
    338e:	fc 01       	movw	r30, r24
    3390:	85 89       	ldd	r24, Z+21	; 0x15
    3392:	c1 e0       	ldi	r28, 0x01	; 1
    3394:	c4 0f       	add	r28, r20
    3396:	88 23       	and	r24, r24
    3398:	09 f4       	brne	.+2      	; 0x339c <_ZN14Adafruit_PN53212writecommandEPhh+0x26>
    339a:	58 c0       	rjmp	.+176    	; 0x344c <_ZN14Adafruit_PN53212writecommandEPhh+0xd6>
    339c:	86 89       	ldd	r24, Z+22	; 0x16
    339e:	88 23       	and	r24, r24
    33a0:	19 f0       	breq	.+6      	; 0x33a8 <_ZN14Adafruit_PN53212writecommandEPhh+0x32>
    33a2:	81 e7       	ldi	r24, 0x71	; 113
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	a6 dd       	rcall	.-1204   	; 0x2ef4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    33a8:	60 e0       	ldi	r22, 0x00	; 0
    33aa:	f7 01       	movw	r30, r14
    33ac:	80 81       	ld	r24, Z
    33ae:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    33b2:	62 e0       	ldi	r22, 0x02	; 2
    33b4:	70 e0       	ldi	r23, 0x00	; 0
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>
    33be:	61 e0       	ldi	r22, 0x01	; 1
    33c0:	c7 01       	movw	r24, r14
    33c2:	60 de       	rcall	.-832    	; 0x3084 <_ZN14Adafruit_PN5329spi_writeEh>
    33c4:	60 e0       	ldi	r22, 0x00	; 0
    33c6:	c7 01       	movw	r24, r14
    33c8:	5d de       	rcall	.-838    	; 0x3084 <_ZN14Adafruit_PN5329spi_writeEh>
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	c7 01       	movw	r24, r14
    33ce:	5a de       	rcall	.-844    	; 0x3084 <_ZN14Adafruit_PN5329spi_writeEh>
    33d0:	6f ef       	ldi	r22, 0xFF	; 255
    33d2:	c7 01       	movw	r24, r14
    33d4:	57 de       	rcall	.-850    	; 0x3084 <_ZN14Adafruit_PN5329spi_writeEh>
    33d6:	6c 2f       	mov	r22, r28
    33d8:	c7 01       	movw	r24, r14
    33da:	54 de       	rcall	.-856    	; 0x3084 <_ZN14Adafruit_PN5329spi_writeEh>
    33dc:	6c 2f       	mov	r22, r28
    33de:	61 95       	neg	r22
    33e0:	c7 01       	movw	r24, r14
    33e2:	50 de       	rcall	.-864    	; 0x3084 <_ZN14Adafruit_PN5329spi_writeEh>
    33e4:	64 ed       	ldi	r22, 0xD4	; 212
    33e6:	c7 01       	movw	r24, r14
    33e8:	4d de       	rcall	.-870    	; 0x3084 <_ZN14Adafruit_PN5329spi_writeEh>
    33ea:	c1 2c       	mov	r12, r1
    33ec:	93 ed       	ldi	r25, 0xD3	; 211
    33ee:	d9 2e       	mov	r13, r25
    33f0:	d0 e0       	ldi	r29, 0x00	; 0
    33f2:	21 97       	sbiw	r28, 0x01	; 1
    33f4:	ac 2c       	mov	r10, r12
    33f6:	b1 2c       	mov	r11, r1
    33f8:	ac 16       	cp	r10, r28
    33fa:	bd 06       	cpc	r11, r29
    33fc:	5c f4       	brge	.+22     	; 0x3414 <_ZN14Adafruit_PN53212writecommandEPhh+0x9e>
    33fe:	a0 0e       	add	r10, r16
    3400:	b1 1e       	adc	r11, r17
    3402:	f5 01       	movw	r30, r10
    3404:	60 81       	ld	r22, Z
    3406:	c7 01       	movw	r24, r14
    3408:	3d de       	rcall	.-902    	; 0x3084 <_ZN14Adafruit_PN5329spi_writeEh>
    340a:	f5 01       	movw	r30, r10
    340c:	80 81       	ld	r24, Z
    340e:	d8 0e       	add	r13, r24
    3410:	c3 94       	inc	r12
    3412:	f0 cf       	rjmp	.-32     	; 0x33f4 <_ZN14Adafruit_PN53212writecommandEPhh+0x7e>
    3414:	6d 2d       	mov	r22, r13
    3416:	60 95       	com	r22
    3418:	c7 01       	movw	r24, r14
    341a:	34 de       	rcall	.-920    	; 0x3084 <_ZN14Adafruit_PN5329spi_writeEh>
    341c:	60 e0       	ldi	r22, 0x00	; 0
    341e:	c7 01       	movw	r24, r14
    3420:	31 de       	rcall	.-926    	; 0x3084 <_ZN14Adafruit_PN5329spi_writeEh>
    3422:	61 e0       	ldi	r22, 0x01	; 1
    3424:	f7 01       	movw	r30, r14
    3426:	80 81       	ld	r24, Z
    3428:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    342c:	f7 01       	movw	r30, r14
    342e:	86 89       	ldd	r24, Z+22	; 0x16
    3430:	88 23       	and	r24, r24
    3432:	09 f4       	brne	.+2      	; 0x3436 <_ZN14Adafruit_PN53212writecommandEPhh+0xc0>
    3434:	4b c0       	rjmp	.+150    	; 0x34cc <_ZN14Adafruit_PN53212writecommandEPhh+0x156>
    3436:	df 91       	pop	r29
    3438:	cf 91       	pop	r28
    343a:	1f 91       	pop	r17
    343c:	0f 91       	pop	r16
    343e:	ff 90       	pop	r15
    3440:	ef 90       	pop	r14
    3442:	df 90       	pop	r13
    3444:	cf 90       	pop	r12
    3446:	bf 90       	pop	r11
    3448:	af 90       	pop	r10
    344a:	6e cd       	rjmp	.-1316   	; 0x2f28 <_ZN8SPIClass14endTransactionEv>
    344c:	62 e0       	ldi	r22, 0x02	; 2
    344e:	70 e0       	ldi	r23, 0x00	; 0
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>
    3458:	64 e2       	ldi	r22, 0x24	; 36
    345a:	70 e0       	ldi	r23, 0x00	; 0
    345c:	8f e7       	ldi	r24, 0x7F	; 127
    345e:	9d e0       	ldi	r25, 0x0D	; 13
    3460:	0e 94 38 37 	call	0x6e70	; 0x6e70 <_ZN7TwoWire17beginTransmissionEi>
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	82 df       	rcall	.-252    	; 0x336c <_ZL8i2c_sendh>
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	80 df       	rcall	.-256    	; 0x336c <_ZL8i2c_sendh>
    346c:	8f ef       	ldi	r24, 0xFF	; 255
    346e:	7e df       	rcall	.-260    	; 0x336c <_ZL8i2c_sendh>
    3470:	8c 2f       	mov	r24, r28
    3472:	7c df       	rcall	.-264    	; 0x336c <_ZL8i2c_sendh>
    3474:	8c 2f       	mov	r24, r28
    3476:	81 95       	neg	r24
    3478:	79 df       	rcall	.-270    	; 0x336c <_ZL8i2c_sendh>
    347a:	84 ed       	ldi	r24, 0xD4	; 212
    347c:	77 df       	rcall	.-274    	; 0x336c <_ZL8i2c_sendh>
    347e:	b1 2c       	mov	r11, r1
    3480:	83 ed       	ldi	r24, 0xD3	; 211
    3482:	d8 2e       	mov	r13, r24
    3484:	d0 e0       	ldi	r29, 0x00	; 0
    3486:	21 97       	sbiw	r28, 0x01	; 1
    3488:	eb 2c       	mov	r14, r11
    348a:	f1 2c       	mov	r15, r1
    348c:	ec 16       	cp	r14, r28
    348e:	fd 06       	cpc	r15, r29
    3490:	54 f4       	brge	.+20     	; 0x34a6 <_ZN14Adafruit_PN53212writecommandEPhh+0x130>
    3492:	e0 0e       	add	r14, r16
    3494:	f1 1e       	adc	r15, r17
    3496:	f7 01       	movw	r30, r14
    3498:	80 81       	ld	r24, Z
    349a:	68 df       	rcall	.-304    	; 0x336c <_ZL8i2c_sendh>
    349c:	f7 01       	movw	r30, r14
    349e:	80 81       	ld	r24, Z
    34a0:	d8 0e       	add	r13, r24
    34a2:	b3 94       	inc	r11
    34a4:	f1 cf       	rjmp	.-30     	; 0x3488 <_ZN14Adafruit_PN53212writecommandEPhh+0x112>
    34a6:	8d 2d       	mov	r24, r13
    34a8:	80 95       	com	r24
    34aa:	60 df       	rcall	.-320    	; 0x336c <_ZL8i2c_sendh>
    34ac:	80 e0       	ldi	r24, 0x00	; 0
    34ae:	5e df       	rcall	.-324    	; 0x336c <_ZL8i2c_sendh>
    34b0:	8f e7       	ldi	r24, 0x7F	; 127
    34b2:	9d e0       	ldi	r25, 0x0D	; 13
    34b4:	df 91       	pop	r29
    34b6:	cf 91       	pop	r28
    34b8:	1f 91       	pop	r17
    34ba:	0f 91       	pop	r16
    34bc:	ff 90       	pop	r15
    34be:	ef 90       	pop	r14
    34c0:	df 90       	pop	r13
    34c2:	cf 90       	pop	r12
    34c4:	bf 90       	pop	r11
    34c6:	af 90       	pop	r10
    34c8:	0c 94 af 37 	jmp	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
    34cc:	df 91       	pop	r29
    34ce:	cf 91       	pop	r28
    34d0:	1f 91       	pop	r17
    34d2:	0f 91       	pop	r16
    34d4:	ff 90       	pop	r15
    34d6:	ef 90       	pop	r14
    34d8:	df 90       	pop	r13
    34da:	cf 90       	pop	r12
    34dc:	bf 90       	pop	r11
    34de:	af 90       	pop	r10
    34e0:	08 95       	ret

000034e2 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>:
    34e2:	0f 93       	push	r16
    34e4:	1f 93       	push	r17
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	ec 01       	movw	r28, r24
    34ec:	89 01       	movw	r16, r18
    34ee:	43 df       	rcall	.-378    	; 0x3376 <_ZN14Adafruit_PN53212writecommandEPhh>
    34f0:	b8 01       	movw	r22, r16
    34f2:	ce 01       	movw	r24, r28
    34f4:	7a de       	rcall	.-780    	; 0x31ea <_ZN14Adafruit_PN5329waitreadyEj>
    34f6:	81 11       	cpse	r24, r1
    34f8:	02 c0       	rjmp	.+4      	; 0x34fe <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x1c>
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	0e c0       	rjmp	.+28     	; 0x351a <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x38>
    34fe:	ce 01       	movw	r24, r28
    3500:	13 df       	rcall	.-474    	; 0x3328 <_ZN14Adafruit_PN5327readackEv>
    3502:	88 23       	and	r24, r24
    3504:	d1 f3       	breq	.-12     	; 0x34fa <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x18>
    3506:	9d 89       	ldd	r25, Y+21	; 0x15
    3508:	99 23       	and	r25, r25
    350a:	39 f0       	breq	.+14     	; 0x351a <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x38>
    350c:	b8 01       	movw	r22, r16
    350e:	ce 01       	movw	r24, r28
    3510:	df 91       	pop	r29
    3512:	cf 91       	pop	r28
    3514:	1f 91       	pop	r17
    3516:	0f 91       	pop	r16
    3518:	68 ce       	rjmp	.-816    	; 0x31ea <_ZN14Adafruit_PN5329waitreadyEj>
    351a:	df 91       	pop	r29
    351c:	cf 91       	pop	r28
    351e:	1f 91       	pop	r17
    3520:	0f 91       	pop	r16
    3522:	08 95       	ret

00003524 <_ZN14Adafruit_PN5325beginEv>:
    3524:	cf 93       	push	r28
    3526:	df 93       	push	r29
    3528:	ec 01       	movw	r28, r24
    352a:	8d 89       	ldd	r24, Y+21	; 0x15
    352c:	88 23       	and	r24, r24
    352e:	31 f1       	breq	.+76     	; 0x357c <_ZN14Adafruit_PN5325beginEv+0x58>
    3530:	8e 89       	ldd	r24, Y+22	; 0x16
    3532:	88 23       	and	r24, r24
    3534:	29 f0       	breq	.+10     	; 0x3540 <_ZN14Adafruit_PN5325beginEv+0x1c>
    3536:	0e 94 cc 33 	call	0x6798	; 0x6798 <_ZN8SPIClass5beginEv>
    353a:	81 e7       	ldi	r24, 0x71	; 113
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	da dc       	rcall	.-1612   	; 0x2ef4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    3540:	60 e0       	ldi	r22, 0x00	; 0
    3542:	88 81       	ld	r24, Y
    3544:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    3548:	68 ee       	ldi	r22, 0xE8	; 232
    354a:	73 e0       	ldi	r23, 0x03	; 3
    354c:	80 e0       	ldi	r24, 0x00	; 0
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>
    3554:	82 e0       	ldi	r24, 0x02	; 2
    3556:	80 93 7f 0c 	sts	0x0C7F, r24	; 0x800c7f <pn532_packetbuffer>
    355a:	28 ee       	ldi	r18, 0xE8	; 232
    355c:	33 e0       	ldi	r19, 0x03	; 3
    355e:	41 e0       	ldi	r20, 0x01	; 1
    3560:	6f e7       	ldi	r22, 0x7F	; 127
    3562:	7c e0       	ldi	r23, 0x0C	; 12
    3564:	ce 01       	movw	r24, r28
    3566:	bd df       	rcall	.-134    	; 0x34e2 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    3568:	61 e0       	ldi	r22, 0x01	; 1
    356a:	88 81       	ld	r24, Y
    356c:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    3570:	8e 89       	ldd	r24, Y+22	; 0x16
    3572:	88 23       	and	r24, r24
    3574:	09 f1       	breq	.+66     	; 0x35b8 <_ZN14Adafruit_PN5325beginEv+0x94>
    3576:	df 91       	pop	r29
    3578:	cf 91       	pop	r28
    357a:	d6 cc       	rjmp	.-1620   	; 0x2f28 <_ZN8SPIClass14endTransactionEv>
    357c:	8f e7       	ldi	r24, 0x7F	; 127
    357e:	9d e0       	ldi	r25, 0x0D	; 13
    3580:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <_ZN7TwoWire5beginEv>
    3584:	61 e0       	ldi	r22, 0x01	; 1
    3586:	8d 81       	ldd	r24, Y+5	; 0x05
    3588:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    358c:	60 e0       	ldi	r22, 0x00	; 0
    358e:	8d 81       	ldd	r24, Y+5	; 0x05
    3590:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    3594:	60 e9       	ldi	r22, 0x90	; 144
    3596:	71 e0       	ldi	r23, 0x01	; 1
    3598:	80 e0       	ldi	r24, 0x00	; 0
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>
    35a0:	61 e0       	ldi	r22, 0x01	; 1
    35a2:	8d 81       	ldd	r24, Y+5	; 0x05
    35a4:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    35a8:	6a e0       	ldi	r22, 0x0A	; 10
    35aa:	70 e0       	ldi	r23, 0x00	; 0
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	df 91       	pop	r29
    35b2:	cf 91       	pop	r28
    35b4:	0c 94 78 3b 	jmp	0x76f0	; 0x76f0 <delay>
    35b8:	df 91       	pop	r29
    35ba:	cf 91       	pop	r28
    35bc:	08 95       	ret

000035be <_ZN14Adafruit_PN53218getFirmwareVersionEv>:
    35be:	cf 93       	push	r28
    35c0:	df 93       	push	r29
    35c2:	ec 01       	movw	r28, r24
    35c4:	82 e0       	ldi	r24, 0x02	; 2
    35c6:	80 93 7f 0c 	sts	0x0C7F, r24	; 0x800c7f <pn532_packetbuffer>
    35ca:	28 ee       	ldi	r18, 0xE8	; 232
    35cc:	33 e0       	ldi	r19, 0x03	; 3
    35ce:	41 e0       	ldi	r20, 0x01	; 1
    35d0:	6f e7       	ldi	r22, 0x7F	; 127
    35d2:	7c e0       	ldi	r23, 0x0C	; 12
    35d4:	ce 01       	movw	r24, r28
    35d6:	85 df       	rcall	.-246    	; 0x34e2 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    35d8:	81 11       	cpse	r24, r1
    35da:	04 c0       	rjmp	.+8      	; 0x35e4 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x26>
    35dc:	60 e0       	ldi	r22, 0x00	; 0
    35de:	70 e0       	ldi	r23, 0x00	; 0
    35e0:	cb 01       	movw	r24, r22
    35e2:	32 c0       	rjmp	.+100    	; 0x3648 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x8a>
    35e4:	4c e0       	ldi	r20, 0x0C	; 12
    35e6:	6f e7       	ldi	r22, 0x7F	; 127
    35e8:	7c e0       	ldi	r23, 0x0C	; 12
    35ea:	ce 01       	movw	r24, r28
    35ec:	2c de       	rcall	.-936    	; 0x3246 <_ZN14Adafruit_PN5328readdataEPhh>
    35ee:	46 e0       	ldi	r20, 0x06	; 6
    35f0:	50 e0       	ldi	r21, 0x00	; 0
    35f2:	6a e3       	ldi	r22, 0x3A	; 58
    35f4:	71 e0       	ldi	r23, 0x01	; 1
    35f6:	8f e7       	ldi	r24, 0x7F	; 127
    35f8:	9c e0       	ldi	r25, 0x0C	; 12
    35fa:	0e 94 2a 44 	call	0x8854	; 0x8854 <strncmp>
    35fe:	89 2b       	or	r24, r25
    3600:	69 f7       	brne	.-38     	; 0x35dc <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x1e>
    3602:	8d 89       	ldd	r24, Y+21	; 0x15
    3604:	81 11       	cpse	r24, r1
    3606:	03 c0       	rjmp	.+6      	; 0x360e <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x50>
    3608:	e7 e0       	ldi	r30, 0x07	; 7
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	02 c0       	rjmp	.+4      	; 0x3612 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x54>
    360e:	e6 e0       	ldi	r30, 0x06	; 6
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	e1 58       	subi	r30, 0x81	; 129
    3614:	f3 4f       	sbci	r31, 0xF3	; 243
    3616:	60 81       	ld	r22, Z
    3618:	86 2f       	mov	r24, r22
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	a0 e0       	ldi	r26, 0x00	; 0
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	ba 2f       	mov	r27, r26
    3622:	a9 2f       	mov	r26, r25
    3624:	98 2f       	mov	r25, r24
    3626:	88 27       	eor	r24, r24
    3628:	21 81       	ldd	r18, Z+1	; 0x01
    362a:	82 2b       	or	r24, r18
    362c:	ba 2f       	mov	r27, r26
    362e:	a9 2f       	mov	r26, r25
    3630:	98 2f       	mov	r25, r24
    3632:	88 27       	eor	r24, r24
    3634:	22 81       	ldd	r18, Z+2	; 0x02
    3636:	82 2b       	or	r24, r18
    3638:	ba 2f       	mov	r27, r26
    363a:	a9 2f       	mov	r26, r25
    363c:	98 2f       	mov	r25, r24
    363e:	88 27       	eor	r24, r24
    3640:	23 81       	ldd	r18, Z+3	; 0x03
    3642:	bc 01       	movw	r22, r24
    3644:	cd 01       	movw	r24, r26
    3646:	62 2b       	or	r22, r18
    3648:	df 91       	pop	r29
    364a:	cf 91       	pop	r28
    364c:	08 95       	ret

0000364e <_ZN14Adafruit_PN5329SAMConfigEv>:
    364e:	cf 93       	push	r28
    3650:	df 93       	push	r29
    3652:	ec 01       	movw	r28, r24
    3654:	94 e1       	ldi	r25, 0x14	; 20
    3656:	90 93 7f 0c 	sts	0x0C7F, r25	; 0x800c7f <pn532_packetbuffer>
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	80 93 80 0c 	sts	0x0C80, r24	; 0x800c80 <pn532_packetbuffer+0x1>
    3660:	90 93 81 0c 	sts	0x0C81, r25	; 0x800c81 <pn532_packetbuffer+0x2>
    3664:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <pn532_packetbuffer+0x3>
    3668:	28 ee       	ldi	r18, 0xE8	; 232
    366a:	33 e0       	ldi	r19, 0x03	; 3
    366c:	44 e0       	ldi	r20, 0x04	; 4
    366e:	6f e7       	ldi	r22, 0x7F	; 127
    3670:	7c e0       	ldi	r23, 0x0C	; 12
    3672:	ce 01       	movw	r24, r28
    3674:	36 df       	rcall	.-404    	; 0x34e2 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    3676:	88 23       	and	r24, r24
    3678:	a9 f0       	breq	.+42     	; 0x36a4 <_ZN14Adafruit_PN5329SAMConfigEv+0x56>
    367a:	48 e0       	ldi	r20, 0x08	; 8
    367c:	6f e7       	ldi	r22, 0x7F	; 127
    367e:	7c e0       	ldi	r23, 0x0C	; 12
    3680:	ce 01       	movw	r24, r28
    3682:	e1 dd       	rcall	.-1086   	; 0x3246 <_ZN14Adafruit_PN5328readdataEPhh>
    3684:	8d 89       	ldd	r24, Y+21	; 0x15
    3686:	81 11       	cpse	r24, r1
    3688:	03 c0       	rjmp	.+6      	; 0x3690 <_ZN14Adafruit_PN5329SAMConfigEv+0x42>
    368a:	86 e0       	ldi	r24, 0x06	; 6
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	02 c0       	rjmp	.+4      	; 0x3694 <_ZN14Adafruit_PN5329SAMConfigEv+0x46>
    3690:	85 e0       	ldi	r24, 0x05	; 5
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	fc 01       	movw	r30, r24
    3696:	e1 58       	subi	r30, 0x81	; 129
    3698:	f3 4f       	sbci	r31, 0xF3	; 243
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	90 81       	ld	r25, Z
    369e:	95 31       	cpi	r25, 0x15	; 21
    36a0:	09 f0       	breq	.+2      	; 0x36a4 <_ZN14Adafruit_PN5329SAMConfigEv+0x56>
    36a2:	80 e0       	ldi	r24, 0x00	; 0
    36a4:	df 91       	pop	r29
    36a6:	cf 91       	pop	r28
    36a8:	08 95       	ret

000036aa <_ZN14Adafruit_PN53227setPassiveActivationRetriesEh>:
    36aa:	ef e7       	ldi	r30, 0x7F	; 127
    36ac:	fc e0       	ldi	r31, 0x0C	; 12
    36ae:	22 e3       	ldi	r18, 0x32	; 50
    36b0:	20 83       	st	Z, r18
    36b2:	25 e0       	ldi	r18, 0x05	; 5
    36b4:	21 83       	std	Z+1, r18	; 0x01
    36b6:	2f ef       	ldi	r18, 0xFF	; 255
    36b8:	22 83       	std	Z+2, r18	; 0x02
    36ba:	21 e0       	ldi	r18, 0x01	; 1
    36bc:	23 83       	std	Z+3, r18	; 0x03
    36be:	64 83       	std	Z+4, r22	; 0x04
    36c0:	28 ee       	ldi	r18, 0xE8	; 232
    36c2:	33 e0       	ldi	r19, 0x03	; 3
    36c4:	45 e0       	ldi	r20, 0x05	; 5
    36c6:	bf 01       	movw	r22, r30
    36c8:	0c cf       	rjmp	.-488    	; 0x34e2 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>

000036ca <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j>:
    36ca:	af 92       	push	r10
    36cc:	bf 92       	push	r11
    36ce:	cf 92       	push	r12
    36d0:	df 92       	push	r13
    36d2:	ef 92       	push	r14
    36d4:	ff 92       	push	r15
    36d6:	0f 93       	push	r16
    36d8:	1f 93       	push	r17
    36da:	cf 93       	push	r28
    36dc:	df 93       	push	r29
    36de:	ec 01       	movw	r28, r24
    36e0:	7a 01       	movw	r14, r20
    36e2:	59 01       	movw	r10, r18
    36e4:	68 01       	movw	r12, r16
    36e6:	8a e4       	ldi	r24, 0x4A	; 74
    36e8:	80 93 7f 0c 	sts	0x0C7F, r24	; 0x800c7f <pn532_packetbuffer>
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	80 93 80 0c 	sts	0x0C80, r24	; 0x800c80 <pn532_packetbuffer+0x1>
    36f2:	60 93 81 0c 	sts	0x0C81, r22	; 0x800c81 <pn532_packetbuffer+0x2>
    36f6:	98 01       	movw	r18, r16
    36f8:	43 e0       	ldi	r20, 0x03	; 3
    36fa:	6f e7       	ldi	r22, 0x7F	; 127
    36fc:	7c e0       	ldi	r23, 0x0C	; 12
    36fe:	ce 01       	movw	r24, r28
    3700:	f0 de       	rcall	.-544    	; 0x34e2 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    3702:	18 2f       	mov	r17, r24
    3704:	88 23       	and	r24, r24
    3706:	41 f1       	breq	.+80     	; 0x3758 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    3708:	8d 89       	ldd	r24, Y+21	; 0x15
    370a:	88 23       	and	r24, r24
    370c:	79 f0       	breq	.+30     	; 0x372c <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x62>
    370e:	44 e1       	ldi	r20, 0x14	; 20
    3710:	6f e7       	ldi	r22, 0x7F	; 127
    3712:	7c e0       	ldi	r23, 0x0C	; 12
    3714:	ce 01       	movw	r24, r28
    3716:	97 dd       	rcall	.-1234   	; 0x3246 <_ZN14Adafruit_PN5328readdataEPhh>
    3718:	80 91 86 0c 	lds	r24, 0x0C86	; 0x800c86 <pn532_packetbuffer+0x7>
    371c:	81 30       	cpi	r24, 0x01	; 1
    371e:	e1 f4       	brne	.+56     	; 0x3758 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    3720:	80 91 8b 0c 	lds	r24, 0x0C8B	; 0x800c8b <pn532_packetbuffer+0xc>
    3724:	f5 01       	movw	r30, r10
    3726:	80 83       	st	Z, r24
    3728:	80 e0       	ldi	r24, 0x00	; 0
    372a:	06 c0       	rjmp	.+12     	; 0x3738 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    372c:	b6 01       	movw	r22, r12
    372e:	ce 01       	movw	r24, r28
    3730:	5c dd       	rcall	.-1352   	; 0x31ea <_ZN14Adafruit_PN5329waitreadyEj>
    3732:	81 11       	cpse	r24, r1
    3734:	ec cf       	rjmp	.-40     	; 0x370e <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x44>
    3736:	10 c0       	rjmp	.+32     	; 0x3758 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    3738:	90 91 8b 0c 	lds	r25, 0x0C8B	; 0x800c8b <pn532_packetbuffer+0xc>
    373c:	89 17       	cp	r24, r25
    373e:	68 f4       	brcc	.+26     	; 0x375a <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x90>
    3740:	28 2f       	mov	r18, r24
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	f9 01       	movw	r30, r18
    3746:	e1 58       	subi	r30, 0x81	; 129
    3748:	f3 4f       	sbci	r31, 0xF3	; 243
    374a:	95 85       	ldd	r25, Z+13	; 0x0d
    374c:	f7 01       	movw	r30, r14
    374e:	e2 0f       	add	r30, r18
    3750:	f3 1f       	adc	r31, r19
    3752:	90 83       	st	Z, r25
    3754:	8f 5f       	subi	r24, 0xFF	; 255
    3756:	f0 cf       	rjmp	.-32     	; 0x3738 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    3758:	10 e0       	ldi	r17, 0x00	; 0
    375a:	81 2f       	mov	r24, r17
    375c:	df 91       	pop	r29
    375e:	cf 91       	pop	r28
    3760:	1f 91       	pop	r17
    3762:	0f 91       	pop	r16
    3764:	ff 90       	pop	r15
    3766:	ef 90       	pop	r14
    3768:	df 90       	pop	r13
    376a:	cf 90       	pop	r12
    376c:	bf 90       	pop	r11
    376e:	af 90       	pop	r10
    3770:	08 95       	ret

00003772 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t Adafruit_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    3772:	af 92       	push	r10
    3774:	bf 92       	push	r11
    3776:	cf 92       	push	r12
    3778:	df 92       	push	r13
    377a:	ef 92       	push	r14
    377c:	0f 93       	push	r16
    377e:	1f 93       	push	r17
    3780:	cf 93       	push	r28
    3782:	df 93       	push	r29
    3784:	ec 01       	movw	r28, r24
    3786:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    3788:	5c 01       	movw	r10, r24
    378a:	8e e0       	ldi	r24, 0x0E	; 14
    378c:	a8 0e       	add	r10, r24
    378e:	b1 1c       	adc	r11, r1
    3790:	86 e0       	ldi	r24, 0x06	; 6
    3792:	f6 01       	movw	r30, r12
    3794:	d5 01       	movw	r26, r10
    3796:	01 90       	ld	r0, Z+
    3798:	0d 92       	st	X+, r0
    379a:	8a 95       	dec	r24
    379c:	e1 f7       	brne	.-8      	; 0x3796 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    379e:	50 e0       	ldi	r21, 0x00	; 0
    37a0:	ce 01       	movw	r24, r28
    37a2:	06 96       	adiw	r24, 0x06	; 6
    37a4:	0e 94 11 44 	call	0x8822	; 0x8822 <memcpy>
  _uidLen = uidLen;
    37a8:	1d 87       	std	Y+13, r17	; 0x0d
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    Adafruit_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    37aa:	80 e4       	ldi	r24, 0x40	; 64
    37ac:	80 93 7f 0c 	sts	0x0C7F, r24	; 0x800c7f <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	80 93 80 0c 	sts	0x0C80, r24	; 0x800c80 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    37b6:	e1 10       	cpse	r14, r1
    37b8:	02 c0       	rjmp	.+4      	; 0x37be <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    37ba:	80 e6       	ldi	r24, 0x60	; 96
    37bc:	01 c0       	rjmp	.+2      	; 0x37c0 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    37be:	81 e6       	ldi	r24, 0x61	; 97
    37c0:	80 93 81 0c 	sts	0x0C81, r24	; 0x800c81 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    37c4:	00 93 82 0c 	sts	0x0C82, r16	; 0x800c82 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    37c8:	86 e0       	ldi	r24, 0x06	; 6
    37ca:	f5 01       	movw	r30, r10
    37cc:	a3 e8       	ldi	r26, 0x83	; 131
    37ce:	bc e0       	ldi	r27, 0x0C	; 12
    37d0:	01 90       	ld	r0, Z+
    37d2:	0d 92       	st	X+, r0
    37d4:	8a 95       	dec	r24
    37d6:	e1 f7       	brne	.-8      	; 0x37d0 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	4d 85       	ldd	r20, Y+13	; 0x0d
    37dc:	84 17       	cp	r24, r20
    37de:	60 f4       	brcc	.+24     	; 0x37f8 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    37e0:	28 2f       	mov	r18, r24
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	fe 01       	movw	r30, r28
    37e6:	e2 0f       	add	r30, r18
    37e8:	f3 1f       	adc	r31, r19
    37ea:	96 81       	ldd	r25, Z+6	; 0x06
    37ec:	f9 01       	movw	r30, r18
    37ee:	e1 58       	subi	r30, 0x81	; 129
    37f0:	f3 4f       	sbci	r31, 0xF3	; 243
    37f2:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    37f4:	8f 5f       	subi	r24, 0xFF	; 255
    37f6:	f1 cf       	rjmp	.-30     	; 0x37da <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    37f8:	46 5f       	subi	r20, 0xF6	; 246
    37fa:	28 ee       	ldi	r18, 0xE8	; 232
    37fc:	33 e0       	ldi	r19, 0x03	; 3
    37fe:	6f e7       	ldi	r22, 0x7F	; 127
    3800:	7c e0       	ldi	r23, 0x0C	; 12
    3802:	ce 01       	movw	r24, r28
    3804:	6e de       	rcall	.-804    	; 0x34e2 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    3806:	88 23       	and	r24, r24
    3808:	49 f0       	breq	.+18     	; 0x381c <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    380a:	4c e0       	ldi	r20, 0x0C	; 12
    380c:	6f e7       	ldi	r22, 0x7F	; 127
    380e:	7c e0       	ldi	r23, 0x0C	; 12
    3810:	ce 01       	movw	r24, r28
    3812:	19 dd       	rcall	.-1486   	; 0x3246 <_ZN14Adafruit_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	90 91 86 0c 	lds	r25, 0x0C86	; 0x800c86 <pn532_packetbuffer+0x7>
    381a:	91 11       	cpse	r25, r1
    381c:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    381e:	df 91       	pop	r29
    3820:	cf 91       	pop	r28
    3822:	1f 91       	pop	r17
    3824:	0f 91       	pop	r16
    3826:	ef 90       	pop	r14
    3828:	df 90       	pop	r13
    382a:	cf 90       	pop	r12
    382c:	bf 90       	pop	r11
    382e:	af 90       	pop	r10
    3830:	08 95       	ret

00003832 <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t Adafruit_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    3832:	0f 93       	push	r16
    3834:	1f 93       	push	r17
    3836:	cf 93       	push	r28
    3838:	df 93       	push	r29
    383a:	ec 01       	movw	r28, r24
    383c:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    383e:	80 e4       	ldi	r24, 0x40	; 64
    3840:	80 93 7f 0c 	sts	0x0C7F, r24	; 0x800c7f <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	80 93 80 0c 	sts	0x0C80, r24	; 0x800c80 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    384a:	80 e3       	ldi	r24, 0x30	; 48
    384c:	80 93 81 0c 	sts	0x0C81, r24	; 0x800c81 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    3850:	60 93 82 0c 	sts	0x0C82, r22	; 0x800c82 <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    3854:	28 ee       	ldi	r18, 0xE8	; 232
    3856:	33 e0       	ldi	r19, 0x03	; 3
    3858:	44 e0       	ldi	r20, 0x04	; 4
    385a:	6f e7       	ldi	r22, 0x7F	; 127
    385c:	7c e0       	ldi	r23, 0x0C	; 12
    385e:	ce 01       	movw	r24, r28
    3860:	40 de       	rcall	.-896    	; 0x34e2 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    3862:	81 11       	cpse	r24, r1
    3864:	02 c0       	rjmp	.+4      	; 0x386a <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    3866:	80 e0       	ldi	r24, 0x00	; 0
    3868:	12 c0       	rjmp	.+36     	; 0x388e <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x5c>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    386a:	4a e1       	ldi	r20, 0x1A	; 26
    386c:	6f e7       	ldi	r22, 0x7F	; 127
    386e:	7c e0       	ldi	r23, 0x0C	; 12
    3870:	ce 01       	movw	r24, r28
    3872:	e9 dc       	rcall	.-1582   	; 0x3246 <_ZN14Adafruit_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    3874:	80 91 86 0c 	lds	r24, 0x0C86	; 0x800c86 <pn532_packetbuffer+0x7>
    3878:	81 11       	cpse	r24, r1
    387a:	f5 cf       	rjmp	.-22     	; 0x3866 <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    387c:	80 e1       	ldi	r24, 0x10	; 16
    387e:	e7 e8       	ldi	r30, 0x87	; 135
    3880:	fc e0       	ldi	r31, 0x0C	; 12
    3882:	d8 01       	movw	r26, r16
    3884:	01 90       	ld	r0, Z+
    3886:	0d 92       	st	X+, r0
    3888:	8a 95       	dec	r24
    388a:	e1 f7       	brne	.-8      	; 0x3884 <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x52>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    Adafruit_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    388c:	81 e0       	ldi	r24, 0x01	; 1
}
    388e:	df 91       	pop	r29
    3890:	cf 91       	pop	r28
    3892:	1f 91       	pop	r17
    3894:	0f 91       	pop	r16
    3896:	08 95       	ret

00003898 <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t Adafruit_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    3898:	cf 93       	push	r28
    389a:	df 93       	push	r29
    389c:	ec 01       	movw	r28, r24
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    389e:	80 e4       	ldi	r24, 0x40	; 64
    38a0:	80 93 7f 0c 	sts	0x0C7F, r24	; 0x800c7f <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	80 93 80 0c 	sts	0x0C80, r24	; 0x800c80 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    38aa:	80 ea       	ldi	r24, 0xA0	; 160
    38ac:	80 93 81 0c 	sts	0x0C81, r24	; 0x800c81 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    38b0:	60 93 82 0c 	sts	0x0C82, r22	; 0x800c82 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);          /* Data Payload */
    38b4:	80 e1       	ldi	r24, 0x10	; 16
    38b6:	fa 01       	movw	r30, r20
    38b8:	a3 e8       	ldi	r26, 0x83	; 131
    38ba:	bc e0       	ldi	r27, 0x0C	; 12
    38bc:	01 90       	ld	r0, Z+
    38be:	0d 92       	st	X+, r0
    38c0:	8a 95       	dec	r24
    38c2:	e1 f7       	brne	.-8      	; 0x38bc <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    38c4:	28 ee       	ldi	r18, 0xE8	; 232
    38c6:	33 e0       	ldi	r19, 0x03	; 3
    38c8:	44 e1       	ldi	r20, 0x14	; 20
    38ca:	6f e7       	ldi	r22, 0x7F	; 127
    38cc:	7c e0       	ldi	r23, 0x0C	; 12
    38ce:	ce 01       	movw	r24, r28
    38d0:	08 de       	rcall	.-1008   	; 0x34e2 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    38d2:	88 23       	and	r24, r24
    38d4:	69 f0       	breq	.+26     	; 0x38f0 <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    #endif

    // Return Failed Signal
    return 0;
  }
  delay(10);
    38d6:	6a e0       	ldi	r22, 0x0A	; 10
    38d8:	70 e0       	ldi	r23, 0x00	; 0
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    38e2:	4a e1       	ldi	r20, 0x1A	; 26
    38e4:	6f e7       	ldi	r22, 0x7F	; 127
    38e6:	7c e0       	ldi	r23, 0x0C	; 12
    38e8:	ce 01       	movw	r24, r28
    38ea:	ad dc       	rcall	.-1702   	; 0x3246 <_ZN14Adafruit_PN5328readdataEPhh>
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	01 c0       	rjmp	.+2      	; 0x38f2 <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
    #endif
    return 0;
    38f0:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    38f2:	df 91       	pop	r29
    38f4:	cf 91       	pop	r28
    38f6:	08 95       	ret

000038f8 <_ZL9date2daysjhh>:
} // of method pinAlarm()                                                     //                                  //
/*******************************************************************************************************************
** Method pinSquareWave() will set the control register flag to make the INT/SQW Pin produce a 1Hz signal         **
*******************************************************************************************************************/
void DS3231M_Class::pinSquareWave() {                                         //                                  //
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)|0x4);                   // Set bit 3 to off                 //
    38f8:	80 3d       	cpi	r24, 0xD0	; 208
    38fa:	27 e0       	ldi	r18, 0x07	; 7
    38fc:	92 07       	cpc	r25, r18
    38fe:	10 f0       	brcs	.+4      	; 0x3904 <_ZL9date2daysjhh+0xc>
    3900:	80 5d       	subi	r24, 0xD0	; 208
    3902:	97 40       	sbci	r25, 0x07	; 7
    3904:	50 e0       	ldi	r21, 0x00	; 0
    3906:	eb e1       	ldi	r30, 0x1B	; 27
    3908:	f2 e0       	ldi	r31, 0x02	; 2
    390a:	21 e0       	ldi	r18, 0x01	; 1
    390c:	26 17       	cp	r18, r22
    390e:	30 f4       	brcc	.+12     	; 0x391c <_ZL9date2daysjhh+0x24>
    3910:	34 91       	lpm	r19, Z
    3912:	43 0f       	add	r20, r19
    3914:	51 1d       	adc	r21, r1
    3916:	2f 5f       	subi	r18, 0xFF	; 255
    3918:	31 96       	adiw	r30, 0x01	; 1
    391a:	f8 cf       	rjmp	.-16     	; 0x390c <_ZL9date2daysjhh+0x14>
    391c:	63 30       	cpi	r22, 0x03	; 3
    391e:	38 f0       	brcs	.+14     	; 0x392e <_ZL9date2daysjhh+0x36>
    3920:	9c 01       	movw	r18, r24
    3922:	23 70       	andi	r18, 0x03	; 3
    3924:	33 27       	eor	r19, r19
    3926:	23 2b       	or	r18, r19
    3928:	11 f4       	brne	.+4      	; 0x392e <_ZL9date2daysjhh+0x36>
    392a:	4f 5f       	subi	r20, 0xFF	; 255
    392c:	5f 4f       	sbci	r21, 0xFF	; 255
    392e:	bc 01       	movw	r22, r24
    3930:	6d 5f       	subi	r22, 0xFD	; 253
    3932:	7f 4f       	sbci	r23, 0xFF	; 255
    3934:	76 95       	lsr	r23
    3936:	67 95       	ror	r22
    3938:	76 95       	lsr	r23
    393a:	67 95       	ror	r22
    393c:	ed e6       	ldi	r30, 0x6D	; 109
    393e:	f1 e0       	ldi	r31, 0x01	; 1
    3940:	8e 9f       	mul	r24, r30
    3942:	90 01       	movw	r18, r0
    3944:	8f 9f       	mul	r24, r31
    3946:	30 0d       	add	r19, r0
    3948:	9e 9f       	mul	r25, r30
    394a:	30 0d       	add	r19, r0
    394c:	11 24       	eor	r1, r1
    394e:	c9 01       	movw	r24, r18
    3950:	01 97       	sbiw	r24, 0x01	; 1
    3952:	86 0f       	add	r24, r22
    3954:	97 1f       	adc	r25, r23
    3956:	84 0f       	add	r24, r20
    3958:	95 1f       	adc	r25, r21
    395a:	08 95       	ret

0000395c <_ZL6conv2dPKc>:
    395c:	fc 01       	movw	r30, r24
    395e:	90 81       	ld	r25, Z
    3960:	90 53       	subi	r25, 0x30	; 48
    3962:	9a 30       	cpi	r25, 0x0A	; 10
    3964:	08 f0       	brcs	.+2      	; 0x3968 <_ZL6conv2dPKc+0xc>
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	81 81       	ldd	r24, Z+1	; 0x01
    396a:	80 53       	subi	r24, 0x30	; 48
    396c:	2a e0       	ldi	r18, 0x0A	; 10
    396e:	92 9f       	mul	r25, r18
    3970:	80 0d       	add	r24, r0
    3972:	11 24       	eor	r1, r1
    3974:	08 95       	ret

00003976 <_ZN8DateTimeC1Em>:
    3976:	8f 92       	push	r8
    3978:	9f 92       	push	r9
    397a:	af 92       	push	r10
    397c:	bf 92       	push	r11
    397e:	cf 92       	push	r12
    3980:	df 92       	push	r13
    3982:	ef 92       	push	r14
    3984:	ff 92       	push	r15
    3986:	cf 93       	push	r28
    3988:	df 93       	push	r29
    398a:	ec 01       	movw	r28, r24
    398c:	6a 01       	movw	r12, r20
    398e:	7b 01       	movw	r14, r22
    3990:	80 e8       	ldi	r24, 0x80	; 128
    3992:	c8 1a       	sub	r12, r24
    3994:	83 e4       	ldi	r24, 0x43	; 67
    3996:	d8 0a       	sbc	r13, r24
    3998:	8d e6       	ldi	r24, 0x6D	; 109
    399a:	e8 0a       	sbc	r14, r24
    399c:	88 e3       	ldi	r24, 0x38	; 56
    399e:	f8 0a       	sbc	r15, r24
    39a0:	8c e3       	ldi	r24, 0x3C	; 60
    39a2:	88 2e       	mov	r8, r24
    39a4:	91 2c       	mov	r9, r1
    39a6:	a1 2c       	mov	r10, r1
    39a8:	b1 2c       	mov	r11, r1
    39aa:	c7 01       	movw	r24, r14
    39ac:	b6 01       	movw	r22, r12
    39ae:	a5 01       	movw	r20, r10
    39b0:	94 01       	movw	r18, r8
    39b2:	0e 94 7c 40 	call	0x80f8	; 0x80f8 <__udivmodsi4>
    39b6:	6d 83       	std	Y+5, r22	; 0x05
    39b8:	ca 01       	movw	r24, r20
    39ba:	b9 01       	movw	r22, r18
    39bc:	a5 01       	movw	r20, r10
    39be:	94 01       	movw	r18, r8
    39c0:	0e 94 7c 40 	call	0x80f8	; 0x80f8 <__udivmodsi4>
    39c4:	6c 83       	std	Y+4, r22	; 0x04
    39c6:	c7 01       	movw	r24, r14
    39c8:	b6 01       	movw	r22, r12
    39ca:	20 e1       	ldi	r18, 0x10	; 16
    39cc:	3e e0       	ldi	r19, 0x0E	; 14
    39ce:	40 e0       	ldi	r20, 0x00	; 0
    39d0:	50 e0       	ldi	r21, 0x00	; 0
    39d2:	0e 94 7c 40 	call	0x80f8	; 0x80f8 <__udivmodsi4>
    39d6:	ca 01       	movw	r24, r20
    39d8:	b9 01       	movw	r22, r18
    39da:	28 e1       	ldi	r18, 0x18	; 24
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	40 e0       	ldi	r20, 0x00	; 0
    39e0:	50 e0       	ldi	r21, 0x00	; 0
    39e2:	0e 94 7c 40 	call	0x80f8	; 0x80f8 <__udivmodsi4>
    39e6:	6b 83       	std	Y+3, r22	; 0x03
    39e8:	c7 01       	movw	r24, r14
    39ea:	b6 01       	movw	r22, r12
    39ec:	20 e8       	ldi	r18, 0x80	; 128
    39ee:	31 e5       	ldi	r19, 0x51	; 81
    39f0:	41 e0       	ldi	r20, 0x01	; 1
    39f2:	50 e0       	ldi	r21, 0x00	; 0
    39f4:	0e 94 7c 40 	call	0x80f8	; 0x80f8 <__udivmodsi4>
    39f8:	18 82       	st	Y, r1
    39fa:	88 81       	ld	r24, Y
    39fc:	98 2f       	mov	r25, r24
    39fe:	93 70       	andi	r25, 0x03	; 3
    3a00:	41 e0       	ldi	r20, 0x01	; 1
    3a02:	50 e0       	ldi	r21, 0x00	; 0
    3a04:	11 f0       	breq	.+4      	; 0x3a0a <_ZN8DateTimeC1Em+0x94>
    3a06:	40 e0       	ldi	r20, 0x00	; 0
    3a08:	50 e0       	ldi	r21, 0x00	; 0
    3a0a:	ba 01       	movw	r22, r20
    3a0c:	63 59       	subi	r22, 0x93	; 147
    3a0e:	7e 4f       	sbci	r23, 0xFE	; 254
    3a10:	26 17       	cp	r18, r22
    3a12:	37 07       	cpc	r19, r23
    3a14:	38 f0       	brcs	.+14     	; 0x3a24 <_ZN8DateTimeC1Em+0xae>
    3a16:	24 1b       	sub	r18, r20
    3a18:	35 0b       	sbc	r19, r21
    3a1a:	2d 56       	subi	r18, 0x6D	; 109
    3a1c:	31 40       	sbci	r19, 0x01	; 1
    3a1e:	8f 5f       	subi	r24, 0xFF	; 255
    3a20:	88 83       	st	Y, r24
    3a22:	eb cf       	rjmp	.-42     	; 0x39fa <_ZN8DateTimeC1Em+0x84>
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	89 83       	std	Y+1, r24	; 0x01
    3a28:	89 81       	ldd	r24, Y+1	; 0x01
    3a2a:	e8 2f       	mov	r30, r24
    3a2c:	f0 e0       	ldi	r31, 0x00	; 0
    3a2e:	e6 5e       	subi	r30, 0xE6	; 230
    3a30:	fd 4f       	sbci	r31, 0xFD	; 253
    3a32:	e4 91       	lpm	r30, Z
    3a34:	91 11       	cpse	r25, r1
    3a36:	03 c0       	rjmp	.+6      	; 0x3a3e <_ZN8DateTimeC1Em+0xc8>
    3a38:	82 30       	cpi	r24, 0x02	; 2
    3a3a:	09 f4       	brne	.+2      	; 0x3a3e <_ZN8DateTimeC1Em+0xc8>
    3a3c:	ef 5f       	subi	r30, 0xFF	; 255
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	2e 17       	cp	r18, r30
    3a42:	3f 07       	cpc	r19, r31
    3a44:	20 f0       	brcs	.+8      	; 0x3a4e <_ZN8DateTimeC1Em+0xd8>
    3a46:	2e 1b       	sub	r18, r30
    3a48:	3f 0b       	sbc	r19, r31
    3a4a:	8f 5f       	subi	r24, 0xFF	; 255
    3a4c:	ec cf       	rjmp	.-40     	; 0x3a26 <_ZN8DateTimeC1Em+0xb0>
    3a4e:	2f 5f       	subi	r18, 0xFF	; 255
    3a50:	2a 83       	std	Y+2, r18	; 0x02
    3a52:	df 91       	pop	r29
    3a54:	cf 91       	pop	r28
    3a56:	ff 90       	pop	r15
    3a58:	ef 90       	pop	r14
    3a5a:	df 90       	pop	r13
    3a5c:	cf 90       	pop	r12
    3a5e:	bf 90       	pop	r11
    3a60:	af 90       	pop	r10
    3a62:	9f 90       	pop	r9
    3a64:	8f 90       	pop	r8
    3a66:	08 95       	ret

00003a68 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    3a68:	ef 92       	push	r14
    3a6a:	ff 92       	push	r15
    3a6c:	0f 93       	push	r16
    3a6e:	1f 93       	push	r17
    3a70:	cf 93       	push	r28
    3a72:	df 93       	push	r29
    3a74:	cd b7       	in	r28, 0x3d	; 61
    3a76:	de b7       	in	r29, 0x3e	; 62
    3a78:	2b 97       	sbiw	r28, 0x0b	; 11
    3a7a:	0f b6       	in	r0, 0x3f	; 63
    3a7c:	f8 94       	cli
    3a7e:	de bf       	out	0x3e, r29	; 62
    3a80:	0f be       	out	0x3f, r0	; 63
    3a82:	cd bf       	out	0x3d, r28	; 61
    3a84:	8c 01       	movw	r16, r24
    3a86:	7a 01       	movw	r14, r20
    3a88:	4b e0       	ldi	r20, 0x0B	; 11
    3a8a:	50 e0       	ldi	r21, 0x00	; 0
    3a8c:	ce 01       	movw	r24, r28
    3a8e:	01 96       	adiw	r24, 0x01	; 1
    3a90:	0e 94 08 44 	call	0x8810	; 0x8810 <memcpy_P>
    3a94:	ce 01       	movw	r24, r28
    3a96:	0a 96       	adiw	r24, 0x0a	; 10
    3a98:	61 df       	rcall	.-318    	; 0x395c <_ZL6conv2dPKc>
    3a9a:	f8 01       	movw	r30, r16
    3a9c:	80 83       	st	Z, r24
    3a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    3aa0:	8e 2f       	mov	r24, r30
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	e1 54       	subi	r30, 0x41	; 65
    3aa8:	f1 09       	sbc	r31, r1
    3aaa:	e3 31       	cpi	r30, 0x13	; 19
    3aac:	f1 05       	cpc	r31, r1
    3aae:	48 f5       	brcc	.+82     	; 0x3b02 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    3ab0:	ef 5a       	subi	r30, 0xAF	; 175
    3ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab4:	0c 94 9e 40 	jmp	0x813c	; 0x813c <__tablejump2__>
    3ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aba:	81 36       	cpi	r24, 0x61	; 97
    3abc:	29 f0       	breq	.+10     	; 0x3ac8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    3abe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac0:	8e 36       	cpi	r24, 0x6E	; 110
    3ac2:	21 f0       	breq	.+8      	; 0x3acc <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    3ac4:	87 e0       	ldi	r24, 0x07	; 7
    3ac6:	1b c0       	rjmp	.+54     	; 0x3afe <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3ac8:	81 e0       	ldi	r24, 0x01	; 1
    3aca:	19 c0       	rjmp	.+50     	; 0x3afe <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3acc:	86 e0       	ldi	r24, 0x06	; 6
    3ace:	17 c0       	rjmp	.+46     	; 0x3afe <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3ad0:	82 e0       	ldi	r24, 0x02	; 2
    3ad2:	15 c0       	rjmp	.+42     	; 0x3afe <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad6:	82 37       	cpi	r24, 0x72	; 114
    3ad8:	11 f0       	breq	.+4      	; 0x3ade <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    3ada:	88 e0       	ldi	r24, 0x08	; 8
    3adc:	10 c0       	rjmp	.+32     	; 0x3afe <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3ade:	84 e0       	ldi	r24, 0x04	; 4
    3ae0:	0e c0       	rjmp	.+28     	; 0x3afe <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae4:	82 37       	cpi	r24, 0x72	; 114
    3ae6:	11 f0       	breq	.+4      	; 0x3aec <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    3ae8:	85 e0       	ldi	r24, 0x05	; 5
    3aea:	09 c0       	rjmp	.+18     	; 0x3afe <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3aec:	83 e0       	ldi	r24, 0x03	; 3
    3aee:	07 c0       	rjmp	.+14     	; 0x3afe <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3af0:	89 e0       	ldi	r24, 0x09	; 9
    3af2:	05 c0       	rjmp	.+10     	; 0x3afe <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3af4:	8a e0       	ldi	r24, 0x0A	; 10
    3af6:	03 c0       	rjmp	.+6      	; 0x3afe <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3af8:	8b e0       	ldi	r24, 0x0B	; 11
    3afa:	01 c0       	rjmp	.+2      	; 0x3afe <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3afc:	8c e0       	ldi	r24, 0x0C	; 12
    3afe:	f8 01       	movw	r30, r16
    3b00:	81 83       	std	Z+1, r24	; 0x01
    3b02:	ce 01       	movw	r24, r28
    3b04:	05 96       	adiw	r24, 0x05	; 5
    3b06:	2a df       	rcall	.-428    	; 0x395c <_ZL6conv2dPKc>
    3b08:	f8 01       	movw	r30, r16
    3b0a:	82 83       	std	Z+2, r24	; 0x02
    3b0c:	48 e0       	ldi	r20, 0x08	; 8
    3b0e:	50 e0       	ldi	r21, 0x00	; 0
    3b10:	b7 01       	movw	r22, r14
    3b12:	ce 01       	movw	r24, r28
    3b14:	01 96       	adiw	r24, 0x01	; 1
    3b16:	0e 94 08 44 	call	0x8810	; 0x8810 <memcpy_P>
    3b1a:	ce 01       	movw	r24, r28
    3b1c:	01 96       	adiw	r24, 0x01	; 1
    3b1e:	1e df       	rcall	.-452    	; 0x395c <_ZL6conv2dPKc>
    3b20:	f8 01       	movw	r30, r16
    3b22:	83 83       	std	Z+3, r24	; 0x03
    3b24:	ce 01       	movw	r24, r28
    3b26:	04 96       	adiw	r24, 0x04	; 4
    3b28:	19 df       	rcall	.-462    	; 0x395c <_ZL6conv2dPKc>
    3b2a:	f8 01       	movw	r30, r16
    3b2c:	84 83       	std	Z+4, r24	; 0x04
    3b2e:	ce 01       	movw	r24, r28
    3b30:	07 96       	adiw	r24, 0x07	; 7
    3b32:	14 df       	rcall	.-472    	; 0x395c <_ZL6conv2dPKc>
    3b34:	f8 01       	movw	r30, r16
    3b36:	85 83       	std	Z+5, r24	; 0x05
    3b38:	2b 96       	adiw	r28, 0x0b	; 11
    3b3a:	0f b6       	in	r0, 0x3f	; 63
    3b3c:	f8 94       	cli
    3b3e:	de bf       	out	0x3e, r29	; 62
    3b40:	0f be       	out	0x3f, r0	; 63
    3b42:	cd bf       	out	0x3d, r28	; 61
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	1f 91       	pop	r17
    3b4a:	0f 91       	pop	r16
    3b4c:	ff 90       	pop	r15
    3b4e:	ef 90       	pop	r14
    3b50:	08 95       	ret

00003b52 <_ZNK8DateTime12dayOfTheWeekEv>:
    3b52:	fc 01       	movw	r30, r24
    3b54:	80 81       	ld	r24, Z
    3b56:	42 81       	ldd	r20, Z+2	; 0x02
    3b58:	61 81       	ldd	r22, Z+1	; 0x01
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	cd de       	rcall	.-614    	; 0x38f8 <_ZL9date2daysjhh>
    3b5e:	06 96       	adiw	r24, 0x06	; 6
    3b60:	67 e0       	ldi	r22, 0x07	; 7
    3b62:	70 e0       	ldi	r23, 0x00	; 0
    3b64:	0c 94 68 40 	jmp	0x80d0	; 0x80d0 <__udivmodhi4>
    3b68:	08 95       	ret

00003b6a <_ZNK8DateTime8unixtimeEv>:
    3b6a:	ef 92       	push	r14
    3b6c:	ff 92       	push	r15
    3b6e:	0f 93       	push	r16
    3b70:	1f 93       	push	r17
    3b72:	cf 93       	push	r28
    3b74:	df 93       	push	r29
    3b76:	ec 01       	movw	r28, r24
    3b78:	88 81       	ld	r24, Y
    3b7a:	4a 81       	ldd	r20, Y+2	; 0x02
    3b7c:	69 81       	ldd	r22, Y+1	; 0x01
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	bb de       	rcall	.-650    	; 0x38f8 <_ZL9date2daysjhh>
    3b82:	9c 01       	movw	r18, r24
    3b84:	a8 e1       	ldi	r26, 0x18	; 24
    3b86:	b0 e0       	ldi	r27, 0x00	; 0
    3b88:	0e 94 a7 40 	call	0x814e	; 0x814e <__umulhisi3>
    3b8c:	2b 81       	ldd	r18, Y+3	; 0x03
    3b8e:	7b 01       	movw	r14, r22
    3b90:	8c 01       	movw	r16, r24
    3b92:	e2 0e       	add	r14, r18
    3b94:	f1 1c       	adc	r15, r1
    3b96:	01 1d       	adc	r16, r1
    3b98:	11 1d       	adc	r17, r1
    3b9a:	a8 01       	movw	r20, r16
    3b9c:	97 01       	movw	r18, r14
    3b9e:	ac e3       	ldi	r26, 0x3C	; 60
    3ba0:	b0 e0       	ldi	r27, 0x00	; 0
    3ba2:	0e 94 b6 40 	call	0x816c	; 0x816c <__muluhisi3>
    3ba6:	2c 81       	ldd	r18, Y+4	; 0x04
    3ba8:	7b 01       	movw	r14, r22
    3baa:	8c 01       	movw	r16, r24
    3bac:	e2 0e       	add	r14, r18
    3bae:	f1 1c       	adc	r15, r1
    3bb0:	01 1d       	adc	r16, r1
    3bb2:	11 1d       	adc	r17, r1
    3bb4:	a8 01       	movw	r20, r16
    3bb6:	97 01       	movw	r18, r14
    3bb8:	0e 94 b6 40 	call	0x816c	; 0x816c <__muluhisi3>
    3bbc:	2d 81       	ldd	r18, Y+5	; 0x05
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	cb 01       	movw	r24, r22
    3bc2:	82 0f       	add	r24, r18
    3bc4:	91 1d       	adc	r25, r1
    3bc6:	a1 1d       	adc	r26, r1
    3bc8:	b1 1d       	adc	r27, r1
    3bca:	bc 01       	movw	r22, r24
    3bcc:	cd 01       	movw	r24, r26
    3bce:	60 58       	subi	r22, 0x80	; 128
    3bd0:	7c 4b       	sbci	r23, 0xBC	; 188
    3bd2:	82 49       	sbci	r24, 0x92	; 146
    3bd4:	97 4c       	sbci	r25, 0xC7	; 199
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	1f 91       	pop	r17
    3bdc:	0f 91       	pop	r16
    3bde:	ff 90       	pop	r15
    3be0:	ef 90       	pop	r14
    3be2:	08 95       	ret

00003be4 <_ZNK8DateTime11secondstimeEv>:
    3be4:	ef 92       	push	r14
    3be6:	ff 92       	push	r15
    3be8:	0f 93       	push	r16
    3bea:	1f 93       	push	r17
    3bec:	cf 93       	push	r28
    3bee:	df 93       	push	r29
    3bf0:	ec 01       	movw	r28, r24
    3bf2:	88 81       	ld	r24, Y
    3bf4:	4a 81       	ldd	r20, Y+2	; 0x02
    3bf6:	69 81       	ldd	r22, Y+1	; 0x01
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	7e de       	rcall	.-772    	; 0x38f8 <_ZL9date2daysjhh>
    3bfc:	9c 01       	movw	r18, r24
    3bfe:	a8 e1       	ldi	r26, 0x18	; 24
    3c00:	b0 e0       	ldi	r27, 0x00	; 0
    3c02:	0e 94 a7 40 	call	0x814e	; 0x814e <__umulhisi3>
    3c06:	2b 81       	ldd	r18, Y+3	; 0x03
    3c08:	7b 01       	movw	r14, r22
    3c0a:	8c 01       	movw	r16, r24
    3c0c:	e2 0e       	add	r14, r18
    3c0e:	f1 1c       	adc	r15, r1
    3c10:	01 1d       	adc	r16, r1
    3c12:	11 1d       	adc	r17, r1
    3c14:	a8 01       	movw	r20, r16
    3c16:	97 01       	movw	r18, r14
    3c18:	ac e3       	ldi	r26, 0x3C	; 60
    3c1a:	b0 e0       	ldi	r27, 0x00	; 0
    3c1c:	0e 94 b6 40 	call	0x816c	; 0x816c <__muluhisi3>
    3c20:	2c 81       	ldd	r18, Y+4	; 0x04
    3c22:	7b 01       	movw	r14, r22
    3c24:	8c 01       	movw	r16, r24
    3c26:	e2 0e       	add	r14, r18
    3c28:	f1 1c       	adc	r15, r1
    3c2a:	01 1d       	adc	r16, r1
    3c2c:	11 1d       	adc	r17, r1
    3c2e:	a8 01       	movw	r20, r16
    3c30:	97 01       	movw	r18, r14
    3c32:	0e 94 b6 40 	call	0x816c	; 0x816c <__muluhisi3>
    3c36:	2d 81       	ldd	r18, Y+5	; 0x05
    3c38:	62 0f       	add	r22, r18
    3c3a:	71 1d       	adc	r23, r1
    3c3c:	81 1d       	adc	r24, r1
    3c3e:	91 1d       	adc	r25, r1
    3c40:	df 91       	pop	r29
    3c42:	cf 91       	pop	r28
    3c44:	1f 91       	pop	r17
    3c46:	0f 91       	pop	r16
    3c48:	ff 90       	pop	r15
    3c4a:	ef 90       	pop	r14
    3c4c:	08 95       	ret

00003c4e <_ZN13DS3231M_ClassC1Ev>:
    3c4e:	fc 01       	movw	r30, r24
    3c50:	10 82       	st	Z, r1
    3c52:	11 82       	std	Z+1, r1	; 0x01
    3c54:	12 82       	std	Z+2, r1	; 0x02
    3c56:	13 82       	std	Z+3, r1	; 0x03
    3c58:	14 82       	std	Z+4, r1	; 0x04
    3c5a:	08 95       	ret

00003c5c <_ZN13DS3231M_ClassD1Ev>:
    3c5c:	08 95       	ret

00003c5e <_ZN13DS3231M_Class9writeByteEhh>:
    3c5e:	0f 93       	push	r16
    3c60:	1f 93       	push	r17
    3c62:	cf 93       	push	r28
    3c64:	df 93       	push	r29
    3c66:	ec 01       	movw	r28, r24
    3c68:	06 2f       	mov	r16, r22
    3c6a:	14 2f       	mov	r17, r20
    3c6c:	68 e6       	ldi	r22, 0x68	; 104
    3c6e:	8f e7       	ldi	r24, 0x7F	; 127
    3c70:	9d e0       	ldi	r25, 0x0D	; 13
    3c72:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>
    3c76:	60 2f       	mov	r22, r16
    3c78:	8f e7       	ldi	r24, 0x7F	; 127
    3c7a:	9d e0       	ldi	r25, 0x0D	; 13
    3c7c:	0e 94 dd 36 	call	0x6dba	; 0x6dba <_ZN7TwoWire5writeEh>
    3c80:	61 2f       	mov	r22, r17
    3c82:	8f e7       	ldi	r24, 0x7F	; 127
    3c84:	9d e0       	ldi	r25, 0x0D	; 13
    3c86:	0e 94 dd 36 	call	0x6dba	; 0x6dba <_ZN7TwoWire5writeEh>
    3c8a:	8f e7       	ldi	r24, 0x7F	; 127
    3c8c:	9d e0       	ldi	r25, 0x0D	; 13
    3c8e:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
    3c92:	88 83       	st	Y, r24
    3c94:	df 91       	pop	r29
    3c96:	cf 91       	pop	r28
    3c98:	1f 91       	pop	r17
    3c9a:	0f 91       	pop	r16
    3c9c:	08 95       	ret

00003c9e <_ZN13DS3231M_Class8readByteEh>:
    3c9e:	1f 93       	push	r17
    3ca0:	cf 93       	push	r28
    3ca2:	df 93       	push	r29
    3ca4:	ec 01       	movw	r28, r24
    3ca6:	16 2f       	mov	r17, r22
    3ca8:	68 e6       	ldi	r22, 0x68	; 104
    3caa:	8f e7       	ldi	r24, 0x7F	; 127
    3cac:	9d e0       	ldi	r25, 0x0D	; 13
    3cae:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>
    3cb2:	61 2f       	mov	r22, r17
    3cb4:	8f e7       	ldi	r24, 0x7F	; 127
    3cb6:	9d e0       	ldi	r25, 0x0D	; 13
    3cb8:	0e 94 dd 36 	call	0x6dba	; 0x6dba <_ZN7TwoWire5writeEh>
    3cbc:	8f e7       	ldi	r24, 0x7F	; 127
    3cbe:	9d e0       	ldi	r25, 0x0D	; 13
    3cc0:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
    3cc4:	88 83       	st	Y, r24
    3cc6:	41 e0       	ldi	r20, 0x01	; 1
    3cc8:	68 e6       	ldi	r22, 0x68	; 104
    3cca:	8f e7       	ldi	r24, 0x7F	; 127
    3ccc:	9d e0       	ldi	r25, 0x0D	; 13
    3cce:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <_ZN7TwoWire11requestFromEhh>
    3cd2:	8f e7       	ldi	r24, 0x7F	; 127
    3cd4:	9d e0       	ldi	r25, 0x0D	; 13
    3cd6:	0e 94 57 36 	call	0x6cae	; 0x6cae <_ZN7TwoWire4readEv>
    3cda:	df 91       	pop	r29
    3cdc:	cf 91       	pop	r28
    3cde:	1f 91       	pop	r17
    3ce0:	08 95       	ret

00003ce2 <_ZN13DS3231M_Class5beginEm>:
    3ce2:	cf 92       	push	r12
    3ce4:	df 92       	push	r13
    3ce6:	ef 92       	push	r14
    3ce8:	ff 92       	push	r15
    3cea:	cf 93       	push	r28
    3cec:	df 93       	push	r29
    3cee:	ec 01       	movw	r28, r24
    3cf0:	6a 01       	movw	r12, r20
    3cf2:	7b 01       	movw	r14, r22
    3cf4:	8f e7       	ldi	r24, 0x7F	; 127
    3cf6:	9d e0       	ldi	r25, 0x0D	; 13
    3cf8:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <_ZN7TwoWire5beginEv>
    3cfc:	b7 01       	movw	r22, r14
    3cfe:	a6 01       	movw	r20, r12
    3d00:	8f e7       	ldi	r24, 0x7F	; 127
    3d02:	9d e0       	ldi	r25, 0x0D	; 13
    3d04:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <_ZN7TwoWire8setClockEm>
    3d08:	68 e6       	ldi	r22, 0x68	; 104
    3d0a:	8f e7       	ldi	r24, 0x7F	; 127
    3d0c:	9d e0       	ldi	r25, 0x0D	; 13
    3d0e:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>
    3d12:	8f e7       	ldi	r24, 0x7F	; 127
    3d14:	9d e0       	ldi	r25, 0x0D	; 13
    3d16:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
    3d1a:	81 11       	cpse	r24, r1
    3d1c:	0a c0       	rjmp	.+20     	; 0x3d32 <_ZN13DS3231M_Class5beginEm+0x50>
    3d1e:	62 e0       	ldi	r22, 0x02	; 2
    3d20:	ce 01       	movw	r24, r28
    3d22:	bd df       	rcall	.-134    	; 0x3c9e <_ZN13DS3231M_Class8readByteEh>
    3d24:	48 2f       	mov	r20, r24
    3d26:	4f 7b       	andi	r20, 0xBF	; 191
    3d28:	62 e0       	ldi	r22, 0x02	; 2
    3d2a:	ce 01       	movw	r24, r28
    3d2c:	98 df       	rcall	.-208    	; 0x3c5e <_ZN13DS3231M_Class9writeByteEhh>
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	01 c0       	rjmp	.+2      	; 0x3d34 <_ZN13DS3231M_Class5beginEm+0x52>
    3d32:	80 e0       	ldi	r24, 0x00	; 0
    3d34:	df 91       	pop	r29
    3d36:	cf 91       	pop	r28
    3d38:	ff 90       	pop	r15
    3d3a:	ef 90       	pop	r14
    3d3c:	df 90       	pop	r13
    3d3e:	cf 90       	pop	r12
    3d40:	08 95       	ret

00003d42 <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    3d42:	0f 93       	push	r16
    3d44:	1f 93       	push	r17
    3d46:	cf 93       	push	r28
    3d48:	df 93       	push	r29
    3d4a:	8c 01       	movw	r16, r24
    3d4c:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    3d4e:	68 e6       	ldi	r22, 0x68	; 104
    3d50:	8f e7       	ldi	r24, 0x7F	; 127
    3d52:	9d e0       	ldi	r25, 0x0D	; 13
    3d54:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    3d58:	60 e0       	ldi	r22, 0x00	; 0
    3d5a:	8f e7       	ldi	r24, 0x7F	; 127
    3d5c:	9d e0       	ldi	r25, 0x0D	; 13
    3d5e:	0e 94 dd 36 	call	0x6dba	; 0x6dba <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    3d62:	8f e7       	ldi	r24, 0x7F	; 127
    3d64:	9d e0       	ldi	r25, 0x0D	; 13
    3d66:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
    3d6a:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    3d6c:	47 e0       	ldi	r20, 0x07	; 7
    3d6e:	68 e6       	ldi	r22, 0x68	; 104
    3d70:	8f e7       	ldi	r24, 0x7F	; 127
    3d72:	9d e0       	ldi	r25, 0x0D	; 13
    3d74:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    3d78:	8f e7       	ldi	r24, 0x7F	; 127
    3d7a:	9d e0       	ldi	r25, 0x0D	; 13
    3d7c:	0e 94 4f 36 	call	0x6c9e	; 0x6c9e <_ZN7TwoWire9availableEv>
    3d80:	07 97       	sbiw	r24, 0x07	; 7
    3d82:	09 f0       	breq	.+2      	; 0x3d86 <_ZN13DS3231M_Class3nowEv+0x44>
    3d84:	64 c0       	rjmp	.+200    	; 0x3e4e <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    3d86:	8f e7       	ldi	r24, 0x7F	; 127
    3d88:	9d e0       	ldi	r25, 0x0D	; 13
    3d8a:	0e 94 57 36 	call	0x6cae	; 0x6cae <_ZN7TwoWire4readEv>
    3d8e:	98 2f       	mov	r25, r24
    3d90:	96 95       	lsr	r25
    3d92:	96 95       	lsr	r25
    3d94:	96 95       	lsr	r25
    3d96:	9e 70       	andi	r25, 0x0E	; 14
    3d98:	29 2f       	mov	r18, r25
    3d9a:	22 0f       	add	r18, r18
    3d9c:	22 0f       	add	r18, r18
    3d9e:	92 0f       	add	r25, r18
    3da0:	8f 70       	andi	r24, 0x0F	; 15
    3da2:	89 0f       	add	r24, r25
    3da4:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    3da6:	8f e7       	ldi	r24, 0x7F	; 127
    3da8:	9d e0       	ldi	r25, 0x0D	; 13
    3daa:	0e 94 57 36 	call	0x6cae	; 0x6cae <_ZN7TwoWire4readEv>
    3dae:	98 2f       	mov	r25, r24
    3db0:	96 95       	lsr	r25
    3db2:	96 95       	lsr	r25
    3db4:	96 95       	lsr	r25
    3db6:	9e 70       	andi	r25, 0x0E	; 14
    3db8:	29 2f       	mov	r18, r25
    3dba:	22 0f       	add	r18, r18
    3dbc:	22 0f       	add	r18, r18
    3dbe:	92 0f       	add	r25, r18
    3dc0:	8f 70       	andi	r24, 0x0F	; 15
    3dc2:	89 0f       	add	r24, r25
    3dc4:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    3dc6:	8f e7       	ldi	r24, 0x7F	; 127
    3dc8:	9d e0       	ldi	r25, 0x0D	; 13
    3dca:	0e 94 57 36 	call	0x6cae	; 0x6cae <_ZN7TwoWire4readEv>
    3dce:	98 2f       	mov	r25, r24
    3dd0:	96 95       	lsr	r25
    3dd2:	96 95       	lsr	r25
    3dd4:	96 95       	lsr	r25
    3dd6:	9e 70       	andi	r25, 0x0E	; 14
    3dd8:	29 2f       	mov	r18, r25
    3dda:	22 0f       	add	r18, r18
    3ddc:	22 0f       	add	r18, r18
    3dde:	92 0f       	add	r25, r18
    3de0:	8f 70       	andi	r24, 0x0F	; 15
    3de2:	89 0f       	add	r24, r25
    3de4:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    3de6:	8f e7       	ldi	r24, 0x7F	; 127
    3de8:	9d e0       	ldi	r25, 0x0D	; 13
    3dea:	0e 94 57 36 	call	0x6cae	; 0x6cae <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    3dee:	8f e7       	ldi	r24, 0x7F	; 127
    3df0:	9d e0       	ldi	r25, 0x0D	; 13
    3df2:	0e 94 57 36 	call	0x6cae	; 0x6cae <_ZN7TwoWire4readEv>
    3df6:	98 2f       	mov	r25, r24
    3df8:	96 95       	lsr	r25
    3dfa:	96 95       	lsr	r25
    3dfc:	96 95       	lsr	r25
    3dfe:	96 70       	andi	r25, 0x06	; 6
    3e00:	29 2f       	mov	r18, r25
    3e02:	22 0f       	add	r18, r18
    3e04:	22 0f       	add	r18, r18
    3e06:	92 0f       	add	r25, r18
    3e08:	8f 70       	andi	r24, 0x0F	; 15
    3e0a:	89 0f       	add	r24, r25
    3e0c:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    3e0e:	8f e7       	ldi	r24, 0x7F	; 127
    3e10:	9d e0       	ldi	r25, 0x0D	; 13
    3e12:	0e 94 57 36 	call	0x6cae	; 0x6cae <_ZN7TwoWire4readEv>
    3e16:	84 fb       	bst	r24, 4
    3e18:	99 27       	eor	r25, r25
    3e1a:	90 f9       	bld	r25, 0
    3e1c:	99 0f       	add	r25, r25
    3e1e:	29 2f       	mov	r18, r25
    3e20:	22 0f       	add	r18, r18
    3e22:	22 0f       	add	r18, r18
    3e24:	92 0f       	add	r25, r18
    3e26:	8f 70       	andi	r24, 0x0F	; 15
    3e28:	89 0f       	add	r24, r25
    3e2a:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    3e2c:	8f e7       	ldi	r24, 0x7F	; 127
    3e2e:	9d e0       	ldi	r25, 0x0D	; 13
    3e30:	0e 94 57 36 	call	0x6cae	; 0x6cae <_ZN7TwoWire4readEv>
    3e34:	98 2f       	mov	r25, r24
    3e36:	92 95       	swap	r25
    3e38:	9f 70       	andi	r25, 0x0F	; 15
    3e3a:	8f 70       	andi	r24, 0x0F	; 15
    3e3c:	2a e0       	ldi	r18, 0x0A	; 10
    3e3e:	92 9f       	mul	r25, r18
    3e40:	80 0d       	add	r24, r0
    3e42:	11 24       	eor	r1, r1
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	80 53       	subi	r24, 0x30	; 48
    3e48:	98 4f       	sbci	r25, 0xF8	; 248
    3e4a:	9b 87       	std	Y+11, r25	; 0x0b
    3e4c:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    3e4e:	2d 81       	ldd	r18, Y+5	; 0x05
    3e50:	3e 81       	ldd	r19, Y+6	; 0x06
    3e52:	4f 81       	ldd	r20, Y+7	; 0x07
    3e54:	58 85       	ldd	r21, Y+8	; 0x08
    3e56:	69 85       	ldd	r22, Y+9	; 0x09
    3e58:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e5a:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    3e5c:	80 3d       	cpi	r24, 0xD0	; 208
    3e5e:	77 e0       	ldi	r23, 0x07	; 7
    3e60:	97 07       	cpc	r25, r23
    3e62:	10 f0       	brcs	.+4      	; 0x3e68 <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    3e64:	80 5d       	subi	r24, 0xD0	; 208
    3e66:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    3e68:	f8 01       	movw	r30, r16
    3e6a:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    3e6c:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    3e6e:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    3e70:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    3e72:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    3e74:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    3e76:	c8 01       	movw	r24, r16
    3e78:	df 91       	pop	r29
    3e7a:	cf 91       	pop	r28
    3e7c:	1f 91       	pop	r17
    3e7e:	0f 91       	pop	r16
    3e80:	08 95       	ret

00003e82 <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    3e82:	df 92       	push	r13
    3e84:	ef 92       	push	r14
    3e86:	ff 92       	push	r15
    3e88:	0f 93       	push	r16
    3e8a:	1f 93       	push	r17
    3e8c:	cf 93       	push	r28
    3e8e:	df 93       	push	r29
    3e90:	00 d0       	rcall	.+0      	; 0x3e92 <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    3e92:	00 d0       	rcall	.+0      	; 0x3e94 <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    3e94:	00 d0       	rcall	.+0      	; 0x3e96 <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    3e96:	cd b7       	in	r28, 0x3d	; 61
    3e98:	de b7       	in	r29, 0x3e	; 62
    3e9a:	8c 01       	movw	r16, r24
    3e9c:	7b 01       	movw	r14, r22
    3e9e:	fb 01       	movw	r30, r22
    3ea0:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    3ea2:	9a e0       	ldi	r25, 0x0A	; 10
    3ea4:	d9 2e       	mov	r13, r25
    3ea6:	6d 2d       	mov	r22, r13
    3ea8:	0e 94 5c 40 	call	0x80b8	; 0x80b8 <__udivmodqi4>
    3eac:	49 2f       	mov	r20, r25
    3eae:	f0 e1       	ldi	r31, 0x10	; 16
    3eb0:	8f 9f       	mul	r24, r31
    3eb2:	40 0d       	add	r20, r0
    3eb4:	11 24       	eor	r1, r1
    3eb6:	60 e0       	ldi	r22, 0x00	; 0
    3eb8:	c8 01       	movw	r24, r16
    3eba:	d1 de       	rcall	.-606    	; 0x3c5e <_ZN13DS3231M_Class9writeByteEhh>
    3ebc:	f7 01       	movw	r30, r14
    3ebe:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    3ec0:	6d 2d       	mov	r22, r13
    3ec2:	0e 94 5c 40 	call	0x80b8	; 0x80b8 <__udivmodqi4>
    3ec6:	49 2f       	mov	r20, r25
    3ec8:	f0 e1       	ldi	r31, 0x10	; 16
    3eca:	8f 9f       	mul	r24, r31
    3ecc:	40 0d       	add	r20, r0
    3ece:	11 24       	eor	r1, r1
    3ed0:	61 e0       	ldi	r22, 0x01	; 1
    3ed2:	c8 01       	movw	r24, r16
    3ed4:	c4 de       	rcall	.-632    	; 0x3c5e <_ZN13DS3231M_Class9writeByteEhh>
    3ed6:	f7 01       	movw	r30, r14
    3ed8:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    3eda:	6d 2d       	mov	r22, r13
    3edc:	0e 94 5c 40 	call	0x80b8	; 0x80b8 <__udivmodqi4>
    3ee0:	49 2f       	mov	r20, r25
    3ee2:	f0 e1       	ldi	r31, 0x10	; 16
    3ee4:	8f 9f       	mul	r24, r31
    3ee6:	40 0d       	add	r20, r0
    3ee8:	11 24       	eor	r1, r1
    3eea:	62 e0       	ldi	r22, 0x02	; 2
    3eec:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    3eee:	b7 de       	rcall	.-658    	; 0x3c5e <_ZN13DS3231M_Class9writeByteEhh>
    3ef0:	c7 01       	movw	r24, r14
    3ef2:	2f de       	rcall	.-930    	; 0x3b52 <_ZNK8DateTime12dayOfTheWeekEv>
    3ef4:	48 2f       	mov	r20, r24
    3ef6:	63 e0       	ldi	r22, 0x03	; 3
    3ef8:	c8 01       	movw	r24, r16
    3efa:	b1 de       	rcall	.-670    	; 0x3c5e <_ZN13DS3231M_Class9writeByteEhh>
    3efc:	f7 01       	movw	r30, r14
    3efe:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    3f00:	6d 2d       	mov	r22, r13
    3f02:	0e 94 5c 40 	call	0x80b8	; 0x80b8 <__udivmodqi4>
    3f06:	49 2f       	mov	r20, r25
    3f08:	f0 e1       	ldi	r31, 0x10	; 16
    3f0a:	8f 9f       	mul	r24, r31
    3f0c:	40 0d       	add	r20, r0
    3f0e:	11 24       	eor	r1, r1
    3f10:	64 e0       	ldi	r22, 0x04	; 4
    3f12:	c8 01       	movw	r24, r16
    3f14:	a4 de       	rcall	.-696    	; 0x3c5e <_ZN13DS3231M_Class9writeByteEhh>
    3f16:	f7 01       	movw	r30, r14
    3f18:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    3f1a:	6d 2d       	mov	r22, r13
    3f1c:	0e 94 5c 40 	call	0x80b8	; 0x80b8 <__udivmodqi4>
    3f20:	49 2f       	mov	r20, r25
    3f22:	f0 e1       	ldi	r31, 0x10	; 16
    3f24:	8f 9f       	mul	r24, r31
    3f26:	40 0d       	add	r20, r0
    3f28:	11 24       	eor	r1, r1
    3f2a:	65 e0       	ldi	r22, 0x05	; 5
    3f2c:	c8 01       	movw	r24, r16
    3f2e:	97 de       	rcall	.-722    	; 0x3c5e <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    3f30:	f7 01       	movw	r30, r14
    3f32:	80 81       	ld	r24, Z
    3f34:	6d 2d       	mov	r22, r13
    3f36:	0e 94 5c 40 	call	0x80b8	; 0x80b8 <__udivmodqi4>
    3f3a:	49 2f       	mov	r20, r25
    3f3c:	f0 e1       	ldi	r31, 0x10	; 16
    3f3e:	8f 9f       	mul	r24, r31
    3f40:	40 0d       	add	r20, r0
    3f42:	11 24       	eor	r1, r1
    3f44:	66 e0       	ldi	r22, 0x06	; 6
    3f46:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    3f48:	8a de       	rcall	.-748    	; 0x3c5e <_ZN13DS3231M_Class9writeByteEhh>
    3f4a:	6f e0       	ldi	r22, 0x0F	; 15
    3f4c:	c8 01       	movw	r24, r16
    3f4e:	a7 de       	rcall	.-690    	; 0x3c9e <_ZN13DS3231M_Class8readByteEh>
    3f50:	48 2f       	mov	r20, r24
    3f52:	4f 77       	andi	r20, 0x7F	; 127
    3f54:	6f e0       	ldi	r22, 0x0F	; 15
    3f56:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    3f58:	82 de       	rcall	.-764    	; 0x3c5e <_ZN13DS3231M_Class9writeByteEhh>
    3f5a:	6e e0       	ldi	r22, 0x0E	; 14
    3f5c:	c8 01       	movw	r24, r16
    3f5e:	9f de       	rcall	.-706    	; 0x3c9e <_ZN13DS3231M_Class8readByteEh>
    3f60:	48 2f       	mov	r20, r24
    3f62:	4f 77       	andi	r20, 0x7F	; 127
    3f64:	6e e0       	ldi	r22, 0x0E	; 14
    3f66:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    3f68:	7a de       	rcall	.-780    	; 0x3c5e <_ZN13DS3231M_Class9writeByteEhh>
    3f6a:	b8 01       	movw	r22, r16
    3f6c:	ce 01       	movw	r24, r28
    3f6e:	01 96       	adiw	r24, 0x01	; 1
    3f70:	e8 de       	rcall	.-560    	; 0x3d42 <_ZN13DS3231M_Class3nowEv>
    3f72:	ce 01       	movw	r24, r28
    3f74:	01 96       	adiw	r24, 0x01	; 1
    3f76:	f9 dd       	rcall	.-1038   	; 0x3b6a <_ZNK8DateTime8unixtimeEv>
    3f78:	f8 01       	movw	r30, r16
    3f7a:	61 83       	std	Z+1, r22	; 0x01
    3f7c:	72 83       	std	Z+2, r23	; 0x02
    3f7e:	83 83       	std	Z+3, r24	; 0x03
    3f80:	94 83       	std	Z+4, r25	; 0x04
    3f82:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    3f84:	0f b6       	in	r0, 0x3f	; 63
    3f86:	f8 94       	cli
    3f88:	de bf       	out	0x3e, r29	; 62
    3f8a:	0f be       	out	0x3f, r0	; 63
    3f8c:	cd bf       	out	0x3d, r28	; 61
    3f8e:	df 91       	pop	r29
    3f90:	cf 91       	pop	r28
    3f92:	1f 91       	pop	r17
    3f94:	0f 91       	pop	r16
    3f96:	ff 90       	pop	r15
    3f98:	ef 90       	pop	r14
    3f9a:	df 90       	pop	r13
    3f9c:	08 95       	ret

00003f9e <_ZN13DS3231M_Class6adjustEv>:
    3f9e:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    3fa0:	1f 93       	push	r17
    3fa2:	cf 93       	push	r28
    3fa4:	df 93       	push	r29
    3fa6:	00 d0       	rcall	.+0      	; 0x3fa8 <_ZN13DS3231M_Class6adjustEv+0xa>
    3fa8:	00 d0       	rcall	.+0      	; 0x3faa <_ZN13DS3231M_Class6adjustEv+0xc>
    3faa:	00 d0       	rcall	.+0      	; 0x3fac <_ZN13DS3231M_Class6adjustEv+0xe>
    3fac:	cd b7       	in	r28, 0x3d	; 61
    3fae:	de b7       	in	r29, 0x3e	; 62
    3fb0:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    3fb2:	42 e1       	ldi	r20, 0x12	; 18
    3fb4:	52 e0       	ldi	r21, 0x02	; 2
    3fb6:	66 e0       	ldi	r22, 0x06	; 6
    3fb8:	72 e0       	ldi	r23, 0x02	; 2
    3fba:	ce 01       	movw	r24, r28
    3fbc:	01 96       	adiw	r24, 0x01	; 1
    3fbe:	54 dd       	rcall	.-1368   	; 0x3a68 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    3fc0:	be 01       	movw	r22, r28
    3fc2:	6f 5f       	subi	r22, 0xFF	; 255
    3fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc6:	c8 01       	movw	r24, r16
    3fc8:	5c df       	rcall	.-328    	; 0x3e82 <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    3fca:	26 96       	adiw	r28, 0x06	; 6
    3fcc:	0f b6       	in	r0, 0x3f	; 63
    3fce:	f8 94       	cli
    3fd0:	de bf       	out	0x3e, r29	; 62
    3fd2:	0f be       	out	0x3f, r0	; 63
    3fd4:	cd bf       	out	0x3d, r28	; 61
    3fd6:	df 91       	pop	r29
    3fd8:	cf 91       	pop	r28
    3fda:	1f 91       	pop	r17
    3fdc:	0f 91       	pop	r16
    3fde:	08 95       	ret

00003fe0 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    3fe0:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3fe2:	00 e0       	ldi	r16, 0x00	; 0
    3fe4:	20 e0       	ldi	r18, 0x00	; 0
    3fe6:	40 e0       	ldi	r20, 0x00	; 0
    3fe8:	60 e0       	ldi	r22, 0x00	; 0
    3fea:	8f eb       	ldi	r24, 0xBF	; 191
    3fec:	9c e0       	ldi	r25, 0x0C	; 12
    3fee:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN9IPAddressC1Ehhhh>
    3ff2:	0f 91       	pop	r16
    3ff4:	08 95       	ret

00003ff6 <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3ff6:	fb 01       	movw	r30, r22
    3ff8:	42 81       	ldd	r20, Z+2	; 0x02
    3ffa:	53 81       	ldd	r21, Z+3	; 0x03
    3ffc:	64 81       	ldd	r22, Z+4	; 0x04
    3ffe:	75 81       	ldd	r23, Z+5	; 0x05
    4000:	fc 01       	movw	r30, r24
    4002:	42 83       	std	Z+2, r20	; 0x02
    4004:	53 83       	std	Z+3, r21	; 0x03
    4006:	64 83       	std	Z+4, r22	; 0x04
    4008:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    400a:	17 82       	std	Z+7, r1	; 0x07
    400c:	16 82       	std	Z+6, r1	; 0x06
    400e:	08 95       	ret

00004010 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    4010:	cf 93       	push	r28
    4012:	df 93       	push	r29
    4014:	da 01       	movw	r26, r20
    4016:	fb 01       	movw	r30, r22
    4018:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    401a:	89 91       	ld	r24, Y+
    401c:	81 11       	cpse	r24, r1
    401e:	fd cf       	rjmp	.-6      	; 0x401a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    4020:	80 e0       	ldi	r24, 0x00	; 0
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    4028:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    402a:	51 91       	ld	r21, Z+
    402c:	55 23       	and	r21, r21
    402e:	e9 f0       	breq	.+58     	; 0x406a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    4030:	24 30       	cpi	r18, 0x04	; 4
    4032:	31 05       	cpc	r19, r1
    4034:	44 f5       	brge	.+80     	; 0x4086 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    4036:	5e 32       	cpi	r21, 0x2E	; 46
    4038:	69 f4       	brne	.+26     	; 0x4054 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    403a:	8f 3f       	cpi	r24, 0xFF	; 255
    403c:	91 05       	cpc	r25, r1
    403e:	09 f0       	breq	.+2      	; 0x4042 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    4040:	14 f5       	brge	.+68     	; 0x4086 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    4042:	ed 01       	movw	r28, r26
    4044:	c2 0f       	add	r28, r18
    4046:	d3 1f       	adc	r29, r19
    4048:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    404a:	2f 5f       	subi	r18, 0xFF	; 255
    404c:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	eb cf       	rjmp	.-42     	; 0x402a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    4054:	48 9f       	mul	r20, r24
    4056:	b0 01       	movw	r22, r0
    4058:	49 9f       	mul	r20, r25
    405a:	70 0d       	add	r23, r0
    405c:	11 24       	eor	r1, r1
    405e:	85 2f       	mov	r24, r21
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	c0 97       	sbiw	r24, 0x30	; 48
    4064:	86 0f       	add	r24, r22
    4066:	97 1f       	adc	r25, r23
    4068:	e0 cf       	rjmp	.-64     	; 0x402a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    406a:	8f 3f       	cpi	r24, 0xFF	; 255
    406c:	91 05       	cpc	r25, r1
    406e:	09 f0       	breq	.+2      	; 0x4072 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    4070:	54 f4       	brge	.+20     	; 0x4086 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    4072:	24 30       	cpi	r18, 0x04	; 4
    4074:	31 05       	cpc	r19, r1
    4076:	3c f4       	brge	.+14     	; 0x4086 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    4078:	fd 01       	movw	r30, r26
    407a:	e2 0f       	add	r30, r18
    407c:	f3 1f       	adc	r31, r19
    407e:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    4080:	81 e0       	ldi	r24, 0x01	; 1
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	02 c0       	rjmp	.+4      	; 0x408a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    4086:	80 e0       	ldi	r24, 0x00	; 0
    4088:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    408a:	df 91       	pop	r29
    408c:	cf 91       	pop	r28
    408e:	08 95       	ret

00004090 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    4090:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4092:	00 e0       	ldi	r16, 0x00	; 0
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	40 e0       	ldi	r20, 0x00	; 0
    4098:	60 e0       	ldi	r22, 0x00	; 0
    409a:	85 ec       	ldi	r24, 0xC5	; 197
    409c:	9c e0       	ldi	r25, 0x0C	; 12
    409e:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN9IPAddressC1Ehhhh>
    40a2:	0f 91       	pop	r16
    40a4:	08 95       	ret

000040a6 <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    40a6:	8f 92       	push	r8
    40a8:	9f 92       	push	r9
    40aa:	af 92       	push	r10
    40ac:	bf 92       	push	r11
    40ae:	cf 92       	push	r12
    40b0:	df 92       	push	r13
    40b2:	ef 92       	push	r14
    40b4:	ff 92       	push	r15
    40b6:	0f 93       	push	r16
    40b8:	1f 93       	push	r17
    40ba:	cf 93       	push	r28
    40bc:	df 93       	push	r29
    40be:	00 d0       	rcall	.+0      	; 0x40c0 <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    40c0:	1f 92       	push	r1
    40c2:	cd b7       	in	r28, 0x3d	; 61
    40c4:	de b7       	in	r29, 0x3e	; 62
    40c6:	6c 01       	movw	r12, r24
    40c8:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    40ca:	0e 94 47 3b 	call	0x768e	; 0x768e <millis>
    40ce:	f6 01       	movw	r30, r12
    40d0:	77 83       	std	Z+7, r23	; 0x07
    40d2:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    40d4:	86 01       	movw	r16, r12
    40d6:	08 5f       	subi	r16, 0xF8	; 248
    40d8:	1f 4f       	sbci	r17, 0xFF	; 255
    40da:	b6 01       	movw	r22, r12
    40dc:	6a 5f       	subi	r22, 0xFA	; 250
    40de:	7f 4f       	sbci	r23, 0xFF	; 255
    40e0:	42 e0       	ldi	r20, 0x02	; 2
    40e2:	50 e0       	ldi	r21, 0x00	; 0
    40e4:	c8 01       	movw	r24, r16
    40e6:	55 d6       	rcall	.+3242   	; 0x4d92 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    40e8:	81 e0       	ldi	r24, 0x01	; 1
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	9a 83       	std	Y+2, r25	; 0x02
    40ee:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    40f0:	42 e0       	ldi	r20, 0x02	; 2
    40f2:	50 e0       	ldi	r21, 0x00	; 0
    40f4:	be 01       	movw	r22, r28
    40f6:	6f 5f       	subi	r22, 0xFF	; 255
    40f8:	7f 4f       	sbci	r23, 0xFF	; 255
    40fa:	c8 01       	movw	r24, r16
    40fc:	4a d6       	rcall	.+3220   	; 0x4d92 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    40fe:	80 e0       	ldi	r24, 0x00	; 0
    4100:	91 e0       	ldi	r25, 0x01	; 1
    4102:	9a 83       	std	Y+2, r25	; 0x02
    4104:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4106:	42 e0       	ldi	r20, 0x02	; 2
    4108:	50 e0       	ldi	r21, 0x00	; 0
    410a:	be 01       	movw	r22, r28
    410c:	6f 5f       	subi	r22, 0xFF	; 255
    410e:	7f 4f       	sbci	r23, 0xFF	; 255
    4110:	c8 01       	movw	r24, r16
    4112:	3f d6       	rcall	.+3198   	; 0x4d92 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    4114:	1a 82       	std	Y+2, r1	; 0x02
    4116:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4118:	42 e0       	ldi	r20, 0x02	; 2
    411a:	50 e0       	ldi	r21, 0x00	; 0
    411c:	be 01       	movw	r22, r28
    411e:	6f 5f       	subi	r22, 0xFF	; 255
    4120:	7f 4f       	sbci	r23, 0xFF	; 255
    4122:	c8 01       	movw	r24, r16
    4124:	36 d6       	rcall	.+3180   	; 0x4d92 <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4126:	42 e0       	ldi	r20, 0x02	; 2
    4128:	50 e0       	ldi	r21, 0x00	; 0
    412a:	be 01       	movw	r22, r28
    412c:	6f 5f       	subi	r22, 0xFF	; 255
    412e:	7f 4f       	sbci	r23, 0xFF	; 255
    4130:	c8 01       	movw	r24, r16
    4132:	2f d6       	rcall	.+3166   	; 0x4d92 <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4134:	42 e0       	ldi	r20, 0x02	; 2
    4136:	50 e0       	ldi	r21, 0x00	; 0
    4138:	be 01       	movw	r22, r28
    413a:	6f 5f       	subi	r22, 0xFF	; 255
    413c:	7f 4f       	sbci	r23, 0xFF	; 255
    413e:	c8 01       	movw	r24, r16
    4140:	28 d6       	rcall	.+3152   	; 0x4d92 <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    4142:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    4144:	f5 01       	movw	r30, r10
    4146:	80 81       	ld	r24, Z
    4148:	88 23       	and	r24, r24
    414a:	f9 f0       	breq	.+62     	; 0x418a <__stack+0x8b>
    414c:	a7 01       	movw	r20, r14
    414e:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    4150:	f5 01       	movw	r30, r10
    4152:	81 91       	ld	r24, Z+
    4154:	6f 01       	movw	r12, r30
    4156:	88 23       	and	r24, r24
    4158:	21 f0       	breq	.+8      	; 0x4162 <__stack+0x63>
    415a:	8e 32       	cpi	r24, 0x2E	; 46
    415c:	11 f0       	breq	.+4      	; 0x4162 <__stack+0x63>
    415e:	a6 01       	movw	r20, r12
    4160:	f6 cf       	rjmp	.-20     	; 0x414e <__stack+0x4f>
        {
            end++;
        }

        if (end-start > 0)
    4162:	4a 01       	movw	r8, r20
    4164:	8e 18       	sub	r8, r14
    4166:	9f 08       	sbc	r9, r15
    4168:	18 14       	cp	r1, r8
    416a:	19 04       	cpc	r1, r9
    416c:	64 f4       	brge	.+24     	; 0x4186 <__stack+0x87>
        {
            // Write out the size of this section
            len = end-start;
    416e:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    4170:	41 e0       	ldi	r20, 0x01	; 1
    4172:	50 e0       	ldi	r21, 0x00	; 0
    4174:	be 01       	movw	r22, r28
    4176:	6d 5f       	subi	r22, 0xFD	; 253
    4178:	7f 4f       	sbci	r23, 0xFF	; 255
    417a:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    417c:	0a d6       	rcall	.+3092   	; 0x4d92 <_ZN11EthernetUDP5writeEPKhj>
    417e:	a4 01       	movw	r20, r8
    4180:	b7 01       	movw	r22, r14
    4182:	c8 01       	movw	r24, r16
    4184:	06 d6       	rcall	.+3084   	; 0x4d92 <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    4186:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    4188:	dd cf       	rjmp	.-70     	; 0x4144 <__stack+0x45>
    iUdp.write(&len, sizeof(len));
    418a:	1b 82       	std	Y+3, r1	; 0x03
    418c:	41 e0       	ldi	r20, 0x01	; 1
    418e:	50 e0       	ldi	r21, 0x00	; 0
    4190:	be 01       	movw	r22, r28
    4192:	6d 5f       	subi	r22, 0xFD	; 253
    4194:	7f 4f       	sbci	r23, 0xFF	; 255
    4196:	c8 01       	movw	r24, r16
    4198:	fc d5       	rcall	.+3064   	; 0x4d92 <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    419a:	e1 2c       	mov	r14, r1
    419c:	ff 24       	eor	r15, r15
    419e:	f3 94       	inc	r15
    41a0:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    41a2:	e9 82       	std	Y+1, r14	; 0x01
    41a4:	42 e0       	ldi	r20, 0x02	; 2
    41a6:	50 e0       	ldi	r21, 0x00	; 0
    41a8:	be 01       	movw	r22, r28
    41aa:	6f 5f       	subi	r22, 0xFF	; 255
    41ac:	7f 4f       	sbci	r23, 0xFF	; 255
    41ae:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    41b0:	f0 d5       	rcall	.+3040   	; 0x4d92 <_ZN11EthernetUDP5writeEPKhj>
    41b2:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    41b4:	e9 82       	std	Y+1, r14	; 0x01
    41b6:	42 e0       	ldi	r20, 0x02	; 2
    41b8:	50 e0       	ldi	r21, 0x00	; 0
    41ba:	be 01       	movw	r22, r28
    41bc:	6f 5f       	subi	r22, 0xFF	; 255
    41be:	7f 4f       	sbci	r23, 0xFF	; 255
    41c0:	c8 01       	movw	r24, r16
    41c2:	e7 d5       	rcall	.+3022   	; 0x4d92 <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	0f 90       	pop	r0
    41ca:	0f 90       	pop	r0
    41cc:	0f 90       	pop	r0
    41ce:	df 91       	pop	r29
    41d0:	cf 91       	pop	r28
    41d2:	1f 91       	pop	r17
    41d4:	0f 91       	pop	r16
    41d6:	ff 90       	pop	r15
    41d8:	ef 90       	pop	r14
    41da:	df 90       	pop	r13
    41dc:	cf 90       	pop	r12
    41de:	bf 90       	pop	r11
    41e0:	af 90       	pop	r10
    41e2:	9f 90       	pop	r9
    41e4:	8f 90       	pop	r8
    41e6:	08 95       	ret

000041e8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    41e8:	2f 92       	push	r2
    41ea:	3f 92       	push	r3
    41ec:	4f 92       	push	r4
    41ee:	5f 92       	push	r5
    41f0:	6f 92       	push	r6
    41f2:	7f 92       	push	r7
    41f4:	8f 92       	push	r8
    41f6:	9f 92       	push	r9
    41f8:	af 92       	push	r10
    41fa:	bf 92       	push	r11
    41fc:	cf 92       	push	r12
    41fe:	df 92       	push	r13
    4200:	ef 92       	push	r14
    4202:	ff 92       	push	r15
    4204:	0f 93       	push	r16
    4206:	1f 93       	push	r17
    4208:	cf 93       	push	r28
    420a:	df 93       	push	r29
    420c:	cd b7       	in	r28, 0x3d	; 61
    420e:	de b7       	in	r29, 0x3e	; 62
    4210:	63 97       	sbiw	r28, 0x13	; 19
    4212:	0f b6       	in	r0, 0x3f	; 63
    4214:	f8 94       	cli
    4216:	de bf       	out	0x3e, r29	; 62
    4218:	0f be       	out	0x3f, r0	; 63
    421a:	cd bf       	out	0x3d, r28	; 61
    421c:	7c 01       	movw	r14, r24
    421e:	6b 01       	movw	r12, r22
    4220:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    4222:	0e 94 47 3b 	call	0x768e	; 0x768e <millis>
    4226:	4b 01       	movw	r8, r22
    4228:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    422a:	87 01       	movw	r16, r14
    422c:	08 5f       	subi	r16, 0xF8	; 248
    422e:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    4230:	26 01       	movw	r4, r12
    4232:	61 2c       	mov	r6, r1
    4234:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4236:	c8 01       	movw	r24, r16
    4238:	4e d6       	rcall	.+3228   	; 0x4ed6 <_ZN11EthernetUDP11parsePacketEv>
    423a:	18 16       	cp	r1, r24
    423c:	19 06       	cpc	r1, r25
    423e:	a4 f0       	brlt	.+40     	; 0x4268 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x80>
    {
        if((millis() - startTime) > aTimeout)
    4240:	0e 94 47 3b 	call	0x768e	; 0x768e <millis>
    4244:	dc 01       	movw	r26, r24
    4246:	cb 01       	movw	r24, r22
    4248:	88 19       	sub	r24, r8
    424a:	99 09       	sbc	r25, r9
    424c:	aa 09       	sbc	r26, r10
    424e:	bb 09       	sbc	r27, r11
    4250:	48 16       	cp	r4, r24
    4252:	59 06       	cpc	r5, r25
    4254:	6a 06       	cpc	r6, r26
    4256:	7b 06       	cpc	r7, r27
    4258:	d0 f0       	brcs	.+52     	; 0x428e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
            return TIMED_OUT;
        delay(50);
    425a:	62 e3       	ldi	r22, 0x32	; 50
    425c:	70 e0       	ldi	r23, 0x00	; 0
    425e:	80 e0       	ldi	r24, 0x00	; 0
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4266:	e7 cf       	rjmp	.-50     	; 0x4236 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    4268:	f7 01       	movw	r30, r14
    426a:	42 81       	ldd	r20, Z+2	; 0x02
    426c:	53 81       	ldd	r21, Z+3	; 0x03
    426e:	64 81       	ldd	r22, Z+4	; 0x04
    4270:	75 81       	ldd	r23, Z+5	; 0x05
    4272:	81 8d       	ldd	r24, Z+25	; 0x19
    4274:	92 8d       	ldd	r25, Z+26	; 0x1a
    4276:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4278:	b4 8d       	ldd	r27, Z+28	; 0x1c
    427a:	48 17       	cp	r20, r24
    427c:	59 07       	cpc	r21, r25
    427e:	6a 07       	cpc	r22, r26
    4280:	7b 07       	cpc	r23, r27
    4282:	49 f4       	brne	.+18     	; 0x4296 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    4284:	85 8d       	ldd	r24, Z+29	; 0x1d
    4286:	96 8d       	ldd	r25, Z+30	; 0x1e
    4288:	c5 97       	sbiw	r24, 0x35	; 53
    428a:	29 f4       	brne	.+10     	; 0x4296 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    428c:	09 c0       	rjmp	.+18     	; 0x42a0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    428e:	ee 24       	eor	r14, r14
    4290:	ea 94       	dec	r14
    4292:	fe 2c       	mov	r15, r14
    4294:	f0 c0       	rjmp	.+480    	; 0x4476 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    4296:	9e ef       	ldi	r25, 0xFE	; 254
    4298:	e9 2e       	mov	r14, r25
    429a:	ff 24       	eor	r15, r15
    429c:	fa 94       	dec	r15
    429e:	eb c0       	rjmp	.+470    	; 0x4476 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    42a0:	c8 01       	movw	r24, r16
    42a2:	2d d5       	rcall	.+2650   	; 0x4cfe <_ZN11EthernetUDP9availableEv>
    42a4:	0c 97       	sbiw	r24, 0x0c	; 12
    42a6:	0c f4       	brge	.+2      	; 0x42aa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>
    42a8:	e2 c0       	rjmp	.+452    	; 0x446e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    42aa:	4c e0       	ldi	r20, 0x0C	; 12
    42ac:	50 e0       	ldi	r21, 0x00	; 0
    42ae:	be 01       	movw	r22, r28
    42b0:	6f 5f       	subi	r22, 0xFF	; 255
    42b2:	7f 4f       	sbci	r23, 0xFF	; 255
    42b4:	c8 01       	movw	r24, r16
    42b6:	a8 d5       	rcall	.+2896   	; 0x4e08 <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    42b8:	8b 81       	ldd	r24, Y+3	; 0x03
    42ba:	9c 81       	ldd	r25, Y+4	; 0x04
    42bc:	98 27       	eor	r25, r24
    42be:	89 27       	eor	r24, r25
    42c0:	98 27       	eor	r25, r24
    42c2:	9a 8b       	std	Y+18, r25	; 0x12
    42c4:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    42c6:	f7 01       	movw	r30, r14
    42c8:	46 81       	ldd	r20, Z+6	; 0x06
    42ca:	57 81       	ldd	r21, Z+7	; 0x07
    42cc:	29 81       	ldd	r18, Y+1	; 0x01
    42ce:	3a 81       	ldd	r19, Y+2	; 0x02
    42d0:	42 17       	cp	r20, r18
    42d2:	53 07       	cpc	r21, r19
    42d4:	11 f4       	brne	.+4      	; 0x42da <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf2>
    42d6:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    42d8:	07 c0       	rjmp	.+14     	; 0x42e8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    42da:	c8 01       	movw	r24, r16
    42dc:	2a d5       	rcall	.+2644   	; 0x4d32 <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    42de:	7c ef       	ldi	r23, 0xFC	; 252
    42e0:	e7 2e       	mov	r14, r23
    42e2:	ff 24       	eor	r15, r15
    42e4:	fa 94       	dec	r15
    42e6:	c7 c0       	rjmp	.+398    	; 0x4476 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    42e8:	8f 70       	andi	r24, 0x0F	; 15
    42ea:	92 70       	andi	r25, 0x02	; 2
    42ec:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    42ee:	39 f0       	breq	.+14     	; 0x42fe <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    42f0:	c8 01       	movw	r24, r16
    42f2:	1f d5       	rcall	.+2622   	; 0x4d32 <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    42f4:	6b ef       	ldi	r22, 0xFB	; 251
    42f6:	e6 2e       	mov	r14, r22
    42f8:	ff 24       	eor	r15, r15
    42fa:	fa 94       	dec	r15
    42fc:	bc c0       	rjmp	.+376    	; 0x4476 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    42fe:	cf 80       	ldd	r12, Y+7	; 0x07
    4300:	d8 84       	ldd	r13, Y+8	; 0x08
    4302:	dc 24       	eor	r13, r12
    4304:	cd 24       	eor	r12, r13
    4306:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    4308:	c1 14       	cp	r12, r1
    430a:	d1 04       	cpc	r13, r1
    430c:	19 f0       	breq	.+6      	; 0x4314 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x12c>
    430e:	e1 2c       	mov	r14, r1
    4310:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    4312:	1f c0       	rjmp	.+62     	; 0x4352 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16a>
    4314:	c8 01       	movw	r24, r16
    4316:	0d d5       	rcall	.+2586   	; 0x4d32 <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    4318:	5a ef       	ldi	r21, 0xFA	; 250
    431a:	e5 2e       	mov	r14, r21
    431c:	ff 24       	eor	r15, r15
    431e:	fa 94       	dec	r15
    4320:	aa c0       	rjmp	.+340    	; 0x4476 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    4322:	41 e0       	ldi	r20, 0x01	; 1
    4324:	50 e0       	ldi	r21, 0x00	; 0
    4326:	be 01       	movw	r22, r28
    4328:	63 5f       	subi	r22, 0xF3	; 243
    432a:	7f 4f       	sbci	r23, 0xFF	; 255
    432c:	c8 01       	movw	r24, r16
    432e:	6c d5       	rcall	.+2776   	; 0x4e08 <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    4330:	8d 85       	ldd	r24, Y+13	; 0x0d
    4332:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    4334:	17 c0       	rjmp	.+46     	; 0x4364 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    4336:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4338:	81 11       	cpse	r24, r1
    433a:	f3 cf       	rjmp	.-26     	; 0x4322 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    433c:	c8 01       	movw	r24, r16
    433e:	3c d5       	rcall	.+2680   	; 0x4db8 <_ZN11EthernetUDP4readEv>
    4340:	c8 01       	movw	r24, r16
    4342:	3a d5       	rcall	.+2676   	; 0x4db8 <_ZN11EthernetUDP4readEv>
    4344:	c8 01       	movw	r24, r16
    4346:	38 d5       	rcall	.+2672   	; 0x4db8 <_ZN11EthernetUDP4readEv>
    4348:	c8 01       	movw	r24, r16
    434a:	36 d5       	rcall	.+2668   	; 0x4db8 <_ZN11EthernetUDP4readEv>
    434c:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    434e:	ef 1a       	sub	r14, r31
    4350:	ff 0a       	sbc	r15, r31
    4352:	8d 81       	ldd	r24, Y+5	; 0x05
    4354:	9e 81       	ldd	r25, Y+6	; 0x06
    4356:	98 27       	eor	r25, r24
    4358:	89 27       	eor	r24, r25
    435a:	98 27       	eor	r25, r24
    435c:	e8 16       	cp	r14, r24
    435e:	f9 06       	cpc	r15, r25
    4360:	00 f3       	brcs	.-64     	; 0x4322 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    4362:	09 c0       	rjmp	.+18     	; 0x4376 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18e>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    4364:	8d 85       	ldd	r24, Y+13	; 0x0d
    4366:	9f ef       	ldi	r25, 0xFF	; 255
    4368:	98 0f       	add	r25, r24
    436a:	9d 87       	std	Y+13, r25	; 0x0d
    436c:	88 23       	and	r24, r24
    436e:	19 f3       	breq	.-58     	; 0x4336 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14e>
                {
                    iUdp.read(); // we don't care about the returned byte
    4370:	c8 01       	movw	r24, r16
    4372:	22 d5       	rcall	.+2628   	; 0x4db8 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    4374:	f7 cf       	rjmp	.-18     	; 0x4364 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    4376:	a1 2c       	mov	r10, r1
    4378:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    437a:	41 e0       	ldi	r20, 0x01	; 1
    437c:	50 e0       	ldi	r21, 0x00	; 0
    437e:	be 01       	movw	r22, r28
    4380:	6d 5e       	subi	r22, 0xED	; 237
    4382:	7f 4f       	sbci	r23, 0xFF	; 255
    4384:	c8 01       	movw	r24, r16
    4386:	40 d5       	rcall	.+2688   	; 0x4e08 <_ZN11EthernetUDP4readEPhj>
    4388:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    438a:	98 2f       	mov	r25, r24
    438c:	90 7c       	andi	r25, 0xC0	; 192
    438e:	59 f4       	brne	.+22     	; 0x43a6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1be>
            {
                // It's just a normal label
                if (len > 0)
    4390:	88 23       	and	r24, r24
    4392:	79 f0       	breq	.+30     	; 0x43b2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    4394:	8b 89       	ldd	r24, Y+19	; 0x13
    4396:	9f ef       	ldi	r25, 0xFF	; 255
    4398:	98 0f       	add	r25, r24
    439a:	9b 8b       	std	Y+19, r25	; 0x13
    439c:	88 23       	and	r24, r24
    439e:	31 f0       	breq	.+12     	; 0x43ac <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c4>
                    {
                        iUdp.read(); // we don't care about the returned byte
    43a0:	c8 01       	movw	r24, r16
    43a2:	0a d5       	rcall	.+2580   	; 0x4db8 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    43a4:	f7 cf       	rjmp	.-18     	; 0x4394 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ac>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    43a6:	c8 01       	movw	r24, r16
    43a8:	07 d5       	rcall	.+2574   	; 0x4db8 <_ZN11EthernetUDP4readEv>
    43aa:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    43ac:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    43ae:	81 11       	cpse	r24, r1
    43b0:	e4 cf       	rjmp	.-56     	; 0x437a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    43b2:	42 e0       	ldi	r20, 0x02	; 2
    43b4:	50 e0       	ldi	r21, 0x00	; 0
    43b6:	be 01       	movw	r22, r28
    43b8:	61 5f       	subi	r22, 0xF1	; 241
    43ba:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    43bc:	c8 01       	movw	r24, r16
    43be:	24 d5       	rcall	.+2632   	; 0x4e08 <_ZN11EthernetUDP4readEPhj>
    43c0:	42 e0       	ldi	r20, 0x02	; 2
    43c2:	50 e0       	ldi	r21, 0x00	; 0
    43c4:	be 01       	movw	r22, r28
    43c6:	63 5f       	subi	r22, 0xF3	; 243
    43c8:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    43ca:	c8 01       	movw	r24, r16
    43cc:	1d d5       	rcall	.+2618   	; 0x4e08 <_ZN11EthernetUDP4readEPhj>
    43ce:	c8 01       	movw	r24, r16
    43d0:	f3 d4       	rcall	.+2534   	; 0x4db8 <_ZN11EthernetUDP4readEv>
    43d2:	c8 01       	movw	r24, r16
    43d4:	f1 d4       	rcall	.+2530   	; 0x4db8 <_ZN11EthernetUDP4readEv>
    43d6:	c8 01       	movw	r24, r16
    43d8:	ef d4       	rcall	.+2526   	; 0x4db8 <_ZN11EthernetUDP4readEv>
    43da:	c8 01       	movw	r24, r16
    43dc:	ed d4       	rcall	.+2522   	; 0x4db8 <_ZN11EthernetUDP4readEv>
    43de:	42 e0       	ldi	r20, 0x02	; 2
    43e0:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    43e2:	be 01       	movw	r22, r28
    43e4:	6f 5e       	subi	r22, 0xEF	; 239
    43e6:	7f 4f       	sbci	r23, 0xFF	; 255
    43e8:	c8 01       	movw	r24, r16
    43ea:	0e d5       	rcall	.+2588   	; 0x4e08 <_ZN11EthernetUDP4readEPhj>
    43ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    43ee:	98 89       	ldd	r25, Y+16	; 0x10
    43f0:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    43f2:	91 40       	sbci	r25, 0x01	; 1
    43f4:	49 f4       	brne	.+18     	; 0x4408 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
    43f6:	ed 84       	ldd	r14, Y+13	; 0x0d
    43f8:	fe 84       	ldd	r15, Y+14	; 0x0e
    43fa:	fe 24       	eor	r15, r14
    43fc:	ef 24       	eor	r14, r15
    43fe:	fe 24       	eor	r15, r14
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	e8 16       	cp	r14, r24
    4404:	f1 04       	cpc	r15, r1
    4406:	19 f0       	breq	.+6      	; 0x440e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x226>
    4408:	e1 2c       	mov	r14, r1
    440a:	f1 2c       	mov	r15, r1
    440c:	14 c0       	rjmp	.+40     	; 0x4436 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    440e:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    4410:	9a 89       	ldd	r25, Y+18	; 0x12
    4412:	81 15       	cp	r24, r1
    4414:	94 40       	sbci	r25, 0x04	; 4
    4416:	39 f0       	breq	.+14     	; 0x4426 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x23e>
    4418:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    441a:	8b d4       	rcall	.+2326   	; 0x4d32 <_ZN11EthernetUDP5flushEv>
    441c:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    441e:	e4 2e       	mov	r14, r20
    4420:	ff 24       	eor	r15, r15
    4422:	fa 94       	dec	r15
    4424:	28 c0       	rjmp	.+80     	; 0x4476 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    4426:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    4428:	6e 5f       	subi	r22, 0xFE	; 254
    442a:	7f 4f       	sbci	r23, 0xFF	; 255
    442c:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    442e:	50 e0       	ldi	r21, 0x00	; 0
    4430:	c8 01       	movw	r24, r16
    4432:	ea d4       	rcall	.+2516   	; 0x4e08 <_ZN11EthernetUDP4readEPhj>
    4434:	20 c0       	rjmp	.+64     	; 0x4476 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
            return SUCCESS;
    4436:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    4438:	9a 89       	ldd	r25, Y+18	; 0x12
    443a:	98 27       	eor	r25, r24
    443c:	89 27       	eor	r24, r25
    443e:	98 27       	eor	r25, r24
    4440:	e8 16       	cp	r14, r24
    4442:	f9 06       	cpc	r15, r25
    4444:	30 f4       	brcc	.+12     	; 0x4452 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26a>
    4446:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    4448:	b7 d4       	rcall	.+2414   	; 0x4db8 <_ZN11EthernetUDP4readEv>
    444a:	ff ef       	ldi	r31, 0xFF	; 255
    444c:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    444e:	ff 0a       	sbc	r15, r31
    4450:	f2 cf       	rjmp	.-28     	; 0x4436 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4452:	2f ef       	ldi	r18, 0xFF	; 255
    4454:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    4456:	b2 0a       	sbc	r11, r18
    4458:	ca 14       	cp	r12, r10
    445a:	db 04       	cpc	r13, r11
    445c:	09 f0       	breq	.+2      	; 0x4460 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x278>
    445e:	8d cf       	rjmp	.-230    	; 0x437a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    4460:	c8 01       	movw	r24, r16
    4462:	67 d4       	rcall	.+2254   	; 0x4d32 <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    4464:	36 ef       	ldi	r19, 0xF6	; 246
    4466:	e3 2e       	mov	r14, r19
    4468:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    446a:	fa 94       	dec	r15
    446c:	04 c0       	rjmp	.+8      	; 0x4476 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    446e:	8d ef       	ldi	r24, 0xFD	; 253
    4470:	e8 2e       	mov	r14, r24
    4472:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    4474:	fa 94       	dec	r15
    4476:	c7 01       	movw	r24, r14
    4478:	63 96       	adiw	r28, 0x13	; 19
    447a:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    447c:	f8 94       	cli
    447e:	de bf       	out	0x3e, r29	; 62
    4480:	0f be       	out	0x3f, r0	; 63
    4482:	cd bf       	out	0x3d, r28	; 61
    4484:	df 91       	pop	r29
    4486:	cf 91       	pop	r28
    4488:	1f 91       	pop	r17
    448a:	0f 91       	pop	r16
    448c:	ff 90       	pop	r15
    448e:	ef 90       	pop	r14
    4490:	df 90       	pop	r13
    4492:	cf 90       	pop	r12
    4494:	bf 90       	pop	r11
    4496:	af 90       	pop	r10
    4498:	9f 90       	pop	r9
    449a:	8f 90       	pop	r8
    449c:	7f 90       	pop	r7
    449e:	6f 90       	pop	r6
    44a0:	5f 90       	pop	r5
    44a2:	4f 90       	pop	r4
    44a4:	3f 90       	pop	r3
    44a6:	2f 90       	pop	r2
    44a8:	08 95       	ret

000044aa <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    44aa:	8f 92       	push	r8
    44ac:	9f 92       	push	r9
    44ae:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    44b0:	bf 92       	push	r11
    44b2:	cf 92       	push	r12
    44b4:	df 92       	push	r13
    44b6:	ef 92       	push	r14
    44b8:	ff 92       	push	r15
    44ba:	0f 93       	push	r16
    44bc:	1f 93       	push	r17
    44be:	cf 93       	push	r28
    44c0:	df 93       	push	r29
    44c2:	00 d0       	rcall	.+0      	; 0x44c4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    44c4:	00 d0       	rcall	.+0      	; 0x44c6 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    44c6:	00 d0       	rcall	.+0      	; 0x44c8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    44c8:	cd b7       	in	r28, 0x3d	; 61
    44ca:	de b7       	in	r29, 0x3e	; 62
    44cc:	7c 01       	movw	r14, r24
    44ce:	4b 01       	movw	r8, r22
    44d0:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    44d2:	9e dd       	rcall	.-1220   	; 0x4010 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    44d4:	8c 01       	movw	r16, r24
    44d6:	89 2b       	or	r24, r25
    44d8:	09 f0       	breq	.+2      	; 0x44dc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    44da:	57 c0       	rjmp	.+174    	; 0x458a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    44dc:	f7 01       	movw	r30, r14
    44de:	42 81       	ldd	r20, Z+2	; 0x02
    44e0:	53 81       	ldd	r21, Z+3	; 0x03
    44e2:	64 81       	ldd	r22, Z+4	; 0x04
    44e4:	75 81       	ldd	r23, Z+5	; 0x05
    44e6:	80 91 c7 0c 	lds	r24, 0x0CC7	; 0x800cc7 <_ZL11INADDR_NONE+0x2>
    44ea:	90 91 c8 0c 	lds	r25, 0x0CC8	; 0x800cc8 <_ZL11INADDR_NONE+0x3>
    44ee:	a0 91 c9 0c 	lds	r26, 0x0CC9	; 0x800cc9 <_ZL11INADDR_NONE+0x4>
    44f2:	b0 91 ca 0c 	lds	r27, 0x0CCA	; 0x800cca <_ZL11INADDR_NONE+0x5>
    44f6:	48 17       	cp	r20, r24
    44f8:	59 07       	cpc	r21, r25
    44fa:	6a 07       	cpc	r22, r26
    44fc:	7b 07       	cpc	r23, r27
    44fe:	09 f4       	brne	.+2      	; 0x4502 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    4500:	47 c0       	rjmp	.+142    	; 0x4590 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    4502:	0e 94 47 3b 	call	0x768e	; 0x768e <millis>
    4506:	67 01       	movw	r12, r14
    4508:	f8 e0       	ldi	r31, 0x08	; 8
    450a:	cf 0e       	add	r12, r31
    450c:	d1 1c       	adc	r13, r1
    450e:	6f 70       	andi	r22, 0x0F	; 15
    4510:	77 27       	eor	r23, r23
    4512:	7c 5f       	subi	r23, 0xFC	; 252
    4514:	c6 01       	movw	r24, r12
    4516:	ae d4       	rcall	.+2396   	; 0x4e74 <_ZN11EthernetUDP5beginEj>
    4518:	81 30       	cpi	r24, 0x01	; 1
    451a:	09 f0       	breq	.+2      	; 0x451e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x74>
    451c:	3b c0       	rjmp	.+118    	; 0x4594 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    451e:	8f ed       	ldi	r24, 0xDF	; 223
    4520:	99 e0       	ldi	r25, 0x09	; 9
    4522:	9a 83       	std	Y+2, r25	; 0x02
    4524:	89 83       	std	Y+1, r24	; 0x01
    4526:	f7 01       	movw	r30, r14
    4528:	82 81       	ldd	r24, Z+2	; 0x02
    452a:	93 81       	ldd	r25, Z+3	; 0x03
    452c:	a4 81       	ldd	r26, Z+4	; 0x04
    452e:	b5 81       	ldd	r27, Z+5	; 0x05
    4530:	8b 83       	std	Y+3, r24	; 0x03
    4532:	9c 83       	std	Y+4, r25	; 0x04
    4534:	ad 83       	std	Y+5, r26	; 0x05
    4536:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    4538:	45 e3       	ldi	r20, 0x35	; 53
    453a:	50 e0       	ldi	r21, 0x00	; 0
    453c:	be 01       	movw	r22, r28
    453e:	6f 5f       	subi	r22, 0xFF	; 255
    4540:	7f 4f       	sbci	r23, 0xFF	; 255
    4542:	c6 01       	movw	r24, r12
    4544:	1c d4       	rcall	.+2104   	; 0x4d7e <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    4546:	89 2b       	or	r24, r25
    4548:	19 f4       	brne	.+6      	; 0x4550 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa6>
    454a:	00 e0       	ldi	r16, 0x00	; 0
    454c:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    454e:	1a c0       	rjmp	.+52     	; 0x4584 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    4550:	b4 01       	movw	r22, r8
    4552:	c7 01       	movw	r24, r14
                if (ret != 0)
    4554:	a8 dd       	rcall	.-1200   	; 0x40a6 <_ZN9DNSClient12BuildRequestEPKc>
    4556:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    4558:	c1 f3       	breq	.-16     	; 0x454a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    455a:	c6 01       	movw	r24, r12
    455c:	17 d4       	rcall	.+2094   	; 0x4d8c <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    455e:	89 2b       	or	r24, r25
    4560:	a1 f3       	breq	.-24     	; 0x454a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    4562:	83 e0       	ldi	r24, 0x03	; 3
    4564:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    4566:	91 2c       	mov	r9, r1
    4568:	a5 01       	movw	r20, r10
    456a:	68 e8       	ldi	r22, 0x88	; 136
    456c:	73 e1       	ldi	r23, 0x13	; 19
    456e:	c7 01       	movw	r24, r14
    4570:	3b de       	rcall	.-906    	; 0x41e8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    4572:	8c 01       	movw	r16, r24
    4574:	21 e0       	ldi	r18, 0x01	; 1
    4576:	82 1a       	sub	r8, r18
    4578:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    457a:	21 f0       	breq	.+8      	; 0x4584 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    457c:	0f 3f       	cpi	r16, 0xFF	; 255
    457e:	ff ef       	ldi	r31, 0xFF	; 255
    4580:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    4582:	91 f3       	breq	.-28     	; 0x4568 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbe>
    4584:	c6 01       	movw	r24, r12
    4586:	e7 d3       	rcall	.+1998   	; 0x4d56 <_ZN11EthernetUDP4stopEv>
    4588:	05 c0       	rjmp	.+10     	; 0x4594 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    458a:	01 e0       	ldi	r16, 0x01	; 1
    458c:	10 e0       	ldi	r17, 0x00	; 0
    458e:	02 c0       	rjmp	.+4      	; 0x4594 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    4590:	0e ef       	ldi	r16, 0xFE	; 254
    4592:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    4594:	c8 01       	movw	r24, r16
    4596:	26 96       	adiw	r28, 0x06	; 6
    4598:	0f b6       	in	r0, 0x3f	; 63
    459a:	f8 94       	cli
    459c:	de bf       	out	0x3e, r29	; 62
    459e:	0f be       	out	0x3f, r0	; 63
    45a0:	cd bf       	out	0x3d, r28	; 61
    45a2:	df 91       	pop	r29
    45a4:	cf 91       	pop	r28
    45a6:	1f 91       	pop	r17
    45a8:	0f 91       	pop	r16
    45aa:	ff 90       	pop	r15
    45ac:	ef 90       	pop	r14
    45ae:	df 90       	pop	r13
    45b0:	cf 90       	pop	r12
    45b2:	bf 90       	pop	r11
    45b4:	af 90       	pop	r10
    45b6:	9f 90       	pop	r9
    45b8:	8f 90       	pop	r8
    45ba:	08 95       	ret

000045bc <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    45bc:	24 e0       	ldi	r18, 0x04	; 4
    45be:	30 e0       	ldi	r19, 0x00	; 0
    45c0:	ac 01       	movw	r20, r24
    45c2:	64 e0       	ldi	r22, 0x04	; 4
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	4d c7       	rjmp	.+3738   	; 0x5464 <_ZN10W5500Class5writeEjhPKhj>

000045ca <_ZN10W5500Class9writeSUBREPh>:
    45ca:	24 e0       	ldi	r18, 0x04	; 4
    45cc:	30 e0       	ldi	r19, 0x00	; 0
    45ce:	ac 01       	movw	r20, r24
    45d0:	64 e0       	ldi	r22, 0x04	; 4
    45d2:	85 e0       	ldi	r24, 0x05	; 5
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	46 c7       	rjmp	.+3724   	; 0x5464 <_ZN10W5500Class5writeEjhPKhj>

000045d8 <_ZN10W5500Class9writeSHAREPh>:
    45d8:	26 e0       	ldi	r18, 0x06	; 6
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	ac 01       	movw	r20, r24
    45de:	64 e0       	ldi	r22, 0x04	; 4
    45e0:	89 e0       	ldi	r24, 0x09	; 9
    45e2:	90 e0       	ldi	r25, 0x00	; 0
    45e4:	3f c7       	rjmp	.+3710   	; 0x5464 <_ZN10W5500Class5writeEjhPKhj>

000045e6 <_ZN10W5500Class9writeSIPREPh>:
    45e6:	24 e0       	ldi	r18, 0x04	; 4
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	ac 01       	movw	r20, r24
    45ec:	64 e0       	ldi	r22, 0x04	; 4
    45ee:	8f e0       	ldi	r24, 0x0F	; 15
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	38 c7       	rjmp	.+3696   	; 0x5464 <_ZN10W5500Class5writeEjhPKhj>

000045f4 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    45f4:	8f 92       	push	r8
    45f6:	9f 92       	push	r9
    45f8:	af 92       	push	r10
    45fa:	bf 92       	push	r11
    45fc:	cf 92       	push	r12
    45fe:	df 92       	push	r13
    4600:	ef 92       	push	r14
    4602:	ff 92       	push	r15
    4604:	0f 93       	push	r16
    4606:	1f 93       	push	r17
    4608:	cf 93       	push	r28
    460a:	df 93       	push	r29
    460c:	4c 01       	movw	r8, r24
    460e:	5b 01       	movw	r10, r22
    4610:	6a 01       	movw	r12, r20
    4612:	e9 01       	movw	r28, r18
    4614:	fc 01       	movw	r30, r24
    4616:	64 85       	ldd	r22, Z+12	; 0x0c
    4618:	8b e0       	ldi	r24, 0x0B	; 11
    461a:	9d e0       	ldi	r25, 0x0D	; 13
    461c:	6f d7       	rcall	.+3806   	; 0x54fc <_ZN10W5500Class4initEh>
    461e:	c5 01       	movw	r24, r10
    4620:	db df       	rcall	.-74     	; 0x45d8 <_ZN10W5500Class9writeSHAREPh>
    4622:	c6 01       	movw	r24, r12
    4624:	02 96       	adiw	r24, 0x02	; 2
    4626:	df df       	rcall	.-66     	; 0x45e6 <_ZN10W5500Class9writeSIPREPh>
    4628:	c8 01       	movw	r24, r16
    462a:	02 96       	adiw	r24, 0x02	; 2
    462c:	c7 df       	rcall	.-114    	; 0x45bc <_ZN10W5500Class8writeGAREPh>
    462e:	c7 01       	movw	r24, r14
    4630:	02 96       	adiw	r24, 0x02	; 2
    4632:	cb df       	rcall	.-106    	; 0x45ca <_ZN10W5500Class9writeSUBREPh>
    4634:	8a 81       	ldd	r24, Y+2	; 0x02
    4636:	9b 81       	ldd	r25, Y+3	; 0x03
    4638:	ac 81       	ldd	r26, Y+4	; 0x04
    463a:	bd 81       	ldd	r27, Y+5	; 0x05
    463c:	f4 01       	movw	r30, r8
    463e:	82 83       	std	Z+2, r24	; 0x02
    4640:	93 83       	std	Z+3, r25	; 0x03
    4642:	a4 83       	std	Z+4, r26	; 0x04
    4644:	b5 83       	std	Z+5, r27	; 0x05
    4646:	df 91       	pop	r29
    4648:	cf 91       	pop	r28
    464a:	1f 91       	pop	r17
    464c:	0f 91       	pop	r16
    464e:	ff 90       	pop	r15
    4650:	ef 90       	pop	r14
    4652:	df 90       	pop	r13
    4654:	cf 90       	pop	r12
    4656:	bf 90       	pop	r11
    4658:	af 90       	pop	r10
    465a:	9f 90       	pop	r9
    465c:	8f 90       	pop	r8
    465e:	08 95       	ret

00004660 <_ZN13EthernetClass11dnsServerIPEv>:
    4660:	2f ed       	ldi	r18, 0xDF	; 223
    4662:	39 e0       	ldi	r19, 0x09	; 9
    4664:	fc 01       	movw	r30, r24
    4666:	31 83       	std	Z+1, r19	; 0x01
    4668:	20 83       	st	Z, r18
    466a:	fb 01       	movw	r30, r22
    466c:	42 81       	ldd	r20, Z+2	; 0x02
    466e:	53 81       	ldd	r21, Z+3	; 0x03
    4670:	64 81       	ldd	r22, Z+4	; 0x04
    4672:	75 81       	ldd	r23, Z+5	; 0x05
    4674:	fc 01       	movw	r30, r24
    4676:	42 83       	std	Z+2, r20	; 0x02
    4678:	53 83       	std	Z+3, r21	; 0x03
    467a:	64 83       	std	Z+4, r22	; 0x04
    467c:	75 83       	std	Z+5, r23	; 0x05
    467e:	08 95       	ret

00004680 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    4680:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4682:	00 e0       	ldi	r16, 0x00	; 0
    4684:	20 e0       	ldi	r18, 0x00	; 0
    4686:	40 e0       	ldi	r20, 0x00	; 0
    4688:	60 e0       	ldi	r22, 0x00	; 0
    468a:	88 ee       	ldi	r24, 0xE8	; 232
    468c:	9c e0       	ldi	r25, 0x0C	; 12
    468e:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    4692:	8b ec       	ldi	r24, 0xCB	; 203
    4694:	9c e0       	ldi	r25, 0x0C	; 12
    4696:	0e 94 a0 39 	call	0x7340	; 0x7340 <_ZN9IPAddressC1Ev>
    469a:	eb ec       	ldi	r30, 0xCB	; 203
    469c:	fc e0       	ldi	r31, 0x0C	; 12
    469e:	13 86       	std	Z+11, r1	; 0x0b
    46a0:	12 86       	std	Z+10, r1	; 0x0a
    46a2:	8a e0       	ldi	r24, 0x0A	; 10
    46a4:	84 87       	std	Z+12, r24	; 0x0c
    46a6:	0f 91       	pop	r16
    46a8:	08 95       	ret

000046aa <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    46aa:	80 e0       	ldi	r24, 0x00	; 0
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	08 95       	ret

000046b0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    46b0:	08 95       	ret

000046b2 <_ZN14EthernetClientneERKS_>:
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    46b2:	dc 01       	movw	r26, r24
    46b4:	ed 91       	ld	r30, X+
    46b6:	fc 91       	ld	r31, X
    46b8:	02 8c       	ldd	r0, Z+26	; 0x1a
    46ba:	f3 8d       	ldd	r31, Z+27	; 0x1b
    46bc:	e0 2d       	mov	r30, r0
    46be:	09 95       	icall
    46c0:	91 e0       	ldi	r25, 0x01	; 1
    46c2:	89 27       	eor	r24, r25
    46c4:	08 95       	ret

000046c6 <_ZN14EthernetClient5writeEh>:
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    46c6:	cf 93       	push	r28
    46c8:	df 93       	push	r29
    46ca:	1f 92       	push	r1
    46cc:	cd b7       	in	r28, 0x3d	; 61
    46ce:	de b7       	in	r29, 0x3e	; 62
    46d0:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    46d2:	dc 01       	movw	r26, r24
    46d4:	ed 91       	ld	r30, X+
    46d6:	fc 91       	ld	r31, X
    46d8:	02 80       	ldd	r0, Z+2	; 0x02
    46da:	f3 81       	ldd	r31, Z+3	; 0x03
    46dc:	e0 2d       	mov	r30, r0
    46de:	41 e0       	ldi	r20, 0x01	; 1
    46e0:	50 e0       	ldi	r21, 0x00	; 0
    46e2:	be 01       	movw	r22, r28
    46e4:	6f 5f       	subi	r22, 0xFF	; 255
    46e6:	7f 4f       	sbci	r23, 0xFF	; 255
    46e8:	09 95       	icall
}
    46ea:	0f 90       	pop	r0
    46ec:	df 91       	pop	r29
    46ee:	cf 91       	pop	r28
    46f0:	08 95       	ret

000046f2 <_ZN14EthernetClientcvbEv>:

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
    46f2:	21 e0       	ldi	r18, 0x01	; 1
    46f4:	fc 01       	movw	r30, r24
    46f6:	84 85       	ldd	r24, Z+12	; 0x0c
    46f8:	88 30       	cpi	r24, 0x08	; 8
    46fa:	09 f4       	brne	.+2      	; 0x46fe <_ZN14EthernetClientcvbEv+0xc>
    46fc:	20 e0       	ldi	r18, 0x00	; 0
}
    46fe:	82 2f       	mov	r24, r18
    4700:	08 95       	ret

00004702 <_ZN14EthernetClienteqERKS_>:

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
    4702:	fc 01       	movw	r30, r24
    4704:	94 85       	ldd	r25, Z+12	; 0x0c
    4706:	fb 01       	movw	r30, r22
    4708:	84 85       	ldd	r24, Z+12	; 0x0c
    470a:	98 13       	cpse	r25, r24
    470c:	03 c0       	rjmp	.+6      	; 0x4714 <_ZN14EthernetClienteqERKS_+0x12>
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	98 30       	cpi	r25, 0x08	; 8
    4712:	09 f4       	brne	.+2      	; 0x4716 <_ZN14EthernetClienteqERKS_+0x14>
    4714:	80 e0       	ldi	r24, 0x00	; 0
}
    4716:	08 95       	ret

00004718 <_ZN14EthernetClient7connectEPKcj>:
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    4718:	cf 92       	push	r12
    471a:	df 92       	push	r13
    471c:	ef 92       	push	r14
    471e:	ff 92       	push	r15
    4720:	0f 93       	push	r16
    4722:	1f 93       	push	r17
    4724:	cf 93       	push	r28
    4726:	df 93       	push	r29
    4728:	cd b7       	in	r28, 0x3d	; 61
    472a:	de b7       	in	r29, 0x3e	; 62
    472c:	af 97       	sbiw	r28, 0x2f	; 47
    472e:	0f b6       	in	r0, 0x3f	; 63
    4730:	f8 94       	cli
    4732:	de bf       	out	0x3e, r29	; 62
    4734:	0f be       	out	0x3f, r0	; 63
    4736:	cd bf       	out	0x3d, r28	; 61
    4738:	8c 01       	movw	r16, r24
    473a:	6b 01       	movw	r12, r22
    473c:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    473e:	ce 01       	movw	r24, r28
    4740:	01 96       	adiw	r24, 0x01	; 1
    4742:	0e 94 a0 39 	call	0x7340	; 0x7340 <_ZN9IPAddressC1Ev>
    4746:	ce 01       	movw	r24, r28
    4748:	09 96       	adiw	r24, 0x09	; 9
    474a:	14 d4       	rcall	.+2088   	; 0x4f74 <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    474c:	ce 01       	movw	r24, r28
    474e:	8a 96       	adiw	r24, 0x2a	; 42
    4750:	0e 94 a0 39 	call	0x7340	; 0x7340 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    4754:	6b ec       	ldi	r22, 0xCB	; 203
    4756:	7c e0       	ldi	r23, 0x0C	; 12
    4758:	ce 01       	movw	r24, r28
    475a:	84 96       	adiw	r24, 0x24	; 36
    475c:	81 df       	rcall	.-254    	; 0x4660 <_ZN13EthernetClass11dnsServerIPEv>
    475e:	be 01       	movw	r22, r28
    4760:	6c 5d       	subi	r22, 0xDC	; 220
    4762:	7f 4f       	sbci	r23, 0xFF	; 255
    4764:	ce 01       	movw	r24, r28
    4766:	01 96       	adiw	r24, 0x01	; 1
    4768:	46 dc       	rcall	.-1908   	; 0x3ff6 <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    476a:	ae 01       	movw	r20, r28
    476c:	46 5d       	subi	r20, 0xD6	; 214
    476e:	5f 4f       	sbci	r21, 0xFF	; 255
    4770:	b6 01       	movw	r22, r12
    4772:	ce 01       	movw	r24, r28
    4774:	01 96       	adiw	r24, 0x01	; 1
    4776:	99 de       	rcall	.-718    	; 0x44aa <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    4778:	81 30       	cpi	r24, 0x01	; 1
    477a:	91 05       	cpc	r25, r1
    477c:	c1 f4       	brne	.+48     	; 0x47ae <_ZN14EthernetClient7connectEPKcj+0x96>
    return connect(remote_addr, port);
    477e:	d8 01       	movw	r26, r16
    4780:	ed 91       	ld	r30, X+
    4782:	fc 91       	ld	r31, X
    4784:	06 84       	ldd	r0, Z+14	; 0x0e
    4786:	f7 85       	ldd	r31, Z+15	; 0x0f
    4788:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    478a:	8f ed       	ldi	r24, 0xDF	; 223
    478c:	99 e0       	ldi	r25, 0x09	; 9
    478e:	9d a3       	std	Y+37, r25	; 0x25
    4790:	8c a3       	std	Y+36, r24	; 0x24
    4792:	8c a5       	ldd	r24, Y+44	; 0x2c
    4794:	9d a5       	ldd	r25, Y+45	; 0x2d
    4796:	ae a5       	ldd	r26, Y+46	; 0x2e
    4798:	bf a5       	ldd	r27, Y+47	; 0x2f
    479a:	8e a3       	std	Y+38, r24	; 0x26
    479c:	9f a3       	std	Y+39, r25	; 0x27
    479e:	a8 a7       	std	Y+40, r26	; 0x28
    47a0:	b9 a7       	std	Y+41, r27	; 0x29
    47a2:	a7 01       	movw	r20, r14
    47a4:	be 01       	movw	r22, r28
    47a6:	6c 5d       	subi	r22, 0xDC	; 220
    47a8:	7f 4f       	sbci	r23, 0xFF	; 255
    47aa:	c8 01       	movw	r24, r16
    47ac:	09 95       	icall
  } else {
    return ret;
  }
}
    47ae:	af 96       	adiw	r28, 0x2f	; 47
    47b0:	0f b6       	in	r0, 0x3f	; 63
    47b2:	f8 94       	cli
    47b4:	de bf       	out	0x3e, r29	; 62
    47b6:	0f be       	out	0x3f, r0	; 63
    47b8:	cd bf       	out	0x3d, r28	; 61
    47ba:	df 91       	pop	r29
    47bc:	cf 91       	pop	r28
    47be:	1f 91       	pop	r17
    47c0:	0f 91       	pop	r16
    47c2:	ff 90       	pop	r15
    47c4:	ef 90       	pop	r14
    47c6:	df 90       	pop	r13
    47c8:	cf 90       	pop	r12
    47ca:	08 95       	ret

000047cc <_ZN14EthernetClient5writeEPKhj>:

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    47cc:	0f 93       	push	r16
    47ce:	1f 93       	push	r17
    47d0:	cf 93       	push	r28
    47d2:	df 93       	push	r29
    47d4:	8c 01       	movw	r16, r24
    47d6:	d4 2f       	mov	r29, r20
    47d8:	c5 2f       	mov	r28, r21
  if (_sock == MAX_SOCK_NUM) {
    47da:	fc 01       	movw	r30, r24
    47dc:	84 85       	ldd	r24, Z+12	; 0x0c
    47de:	88 30       	cpi	r24, 0x08	; 8
    47e0:	41 f4       	brne	.+16     	; 0x47f2 <_ZN14EthernetClient5writeEPKhj+0x26>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	f8 01       	movw	r30, r16
    47e8:	93 83       	std	Z+3, r25	; 0x03
    47ea:	82 83       	std	Z+2, r24	; 0x02
    setWriteError();
    return 0;
    47ec:	80 e0       	ldi	r24, 0x00	; 0
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	05 c0       	rjmp	.+10     	; 0x47fc <_ZN14EthernetClient5writeEPKhj+0x30>
  }
  if (!send(_sock, buf, size)) {
    47f2:	0c d5       	rcall	.+2584   	; 0x520c <_Z4sendhPKhj>
    47f4:	89 2b       	or	r24, r25
    47f6:	a9 f3       	breq	.-22     	; 0x47e2 <_ZN14EthernetClient5writeEPKhj+0x16>
    setWriteError();
    return 0;
  }
  return size;
    47f8:	8d 2f       	mov	r24, r29
    47fa:	9c 2f       	mov	r25, r28
}
    47fc:	df 91       	pop	r29
    47fe:	cf 91       	pop	r28
    4800:	1f 91       	pop	r17
    4802:	0f 91       	pop	r16
    4804:	08 95       	ret

00004806 <_ZN14EthernetClient9availableEv>:

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    4806:	fc 01       	movw	r30, r24
    4808:	64 85       	ldd	r22, Z+12	; 0x0c
    480a:	68 30       	cpi	r22, 0x08	; 8
    480c:	19 f0       	breq	.+6      	; 0x4814 <_ZN14EthernetClient9availableEv+0xe>
    return w5500.getRXReceivedSize(_sock);
    480e:	8b e0       	ldi	r24, 0x0B	; 11
    4810:	9d e0       	ldi	r25, 0x0D	; 13
    4812:	e9 c6       	rjmp	.+3538   	; 0x55e6 <_ZN10W5500Class17getRXReceivedSizeEh>
  return 0;
}
    4814:	80 e0       	ldi	r24, 0x00	; 0
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	08 95       	ret

0000481a <_ZN14EthernetClient4readEv>:

int EthernetClient::read() {
    481a:	cf 93       	push	r28
    481c:	df 93       	push	r29
    481e:	1f 92       	push	r1
    4820:	cd b7       	in	r28, 0x3d	; 61
    4822:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    4824:	41 e0       	ldi	r20, 0x01	; 1
    4826:	50 e0       	ldi	r21, 0x00	; 0
    4828:	be 01       	movw	r22, r28
    482a:	6f 5f       	subi	r22, 0xFF	; 255
    482c:	7f 4f       	sbci	r23, 0xFF	; 255
    482e:	fc 01       	movw	r30, r24
    4830:	84 85       	ldd	r24, Z+12	; 0x0c
    4832:	34 d5       	rcall	.+2664   	; 0x529c <_Z4recvhPhi>
    4834:	18 16       	cp	r1, r24
    4836:	19 06       	cpc	r1, r25
    4838:	1c f4       	brge	.+6      	; 0x4840 <_ZN14EthernetClient4readEv+0x26>
  {
    // recv worked
    return b;
    483a:	89 81       	ldd	r24, Y+1	; 0x01
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	02 c0       	rjmp	.+4      	; 0x4844 <_ZN14EthernetClient4readEv+0x2a>
  }
  else
  {
    // No data available
    return -1;
    4840:	8f ef       	ldi	r24, 0xFF	; 255
    4842:	9f ef       	ldi	r25, 0xFF	; 255
  }
}
    4844:	0f 90       	pop	r0
    4846:	df 91       	pop	r29
    4848:	cf 91       	pop	r28
    484a:	08 95       	ret

0000484c <_ZN14EthernetClient4readEPhj>:

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    484c:	fc 01       	movw	r30, r24
    484e:	84 85       	ldd	r24, Z+12	; 0x0c
    4850:	25 c5       	rjmp	.+2634   	; 0x529c <_Z4recvhPhi>

00004852 <_ZN14EthernetClient4peekEv>:
}

int EthernetClient::peek() {
    4852:	0f 93       	push	r16
    4854:	1f 93       	push	r17
    4856:	cf 93       	push	r28
    4858:	df 93       	push	r29
    485a:	1f 92       	push	r1
    485c:	cd b7       	in	r28, 0x3d	; 61
    485e:	de b7       	in	r29, 0x3e	; 62
    4860:	8c 01       	movw	r16, r24
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    4862:	dc 01       	movw	r26, r24
    4864:	ed 91       	ld	r30, X+
    4866:	fc 91       	ld	r31, X
    4868:	00 84       	ldd	r0, Z+8	; 0x08
    486a:	f1 85       	ldd	r31, Z+9	; 0x09
    486c:	e0 2d       	mov	r30, r0
    486e:	09 95       	icall
    4870:	89 2b       	or	r24, r25
    4872:	49 f0       	breq	.+18     	; 0x4886 <_ZN14EthernetClient4peekEv+0x34>
    return -1;
  ::peek(_sock, &b);
    4874:	be 01       	movw	r22, r28
    4876:	6f 5f       	subi	r22, 0xFF	; 255
    4878:	7f 4f       	sbci	r23, 0xFF	; 255
    487a:	f8 01       	movw	r30, r16
    487c:	84 85       	ldd	r24, Z+12	; 0x0c
    487e:	4f d5       	rcall	.+2718   	; 0x531e <_Z4peekhPh>
  return b;
    4880:	89 81       	ldd	r24, Y+1	; 0x01
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	02 c0       	rjmp	.+4      	; 0x488a <_ZN14EthernetClient4peekEv+0x38>

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    4886:	8f ef       	ldi	r24, 0xFF	; 255
    4888:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    488a:	0f 90       	pop	r0
    488c:	df 91       	pop	r29
    488e:	cf 91       	pop	r28
    4890:	1f 91       	pop	r17
    4892:	0f 91       	pop	r16
    4894:	08 95       	ret

00004896 <_ZN14EthernetClient5flushEv>:

void EthernetClient::flush() {
  ::flush(_sock);
    4896:	fc 01       	movw	r30, r24
    4898:	84 85       	ldd	r24, Z+12	; 0x0c
    489a:	4e c5       	rjmp	.+2716   	; 0x5338 <_Z5flushh>

0000489c <_ZN14EthernetClientC1Ev>:
#include "EthernetServer.h"
#include "Dns.h"

uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
    489c:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    489e:	13 82       	std	Z+3, r1	; 0x03
    48a0:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    48a2:	88 ee       	ldi	r24, 0xE8	; 232
    48a4:	93 e0       	ldi	r25, 0x03	; 3
    48a6:	a0 e0       	ldi	r26, 0x00	; 0
    48a8:	b0 e0       	ldi	r27, 0x00	; 0
    48aa:	84 83       	std	Z+4, r24	; 0x04
    48ac:	95 83       	std	Z+5, r25	; 0x05
    48ae:	a6 83       	std	Z+6, r26	; 0x06
    48b0:	b7 83       	std	Z+7, r27	; 0x07
    48b2:	8d e4       	ldi	r24, 0x4D	; 77
    48b4:	99 e0       	ldi	r25, 0x09	; 9
    48b6:	91 83       	std	Z+1, r25	; 0x01
    48b8:	80 83       	st	Z, r24
    48ba:	88 e0       	ldi	r24, 0x08	; 8
    48bc:	84 87       	std	Z+12, r24	; 0x0c
    48be:	08 95       	ret

000048c0 <_ZN14EthernetClientC1Eh>:
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    48c0:	fc 01       	movw	r30, r24
    48c2:	13 82       	std	Z+3, r1	; 0x03
    48c4:	12 82       	std	Z+2, r1	; 0x02
    48c6:	88 ee       	ldi	r24, 0xE8	; 232
    48c8:	93 e0       	ldi	r25, 0x03	; 3
    48ca:	a0 e0       	ldi	r26, 0x00	; 0
    48cc:	b0 e0       	ldi	r27, 0x00	; 0
    48ce:	84 83       	std	Z+4, r24	; 0x04
    48d0:	95 83       	std	Z+5, r25	; 0x05
    48d2:	a6 83       	std	Z+6, r26	; 0x06
    48d4:	b7 83       	std	Z+7, r27	; 0x07
    48d6:	8d e4       	ldi	r24, 0x4D	; 77
    48d8:	99 e0       	ldi	r25, 0x09	; 9
    48da:	91 83       	std	Z+1, r25	; 0x01
    48dc:	80 83       	st	Z, r24
    48de:	64 87       	std	Z+12, r22	; 0x0c
    48e0:	08 95       	ret

000048e2 <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    48e2:	fc 01       	movw	r30, r24
    48e4:	64 85       	ldd	r22, Z+12	; 0x0c
    48e6:	68 30       	cpi	r22, 0x08	; 8
    48e8:	39 f0       	breq	.+14     	; 0x48f8 <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    48ea:	62 95       	swap	r22
    48ec:	66 0f       	add	r22, r22
    48ee:	60 7e       	andi	r22, 0xE0	; 224
    48f0:	68 5f       	subi	r22, 0xF8	; 248
    48f2:	83 e0       	ldi	r24, 0x03	; 3
    48f4:	90 e0       	ldi	r25, 0x00	; 0
    48f6:	e4 c5       	rjmp	.+3016   	; 0x54c0 <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    48f8:	80 e0       	ldi	r24, 0x00	; 0
    48fa:	08 95       	ret

000048fc <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    48fc:	cf 93       	push	r28
    48fe:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    4900:	fc 01       	movw	r30, r24
    4902:	24 85       	ldd	r18, Z+12	; 0x0c
    4904:	28 30       	cpi	r18, 0x08	; 8
    4906:	c9 f0       	breq	.+50     	; 0x493a <_ZN14EthernetClient9connectedEv+0x3e>
    4908:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    490a:	eb df       	rcall	.-42     	; 0x48e2 <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    490c:	84 31       	cpi	r24, 0x14	; 20
    490e:	81 f0       	breq	.+32     	; 0x4930 <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    4910:	88 23       	and	r24, r24
    4912:	71 f0       	breq	.+28     	; 0x4930 <_ZN14EthernetClient9connectedEv+0x34>
    4914:	88 31       	cpi	r24, 0x18	; 24
    4916:	61 f0       	breq	.+24     	; 0x4930 <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    4918:	8c 31       	cpi	r24, 0x1C	; 28
    491a:	61 f4       	brne	.+24     	; 0x4934 <_ZN14EthernetClient9connectedEv+0x38>
    491c:	e8 81       	ld	r30, Y
    491e:	f9 81       	ldd	r31, Y+1	; 0x01
    4920:	00 84       	ldd	r0, Z+8	; 0x08
    4922:	f1 85       	ldd	r31, Z+9	; 0x09
    4924:	e0 2d       	mov	r30, r0
    4926:	ce 01       	movw	r24, r28
    4928:	09 95       	icall
    492a:	21 e0       	ldi	r18, 0x01	; 1
    492c:	89 2b       	or	r24, r25
    492e:	19 f4       	brne	.+6      	; 0x4936 <_ZN14EthernetClient9connectedEv+0x3a>
    4930:	20 e0       	ldi	r18, 0x00	; 0
    4932:	01 c0       	rjmp	.+2      	; 0x4936 <_ZN14EthernetClient9connectedEv+0x3a>
    4934:	21 e0       	ldi	r18, 0x01	; 1
    4936:	82 2f       	mov	r24, r18
    4938:	01 c0       	rjmp	.+2      	; 0x493c <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    493a:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    493c:	df 91       	pop	r29
    493e:	cf 91       	pop	r28
    4940:	08 95       	ret

00004942 <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    4942:	cf 92       	push	r12
    4944:	df 92       	push	r13
    4946:	ef 92       	push	r14
    4948:	ff 92       	push	r15
    494a:	cf 93       	push	r28
    494c:	df 93       	push	r29
    494e:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    4950:	8c 85       	ldd	r24, Y+12	; 0x0c
    4952:	88 30       	cpi	r24, 0x08	; 8
    4954:	69 f1       	breq	.+90     	; 0x49b0 <_ZN14EthernetClient4stopEv+0x6e>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    4956:	55 d4       	rcall	.+2218   	; 0x5202 <_Z10disconnecth>
  unsigned long start = millis();
    4958:	0e 94 47 3b 	call	0x768e	; 0x768e <millis>
    495c:	6b 01       	movw	r12, r22
    495e:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    4960:	ce 01       	movw	r24, r28
    4962:	bf df       	rcall	.-130    	; 0x48e2 <_ZN14EthernetClient6statusEv>
    4964:	88 23       	and	r24, r24
    4966:	a1 f0       	breq	.+40     	; 0x4990 <_ZN14EthernetClient4stopEv+0x4e>
    4968:	0e 94 47 3b 	call	0x768e	; 0x768e <millis>
    496c:	dc 01       	movw	r26, r24
    496e:	cb 01       	movw	r24, r22
    4970:	8c 19       	sub	r24, r12
    4972:	9d 09       	sbc	r25, r13
    4974:	ae 09       	sbc	r26, r14
    4976:	bf 09       	sbc	r27, r15
    4978:	88 3e       	cpi	r24, 0xE8	; 232
    497a:	93 40       	sbci	r25, 0x03	; 3
    497c:	a1 05       	cpc	r26, r1
    497e:	b1 05       	cpc	r27, r1
    4980:	38 f4       	brcc	.+14     	; 0x4990 <_ZN14EthernetClient4stopEv+0x4e>
    delay(1);
    4982:	61 e0       	ldi	r22, 0x01	; 1
    4984:	70 e0       	ldi	r23, 0x00	; 0
    4986:	80 e0       	ldi	r24, 0x00	; 0
    4988:	90 e0       	ldi	r25, 0x00	; 0
    498a:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    498e:	e8 cf       	rjmp	.-48     	; 0x4960 <_ZN14EthernetClient4stopEv+0x1e>
    4990:	ce 01       	movw	r24, r28
    4992:	a7 df       	rcall	.-178    	; 0x48e2 <_ZN14EthernetClient6statusEv>
    4994:	88 23       	and	r24, r24
    close(_sock);
    4996:	11 f0       	breq	.+4      	; 0x499c <_ZN14EthernetClient4stopEv+0x5a>
    4998:	8c 85       	ldd	r24, Y+12	; 0x0c
    499a:	b1 d3       	rcall	.+1890   	; 0x50fe <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    499c:	ec 85       	ldd	r30, Y+12	; 0x0c
    499e:	f0 e0       	ldi	r31, 0x00	; 0
    49a0:	ee 0f       	add	r30, r30
    49a2:	ff 1f       	adc	r31, r31
    49a4:	e8 52       	subi	r30, 0x28	; 40
    49a6:	f3 4f       	sbci	r31, 0xF3	; 243
    49a8:	11 82       	std	Z+1, r1	; 0x01
    49aa:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    49ac:	88 e0       	ldi	r24, 0x08	; 8
    49ae:	8c 87       	std	Y+12, r24	; 0x0c
}
    49b0:	df 91       	pop	r29
    49b2:	cf 91       	pop	r28
    49b4:	ff 90       	pop	r15
    49b6:	ef 90       	pop	r14
    49b8:	df 90       	pop	r13
    49ba:	cf 90       	pop	r12
    49bc:	08 95       	ret

000049be <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    49be:	cf 92       	push	r12
    49c0:	df 92       	push	r13
    49c2:	ff 92       	push	r15
    49c4:	0f 93       	push	r16
    49c6:	1f 93       	push	r17
    49c8:	cf 93       	push	r28
    49ca:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    49cc:	fc 01       	movw	r30, r24
    49ce:	24 85       	ldd	r18, Z+12	; 0x0c
    49d0:	28 30       	cpi	r18, 0x08	; 8
    49d2:	c1 f5       	brne	.+112    	; 0x4a44 <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    49d4:	6a 01       	movw	r12, r20
    49d6:	8b 01       	movw	r16, r22
    49d8:	ec 01       	movw	r28, r24
    49da:	f1 2c       	mov	r15, r1
    49dc:	6f 2d       	mov	r22, r15
    49de:	62 95       	swap	r22
    49e0:	66 0f       	add	r22, r22
    49e2:	60 7e       	andi	r22, 0xE0	; 224
    49e4:	68 5f       	subi	r22, 0xF8	; 248
    49e6:	83 e0       	ldi	r24, 0x03	; 3
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	6a d5       	rcall	.+2772   	; 0x54c0 <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    49ec:	81 11       	cpse	r24, r1
    49ee:	02 c0       	rjmp	.+4      	; 0x49f4 <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    49f0:	fc 86       	std	Y+12, r15	; 0x0c
    49f2:	07 c0       	rjmp	.+14     	; 0x4a02 <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    49f4:	8b 7f       	andi	r24, 0xFB	; 251
    49f6:	88 31       	cpi	r24, 0x18	; 24
    49f8:	d9 f3       	breq	.-10     	; 0x49f0 <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    49fa:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    49fc:	f8 e0       	ldi	r31, 0x08	; 8
    49fe:	ff 12       	cpse	r15, r31
    4a00:	ed cf       	rjmp	.-38     	; 0x49dc <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    4a02:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a04:	88 30       	cpi	r24, 0x08	; 8
    4a06:	f1 f0       	breq	.+60     	; 0x4a44 <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    4a08:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <_ZN14EthernetClient8_srcportE>
    4a0c:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <_ZN14EthernetClient8_srcportE+0x1>
    4a10:	2f 5f       	subi	r18, 0xFF	; 255
    4a12:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    4a14:	11 f4       	brne	.+4      	; 0x4a1a <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    4a16:	20 e0       	ldi	r18, 0x00	; 0
    4a18:	34 e0       	ldi	r19, 0x04	; 4
    4a1a:	30 93 47 01 	sts	0x0147, r19	; 0x800147 <_ZN14EthernetClient8_srcportE+0x1>
    4a1e:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    4a22:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <_ZN14EthernetClient8_srcportE>
    4a26:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <_ZN14EthernetClient8_srcportE+0x1>
    4a2a:	20 e0       	ldi	r18, 0x00	; 0
    4a2c:	61 e0       	ldi	r22, 0x01	; 1
    4a2e:	72 d3       	rcall	.+1764   	; 0x5114 <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    4a30:	b8 01       	movw	r22, r16
    4a32:	6e 5f       	subi	r22, 0xFE	; 254
    4a34:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    4a36:	a6 01       	movw	r20, r12
    4a38:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a3a:	b0 d3       	rcall	.+1888   	; 0x519c <_Z7connecthPhj>
    4a3c:	81 11       	cpse	r24, r1
    4a3e:	05 c0       	rjmp	.+10     	; 0x4a4a <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    4a40:	88 e0       	ldi	r24, 0x08	; 8
    4a42:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    4a44:	80 e0       	ldi	r24, 0x00	; 0
    4a46:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    4a48:	0f c0       	rjmp	.+30     	; 0x4a68 <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    4a4a:	ce 01       	movw	r24, r28
    4a4c:	4a df       	rcall	.-364    	; 0x48e2 <_ZN14EthernetClient6statusEv>
    4a4e:	87 31       	cpi	r24, 0x17	; 23
    4a50:	49 f0       	breq	.+18     	; 0x4a64 <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    4a52:	61 e0       	ldi	r22, 0x01	; 1
    4a54:	70 e0       	ldi	r23, 0x00	; 0
    4a56:	80 e0       	ldi	r24, 0x00	; 0
    4a58:	90 e0       	ldi	r25, 0x00	; 0
    4a5a:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>
    if (status() == SnSR::CLOSED) {
    4a5e:	ce 01       	movw	r24, r28
    4a60:	40 df       	rcall	.-384    	; 0x48e2 <_ZN14EthernetClient6statusEv>
    4a62:	ec cf       	rjmp	.-40     	; 0x4a3c <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    4a64:	81 e0       	ldi	r24, 0x01	; 1
    4a66:	90 e0       	ldi	r25, 0x00	; 0
}
    4a68:	df 91       	pop	r29
    4a6a:	cf 91       	pop	r28
    4a6c:	1f 91       	pop	r17
    4a6e:	0f 91       	pop	r16
    4a70:	ff 90       	pop	r15
    4a72:	df 90       	pop	r13
    4a74:	cf 90       	pop	r12
    4a76:	08 95       	ret

00004a78 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    4a78:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4a7a:	00 e0       	ldi	r16, 0x00	; 0
    4a7c:	20 e0       	ldi	r18, 0x00	; 0
    4a7e:	40 e0       	ldi	r20, 0x00	; 0
    4a80:	60 e0       	ldi	r22, 0x00	; 0
    4a82:	8e ee       	ldi	r24, 0xEE	; 238
    4a84:	9c e0       	ldi	r25, 0x0C	; 12
    4a86:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN9IPAddressC1Ehhhh>
    4a8a:	0f 91       	pop	r16
    4a8c:	08 95       	ret

00004a8e <_ZN14EthernetServer5writeEh>:
      }
    }
  }

  return EthernetClient(MAX_SOCK_NUM);
}
    4a8e:	cf 93       	push	r28
    4a90:	df 93       	push	r29
    4a92:	1f 92       	push	r1
    4a94:	cd b7       	in	r28, 0x3d	; 61
    4a96:	de b7       	in	r29, 0x3e	; 62
    4a98:	69 83       	std	Y+1, r22	; 0x01
    4a9a:	dc 01       	movw	r26, r24
    4a9c:	ed 91       	ld	r30, X+
    4a9e:	fc 91       	ld	r31, X
    4aa0:	02 80       	ldd	r0, Z+2	; 0x02
    4aa2:	f3 81       	ldd	r31, Z+3	; 0x03
    4aa4:	e0 2d       	mov	r30, r0
    4aa6:	41 e0       	ldi	r20, 0x01	; 1
    4aa8:	50 e0       	ldi	r21, 0x00	; 0
    4aaa:	be 01       	movw	r22, r28
    4aac:	6f 5f       	subi	r22, 0xFF	; 255
    4aae:	7f 4f       	sbci	r23, 0xFF	; 255
    4ab0:	09 95       	icall
    4ab2:	0f 90       	pop	r0
    4ab4:	df 91       	pop	r29
    4ab6:	cf 91       	pop	r28
    4ab8:	08 95       	ret

00004aba <_ZN14EthernetServer5beginEv>:
    4aba:	ef 92       	push	r14
    4abc:	ff 92       	push	r15
    4abe:	0f 93       	push	r16
    4ac0:	1f 93       	push	r17
    4ac2:	cf 93       	push	r28
    4ac4:	df 93       	push	r29
    4ac6:	cd b7       	in	r28, 0x3d	; 61
    4ac8:	de b7       	in	r29, 0x3e	; 62
    4aca:	2d 97       	sbiw	r28, 0x0d	; 13
    4acc:	0f b6       	in	r0, 0x3f	; 63
    4ace:	f8 94       	cli
    4ad0:	de bf       	out	0x3e, r29	; 62
    4ad2:	0f be       	out	0x3f, r0	; 63
    4ad4:	cd bf       	out	0x3d, r28	; 61
    4ad6:	7c 01       	movw	r14, r24
    4ad8:	00 e0       	ldi	r16, 0x00	; 0
    4ada:	10 e0       	ldi	r17, 0x00	; 0
    4adc:	60 2f       	mov	r22, r16
    4ade:	ce 01       	movw	r24, r28
    4ae0:	01 96       	adiw	r24, 0x01	; 1
    4ae2:	ee de       	rcall	.-548    	; 0x48c0 <_ZN14EthernetClientC1Eh>
    4ae4:	ce 01       	movw	r24, r28
    4ae6:	01 96       	adiw	r24, 0x01	; 1
    4ae8:	fc de       	rcall	.-520    	; 0x48e2 <_ZN14EthernetClient6statusEv>
    4aea:	81 11       	cpse	r24, r1
    4aec:	14 c0       	rjmp	.+40     	; 0x4b16 <_ZN14EthernetServer5beginEv+0x5c>
    4aee:	f7 01       	movw	r30, r14
    4af0:	44 81       	ldd	r20, Z+4	; 0x04
    4af2:	55 81       	ldd	r21, Z+5	; 0x05
    4af4:	20 e0       	ldi	r18, 0x00	; 0
    4af6:	61 e0       	ldi	r22, 0x01	; 1
    4af8:	80 2f       	mov	r24, r16
    4afa:	0c d3       	rcall	.+1560   	; 0x5114 <_Z6sockethhjh>
    4afc:	80 2f       	mov	r24, r16
    4afe:	3d d3       	rcall	.+1658   	; 0x517a <_Z6listenh>
    4b00:	f7 01       	movw	r30, r14
    4b02:	84 81       	ldd	r24, Z+4	; 0x04
    4b04:	95 81       	ldd	r25, Z+5	; 0x05
    4b06:	00 0f       	add	r16, r16
    4b08:	11 1f       	adc	r17, r17
    4b0a:	f8 01       	movw	r30, r16
    4b0c:	e8 52       	subi	r30, 0x28	; 40
    4b0e:	f3 4f       	sbci	r31, 0xF3	; 243
    4b10:	91 83       	std	Z+1, r25	; 0x01
    4b12:	80 83       	st	Z, r24
    4b14:	05 c0       	rjmp	.+10     	; 0x4b20 <_ZN14EthernetServer5beginEv+0x66>
    4b16:	0f 5f       	subi	r16, 0xFF	; 255
    4b18:	1f 4f       	sbci	r17, 0xFF	; 255
    4b1a:	08 30       	cpi	r16, 0x08	; 8
    4b1c:	11 05       	cpc	r17, r1
    4b1e:	f1 f6       	brne	.-68     	; 0x4adc <_ZN14EthernetServer5beginEv+0x22>
    4b20:	2d 96       	adiw	r28, 0x0d	; 13
    4b22:	0f b6       	in	r0, 0x3f	; 63
    4b24:	f8 94       	cli
    4b26:	de bf       	out	0x3e, r29	; 62
    4b28:	0f be       	out	0x3f, r0	; 63
    4b2a:	cd bf       	out	0x3d, r28	; 61
    4b2c:	df 91       	pop	r29
    4b2e:	cf 91       	pop	r28
    4b30:	1f 91       	pop	r17
    4b32:	0f 91       	pop	r16
    4b34:	ff 90       	pop	r15
    4b36:	ef 90       	pop	r14
    4b38:	08 95       	ret

00004b3a <_ZN14EthernetServerC1Ej>:
    4b3a:	fc 01       	movw	r30, r24
    4b3c:	13 82       	std	Z+3, r1	; 0x03
    4b3e:	12 82       	std	Z+2, r1	; 0x02
    4b40:	8f e6       	ldi	r24, 0x6F	; 111
    4b42:	99 e0       	ldi	r25, 0x09	; 9
    4b44:	91 83       	std	Z+1, r25	; 0x01
    4b46:	80 83       	st	Z, r24
    4b48:	75 83       	std	Z+5, r23	; 0x05
    4b4a:	64 83       	std	Z+4, r22	; 0x04
    4b4c:	08 95       	ret

00004b4e <_ZN14EthernetServer6acceptEv>:
    4b4e:	af 92       	push	r10
    4b50:	bf 92       	push	r11
    4b52:	cf 92       	push	r12
    4b54:	df 92       	push	r13
    4b56:	ef 92       	push	r14
    4b58:	ff 92       	push	r15
    4b5a:	1f 93       	push	r17
    4b5c:	cf 93       	push	r28
    4b5e:	df 93       	push	r29
    4b60:	cd b7       	in	r28, 0x3d	; 61
    4b62:	de b7       	in	r29, 0x3e	; 62
    4b64:	2d 97       	sbiw	r28, 0x0d	; 13
    4b66:	0f b6       	in	r0, 0x3f	; 63
    4b68:	f8 94       	cli
    4b6a:	de bf       	out	0x3e, r29	; 62
    4b6c:	0f be       	out	0x3f, r0	; 63
    4b6e:	cd bf       	out	0x3d, r28	; 61
    4b70:	7c 01       	movw	r14, r24
    4b72:	98 ed       	ldi	r25, 0xD8	; 216
    4b74:	a9 2e       	mov	r10, r25
    4b76:	9c e0       	ldi	r25, 0x0C	; 12
    4b78:	b9 2e       	mov	r11, r25
    4b7a:	10 e0       	ldi	r17, 0x00	; 0
    4b7c:	c1 2c       	mov	r12, r1
    4b7e:	d1 2c       	mov	r13, r1
    4b80:	61 2f       	mov	r22, r17
    4b82:	ce 01       	movw	r24, r28
    4b84:	01 96       	adiw	r24, 0x01	; 1
    4b86:	9c de       	rcall	.-712    	; 0x48c0 <_ZN14EthernetClientC1Eh>
    4b88:	d5 01       	movw	r26, r10
    4b8a:	2d 91       	ld	r18, X+
    4b8c:	3d 91       	ld	r19, X+
    4b8e:	5d 01       	movw	r10, r26
    4b90:	f7 01       	movw	r30, r14
    4b92:	84 81       	ldd	r24, Z+4	; 0x04
    4b94:	95 81       	ldd	r25, Z+5	; 0x05
    4b96:	28 17       	cp	r18, r24
    4b98:	39 07       	cpc	r19, r25
    4b9a:	99 f4       	brne	.+38     	; 0x4bc2 <_ZN14EthernetServer6acceptEv+0x74>
    4b9c:	ce 01       	movw	r24, r28
    4b9e:	01 96       	adiw	r24, 0x01	; 1
    4ba0:	a0 de       	rcall	.-704    	; 0x48e2 <_ZN14EthernetClient6statusEv>
    4ba2:	84 31       	cpi	r24, 0x14	; 20
    4ba4:	59 f0       	breq	.+22     	; 0x4bbc <_ZN14EthernetServer6acceptEv+0x6e>
    4ba6:	ce 01       	movw	r24, r28
    4ba8:	01 96       	adiw	r24, 0x01	; 1
    4baa:	9b de       	rcall	.-714    	; 0x48e2 <_ZN14EthernetClient6statusEv>
    4bac:	8c 31       	cpi	r24, 0x1C	; 28
    4bae:	49 f4       	brne	.+18     	; 0x4bc2 <_ZN14EthernetServer6acceptEv+0x74>
    4bb0:	ce 01       	movw	r24, r28
    4bb2:	01 96       	adiw	r24, 0x01	; 1
    4bb4:	28 de       	rcall	.-944    	; 0x4806 <_ZN14EthernetClient9availableEv>
    4bb6:	89 2b       	or	r24, r25
    4bb8:	91 f0       	breq	.+36     	; 0x4bde <_ZN14EthernetServer6acceptEv+0x90>
    4bba:	03 c0       	rjmp	.+6      	; 0x4bc2 <_ZN14EthernetServer6acceptEv+0x74>
    4bbc:	cc 24       	eor	r12, r12
    4bbe:	c3 94       	inc	r12
    4bc0:	d1 2c       	mov	r13, r1
    4bc2:	1f 5f       	subi	r17, 0xFF	; 255
    4bc4:	18 30       	cpi	r17, 0x08	; 8
    4bc6:	e1 f6       	brne	.-72     	; 0x4b80 <_ZN14EthernetServer6acceptEv+0x32>
    4bc8:	cd 28       	or	r12, r13
    4bca:	69 f4       	brne	.+26     	; 0x4be6 <_ZN14EthernetServer6acceptEv+0x98>
    4bcc:	d7 01       	movw	r26, r14
    4bce:	ed 91       	ld	r30, X+
    4bd0:	fc 91       	ld	r31, X
    4bd2:	00 84       	ldd	r0, Z+8	; 0x08
    4bd4:	f1 85       	ldd	r31, Z+9	; 0x09
    4bd6:	e0 2d       	mov	r30, r0
    4bd8:	c7 01       	movw	r24, r14
    4bda:	09 95       	icall
    4bdc:	04 c0       	rjmp	.+8      	; 0x4be6 <_ZN14EthernetServer6acceptEv+0x98>
    4bde:	ce 01       	movw	r24, r28
    4be0:	01 96       	adiw	r24, 0x01	; 1
    4be2:	af de       	rcall	.-674    	; 0x4942 <_ZN14EthernetClient4stopEv>
    4be4:	ee cf       	rjmp	.-36     	; 0x4bc2 <_ZN14EthernetServer6acceptEv+0x74>
    4be6:	2d 96       	adiw	r28, 0x0d	; 13
    4be8:	0f b6       	in	r0, 0x3f	; 63
    4bea:	f8 94       	cli
    4bec:	de bf       	out	0x3e, r29	; 62
    4bee:	0f be       	out	0x3f, r0	; 63
    4bf0:	cd bf       	out	0x3d, r28	; 61
    4bf2:	df 91       	pop	r29
    4bf4:	cf 91       	pop	r28
    4bf6:	1f 91       	pop	r17
    4bf8:	ff 90       	pop	r15
    4bfa:	ef 90       	pop	r14
    4bfc:	df 90       	pop	r13
    4bfe:	cf 90       	pop	r12
    4c00:	bf 90       	pop	r11
    4c02:	af 90       	pop	r10
    4c04:	08 95       	ret

00004c06 <_ZN14EthernetServer5writeEPKhj>:
    4c06:	7f 92       	push	r7
    4c08:	8f 92       	push	r8
    4c0a:	9f 92       	push	r9
    4c0c:	af 92       	push	r10
    4c0e:	bf 92       	push	r11
    4c10:	cf 92       	push	r12
    4c12:	df 92       	push	r13
    4c14:	ef 92       	push	r14
    4c16:	ff 92       	push	r15
    4c18:	0f 93       	push	r16
    4c1a:	1f 93       	push	r17
    4c1c:	cf 93       	push	r28
    4c1e:	df 93       	push	r29
    4c20:	cd b7       	in	r28, 0x3d	; 61
    4c22:	de b7       	in	r29, 0x3e	; 62
    4c24:	2d 97       	sbiw	r28, 0x0d	; 13
    4c26:	0f b6       	in	r0, 0x3f	; 63
    4c28:	f8 94       	cli
    4c2a:	de bf       	out	0x3e, r29	; 62
    4c2c:	0f be       	out	0x3f, r0	; 63
    4c2e:	cd bf       	out	0x3d, r28	; 61
    4c30:	6c 01       	movw	r12, r24
    4c32:	5b 01       	movw	r10, r22
    4c34:	4a 01       	movw	r8, r20
    4c36:	8b df       	rcall	.-234    	; 0x4b4e <_ZN14EthernetServer6acceptEv>
    4c38:	88 ed       	ldi	r24, 0xD8	; 216
    4c3a:	e8 2e       	mov	r14, r24
    4c3c:	8c e0       	ldi	r24, 0x0C	; 12
    4c3e:	f8 2e       	mov	r15, r24
    4c40:	71 2c       	mov	r7, r1
    4c42:	00 e0       	ldi	r16, 0x00	; 0
    4c44:	10 e0       	ldi	r17, 0x00	; 0
    4c46:	67 2d       	mov	r22, r7
    4c48:	ce 01       	movw	r24, r28
    4c4a:	01 96       	adiw	r24, 0x01	; 1
    4c4c:	39 de       	rcall	.-910    	; 0x48c0 <_ZN14EthernetClientC1Eh>
    4c4e:	f7 01       	movw	r30, r14
    4c50:	21 91       	ld	r18, Z+
    4c52:	31 91       	ld	r19, Z+
    4c54:	7f 01       	movw	r14, r30
    4c56:	f6 01       	movw	r30, r12
    4c58:	84 81       	ldd	r24, Z+4	; 0x04
    4c5a:	95 81       	ldd	r25, Z+5	; 0x05
    4c5c:	28 17       	cp	r18, r24
    4c5e:	39 07       	cpc	r19, r25
    4c60:	29 f4       	brne	.+10     	; 0x4c6c <_ZN14EthernetServer5writeEPKhj+0x66>
    4c62:	ce 01       	movw	r24, r28
    4c64:	01 96       	adiw	r24, 0x01	; 1
    4c66:	3d de       	rcall	.-902    	; 0x48e2 <_ZN14EthernetClient6statusEv>
    4c68:	87 31       	cpi	r24, 0x17	; 23
    4c6a:	c9 f0       	breq	.+50     	; 0x4c9e <_ZN14EthernetServer5writeEPKhj+0x98>
    4c6c:	73 94       	inc	r7
    4c6e:	f8 e0       	ldi	r31, 0x08	; 8
    4c70:	7f 12       	cpse	r7, r31
    4c72:	e9 cf       	rjmp	.-46     	; 0x4c46 <_ZN14EthernetServer5writeEPKhj+0x40>
    4c74:	c8 01       	movw	r24, r16
    4c76:	2d 96       	adiw	r28, 0x0d	; 13
    4c78:	0f b6       	in	r0, 0x3f	; 63
    4c7a:	f8 94       	cli
    4c7c:	de bf       	out	0x3e, r29	; 62
    4c7e:	0f be       	out	0x3f, r0	; 63
    4c80:	cd bf       	out	0x3d, r28	; 61
    4c82:	df 91       	pop	r29
    4c84:	cf 91       	pop	r28
    4c86:	1f 91       	pop	r17
    4c88:	0f 91       	pop	r16
    4c8a:	ff 90       	pop	r15
    4c8c:	ef 90       	pop	r14
    4c8e:	df 90       	pop	r13
    4c90:	cf 90       	pop	r12
    4c92:	bf 90       	pop	r11
    4c94:	af 90       	pop	r10
    4c96:	9f 90       	pop	r9
    4c98:	8f 90       	pop	r8
    4c9a:	7f 90       	pop	r7
    4c9c:	08 95       	ret
    4c9e:	a4 01       	movw	r20, r8
    4ca0:	b5 01       	movw	r22, r10
    4ca2:	ce 01       	movw	r24, r28
    4ca4:	01 96       	adiw	r24, 0x01	; 1
    4ca6:	92 dd       	rcall	.-1244   	; 0x47cc <_ZN14EthernetClient5writeEPKhj>
    4ca8:	08 0f       	add	r16, r24
    4caa:	19 1f       	adc	r17, r25
    4cac:	df cf       	rjmp	.-66     	; 0x4c6c <_ZN14EthernetServer5writeEPKhj+0x66>

00004cae <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    4cae:	0f 93       	push	r16
    4cb0:	00 e0       	ldi	r16, 0x00	; 0
    4cb2:	20 e0       	ldi	r18, 0x00	; 0
    4cb4:	40 e0       	ldi	r20, 0x00	; 0
    4cb6:	60 e0       	ldi	r22, 0x00	; 0
    4cb8:	84 ef       	ldi	r24, 0xF4	; 244
    4cba:	9c e0       	ldi	r25, 0x0C	; 12
    4cbc:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN9IPAddressC1Ehhhh>
    4cc0:	0f 91       	pop	r16
    4cc2:	08 95       	ret

00004cc4 <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    4cc4:	80 e0       	ldi	r24, 0x00	; 0
    4cc6:	08 95       	ret

00004cc8 <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    4cc8:	dc 01       	movw	r26, r24
    4cca:	ed 91       	ld	r30, X+
    4ccc:	fc 91       	ld	r31, X
    4cce:	04 8c       	ldd	r0, Z+28	; 0x1c
    4cd0:	f5 8d       	ldd	r31, Z+29	; 0x1d
    4cd2:	e0 2d       	mov	r30, r0
    4cd4:	09 94       	ijmp

00004cd6 <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4cd6:	2f ed       	ldi	r18, 0xDF	; 223
    4cd8:	39 e0       	ldi	r19, 0x09	; 9
    4cda:	fc 01       	movw	r30, r24
    4cdc:	31 83       	std	Z+1, r19	; 0x01
    4cde:	20 83       	st	Z, r18
    4ce0:	fb 01       	movw	r30, r22
    4ce2:	41 89       	ldd	r20, Z+17	; 0x11
    4ce4:	52 89       	ldd	r21, Z+18	; 0x12
    4ce6:	63 89       	ldd	r22, Z+19	; 0x13
    4ce8:	74 89       	ldd	r23, Z+20	; 0x14
    4cea:	fc 01       	movw	r30, r24
    4cec:	42 83       	std	Z+2, r20	; 0x02
    4cee:	53 83       	std	Z+3, r21	; 0x03
    4cf0:	64 83       	std	Z+4, r22	; 0x04
    4cf2:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    4cf4:	08 95       	ret

00004cf6 <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    4cf6:	fc 01       	movw	r30, r24
    4cf8:	85 89       	ldd	r24, Z+21	; 0x15
    4cfa:	96 89       	ldd	r25, Z+22	; 0x16
    4cfc:	08 95       	ret

00004cfe <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    4cfe:	fc 01       	movw	r30, r24
    4d00:	81 8d       	ldd	r24, Z+25	; 0x19
    4d02:	92 8d       	ldd	r25, Z+26	; 0x1a
    4d04:	08 95       	ret

00004d06 <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    4d06:	cf 93       	push	r28
    4d08:	df 93       	push	r29
    4d0a:	1f 92       	push	r1
    4d0c:	cd b7       	in	r28, 0x3d	; 61
    4d0e:	de b7       	in	r29, 0x3e	; 62
    4d10:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    4d12:	dc 01       	movw	r26, r24
    4d14:	ed 91       	ld	r30, X+
    4d16:	fc 91       	ld	r31, X
    4d18:	02 80       	ldd	r0, Z+2	; 0x02
    4d1a:	f3 81       	ldd	r31, Z+3	; 0x03
    4d1c:	e0 2d       	mov	r30, r0
    4d1e:	41 e0       	ldi	r20, 0x01	; 1
    4d20:	50 e0       	ldi	r21, 0x00	; 0
    4d22:	be 01       	movw	r22, r28
    4d24:	6f 5f       	subi	r22, 0xFF	; 255
    4d26:	7f 4f       	sbci	r23, 0xFF	; 255
    4d28:	09 95       	icall
}
    4d2a:	0f 90       	pop	r0
    4d2c:	df 91       	pop	r29
    4d2e:	cf 91       	pop	r28
    4d30:	08 95       	ret

00004d32 <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    4d32:	cf 93       	push	r28
    4d34:	df 93       	push	r29
    4d36:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    4d38:	89 8d       	ldd	r24, Y+25	; 0x19
    4d3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4d3c:	89 2b       	or	r24, r25
    4d3e:	41 f0       	breq	.+16     	; 0x4d50 <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    4d40:	e8 81       	ld	r30, Y
    4d42:	f9 81       	ldd	r31, Y+1	; 0x01
    4d44:	02 84       	ldd	r0, Z+10	; 0x0a
    4d46:	f3 85       	ldd	r31, Z+11	; 0x0b
    4d48:	e0 2d       	mov	r30, r0
    4d4a:	ce 01       	movw	r24, r28
    4d4c:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    4d4e:	f4 cf       	rjmp	.-24     	; 0x4d38 <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    4d50:	df 91       	pop	r29
    4d52:	cf 91       	pop	r28
    4d54:	08 95       	ret

00004d56 <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    4d56:	cf 93       	push	r28
    4d58:	df 93       	push	r29
    4d5a:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    4d5c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d5e:	88 30       	cpi	r24, 0x08	; 8
    4d60:	59 f0       	breq	.+22     	; 0x4d78 <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    4d62:	cd d1       	rcall	.+922    	; 0x50fe <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    4d64:	ec 85       	ldd	r30, Y+12	; 0x0c
    4d66:	f0 e0       	ldi	r31, 0x00	; 0
    4d68:	ee 0f       	add	r30, r30
    4d6a:	ff 1f       	adc	r31, r31
    4d6c:	e8 52       	subi	r30, 0x28	; 40
    4d6e:	f3 4f       	sbci	r31, 0xF3	; 243
    4d70:	11 82       	std	Z+1, r1	; 0x01
    4d72:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    4d74:	88 e0       	ldi	r24, 0x08	; 8
    4d76:	8c 87       	std	Y+12, r24	; 0x0c
}
    4d78:	df 91       	pop	r29
    4d7a:	cf 91       	pop	r28
    4d7c:	08 95       	ret

00004d7e <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    4d7e:	fc 01       	movw	r30, r24
    4d80:	10 8e       	std	Z+24, r1	; 0x18
    4d82:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    4d84:	6e 5f       	subi	r22, 0xFE	; 254
    4d86:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    4d88:	84 85       	ldd	r24, Z+12	; 0x0c
    4d8a:	02 c3       	rjmp	.+1540   	; 0x5390 <_Z8startUDPhPhj>

00004d8c <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    4d8c:	fc 01       	movw	r30, r24
    4d8e:	84 85       	ldd	r24, Z+12	; 0x0c
    4d90:	22 c3       	rjmp	.+1604   	; 0x53d6 <_Z7sendUDPh>

00004d92 <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    4d92:	cf 93       	push	r28
    4d94:	df 93       	push	r29
    4d96:	ec 01       	movw	r28, r24
    4d98:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    4d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    4d9c:	98 8d       	ldd	r25, Y+24	; 0x18
    4d9e:	ab 01       	movw	r20, r22
    4da0:	bc 01       	movw	r22, r24
    4da2:	8c 85       	ldd	r24, Y+12	; 0x0c
    4da4:	ca d2       	rcall	.+1428   	; 0x533a <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    4da6:	2f 89       	ldd	r18, Y+23	; 0x17
    4da8:	38 8d       	ldd	r19, Y+24	; 0x18
    4daa:	28 0f       	add	r18, r24
    4dac:	39 1f       	adc	r19, r25
    4dae:	38 8f       	std	Y+24, r19	; 0x18
    4db0:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    4db2:	df 91       	pop	r29
    4db4:	cf 91       	pop	r28
    4db6:	08 95       	ret

00004db8 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    4db8:	0f 93       	push	r16
    4dba:	1f 93       	push	r17
    4dbc:	cf 93       	push	r28
    4dbe:	df 93       	push	r29
    4dc0:	1f 92       	push	r1
    4dc2:	cd b7       	in	r28, 0x3d	; 61
    4dc4:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    4dc6:	fc 01       	movw	r30, r24
    4dc8:	21 8d       	ldd	r18, Z+25	; 0x19
    4dca:	32 8d       	ldd	r19, Z+26	; 0x1a
    4dcc:	23 2b       	or	r18, r19
    4dce:	59 f0       	breq	.+22     	; 0x4de6 <_ZN11EthernetUDP4readEv+0x2e>
    4dd0:	8c 01       	movw	r16, r24
    4dd2:	41 e0       	ldi	r20, 0x01	; 1
    4dd4:	50 e0       	ldi	r21, 0x00	; 0
    4dd6:	be 01       	movw	r22, r28
    4dd8:	6f 5f       	subi	r22, 0xFF	; 255
    4dda:	7f 4f       	sbci	r23, 0xFF	; 255
    4ddc:	84 85       	ldd	r24, Z+12	; 0x0c
    4dde:	5e d2       	rcall	.+1212   	; 0x529c <_Z4recvhPhi>
    4de0:	18 16       	cp	r1, r24
    4de2:	19 06       	cpc	r1, r25
    4de4:	1c f0       	brlt	.+6      	; 0x4dec <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    4de6:	8f ef       	ldi	r24, 0xFF	; 255
    4de8:	9f ef       	ldi	r25, 0xFF	; 255
    4dea:	08 c0       	rjmp	.+16     	; 0x4dfc <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    4dec:	f8 01       	movw	r30, r16
    4dee:	81 8d       	ldd	r24, Z+25	; 0x19
    4df0:	92 8d       	ldd	r25, Z+26	; 0x1a
    4df2:	01 97       	sbiw	r24, 0x01	; 1
    4df4:	92 8f       	std	Z+26, r25	; 0x1a
    4df6:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    4df8:	89 81       	ldd	r24, Y+1	; 0x01
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    4dfc:	0f 90       	pop	r0
    4dfe:	df 91       	pop	r29
    4e00:	cf 91       	pop	r28
    4e02:	1f 91       	pop	r17
    4e04:	0f 91       	pop	r16
    4e06:	08 95       	ret

00004e08 <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    4e08:	cf 93       	push	r28
    4e0a:	df 93       	push	r29

  if (_remaining > 0)
    4e0c:	fc 01       	movw	r30, r24
    4e0e:	21 8d       	ldd	r18, Z+25	; 0x19
    4e10:	32 8d       	ldd	r19, Z+26	; 0x1a
    4e12:	21 15       	cp	r18, r1
    4e14:	31 05       	cpc	r19, r1
    4e16:	19 f4       	brne	.+6      	; 0x4e1e <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    4e18:	8f ef       	ldi	r24, 0xFF	; 255
    4e1a:	9f ef       	ldi	r25, 0xFF	; 255
    4e1c:	10 c0       	rjmp	.+32     	; 0x4e3e <_ZN11EthernetUDP4readEPhj+0x36>
    4e1e:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    4e20:	42 17       	cp	r20, r18
    4e22:	53 07       	cpc	r21, r19
    4e24:	08 f0       	brcs	.+2      	; 0x4e28 <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    4e26:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    4e28:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e2a:	38 d2       	rcall	.+1136   	; 0x529c <_Z4recvhPhi>
    }

    if (got > 0)
    4e2c:	18 16       	cp	r1, r24
    4e2e:	19 06       	cpc	r1, r25
    4e30:	9c f7       	brge	.-26     	; 0x4e18 <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    4e32:	29 8d       	ldd	r18, Y+25	; 0x19
    4e34:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4e36:	28 1b       	sub	r18, r24
    4e38:	39 0b       	sbc	r19, r25
    4e3a:	3a 8f       	std	Y+26, r19	; 0x1a
    4e3c:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    4e3e:	df 91       	pop	r29
    4e40:	cf 91       	pop	r28
    4e42:	08 95       	ret

00004e44 <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    4e44:	cf 93       	push	r28
    4e46:	df 93       	push	r29
    4e48:	1f 92       	push	r1
    4e4a:	cd b7       	in	r28, 0x3d	; 61
    4e4c:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    4e4e:	fc 01       	movw	r30, r24
    4e50:	21 8d       	ldd	r18, Z+25	; 0x19
    4e52:	32 8d       	ldd	r19, Z+26	; 0x1a
    4e54:	23 2b       	or	r18, r19
    4e56:	41 f0       	breq	.+16     	; 0x4e68 <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    4e58:	be 01       	movw	r22, r28
    4e5a:	6f 5f       	subi	r22, 0xFF	; 255
    4e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e5e:	84 85       	ldd	r24, Z+12	; 0x0c
    4e60:	5e d2       	rcall	.+1212   	; 0x531e <_Z4peekhPh>
  return b;
    4e62:	89 81       	ldd	r24, Y+1	; 0x01
    4e64:	90 e0       	ldi	r25, 0x00	; 0
    4e66:	02 c0       	rjmp	.+4      	; 0x4e6c <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    4e68:	8f ef       	ldi	r24, 0xFF	; 255
    4e6a:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    4e6c:	0f 90       	pop	r0
    4e6e:	df 91       	pop	r29
    4e70:	cf 91       	pop	r28
    4e72:	08 95       	ret

00004e74 <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    4e74:	ef 92       	push	r14
    4e76:	ff 92       	push	r15
    4e78:	1f 93       	push	r17
    4e7a:	cf 93       	push	r28
    4e7c:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    4e7e:	fc 01       	movw	r30, r24
    4e80:	24 85       	ldd	r18, Z+12	; 0x0c
    4e82:	28 30       	cpi	r18, 0x08	; 8
    4e84:	11 f0       	breq	.+4      	; 0x4e8a <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    4e86:	80 e0       	ldi	r24, 0x00	; 0
    4e88:	20 c0       	rjmp	.+64     	; 0x4eca <_ZN11EthernetUDP5beginEj+0x56>
    4e8a:	7b 01       	movw	r14, r22
    4e8c:	ec 01       	movw	r28, r24
    4e8e:	10 e0       	ldi	r17, 0x00	; 0
    4e90:	61 2f       	mov	r22, r17
    4e92:	62 95       	swap	r22
    4e94:	66 0f       	add	r22, r22
    4e96:	60 7e       	andi	r22, 0xE0	; 224
    4e98:	68 5f       	subi	r22, 0xF8	; 248
    4e9a:	83 e0       	ldi	r24, 0x03	; 3
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	10 d3       	rcall	.+1568   	; 0x54c0 <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    4ea0:	81 11       	cpse	r24, r1
    4ea2:	02 c0       	rjmp	.+4      	; 0x4ea8 <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    4ea4:	1c 87       	std	Y+12, r17	; 0x0c
    4ea6:	05 c0       	rjmp	.+10     	; 0x4eb2 <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    4ea8:	88 31       	cpi	r24, 0x18	; 24
    4eaa:	e1 f3       	breq	.-8      	; 0x4ea4 <_ZN11EthernetUDP5beginEj+0x30>
    4eac:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    4eae:	18 30       	cpi	r17, 0x08	; 8
    4eb0:	79 f7       	brne	.-34     	; 0x4e90 <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    4eb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    4eb4:	88 30       	cpi	r24, 0x08	; 8
    4eb6:	39 f3       	breq	.-50     	; 0x4e86 <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    4eb8:	fe 86       	std	Y+14, r15	; 0x0e
    4eba:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    4ebc:	1a 8e       	std	Y+26, r1	; 0x1a
    4ebe:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    4ec0:	20 e0       	ldi	r18, 0x00	; 0
    4ec2:	a7 01       	movw	r20, r14
    4ec4:	62 e0       	ldi	r22, 0x02	; 2
    4ec6:	26 d1       	rcall	.+588    	; 0x5114 <_Z6sockethhjh>

  return 1;
    4ec8:	81 e0       	ldi	r24, 0x01	; 1
}
    4eca:	df 91       	pop	r29
    4ecc:	cf 91       	pop	r28
    4ece:	1f 91       	pop	r17
    4ed0:	ff 90       	pop	r15
    4ed2:	ef 90       	pop	r14
    4ed4:	08 95       	ret

00004ed6 <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    4ed6:	0f 93       	push	r16
    4ed8:	1f 93       	push	r17
    4eda:	cf 93       	push	r28
    4edc:	df 93       	push	r29
    4ede:	cd b7       	in	r28, 0x3d	; 61
    4ee0:	de b7       	in	r29, 0x3e	; 62
    4ee2:	28 97       	sbiw	r28, 0x08	; 8
    4ee4:	0f b6       	in	r0, 0x3f	; 63
    4ee6:	f8 94       	cli
    4ee8:	de bf       	out	0x3e, r29	; 62
    4eea:	0f be       	out	0x3f, r0	; 63
    4eec:	cd bf       	out	0x3d, r28	; 61
    4eee:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    4ef0:	dc 01       	movw	r26, r24
    4ef2:	ed 91       	ld	r30, X+
    4ef4:	fc 91       	ld	r31, X
    4ef6:	06 80       	ldd	r0, Z+6	; 0x06
    4ef8:	f7 81       	ldd	r31, Z+7	; 0x07
    4efa:	e0 2d       	mov	r30, r0
    4efc:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    4efe:	f8 01       	movw	r30, r16
    4f00:	64 85       	ldd	r22, Z+12	; 0x0c
    4f02:	8b e0       	ldi	r24, 0x0B	; 11
    4f04:	9d e0       	ldi	r25, 0x0D	; 13
    4f06:	6f d3       	rcall	.+1758   	; 0x55e6 <_ZN10W5500Class17getRXReceivedSizeEh>
    4f08:	89 2b       	or	r24, r25
    4f0a:	39 f1       	breq	.+78     	; 0x4f5a <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    4f0c:	48 e0       	ldi	r20, 0x08	; 8
    4f0e:	50 e0       	ldi	r21, 0x00	; 0
    4f10:	be 01       	movw	r22, r28
    4f12:	6f 5f       	subi	r22, 0xFF	; 255
    4f14:	7f 4f       	sbci	r23, 0xFF	; 255
    4f16:	d8 01       	movw	r26, r16
    4f18:	1c 96       	adiw	r26, 0x0c	; 12
    4f1a:	8c 91       	ld	r24, X
    4f1c:	bf d1       	rcall	.+894    	; 0x529c <_Z4recvhPhi>
    if (ret > 0)
    4f1e:	18 16       	cp	r1, r24
    4f20:	19 06       	cpc	r1, r25
    4f22:	ec f4       	brge	.+58     	; 0x4f5e <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    4f24:	be 01       	movw	r22, r28
    4f26:	6f 5f       	subi	r22, 0xFF	; 255
    4f28:	7f 4f       	sbci	r23, 0xFF	; 255
    4f2a:	c8 01       	movw	r24, r16
    4f2c:	0f 96       	adiw	r24, 0x0f	; 15
    4f2e:	0e 94 c2 39 	call	0x7384	; 0x7384 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    4f32:	8d 81       	ldd	r24, Y+5	; 0x05
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	98 2f       	mov	r25, r24
    4f38:	88 27       	eor	r24, r24
    4f3a:	2e 81       	ldd	r18, Y+6	; 0x06
    4f3c:	82 0f       	add	r24, r18
    4f3e:	91 1d       	adc	r25, r1
    4f40:	f8 01       	movw	r30, r16
    4f42:	96 8b       	std	Z+22, r25	; 0x16
    4f44:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    4f46:	8f 81       	ldd	r24, Y+7	; 0x07
    4f48:	90 e0       	ldi	r25, 0x00	; 0
    4f4a:	98 2f       	mov	r25, r24
    4f4c:	88 27       	eor	r24, r24
    4f4e:	28 85       	ldd	r18, Y+8	; 0x08
    4f50:	82 0f       	add	r24, r18
    4f52:	91 1d       	adc	r25, r1
    4f54:	92 8f       	std	Z+26, r25	; 0x1a
    4f56:	81 8f       	std	Z+25, r24	; 0x19
    4f58:	02 c0       	rjmp	.+4      	; 0x4f5e <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    4f5a:	80 e0       	ldi	r24, 0x00	; 0
    4f5c:	90 e0       	ldi	r25, 0x00	; 0
}
    4f5e:	28 96       	adiw	r28, 0x08	; 8
    4f60:	0f b6       	in	r0, 0x3f	; 63
    4f62:	f8 94       	cli
    4f64:	de bf       	out	0x3e, r29	; 62
    4f66:	0f be       	out	0x3f, r0	; 63
    4f68:	cd bf       	out	0x3d, r28	; 61
    4f6a:	df 91       	pop	r29
    4f6c:	cf 91       	pop	r28
    4f6e:	1f 91       	pop	r17
    4f70:	0f 91       	pop	r16
    4f72:	08 95       	ret

00004f74 <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    4f74:	fc 01       	movw	r30, r24
    4f76:	13 82       	std	Z+3, r1	; 0x03
    4f78:	12 82       	std	Z+2, r1	; 0x02
    4f7a:	88 ee       	ldi	r24, 0xE8	; 232
    4f7c:	93 e0       	ldi	r25, 0x03	; 3
    4f7e:	a0 e0       	ldi	r26, 0x00	; 0
    4f80:	b0 e0       	ldi	r27, 0x00	; 0
    4f82:	84 83       	std	Z+4, r24	; 0x04
    4f84:	95 83       	std	Z+5, r25	; 0x05
    4f86:	a6 83       	std	Z+6, r26	; 0x06
    4f88:	b7 83       	std	Z+7, r27	; 0x07
    4f8a:	8d e7       	ldi	r24, 0x7D	; 125
    4f8c:	99 e0       	ldi	r25, 0x09	; 9
    4f8e:	91 83       	std	Z+1, r25	; 0x01
    4f90:	80 83       	st	Z, r24
    4f92:	88 e0       	ldi	r24, 0x08	; 8
    4f94:	84 87       	std	Z+12, r24	; 0x0c
    4f96:	cf 01       	movw	r24, r30
    4f98:	0f 96       	adiw	r24, 0x0f	; 15
    4f9a:	0c 94 a0 39 	jmp	0x7340	; 0x7340 <_ZN9IPAddressC1Ev>

00004f9e <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    4f9e:	cf 92       	push	r12
    4fa0:	df 92       	push	r13
    4fa2:	ef 92       	push	r14
    4fa4:	ff 92       	push	r15
    4fa6:	0f 93       	push	r16
    4fa8:	1f 93       	push	r17
    4faa:	cf 93       	push	r28
    4fac:	df 93       	push	r29
    4fae:	cd b7       	in	r28, 0x3d	; 61
    4fb0:	de b7       	in	r29, 0x3e	; 62
    4fb2:	af 97       	sbiw	r28, 0x2f	; 47
    4fb4:	0f b6       	in	r0, 0x3f	; 63
    4fb6:	f8 94       	cli
    4fb8:	de bf       	out	0x3e, r29	; 62
    4fba:	0f be       	out	0x3f, r0	; 63
    4fbc:	cd bf       	out	0x3d, r28	; 61
    4fbe:	8c 01       	movw	r16, r24
    4fc0:	6b 01       	movw	r12, r22
    4fc2:	7a 01       	movw	r14, r20
    4fc4:	ce 01       	movw	r24, r28
    4fc6:	01 96       	adiw	r24, 0x01	; 1
    4fc8:	0e 94 a0 39 	call	0x7340	; 0x7340 <_ZN9IPAddressC1Ev>
    4fcc:	ce 01       	movw	r24, r28
    4fce:	09 96       	adiw	r24, 0x09	; 9
    4fd0:	d1 df       	rcall	.-94     	; 0x4f74 <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    4fd2:	ce 01       	movw	r24, r28
    4fd4:	8a 96       	adiw	r24, 0x2a	; 42
    4fd6:	0e 94 a0 39 	call	0x7340	; 0x7340 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    4fda:	6b ec       	ldi	r22, 0xCB	; 203
    4fdc:	7c e0       	ldi	r23, 0x0C	; 12
    4fde:	ce 01       	movw	r24, r28
    4fe0:	84 96       	adiw	r24, 0x24	; 36
    4fe2:	3e db       	rcall	.-2436   	; 0x4660 <_ZN13EthernetClass11dnsServerIPEv>
    4fe4:	be 01       	movw	r22, r28
    4fe6:	6c 5d       	subi	r22, 0xDC	; 220
    4fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    4fea:	ce 01       	movw	r24, r28
    4fec:	01 96       	adiw	r24, 0x01	; 1
    4fee:	03 d8       	rcall	.-4090   	; 0x3ff6 <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    4ff0:	ae 01       	movw	r20, r28
    4ff2:	46 5d       	subi	r20, 0xD6	; 214
    4ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ff6:	b6 01       	movw	r22, r12
    4ff8:	ce 01       	movw	r24, r28
    4ffa:	01 96       	adiw	r24, 0x01	; 1
    4ffc:	56 da       	rcall	.-2900   	; 0x44aa <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    4ffe:	81 30       	cpi	r24, 0x01	; 1
    5000:	91 05       	cpc	r25, r1
    5002:	c1 f4       	brne	.+48     	; 0x5034 <_ZN11EthernetUDP11beginPacketEPKcj+0x96>
    return beginPacket(remote_addr, port);
    5004:	d8 01       	movw	r26, r16
    5006:	ed 91       	ld	r30, X+
    5008:	fc 91       	ld	r31, X
    500a:	04 88       	ldd	r0, Z+20	; 0x14
    500c:	f5 89       	ldd	r31, Z+21	; 0x15
    500e:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    5010:	8f ed       	ldi	r24, 0xDF	; 223
    5012:	99 e0       	ldi	r25, 0x09	; 9
    5014:	9d a3       	std	Y+37, r25	; 0x25
    5016:	8c a3       	std	Y+36, r24	; 0x24
    5018:	8c a5       	ldd	r24, Y+44	; 0x2c
    501a:	9d a5       	ldd	r25, Y+45	; 0x2d
    501c:	ae a5       	ldd	r26, Y+46	; 0x2e
    501e:	bf a5       	ldd	r27, Y+47	; 0x2f
    5020:	8e a3       	std	Y+38, r24	; 0x26
    5022:	9f a3       	std	Y+39, r25	; 0x27
    5024:	a8 a7       	std	Y+40, r26	; 0x28
    5026:	b9 a7       	std	Y+41, r27	; 0x29
    5028:	a7 01       	movw	r20, r14
    502a:	be 01       	movw	r22, r28
    502c:	6c 5d       	subi	r22, 0xDC	; 220
    502e:	7f 4f       	sbci	r23, 0xFF	; 255
    5030:	c8 01       	movw	r24, r16
    5032:	09 95       	icall
  } else {
    return ret;
  }
}
    5034:	af 96       	adiw	r28, 0x2f	; 47
    5036:	0f b6       	in	r0, 0x3f	; 63
    5038:	f8 94       	cli
    503a:	de bf       	out	0x3e, r29	; 62
    503c:	0f be       	out	0x3f, r0	; 63
    503e:	cd bf       	out	0x3d, r28	; 61
    5040:	df 91       	pop	r29
    5042:	cf 91       	pop	r28
    5044:	1f 91       	pop	r17
    5046:	0f 91       	pop	r16
    5048:	ff 90       	pop	r15
    504a:	ef 90       	pop	r14
    504c:	df 90       	pop	r13
    504e:	cf 90       	pop	r12
    5050:	08 95       	ret

00005052 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    5052:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    5054:	00 e0       	ldi	r16, 0x00	; 0
    5056:	20 e0       	ldi	r18, 0x00	; 0
    5058:	40 e0       	ldi	r20, 0x00	; 0
    505a:	60 e0       	ldi	r22, 0x00	; 0
    505c:	8a ef       	ldi	r24, 0xFA	; 250
    505e:	9c e0       	ldi	r25, 0x0C	; 12
    5060:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN9IPAddressC1Ehhhh>
    5064:	0f 91       	pop	r16
    5066:	08 95       	ret

00005068 <_GLOBAL__sub_I__ZN7TwitterC2EPKc>:

int Twitter::wait(Print *debug)
{
	while (checkStatus(debug));
	return statusCode;
}
    5068:	0f 93       	push	r16
    506a:	00 e0       	ldi	r16, 0x00	; 0
    506c:	20 e0       	ldi	r18, 0x00	; 0
    506e:	40 e0       	ldi	r20, 0x00	; 0
    5070:	60 e0       	ldi	r22, 0x00	; 0
    5072:	80 e0       	ldi	r24, 0x00	; 0
    5074:	9d e0       	ldi	r25, 0x0D	; 13
    5076:	0e 94 aa 39 	call	0x7354	; 0x7354 <_ZN9IPAddressC1Ehhhh>
    507a:	0f 91       	pop	r16
    507c:	08 95       	ret

0000507e <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    507e:	ab 01       	movw	r20, r22
    5080:	82 95       	swap	r24
    5082:	88 0f       	add	r24, r24
    5084:	80 7e       	andi	r24, 0xE0	; 224
    5086:	6c e0       	ldi	r22, 0x0C	; 12
    5088:	68 0f       	add	r22, r24
    508a:	24 e0       	ldi	r18, 0x04	; 4
    508c:	30 e0       	ldi	r19, 0x00	; 0
    508e:	8c e0       	ldi	r24, 0x0C	; 12
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	e8 c1       	rjmp	.+976    	; 0x5464 <_ZN10W5500Class5writeEjhPKhj>

00005094 <_ZN10W5500Class6readSnEhj>:
    5094:	9b 01       	movw	r18, r22
    5096:	82 95       	swap	r24
    5098:	88 0f       	add	r24, r24
    509a:	80 7e       	andi	r24, 0xE0	; 224
    509c:	68 e0       	ldi	r22, 0x08	; 8
    509e:	68 0f       	add	r22, r24
    50a0:	c9 01       	movw	r24, r18
    50a2:	0e c2       	rjmp	.+1052   	; 0x54c0 <_ZN10W5500Class4readEjh>

000050a4 <_ZN10W5500Class8readSnIREh>:
    50a4:	62 e0       	ldi	r22, 0x02	; 2
    50a6:	70 e0       	ldi	r23, 0x00	; 0
    50a8:	f5 cf       	rjmp	.-22     	; 0x5094 <_ZN10W5500Class6readSnEhj>

000050aa <_ZN10W5500Class7writeSnEhjh>:
    50aa:	9b 01       	movw	r18, r22
    50ac:	82 95       	swap	r24
    50ae:	88 0f       	add	r24, r24
    50b0:	80 7e       	andi	r24, 0xE0	; 224
    50b2:	6c e0       	ldi	r22, 0x0C	; 12
    50b4:	68 0f       	add	r22, r24
    50b6:	c9 01       	movw	r24, r18
    50b8:	b5 c1       	rjmp	.+874    	; 0x5424 <_ZN10W5500Class5writeEjhh>

000050ba <_ZN10W5500Class11writeSnPORTEhj>:
    50ba:	cf 93       	push	r28
    50bc:	df 93       	push	r29
    50be:	c8 2f       	mov	r28, r24
    50c0:	d6 2f       	mov	r29, r22
    50c2:	47 2f       	mov	r20, r23
    50c4:	64 e0       	ldi	r22, 0x04	; 4
    50c6:	70 e0       	ldi	r23, 0x00	; 0
    50c8:	f0 df       	rcall	.-32     	; 0x50aa <_ZN10W5500Class7writeSnEhjh>
    50ca:	4d 2f       	mov	r20, r29
    50cc:	65 e0       	ldi	r22, 0x05	; 5
    50ce:	70 e0       	ldi	r23, 0x00	; 0
    50d0:	8c 2f       	mov	r24, r28
    50d2:	df 91       	pop	r29
    50d4:	cf 91       	pop	r28
    50d6:	e9 cf       	rjmp	.-46     	; 0x50aa <_ZN10W5500Class7writeSnEhjh>

000050d8 <_ZN10W5500Class9writeSnIREhh>:
    50d8:	46 2f       	mov	r20, r22
    50da:	62 e0       	ldi	r22, 0x02	; 2
    50dc:	70 e0       	ldi	r23, 0x00	; 0
    50de:	e5 cf       	rjmp	.-54     	; 0x50aa <_ZN10W5500Class7writeSnEhjh>

000050e0 <_ZN10W5500Class12writeSnDPORTEhj>:
    50e0:	cf 93       	push	r28
    50e2:	df 93       	push	r29
    50e4:	c8 2f       	mov	r28, r24
    50e6:	d6 2f       	mov	r29, r22
    50e8:	47 2f       	mov	r20, r23
    50ea:	60 e1       	ldi	r22, 0x10	; 16
    50ec:	70 e0       	ldi	r23, 0x00	; 0
    50ee:	dd df       	rcall	.-70     	; 0x50aa <_ZN10W5500Class7writeSnEhjh>
    50f0:	4d 2f       	mov	r20, r29
    50f2:	61 e1       	ldi	r22, 0x11	; 17
    50f4:	70 e0       	ldi	r23, 0x00	; 0
    50f6:	8c 2f       	mov	r24, r28
    50f8:	df 91       	pop	r29
    50fa:	cf 91       	pop	r28
    50fc:	d6 cf       	rjmp	.-84     	; 0x50aa <_ZN10W5500Class7writeSnEhjh>

000050fe <_Z5closeh>:
    50fe:	cf 93       	push	r28
    5100:	c8 2f       	mov	r28, r24
    5102:	40 e1       	ldi	r20, 0x10	; 16
    5104:	68 2f       	mov	r22, r24
    5106:	8b e0       	ldi	r24, 0x0B	; 11
    5108:	9d e0       	ldi	r25, 0x0D	; 13
    510a:	5f d3       	rcall	.+1726   	; 0x57ca <_ZN10W5500Class9execCmdSnEh7SockCMD>
    510c:	6f ef       	ldi	r22, 0xFF	; 255
    510e:	8c 2f       	mov	r24, r28
    5110:	cf 91       	pop	r28
    5112:	e2 cf       	rjmp	.-60     	; 0x50d8 <_ZN10W5500Class9writeSnIREhh>

00005114 <_Z6sockethhjh>:
    5114:	ff 92       	push	r15
    5116:	0f 93       	push	r16
    5118:	1f 93       	push	r17
    511a:	cf 93       	push	r28
    511c:	df 93       	push	r29
    511e:	9f ef       	ldi	r25, 0xFF	; 255
    5120:	96 0f       	add	r25, r22
    5122:	95 30       	cpi	r25, 0x05	; 5
    5124:	18 f5       	brcc	.+70     	; 0x516c <_Z6sockethhjh+0x58>
    5126:	d2 2f       	mov	r29, r18
    5128:	8a 01       	movw	r16, r20
    512a:	f6 2e       	mov	r15, r22
    512c:	c8 2f       	mov	r28, r24
    512e:	e7 df       	rcall	.-50     	; 0x50fe <_Z5closeh>
    5130:	4f 2d       	mov	r20, r15
    5132:	4d 2b       	or	r20, r29
    5134:	60 e0       	ldi	r22, 0x00	; 0
    5136:	70 e0       	ldi	r23, 0x00	; 0
    5138:	8c 2f       	mov	r24, r28
    513a:	b7 df       	rcall	.-146    	; 0x50aa <_ZN10W5500Class7writeSnEhjh>
    513c:	01 15       	cp	r16, r1
    513e:	11 05       	cpc	r17, r1
    5140:	11 f0       	breq	.+4      	; 0x5146 <_Z6sockethhjh+0x32>
    5142:	b8 01       	movw	r22, r16
    5144:	0a c0       	rjmp	.+20     	; 0x515a <_Z6sockethhjh+0x46>
    5146:	60 91 06 0d 	lds	r22, 0x0D06	; 0x800d06 <_ZL10local_port>
    514a:	70 91 07 0d 	lds	r23, 0x0D07	; 0x800d07 <_ZL10local_port+0x1>
    514e:	6f 5f       	subi	r22, 0xFF	; 255
    5150:	7f 4f       	sbci	r23, 0xFF	; 255
    5152:	70 93 07 0d 	sts	0x0D07, r23	; 0x800d07 <_ZL10local_port+0x1>
    5156:	60 93 06 0d 	sts	0x0D06, r22	; 0x800d06 <_ZL10local_port>
    515a:	8c 2f       	mov	r24, r28
    515c:	ae df       	rcall	.-164    	; 0x50ba <_ZN10W5500Class11writeSnPORTEhj>
    515e:	41 e0       	ldi	r20, 0x01	; 1
    5160:	6c 2f       	mov	r22, r28
    5162:	8b e0       	ldi	r24, 0x0B	; 11
    5164:	9d e0       	ldi	r25, 0x0D	; 13
    5166:	31 d3       	rcall	.+1634   	; 0x57ca <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5168:	81 e0       	ldi	r24, 0x01	; 1
    516a:	01 c0       	rjmp	.+2      	; 0x516e <_Z6sockethhjh+0x5a>
    516c:	80 e0       	ldi	r24, 0x00	; 0
    516e:	df 91       	pop	r29
    5170:	cf 91       	pop	r28
    5172:	1f 91       	pop	r17
    5174:	0f 91       	pop	r16
    5176:	ff 90       	pop	r15
    5178:	08 95       	ret

0000517a <_Z6listenh>:
    517a:	cf 93       	push	r28
    517c:	c8 2f       	mov	r28, r24
    517e:	63 e0       	ldi	r22, 0x03	; 3
    5180:	70 e0       	ldi	r23, 0x00	; 0
    5182:	88 df       	rcall	.-240    	; 0x5094 <_ZN10W5500Class6readSnEhj>
    5184:	83 31       	cpi	r24, 0x13	; 19
    5186:	39 f4       	brne	.+14     	; 0x5196 <_Z6listenh+0x1c>
    5188:	42 e0       	ldi	r20, 0x02	; 2
    518a:	6c 2f       	mov	r22, r28
    518c:	8b e0       	ldi	r24, 0x0B	; 11
    518e:	9d e0       	ldi	r25, 0x0D	; 13
    5190:	1c d3       	rcall	.+1592   	; 0x57ca <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5192:	81 e0       	ldi	r24, 0x01	; 1
    5194:	01 c0       	rjmp	.+2      	; 0x5198 <_Z6listenh+0x1e>
    5196:	80 e0       	ldi	r24, 0x00	; 0
    5198:	cf 91       	pop	r28
    519a:	08 95       	ret

0000519c <_Z7connecthPhj>:
    519c:	0f 93       	push	r16
    519e:	1f 93       	push	r17
    51a0:	cf 93       	push	r28
    51a2:	fb 01       	movw	r30, r22
    51a4:	90 81       	ld	r25, Z
    51a6:	9f 3f       	cpi	r25, 0xFF	; 255
    51a8:	51 f4       	brne	.+20     	; 0x51be <_Z7connecthPhj+0x22>
    51aa:	91 81       	ldd	r25, Z+1	; 0x01
    51ac:	9f 3f       	cpi	r25, 0xFF	; 255
    51ae:	91 f4       	brne	.+36     	; 0x51d4 <_Z7connecthPhj+0x38>
    51b0:	92 81       	ldd	r25, Z+2	; 0x02
    51b2:	9f 3f       	cpi	r25, 0xFF	; 255
    51b4:	79 f4       	brne	.+30     	; 0x51d4 <_Z7connecthPhj+0x38>
    51b6:	93 81       	ldd	r25, Z+3	; 0x03
    51b8:	9f 3f       	cpi	r25, 0xFF	; 255
    51ba:	61 f4       	brne	.+24     	; 0x51d4 <_Z7connecthPhj+0x38>
    51bc:	1c c0       	rjmp	.+56     	; 0x51f6 <_Z7connecthPhj+0x5a>
    51be:	91 11       	cpse	r25, r1
    51c0:	09 c0       	rjmp	.+18     	; 0x51d4 <_Z7connecthPhj+0x38>
    51c2:	91 81       	ldd	r25, Z+1	; 0x01
    51c4:	91 11       	cpse	r25, r1
    51c6:	06 c0       	rjmp	.+12     	; 0x51d4 <_Z7connecthPhj+0x38>
    51c8:	92 81       	ldd	r25, Z+2	; 0x02
    51ca:	91 11       	cpse	r25, r1
    51cc:	03 c0       	rjmp	.+6      	; 0x51d4 <_Z7connecthPhj+0x38>
    51ce:	93 81       	ldd	r25, Z+3	; 0x03
    51d0:	99 23       	and	r25, r25
    51d2:	91 f0       	breq	.+36     	; 0x51f8 <_Z7connecthPhj+0x5c>
    51d4:	41 15       	cp	r20, r1
    51d6:	51 05       	cpc	r21, r1
    51d8:	71 f0       	breq	.+28     	; 0x51f6 <_Z7connecthPhj+0x5a>
    51da:	8a 01       	movw	r16, r20
    51dc:	bf 01       	movw	r22, r30
    51de:	c8 2f       	mov	r28, r24
    51e0:	4e df       	rcall	.-356    	; 0x507e <_ZN10W5500Class11writeSnDIPREhPh>
    51e2:	b8 01       	movw	r22, r16
    51e4:	8c 2f       	mov	r24, r28
    51e6:	7c df       	rcall	.-264    	; 0x50e0 <_ZN10W5500Class12writeSnDPORTEhj>
    51e8:	44 e0       	ldi	r20, 0x04	; 4
    51ea:	6c 2f       	mov	r22, r28
    51ec:	8b e0       	ldi	r24, 0x0B	; 11
    51ee:	9d e0       	ldi	r25, 0x0D	; 13
    51f0:	ec d2       	rcall	.+1496   	; 0x57ca <_ZN10W5500Class9execCmdSnEh7SockCMD>
    51f2:	91 e0       	ldi	r25, 0x01	; 1
    51f4:	01 c0       	rjmp	.+2      	; 0x51f8 <_Z7connecthPhj+0x5c>
    51f6:	90 e0       	ldi	r25, 0x00	; 0
    51f8:	89 2f       	mov	r24, r25
    51fa:	cf 91       	pop	r28
    51fc:	1f 91       	pop	r17
    51fe:	0f 91       	pop	r16
    5200:	08 95       	ret

00005202 <_Z10disconnecth>:
    5202:	48 e0       	ldi	r20, 0x08	; 8
    5204:	68 2f       	mov	r22, r24
    5206:	8b e0       	ldi	r24, 0x0B	; 11
    5208:	9d e0       	ldi	r25, 0x0D	; 13
    520a:	df c2       	rjmp	.+1470   	; 0x57ca <_ZN10W5500Class9execCmdSnEh7SockCMD>

0000520c <_Z4sendhPKhj>:
    520c:	cf 92       	push	r12
    520e:	df 92       	push	r13
    5210:	ef 92       	push	r14
    5212:	ff 92       	push	r15
    5214:	0f 93       	push	r16
    5216:	1f 93       	push	r17
    5218:	cf 93       	push	r28
    521a:	c8 2f       	mov	r28, r24
    521c:	7b 01       	movw	r14, r22
    521e:	8a 01       	movw	r16, r20
    5220:	41 30       	cpi	r20, 0x01	; 1
    5222:	58 40       	sbci	r21, 0x08	; 8
    5224:	10 f0       	brcs	.+4      	; 0x522a <_Z4sendhPKhj+0x1e>
    5226:	00 e0       	ldi	r16, 0x00	; 0
    5228:	18 e0       	ldi	r17, 0x08	; 8
    522a:	6c 2f       	mov	r22, r28
    522c:	8b e0       	ldi	r24, 0x0B	; 11
    522e:	9d e0       	ldi	r25, 0x0D	; 13
    5230:	a9 d1       	rcall	.+850    	; 0x5584 <_ZN10W5500Class13getTXFreeSizeEh>
    5232:	6c 01       	movw	r12, r24
    5234:	63 e0       	ldi	r22, 0x03	; 3
    5236:	70 e0       	ldi	r23, 0x00	; 0
    5238:	8c 2f       	mov	r24, r28
    523a:	2c df       	rcall	.-424    	; 0x5094 <_ZN10W5500Class6readSnEhj>
    523c:	87 31       	cpi	r24, 0x17	; 23
    523e:	11 f0       	breq	.+4      	; 0x5244 <_Z4sendhPKhj+0x38>
    5240:	8c 31       	cpi	r24, 0x1C	; 28
    5242:	21 f4       	brne	.+8      	; 0x524c <_Z4sendhPKhj+0x40>
    5244:	c0 16       	cp	r12, r16
    5246:	d1 06       	cpc	r13, r17
    5248:	80 f3       	brcs	.-32     	; 0x522a <_Z4sendhPKhj+0x1e>
    524a:	02 c0       	rjmp	.+4      	; 0x5250 <_Z4sendhPKhj+0x44>
    524c:	00 e0       	ldi	r16, 0x00	; 0
    524e:	10 e0       	ldi	r17, 0x00	; 0
    5250:	98 01       	movw	r18, r16
    5252:	a7 01       	movw	r20, r14
    5254:	6c 2f       	mov	r22, r28
    5256:	8b e0       	ldi	r24, 0x0B	; 11
    5258:	9d e0       	ldi	r25, 0x0D	; 13
    525a:	19 d2       	rcall	.+1074   	; 0x568e <_ZN10W5500Class20send_data_processingEhPKhj>
    525c:	40 e2       	ldi	r20, 0x20	; 32
    525e:	6c 2f       	mov	r22, r28
    5260:	8b e0       	ldi	r24, 0x0B	; 11
    5262:	9d e0       	ldi	r25, 0x0D	; 13
    5264:	b2 d2       	rcall	.+1380   	; 0x57ca <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5266:	8c 2f       	mov	r24, r28
    5268:	1d df       	rcall	.-454    	; 0x50a4 <_ZN10W5500Class8readSnIREh>
    526a:	84 fd       	sbrc	r24, 4
    526c:	0b c0       	rjmp	.+22     	; 0x5284 <_Z4sendhPKhj+0x78>
    526e:	63 e0       	ldi	r22, 0x03	; 3
    5270:	70 e0       	ldi	r23, 0x00	; 0
    5272:	8c 2f       	mov	r24, r28
    5274:	0f df       	rcall	.-482    	; 0x5094 <_ZN10W5500Class6readSnEhj>
    5276:	81 11       	cpse	r24, r1
    5278:	f6 cf       	rjmp	.-20     	; 0x5266 <_Z4sendhPKhj+0x5a>
    527a:	8c 2f       	mov	r24, r28
    527c:	40 df       	rcall	.-384    	; 0x50fe <_Z5closeh>
    527e:	80 e0       	ldi	r24, 0x00	; 0
    5280:	90 e0       	ldi	r25, 0x00	; 0
    5282:	04 c0       	rjmp	.+8      	; 0x528c <_Z4sendhPKhj+0x80>
    5284:	60 e1       	ldi	r22, 0x10	; 16
    5286:	8c 2f       	mov	r24, r28
    5288:	27 df       	rcall	.-434    	; 0x50d8 <_ZN10W5500Class9writeSnIREhh>
    528a:	c8 01       	movw	r24, r16
    528c:	cf 91       	pop	r28
    528e:	1f 91       	pop	r17
    5290:	0f 91       	pop	r16
    5292:	ff 90       	pop	r15
    5294:	ef 90       	pop	r14
    5296:	df 90       	pop	r13
    5298:	cf 90       	pop	r12
    529a:	08 95       	ret

0000529c <_Z4recvhPhi>:
    529c:	cf 92       	push	r12
    529e:	df 92       	push	r13
    52a0:	ef 92       	push	r14
    52a2:	ff 92       	push	r15
    52a4:	0f 93       	push	r16
    52a6:	1f 93       	push	r17
    52a8:	cf 93       	push	r28
    52aa:	df 93       	push	r29
    52ac:	18 2f       	mov	r17, r24
    52ae:	6b 01       	movw	r12, r22
    52b0:	7a 01       	movw	r14, r20
    52b2:	68 2f       	mov	r22, r24
    52b4:	8b e0       	ldi	r24, 0x0B	; 11
    52b6:	9d e0       	ldi	r25, 0x0D	; 13
    52b8:	96 d1       	rcall	.+812    	; 0x55e6 <_ZN10W5500Class17getRXReceivedSizeEh>
    52ba:	ec 01       	movw	r28, r24
    52bc:	00 97       	sbiw	r24, 0x00	; 0
    52be:	91 f4       	brne	.+36     	; 0x52e4 <_Z4recvhPhi+0x48>
    52c0:	63 e0       	ldi	r22, 0x03	; 3
    52c2:	70 e0       	ldi	r23, 0x00	; 0
    52c4:	81 2f       	mov	r24, r17
    52c6:	e6 de       	rcall	.-564    	; 0x5094 <_ZN10W5500Class6readSnEhj>
    52c8:	84 31       	cpi	r24, 0x14	; 20
    52ca:	f9 f0       	breq	.+62     	; 0x530a <_Z4recvhPhi+0x6e>
    52cc:	88 23       	and	r24, r24
    52ce:	e9 f0       	breq	.+58     	; 0x530a <_Z4recvhPhi+0x6e>
    52d0:	c1 e0       	ldi	r28, 0x01	; 1
    52d2:	d0 e0       	ldi	r29, 0x00	; 0
    52d4:	8c 31       	cpi	r24, 0x1C	; 28
    52d6:	11 f4       	brne	.+4      	; 0x52dc <_Z4recvhPhi+0x40>
    52d8:	c0 e0       	ldi	r28, 0x00	; 0
    52da:	d0 e0       	ldi	r29, 0x00	; 0
    52dc:	d1 95       	neg	r29
    52de:	c1 95       	neg	r28
    52e0:	d1 09       	sbc	r29, r1
    52e2:	13 c0       	rjmp	.+38     	; 0x530a <_Z4recvhPhi+0x6e>
    52e4:	e8 16       	cp	r14, r24
    52e6:	f9 06       	cpc	r15, r25
    52e8:	0c f4       	brge	.+2      	; 0x52ec <_Z4recvhPhi+0x50>
    52ea:	e7 01       	movw	r28, r14
    52ec:	1c 16       	cp	r1, r28
    52ee:	1d 06       	cpc	r1, r29
    52f0:	64 f4       	brge	.+24     	; 0x530a <_Z4recvhPhi+0x6e>
    52f2:	00 e0       	ldi	r16, 0x00	; 0
    52f4:	9e 01       	movw	r18, r28
    52f6:	a6 01       	movw	r20, r12
    52f8:	61 2f       	mov	r22, r17
    52fa:	8b e0       	ldi	r24, 0x0B	; 11
    52fc:	9d e0       	ldi	r25, 0x0D	; 13
    52fe:	18 d2       	rcall	.+1072   	; 0x5730 <_ZN10W5500Class20recv_data_processingEhPhjh>
    5300:	40 e4       	ldi	r20, 0x40	; 64
    5302:	61 2f       	mov	r22, r17
    5304:	8b e0       	ldi	r24, 0x0B	; 11
    5306:	9d e0       	ldi	r25, 0x0D	; 13
    5308:	60 d2       	rcall	.+1216   	; 0x57ca <_ZN10W5500Class9execCmdSnEh7SockCMD>
    530a:	ce 01       	movw	r24, r28
    530c:	df 91       	pop	r29
    530e:	cf 91       	pop	r28
    5310:	1f 91       	pop	r17
    5312:	0f 91       	pop	r16
    5314:	ff 90       	pop	r15
    5316:	ef 90       	pop	r14
    5318:	df 90       	pop	r13
    531a:	cf 90       	pop	r12
    531c:	08 95       	ret

0000531e <_Z4peekhPh>:
    531e:	0f 93       	push	r16
    5320:	ab 01       	movw	r20, r22
    5322:	01 e0       	ldi	r16, 0x01	; 1
    5324:	21 e0       	ldi	r18, 0x01	; 1
    5326:	30 e0       	ldi	r19, 0x00	; 0
    5328:	68 2f       	mov	r22, r24
    532a:	8b e0       	ldi	r24, 0x0B	; 11
    532c:	9d e0       	ldi	r25, 0x0D	; 13
    532e:	00 d2       	rcall	.+1024   	; 0x5730 <_ZN10W5500Class20recv_data_processingEhPhjh>
    5330:	81 e0       	ldi	r24, 0x01	; 1
    5332:	90 e0       	ldi	r25, 0x00	; 0
    5334:	0f 91       	pop	r16
    5336:	08 95       	ret

00005338 <_Z5flushh>:
    5338:	08 95       	ret

0000533a <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    533a:	af 92       	push	r10
    533c:	bf 92       	push	r11
    533e:	cf 92       	push	r12
    5340:	df 92       	push	r13
    5342:	ff 92       	push	r15
    5344:	0f 93       	push	r16
    5346:	1f 93       	push	r17
    5348:	cf 93       	push	r28
    534a:	df 93       	push	r29
    534c:	f8 2e       	mov	r15, r24
    534e:	6b 01       	movw	r12, r22
    5350:	5a 01       	movw	r10, r20
    5352:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    5354:	68 2f       	mov	r22, r24
    5356:	8b e0       	ldi	r24, 0x0B	; 11
    5358:	9d e0       	ldi	r25, 0x0D	; 13
    535a:	14 d1       	rcall	.+552    	; 0x5584 <_ZN10W5500Class13getTXFreeSizeEh>
    535c:	8c 17       	cp	r24, r28
    535e:	9d 07       	cpc	r25, r29
    5360:	28 f4       	brcc	.+10     	; 0x536c <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    5362:	6f 2d       	mov	r22, r15
    5364:	8b e0       	ldi	r24, 0x0B	; 11
    5366:	9d e0       	ldi	r25, 0x0D	; 13
    5368:	0d d1       	rcall	.+538    	; 0x5584 <_ZN10W5500Class13getTXFreeSizeEh>
    536a:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    536c:	8e 01       	movw	r16, r28
    536e:	95 01       	movw	r18, r10
    5370:	a6 01       	movw	r20, r12
    5372:	6f 2d       	mov	r22, r15
    5374:	8b e0       	ldi	r24, 0x0B	; 11
    5376:	9d e0       	ldi	r25, 0x0D	; 13
    5378:	50 d1       	rcall	.+672    	; 0x561a <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    537a:	ce 01       	movw	r24, r28
    537c:	df 91       	pop	r29
    537e:	cf 91       	pop	r28
    5380:	1f 91       	pop	r17
    5382:	0f 91       	pop	r16
    5384:	ff 90       	pop	r15
    5386:	df 90       	pop	r13
    5388:	cf 90       	pop	r12
    538a:	bf 90       	pop	r11
    538c:	af 90       	pop	r10
    538e:	08 95       	ret

00005390 <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    5390:	0f 93       	push	r16
    5392:	1f 93       	push	r17
    5394:	cf 93       	push	r28
    5396:	fb 01       	movw	r30, r22
  if
    5398:	90 81       	ld	r25, Z
    539a:	91 11       	cpse	r25, r1
    539c:	09 c0       	rjmp	.+18     	; 0x53b0 <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    539e:	91 81       	ldd	r25, Z+1	; 0x01
    53a0:	91 11       	cpse	r25, r1
    53a2:	06 c0       	rjmp	.+12     	; 0x53b0 <_Z8startUDPhPhj+0x20>
    53a4:	92 81       	ldd	r25, Z+2	; 0x02
    53a6:	91 11       	cpse	r25, r1
    53a8:	03 c0       	rjmp	.+6      	; 0x53b0 <_Z8startUDPhPhj+0x20>
    53aa:	93 81       	ldd	r25, Z+3	; 0x03
    53ac:	99 23       	and	r25, r25
    53ae:	69 f0       	breq	.+26     	; 0x53ca <_Z8startUDPhPhj+0x3a>
    53b0:	41 15       	cp	r20, r1
    53b2:	51 05       	cpc	r21, r1
    53b4:	51 f0       	breq	.+20     	; 0x53ca <_Z8startUDPhPhj+0x3a>
    53b6:	8a 01       	movw	r16, r20
    53b8:	bf 01       	movw	r22, r30
    53ba:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    53bc:	60 de       	rcall	.-832    	; 0x507e <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    53be:	b8 01       	movw	r22, r16
    53c0:	8c 2f       	mov	r24, r28
    53c2:	8e de       	rcall	.-740    	; 0x50e0 <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    53c4:	81 e0       	ldi	r24, 0x01	; 1
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	02 c0       	rjmp	.+4      	; 0x53ce <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    53ca:	80 e0       	ldi	r24, 0x00	; 0
    53cc:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    53ce:	cf 91       	pop	r28
    53d0:	1f 91       	pop	r17
    53d2:	0f 91       	pop	r16
    53d4:	08 95       	ret

000053d6 <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    53d6:	cf 93       	push	r28
    53d8:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    53da:	40 e2       	ldi	r20, 0x20	; 32
    53dc:	68 2f       	mov	r22, r24
    53de:	8b e0       	ldi	r24, 0x0B	; 11
    53e0:	9d e0       	ldi	r25, 0x0D	; 13
    53e2:	f3 d1       	rcall	.+998    	; 0x57ca <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    53e4:	8c 2f       	mov	r24, r28
    53e6:	5e de       	rcall	.-836    	; 0x50a4 <_ZN10W5500Class8readSnIREh>
    53e8:	84 fd       	sbrc	r24, 4
    53ea:	0a c0       	rjmp	.+20     	; 0x5400 <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    53ec:	8c 2f       	mov	r24, r28
    53ee:	5a de       	rcall	.-844    	; 0x50a4 <_ZN10W5500Class8readSnIREh>
    53f0:	83 ff       	sbrs	r24, 3
    53f2:	f8 cf       	rjmp	.-16     	; 0x53e4 <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    53f4:	68 e1       	ldi	r22, 0x18	; 24
    53f6:	8c 2f       	mov	r24, r28
    53f8:	6f de       	rcall	.-802    	; 0x50d8 <_ZN10W5500Class9writeSnIREhh>
    53fa:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    53fc:	90 e0       	ldi	r25, 0x00	; 0
    53fe:	05 c0       	rjmp	.+10     	; 0x540a <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    5400:	60 e1       	ldi	r22, 0x10	; 16
    5402:	8c 2f       	mov	r24, r28
    5404:	69 de       	rcall	.-814    	; 0x50d8 <_ZN10W5500Class9writeSnIREhh>
    5406:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    5408:	90 e0       	ldi	r25, 0x00	; 0
    540a:	cf 91       	pop	r28
}
    540c:	08 95       	ret

0000540e <_ZN8SPIClass8transferEh>:
    540e:	8e bd       	out	0x2e, r24	; 46
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    5410:	00 00       	nop
    5412:	0d b4       	in	r0, 0x2d	; 45
    5414:	07 fe       	sbrs	r0, 7
    5416:	fd cf       	rjmp	.-6      	; 0x5412 <_ZN8SPIClass8transferEh+0x4>
    5418:	8e b5       	in	r24, 0x2e	; 46
    541a:	08 95       	ret

0000541c <_ZN10W5500Class5setSSEv>:
    541c:	44 98       	cbi	0x08, 4	; 8
    541e:	08 95       	ret

00005420 <_ZN10W5500Class7resetSSEv>:
    5420:	44 9a       	sbi	0x08, 4	; 8
    5422:	08 95       	ret

00005424 <_ZN10W5500Class5writeEjhh>:
    5424:	0f 93       	push	r16
    5426:	1f 93       	push	r17
    5428:	cf 93       	push	r28
    542a:	df 93       	push	r29
    542c:	18 2f       	mov	r17, r24
    542e:	09 2f       	mov	r16, r25
    5430:	d6 2f       	mov	r29, r22
    5432:	c4 2f       	mov	r28, r20
    5434:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <wiznet_SPI_settings>
    5438:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <wiznet_SPI_settings+0x1>
    543c:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5440:	ed df       	rcall	.-38     	; 0x541c <_ZN10W5500Class5setSSEv>
    5442:	80 2f       	mov	r24, r16
    5444:	e4 df       	rcall	.-56     	; 0x540e <_ZN8SPIClass8transferEh>
    5446:	81 2f       	mov	r24, r17
    5448:	e2 df       	rcall	.-60     	; 0x540e <_ZN8SPIClass8transferEh>
    544a:	8d 2f       	mov	r24, r29
    544c:	e0 df       	rcall	.-64     	; 0x540e <_ZN8SPIClass8transferEh>
    544e:	8c 2f       	mov	r24, r28
    5450:	de df       	rcall	.-68     	; 0x540e <_ZN8SPIClass8transferEh>
    5452:	e6 df       	rcall	.-52     	; 0x5420 <_ZN10W5500Class7resetSSEv>
    5454:	0e 94 94 17 	call	0x2f28	; 0x2f28 <_ZN8SPIClass14endTransactionEv>
    5458:	81 e0       	ldi	r24, 0x01	; 1
    545a:	df 91       	pop	r29
    545c:	cf 91       	pop	r28
    545e:	1f 91       	pop	r17
    5460:	0f 91       	pop	r16
    5462:	08 95       	ret

00005464 <_ZN10W5500Class5writeEjhPKhj>:
    5464:	df 92       	push	r13
    5466:	ef 92       	push	r14
    5468:	ff 92       	push	r15
    546a:	0f 93       	push	r16
    546c:	1f 93       	push	r17
    546e:	cf 93       	push	r28
    5470:	df 93       	push	r29
    5472:	d8 2f       	mov	r29, r24
    5474:	d9 2e       	mov	r13, r25
    5476:	c6 2f       	mov	r28, r22
    5478:	7a 01       	movw	r14, r20
    547a:	89 01       	movw	r16, r18
    547c:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <wiznet_SPI_settings>
    5480:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <wiznet_SPI_settings+0x1>
    5484:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5488:	c9 df       	rcall	.-110    	; 0x541c <_ZN10W5500Class5setSSEv>
    548a:	8d 2d       	mov	r24, r13
    548c:	c0 df       	rcall	.-128    	; 0x540e <_ZN8SPIClass8transferEh>
    548e:	8d 2f       	mov	r24, r29
    5490:	be df       	rcall	.-132    	; 0x540e <_ZN8SPIClass8transferEh>
    5492:	8c 2f       	mov	r24, r28
    5494:	bc df       	rcall	.-136    	; 0x540e <_ZN8SPIClass8transferEh>
    5496:	e7 01       	movw	r28, r14
    5498:	e0 0e       	add	r14, r16
    549a:	f1 1e       	adc	r15, r17
    549c:	ce 15       	cp	r28, r14
    549e:	df 05       	cpc	r29, r15
    54a0:	19 f0       	breq	.+6      	; 0x54a8 <_ZN10W5500Class5writeEjhPKhj+0x44>
    54a2:	89 91       	ld	r24, Y+
    54a4:	b4 df       	rcall	.-152    	; 0x540e <_ZN8SPIClass8transferEh>
    54a6:	fa cf       	rjmp	.-12     	; 0x549c <_ZN10W5500Class5writeEjhPKhj+0x38>
    54a8:	bb df       	rcall	.-138    	; 0x5420 <_ZN10W5500Class7resetSSEv>
    54aa:	0e 94 94 17 	call	0x2f28	; 0x2f28 <_ZN8SPIClass14endTransactionEv>
    54ae:	c8 01       	movw	r24, r16
    54b0:	df 91       	pop	r29
    54b2:	cf 91       	pop	r28
    54b4:	1f 91       	pop	r17
    54b6:	0f 91       	pop	r16
    54b8:	ff 90       	pop	r15
    54ba:	ef 90       	pop	r14
    54bc:	df 90       	pop	r13
    54be:	08 95       	ret

000054c0 <_ZN10W5500Class4readEjh>:
    54c0:	1f 93       	push	r17
    54c2:	cf 93       	push	r28
    54c4:	df 93       	push	r29
    54c6:	d8 2f       	mov	r29, r24
    54c8:	19 2f       	mov	r17, r25
    54ca:	c6 2f       	mov	r28, r22
    54cc:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <wiznet_SPI_settings>
    54d0:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <wiznet_SPI_settings+0x1>
    54d4:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    54d8:	a1 df       	rcall	.-190    	; 0x541c <_ZN10W5500Class5setSSEv>
    54da:	81 2f       	mov	r24, r17
    54dc:	98 df       	rcall	.-208    	; 0x540e <_ZN8SPIClass8transferEh>
    54de:	8d 2f       	mov	r24, r29
    54e0:	96 df       	rcall	.-212    	; 0x540e <_ZN8SPIClass8transferEh>
    54e2:	8c 2f       	mov	r24, r28
    54e4:	94 df       	rcall	.-216    	; 0x540e <_ZN8SPIClass8transferEh>
    54e6:	80 e0       	ldi	r24, 0x00	; 0
    54e8:	92 df       	rcall	.-220    	; 0x540e <_ZN8SPIClass8transferEh>
    54ea:	c8 2f       	mov	r28, r24
    54ec:	99 df       	rcall	.-206    	; 0x5420 <_ZN10W5500Class7resetSSEv>
    54ee:	0e 94 94 17 	call	0x2f28	; 0x2f28 <_ZN8SPIClass14endTransactionEv>
    54f2:	8c 2f       	mov	r24, r28
    54f4:	df 91       	pop	r29
    54f6:	cf 91       	pop	r28
    54f8:	1f 91       	pop	r17
    54fa:	08 95       	ret

000054fc <_ZN10W5500Class4initEh>:
    54fc:	cf 93       	push	r28
    54fe:	df 93       	push	r29
    5500:	60 93 08 0d 	sts	0x0D08, r22	; 0x800d08 <SPI_CS>
    5504:	68 ee       	ldi	r22, 0xE8	; 232
    5506:	73 e0       	ldi	r23, 0x03	; 3
    5508:	80 e0       	ldi	r24, 0x00	; 0
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>
    5510:	3c 9a       	sbi	0x07, 4	; 7
    5512:	0e 94 cc 33 	call	0x6798	; 0x6798 <_ZN8SPIClass5beginEv>
    5516:	60 e0       	ldi	r22, 0x00	; 0
    5518:	80 e0       	ldi	r24, 0x00	; 0
    551a:	90 e0       	ldi	r25, 0x00	; 0
    551c:	d1 df       	rcall	.-94     	; 0x54c0 <_ZN10W5500Class4readEjh>
    551e:	48 2f       	mov	r20, r24
    5520:	40 68       	ori	r20, 0x80	; 128
    5522:	64 e0       	ldi	r22, 0x04	; 4
    5524:	80 e0       	ldi	r24, 0x00	; 0
    5526:	90 e0       	ldi	r25, 0x00	; 0
    5528:	7d df       	rcall	.-262    	; 0x5424 <_ZN10W5500Class5writeEjhh>
    552a:	c0 e0       	ldi	r28, 0x00	; 0
    552c:	dc 2f       	mov	r29, r28
    552e:	d2 95       	swap	r29
    5530:	dd 0f       	add	r29, r29
    5532:	d0 7e       	andi	r29, 0xE0	; 224
    5534:	d4 5f       	subi	r29, 0xF4	; 244
    5536:	42 e0       	ldi	r20, 0x02	; 2
    5538:	6d 2f       	mov	r22, r29
    553a:	8e e1       	ldi	r24, 0x1E	; 30
    553c:	90 e0       	ldi	r25, 0x00	; 0
    553e:	72 df       	rcall	.-284    	; 0x5424 <_ZN10W5500Class5writeEjhh>
    5540:	42 e0       	ldi	r20, 0x02	; 2
    5542:	6d 2f       	mov	r22, r29
    5544:	8f e1       	ldi	r24, 0x1F	; 31
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	6d df       	rcall	.-294    	; 0x5424 <_ZN10W5500Class5writeEjhh>
    554a:	cf 5f       	subi	r28, 0xFF	; 255
    554c:	c8 30       	cpi	r28, 0x08	; 8
    554e:	71 f7       	brne	.-36     	; 0x552c <_ZN10W5500Class4initEh+0x30>
    5550:	df 91       	pop	r29
    5552:	cf 91       	pop	r28
    5554:	08 95       	ret

00005556 <_ZN10W5500Class12readSnTX_FSREh>:
    5556:	1f 93       	push	r17
    5558:	cf 93       	push	r28
    555a:	df 93       	push	r29
    555c:	18 2f       	mov	r17, r24
    555e:	60 e2       	ldi	r22, 0x20	; 32
    5560:	70 e0       	ldi	r23, 0x00	; 0
    5562:	98 dd       	rcall	.-1232   	; 0x5094 <_ZN10W5500Class6readSnEhj>
    5564:	c8 2f       	mov	r28, r24
    5566:	d0 e0       	ldi	r29, 0x00	; 0
    5568:	dc 2f       	mov	r29, r28
    556a:	cc 27       	eor	r28, r28
    556c:	61 e2       	ldi	r22, 0x21	; 33
    556e:	70 e0       	ldi	r23, 0x00	; 0
    5570:	81 2f       	mov	r24, r17
    5572:	90 dd       	rcall	.-1248   	; 0x5094 <_ZN10W5500Class6readSnEhj>
    5574:	9e 01       	movw	r18, r28
    5576:	28 0f       	add	r18, r24
    5578:	31 1d       	adc	r19, r1
    557a:	c9 01       	movw	r24, r18
    557c:	df 91       	pop	r29
    557e:	cf 91       	pop	r28
    5580:	1f 91       	pop	r17
    5582:	08 95       	ret

00005584 <_ZN10W5500Class13getTXFreeSizeEh>:
    5584:	ff 92       	push	r15
    5586:	0f 93       	push	r16
    5588:	1f 93       	push	r17
    558a:	cf 93       	push	r28
    558c:	df 93       	push	r29
    558e:	f6 2e       	mov	r15, r22
    5590:	c0 e0       	ldi	r28, 0x00	; 0
    5592:	d0 e0       	ldi	r29, 0x00	; 0
    5594:	8f 2d       	mov	r24, r15
    5596:	df df       	rcall	.-66     	; 0x5556 <_ZN10W5500Class12readSnTX_FSREh>
    5598:	8c 01       	movw	r16, r24
    559a:	89 2b       	or	r24, r25
    559c:	19 f0       	breq	.+6      	; 0x55a4 <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    559e:	8f 2d       	mov	r24, r15
    55a0:	da df       	rcall	.-76     	; 0x5556 <_ZN10W5500Class12readSnTX_FSREh>
    55a2:	ec 01       	movw	r28, r24
    55a4:	c0 17       	cp	r28, r16
    55a6:	d1 07       	cpc	r29, r17
    55a8:	a9 f7       	brne	.-22     	; 0x5594 <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    55aa:	ce 01       	movw	r24, r28
    55ac:	df 91       	pop	r29
    55ae:	cf 91       	pop	r28
    55b0:	1f 91       	pop	r17
    55b2:	0f 91       	pop	r16
    55b4:	ff 90       	pop	r15
    55b6:	08 95       	ret

000055b8 <_ZN10W5500Class12readSnRX_RSREh>:
    55b8:	1f 93       	push	r17
    55ba:	cf 93       	push	r28
    55bc:	df 93       	push	r29
    55be:	18 2f       	mov	r17, r24
    55c0:	66 e2       	ldi	r22, 0x26	; 38
    55c2:	70 e0       	ldi	r23, 0x00	; 0
    55c4:	67 dd       	rcall	.-1330   	; 0x5094 <_ZN10W5500Class6readSnEhj>
    55c6:	c8 2f       	mov	r28, r24
    55c8:	d0 e0       	ldi	r29, 0x00	; 0
    55ca:	dc 2f       	mov	r29, r28
    55cc:	cc 27       	eor	r28, r28
    55ce:	67 e2       	ldi	r22, 0x27	; 39
    55d0:	70 e0       	ldi	r23, 0x00	; 0
    55d2:	81 2f       	mov	r24, r17
    55d4:	5f dd       	rcall	.-1346   	; 0x5094 <_ZN10W5500Class6readSnEhj>
    55d6:	9e 01       	movw	r18, r28
    55d8:	28 0f       	add	r18, r24
    55da:	31 1d       	adc	r19, r1
    55dc:	c9 01       	movw	r24, r18
    55de:	df 91       	pop	r29
    55e0:	cf 91       	pop	r28
    55e2:	1f 91       	pop	r17
    55e4:	08 95       	ret

000055e6 <_ZN10W5500Class17getRXReceivedSizeEh>:
    55e6:	ff 92       	push	r15
    55e8:	0f 93       	push	r16
    55ea:	1f 93       	push	r17
    55ec:	cf 93       	push	r28
    55ee:	df 93       	push	r29
    55f0:	f6 2e       	mov	r15, r22
    55f2:	c0 e0       	ldi	r28, 0x00	; 0
    55f4:	d0 e0       	ldi	r29, 0x00	; 0
    55f6:	8f 2d       	mov	r24, r15
    55f8:	df df       	rcall	.-66     	; 0x55b8 <_ZN10W5500Class12readSnRX_RSREh>
    55fa:	8c 01       	movw	r16, r24
    55fc:	89 2b       	or	r24, r25
    55fe:	19 f0       	breq	.+6      	; 0x5606 <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    5600:	8f 2d       	mov	r24, r15
    5602:	da df       	rcall	.-76     	; 0x55b8 <_ZN10W5500Class12readSnRX_RSREh>
    5604:	ec 01       	movw	r28, r24
    5606:	c0 17       	cp	r28, r16
    5608:	d1 07       	cpc	r29, r17
    560a:	a9 f7       	brne	.-22     	; 0x55f6 <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    560c:	ce 01       	movw	r24, r28
    560e:	df 91       	pop	r29
    5610:	cf 91       	pop	r28
    5612:	1f 91       	pop	r17
    5614:	0f 91       	pop	r16
    5616:	ff 90       	pop	r15
    5618:	08 95       	ret

0000561a <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    561a:	af 92       	push	r10
    561c:	bf 92       	push	r11
    561e:	df 92       	push	r13
    5620:	ef 92       	push	r14
    5622:	ff 92       	push	r15
    5624:	0f 93       	push	r16
    5626:	1f 93       	push	r17
    5628:	cf 93       	push	r28
    562a:	df 93       	push	r29
    562c:	d6 2e       	mov	r13, r22
    562e:	7a 01       	movw	r14, r20
    5630:	59 01       	movw	r10, r18
    5632:	64 e2       	ldi	r22, 0x24	; 36
    5634:	70 e0       	ldi	r23, 0x00	; 0
    5636:	8d 2d       	mov	r24, r13
    5638:	2d dd       	rcall	.-1446   	; 0x5094 <_ZN10W5500Class6readSnEhj>
    563a:	c8 2f       	mov	r28, r24
    563c:	65 e2       	ldi	r22, 0x25	; 37
    563e:	70 e0       	ldi	r23, 0x00	; 0
    5640:	8d 2d       	mov	r24, r13
    5642:	28 dd       	rcall	.-1456   	; 0x5094 <_ZN10W5500Class6readSnEhj>
    5644:	d0 e0       	ldi	r29, 0x00	; 0
    5646:	dc 2f       	mov	r29, r28
    5648:	cc 27       	eor	r28, r28
    564a:	e8 0e       	add	r14, r24
    564c:	f1 1c       	adc	r15, r1
    564e:	ce 0d       	add	r28, r14
    5650:	df 1d       	adc	r29, r15
    5652:	6d 2d       	mov	r22, r13
    5654:	62 95       	swap	r22
    5656:	66 0f       	add	r22, r22
    5658:	60 7e       	andi	r22, 0xE0	; 224
    565a:	6c 5e       	subi	r22, 0xEC	; 236
    565c:	98 01       	movw	r18, r16
    565e:	a5 01       	movw	r20, r10
    5660:	ce 01       	movw	r24, r28
    5662:	00 df       	rcall	.-512    	; 0x5464 <_ZN10W5500Class5writeEjhPKhj>
    5664:	c0 0f       	add	r28, r16
    5666:	d1 1f       	adc	r29, r17
    5668:	4d 2f       	mov	r20, r29
    566a:	64 e2       	ldi	r22, 0x24	; 36
    566c:	70 e0       	ldi	r23, 0x00	; 0
    566e:	8d 2d       	mov	r24, r13
    5670:	1c dd       	rcall	.-1480   	; 0x50aa <_ZN10W5500Class7writeSnEhjh>
    5672:	4c 2f       	mov	r20, r28
    5674:	65 e2       	ldi	r22, 0x25	; 37
    5676:	70 e0       	ldi	r23, 0x00	; 0
    5678:	8d 2d       	mov	r24, r13
    567a:	df 91       	pop	r29
    567c:	cf 91       	pop	r28
    567e:	1f 91       	pop	r17
    5680:	0f 91       	pop	r16
    5682:	ff 90       	pop	r15
    5684:	ef 90       	pop	r14
    5686:	df 90       	pop	r13
    5688:	bf 90       	pop	r11
    568a:	af 90       	pop	r10
    568c:	0e cd       	rjmp	.-1508   	; 0x50aa <_ZN10W5500Class7writeSnEhjh>

0000568e <_ZN10W5500Class20send_data_processingEhPKhj>:
    568e:	0f 93       	push	r16
    5690:	1f 93       	push	r17
    5692:	89 01       	movw	r16, r18
    5694:	9a 01       	movw	r18, r20
    5696:	40 e0       	ldi	r20, 0x00	; 0
    5698:	50 e0       	ldi	r21, 0x00	; 0
    569a:	bf df       	rcall	.-130    	; 0x561a <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    569c:	1f 91       	pop	r17
    569e:	0f 91       	pop	r16
    56a0:	08 95       	ret

000056a2 <_ZN10W5500Class4readEjhPhj>:
    56a2:	df 92       	push	r13
    56a4:	ef 92       	push	r14
    56a6:	ff 92       	push	r15
    56a8:	0f 93       	push	r16
    56aa:	1f 93       	push	r17
    56ac:	cf 93       	push	r28
    56ae:	df 93       	push	r29
    56b0:	d8 2f       	mov	r29, r24
    56b2:	d9 2e       	mov	r13, r25
    56b4:	c6 2f       	mov	r28, r22
    56b6:	7a 01       	movw	r14, r20
    56b8:	89 01       	movw	r16, r18
    56ba:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <wiznet_SPI_settings>
    56be:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <wiznet_SPI_settings+0x1>
    56c2:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    56c6:	aa de       	rcall	.-684    	; 0x541c <_ZN10W5500Class5setSSEv>
    56c8:	8d 2d       	mov	r24, r13
    56ca:	a1 de       	rcall	.-702    	; 0x540e <_ZN8SPIClass8transferEh>
    56cc:	8d 2f       	mov	r24, r29
    56ce:	9f de       	rcall	.-706    	; 0x540e <_ZN8SPIClass8transferEh>
    56d0:	8c 2f       	mov	r24, r28
    56d2:	9d de       	rcall	.-710    	; 0x540e <_ZN8SPIClass8transferEh>
    56d4:	e7 01       	movw	r28, r14
    56d6:	e0 0e       	add	r14, r16
    56d8:	f1 1e       	adc	r15, r17
    56da:	ce 15       	cp	r28, r14
    56dc:	df 05       	cpc	r29, r15
    56de:	21 f0       	breq	.+8      	; 0x56e8 <_ZN10W5500Class4readEjhPhj+0x46>
    56e0:	80 e0       	ldi	r24, 0x00	; 0
    56e2:	95 de       	rcall	.-726    	; 0x540e <_ZN8SPIClass8transferEh>
    56e4:	89 93       	st	Y+, r24
    56e6:	f9 cf       	rjmp	.-14     	; 0x56da <_ZN10W5500Class4readEjhPhj+0x38>
    56e8:	9b de       	rcall	.-714    	; 0x5420 <_ZN10W5500Class7resetSSEv>
    56ea:	0e 94 94 17 	call	0x2f28	; 0x2f28 <_ZN8SPIClass14endTransactionEv>
    56ee:	c8 01       	movw	r24, r16
    56f0:	df 91       	pop	r29
    56f2:	cf 91       	pop	r28
    56f4:	1f 91       	pop	r17
    56f6:	0f 91       	pop	r16
    56f8:	ff 90       	pop	r15
    56fa:	ef 90       	pop	r14
    56fc:	df 90       	pop	r13
    56fe:	08 95       	ret

00005700 <_ZN10W5500Class9read_dataEhjPVhj>:
    5700:	0f 93       	push	r16
    5702:	1f 93       	push	r17
    5704:	cf 93       	push	r28
    5706:	df 93       	push	r29
    5708:	00 d0       	rcall	.+0      	; 0x570a <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    570a:	cd b7       	in	r28, 0x3d	; 61
    570c:	de b7       	in	r29, 0x3e	; 62
    570e:	5a 83       	std	Y+2, r21	; 0x02
    5710:	49 83       	std	Y+1, r20	; 0x01
    5712:	a9 01       	movw	r20, r18
    5714:	98 01       	movw	r18, r16
    5716:	89 81       	ldd	r24, Y+1	; 0x01
    5718:	9a 81       	ldd	r25, Y+2	; 0x02
    571a:	62 95       	swap	r22
    571c:	66 0f       	add	r22, r22
    571e:	60 7e       	andi	r22, 0xE0	; 224
    5720:	68 5e       	subi	r22, 0xE8	; 232
    5722:	0f 90       	pop	r0
    5724:	0f 90       	pop	r0
    5726:	df 91       	pop	r29
    5728:	cf 91       	pop	r28
    572a:	1f 91       	pop	r17
    572c:	0f 91       	pop	r16
    572e:	b9 cf       	rjmp	.-142    	; 0x56a2 <_ZN10W5500Class4readEjhPhj>

00005730 <_ZN10W5500Class20recv_data_processingEhPhjh>:
    5730:	8f 92       	push	r8
    5732:	9f 92       	push	r9
    5734:	af 92       	push	r10
    5736:	bf 92       	push	r11
    5738:	cf 92       	push	r12
    573a:	df 92       	push	r13
    573c:	ef 92       	push	r14
    573e:	ff 92       	push	r15
    5740:	0f 93       	push	r16
    5742:	1f 93       	push	r17
    5744:	cf 93       	push	r28
    5746:	df 93       	push	r29
    5748:	6c 01       	movw	r12, r24
    574a:	96 2e       	mov	r9, r22
    574c:	5a 01       	movw	r10, r20
    574e:	79 01       	movw	r14, r18
    5750:	80 2e       	mov	r8, r16
    5752:	68 e2       	ldi	r22, 0x28	; 40
    5754:	70 e0       	ldi	r23, 0x00	; 0
    5756:	89 2d       	mov	r24, r9
    5758:	9d dc       	rcall	.-1734   	; 0x5094 <_ZN10W5500Class6readSnEhj>
    575a:	08 2f       	mov	r16, r24
    575c:	69 e2       	ldi	r22, 0x29	; 41
    575e:	70 e0       	ldi	r23, 0x00	; 0
    5760:	89 2d       	mov	r24, r9
    5762:	98 dc       	rcall	.-1744   	; 0x5094 <_ZN10W5500Class6readSnEhj>
    5764:	10 e0       	ldi	r17, 0x00	; 0
    5766:	10 2f       	mov	r17, r16
    5768:	00 27       	eor	r16, r16
    576a:	e8 01       	movw	r28, r16
    576c:	c8 0f       	add	r28, r24
    576e:	d1 1d       	adc	r29, r1
    5770:	87 01       	movw	r16, r14
    5772:	95 01       	movw	r18, r10
    5774:	ae 01       	movw	r20, r28
    5776:	69 2d       	mov	r22, r9
    5778:	c6 01       	movw	r24, r12
    577a:	c2 df       	rcall	.-124    	; 0x5700 <_ZN10W5500Class9read_dataEhjPVhj>
    577c:	81 10       	cpse	r8, r1
    577e:	18 c0       	rjmp	.+48     	; 0x57b0 <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    5780:	0c 0f       	add	r16, r28
    5782:	1d 1f       	adc	r17, r29
    5784:	41 2f       	mov	r20, r17
    5786:	68 e2       	ldi	r22, 0x28	; 40
    5788:	70 e0       	ldi	r23, 0x00	; 0
    578a:	89 2d       	mov	r24, r9
    578c:	8e dc       	rcall	.-1764   	; 0x50aa <_ZN10W5500Class7writeSnEhjh>
    578e:	40 2f       	mov	r20, r16
    5790:	69 e2       	ldi	r22, 0x29	; 41
    5792:	70 e0       	ldi	r23, 0x00	; 0
    5794:	89 2d       	mov	r24, r9
    5796:	df 91       	pop	r29
    5798:	cf 91       	pop	r28
    579a:	1f 91       	pop	r17
    579c:	0f 91       	pop	r16
    579e:	ff 90       	pop	r15
    57a0:	ef 90       	pop	r14
    57a2:	df 90       	pop	r13
    57a4:	cf 90       	pop	r12
    57a6:	bf 90       	pop	r11
    57a8:	af 90       	pop	r10
    57aa:	9f 90       	pop	r9
    57ac:	8f 90       	pop	r8
    57ae:	7d cc       	rjmp	.-1798   	; 0x50aa <_ZN10W5500Class7writeSnEhjh>
    57b0:	df 91       	pop	r29
    57b2:	cf 91       	pop	r28
    57b4:	1f 91       	pop	r17
    57b6:	0f 91       	pop	r16
    57b8:	ff 90       	pop	r15
    57ba:	ef 90       	pop	r14
    57bc:	df 90       	pop	r13
    57be:	cf 90       	pop	r12
    57c0:	bf 90       	pop	r11
    57c2:	af 90       	pop	r10
    57c4:	9f 90       	pop	r9
    57c6:	8f 90       	pop	r8
    57c8:	08 95       	ret

000057ca <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    57ca:	cf 93       	push	r28
    57cc:	c6 2f       	mov	r28, r22
    57ce:	61 e0       	ldi	r22, 0x01	; 1
    57d0:	70 e0       	ldi	r23, 0x00	; 0
    57d2:	8c 2f       	mov	r24, r28
    57d4:	6a dc       	rcall	.-1836   	; 0x50aa <_ZN10W5500Class7writeSnEhjh>
    57d6:	61 e0       	ldi	r22, 0x01	; 1
    57d8:	70 e0       	ldi	r23, 0x00	; 0
    57da:	8c 2f       	mov	r24, r28
    57dc:	5b dc       	rcall	.-1866   	; 0x5094 <_ZN10W5500Class6readSnEhj>
    57de:	81 11       	cpse	r24, r1
    57e0:	fa cf       	rjmp	.-12     	; 0x57d6 <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    57e2:	cf 91       	pop	r28
    57e4:	08 95       	ret

000057e6 <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    57e6:	e9 e0       	ldi	r30, 0x09	; 9
    57e8:	fd e0       	ldi	r31, 0x0D	; 13
    57ea:	80 e5       	ldi	r24, 0x50	; 80
    57ec:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    57ee:	81 e0       	ldi	r24, 0x01	; 1
    57f0:	81 83       	std	Z+1, r24	; 0x01
    57f2:	08 95       	ret

000057f4 <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    57f4:	fc 01       	movw	r30, r24
    57f6:	12 82       	std	Z+2, r1	; 0x02
    57f8:	8f ef       	ldi	r24, 0xFF	; 255
    57fa:	81 83       	std	Z+1, r24	; 0x01
    57fc:	10 82       	st	Z, r1
    57fe:	13 82       	std	Z+3, r1	; 0x03
    5800:	08 95       	ret

00005802 <_ZN5I2CIO8portModeEh>:
    5802:	fc 01       	movw	r30, r24
    5804:	83 81       	ldd	r24, Z+3	; 0x03
    5806:	88 23       	and	r24, r24
    5808:	31 f0       	breq	.+12     	; 0x5816 <_ZN5I2CIO8portModeEh+0x14>
    580a:	61 11       	cpse	r22, r1
    580c:	03 c0       	rjmp	.+6      	; 0x5814 <_ZN5I2CIO8portModeEh+0x12>
    580e:	8f ef       	ldi	r24, 0xFF	; 255
    5810:	81 83       	std	Z+1, r24	; 0x01
    5812:	08 95       	ret
    5814:	11 82       	std	Z+1, r1	; 0x01
    5816:	08 95       	ret

00005818 <_ZN5I2CIO11isAvailableEh>:
    5818:	8f e7       	ldi	r24, 0x7F	; 127
    581a:	9d e0       	ldi	r25, 0x0D	; 13
    581c:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>
    5820:	8f e7       	ldi	r24, 0x7F	; 127
    5822:	9d e0       	ldi	r25, 0x0D	; 13
    5824:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
    5828:	91 e0       	ldi	r25, 0x01	; 1
    582a:	81 11       	cpse	r24, r1
    582c:	90 e0       	ldi	r25, 0x00	; 0
    582e:	89 2f       	mov	r24, r25
    5830:	08 95       	ret

00005832 <_ZN5I2CIO5beginEh>:
    5832:	cf 93       	push	r28
    5834:	df 93       	push	r29
    5836:	ec 01       	movw	r28, r24
    5838:	6a 83       	std	Y+2, r22	; 0x02
    583a:	8f e7       	ldi	r24, 0x7F	; 127
    583c:	9d e0       	ldi	r25, 0x0D	; 13
    583e:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <_ZN7TwoWire5beginEv>
    5842:	6a 81       	ldd	r22, Y+2	; 0x02
    5844:	ce 01       	movw	r24, r28
    5846:	e8 df       	rcall	.-48     	; 0x5818 <_ZN5I2CIO11isAvailableEh>
    5848:	8b 83       	std	Y+3, r24	; 0x03
    584a:	88 23       	and	r24, r24
    584c:	29 f0       	breq	.+10     	; 0x5858 <_ZN5I2CIO5beginEh+0x26>
    584e:	8f e7       	ldi	r24, 0x7F	; 127
    5850:	9d e0       	ldi	r25, 0x0D	; 13
    5852:	0e 94 57 36 	call	0x6cae	; 0x6cae <_ZN7TwoWire4readEv>
    5856:	88 83       	st	Y, r24
    5858:	8b 81       	ldd	r24, Y+3	; 0x03
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	df 91       	pop	r29
    585e:	cf 91       	pop	r28
    5860:	08 95       	ret

00005862 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    5862:	cf 93       	push	r28
    5864:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    5866:	fc 01       	movw	r30, r24
    5868:	23 81       	ldd	r18, Z+3	; 0x03
    586a:	22 23       	and	r18, r18
    586c:	b1 f0       	breq	.+44     	; 0x589a <_ZN5I2CIO5writeEh+0x38>
    586e:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    5870:	81 81       	ldd	r24, Z+1	; 0x01
    5872:	80 95       	com	r24
    5874:	68 23       	and	r22, r24
    5876:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    5878:	62 81       	ldd	r22, Z+2	; 0x02
    587a:	8f e7       	ldi	r24, 0x7F	; 127
    587c:	9d e0       	ldi	r25, 0x0D	; 13
    587e:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    5882:	68 81       	ld	r22, Y
    5884:	8f e7       	ldi	r24, 0x7F	; 127
    5886:	9d e0       	ldi	r25, 0x0D	; 13
    5888:	0e 94 dd 36 	call	0x6dba	; 0x6dba <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    588c:	8f e7       	ldi	r24, 0x7F	; 127
    588e:	9d e0       	ldi	r25, 0x0D	; 13
    5890:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <_ZN7TwoWire15endTransmissionEv>
    5894:	28 2f       	mov	r18, r24
    5896:	30 e0       	ldi	r19, 0x00	; 0
    5898:	02 c0       	rjmp	.+4      	; 0x589e <_ZN5I2CIO5writeEh+0x3c>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    589a:	20 e0       	ldi	r18, 0x00	; 0
    589c:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    589e:	81 e0       	ldi	r24, 0x01	; 1
    58a0:	90 e0       	ldi	r25, 0x00	; 0
    58a2:	23 2b       	or	r18, r19
    58a4:	11 f0       	breq	.+4      	; 0x58aa <_ZN5I2CIO5writeEh+0x48>
    58a6:	80 e0       	ldi	r24, 0x00	; 0
    58a8:	90 e0       	ldi	r25, 0x00	; 0
}
    58aa:	df 91       	pop	r29
    58ac:	cf 91       	pop	r28
    58ae:	08 95       	ret

000058b0 <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    58b0:	08 95       	ret

000058b2 <_ZN3LCD12setBacklightEh>:
    58b2:	08 95       	ret

000058b4 <_ZN3LCD5writeEh>:
    58b4:	dc 01       	movw	r26, r24
    58b6:	ed 91       	ld	r30, X+
    58b8:	fc 91       	ld	r31, X
    58ba:	06 84       	ldd	r0, Z+14	; 0x0e
    58bc:	f7 85       	ldd	r31, Z+15	; 0x0f
    58be:	e0 2d       	mov	r30, r0
    58c0:	41 e0       	ldi	r20, 0x01	; 1
    58c2:	09 95       	icall
    58c4:	81 e0       	ldi	r24, 0x01	; 1
    58c6:	90 e0       	ldi	r25, 0x00	; 0
    58c8:	08 95       	ret

000058ca <_ZN3LCDC1Ev>:
    58ca:	fc 01       	movw	r30, r24
    58cc:	13 82       	std	Z+3, r1	; 0x03
    58ce:	12 82       	std	Z+2, r1	; 0x02
    58d0:	25 ea       	ldi	r18, 0xA5	; 165
    58d2:	39 e0       	ldi	r19, 0x09	; 9
    58d4:	31 83       	std	Z+1, r19	; 0x01
    58d6:	20 83       	st	Z, r18
    58d8:	08 95       	ret

000058da <_ZN3LCD9backlightEv>:
    58da:	dc 01       	movw	r26, r24
    58dc:	ed 91       	ld	r30, X+
    58de:	fc 91       	ld	r31, X
    58e0:	04 84       	ldd	r0, Z+12	; 0x0c
    58e2:	f5 85       	ldd	r31, Z+13	; 0x0d
    58e4:	e0 2d       	mov	r30, r0
    58e6:	6f ef       	ldi	r22, 0xFF	; 255
    58e8:	09 94       	ijmp

000058ea <_ZN3LCD11noBacklightEv>:
    58ea:	dc 01       	movw	r26, r24
    58ec:	ed 91       	ld	r30, X+
    58ee:	fc 91       	ld	r31, X
    58f0:	04 84       	ldd	r0, Z+12	; 0x0c
    58f2:	f5 85       	ldd	r31, Z+13	; 0x0d
    58f4:	e0 2d       	mov	r30, r0
    58f6:	60 e0       	ldi	r22, 0x00	; 0
    58f8:	09 94       	ijmp

000058fa <_ZN3LCD7commandEh>:
    58fa:	dc 01       	movw	r26, r24
    58fc:	ed 91       	ld	r30, X+
    58fe:	fc 91       	ld	r31, X
    5900:	06 84       	ldd	r0, Z+14	; 0x0e
    5902:	f7 85       	ldd	r31, Z+15	; 0x0f
    5904:	e0 2d       	mov	r30, r0
    5906:	40 e0       	ldi	r20, 0x00	; 0
    5908:	09 94       	ijmp

0000590a <_ZN3LCD5clearEv>:
    590a:	61 e0       	ldi	r22, 0x01	; 1
    590c:	f6 df       	rcall	.-20     	; 0x58fa <_ZN3LCD7commandEh>
    590e:	80 ed       	ldi	r24, 0xD0	; 208
    5910:	97 e0       	ldi	r25, 0x07	; 7
    5912:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <delayMicroseconds>

00005916 <_ZN3LCD9setCursorEhh>:
    5916:	cf 93       	push	r28
    5918:	df 93       	push	r29
    591a:	cd b7       	in	r28, 0x3d	; 61
    591c:	de b7       	in	r29, 0x3e	; 62
    591e:	28 97       	sbiw	r28, 0x08	; 8
    5920:	0f b6       	in	r0, 0x3f	; 63
    5922:	f8 94       	cli
    5924:	de bf       	out	0x3e, r29	; 62
    5926:	0f be       	out	0x3f, r0	; 63
    5928:	cd bf       	out	0x3d, r28	; 61
    592a:	fc 01       	movw	r30, r24
    592c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_ZN14EthernetClient8_srcportE+0x8>
    5930:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_ZN14EthernetClient8_srcportE+0x9>
    5934:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <_ZN14EthernetClient8_srcportE+0xa>
    5938:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <_ZN14EthernetClient8_srcportE+0xb>
    593c:	8d 83       	std	Y+5, r24	; 0x05
    593e:	9e 83       	std	Y+6, r25	; 0x06
    5940:	af 83       	std	Y+7, r26	; 0x07
    5942:	b8 87       	std	Y+8, r27	; 0x08
    5944:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_ZN14EthernetClient8_srcportE+0xc>
    5948:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <_ZN14EthernetClient8_srcportE+0xd>
    594c:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <_ZN14EthernetClient8_srcportE+0xe>
    5950:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <_ZN14EthernetClient8_srcportE+0xf>
    5954:	89 83       	std	Y+1, r24	; 0x01
    5956:	9a 83       	std	Y+2, r25	; 0x02
    5958:	ab 83       	std	Y+3, r26	; 0x03
    595a:	bc 83       	std	Y+4, r27	; 0x04
    595c:	87 81       	ldd	r24, Z+7	; 0x07
    595e:	48 17       	cp	r20, r24
    5960:	10 f0       	brcs	.+4      	; 0x5966 <_ZN3LCD9setCursorEhh+0x50>
    5962:	4f ef       	ldi	r20, 0xFF	; 255
    5964:	48 0f       	add	r20, r24
    5966:	90 85       	ldd	r25, Z+8	; 0x08
    5968:	50 e0       	ldi	r21, 0x00	; 0
    596a:	de 01       	movw	r26, r28
    596c:	a4 0f       	add	r26, r20
    596e:	b5 1f       	adc	r27, r21
    5970:	90 31       	cpi	r25, 0x10	; 16
    5972:	29 f4       	brne	.+10     	; 0x597e <_ZN3LCD9setCursorEhh+0x68>
    5974:	84 30       	cpi	r24, 0x04	; 4
    5976:	19 f4       	brne	.+6      	; 0x597e <_ZN3LCD9setCursorEhh+0x68>
    5978:	11 96       	adiw	r26, 0x01	; 1
    597a:	9c 91       	ld	r25, X
    597c:	02 c0       	rjmp	.+4      	; 0x5982 <_ZN3LCD9setCursorEhh+0x6c>
    597e:	15 96       	adiw	r26, 0x05	; 5
    5980:	9c 91       	ld	r25, X
    5982:	69 0f       	add	r22, r25
    5984:	60 68       	ori	r22, 0x80	; 128
    5986:	cf 01       	movw	r24, r30
    5988:	28 96       	adiw	r28, 0x08	; 8
    598a:	0f b6       	in	r0, 0x3f	; 63
    598c:	f8 94       	cli
    598e:	de bf       	out	0x3e, r29	; 62
    5990:	0f be       	out	0x3f, r0	; 63
    5992:	cd bf       	out	0x3d, r28	; 61
    5994:	df 91       	pop	r29
    5996:	cf 91       	pop	r28
    5998:	b0 cf       	rjmp	.-160    	; 0x58fa <_ZN3LCD7commandEh>

0000599a <_ZN3LCD9noDisplayEv>:
    599a:	fc 01       	movw	r30, r24
    599c:	65 81       	ldd	r22, Z+5	; 0x05
    599e:	6b 7f       	andi	r22, 0xFB	; 251
    59a0:	65 83       	std	Z+5, r22	; 0x05
    59a2:	68 60       	ori	r22, 0x08	; 8
    59a4:	aa cf       	rjmp	.-172    	; 0x58fa <_ZN3LCD7commandEh>

000059a6 <_ZN3LCD7displayEv>:
    59a6:	fc 01       	movw	r30, r24
    59a8:	65 81       	ldd	r22, Z+5	; 0x05
    59aa:	26 2f       	mov	r18, r22
    59ac:	24 60       	ori	r18, 0x04	; 4
    59ae:	25 83       	std	Z+5, r18	; 0x05
    59b0:	6c 60       	ori	r22, 0x0C	; 12
    59b2:	a3 cf       	rjmp	.-186    	; 0x58fa <_ZN3LCD7commandEh>

000059b4 <_ZN3LCD5beginEhhh>:
    59b4:	cf 93       	push	r28
    59b6:	df 93       	push	r29
    59b8:	ec 01       	movw	r28, r24
    59ba:	42 30       	cpi	r20, 0x02	; 2
    59bc:	18 f0       	brcs	.+6      	; 0x59c4 <_ZN3LCD5beginEhhh+0x10>
    59be:	8c 81       	ldd	r24, Y+4	; 0x04
    59c0:	88 60       	ori	r24, 0x08	; 8
    59c2:	8c 83       	std	Y+4, r24	; 0x04
    59c4:	4f 83       	std	Y+7, r20	; 0x07
    59c6:	68 87       	std	Y+8, r22	; 0x08
    59c8:	22 23       	and	r18, r18
    59ca:	29 f0       	breq	.+10     	; 0x59d6 <_ZN3LCD5beginEhhh+0x22>
    59cc:	41 30       	cpi	r20, 0x01	; 1
    59ce:	19 f4       	brne	.+6      	; 0x59d6 <_ZN3LCD5beginEhhh+0x22>
    59d0:	8c 81       	ldd	r24, Y+4	; 0x04
    59d2:	84 60       	ori	r24, 0x04	; 4
    59d4:	8c 83       	std	Y+4, r24	; 0x04
    59d6:	64 e6       	ldi	r22, 0x64	; 100
    59d8:	70 e0       	ldi	r23, 0x00	; 0
    59da:	80 e0       	ldi	r24, 0x00	; 0
    59dc:	90 e0       	ldi	r25, 0x00	; 0
    59de:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <delay>
    59e2:	6c 81       	ldd	r22, Y+4	; 0x04
    59e4:	64 fd       	sbrc	r22, 4
    59e6:	31 c0       	rjmp	.+98     	; 0x5a4a <_ZN3LCD5beginEhhh+0x96>
    59e8:	e8 81       	ld	r30, Y
    59ea:	f9 81       	ldd	r31, Y+1	; 0x01
    59ec:	06 84       	ldd	r0, Z+14	; 0x0e
    59ee:	f7 85       	ldd	r31, Z+15	; 0x0f
    59f0:	e0 2d       	mov	r30, r0
    59f2:	42 e0       	ldi	r20, 0x02	; 2
    59f4:	63 e0       	ldi	r22, 0x03	; 3
    59f6:	ce 01       	movw	r24, r28
    59f8:	09 95       	icall
    59fa:	84 e9       	ldi	r24, 0x94	; 148
    59fc:	91 e1       	ldi	r25, 0x11	; 17
    59fe:	0e 94 b1 3b 	call	0x7762	; 0x7762 <delayMicroseconds>
    5a02:	e8 81       	ld	r30, Y
    5a04:	f9 81       	ldd	r31, Y+1	; 0x01
    5a06:	06 84       	ldd	r0, Z+14	; 0x0e
    5a08:	f7 85       	ldd	r31, Z+15	; 0x0f
    5a0a:	e0 2d       	mov	r30, r0
    5a0c:	42 e0       	ldi	r20, 0x02	; 2
    5a0e:	63 e0       	ldi	r22, 0x03	; 3
    5a10:	ce 01       	movw	r24, r28
    5a12:	09 95       	icall
    5a14:	86 e9       	ldi	r24, 0x96	; 150
    5a16:	90 e0       	ldi	r25, 0x00	; 0
    5a18:	0e 94 b1 3b 	call	0x7762	; 0x7762 <delayMicroseconds>
    5a1c:	e8 81       	ld	r30, Y
    5a1e:	f9 81       	ldd	r31, Y+1	; 0x01
    5a20:	06 84       	ldd	r0, Z+14	; 0x0e
    5a22:	f7 85       	ldd	r31, Z+15	; 0x0f
    5a24:	e0 2d       	mov	r30, r0
    5a26:	42 e0       	ldi	r20, 0x02	; 2
    5a28:	63 e0       	ldi	r22, 0x03	; 3
    5a2a:	ce 01       	movw	r24, r28
    5a2c:	09 95       	icall
    5a2e:	86 e9       	ldi	r24, 0x96	; 150
    5a30:	90 e0       	ldi	r25, 0x00	; 0
    5a32:	0e 94 b1 3b 	call	0x7762	; 0x7762 <delayMicroseconds>
    5a36:	e8 81       	ld	r30, Y
    5a38:	f9 81       	ldd	r31, Y+1	; 0x01
    5a3a:	06 84       	ldd	r0, Z+14	; 0x0e
    5a3c:	f7 85       	ldd	r31, Z+15	; 0x0f
    5a3e:	e0 2d       	mov	r30, r0
    5a40:	42 e0       	ldi	r20, 0x02	; 2
    5a42:	62 e0       	ldi	r22, 0x02	; 2
    5a44:	ce 01       	movw	r24, r28
    5a46:	09 95       	icall
    5a48:	13 c0       	rjmp	.+38     	; 0x5a70 <_ZN3LCD5beginEhhh+0xbc>
    5a4a:	60 62       	ori	r22, 0x20	; 32
    5a4c:	ce 01       	movw	r24, r28
    5a4e:	55 df       	rcall	.-342    	; 0x58fa <_ZN3LCD7commandEh>
    5a50:	84 e9       	ldi	r24, 0x94	; 148
    5a52:	91 e1       	ldi	r25, 0x11	; 17
    5a54:	0e 94 b1 3b 	call	0x7762	; 0x7762 <delayMicroseconds>
    5a58:	6c 81       	ldd	r22, Y+4	; 0x04
    5a5a:	60 62       	ori	r22, 0x20	; 32
    5a5c:	ce 01       	movw	r24, r28
    5a5e:	4d df       	rcall	.-358    	; 0x58fa <_ZN3LCD7commandEh>
    5a60:	86 e9       	ldi	r24, 0x96	; 150
    5a62:	90 e0       	ldi	r25, 0x00	; 0
    5a64:	0e 94 b1 3b 	call	0x7762	; 0x7762 <delayMicroseconds>
    5a68:	6c 81       	ldd	r22, Y+4	; 0x04
    5a6a:	60 62       	ori	r22, 0x20	; 32
    5a6c:	ce 01       	movw	r24, r28
    5a6e:	45 df       	rcall	.-374    	; 0x58fa <_ZN3LCD7commandEh>
    5a70:	86 e9       	ldi	r24, 0x96	; 150
    5a72:	90 e0       	ldi	r25, 0x00	; 0
    5a74:	0e 94 b1 3b 	call	0x7762	; 0x7762 <delayMicroseconds>
    5a78:	6c 81       	ldd	r22, Y+4	; 0x04
    5a7a:	60 62       	ori	r22, 0x20	; 32
    5a7c:	ce 01       	movw	r24, r28
    5a7e:	3d df       	rcall	.-390    	; 0x58fa <_ZN3LCD7commandEh>
    5a80:	8c e3       	ldi	r24, 0x3C	; 60
    5a82:	90 e0       	ldi	r25, 0x00	; 0
    5a84:	0e 94 b1 3b 	call	0x7762	; 0x7762 <delayMicroseconds>
    5a88:	84 e0       	ldi	r24, 0x04	; 4
    5a8a:	8d 83       	std	Y+5, r24	; 0x05
    5a8c:	ce 01       	movw	r24, r28
    5a8e:	8b df       	rcall	.-234    	; 0x59a6 <_ZN3LCD7displayEv>
    5a90:	ce 01       	movw	r24, r28
    5a92:	3b df       	rcall	.-394    	; 0x590a <_ZN3LCD5clearEv>
    5a94:	82 e0       	ldi	r24, 0x02	; 2
    5a96:	8e 83       	std	Y+6, r24	; 0x06
    5a98:	66 e0       	ldi	r22, 0x06	; 6
    5a9a:	ce 01       	movw	r24, r28
    5a9c:	2e df       	rcall	.-420    	; 0x58fa <_ZN3LCD7commandEh>
    5a9e:	ce 01       	movw	r24, r28
    5aa0:	df 91       	pop	r29
    5aa2:	cf 91       	pop	r28
    5aa4:	1a cf       	rjmp	.-460    	; 0x58da <_ZN3LCD9backlightEv>

00005aa6 <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    5aa6:	ef 92       	push	r14
    5aa8:	ff 92       	push	r15
    5aaa:	0f 93       	push	r16
    5aac:	1f 93       	push	r17
    5aae:	cf 93       	push	r28
    5ab0:	df 93       	push	r29
    5ab2:	8c 01       	movw	r16, r24
    5ab4:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    5ab6:	67 70       	andi	r22, 0x07	; 7
    5ab8:	88 e0       	ldi	r24, 0x08	; 8
    5aba:	68 9f       	mul	r22, r24
    5abc:	b0 01       	movw	r22, r0
    5abe:	11 24       	eor	r1, r1
    5ac0:	60 64       	ori	r22, 0x40	; 64
    5ac2:	c8 01       	movw	r24, r16
    5ac4:	1a df       	rcall	.-460    	; 0x58fa <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    5ac6:	8e e1       	ldi	r24, 0x1E	; 30
    5ac8:	90 e0       	ldi	r25, 0x00	; 0
    5aca:	0e 94 b1 3b 	call	0x7762	; 0x7762 <delayMicroseconds>
    5ace:	e7 01       	movw	r28, r14
    5ad0:	a8 e0       	ldi	r26, 0x08	; 8
    5ad2:	ea 0e       	add	r14, r26
    5ad4:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    5ad6:	69 91       	ld	r22, Y+
    5ad8:	d8 01       	movw	r26, r16
    5ada:	ed 91       	ld	r30, X+
    5adc:	fc 91       	ld	r31, X
    5ade:	01 90       	ld	r0, Z+
    5ae0:	f0 81       	ld	r31, Z
    5ae2:	e0 2d       	mov	r30, r0
    5ae4:	c8 01       	movw	r24, r16
    5ae6:	09 95       	icall
      delayMicroseconds(40);
    5ae8:	88 e2       	ldi	r24, 0x28	; 40
    5aea:	90 e0       	ldi	r25, 0x00	; 0
    5aec:	0e 94 b1 3b 	call	0x7762	; 0x7762 <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    5af0:	ce 15       	cp	r28, r14
    5af2:	df 05       	cpc	r29, r15
    5af4:	81 f7       	brne	.-32     	; 0x5ad6 <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    5af6:	df 91       	pop	r29
    5af8:	cf 91       	pop	r28
    5afa:	1f 91       	pop	r17
    5afc:	0f 91       	pop	r16
    5afe:	ff 90       	pop	r15
    5b00:	ef 90       	pop	r14
    5b02:	08 95       	ret

00005b04 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    5b04:	21 e0       	ldi	r18, 0x01	; 1
    5b06:	01 c0       	rjmp	.+2      	; 0x5b0a <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    5b08:	22 0f       	add	r18, r18
    5b0a:	6a 95       	dec	r22
    5b0c:	ea f7       	brpl	.-6      	; 0x5b08 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    5b0e:	dc 01       	movw	r26, r24
    5b10:	1b 96       	adiw	r26, 0x0b	; 11
    5b12:	2c 93       	st	X, r18
    5b14:	1b 97       	sbiw	r26, 0x0b	; 11
    5b16:	19 96       	adiw	r26, 0x09	; 9
    5b18:	4c 93       	st	X, r20
    5b1a:	19 97       	sbiw	r26, 0x09	; 9
    5b1c:	ed 91       	ld	r30, X+
    5b1e:	fc 91       	ld	r31, X
    5b20:	04 84       	ldd	r0, Z+12	; 0x0c
    5b22:	f5 85       	ldd	r31, Z+13	; 0x0d
    5b24:	e0 2d       	mov	r30, r0
    5b26:	60 e0       	ldi	r22, 0x00	; 0
    5b28:	09 94       	ijmp

00005b2a <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    5b2a:	fc 01       	movw	r30, r24
    5b2c:	83 85       	ldd	r24, Z+11	; 0x0b
    5b2e:	88 23       	and	r24, r24
    5b30:	89 f0       	breq	.+34     	; 0x5b54 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    5b32:	91 85       	ldd	r25, Z+9	; 0x09
    5b34:	91 11       	cpse	r25, r1
    5b36:	03 c0       	rjmp	.+6      	; 0x5b3e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    5b38:	61 11       	cpse	r22, r1
    5b3a:	05 c0       	rjmp	.+10     	; 0x5b46 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    5b3c:	06 c0       	rjmp	.+12     	; 0x5b4a <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    5b3e:	91 30       	cpi	r25, 0x01	; 1
    5b40:	21 f4       	brne	.+8      	; 0x5b4a <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    5b42:	61 11       	cpse	r22, r1
    5b44:	02 c0       	rjmp	.+4      	; 0x5b4a <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    5b46:	84 87       	std	Z+12, r24	; 0x0c
    5b48:	01 c0       	rjmp	.+2      	; 0x5b4c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    5b4a:	14 86       	std	Z+12, r1	; 0x0c
    5b4c:	64 85       	ldd	r22, Z+12	; 0x0c
    5b4e:	cf 01       	movw	r24, r30
    5b50:	0d 96       	adiw	r24, 0x0d	; 13
    5b52:	87 ce       	rjmp	.-754    	; 0x5862 <_ZN5I2CIO5writeEh>
    5b54:	08 95       	ret

00005b56 <_ZN17LiquidCrystal_I2C4initEv>:
    5b56:	0f 93       	push	r16
    5b58:	1f 93       	push	r17
    5b5a:	cf 93       	push	r28
    5b5c:	df 93       	push	r29
    5b5e:	8c 01       	movw	r16, r24
    5b60:	ec 01       	movw	r28, r24
    5b62:	2d 96       	adiw	r28, 0x0d	; 13
    5b64:	fc 01       	movw	r30, r24
    5b66:	62 85       	ldd	r22, Z+10	; 0x0a
    5b68:	ce 01       	movw	r24, r28
    5b6a:	63 de       	rcall	.-826    	; 0x5832 <_ZN5I2CIO5beginEh>
    5b6c:	01 97       	sbiw	r24, 0x01	; 1
    5b6e:	59 f4       	brne	.+22     	; 0x5b86 <_ZN17LiquidCrystal_I2C4initEv+0x30>
    5b70:	61 e0       	ldi	r22, 0x01	; 1
    5b72:	ce 01       	movw	r24, r28
    5b74:	46 de       	rcall	.-884    	; 0x5802 <_ZN5I2CIO8portModeEh>
    5b76:	f8 01       	movw	r30, r16
    5b78:	14 82       	std	Z+4, r1	; 0x04
    5b7a:	60 e0       	ldi	r22, 0x00	; 0
    5b7c:	ce 01       	movw	r24, r28
    5b7e:	71 de       	rcall	.-798    	; 0x5862 <_ZN5I2CIO5writeEh>
    5b80:	81 e0       	ldi	r24, 0x01	; 1
    5b82:	90 e0       	ldi	r25, 0x00	; 0
    5b84:	02 c0       	rjmp	.+4      	; 0x5b8a <_ZN17LiquidCrystal_I2C4initEv+0x34>
    5b86:	80 e0       	ldi	r24, 0x00	; 0
    5b88:	90 e0       	ldi	r25, 0x00	; 0
    5b8a:	df 91       	pop	r29
    5b8c:	cf 91       	pop	r28
    5b8e:	1f 91       	pop	r17
    5b90:	0f 91       	pop	r16
    5b92:	08 95       	ret

00005b94 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    5b94:	8f 92       	push	r8
    5b96:	af 92       	push	r10
    5b98:	cf 92       	push	r12
    5b9a:	ef 92       	push	r14
    5b9c:	0f 93       	push	r16
    5b9e:	cf 93       	push	r28
    5ba0:	df 93       	push	r29
    5ba2:	cd b7       	in	r28, 0x3d	; 61
    5ba4:	de b7       	in	r29, 0x3e	; 62
    5ba6:	fc 01       	movw	r30, r24
    5ba8:	62 87       	std	Z+10, r22	; 0x0a
    5baa:	13 86       	std	Z+11, r1	; 0x0b
    5bac:	14 86       	std	Z+12, r1	; 0x0c
    5bae:	11 86       	std	Z+9, r1	; 0x09
    5bb0:	81 e0       	ldi	r24, 0x01	; 1
    5bb2:	98 2f       	mov	r25, r24
    5bb4:	01 c0       	rjmp	.+2      	; 0x5bb8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    5bb6:	99 0f       	add	r25, r25
    5bb8:	4a 95       	dec	r20
    5bba:	ea f7       	brpl	.-6      	; 0x5bb6 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    5bbc:	91 8b       	std	Z+17, r25	; 0x11
    5bbe:	98 2f       	mov	r25, r24
    5bc0:	01 c0       	rjmp	.+2      	; 0x5bc4 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    5bc2:	99 0f       	add	r25, r25
    5bc4:	2a 95       	dec	r18
    5bc6:	ea f7       	brpl	.-6      	; 0x5bc2 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    5bc8:	92 8b       	std	Z+18, r25	; 0x12
    5bca:	98 2f       	mov	r25, r24
    5bcc:	01 c0       	rjmp	.+2      	; 0x5bd0 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    5bce:	99 0f       	add	r25, r25
    5bd0:	0a 95       	dec	r16
    5bd2:	ea f7       	brpl	.-6      	; 0x5bce <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    5bd4:	93 8b       	std	Z+19, r25	; 0x13
    5bd6:	98 2f       	mov	r25, r24
    5bd8:	01 c0       	rjmp	.+2      	; 0x5bdc <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    5bda:	99 0f       	add	r25, r25
    5bdc:	ea 94       	dec	r14
    5bde:	ea f7       	brpl	.-6      	; 0x5bda <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    5be0:	94 8b       	std	Z+20, r25	; 0x14
    5be2:	98 2f       	mov	r25, r24
    5be4:	01 c0       	rjmp	.+2      	; 0x5be8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    5be6:	99 0f       	add	r25, r25
    5be8:	ca 94       	dec	r12
    5bea:	ea f7       	brpl	.-6      	; 0x5be6 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    5bec:	95 8b       	std	Z+21, r25	; 0x15
    5bee:	98 2f       	mov	r25, r24
    5bf0:	01 c0       	rjmp	.+2      	; 0x5bf4 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    5bf2:	99 0f       	add	r25, r25
    5bf4:	aa 94       	dec	r10
    5bf6:	ea f7       	brpl	.-6      	; 0x5bf2 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    5bf8:	96 8b       	std	Z+22, r25	; 0x16
    5bfa:	01 c0       	rjmp	.+2      	; 0x5bfe <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    5bfc:	88 0f       	add	r24, r24
    5bfe:	8a 94       	dec	r8
    5c00:	ea f7       	brpl	.-6      	; 0x5bfc <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    5c02:	87 8b       	std	Z+23, r24	; 0x17
    5c04:	df 91       	pop	r29
    5c06:	cf 91       	pop	r28
    5c08:	0f 91       	pop	r16
    5c0a:	ef 90       	pop	r14
    5c0c:	cf 90       	pop	r12
    5c0e:	af 90       	pop	r10
    5c10:	8f 90       	pop	r8
    5c12:	08 95       	ret

00005c14 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    5c14:	6f 92       	push	r6
    5c16:	7f 92       	push	r7
    5c18:	8f 92       	push	r8
    5c1a:	9f 92       	push	r9
    5c1c:	af 92       	push	r10
    5c1e:	bf 92       	push	r11
    5c20:	cf 92       	push	r12
    5c22:	df 92       	push	r13
    5c24:	ef 92       	push	r14
    5c26:	ff 92       	push	r15
    5c28:	0f 93       	push	r16
    5c2a:	1f 93       	push	r17
    5c2c:	cf 93       	push	r28
    5c2e:	df 93       	push	r29
    5c30:	cd b7       	in	r28, 0x3d	; 61
    5c32:	de b7       	in	r29, 0x3e	; 62
    5c34:	3c 01       	movw	r6, r24
    5c36:	d6 2e       	mov	r13, r22
    5c38:	b4 2e       	mov	r11, r20
    5c3a:	92 2e       	mov	r9, r18
    5c3c:	19 89       	ldd	r17, Y+17	; 0x11
    5c3e:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    5c40:	44 de       	rcall	.-888    	; 0x58ca <_ZN3LCDC1Ev>
    5c42:	89 eb       	ldi	r24, 0xB9	; 185
    5c44:	99 e0       	ldi	r25, 0x09	; 9
    5c46:	f3 01       	movw	r30, r6
    5c48:	91 83       	std	Z+1, r25	; 0x01
    5c4a:	80 83       	st	Z, r24
    5c4c:	c3 01       	movw	r24, r6
    5c4e:	0d 96       	adiw	r24, 0x0d	; 13
    5c50:	d1 dd       	rcall	.-1118   	; 0x57f4 <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    5c52:	29 2d       	mov	r18, r9
    5c54:	4b 2d       	mov	r20, r11
    5c56:	6d 2d       	mov	r22, r13
    5c58:	c3 01       	movw	r24, r6
    5c5a:	9c df       	rcall	.-200    	; 0x5b94 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    5c5c:	4f 2d       	mov	r20, r15
    5c5e:	61 2f       	mov	r22, r17
    5c60:	c3 01       	movw	r24, r6
}
    5c62:	df 91       	pop	r29
    5c64:	cf 91       	pop	r28
    5c66:	1f 91       	pop	r17
    5c68:	0f 91       	pop	r16
    5c6a:	ff 90       	pop	r15
    5c6c:	ef 90       	pop	r14
    5c6e:	df 90       	pop	r13
    5c70:	cf 90       	pop	r12
    5c72:	bf 90       	pop	r11
    5c74:	af 90       	pop	r10
    5c76:	9f 90       	pop	r9
    5c78:	8f 90       	pop	r8
    5c7a:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    5c7c:	6f 90       	pop	r6
    5c7e:	42 cf       	rjmp	.-380    	; 0x5b04 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

00005c80 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    5c80:	ef 92       	push	r14
    5c82:	ff 92       	push	r15
    5c84:	0f 93       	push	r16
    5c86:	1f 93       	push	r17
    5c88:	cf 93       	push	r28
    5c8a:	8c 01       	movw	r16, r24
    5c8c:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    5c8e:	7c 01       	movw	r14, r24
    5c90:	8d e0       	ldi	r24, 0x0D	; 13
    5c92:	e8 0e       	add	r14, r24
    5c94:	f1 1c       	adc	r15, r1
    5c96:	f8 01       	movw	r30, r16
    5c98:	61 89       	ldd	r22, Z+17	; 0x11
    5c9a:	6c 2b       	or	r22, r28
    5c9c:	c7 01       	movw	r24, r14
    5c9e:	e1 dd       	rcall	.-1086   	; 0x5862 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    5ca0:	f8 01       	movw	r30, r16
    5ca2:	61 89       	ldd	r22, Z+17	; 0x11
    5ca4:	60 95       	com	r22
    5ca6:	6c 23       	and	r22, r28
    5ca8:	c7 01       	movw	r24, r14
    5caa:	cf 91       	pop	r28
    5cac:	1f 91       	pop	r17
    5cae:	0f 91       	pop	r16
    5cb0:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    5cb2:	ef 90       	pop	r14
    5cb4:	d6 cd       	rjmp	.-1108   	; 0x5862 <_ZN5I2CIO5writeEh>

00005cb6 <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    5cb6:	fc 01       	movw	r30, r24
    5cb8:	96 2f       	mov	r25, r22
    5cba:	df 01       	movw	r26, r30
    5cbc:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    5cbe:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    5cc0:	90 ff       	sbrs	r25, 0
    5cc2:	04 c0       	rjmp	.+8      	; 0x5ccc <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    5cc4:	54 96       	adiw	r26, 0x14	; 20
    5cc6:	2c 91       	ld	r18, X
    5cc8:	54 97       	sbiw	r26, 0x14	; 20
    5cca:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    5ccc:	96 95       	lsr	r25
    5cce:	81 50       	subi	r24, 0x01	; 1
    5cd0:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    5cd2:	81 11       	cpse	r24, r1
    5cd4:	f5 cf       	rjmp	.-22     	; 0x5cc0 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    5cd6:	41 30       	cpi	r20, 0x01	; 1
    5cd8:	09 f4       	brne	.+2      	; 0x5cdc <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    5cda:	43 89       	ldd	r20, Z+19	; 0x13
    5cdc:	94 85       	ldd	r25, Z+12	; 0x0c
    5cde:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    5ce0:	64 2b       	or	r22, r20
    5ce2:	cf 01       	movw	r24, r30
    5ce4:	cd cf       	rjmp	.-102    	; 0x5c80 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00005ce6 <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    5ce6:	0f 93       	push	r16
    5ce8:	1f 93       	push	r17
    5cea:	cf 93       	push	r28
    5cec:	df 93       	push	r29
    5cee:	06 2f       	mov	r16, r22
    5cf0:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    5cf2:	42 30       	cpi	r20, 0x02	; 2
    5cf4:	19 f4       	brne	.+6      	; 0x5cfc <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    5cf6:	40 e0       	ldi	r20, 0x00	; 0
    5cf8:	60 2f       	mov	r22, r16
    5cfa:	0d c0       	rjmp	.+26     	; 0x5d16 <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    5cfc:	14 2f       	mov	r17, r20
    5cfe:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    5d00:	70 e0       	ldi	r23, 0x00	; 0
    5d02:	84 e0       	ldi	r24, 0x04	; 4
    5d04:	75 95       	asr	r23
    5d06:	67 95       	ror	r22
    5d08:	8a 95       	dec	r24
    5d0a:	e1 f7       	brne	.-8      	; 0x5d04 <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    5d0c:	ce 01       	movw	r24, r28
    5d0e:	d3 df       	rcall	.-90     	; 0x5cb6 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    5d10:	41 2f       	mov	r20, r17
    5d12:	60 2f       	mov	r22, r16
    5d14:	ce 01       	movw	r24, r28
   }
}
    5d16:	df 91       	pop	r29
    5d18:	cf 91       	pop	r28
    5d1a:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    5d1c:	0f 91       	pop	r16
    5d1e:	cb cf       	rjmp	.-106    	; 0x5cb6 <_ZN17LiquidCrystal_I2C10write4bitsEhh>

00005d20 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    5d20:	ff 92       	push	r15
    5d22:	0f 93       	push	r16
    5d24:	1f 93       	push	r17
    5d26:	cf 93       	push	r28
    5d28:	df 93       	push	r29
    5d2a:	ec 01       	movw	r28, r24
    5d2c:	16 2f       	mov	r17, r22
    5d2e:	04 2f       	mov	r16, r20
    5d30:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    5d32:	11 df       	rcall	.-478    	; 0x5b56 <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    5d34:	2f 2d       	mov	r18, r15
    5d36:	40 2f       	mov	r20, r16
    5d38:	61 2f       	mov	r22, r17
    5d3a:	ce 01       	movw	r24, r28
}
    5d3c:	df 91       	pop	r29
    5d3e:	cf 91       	pop	r28
    5d40:	1f 91       	pop	r17
    5d42:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    5d44:	ff 90       	pop	r15
    5d46:	36 ce       	rjmp	.-916    	; 0x59b4 <_ZN3LCD5beginEhhh>

00005d48 <_ZN11Diagnostics15_printErrorCodeEv>:
  Serial.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
  Serial.print(F("If this does not help resolve/clarify this issue, "));
  Serial.println(F("please raise an issue at http://www.github.com/Marzogh/SPIMemory/issues with the details of what your were doing when this error occurred"));
    5d48:	cf 93       	push	r28
    5d4a:	df 93       	push	r29
    5d4c:	ec 01       	movw	r28, r24
    5d4e:	69 e2       	ldi	r22, 0x29	; 41
    5d50:	72 e0       	ldi	r23, 0x02	; 2
    5d52:	85 ed       	ldi	r24, 0xD5	; 213
    5d54:	9d e0       	ldi	r25, 0x0D	; 13
    5d56:	0e 94 17 3a 	call	0x742e	; 0x742e <_ZN5Print5printEPK19__FlashStringHelper>
    5d5a:	88 81       	ld	r24, Y
    5d5c:	80 31       	cpi	r24, 0x10	; 16
    5d5e:	30 f4       	brcc	.+12     	; 0x5d6c <_ZN11Diagnostics15_printErrorCodeEv+0x24>
    5d60:	67 e2       	ldi	r22, 0x27	; 39
    5d62:	72 e0       	ldi	r23, 0x02	; 2
    5d64:	85 ed       	ldi	r24, 0xD5	; 213
    5d66:	9d e0       	ldi	r25, 0x0D	; 13
    5d68:	0e 94 17 3a 	call	0x742e	; 0x742e <_ZN5Print5printEPK19__FlashStringHelper>
    5d6c:	40 e1       	ldi	r20, 0x10	; 16
    5d6e:	50 e0       	ldi	r21, 0x00	; 0
    5d70:	68 81       	ld	r22, Y
    5d72:	85 ed       	ldi	r24, 0xD5	; 213
    5d74:	9d e0       	ldi	r25, 0x0D	; 13
    5d76:	df 91       	pop	r29
    5d78:	cf 91       	pop	r28
    5d7a:	0c 94 dd 3a 	jmp	0x75ba	; 0x75ba <_ZN5Print7printlnEhi>

00005d7e <_ZN11Diagnostics12troubleshootEhb>:
}
//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
  bool _printoverride;
  errorcode = _code;
    5d7e:	fc 01       	movw	r30, r24
    5d80:	60 83       	st	Z, r22
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
#endif
  if (_printoverride) {
    5d82:	41 11       	cpse	r20, r1
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
    5d84:	e1 cf       	rjmp	.-62     	; 0x5d48 <_ZN11Diagnostics15_printErrorCodeEv>
    5d86:	08 95       	ret

00005d88 <_ZN8SPIFlashC1Eh>:
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros() - _spifuncruntime;
  #endif
  return true;

}
    5d88:	cf 93       	push	r28
    5d8a:	df 93       	push	r29
    5d8c:	ec 01       	movw	r28, r24
    5d8e:	80 e5       	ldi	r24, 0x50	; 80
    5d90:	88 83       	st	Y, r24
    5d92:	19 82       	std	Y+1, r1	; 0x01
    5d94:	1a 82       	std	Y+2, r1	; 0x02
    5d96:	8f ef       	ldi	r24, 0xFF	; 255
    5d98:	8e 83       	std	Y+6, r24	; 0x06
    5d9a:	8f 83       	std	Y+7, r24	; 0x07
    5d9c:	88 87       	std	Y+8, r24	; 0x08
    5d9e:	89 87       	std	Y+9, r24	; 0x09
    5da0:	1e 86       	std	Y+14, r1	; 0x0e
    5da2:	1f 86       	std	Y+15, r1	; 0x0f
    5da4:	18 8a       	std	Y+16, r1	; 0x10
    5da6:	19 8a       	std	Y+17, r1	; 0x11
    5da8:	82 e5       	ldi	r24, 0x52	; 82
    5daa:	8c 8f       	std	Y+28, r24	; 0x1c
    5dac:	87 e5       	ldi	r24, 0x57	; 87
    5dae:	8d 8f       	std	Y+29, r24	; 0x1d
    5db0:	1e 8e       	std	Y+30, r1	; 0x1e
    5db2:	1f 8e       	std	Y+31, r1	; 0x1f
    5db4:	18 a2       	std	Y+32, r1	; 0x20
    5db6:	19 a2       	std	Y+33, r1	; 0x21
    5db8:	fe 01       	movw	r30, r28
    5dba:	e6 5a       	subi	r30, 0xA6	; 166
    5dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    5dbe:	10 82       	st	Z, r1
    5dc0:	11 82       	std	Z+1, r1	; 0x01
    5dc2:	12 82       	std	Z+2, r1	; 0x02
    5dc4:	13 82       	std	Z+3, r1	; 0x03
    5dc6:	34 96       	adiw	r30, 0x04	; 4
    5dc8:	10 82       	st	Z, r1
    5dca:	11 82       	std	Z+1, r1	; 0x01
    5dcc:	12 82       	std	Z+2, r1	; 0x02
    5dce:	13 82       	std	Z+3, r1	; 0x03
    5dd0:	de 01       	movw	r26, r28
    5dd2:	a2 58       	subi	r26, 0x82	; 130
    5dd4:	bf 4f       	sbci	r27, 0xFF	; 255
    5dd6:	82 e1       	ldi	r24, 0x12	; 18
    5dd8:	e6 e5       	ldi	r30, 0x56	; 86
    5dda:	f1 e0       	ldi	r31, 0x01	; 1
    5ddc:	01 90       	ld	r0, Z+
    5dde:	0d 92       	st	X+, r0
    5de0:	8a 95       	dec	r24
    5de2:	e1 f7       	brne	.-8      	; 0x5ddc <_ZN8SPIFlashC1Eh+0x54>
    5de4:	de 01       	movw	r26, r28
    5de6:	a0 57       	subi	r26, 0x70	; 112
    5de8:	bf 4f       	sbci	r27, 0xFF	; 255
    5dea:	88 e4       	ldi	r24, 0x48	; 72
    5dec:	e8 e6       	ldi	r30, 0x68	; 104
    5dee:	f1 e0       	ldi	r31, 0x01	; 1
    5df0:	01 90       	ld	r0, Z+
    5df2:	0d 92       	st	X+, r0
    5df4:	8a 95       	dec	r24
    5df6:	e1 f7       	brne	.-8      	; 0x5df0 <_ZN8SPIFlashC1Eh+0x68>
    5df8:	de 01       	movw	r26, r28
    5dfa:	a8 52       	subi	r26, 0x28	; 40
    5dfc:	bf 4f       	sbci	r27, 0xFF	; 255
    5dfe:	89 e0       	ldi	r24, 0x09	; 9
    5e00:	e0 eb       	ldi	r30, 0xB0	; 176
    5e02:	f1 e0       	ldi	r31, 0x01	; 1
    5e04:	01 90       	ld	r0, Z+
    5e06:	0d 92       	st	X+, r0
    5e08:	8a 95       	dec	r24
    5e0a:	e1 f7       	brne	.-8      	; 0x5e04 <_ZN8SPIFlashC1Eh+0x7c>
    5e0c:	fe 01       	movw	r30, r28
    5e0e:	ef 51       	subi	r30, 0x1F	; 31
    5e10:	ff 4f       	sbci	r31, 0xFF	; 255
    5e12:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <_ZN14EthernetClient8_srcportE+0x73>
    5e16:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <_ZN14EthernetClient8_srcportE+0x74>
    5e1a:	a0 91 bb 01 	lds	r26, 0x01BB	; 0x8001bb <_ZN14EthernetClient8_srcportE+0x75>
    5e1e:	80 83       	st	Z, r24
    5e20:	91 83       	std	Z+1, r25	; 0x01
    5e22:	a2 83       	std	Z+2, r26	; 0x02
    5e24:	8a e0       	ldi	r24, 0x0A	; 10
    5e26:	8a 87       	std	Y+10, r24	; 0x0a
    5e28:	6d 83       	std	Y+5, r22	; 0x05
    5e2a:	24 b1       	in	r18, 0x04	; 4
    5e2c:	81 e0       	ldi	r24, 0x01	; 1
    5e2e:	90 e0       	ldi	r25, 0x00	; 0
    5e30:	01 c0       	rjmp	.+2      	; 0x5e34 <_ZN8SPIFlashC1Eh+0xac>
    5e32:	88 0f       	add	r24, r24
    5e34:	6a 95       	dec	r22
    5e36:	ea f7       	brpl	.-6      	; 0x5e32 <_ZN8SPIFlashC1Eh+0xaa>
    5e38:	82 2b       	or	r24, r18
    5e3a:	84 b9       	out	0x04, r24	; 4
    5e3c:	2c 9a       	sbi	0x05, 4	; 5
    5e3e:	df 91       	pop	r29
    5e40:	cf 91       	pop	r28
    5e42:	08 95       	ret

00005e44 <_ZN8SPIFlash5beginEm>:
    5e44:	cf 92       	push	r12
    5e46:	df 92       	push	r13
    5e48:	ef 92       	push	r14
    5e4a:	ff 92       	push	r15
    5e4c:	1f 93       	push	r17
    5e4e:	cf 93       	push	r28
    5e50:	df 93       	push	r29
    5e52:	ec 01       	movw	r28, r24
    5e54:	6a 01       	movw	r12, r20
    5e56:	7b 01       	movw	r14, r22
    5e58:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e5a:	8b 30       	cpi	r24, 0x0B	; 11
    5e5c:	09 f0       	breq	.+2      	; 0x5e60 <_ZN8SPIFlash5beginEm+0x1c>
    5e5e:	9c d4       	rcall	.+2360   	; 0x6798 <_ZN8SPIClass5beginEv>
    5e60:	8a 81       	ldd	r24, Y+2	; 0x02
    5e62:	81 11       	cpse	r24, r1
    5e64:	04 c0       	rjmp	.+8      	; 0x5e6e <_ZN8SPIFlash5beginEm+0x2a>
    5e66:	80 e5       	ldi	r24, 0x50	; 80
    5e68:	88 83       	st	Y, r24
    5e6a:	81 e0       	ldi	r24, 0x01	; 1
    5e6c:	89 83       	std	Y+1, r24	; 0x01
    5e6e:	b7 01       	movw	r22, r14
    5e70:	a6 01       	movw	r20, r12
    5e72:	ce 01       	movw	r24, r28
    5e74:	b7 d3       	rcall	.+1902   	; 0x65e4 <_ZN8SPIFlash7_chipIDEm>
    5e76:	18 2f       	mov	r17, r24
    5e78:	ce 01       	movw	r24, r28
    5e7a:	53 d2       	rcall	.+1190   	; 0x6322 <_ZN8SPIFlash7_endSPIEv>
    5e7c:	1f 86       	std	Y+15, r1	; 0x0f
    5e7e:	ce 01       	movw	r24, r28
    5e80:	75 d3       	rcall	.+1770   	; 0x656c <_ZN8SPIFlash26_disableGlobalBlockProtectEv>
    5e82:	81 2f       	mov	r24, r17
    5e84:	df 91       	pop	r29
    5e86:	cf 91       	pop	r28
    5e88:	1f 91       	pop	r17
    5e8a:	ff 90       	pop	r15
    5e8c:	ef 90       	pop	r14
    5e8e:	df 90       	pop	r13
    5e90:	cf 90       	pop	r12
    5e92:	08 95       	ret

00005e94 <_ZN8SPIFlash5errorEb>:
    5e94:	66 23       	and	r22, r22
    5e96:	21 f0       	breq	.+8      	; 0x5ea0 <_ZN8SPIFlash5errorEb+0xc>
    5e98:	41 e0       	ldi	r20, 0x01	; 1
    5e9a:	60 91 0c 0d 	lds	r22, 0x0D0C	; 0x800d0c <diagnostics>
    5e9e:	79 d4       	rcall	.+2290   	; 0x6792 <_ZN8SPIFlash13_troubleshootEhb>
    5ea0:	80 91 0c 0d 	lds	r24, 0x0D0C	; 0x800d0c <diagnostics>
    5ea4:	08 95       	ret

00005ea6 <_ZN8SPIFlash11getCapacityEv>:
    5ea6:	fc 01       	movw	r30, r24
    5ea8:	60 a5       	ldd	r22, Z+40	; 0x28
    5eaa:	71 a5       	ldd	r23, Z+41	; 0x29
    5eac:	82 a5       	ldd	r24, Z+42	; 0x2a
    5eae:	93 a5       	ldd	r25, Z+43	; 0x2b
    5eb0:	08 95       	ret

00005eb2 <_ZN8SPIFlash10getMaxPageEv>:
    5eb2:	fc 01       	movw	r30, r24
    5eb4:	ec 5a       	subi	r30, 0xAC	; 172
    5eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5eb8:	20 81       	ld	r18, Z
    5eba:	31 81       	ldd	r19, Z+1	; 0x01
    5ebc:	40 e0       	ldi	r20, 0x00	; 0
    5ebe:	50 e0       	ldi	r21, 0x00	; 0
    5ec0:	fc 01       	movw	r30, r24
    5ec2:	60 a5       	ldd	r22, Z+40	; 0x28
    5ec4:	71 a5       	ldd	r23, Z+41	; 0x29
    5ec6:	82 a5       	ldd	r24, Z+42	; 0x2a
    5ec8:	93 a5       	ldd	r25, Z+43	; 0x2b
    5eca:	0e 94 7c 40 	call	0x80f8	; 0x80f8 <__udivmodsi4>
    5ece:	ca 01       	movw	r24, r20
    5ed0:	b9 01       	movw	r22, r18
    5ed2:	08 95       	ret

00005ed4 <_ZN8SPIFlash10getJEDECIDEv>:
    5ed4:	fc 01       	movw	r30, r24
    5ed6:	65 a1       	ldd	r22, Z+37	; 0x25
    5ed8:	76 a1       	ldd	r23, Z+38	; 0x26
    5eda:	76 27       	eor	r23, r22
    5edc:	67 27       	eor	r22, r23
    5ede:	76 27       	eor	r23, r22
    5ee0:	cb 01       	movw	r24, r22
    5ee2:	a0 e0       	ldi	r26, 0x00	; 0
    5ee4:	b0 e0       	ldi	r27, 0x00	; 0
    5ee6:	ba 2f       	mov	r27, r26
    5ee8:	a9 2f       	mov	r26, r25
    5eea:	98 2f       	mov	r25, r24
    5eec:	88 27       	eor	r24, r24
    5eee:	27 a1       	ldd	r18, Z+39	; 0x27
    5ef0:	bc 01       	movw	r22, r24
    5ef2:	cd 01       	movw	r24, r26
    5ef4:	62 2b       	or	r22, r18
    5ef6:	08 95       	ret

00005ef8 <_ZN8SPIFlash11getUniqueIDEv>:
    5ef8:	6f 92       	push	r6
    5efa:	7f 92       	push	r7
    5efc:	8f 92       	push	r8
    5efe:	9f 92       	push	r9
    5f00:	af 92       	push	r10
    5f02:	bf 92       	push	r11
    5f04:	cf 92       	push	r12
    5f06:	df 92       	push	r13
    5f08:	ef 92       	push	r14
    5f0a:	ff 92       	push	r15
    5f0c:	0f 93       	push	r16
    5f0e:	1f 93       	push	r17
    5f10:	cf 93       	push	r28
    5f12:	df 93       	push	r29
    5f14:	ec 01       	movw	r28, r24
    5f16:	40 e0       	ldi	r20, 0x00	; 0
    5f18:	5a ec       	ldi	r21, 0xCA	; 202
    5f1a:	6a e9       	ldi	r22, 0x9A	; 154
    5f1c:	7b e3       	ldi	r23, 0x3B	; 59
    5f1e:	33 d2       	rcall	.+1126   	; 0x6386 <_ZN8SPIFlash8_notBusyEm>
    5f20:	88 23       	and	r24, r24
    5f22:	21 f0       	breq	.+8      	; 0x5f2c <_ZN8SPIFlash11getUniqueIDEv+0x34>
    5f24:	ce 01       	movw	r24, r28
    5f26:	22 d2       	rcall	.+1092   	; 0x636c <_ZN8SPIFlash18_isChipPoweredDownEv>
    5f28:	88 23       	and	r24, r24
    5f2a:	49 f0       	breq	.+18     	; 0x5f3e <_ZN8SPIFlash11getUniqueIDEv+0x46>
    5f2c:	20 e0       	ldi	r18, 0x00	; 0
    5f2e:	30 e0       	ldi	r19, 0x00	; 0
    5f30:	40 e0       	ldi	r20, 0x00	; 0
    5f32:	50 e0       	ldi	r21, 0x00	; 0
    5f34:	60 e0       	ldi	r22, 0x00	; 0
    5f36:	70 e0       	ldi	r23, 0x00	; 0
    5f38:	80 e0       	ldi	r24, 0x00	; 0
    5f3a:	90 e0       	ldi	r25, 0x00	; 0
    5f3c:	43 c0       	rjmp	.+134    	; 0x5fc4 <_ZN8SPIFlash11getUniqueIDEv+0xcc>
    5f3e:	6b e4       	ldi	r22, 0x4B	; 75
    5f40:	ce 01       	movw	r24, r28
    5f42:	85 d1       	rcall	.+778    	; 0x624e <_ZN8SPIFlash9_beginSPIEh>
    5f44:	14 e0       	ldi	r17, 0x04	; 4
    5f46:	4e ee       	ldi	r20, 0xEE	; 238
    5f48:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5f4a:	ce 01       	movw	r24, r28
    5f4c:	e8 d1       	rcall	.+976    	; 0x631e <_ZN8SPIFlash9_nextByteEch>
    5f4e:	11 50       	subi	r17, 0x01	; 1
    5f50:	d1 f7       	brne	.-12     	; 0x5f46 <_ZN8SPIFlash11getUniqueIDEv+0x4e>
    5f52:	88 89       	ldd	r24, Y+16	; 0x10
    5f54:	88 23       	and	r24, r24
    5f56:	21 f0       	breq	.+8      	; 0x5f60 <_ZN8SPIFlash11getUniqueIDEv+0x68>
    5f58:	4e ee       	ldi	r20, 0xEE	; 238
    5f5a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5f5c:	ce 01       	movw	r24, r28
    5f5e:	df d1       	rcall	.+958    	; 0x631e <_ZN8SPIFlash9_nextByteEch>
    5f60:	4e 01       	movw	r8, r28
    5f62:	86 e7       	ldi	r24, 0x76	; 118
    5f64:	88 0e       	add	r8, r24
    5f66:	91 1c       	adc	r9, r1
    5f68:	3e 01       	movw	r6, r28
    5f6a:	ee e7       	ldi	r30, 0x7E	; 126
    5f6c:	6e 0e       	add	r6, r30
    5f6e:	71 1c       	adc	r7, r1
    5f70:	84 01       	movw	r16, r8
    5f72:	40 e0       	ldi	r20, 0x00	; 0
    5f74:	6c 8d       	ldd	r22, Y+28	; 0x1c
    5f76:	ce 01       	movw	r24, r28
    5f78:	d2 d1       	rcall	.+932    	; 0x631e <_ZN8SPIFlash9_nextByteEch>
    5f7a:	f8 01       	movw	r30, r16
    5f7c:	81 93       	st	Z+, r24
    5f7e:	8f 01       	movw	r16, r30
    5f80:	6e 16       	cp	r6, r30
    5f82:	7f 06       	cpc	r7, r31
    5f84:	b1 f7       	brne	.-20     	; 0x5f72 <_ZN8SPIFlash11getUniqueIDEv+0x7a>
    5f86:	2c 9a       	sbi	0x05, 4	; 5
    5f88:	a1 2c       	mov	r10, r1
    5f8a:	b1 2c       	mov	r11, r1
    5f8c:	c1 2c       	mov	r12, r1
    5f8e:	d1 2c       	mov	r13, r1
    5f90:	e1 2c       	mov	r14, r1
    5f92:	f1 2c       	mov	r15, r1
    5f94:	00 e0       	ldi	r16, 0x00	; 0
    5f96:	10 e0       	ldi	r17, 0x00	; 0
    5f98:	f4 01       	movw	r30, r8
    5f9a:	21 91       	ld	r18, Z+
    5f9c:	4f 01       	movw	r8, r30
    5f9e:	30 e0       	ldi	r19, 0x00	; 0
    5fa0:	40 e0       	ldi	r20, 0x00	; 0
    5fa2:	50 e0       	ldi	r21, 0x00	; 0
    5fa4:	60 e0       	ldi	r22, 0x00	; 0
    5fa6:	70 e0       	ldi	r23, 0x00	; 0
    5fa8:	80 e0       	ldi	r24, 0x00	; 0
    5faa:	90 e0       	ldi	r25, 0x00	; 0
    5fac:	0e 94 c7 41 	call	0x838e	; 0x838e <__adddi3>
    5fb0:	08 e0       	ldi	r16, 0x08	; 8
    5fb2:	0e 94 90 41 	call	0x8320	; 0x8320 <__ashldi3>
    5fb6:	59 01       	movw	r10, r18
    5fb8:	6a 01       	movw	r12, r20
    5fba:	7b 01       	movw	r14, r22
    5fbc:	8c 01       	movw	r16, r24
    5fbe:	e6 15       	cp	r30, r6
    5fc0:	f7 05       	cpc	r31, r7
    5fc2:	51 f7       	brne	.-44     	; 0x5f98 <_ZN8SPIFlash11getUniqueIDEv+0xa0>
    5fc4:	df 91       	pop	r29
    5fc6:	cf 91       	pop	r28
    5fc8:	1f 91       	pop	r17
    5fca:	0f 91       	pop	r16
    5fcc:	ff 90       	pop	r15
    5fce:	ef 90       	pop	r14
    5fd0:	df 90       	pop	r13
    5fd2:	cf 90       	pop	r12
    5fd4:	bf 90       	pop	r11
    5fd6:	af 90       	pop	r10
    5fd8:	9f 90       	pop	r9
    5fda:	8f 90       	pop	r8
    5fdc:	7f 90       	pop	r7
    5fde:	6f 90       	pop	r6
    5fe0:	08 95       	ret

00005fe2 <_ZN8SPIFlash11eraseSectorEm>:
    5fe2:	ef 92       	push	r14
    5fe4:	ff 92       	push	r15
    5fe6:	0f 93       	push	r16
    5fe8:	1f 93       	push	r17
    5fea:	cf 93       	push	r28
    5fec:	df 93       	push	r29
    5fee:	ec 01       	movw	r28, r24
    5ff0:	88 a9       	ldd	r24, Y+48	; 0x30
    5ff2:	81 11       	cpse	r24, r1
    5ff4:	05 c0       	rjmp	.+10     	; 0x6000 <_ZN8SPIFlash11eraseSectorEm+0x1e>
    5ff6:	40 e0       	ldi	r20, 0x00	; 0
    5ff8:	6c e0       	ldi	r22, 0x0C	; 12
    5ffa:	ce 01       	movw	r24, r28
    5ffc:	ca d3       	rcall	.+1940   	; 0x6792 <_ZN8SPIFlash13_troubleshootEhb>
    5ffe:	1d c0       	rjmp	.+58     	; 0x603a <_ZN8SPIFlash11eraseSectorEm+0x58>
    6000:	e1 2c       	mov	r14, r1
    6002:	10 e1       	ldi	r17, 0x10	; 16
    6004:	f1 2e       	mov	r15, r17
    6006:	00 e0       	ldi	r16, 0x00	; 0
    6008:	10 e0       	ldi	r17, 0x00	; 0
    600a:	9a 01       	movw	r18, r20
    600c:	ab 01       	movw	r20, r22
    600e:	6f ee       	ldi	r22, 0xEF	; 239
    6010:	ce 01       	movw	r24, r28
    6012:	1b d2       	rcall	.+1078   	; 0x644a <_ZN8SPIFlash5_prepEhmm>
    6014:	88 23       	and	r24, r24
    6016:	89 f0       	breq	.+34     	; 0x603a <_ZN8SPIFlash11eraseSectorEm+0x58>
    6018:	69 a9       	ldd	r22, Y+49	; 0x31
    601a:	ce 01       	movw	r24, r28
    601c:	18 d1       	rcall	.+560    	; 0x624e <_ZN8SPIFlash9_beginSPIEh>
    601e:	ce 01       	movw	r24, r28
    6020:	80 d1       	rcall	.+768    	; 0x6322 <_ZN8SPIFlash7_endSPIEv>
    6022:	4a a9       	ldd	r20, Y+50	; 0x32
    6024:	5b a9       	ldd	r21, Y+51	; 0x33
    6026:	6c a9       	ldd	r22, Y+52	; 0x34
    6028:	7d a9       	ldd	r23, Y+53	; 0x35
    602a:	ce 01       	movw	r24, r28
    602c:	df 91       	pop	r29
    602e:	cf 91       	pop	r28
    6030:	1f 91       	pop	r17
    6032:	0f 91       	pop	r16
    6034:	ff 90       	pop	r15
    6036:	ef 90       	pop	r14
    6038:	a6 c1       	rjmp	.+844    	; 0x6386 <_ZN8SPIFlash8_notBusyEm>
    603a:	80 e0       	ldi	r24, 0x00	; 0
    603c:	df 91       	pop	r29
    603e:	cf 91       	pop	r28
    6040:	1f 91       	pop	r17
    6042:	0f 91       	pop	r16
    6044:	ff 90       	pop	r15
    6046:	ef 90       	pop	r14
    6048:	08 95       	ret

0000604a <_ZN8SPIFlash9eraseChipEv>:
    604a:	1f 93       	push	r17
    604c:	cf 93       	push	r28
    604e:	df 93       	push	r29
    6050:	ec 01       	movw	r28, r24
    6052:	8c d1       	rcall	.+792    	; 0x636c <_ZN8SPIFlash18_isChipPoweredDownEv>
    6054:	81 11       	cpse	r24, r1
    6056:	1d c0       	rjmp	.+58     	; 0x6092 <_ZN8SPIFlash9eraseChipEv+0x48>
    6058:	40 e0       	ldi	r20, 0x00	; 0
    605a:	5a ec       	ldi	r21, 0xCA	; 202
    605c:	6a e9       	ldi	r22, 0x9A	; 154
    605e:	7b e3       	ldi	r23, 0x3B	; 59
    6060:	ce 01       	movw	r24, r28
    6062:	91 d1       	rcall	.+802    	; 0x6386 <_ZN8SPIFlash8_notBusyEm>
    6064:	88 23       	and	r24, r24
    6066:	a9 f0       	breq	.+42     	; 0x6092 <_ZN8SPIFlash9eraseChipEv+0x48>
    6068:	61 e0       	ldi	r22, 0x01	; 1
    606a:	ce 01       	movw	r24, r28
    606c:	d3 d1       	rcall	.+934    	; 0x6414 <_ZN8SPIFlash12_writeEnableEb>
    606e:	18 2f       	mov	r17, r24
    6070:	88 23       	and	r24, r24
    6072:	79 f0       	breq	.+30     	; 0x6092 <_ZN8SPIFlash9eraseChipEv+0x48>
    6074:	fe 01       	movw	r30, r28
    6076:	e7 5b       	subi	r30, 0xB7	; 183
    6078:	ff 4f       	sbci	r31, 0xFF	; 255
    607a:	60 81       	ld	r22, Z
    607c:	ce 01       	movw	r24, r28
    607e:	e7 d0       	rcall	.+462    	; 0x624e <_ZN8SPIFlash9_beginSPIEh>
    6080:	ce 01       	movw	r24, r28
    6082:	4f d1       	rcall	.+670    	; 0x6322 <_ZN8SPIFlash7_endSPIEv>
    6084:	ce 01       	movw	r24, r28
    6086:	65 d1       	rcall	.+714    	; 0x6352 <_ZN8SPIFlash10_readStat1Ev>
    6088:	80 fd       	sbrc	r24, 0
    608a:	fc cf       	rjmp	.-8      	; 0x6084 <_ZN8SPIFlash9eraseChipEv+0x3a>
    608c:	ce 01       	movw	r24, r28
    608e:	49 d1       	rcall	.+658    	; 0x6322 <_ZN8SPIFlash7_endSPIEv>
    6090:	01 c0       	rjmp	.+2      	; 0x6094 <_ZN8SPIFlash9eraseChipEv+0x4a>
    6092:	10 e0       	ldi	r17, 0x00	; 0
    6094:	81 2f       	mov	r24, r17
    6096:	df 91       	pop	r29
    6098:	cf 91       	pop	r28
    609a:	1f 91       	pop	r17
    609c:	08 95       	ret

0000609e <_ZN8SPIFlash9powerDownEv>:

//Puts device in low power state. Good for battery powered operations.
//In powerDown() the chip will only respond to powerUp()
bool SPIFlash::powerDown(void) {
    609e:	0f 93       	push	r16
    60a0:	1f 93       	push	r17
    60a2:	cf 93       	push	r28
    60a4:	8c 01       	movw	r16, r24
  if (_chip.manufacturerID != MICROCHIP_MANID) {
    60a6:	fc 01       	movw	r30, r24
    60a8:	85 a1       	ldd	r24, Z+37	; 0x25
    60aa:	8f 3b       	cpi	r24, 0xBF	; 191
    60ac:	c9 f0       	breq	.+50     	; 0x60e0 <_ZN8SPIFlash9powerDownEv+0x42>
    #ifdef RUNDIAGNOSTIC
      _spifuncruntime = micros();
    #endif
  	if(!_notBusy(20))
    60ae:	44 e1       	ldi	r20, 0x14	; 20
    60b0:	50 e0       	ldi	r21, 0x00	; 0
    60b2:	60 e0       	ldi	r22, 0x00	; 0
    60b4:	70 e0       	ldi	r23, 0x00	; 0
    60b6:	c8 01       	movw	r24, r16
    60b8:	66 d1       	rcall	.+716    	; 0x6386 <_ZN8SPIFlash8_notBusyEm>
    60ba:	88 23       	and	r24, r24
    60bc:	b1 f0       	breq	.+44     	; 0x60ea <_ZN8SPIFlash9powerDownEv+0x4c>
  		return false;

  	_beginSPI(POWERDOWN);
    60be:	69 eb       	ldi	r22, 0xB9	; 185
    60c0:	c8 01       	movw	r24, r16
    60c2:	c5 d0       	rcall	.+394    	; 0x624e <_ZN8SPIFlash9_beginSPIEh>
    _endSPI();
    60c4:	c8 01       	movw	r24, r16
    60c6:	2d d1       	rcall	.+602    	; 0x6322 <_ZN8SPIFlash7_endSPIEv>
    60c8:	fa e1       	ldi	r31, 0x1A	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    60ca:	fa 95       	dec	r31
    60cc:	f1 f7       	brne	.-4      	; 0x60ca <_ZN8SPIFlash9powerDownEv+0x2c>
    60ce:	00 c0       	rjmp	.+0      	; 0x60d0 <_ZN8SPIFlash9powerDownEv+0x32>
    60d0:	c1 e0       	ldi	r28, 0x01	; 1
      chipPoweredDown = true;
      bool _retVal = !_writeEnable(false);
      _spifuncruntime = micros() - _spifuncruntime;
      return _retVal;
    #else
      chipPoweredDown = true;
    60d2:	f8 01       	movw	r30, r16
    60d4:	c7 87       	std	Z+15, r28	; 0x0f
      return !_writeEnable(false);
    60d6:	60 e0       	ldi	r22, 0x00	; 0
    60d8:	c8 01       	movw	r24, r16
    60da:	9c d1       	rcall	.+824    	; 0x6414 <_ZN8SPIFlash12_writeEnableEb>
    60dc:	8c 27       	eor	r24, r28
    60de:	05 c0       	rjmp	.+10     	; 0x60ea <_ZN8SPIFlash9powerDownEv+0x4c>
    #endif
  }
  else {
    _troubleshoot(UNSUPPORTEDFUNC);
    60e0:	40 e0       	ldi	r20, 0x00	; 0
    60e2:	6c e0       	ldi	r22, 0x0C	; 12
    60e4:	c8 01       	movw	r24, r16
    60e6:	55 d3       	rcall	.+1706   	; 0x6792 <_ZN8SPIFlash13_troubleshootEhb>
    60e8:	80 e0       	ldi	r24, 0x00	; 0
    return false;
    60ea:	cf 91       	pop	r28
  }
}
    60ec:	1f 91       	pop	r17
    60ee:	0f 91       	pop	r16
    60f0:	08 95       	ret

000060f2 <_ZN8SPIFlash7powerUpEv>:
    60f2:	1f 93       	push	r17

//Wakes chip from low power state.
bool SPIFlash::powerUp(void) {
    60f4:	cf 93       	push	r28
    60f6:	df 93       	push	r29
    60f8:	ec 01       	movw	r28, r24
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros();
  #endif
	_beginSPI(RELEASE);
    60fa:	6b ea       	ldi	r22, 0xAB	; 171
    60fc:	a8 d0       	rcall	.+336    	; 0x624e <_ZN8SPIFlash9_beginSPIEh>
  _endSPI();
    60fe:	ce 01       	movw	r24, r28
    6100:	10 d1       	rcall	.+544    	; 0x6322 <_ZN8SPIFlash7_endSPIEv>
    6102:	80 e1       	ldi	r24, 0x10	; 16
    6104:	8a 95       	dec	r24
    6106:	f1 f7       	brne	.-4      	; 0x6104 <_ZN8SPIFlash7powerUpEv+0x12>
      chipPoweredDown = false;
      return true;
    }
    return false;
  #else
  if (_writeEnable(false)) {
    6108:	60 e0       	ldi	r22, 0x00	; 0
    610a:	ce 01       	movw	r24, r28
    610c:	83 d1       	rcall	.+774    	; 0x6414 <_ZN8SPIFlash12_writeEnableEb>
    610e:	18 2f       	mov	r17, r24
    6110:	88 23       	and	r24, r24
    _writeDisable();
    6112:	19 f0       	breq	.+6      	; 0x611a <_ZN8SPIFlash7powerUpEv+0x28>
    6114:	ce 01       	movw	r24, r28
    6116:	fb d1       	rcall	.+1014   	; 0x650e <_ZN8SPIFlash13_writeDisableEv>
    chipPoweredDown = false;
    6118:	1f 86       	std	Y+15, r1	; 0x0f
    return true;
  }
  return false;
  #endif
}
    611a:	81 2f       	mov	r24, r17
    611c:	df 91       	pop	r29
    611e:	cf 91       	pop	r28
    6120:	1f 91       	pop	r17
    6122:	08 95       	ret

00006124 <_ZN8SPIFlash13_addressCheckEmm>:
   _nextByte(READ);
   *b1 = _nextByte(READ);
   *b2 = _nextByte(READ);
   CHIP_DESELECT
   return true;
 }
    6124:	8f 92       	push	r8
    6126:	9f 92       	push	r9
    6128:	af 92       	push	r10
    612a:	bf 92       	push	r11
    612c:	cf 92       	push	r12
    612e:	df 92       	push	r13
    6130:	ef 92       	push	r14
    6132:	ff 92       	push	r15
    6134:	0f 93       	push	r16
    6136:	1f 93       	push	r17
    6138:	cf 93       	push	r28
    613a:	df 93       	push	r29
    613c:	ec 01       	movw	r28, r24
    613e:	4a 01       	movw	r8, r20
    6140:	5b 01       	movw	r10, r22
    6142:	68 01       	movw	r12, r16
    6144:	79 01       	movw	r14, r18
    6146:	60 e0       	ldi	r22, 0x00	; 0
    6148:	a5 de       	rcall	.-694    	; 0x5e94 <_ZN8SPIFlash5errorEb>
    614a:	87 7f       	andi	r24, 0xF7	; 247
    614c:	83 30       	cpi	r24, 0x03	; 3
    614e:	89 f1       	breq	.+98     	; 0x61b2 <_ZN8SPIFlash13_addressCheckEmm+0x8e>
    6150:	88 a5       	ldd	r24, Y+40	; 0x28
    6152:	99 a5       	ldd	r25, Y+41	; 0x29
    6154:	aa a5       	ldd	r26, Y+42	; 0x2a
    6156:	bb a5       	ldd	r27, Y+43	; 0x2b
    6158:	00 97       	sbiw	r24, 0x00	; 0
    615a:	a1 05       	cpc	r26, r1
    615c:	b1 05       	cpc	r27, r1
    615e:	31 f4       	brne	.+12     	; 0x616c <_ZN8SPIFlash13_addressCheckEmm+0x48>
    6160:	40 e0       	ldi	r20, 0x00	; 0
    6162:	61 e0       	ldi	r22, 0x01	; 1
    6164:	8c e0       	ldi	r24, 0x0C	; 12
    6166:	9d e0       	ldi	r25, 0x0D	; 13
    6168:	0a de       	rcall	.-1004   	; 0x5d7e <_ZN11Diagnostics12troubleshootEhb>
    616a:	23 c0       	rjmp	.+70     	; 0x61b2 <_ZN8SPIFlash13_addressCheckEmm+0x8e>
    616c:	95 01       	movw	r18, r10
    616e:	84 01       	movw	r16, r8
    6170:	0c 0d       	add	r16, r12
    6172:	1d 1d       	adc	r17, r13
    6174:	2e 1d       	adc	r18, r14
    6176:	3f 1d       	adc	r19, r15
    6178:	fe 01       	movw	r30, r28
    617a:	e2 5a       	subi	r30, 0xA2	; 162
    617c:	ff 4f       	sbci	r31, 0xFF	; 255
    617e:	c6 5a       	subi	r28, 0xA6	; 166
    6180:	df 4f       	sbci	r29, 0xFF	; 255
    6182:	08 17       	cp	r16, r24
    6184:	19 07       	cpc	r17, r25
    6186:	2a 07       	cpc	r18, r26
    6188:	3b 07       	cpc	r19, r27
    618a:	48 f0       	brcs	.+18     	; 0x619e <_ZN8SPIFlash13_addressCheckEmm+0x7a>
    618c:	08 1b       	sub	r16, r24
    618e:	19 0b       	sbc	r17, r25
    6190:	2a 0b       	sbc	r18, r26
    6192:	3b 0b       	sbc	r19, r27
    6194:	00 83       	st	Z, r16
    6196:	11 83       	std	Z+1, r17	; 0x01
    6198:	22 83       	std	Z+2, r18	; 0x02
    619a:	33 83       	std	Z+3, r19	; 0x03
    619c:	04 c0       	rjmp	.+8      	; 0x61a6 <_ZN8SPIFlash13_addressCheckEmm+0x82>
    619e:	10 82       	st	Z, r1
    61a0:	11 82       	std	Z+1, r1	; 0x01
    61a2:	12 82       	std	Z+2, r1	; 0x02
    61a4:	13 82       	std	Z+3, r1	; 0x03
    61a6:	88 82       	st	Y, r8
    61a8:	99 82       	std	Y+1, r9	; 0x01
    61aa:	aa 82       	std	Y+2, r10	; 0x02
    61ac:	bb 82       	std	Y+3, r11	; 0x03
    61ae:	81 e0       	ldi	r24, 0x01	; 1
    61b0:	01 c0       	rjmp	.+2      	; 0x61b4 <_ZN8SPIFlash13_addressCheckEmm+0x90>
    61b2:	80 e0       	ldi	r24, 0x00	; 0
    61b4:	df 91       	pop	r29
    61b6:	cf 91       	pop	r28
    61b8:	1f 91       	pop	r17
    61ba:	0f 91       	pop	r16
    61bc:	ff 90       	pop	r15
    61be:	ef 90       	pop	r14
    61c0:	df 90       	pop	r13
    61c2:	cf 90       	pop	r12
    61c4:	bf 90       	pop	r11
    61c6:	af 90       	pop	r10
    61c8:	9f 90       	pop	r9
    61ca:	8f 90       	pop	r8
    61cc:	08 95       	ret

000061ce <_ZN8SPIFlash16_transferAddressEv>:
    61ce:	cf 93       	push	r28
    61d0:	df 93       	push	r29
    61d2:	ec 01       	movw	r28, r24
    61d4:	88 89       	ldd	r24, Y+16	; 0x10
    61d6:	88 23       	and	r24, r24
    61d8:	29 f0       	breq	.+10     	; 0x61e4 <_ZN8SPIFlash16_transferAddressEv+0x16>
    61da:	fe 01       	movw	r30, r28
    61dc:	e3 5a       	subi	r30, 0xA3	; 163
    61de:	ff 4f       	sbci	r31, 0xFF	; 255
    61e0:	80 81       	ld	r24, Z
    61e2:	15 d9       	rcall	.-3542   	; 0x540e <_ZN8SPIClass8transferEh>
    61e4:	fe 01       	movw	r30, r28
    61e6:	e4 5a       	subi	r30, 0xA4	; 164
    61e8:	ff 4f       	sbci	r31, 0xFF	; 255
    61ea:	80 81       	ld	r24, Z
    61ec:	10 d9       	rcall	.-3552   	; 0x540e <_ZN8SPIClass8transferEh>
    61ee:	fe 01       	movw	r30, r28
    61f0:	e5 5a       	subi	r30, 0xA5	; 165
    61f2:	ff 4f       	sbci	r31, 0xFF	; 255
    61f4:	80 81       	ld	r24, Z
    61f6:	0b d9       	rcall	.-3562   	; 0x540e <_ZN8SPIClass8transferEh>
    61f8:	c6 5a       	subi	r28, 0xA6	; 166
    61fa:	df 4f       	sbci	r29, 0xFF	; 255
    61fc:	88 81       	ld	r24, Y
    61fe:	07 d9       	rcall	.-3570   	; 0x540e <_ZN8SPIClass8transferEh>
    6200:	81 e0       	ldi	r24, 0x01	; 1
    6202:	df 91       	pop	r29
    6204:	cf 91       	pop	r28
    6206:	08 95       	ret

00006208 <_ZN8SPIFlash12_startSPIBusEv>:
    6208:	fc 01       	movw	r30, r24
    620a:	8c b5       	in	r24, 0x2c	; 44
    620c:	87 8b       	std	Z+23, r24	; 0x17
    620e:	8d b5       	in	r24, 0x2d	; 45
    6210:	80 8f       	std	Z+24, r24	; 0x18
    6212:	40 81       	ld	r20, Z
    6214:	31 81       	ldd	r19, Z+1	; 0x01
    6216:	80 91 0f 0d 	lds	r24, 0x0D0F	; 0x800d0f <_ZN8SPIClass13interruptModeE>
    621a:	88 23       	and	r24, r24
    621c:	99 f0       	breq	.+38     	; 0x6244 <_ZN8SPIFlash12_startSPIBusEv+0x3c>
    621e:	2f b7       	in	r18, 0x3f	; 63
    6220:	f8 94       	cli
    6222:	80 91 0f 0d 	lds	r24, 0x0D0F	; 0x800d0f <_ZN8SPIClass13interruptModeE>
    6226:	81 30       	cpi	r24, 0x01	; 1
    6228:	59 f4       	brne	.+22     	; 0x6240 <_ZN8SPIFlash12_startSPIBusEv+0x38>
    622a:	8d b3       	in	r24, 0x1d	; 29
    622c:	80 93 0d 0d 	sts	0x0D0D, r24	; 0x800d0d <_ZN8SPIClass13interruptSaveE>
    6230:	9d b3       	in	r25, 0x1d	; 29
    6232:	80 91 0e 0d 	lds	r24, 0x0D0E	; 0x800d0e <_ZN8SPIClass13interruptMaskE>
    6236:	80 95       	com	r24
    6238:	89 23       	and	r24, r25
    623a:	8d bb       	out	0x1d, r24	; 29
    623c:	2f bf       	out	0x3f, r18	; 63
    623e:	02 c0       	rjmp	.+4      	; 0x6244 <_ZN8SPIFlash12_startSPIBusEv+0x3c>
    6240:	20 93 0d 0d 	sts	0x0D0D, r18	; 0x800d0d <_ZN8SPIClass13interruptSaveE>
    6244:	4c bd       	out	0x2c, r20	; 44
    6246:	3d bd       	out	0x2d, r19	; 45
    6248:	81 e0       	ldi	r24, 0x01	; 1
    624a:	86 87       	std	Z+14, r24	; 0x0e
    624c:	08 95       	ret

0000624e <_ZN8SPIFlash9_beginSPIEh>:
    624e:	0f 93       	push	r16
    6250:	1f 93       	push	r17
    6252:	cf 93       	push	r28
    6254:	8c 01       	movw	r16, r24
    6256:	c6 2f       	mov	r28, r22
    6258:	fc 01       	movw	r30, r24
    625a:	86 85       	ldd	r24, Z+14	; 0x0e
    625c:	81 11       	cpse	r24, r1
    625e:	02 c0       	rjmp	.+4      	; 0x6264 <_ZN8SPIFlash9_beginSPIEh+0x16>
    6260:	c8 01       	movw	r24, r16
    6262:	d2 df       	rcall	.-92     	; 0x6208 <_ZN8SPIFlash12_startSPIBusEv>
    6264:	2c 98       	cbi	0x05, 4	; 5
    6266:	cb 30       	cpi	r28, 0x0B	; 11
    6268:	a1 f0       	breq	.+40     	; 0x6292 <_ZN8SPIFlash9_beginSPIEh+0x44>
    626a:	30 f4       	brcc	.+12     	; 0x6278 <_ZN8SPIFlash9_beginSPIEh+0x2a>
    626c:	c2 30       	cpi	r28, 0x02	; 2
    626e:	61 f0       	breq	.+24     	; 0x6288 <_ZN8SPIFlash9_beginSPIEh+0x3a>
    6270:	c3 30       	cpi	r28, 0x03	; 3
    6272:	c9 f4       	brne	.+50     	; 0x62a6 <_ZN8SPIFlash9_beginSPIEh+0x58>
    6274:	83 e0       	ldi	r24, 0x03	; 3
    6276:	09 c0       	rjmp	.+18     	; 0x628a <_ZN8SPIFlash9_beginSPIEh+0x3c>
    6278:	c2 35       	cpi	r28, 0x52	; 82
    627a:	89 f0       	breq	.+34     	; 0x629e <_ZN8SPIFlash9_beginSPIEh+0x50>
    627c:	c8 3d       	cpi	r28, 0xD8	; 216
    627e:	89 f0       	breq	.+34     	; 0x62a2 <_ZN8SPIFlash9_beginSPIEh+0x54>
    6280:	c0 32       	cpi	r28, 0x20	; 32
    6282:	89 f4       	brne	.+34     	; 0x62a6 <_ZN8SPIFlash9_beginSPIEh+0x58>
    6284:	80 e2       	ldi	r24, 0x20	; 32
    6286:	01 c0       	rjmp	.+2      	; 0x628a <_ZN8SPIFlash9_beginSPIEh+0x3c>
    6288:	82 e0       	ldi	r24, 0x02	; 2
    628a:	c1 d8       	rcall	.-3710   	; 0x540e <_ZN8SPIClass8transferEh>
    628c:	c8 01       	movw	r24, r16
    628e:	9f df       	rcall	.-194    	; 0x61ce <_ZN8SPIFlash16_transferAddressEv>
    6290:	0c c0       	rjmp	.+24     	; 0x62aa <_ZN8SPIFlash9_beginSPIEh+0x5c>
    6292:	8b e0       	ldi	r24, 0x0B	; 11
    6294:	bc d8       	rcall	.-3720   	; 0x540e <_ZN8SPIClass8transferEh>
    6296:	c8 01       	movw	r24, r16
    6298:	9a df       	rcall	.-204    	; 0x61ce <_ZN8SPIFlash16_transferAddressEv>
    629a:	8e ee       	ldi	r24, 0xEE	; 238
    629c:	05 c0       	rjmp	.+10     	; 0x62a8 <_ZN8SPIFlash9_beginSPIEh+0x5a>
    629e:	82 e5       	ldi	r24, 0x52	; 82
    62a0:	f4 cf       	rjmp	.-24     	; 0x628a <_ZN8SPIFlash9_beginSPIEh+0x3c>
    62a2:	88 ed       	ldi	r24, 0xD8	; 216
    62a4:	f2 cf       	rjmp	.-28     	; 0x628a <_ZN8SPIFlash9_beginSPIEh+0x3c>
    62a6:	8c 2f       	mov	r24, r28
    62a8:	b2 d8       	rcall	.-3740   	; 0x540e <_ZN8SPIClass8transferEh>
    62aa:	81 e0       	ldi	r24, 0x01	; 1
    62ac:	cf 91       	pop	r28
    62ae:	1f 91       	pop	r17
    62b0:	0f 91       	pop	r16
    62b2:	08 95       	ret

000062b4 <_ZN8SPIFlash15_notPrevWrittenEmm>:
    62b4:	8f 92       	push	r8
    62b6:	9f 92       	push	r9
    62b8:	af 92       	push	r10
    62ba:	bf 92       	push	r11
    62bc:	cf 92       	push	r12
    62be:	df 92       	push	r13
    62c0:	ef 92       	push	r14
    62c2:	ff 92       	push	r15
    62c4:	0f 93       	push	r16
    62c6:	1f 93       	push	r17
    62c8:	48 01       	movw	r8, r16
    62ca:	59 01       	movw	r10, r18
    62cc:	63 e0       	ldi	r22, 0x03	; 3
    62ce:	bf df       	rcall	.-130    	; 0x624e <_ZN8SPIFlash9_beginSPIEh>
    62d0:	c1 2c       	mov	r12, r1
    62d2:	d1 2c       	mov	r13, r1
    62d4:	76 01       	movw	r14, r12
    62d6:	c8 14       	cp	r12, r8
    62d8:	d9 04       	cpc	r13, r9
    62da:	ea 04       	cpc	r14, r10
    62dc:	fb 04       	cpc	r15, r11
    62de:	91 f0       	breq	.+36     	; 0x6304 <_ZN8SPIFlash15_notPrevWrittenEmm+0x50>
    62e0:	80 e0       	ldi	r24, 0x00	; 0
    62e2:	95 d8       	rcall	.-3798   	; 0x540e <_ZN8SPIClass8transferEh>
    62e4:	8f 3f       	cpi	r24, 0xFF	; 255
    62e6:	41 f0       	breq	.+16     	; 0x62f8 <_ZN8SPIFlash15_notPrevWrittenEmm+0x44>
    62e8:	2c 9a       	sbi	0x05, 4	; 5
    62ea:	40 e0       	ldi	r20, 0x00	; 0
    62ec:	67 e0       	ldi	r22, 0x07	; 7
    62ee:	8c e0       	ldi	r24, 0x0C	; 12
    62f0:	9d e0       	ldi	r25, 0x0D	; 13
    62f2:	45 dd       	rcall	.-1398   	; 0x5d7e <_ZN11Diagnostics12troubleshootEhb>
    62f4:	80 e0       	ldi	r24, 0x00	; 0
    62f6:	08 c0       	rjmp	.+16     	; 0x6308 <_ZN8SPIFlash15_notPrevWrittenEmm+0x54>
    62f8:	8f ef       	ldi	r24, 0xFF	; 255
    62fa:	c8 1a       	sub	r12, r24
    62fc:	d8 0a       	sbc	r13, r24
    62fe:	e8 0a       	sbc	r14, r24
    6300:	f8 0a       	sbc	r15, r24
    6302:	e9 cf       	rjmp	.-46     	; 0x62d6 <_ZN8SPIFlash15_notPrevWrittenEmm+0x22>
    6304:	2c 9a       	sbi	0x05, 4	; 5
    6306:	81 e0       	ldi	r24, 0x01	; 1
    6308:	1f 91       	pop	r17
    630a:	0f 91       	pop	r16
    630c:	ff 90       	pop	r15
    630e:	ef 90       	pop	r14
    6310:	df 90       	pop	r13
    6312:	cf 90       	pop	r12
    6314:	bf 90       	pop	r11
    6316:	af 90       	pop	r10
    6318:	9f 90       	pop	r9
    631a:	8f 90       	pop	r8
    631c:	08 95       	ret

0000631e <_ZN8SPIFlash9_nextByteEch>:
    631e:	84 2f       	mov	r24, r20
    6320:	76 c8       	rjmp	.-3860   	; 0x540e <_ZN8SPIClass8transferEh>

00006322 <_ZN8SPIFlash7_endSPIEv>:
    6322:	fc 01       	movw	r30, r24
    6324:	2c 9a       	sbi	0x05, 4	; 5
    6326:	80 91 0f 0d 	lds	r24, 0x0D0F	; 0x800d0f <_ZN8SPIClass13interruptModeE>
    632a:	88 23       	and	r24, r24
    632c:	61 f0       	breq	.+24     	; 0x6346 <_ZN8SPIFlash7_endSPIEv+0x24>
    632e:	9f b7       	in	r25, 0x3f	; 63
    6330:	f8 94       	cli
    6332:	20 91 0f 0d 	lds	r18, 0x0D0F	; 0x800d0f <_ZN8SPIClass13interruptModeE>
    6336:	80 91 0d 0d 	lds	r24, 0x0D0D	; 0x800d0d <_ZN8SPIClass13interruptSaveE>
    633a:	21 30       	cpi	r18, 0x01	; 1
    633c:	19 f4       	brne	.+6      	; 0x6344 <_ZN8SPIFlash7_endSPIEv+0x22>
    633e:	8d bb       	out	0x1d, r24	; 29
    6340:	9f bf       	out	0x3f, r25	; 63
    6342:	01 c0       	rjmp	.+2      	; 0x6346 <_ZN8SPIFlash7_endSPIEv+0x24>
    6344:	8f bf       	out	0x3f, r24	; 63
    6346:	87 89       	ldd	r24, Z+23	; 0x17
    6348:	8c bd       	out	0x2c, r24	; 44
    634a:	80 8d       	ldd	r24, Z+24	; 0x18
    634c:	8d bd       	out	0x2d, r24	; 45
    634e:	16 86       	std	Z+14, r1	; 0x0e
    6350:	08 95       	ret

00006352 <_ZN8SPIFlash10_readStat1Ev>:
    6352:	cf 93       	push	r28
    6354:	df 93       	push	r29
    6356:	ec 01       	movw	r28, r24
    6358:	65 e0       	ldi	r22, 0x05	; 5
    635a:	79 df       	rcall	.-270    	; 0x624e <_ZN8SPIFlash9_beginSPIEh>
    635c:	80 e0       	ldi	r24, 0x00	; 0
    635e:	57 d8       	rcall	.-3922   	; 0x540e <_ZN8SPIClass8transferEh>
    6360:	8c 8b       	std	Y+20, r24	; 0x14
    6362:	2c 9a       	sbi	0x05, 4	; 5
    6364:	8c 89       	ldd	r24, Y+20	; 0x14
    6366:	df 91       	pop	r29
    6368:	cf 91       	pop	r28
    636a:	08 95       	ret

0000636c <_ZN8SPIFlash18_isChipPoweredDownEv>:
    636c:	cf 93       	push	r28
    636e:	fc 01       	movw	r30, r24
    6370:	c7 85       	ldd	r28, Z+15	; 0x0f
    6372:	cc 23       	and	r28, r28
    6374:	29 f0       	breq	.+10     	; 0x6380 <_ZN8SPIFlash18_isChipPoweredDownEv+0x14>
    6376:	40 e0       	ldi	r20, 0x00	; 0
    6378:	6f e0       	ldi	r22, 0x0F	; 15
    637a:	8c e0       	ldi	r24, 0x0C	; 12
    637c:	9d e0       	ldi	r25, 0x0D	; 13
    637e:	ff dc       	rcall	.-1538   	; 0x5d7e <_ZN11Diagnostics12troubleshootEhb>
    6380:	8c 2f       	mov	r24, r28
    6382:	cf 91       	pop	r28
    6384:	08 95       	ret

00006386 <_ZN8SPIFlash8_notBusyEm>:
    6386:	8f 92       	push	r8
    6388:	9f 92       	push	r9
    638a:	af 92       	push	r10
    638c:	bf 92       	push	r11
    638e:	cf 92       	push	r12
    6390:	df 92       	push	r13
    6392:	ef 92       	push	r14
    6394:	ff 92       	push	r15
    6396:	cf 93       	push	r28
    6398:	df 93       	push	r29
    639a:	ec 01       	movw	r28, r24
    639c:	6a 01       	movw	r12, r20
    639e:	7b 01       	movw	r14, r22
    63a0:	8a e0       	ldi	r24, 0x0A	; 10
    63a2:	8a 95       	dec	r24
    63a4:	f1 f7       	brne	.-4      	; 0x63a2 <_ZN8SPIFlash8_notBusyEm+0x1c>
    63a6:	00 c0       	rjmp	.+0      	; 0x63a8 <_ZN8SPIFlash8_notBusyEm+0x22>
    63a8:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <micros>
    63ac:	4b 01       	movw	r8, r22
    63ae:	5c 01       	movw	r10, r24
    63b0:	ce 01       	movw	r24, r28
    63b2:	cf df       	rcall	.-98     	; 0x6352 <_ZN8SPIFlash10_readStat1Ev>
    63b4:	8c 89       	ldd	r24, Y+20	; 0x14
    63b6:	80 fd       	sbrc	r24, 0
    63b8:	02 c0       	rjmp	.+4      	; 0x63be <_ZN8SPIFlash8_notBusyEm+0x38>
    63ba:	81 e0       	ldi	r24, 0x01	; 1
    63bc:	20 c0       	rjmp	.+64     	; 0x63fe <_ZN8SPIFlash8_notBusyEm+0x78>
    63be:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <micros>
    63c2:	dc 01       	movw	r26, r24
    63c4:	cb 01       	movw	r24, r22
    63c6:	88 19       	sub	r24, r8
    63c8:	99 09       	sbc	r25, r9
    63ca:	aa 09       	sbc	r26, r10
    63cc:	bb 09       	sbc	r27, r11
    63ce:	8c 15       	cp	r24, r12
    63d0:	9d 05       	cpc	r25, r13
    63d2:	ae 05       	cpc	r26, r14
    63d4:	bf 05       	cpc	r27, r15
    63d6:	60 f3       	brcs	.-40     	; 0x63b0 <_ZN8SPIFlash8_notBusyEm+0x2a>
    63d8:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <micros>
    63dc:	dc 01       	movw	r26, r24
    63de:	cb 01       	movw	r24, r22
    63e0:	88 19       	sub	r24, r8
    63e2:	99 09       	sbc	r25, r9
    63e4:	aa 09       	sbc	r26, r10
    63e6:	bb 09       	sbc	r27, r11
    63e8:	8c 15       	cp	r24, r12
    63ea:	9d 05       	cpc	r25, r13
    63ec:	ae 05       	cpc	r26, r14
    63ee:	bf 05       	cpc	r27, r15
    63f0:	20 f3       	brcs	.-56     	; 0x63ba <_ZN8SPIFlash8_notBusyEm+0x34>
    63f2:	40 e0       	ldi	r20, 0x00	; 0
    63f4:	64 e0       	ldi	r22, 0x04	; 4
    63f6:	8c e0       	ldi	r24, 0x0C	; 12
    63f8:	9d e0       	ldi	r25, 0x0D	; 13
    63fa:	c1 dc       	rcall	.-1662   	; 0x5d7e <_ZN11Diagnostics12troubleshootEhb>
    63fc:	80 e0       	ldi	r24, 0x00	; 0
    63fe:	df 91       	pop	r29
    6400:	cf 91       	pop	r28
    6402:	ff 90       	pop	r15
    6404:	ef 90       	pop	r14
    6406:	df 90       	pop	r13
    6408:	cf 90       	pop	r12
    640a:	bf 90       	pop	r11
    640c:	af 90       	pop	r10
    640e:	9f 90       	pop	r9
    6410:	8f 90       	pop	r8
    6412:	08 95       	ret

00006414 <_ZN8SPIFlash12_writeEnableEb>:
    6414:	1f 93       	push	r17
    6416:	cf 93       	push	r28
    6418:	df 93       	push	r29
    641a:	ec 01       	movw	r28, r24
    641c:	16 2f       	mov	r17, r22
    641e:	66 e0       	ldi	r22, 0x06	; 6
    6420:	16 df       	rcall	.-468    	; 0x624e <_ZN8SPIFlash9_beginSPIEh>
    6422:	2c 9a       	sbi	0x05, 4	; 5
    6424:	ce 01       	movw	r24, r28
    6426:	95 df       	rcall	.-214    	; 0x6352 <_ZN8SPIFlash10_readStat1Ev>
    6428:	81 fd       	sbrc	r24, 1
    642a:	08 c0       	rjmp	.+16     	; 0x643c <_ZN8SPIFlash12_writeEnableEb+0x28>
    642c:	11 23       	and	r17, r17
    642e:	41 f0       	breq	.+16     	; 0x6440 <_ZN8SPIFlash12_writeEnableEb+0x2c>
    6430:	40 e0       	ldi	r20, 0x00	; 0
    6432:	66 e0       	ldi	r22, 0x06	; 6
    6434:	8c e0       	ldi	r24, 0x0C	; 12
    6436:	9d e0       	ldi	r25, 0x0D	; 13
    6438:	a2 dc       	rcall	.-1724   	; 0x5d7e <_ZN11Diagnostics12troubleshootEhb>
    643a:	02 c0       	rjmp	.+4      	; 0x6440 <_ZN8SPIFlash12_writeEnableEb+0x2c>
    643c:	81 e0       	ldi	r24, 0x01	; 1
    643e:	01 c0       	rjmp	.+2      	; 0x6442 <_ZN8SPIFlash12_writeEnableEb+0x2e>
    6440:	80 e0       	ldi	r24, 0x00	; 0
    6442:	df 91       	pop	r29
    6444:	cf 91       	pop	r28
    6446:	1f 91       	pop	r17
    6448:	08 95       	ret

0000644a <_ZN8SPIFlash5_prepEhmm>:
    644a:	8f 92       	push	r8
    644c:	9f 92       	push	r9
    644e:	af 92       	push	r10
    6450:	bf 92       	push	r11
    6452:	cf 92       	push	r12
    6454:	df 92       	push	r13
    6456:	ef 92       	push	r14
    6458:	ff 92       	push	r15
    645a:	0f 93       	push	r16
    645c:	1f 93       	push	r17
    645e:	cf 93       	push	r28
    6460:	df 93       	push	r29
    6462:	ec 01       	movw	r28, r24
    6464:	49 01       	movw	r8, r18
    6466:	5a 01       	movw	r10, r20
    6468:	67 01       	movw	r12, r14
    646a:	78 01       	movw	r14, r16
    646c:	62 30       	cpi	r22, 0x02	; 2
    646e:	19 f0       	breq	.+6      	; 0x6476 <_ZN8SPIFlash5_prepEhmm+0x2c>
    6470:	6f 3e       	cpi	r22, 0xEF	; 239
    6472:	99 f0       	breq	.+38     	; 0x649a <_ZN8SPIFlash5_prepEhmm+0x50>
    6474:	2c c0       	rjmp	.+88     	; 0x64ce <_ZN8SPIFlash5_prepEhmm+0x84>
    6476:	7a df       	rcall	.-268    	; 0x636c <_ZN8SPIFlash18_isChipPoweredDownEv>
    6478:	81 11       	cpse	r24, r1
    647a:	3b c0       	rjmp	.+118    	; 0x64f2 <_ZN8SPIFlash5_prepEhmm+0xa8>
    647c:	97 01       	movw	r18, r14
    647e:	86 01       	movw	r16, r12
    6480:	b5 01       	movw	r22, r10
    6482:	a4 01       	movw	r20, r8
    6484:	ce 01       	movw	r24, r28
    6486:	4e de       	rcall	.-868    	; 0x6124 <_ZN8SPIFlash13_addressCheckEmm>
    6488:	88 23       	and	r24, r24
    648a:	99 f1       	breq	.+102    	; 0x64f2 <_ZN8SPIFlash5_prepEhmm+0xa8>
    648c:	97 01       	movw	r18, r14
    648e:	86 01       	movw	r16, r12
    6490:	b5 01       	movw	r22, r10
    6492:	a4 01       	movw	r20, r8
    6494:	ce 01       	movw	r24, r28
    6496:	0e df       	rcall	.-484    	; 0x62b4 <_ZN8SPIFlash15_notPrevWrittenEmm>
    6498:	09 c0       	rjmp	.+18     	; 0x64ac <_ZN8SPIFlash5_prepEhmm+0x62>
    649a:	68 df       	rcall	.-304    	; 0x636c <_ZN8SPIFlash18_isChipPoweredDownEv>
    649c:	81 11       	cpse	r24, r1
    649e:	29 c0       	rjmp	.+82     	; 0x64f2 <_ZN8SPIFlash5_prepEhmm+0xa8>
    64a0:	97 01       	movw	r18, r14
    64a2:	86 01       	movw	r16, r12
    64a4:	b5 01       	movw	r22, r10
    64a6:	a4 01       	movw	r20, r8
    64a8:	ce 01       	movw	r24, r28
    64aa:	3c de       	rcall	.-904    	; 0x6124 <_ZN8SPIFlash13_addressCheckEmm>
    64ac:	88 23       	and	r24, r24
    64ae:	09 f1       	breq	.+66     	; 0x64f2 <_ZN8SPIFlash5_prepEhmm+0xa8>
    64b0:	40 e0       	ldi	r20, 0x00	; 0
    64b2:	5a ec       	ldi	r21, 0xCA	; 202
    64b4:	6a e9       	ldi	r22, 0x9A	; 154
    64b6:	7b e3       	ldi	r23, 0x3B	; 59
    64b8:	ce 01       	movw	r24, r28
    64ba:	65 df       	rcall	.-310    	; 0x6386 <_ZN8SPIFlash8_notBusyEm>
    64bc:	88 23       	and	r24, r24
    64be:	c9 f0       	breq	.+50     	; 0x64f2 <_ZN8SPIFlash5_prepEhmm+0xa8>
    64c0:	61 e0       	ldi	r22, 0x01	; 1
    64c2:	ce 01       	movw	r24, r28
    64c4:	a7 df       	rcall	.-178    	; 0x6414 <_ZN8SPIFlash12_writeEnableEb>
    64c6:	88 23       	and	r24, r24
    64c8:	a1 f0       	breq	.+40     	; 0x64f2 <_ZN8SPIFlash5_prepEhmm+0xa8>
    64ca:	81 e0       	ldi	r24, 0x01	; 1
    64cc:	13 c0       	rjmp	.+38     	; 0x64f4 <_ZN8SPIFlash5_prepEhmm+0xaa>
    64ce:	4e df       	rcall	.-356    	; 0x636c <_ZN8SPIFlash18_isChipPoweredDownEv>
    64d0:	81 11       	cpse	r24, r1
    64d2:	0f c0       	rjmp	.+30     	; 0x64f2 <_ZN8SPIFlash5_prepEhmm+0xa8>
    64d4:	97 01       	movw	r18, r14
    64d6:	86 01       	movw	r16, r12
    64d8:	b5 01       	movw	r22, r10
    64da:	a4 01       	movw	r20, r8
    64dc:	ce 01       	movw	r24, r28
    64de:	22 de       	rcall	.-956    	; 0x6124 <_ZN8SPIFlash13_addressCheckEmm>
    64e0:	88 23       	and	r24, r24
    64e2:	39 f0       	breq	.+14     	; 0x64f2 <_ZN8SPIFlash5_prepEhmm+0xa8>
    64e4:	40 e0       	ldi	r20, 0x00	; 0
    64e6:	5a ec       	ldi	r21, 0xCA	; 202
    64e8:	6a e9       	ldi	r22, 0x9A	; 154
    64ea:	7b e3       	ldi	r23, 0x3B	; 59
    64ec:	ce 01       	movw	r24, r28
    64ee:	4b df       	rcall	.-362    	; 0x6386 <_ZN8SPIFlash8_notBusyEm>
    64f0:	ea cf       	rjmp	.-44     	; 0x64c6 <_ZN8SPIFlash5_prepEhmm+0x7c>
    64f2:	80 e0       	ldi	r24, 0x00	; 0
    64f4:	df 91       	pop	r29
    64f6:	cf 91       	pop	r28
    64f8:	1f 91       	pop	r17
    64fa:	0f 91       	pop	r16
    64fc:	ff 90       	pop	r15
    64fe:	ef 90       	pop	r14
    6500:	df 90       	pop	r13
    6502:	cf 90       	pop	r12
    6504:	bf 90       	pop	r11
    6506:	af 90       	pop	r10
    6508:	9f 90       	pop	r9
    650a:	8f 90       	pop	r8
    650c:	08 95       	ret

0000650e <_ZN8SPIFlash13_writeDisableEv>:
    650e:	64 e0       	ldi	r22, 0x04	; 4
    6510:	9e de       	rcall	.-708    	; 0x624e <_ZN8SPIFlash9_beginSPIEh>
    6512:	2c 9a       	sbi	0x05, 4	; 5
    6514:	81 e0       	ldi	r24, 0x01	; 1
    6516:	08 95       	ret

00006518 <_ZN8SPIFlash11_getJedecIdEv>:

 //Checks for presence of chip by requesting JEDEC ID
 bool SPIFlash::_getJedecId(void) {
    6518:	1f 93       	push	r17
    651a:	cf 93       	push	r28
    651c:	df 93       	push	r29
    651e:	ec 01       	movw	r28, r24
   if(!_notBusy()) {
    6520:	40 e0       	ldi	r20, 0x00	; 0
    6522:	5a ec       	ldi	r21, 0xCA	; 202
    6524:	6a e9       	ldi	r22, 0x9A	; 154
    6526:	7b e3       	ldi	r23, 0x3B	; 59
    6528:	2e df       	rcall	.-420    	; 0x6386 <_ZN8SPIFlash8_notBusyEm>
    652a:	18 2f       	mov	r17, r24
    652c:	88 23       	and	r24, r24
    652e:	c9 f0       	breq	.+50     	; 0x6562 <_ZN8SPIFlash11_getJedecIdEv+0x4a>
     return false;
   }
   _beginSPI(JEDECID);
    6530:	6f e9       	ldi	r22, 0x9F	; 159
    6532:	ce 01       	movw	r24, r28
    6534:	8c de       	rcall	.-744    	; 0x624e <_ZN8SPIFlash9_beginSPIEh>
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    6536:	80 e0       	ldi	r24, 0x00	; 0
    6538:	0e 94 07 2a 	call	0x540e	; 0x540e <_ZN8SPIClass8transferEh>
 bool SPIFlash::_getJedecId(void) {
   if(!_notBusy()) {
     return false;
   }
   _beginSPI(JEDECID);
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
    653c:	8d a3       	std	Y+37, r24	; 0x25
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    653e:	80 e0       	ldi	r24, 0x00	; 0
    6540:	0e 94 07 2a 	call	0x540e	; 0x540e <_ZN8SPIClass8transferEh>
   if(!_notBusy()) {
     return false;
   }
   _beginSPI(JEDECID);
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
 	_chip.memoryTypeID = _nextByte(READ);		// memory type
    6544:	8e a3       	std	Y+38, r24	; 0x26
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    6546:	80 e0       	ldi	r24, 0x00	; 0
    6548:	0e 94 07 2a 	call	0x540e	; 0x540e <_ZN8SPIClass8transferEh>
     return false;
   }
   _beginSPI(JEDECID);
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
 	_chip.memoryTypeID = _nextByte(READ);		// memory type
 	_chip.capacityID = _nextByte(READ);		// capacity
    654c:	8f a3       	std	Y+39, r24	; 0x27
   CHIP_DESELECT
    654e:	2c 9a       	sbi	0x05, 4	; 5
   if (!_chip.manufacturerID) {
    6550:	8d a1       	ldd	r24, Y+37	; 0x25
    6552:	81 11       	cpse	r24, r1
    6554:	06 c0       	rjmp	.+12     	; 0x6562 <_ZN8SPIFlash11_getJedecIdEv+0x4a>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    6556:	40 e0       	ldi	r20, 0x00	; 0
    6558:	6b e0       	ldi	r22, 0x0B	; 11
    655a:	8c e0       	ldi	r24, 0x0C	; 12
    655c:	9d e0       	ldi	r25, 0x0D	; 13
    655e:	0f dc       	rcall	.-2018   	; 0x5d7e <_ZN11Diagnostics12troubleshootEhb>
    6560:	10 e0       	ldi	r17, 0x00	; 0
     return false;
   }
   else {
     return true;
   }
 }
    6562:	81 2f       	mov	r24, r17
    6564:	df 91       	pop	r29
    6566:	cf 91       	pop	r28
    6568:	1f 91       	pop	r17
    656a:	08 95       	ret

0000656c <_ZN8SPIFlash26_disableGlobalBlockProtectEv>:

 bool SPIFlash::_disableGlobalBlockProtect(void) {
    656c:	1f 93       	push	r17
    656e:	cf 93       	push	r28
    6570:	df 93       	push	r29
    6572:	ec 01       	movw	r28, r24
   if (_chip.memoryTypeID == SST25) {
    6574:	8e a1       	ldd	r24, Y+38	; 0x26
    6576:	85 32       	cpi	r24, 0x25	; 37
    6578:	81 f4       	brne	.+32     	; 0x659a <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x2e>
     _readStat1();
    657a:	ce 01       	movw	r24, r28
    657c:	ea de       	rcall	.-556    	; 0x6352 <_ZN8SPIFlash10_readStat1Ev>
     uint8_t _tempStat1 = stat1 & 0xC3;
    657e:	1c 89       	ldd	r17, Y+20	; 0x14
    6580:	13 7c       	andi	r17, 0xC3	; 195
     _beginSPI(WRITESTATEN);
    6582:	60 e5       	ldi	r22, 0x50	; 80
    6584:	ce 01       	movw	r24, r28
    6586:	63 de       	rcall	.-826    	; 0x624e <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    6588:	2c 9a       	sbi	0x05, 4	; 5
     _beginSPI(WRITESTAT1);
    658a:	61 e0       	ldi	r22, 0x01	; 1
    658c:	ce 01       	movw	r24, r28
    658e:	5f de       	rcall	.-834    	; 0x624e <_ZN8SPIFlash9_beginSPIEh>
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    6590:	81 2f       	mov	r24, r17
    6592:	0e 94 07 2a 	call	0x540e	; 0x540e <_ZN8SPIClass8transferEh>
     uint8_t _tempStat1 = stat1 & 0xC3;
     _beginSPI(WRITESTATEN);
     CHIP_DESELECT
     _beginSPI(WRITESTAT1);
     _nextByte(WRITE, _tempStat1);
     CHIP_DESELECT
    6596:	2c 9a       	sbi	0x05, 4	; 5
    6598:	1f c0       	rjmp	.+62     	; 0x65d8 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6c>
   }
   else if (_chip.memoryTypeID == SST26) {
    659a:	86 32       	cpi	r24, 0x26	; 38
    659c:	e9 f4       	brne	.+58     	; 0x65d8 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6c>
     if(!_notBusy()) {
    659e:	40 e0       	ldi	r20, 0x00	; 0
    65a0:	5a ec       	ldi	r21, 0xCA	; 202
    65a2:	6a e9       	ldi	r22, 0x9A	; 154
    65a4:	7b e3       	ldi	r23, 0x3B	; 59
    65a6:	ce 01       	movw	r24, r28
    65a8:	ee de       	rcall	.-548    	; 0x6386 <_ZN8SPIFlash8_notBusyEm>
    65aa:	18 2f       	mov	r17, r24
    65ac:	88 23       	and	r24, r24
     	return false;
     }
     _writeEnable();
    65ae:	a9 f0       	breq	.+42     	; 0x65da <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6e>
    65b0:	61 e0       	ldi	r22, 0x01	; 1
    65b2:	ce 01       	movw	r24, r28
    65b4:	2f df       	rcall	.-418    	; 0x6414 <_ZN8SPIFlash12_writeEnableEb>
    65b6:	85 e3       	ldi	r24, 0x35	; 53
    65b8:	8a 95       	dec	r24
    65ba:	f1 f7       	brne	.-4      	; 0x65b8 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x4c>
     _delay_us(10);
     _beginSPI(ULBPR);
    65bc:	00 00       	nop
    65be:	68 e9       	ldi	r22, 0x98	; 152
    65c0:	ce 01       	movw	r24, r28
    65c2:	45 de       	rcall	.-886    	; 0x624e <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    65c4:	2c 9a       	sbi	0x05, 4	; 5
    65c6:	87 ec       	ldi	r24, 0xC7	; 199
    65c8:	90 e0       	ldi	r25, 0x00	; 0
    65ca:	01 97       	sbiw	r24, 0x01	; 1
    65cc:	f1 f7       	brne	.-4      	; 0x65ca <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x5e>
    65ce:	00 c0       	rjmp	.+0      	; 0x65d0 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x64>
     _delay_us(50);
     _writeDisable();
    65d0:	00 00       	nop
    65d2:	ce 01       	movw	r24, r28
    65d4:	9c df       	rcall	.-200    	; 0x650e <_ZN8SPIFlash13_writeDisableEv>
    65d6:	01 c0       	rjmp	.+2      	; 0x65da <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6e>
   }
   return true;
    65d8:	11 e0       	ldi	r17, 0x01	; 1
 }
    65da:	81 2f       	mov	r24, r17
    65dc:	df 91       	pop	r29
    65de:	cf 91       	pop	r28
    65e0:	1f 91       	pop	r17
    65e2:	08 95       	ret

000065e4 <_ZN8SPIFlash7_chipIDEm>:

 //Identifies the chip
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    65e4:	cf 92       	push	r12
    65e6:	df 92       	push	r13
    65e8:	ef 92       	push	r14
    65ea:	ff 92       	push	r15
    65ec:	0f 93       	push	r16
    65ee:	1f 93       	push	r17
    65f0:	cf 93       	push	r28
    65f2:	df 93       	push	r29
    65f4:	ec 01       	movw	r28, r24
    65f6:	6a 01       	movw	r12, r20
    65f8:	7b 01       	movw	r14, r22
   //set some default values
   kb4Erase.supported = kb32Erase.supported = kb64Erase.supported = chipErase.supported = true;
    65fa:	fc 01       	movw	r30, r24
    65fc:	e8 5b       	subi	r30, 0xB8	; 184
    65fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6600:	81 e0       	ldi	r24, 0x01	; 1
    6602:	80 83       	st	Z, r24
    6604:	8c af       	std	Y+60, r24	; 0x3c
    6606:	8e ab       	std	Y+54, r24	; 0x36
    6608:	88 ab       	std	Y+48, r24	; 0x30
   kb4Erase.opcode = SECTORERASE;
    660a:	80 e2       	ldi	r24, 0x20	; 32
    660c:	89 ab       	std	Y+49, r24	; 0x31
   kb32Erase.opcode = BLOCK32ERASE;
    660e:	82 e5       	ldi	r24, 0x52	; 82
    6610:	8f ab       	std	Y+55, r24	; 0x37
   kb64Erase.opcode = BLOCK64ERASE;
    6612:	88 ed       	ldi	r24, 0xD8	; 216
    6614:	8d af       	std	Y+61, r24	; 0x3d
   kb4Erase.time = BUSY_TIMEOUT;
    6616:	80 e0       	ldi	r24, 0x00	; 0
    6618:	9a ec       	ldi	r25, 0xCA	; 202
    661a:	aa e9       	ldi	r26, 0x9A	; 154
    661c:	bb e3       	ldi	r27, 0x3B	; 59
    661e:	8a ab       	std	Y+50, r24	; 0x32
    6620:	9b ab       	std	Y+51, r25	; 0x33
    6622:	ac ab       	std	Y+52, r26	; 0x34
    6624:	bd ab       	std	Y+53, r27	; 0x35
   kb32Erase.time = kb4Erase.time * 8;
    6626:	80 e0       	ldi	r24, 0x00	; 0
    6628:	90 e5       	ldi	r25, 0x50	; 80
    662a:	a6 ed       	ldi	r26, 0xD6	; 214
    662c:	bc ed       	ldi	r27, 0xDC	; 220
    662e:	88 af       	std	Y+56, r24	; 0x38
    6630:	99 af       	std	Y+57, r25	; 0x39
    6632:	aa af       	std	Y+58, r26	; 0x3a
    6634:	bb af       	std	Y+59, r27	; 0x3b
   kb64Erase.time = kb32Erase.time * 4;
    6636:	3a 97       	sbiw	r30, 0x0a	; 10
    6638:	80 e0       	ldi	r24, 0x00	; 0
    663a:	90 e4       	ldi	r25, 0x40	; 64
    663c:	a9 e5       	ldi	r26, 0x59	; 89
    663e:	b3 e7       	ldi	r27, 0x73	; 115
    6640:	80 83       	st	Z, r24
    6642:	91 83       	std	Z+1, r25	; 0x01
    6644:	a2 83       	std	Z+2, r26	; 0x02
    6646:	b3 83       	std	Z+3, r27	; 0x03
   kb256Erase.supported = false;
    6648:	34 96       	adiw	r30, 0x04	; 4
    664a:	10 82       	st	Z, r1
   chipErase.opcode = CHIPERASE;
    664c:	8e 01       	movw	r16, r28
    664e:	07 5b       	subi	r16, 0xB7	; 183
    6650:	1f 4f       	sbci	r17, 0xFF	; 255
    6652:	80 e6       	ldi	r24, 0x60	; 96
    6654:	f8 01       	movw	r30, r16
    6656:	80 83       	st	Z, r24
   chipErase.time = kb64Erase.time * 100L;
    6658:	31 96       	adiw	r30, 0x01	; 1
    665a:	80 e0       	ldi	r24, 0x00	; 0
    665c:	90 e0       	ldi	r25, 0x00	; 0
    665e:	ad ed       	ldi	r26, 0xDD	; 221
    6660:	be e0       	ldi	r27, 0x0E	; 14
    6662:	80 83       	st	Z, r24
    6664:	91 83       	std	Z+1, r25	; 0x01
    6666:	a2 83       	std	Z+2, r26	; 0x02
    6668:	b3 83       	std	Z+3, r27	; 0x03
   _pageSize = SPI_PAGESIZE;
    666a:	3a 96       	adiw	r30, 0x0a	; 10
    666c:	80 e0       	ldi	r24, 0x00	; 0
    666e:	91 e0       	ldi	r25, 0x01	; 1
    6670:	91 83       	std	Z+1, r25	; 0x01
    6672:	80 83       	st	Z, r24

   _getJedecId();
    6674:	ce 01       	movw	r24, r28
    6676:	50 df       	rcall	.-352    	; 0x6518 <_ZN8SPIFlash11_getJedecIdEv>

   for (uint8_t i = 0; i < sizeof(_supportedManID); i++) {
     if (_chip.manufacturerID == _supportedManID[i]) {
    6678:	9d a1       	ldd	r25, Y+37	; 0x25
    667a:	fe 01       	movw	r30, r28
    667c:	e8 52       	subi	r30, 0x28	; 40
    667e:	ff 4f       	sbci	r31, 0xFF	; 255
    6680:	de 01       	movw	r26, r28
    6682:	af 51       	subi	r26, 0x1F	; 31
    6684:	bf 4f       	sbci	r27, 0xFF	; 255
    6686:	81 91       	ld	r24, Z+
    6688:	98 13       	cpse	r25, r24
    668a:	03 c0       	rjmp	.+6      	; 0x6692 <_ZN8SPIFlash7_chipIDEm+0xae>
       _chip.supportedMan = true;
    668c:	81 e0       	ldi	r24, 0x01	; 1
    668e:	8b a3       	std	Y+35, r24	; 0x23
       break;
    6690:	03 c0       	rjmp	.+6      	; 0x6698 <_ZN8SPIFlash7_chipIDEm+0xb4>
   chipErase.time = kb64Erase.time * 100L;
   _pageSize = SPI_PAGESIZE;

   _getJedecId();

   for (uint8_t i = 0; i < sizeof(_supportedManID); i++) {
    6692:	ea 17       	cp	r30, r26
    6694:	fb 07       	cpc	r31, r27
    6696:	b9 f7       	brne	.-18     	; 0x6686 <_ZN8SPIFlash7_chipIDEm+0xa2>
       break;
     }
   }

   for (uint8_t i = 0; i < sizeof(_altChipEraseReq); i++) {
     if (_chip.memoryTypeID == _altChipEraseReq[i]) {
    6698:	8e a1       	ldd	r24, Y+38	; 0x26
    669a:	2c 91       	ld	r18, X
    669c:	82 17       	cp	r24, r18
    669e:	51 f0       	breq	.+20     	; 0x66b4 <_ZN8SPIFlash7_chipIDEm+0xd0>
    66a0:	fe 01       	movw	r30, r28
    66a2:	ee 51       	subi	r30, 0x1E	; 30
    66a4:	ff 4f       	sbci	r31, 0xFF	; 255
    66a6:	20 81       	ld	r18, Z
    66a8:	82 17       	cp	r24, r18
    66aa:	21 f0       	breq	.+8      	; 0x66b4 <_ZN8SPIFlash7_chipIDEm+0xd0>
    66ac:	31 96       	adiw	r30, 0x01	; 1
    66ae:	20 81       	ld	r18, Z
    66b0:	82 13       	cpse	r24, r18
    66b2:	03 c0       	rjmp	.+6      	; 0x66ba <_ZN8SPIFlash7_chipIDEm+0xd6>
       chipErase.opcode = ALT_CHIPERASE;
    66b4:	87 ec       	ldi	r24, 0xC7	; 199
    66b6:	f8 01       	movw	r30, r16
    66b8:	80 83       	st	Z, r24
       _getSFDPFlashParam();
     }
    #endif
     //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ End SFDP ID section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

   if (_chip.supportedMan) {
    66ba:	1b a1       	ldd	r17, Y+35	; 0x23
    66bc:	11 23       	and	r17, r17
    66be:	d9 f1       	breq	.+118    	; 0x6736 <_ZN8SPIFlash7_chipIDEm+0x152>
     #ifdef RUNDIAGNOSTIC
       Serial.println(F("No Chip size defined by user. Checking library support."));
     #endif
     //Identify capacity
     if(_chip.manufacturerID == MACRONIX_MANID)
    66c0:	92 3c       	cpi	r25, 0xC2	; 194
    66c2:	c1 f4       	brne	.+48     	; 0x66f4 <_ZN8SPIFlash7_chipIDEm+0x110>
     {
       switch(_chip.capacityID)
    66c4:	8f a1       	ldd	r24, Y+39	; 0x27
    66c6:	83 31       	cpi	r24, 0x13	; 19
    66c8:	39 f0       	breq	.+14     	; 0x66d8 <_ZN8SPIFlash7_chipIDEm+0xf4>
    66ca:	84 31       	cpi	r24, 0x14	; 20
    66cc:	71 f4       	brne	.+28     	; 0x66ea <_ZN8SPIFlash7_chipIDEm+0x106>
         case MX25L4005:
         _chip.capacity = MB(4);
         break;

         case MX25L8005:
         _chip.capacity = MB(8);
    66ce:	80 e0       	ldi	r24, 0x00	; 0
    66d0:	90 e0       	ldi	r25, 0x00	; 0
    66d2:	a0 e8       	ldi	r26, 0x80	; 128
    66d4:	b0 e0       	ldi	r27, 0x00	; 0
    66d6:	04 c0       	rjmp	.+8      	; 0x66e0 <_ZN8SPIFlash7_chipIDEm+0xfc>
     if(_chip.manufacturerID == MACRONIX_MANID)
     {
       switch(_chip.capacityID)
       {
         case MX25L4005:
         _chip.capacity = MB(4);
    66d8:	80 e0       	ldi	r24, 0x00	; 0
    66da:	90 e0       	ldi	r25, 0x00	; 0
    66dc:	a0 e4       	ldi	r26, 0x40	; 64
    66de:	b0 e0       	ldi	r27, 0x00	; 0
         break;

         case MX25L8005:
         _chip.capacity = MB(8);
    66e0:	88 a7       	std	Y+40, r24	; 0x28
    66e2:	99 a7       	std	Y+41, r25	; 0x29
    66e4:	aa a7       	std	Y+42, r26	; 0x2a
    66e6:	bb a7       	std	Y+43, r27	; 0x2b
         break;
    66e8:	05 c0       	rjmp	.+10     	; 0x66f4 <_ZN8SPIFlash7_chipIDEm+0x110>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    66ea:	40 e0       	ldi	r20, 0x00	; 0
    66ec:	62 e0       	ldi	r22, 0x02	; 2
    66ee:	8c e0       	ldi	r24, 0x0C	; 12
    66f0:	9d e0       	ldi	r25, 0x0D	; 13
    66f2:	45 db       	rcall	.-2422   	; 0x5d7e <_ZN11Diagnostics12troubleshootEhb>
         default:
         _troubleshoot(UNKNOWNCHIP); //Error code for unidentified capacity
 		 } //TODO - Set up other manufaturerIDs in a similar pattern.
 	 }
     for (uint8_t j = 0; j < sizeof(_capID); j++) {
       if (_chip.capacityID == _capID[j]) {
    66f4:	2f a1       	ldd	r18, Y+39	; 0x27
    66f6:	fe 01       	movw	r30, r28
    66f8:	e2 58       	subi	r30, 0x82	; 130
    66fa:	ff 4f       	sbci	r31, 0xFF	; 255
    66fc:	80 e0       	ldi	r24, 0x00	; 0
    66fe:	90 e0       	ldi	r25, 0x00	; 0
    6700:	31 91       	ld	r19, Z+
    6702:	23 13       	cpse	r18, r19
    6704:	13 c0       	rjmp	.+38     	; 0x672c <_ZN8SPIFlash7_chipIDEm+0x148>
         _chip.capacity = (_memSize[j]);
    6706:	fc 01       	movw	r30, r24
    6708:	b4 96       	adiw	r30, 0x24	; 36
    670a:	ee 0f       	add	r30, r30
    670c:	ff 1f       	adc	r31, r31
    670e:	ee 0f       	add	r30, r30
    6710:	ff 1f       	adc	r31, r31
    6712:	ec 0f       	add	r30, r28
    6714:	fd 1f       	adc	r31, r29
    6716:	80 81       	ld	r24, Z
    6718:	91 81       	ldd	r25, Z+1	; 0x01
    671a:	a2 81       	ldd	r26, Z+2	; 0x02
    671c:	b3 81       	ldd	r27, Z+3	; 0x03
    671e:	88 a7       	std	Y+40, r24	; 0x28
    6720:	99 a7       	std	Y+41, r25	; 0x29
    6722:	aa a7       	std	Y+42, r26	; 0x2a
    6724:	bb a7       	std	Y+43, r27	; 0x2b
         _chip.supported = true;
    6726:	81 e0       	ldi	r24, 0x01	; 1
    6728:	8a a3       	std	Y+34, r24	; 0x22
         #ifdef RUNDIAGNOSTIC
           Serial.println(F("Chip identified. This chip is fully supported by the library."));
         #endif
         return true;
    672a:	29 c0       	rjmp	.+82     	; 0x677e <_ZN8SPIFlash7_chipIDEm+0x19a>
    672c:	01 96       	adiw	r24, 0x01	; 1

         default:
         _troubleshoot(UNKNOWNCHIP); //Error code for unidentified capacity
 		 } //TODO - Set up other manufaturerIDs in a similar pattern.
 	 }
     for (uint8_t j = 0; j < sizeof(_capID); j++) {
    672e:	82 31       	cpi	r24, 0x12	; 18
    6730:	91 05       	cpc	r25, r1
    6732:	31 f7       	brne	.-52     	; 0x6700 <_ZN8SPIFlash7_chipIDEm+0x11c>
    6734:	0b c0       	rjmp	.+22     	; 0x674c <_ZN8SPIFlash7_chipIDEm+0x168>
         return true;
       }
     }
   }
   else {
     if (_chip.sfdpAvailable) {
    6736:	1c a1       	ldd	r17, Y+36	; 0x24
    6738:	11 23       	and	r17, r17
    673a:	11 f0       	breq	.+4      	; 0x6740 <_ZN8SPIFlash7_chipIDEm+0x15c>
       #ifdef RUNDIAGNOSTIC
         Serial.println(F("SFDP ID finished."));
       #endif
       return true;
    673c:	11 e0       	ldi	r17, 0x01	; 1
    673e:	1f c0       	rjmp	.+62     	; 0x677e <_ZN8SPIFlash7_chipIDEm+0x19a>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    6740:	40 e0       	ldi	r20, 0x00	; 0
    6742:	62 e0       	ldi	r22, 0x02	; 2
    6744:	8c e0       	ldi	r24, 0x0C	; 12
    6746:	9d e0       	ldi	r25, 0x0D	; 13
    6748:	1a db       	rcall	.-2508   	; 0x5d7e <_ZN11Diagnostics12troubleshootEhb>
       #endif
       return true;
     }
     else {
       _troubleshoot(UNKNOWNCHIP); //Error code for unidentified capacity
       return false;
    674a:	19 c0       	rjmp	.+50     	; 0x677e <_ZN8SPIFlash7_chipIDEm+0x19a>
     }

   }

   if (!_chip.capacity) {
    674c:	88 a5       	ldd	r24, Y+40	; 0x28
    674e:	99 a5       	ldd	r25, Y+41	; 0x29
    6750:	aa a5       	ldd	r26, Y+42	; 0x2a
    6752:	bb a5       	ldd	r27, Y+43	; 0x2b
    6754:	89 2b       	or	r24, r25
    6756:	8a 2b       	or	r24, r26
    6758:	8b 2b       	or	r24, r27
    675a:	81 f7       	brne	.-32     	; 0x673c <_ZN8SPIFlash7_chipIDEm+0x158>
     #ifdef RUNDIAGNOSTIC
       Serial.println(F("Chip capacity cannot be identified"));
     #endif
     if (flashChipSize) {
    675c:	c1 14       	cp	r12, r1
    675e:	d1 04       	cpc	r13, r1
    6760:	e1 04       	cpc	r14, r1
    6762:	f1 04       	cpc	r15, r1
    6764:	31 f0       	breq	.+12     	; 0x6772 <_ZN8SPIFlash7_chipIDEm+0x18e>
       // If a custom chip size is defined
       #ifdef RUNDIAGNOSTIC
       Serial.println(F("Custom Chipsize defined"));
       #endif
       _chip.capacity = flashChipSize;
    6766:	c8 a6       	std	Y+40, r12	; 0x28
    6768:	d9 a6       	std	Y+41, r13	; 0x29
    676a:	ea a6       	std	Y+42, r14	; 0x2a
    676c:	fb a6       	std	Y+43, r15	; 0x2b
       _chip.supported = false;
    676e:	1a a2       	std	Y+34, r1	; 0x22
       return true;
    6770:	06 c0       	rjmp	.+12     	; 0x677e <_ZN8SPIFlash7_chipIDEm+0x19a>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    6772:	40 e0       	ldi	r20, 0x00	; 0
    6774:	63 e0       	ldi	r22, 0x03	; 3
    6776:	8c e0       	ldi	r24, 0x0C	; 12
    6778:	9d e0       	ldi	r25, 0x0D	; 13
    677a:	01 db       	rcall	.-2558   	; 0x5d7e <_ZN11Diagnostics12troubleshootEhb>
       return true;
     }

     else {
       _troubleshoot(UNKNOWNCAP);
       return false;
    677c:	10 e0       	ldi	r17, 0x00	; 0
     }

   }
   return true;
 }
    677e:	81 2f       	mov	r24, r17
    6780:	df 91       	pop	r29
    6782:	cf 91       	pop	r28
    6784:	1f 91       	pop	r17
    6786:	0f 91       	pop	r16
    6788:	ff 90       	pop	r15
    678a:	ef 90       	pop	r14
    678c:	df 90       	pop	r13
    678e:	cf 90       	pop	r12
    6790:	08 95       	ret

00006792 <_ZN8SPIFlash13_troubleshootEhb>:

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    6792:	8c e0       	ldi	r24, 0x0C	; 12
    6794:	9d e0       	ldi	r25, 0x0D	; 13
    6796:	f3 ca       	rjmp	.-2586   	; 0x5d7e <_ZN11Diagnostics12troubleshootEhb>

00006798 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    6798:	cf 93       	push	r28
  uint8_t sreg = SREG;
    679a:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    679c:	f8 94       	cli
  if (!initialized) {
    679e:	80 91 10 0d 	lds	r24, 0x0D10	; 0x800d10 <_ZN8SPIClass11initializedE>
    67a2:	81 11       	cpse	r24, r1
    67a4:	27 c0       	rjmp	.+78     	; 0x67f4 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    67a6:	e2 e8       	ldi	r30, 0x82	; 130
    67a8:	f2 e0       	ldi	r31, 0x02	; 2
    67aa:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    67ac:	e2 e6       	ldi	r30, 0x62	; 98
    67ae:	f2 e0       	ldi	r31, 0x02	; 2
    67b0:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    67b2:	e8 2f       	mov	r30, r24
    67b4:	f0 e0       	ldi	r31, 0x00	; 0
    67b6:	ee 0f       	add	r30, r30
    67b8:	ff 1f       	adc	r31, r31
    67ba:	e4 55       	subi	r30, 0x54	; 84
    67bc:	fd 4f       	sbci	r31, 0xFD	; 253
    67be:	a5 91       	lpm	r26, Z+
    67c0:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    67c2:	ec 91       	ld	r30, X
    67c4:	e9 23       	and	r30, r25
    67c6:	21 f4       	brne	.+8      	; 0x67d0 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    67c8:	61 e0       	ldi	r22, 0x01	; 1
    67ca:	8a e0       	ldi	r24, 0x0A	; 10
    67cc:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    67d0:	61 e0       	ldi	r22, 0x01	; 1
    67d2:	8a e0       	ldi	r24, 0x0A	; 10
    67d4:	0e 94 20 3c 	call	0x7840	; 0x7840 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    67d8:	8c b5       	in	r24, 0x2c	; 44
    67da:	80 61       	ori	r24, 0x10	; 16
    67dc:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    67de:	8c b5       	in	r24, 0x2c	; 44
    67e0:	80 64       	ori	r24, 0x40	; 64
    67e2:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    67e4:	61 e0       	ldi	r22, 0x01	; 1
    67e6:	8d e0       	ldi	r24, 0x0D	; 13
    67e8:	0e 94 20 3c 	call	0x7840	; 0x7840 <pinMode>
    pinMode(MOSI, OUTPUT);
    67ec:	61 e0       	ldi	r22, 0x01	; 1
    67ee:	8b e0       	ldi	r24, 0x0B	; 11
    67f0:	0e 94 20 3c 	call	0x7840	; 0x7840 <pinMode>
  }
  initialized++; // reference count
    67f4:	80 91 10 0d 	lds	r24, 0x0D10	; 0x800d10 <_ZN8SPIClass11initializedE>
    67f8:	8f 5f       	subi	r24, 0xFF	; 255
    67fa:	80 93 10 0d 	sts	0x0D10, r24	; 0x800d10 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    67fe:	cf bf       	out	0x3f, r28	; 63
}
    6800:	cf 91       	pop	r28
    6802:	08 95       	ret

00006804 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6804:	10 92 7e 0d 	sts	0x0D7E, r1	; 0x800d7e <twi_state>
    6808:	81 e0       	ldi	r24, 0x01	; 1
    680a:	80 93 7c 0d 	sts	0x0D7C, r24	; 0x800d7c <twi_sendStop>
    680e:	10 92 7b 0d 	sts	0x0D7B, r1	; 0x800d7b <twi_inRepStart>
    6812:	61 e0       	ldi	r22, 0x01	; 1
    6814:	8d e1       	ldi	r24, 0x1D	; 29
    6816:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    681a:	61 e0       	ldi	r22, 0x01	; 1
    681c:	8c e1       	ldi	r24, 0x1C	; 28
    681e:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    6822:	e9 eb       	ldi	r30, 0xB9	; 185
    6824:	f0 e0       	ldi	r31, 0x00	; 0
    6826:	80 81       	ld	r24, Z
    6828:	8e 7f       	andi	r24, 0xFE	; 254
    682a:	80 83       	st	Z, r24
    682c:	80 81       	ld	r24, Z
    682e:	8d 7f       	andi	r24, 0xFD	; 253
    6830:	80 83       	st	Z, r24
    6832:	88 e4       	ldi	r24, 0x48	; 72
    6834:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    6838:	85 e4       	ldi	r24, 0x45	; 69
    683a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    683e:	08 95       	ret

00006840 <twi_disable>:
    6840:	ec eb       	ldi	r30, 0xBC	; 188
    6842:	f0 e0       	ldi	r31, 0x00	; 0
    6844:	80 81       	ld	r24, Z
    6846:	8a 7b       	andi	r24, 0xBA	; 186
    6848:	80 83       	st	Z, r24
    684a:	60 e0       	ldi	r22, 0x00	; 0
    684c:	8d e1       	ldi	r24, 0x1D	; 29
    684e:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <digitalWrite>
    6852:	60 e0       	ldi	r22, 0x00	; 0
    6854:	8c e1       	ldi	r24, 0x1C	; 28
    6856:	0c 94 5c 3c 	jmp	0x78b8	; 0x78b8 <digitalWrite>

0000685a <twi_setFrequency>:
    685a:	9b 01       	movw	r18, r22
    685c:	ac 01       	movw	r20, r24
    685e:	60 e0       	ldi	r22, 0x00	; 0
    6860:	74 e2       	ldi	r23, 0x24	; 36
    6862:	84 ef       	ldi	r24, 0xF4	; 244
    6864:	90 e0       	ldi	r25, 0x00	; 0
    6866:	0e 94 7c 40 	call	0x80f8	; 0x80f8 <__udivmodsi4>
    686a:	da 01       	movw	r26, r20
    686c:	c9 01       	movw	r24, r18
    686e:	40 97       	sbiw	r24, 0x10	; 16
    6870:	a1 09       	sbc	r26, r1
    6872:	b1 09       	sbc	r27, r1
    6874:	b6 95       	lsr	r27
    6876:	a7 95       	ror	r26
    6878:	97 95       	ror	r25
    687a:	87 95       	ror	r24
    687c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    6880:	08 95       	ret

00006882 <twi_readFrom>:
    6882:	41 32       	cpi	r20, 0x21	; 33
    6884:	08 f0       	brcs	.+2      	; 0x6888 <twi_readFrom+0x6>
    6886:	43 c0       	rjmp	.+134    	; 0x690e <twi_readFrom+0x8c>
    6888:	90 91 7e 0d 	lds	r25, 0x0D7E	; 0x800d7e <twi_state>
    688c:	91 11       	cpse	r25, r1
    688e:	fc cf       	rjmp	.-8      	; 0x6888 <twi_readFrom+0x6>
    6890:	91 e0       	ldi	r25, 0x01	; 1
    6892:	90 93 7e 0d 	sts	0x0D7E, r25	; 0x800d7e <twi_state>
    6896:	20 93 7c 0d 	sts	0x0D7C, r18	; 0x800d7c <twi_sendStop>
    689a:	2f ef       	ldi	r18, 0xFF	; 255
    689c:	20 93 11 0d 	sts	0x0D11, r18	; 0x800d11 <twi_error>
    68a0:	10 92 56 0d 	sts	0x0D56, r1	; 0x800d56 <twi_masterBufferIndex>
    68a4:	24 0f       	add	r18, r20
    68a6:	20 93 55 0d 	sts	0x0D55, r18	; 0x800d55 <twi_masterBufferLength>
    68aa:	90 93 7d 0d 	sts	0x0D7D, r25	; 0x800d7d <twi_slarw>
    68ae:	90 91 7d 0d 	lds	r25, 0x0D7D	; 0x800d7d <twi_slarw>
    68b2:	88 0f       	add	r24, r24
    68b4:	89 2b       	or	r24, r25
    68b6:	80 93 7d 0d 	sts	0x0D7D, r24	; 0x800d7d <twi_slarw>
    68ba:	80 91 7b 0d 	lds	r24, 0x0D7B	; 0x800d7b <twi_inRepStart>
    68be:	81 30       	cpi	r24, 0x01	; 1
    68c0:	61 f4       	brne	.+24     	; 0x68da <twi_readFrom+0x58>
    68c2:	10 92 7b 0d 	sts	0x0D7B, r1	; 0x800d7b <twi_inRepStart>
    68c6:	80 91 7d 0d 	lds	r24, 0x0D7D	; 0x800d7d <twi_slarw>
    68ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    68ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    68d2:	83 fd       	sbrc	r24, 3
    68d4:	f8 cf       	rjmp	.-16     	; 0x68c6 <twi_readFrom+0x44>
    68d6:	85 ec       	ldi	r24, 0xC5	; 197
    68d8:	01 c0       	rjmp	.+2      	; 0x68dc <twi_readFrom+0x5a>
    68da:	85 ee       	ldi	r24, 0xE5	; 229
    68dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    68e0:	80 91 7e 0d 	lds	r24, 0x0D7E	; 0x800d7e <twi_state>
    68e4:	81 30       	cpi	r24, 0x01	; 1
    68e6:	e1 f3       	breq	.-8      	; 0x68e0 <twi_readFrom+0x5e>
    68e8:	80 91 56 0d 	lds	r24, 0x0D56	; 0x800d56 <twi_masterBufferIndex>
    68ec:	84 17       	cp	r24, r20
    68ee:	10 f4       	brcc	.+4      	; 0x68f4 <twi_readFrom+0x72>
    68f0:	40 91 56 0d 	lds	r20, 0x0D56	; 0x800d56 <twi_masterBufferIndex>
    68f4:	a7 e5       	ldi	r26, 0x57	; 87
    68f6:	bd e0       	ldi	r27, 0x0D	; 13
    68f8:	96 2f       	mov	r25, r22
    68fa:	fb 01       	movw	r30, r22
    68fc:	8e 2f       	mov	r24, r30
    68fe:	89 1b       	sub	r24, r25
    6900:	84 17       	cp	r24, r20
    6902:	18 f4       	brcc	.+6      	; 0x690a <twi_readFrom+0x88>
    6904:	8d 91       	ld	r24, X+
    6906:	81 93       	st	Z+, r24
    6908:	f9 cf       	rjmp	.-14     	; 0x68fc <twi_readFrom+0x7a>
    690a:	84 2f       	mov	r24, r20
    690c:	08 95       	ret
    690e:	80 e0       	ldi	r24, 0x00	; 0
    6910:	08 95       	ret

00006912 <twi_writeTo>:
    6912:	0f 93       	push	r16
    6914:	41 32       	cpi	r20, 0x21	; 33
    6916:	08 f0       	brcs	.+2      	; 0x691a <twi_writeTo+0x8>
    6918:	4a c0       	rjmp	.+148    	; 0x69ae <twi_writeTo+0x9c>
    691a:	90 91 7e 0d 	lds	r25, 0x0D7E	; 0x800d7e <twi_state>
    691e:	91 11       	cpse	r25, r1
    6920:	fc cf       	rjmp	.-8      	; 0x691a <twi_writeTo+0x8>
    6922:	32 e0       	ldi	r19, 0x02	; 2
    6924:	30 93 7e 0d 	sts	0x0D7E, r19	; 0x800d7e <twi_state>
    6928:	00 93 7c 0d 	sts	0x0D7C, r16	; 0x800d7c <twi_sendStop>
    692c:	3f ef       	ldi	r19, 0xFF	; 255
    692e:	30 93 11 0d 	sts	0x0D11, r19	; 0x800d11 <twi_error>
    6932:	10 92 56 0d 	sts	0x0D56, r1	; 0x800d56 <twi_masterBufferIndex>
    6936:	40 93 55 0d 	sts	0x0D55, r20	; 0x800d55 <twi_masterBufferLength>
    693a:	56 2f       	mov	r21, r22
    693c:	a7 e5       	ldi	r26, 0x57	; 87
    693e:	bd e0       	ldi	r27, 0x0D	; 13
    6940:	fb 01       	movw	r30, r22
    6942:	3e 2f       	mov	r19, r30
    6944:	35 1b       	sub	r19, r21
    6946:	34 17       	cp	r19, r20
    6948:	18 f4       	brcc	.+6      	; 0x6950 <twi_writeTo+0x3e>
    694a:	31 91       	ld	r19, Z+
    694c:	3d 93       	st	X+, r19
    694e:	f9 cf       	rjmp	.-14     	; 0x6942 <twi_writeTo+0x30>
    6950:	10 92 7d 0d 	sts	0x0D7D, r1	; 0x800d7d <twi_slarw>
    6954:	30 91 7d 0d 	lds	r19, 0x0D7D	; 0x800d7d <twi_slarw>
    6958:	88 0f       	add	r24, r24
    695a:	83 2b       	or	r24, r19
    695c:	80 93 7d 0d 	sts	0x0D7D, r24	; 0x800d7d <twi_slarw>
    6960:	80 91 7b 0d 	lds	r24, 0x0D7B	; 0x800d7b <twi_inRepStart>
    6964:	81 30       	cpi	r24, 0x01	; 1
    6966:	61 f4       	brne	.+24     	; 0x6980 <twi_writeTo+0x6e>
    6968:	10 92 7b 0d 	sts	0x0D7B, r1	; 0x800d7b <twi_inRepStart>
    696c:	80 91 7d 0d 	lds	r24, 0x0D7D	; 0x800d7d <twi_slarw>
    6970:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6974:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6978:	83 fd       	sbrc	r24, 3
    697a:	f8 cf       	rjmp	.-16     	; 0x696c <twi_writeTo+0x5a>
    697c:	85 ec       	ldi	r24, 0xC5	; 197
    697e:	01 c0       	rjmp	.+2      	; 0x6982 <twi_writeTo+0x70>
    6980:	85 ee       	ldi	r24, 0xE5	; 229
    6982:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6986:	22 23       	and	r18, r18
    6988:	21 f0       	breq	.+8      	; 0x6992 <twi_writeTo+0x80>
    698a:	80 91 7e 0d 	lds	r24, 0x0D7E	; 0x800d7e <twi_state>
    698e:	82 30       	cpi	r24, 0x02	; 2
    6990:	d1 f3       	breq	.-12     	; 0x6986 <twi_writeTo+0x74>
    6992:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <twi_error>
    6996:	8f 3f       	cpi	r24, 0xFF	; 255
    6998:	79 f0       	breq	.+30     	; 0x69b8 <twi_writeTo+0xa6>
    699a:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <twi_error>
    699e:	80 32       	cpi	r24, 0x20	; 32
    69a0:	41 f0       	breq	.+16     	; 0x69b2 <twi_writeTo+0xa0>
    69a2:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <twi_error>
    69a6:	80 33       	cpi	r24, 0x30	; 48
    69a8:	31 f0       	breq	.+12     	; 0x69b6 <twi_writeTo+0xa4>
    69aa:	94 e0       	ldi	r25, 0x04	; 4
    69ac:	05 c0       	rjmp	.+10     	; 0x69b8 <twi_writeTo+0xa6>
    69ae:	91 e0       	ldi	r25, 0x01	; 1
    69b0:	03 c0       	rjmp	.+6      	; 0x69b8 <twi_writeTo+0xa6>
    69b2:	92 e0       	ldi	r25, 0x02	; 2
    69b4:	01 c0       	rjmp	.+2      	; 0x69b8 <twi_writeTo+0xa6>
    69b6:	93 e0       	ldi	r25, 0x03	; 3
    69b8:	89 2f       	mov	r24, r25
    69ba:	0f 91       	pop	r16
    69bc:	08 95       	ret

000069be <twi_transmit>:
    69be:	40 91 33 0d 	lds	r20, 0x0D33	; 0x800d33 <twi_txBufferLength>
    69c2:	26 2f       	mov	r18, r22
    69c4:	30 e0       	ldi	r19, 0x00	; 0
    69c6:	24 0f       	add	r18, r20
    69c8:	31 1d       	adc	r19, r1
    69ca:	21 32       	cpi	r18, 0x21	; 33
    69cc:	31 05       	cpc	r19, r1
    69ce:	dc f4       	brge	.+54     	; 0x6a06 <twi_transmit+0x48>
    69d0:	20 91 7e 0d 	lds	r18, 0x0D7E	; 0x800d7e <twi_state>
    69d4:	24 30       	cpi	r18, 0x04	; 4
    69d6:	c9 f4       	brne	.+50     	; 0x6a0a <twi_transmit+0x4c>
    69d8:	fc 01       	movw	r30, r24
    69da:	80 e0       	ldi	r24, 0x00	; 0
    69dc:	90 e0       	ldi	r25, 0x00	; 0
    69de:	86 17       	cp	r24, r22
    69e0:	58 f4       	brcc	.+22     	; 0x69f8 <twi_transmit+0x3a>
    69e2:	30 91 33 0d 	lds	r19, 0x0D33	; 0x800d33 <twi_txBufferLength>
    69e6:	21 91       	ld	r18, Z+
    69e8:	dc 01       	movw	r26, r24
    69ea:	ab 5c       	subi	r26, 0xCB	; 203
    69ec:	b2 4f       	sbci	r27, 0xF2	; 242
    69ee:	a3 0f       	add	r26, r19
    69f0:	b1 1d       	adc	r27, r1
    69f2:	2c 93       	st	X, r18
    69f4:	01 96       	adiw	r24, 0x01	; 1
    69f6:	f3 cf       	rjmp	.-26     	; 0x69de <twi_transmit+0x20>
    69f8:	80 91 33 0d 	lds	r24, 0x0D33	; 0x800d33 <twi_txBufferLength>
    69fc:	68 0f       	add	r22, r24
    69fe:	60 93 33 0d 	sts	0x0D33, r22	; 0x800d33 <twi_txBufferLength>
    6a02:	80 e0       	ldi	r24, 0x00	; 0
    6a04:	08 95       	ret
    6a06:	81 e0       	ldi	r24, 0x01	; 1
    6a08:	08 95       	ret
    6a0a:	82 e0       	ldi	r24, 0x02	; 2
    6a0c:	08 95       	ret

00006a0e <twi_attachSlaveRxEvent>:
    6a0e:	90 93 78 0d 	sts	0x0D78, r25	; 0x800d78 <twi_onSlaveReceive+0x1>
    6a12:	80 93 77 0d 	sts	0x0D77, r24	; 0x800d77 <twi_onSlaveReceive>
    6a16:	08 95       	ret

00006a18 <twi_attachSlaveTxEvent>:
    6a18:	90 93 7a 0d 	sts	0x0D7A, r25	; 0x800d7a <twi_onSlaveTransmit+0x1>
    6a1c:	80 93 79 0d 	sts	0x0D79, r24	; 0x800d79 <twi_onSlaveTransmit>
    6a20:	08 95       	ret

00006a22 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6a22:	85 ed       	ldi	r24, 0xD5	; 213
    6a24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6a28:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6a2c:	84 fd       	sbrc	r24, 4
    6a2e:	fc cf       	rjmp	.-8      	; 0x6a28 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6a30:	10 92 7e 0d 	sts	0x0D7E, r1	; 0x800d7e <twi_state>
    6a34:	08 95       	ret

00006a36 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    6a36:	85 ec       	ldi	r24, 0xC5	; 197
    6a38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    6a3c:	10 92 7e 0d 	sts	0x0D7E, r1	; 0x800d7e <twi_state>
    6a40:	08 95       	ret

00006a42 <__vector_26>:
}

ISR(TWI_vect)
{
    6a42:	1f 92       	push	r1
    6a44:	0f 92       	push	r0
    6a46:	0f b6       	in	r0, 0x3f	; 63
    6a48:	0f 92       	push	r0
    6a4a:	11 24       	eor	r1, r1
    6a4c:	0b b6       	in	r0, 0x3b	; 59
    6a4e:	0f 92       	push	r0
    6a50:	2f 93       	push	r18
    6a52:	3f 93       	push	r19
    6a54:	4f 93       	push	r20
    6a56:	5f 93       	push	r21
    6a58:	6f 93       	push	r22
    6a5a:	7f 93       	push	r23
    6a5c:	8f 93       	push	r24
    6a5e:	9f 93       	push	r25
    6a60:	af 93       	push	r26
    6a62:	bf 93       	push	r27
    6a64:	ef 93       	push	r30
    6a66:	ff 93       	push	r31
  switch(TW_STATUS){
    6a68:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    6a6c:	88 7f       	andi	r24, 0xF8	; 248
    6a6e:	80 36       	cpi	r24, 0x60	; 96
    6a70:	09 f4       	brne	.+2      	; 0x6a74 <__vector_26+0x32>
    6a72:	9d c0       	rjmp	.+314    	; 0x6bae <__vector_26+0x16c>
    6a74:	70 f5       	brcc	.+92     	; 0x6ad2 <__vector_26+0x90>
    6a76:	88 32       	cpi	r24, 0x28	; 40
    6a78:	09 f4       	brne	.+2      	; 0x6a7c <__vector_26+0x3a>
    6a7a:	5c c0       	rjmp	.+184    	; 0x6b34 <__vector_26+0xf2>
    6a7c:	90 f4       	brcc	.+36     	; 0x6aa2 <__vector_26+0x60>
    6a7e:	80 31       	cpi	r24, 0x10	; 16
    6a80:	09 f4       	brne	.+2      	; 0x6a84 <__vector_26+0x42>
    6a82:	55 c0       	rjmp	.+170    	; 0x6b2e <__vector_26+0xec>
    6a84:	38 f4       	brcc	.+14     	; 0x6a94 <__vector_26+0x52>
    6a86:	88 23       	and	r24, r24
    6a88:	09 f4       	brne	.+2      	; 0x6a8c <__vector_26+0x4a>
    6a8a:	f3 c0       	rjmp	.+486    	; 0x6c72 <__vector_26+0x230>
    6a8c:	88 30       	cpi	r24, 0x08	; 8
    6a8e:	09 f4       	brne	.+2      	; 0x6a92 <__vector_26+0x50>
    6a90:	4e c0       	rjmp	.+156    	; 0x6b2e <__vector_26+0xec>
    6a92:	f2 c0       	rjmp	.+484    	; 0x6c78 <__vector_26+0x236>
    6a94:	88 31       	cpi	r24, 0x18	; 24
    6a96:	09 f4       	brne	.+2      	; 0x6a9a <__vector_26+0x58>
    6a98:	4d c0       	rjmp	.+154    	; 0x6b34 <__vector_26+0xf2>
    6a9a:	80 32       	cpi	r24, 0x20	; 32
    6a9c:	09 f4       	brne	.+2      	; 0x6aa0 <__vector_26+0x5e>
    6a9e:	5e c0       	rjmp	.+188    	; 0x6b5c <__vector_26+0x11a>
    6aa0:	eb c0       	rjmp	.+470    	; 0x6c78 <__vector_26+0x236>
    6aa2:	80 34       	cpi	r24, 0x40	; 64
    6aa4:	09 f4       	brne	.+2      	; 0x6aa8 <__vector_26+0x66>
    6aa6:	69 c0       	rjmp	.+210    	; 0x6b7a <__vector_26+0x138>
    6aa8:	50 f4       	brcc	.+20     	; 0x6abe <__vector_26+0x7c>
    6aaa:	80 33       	cpi	r24, 0x30	; 48
    6aac:	09 f4       	brne	.+2      	; 0x6ab0 <__vector_26+0x6e>
    6aae:	56 c0       	rjmp	.+172    	; 0x6b5c <__vector_26+0x11a>
    6ab0:	88 33       	cpi	r24, 0x38	; 56
    6ab2:	09 f0       	breq	.+2      	; 0x6ab6 <__vector_26+0x74>
    6ab4:	e1 c0       	rjmp	.+450    	; 0x6c78 <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    6ab6:	80 93 11 0d 	sts	0x0D11, r24	; 0x800d11 <twi_error>
      twi_releaseBus();
    6aba:	bd df       	rcall	.-134    	; 0x6a36 <twi_releaseBus>
      break;
    6abc:	dd c0       	rjmp	.+442    	; 0x6c78 <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    6abe:	80 35       	cpi	r24, 0x50	; 80
    6ac0:	09 f4       	brne	.+2      	; 0x6ac4 <__vector_26+0x82>
    6ac2:	4f c0       	rjmp	.+158    	; 0x6b62 <__vector_26+0x120>
    6ac4:	88 35       	cpi	r24, 0x58	; 88
    6ac6:	09 f4       	brne	.+2      	; 0x6aca <__vector_26+0x88>
    6ac8:	5d c0       	rjmp	.+186    	; 0x6b84 <__vector_26+0x142>
    6aca:	88 34       	cpi	r24, 0x48	; 72
    6acc:	09 f0       	breq	.+2      	; 0x6ad0 <__vector_26+0x8e>
    6ace:	d4 c0       	rjmp	.+424    	; 0x6c78 <__vector_26+0x236>
    6ad0:	d2 c0       	rjmp	.+420    	; 0x6c76 <__vector_26+0x234>
    6ad2:	88 39       	cpi	r24, 0x98	; 152
    6ad4:	09 f4       	brne	.+2      	; 0x6ad8 <__vector_26+0x96>
    6ad6:	c3 c0       	rjmp	.+390    	; 0x6c5e <__vector_26+0x21c>
    6ad8:	a8 f4       	brcc	.+42     	; 0x6b04 <__vector_26+0xc2>
    6ada:	88 37       	cpi	r24, 0x78	; 120
    6adc:	09 f4       	brne	.+2      	; 0x6ae0 <__vector_26+0x9e>
    6ade:	67 c0       	rjmp	.+206    	; 0x6bae <__vector_26+0x16c>
    6ae0:	38 f4       	brcc	.+14     	; 0x6af0 <__vector_26+0xae>
    6ae2:	88 36       	cpi	r24, 0x68	; 104
    6ae4:	09 f4       	brne	.+2      	; 0x6ae8 <__vector_26+0xa6>
    6ae6:	63 c0       	rjmp	.+198    	; 0x6bae <__vector_26+0x16c>
    6ae8:	80 37       	cpi	r24, 0x70	; 112
    6aea:	09 f4       	brne	.+2      	; 0x6aee <__vector_26+0xac>
    6aec:	60 c0       	rjmp	.+192    	; 0x6bae <__vector_26+0x16c>
    6aee:	c4 c0       	rjmp	.+392    	; 0x6c78 <__vector_26+0x236>
    6af0:	88 38       	cpi	r24, 0x88	; 136
    6af2:	09 f4       	brne	.+2      	; 0x6af6 <__vector_26+0xb4>
    6af4:	b4 c0       	rjmp	.+360    	; 0x6c5e <__vector_26+0x21c>
    6af6:	80 39       	cpi	r24, 0x90	; 144
    6af8:	09 f4       	brne	.+2      	; 0x6afc <__vector_26+0xba>
    6afa:	5f c0       	rjmp	.+190    	; 0x6bba <__vector_26+0x178>
    6afc:	80 38       	cpi	r24, 0x80	; 128
    6afe:	09 f0       	breq	.+2      	; 0x6b02 <__vector_26+0xc0>
    6b00:	bb c0       	rjmp	.+374    	; 0x6c78 <__vector_26+0x236>
    6b02:	5b c0       	rjmp	.+182    	; 0x6bba <__vector_26+0x178>
    6b04:	80 3b       	cpi	r24, 0xB0	; 176
    6b06:	09 f4       	brne	.+2      	; 0x6b0a <__vector_26+0xc8>
    6b08:	82 c0       	rjmp	.+260    	; 0x6c0e <__vector_26+0x1cc>
    6b0a:	38 f4       	brcc	.+14     	; 0x6b1a <__vector_26+0xd8>
    6b0c:	80 3a       	cpi	r24, 0xA0	; 160
    6b0e:	09 f4       	brne	.+2      	; 0x6b12 <__vector_26+0xd0>
    6b10:	66 c0       	rjmp	.+204    	; 0x6bde <__vector_26+0x19c>
    6b12:	88 3a       	cpi	r24, 0xA8	; 168
    6b14:	09 f4       	brne	.+2      	; 0x6b18 <__vector_26+0xd6>
    6b16:	7b c0       	rjmp	.+246    	; 0x6c0e <__vector_26+0x1cc>
    6b18:	af c0       	rjmp	.+350    	; 0x6c78 <__vector_26+0x236>
    6b1a:	80 3c       	cpi	r24, 0xC0	; 192
    6b1c:	09 f4       	brne	.+2      	; 0x6b20 <__vector_26+0xde>
    6b1e:	a3 c0       	rjmp	.+326    	; 0x6c66 <__vector_26+0x224>
    6b20:	88 3c       	cpi	r24, 0xC8	; 200
    6b22:	09 f4       	brne	.+2      	; 0x6b26 <__vector_26+0xe4>
    6b24:	a0 c0       	rjmp	.+320    	; 0x6c66 <__vector_26+0x224>
    6b26:	88 3b       	cpi	r24, 0xB8	; 184
    6b28:	09 f4       	brne	.+2      	; 0x6b2c <__vector_26+0xea>
    6b2a:	86 c0       	rjmp	.+268    	; 0x6c38 <__vector_26+0x1f6>
    6b2c:	a5 c0       	rjmp	.+330    	; 0x6c78 <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    6b2e:	80 91 7d 0d 	lds	r24, 0x0D7D	; 0x800d7d <twi_slarw>
    6b32:	10 c0       	rjmp	.+32     	; 0x6b54 <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6b34:	90 91 56 0d 	lds	r25, 0x0D56	; 0x800d56 <twi_masterBufferIndex>
    6b38:	80 91 55 0d 	lds	r24, 0x0D55	; 0x800d55 <twi_masterBufferLength>
    6b3c:	98 17       	cp	r25, r24
    6b3e:	70 f5       	brcc	.+92     	; 0x6b9c <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    6b40:	e0 91 56 0d 	lds	r30, 0x0D56	; 0x800d56 <twi_masterBufferIndex>
    6b44:	81 e0       	ldi	r24, 0x01	; 1
    6b46:	8e 0f       	add	r24, r30
    6b48:	80 93 56 0d 	sts	0x0D56, r24	; 0x800d56 <twi_masterBufferIndex>
    6b4c:	f0 e0       	ldi	r31, 0x00	; 0
    6b4e:	e9 5a       	subi	r30, 0xA9	; 169
    6b50:	f2 4f       	sbci	r31, 0xF2	; 242
    6b52:	80 81       	ld	r24, Z
    6b54:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6b58:	85 ec       	ldi	r24, 0xC5	; 197
    6b5a:	82 c0       	rjmp	.+260    	; 0x6c60 <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    6b5c:	80 93 11 0d 	sts	0x0D11, r24	; 0x800d11 <twi_error>
    6b60:	8a c0       	rjmp	.+276    	; 0x6c76 <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6b62:	e0 91 56 0d 	lds	r30, 0x0D56	; 0x800d56 <twi_masterBufferIndex>
    6b66:	81 e0       	ldi	r24, 0x01	; 1
    6b68:	8e 0f       	add	r24, r30
    6b6a:	80 93 56 0d 	sts	0x0D56, r24	; 0x800d56 <twi_masterBufferIndex>
    6b6e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6b72:	f0 e0       	ldi	r31, 0x00	; 0
    6b74:	e9 5a       	subi	r30, 0xA9	; 169
    6b76:	f2 4f       	sbci	r31, 0xF2	; 242
    6b78:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6b7a:	90 91 56 0d 	lds	r25, 0x0D56	; 0x800d56 <twi_masterBufferIndex>
    6b7e:	80 91 55 0d 	lds	r24, 0x0D55	; 0x800d55 <twi_masterBufferLength>
    6b82:	6a c0       	rjmp	.+212    	; 0x6c58 <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6b84:	e0 91 56 0d 	lds	r30, 0x0D56	; 0x800d56 <twi_masterBufferIndex>
    6b88:	81 e0       	ldi	r24, 0x01	; 1
    6b8a:	8e 0f       	add	r24, r30
    6b8c:	80 93 56 0d 	sts	0x0D56, r24	; 0x800d56 <twi_masterBufferIndex>
    6b90:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6b94:	f0 e0       	ldi	r31, 0x00	; 0
    6b96:	e9 5a       	subi	r30, 0xA9	; 169
    6b98:	f2 4f       	sbci	r31, 0xF2	; 242
    6b9a:	80 83       	st	Z, r24
	if (twi_sendStop)
    6b9c:	80 91 7c 0d 	lds	r24, 0x0D7C	; 0x800d7c <twi_sendStop>
    6ba0:	81 11       	cpse	r24, r1
    6ba2:	69 c0       	rjmp	.+210    	; 0x6c76 <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    6ba4:	81 e0       	ldi	r24, 0x01	; 1
    6ba6:	80 93 7b 0d 	sts	0x0D7B, r24	; 0x800d7b <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6baa:	84 ea       	ldi	r24, 0xA4	; 164
    6bac:	5d c0       	rjmp	.+186    	; 0x6c68 <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6bae:	83 e0       	ldi	r24, 0x03	; 3
    6bb0:	80 93 7e 0d 	sts	0x0D7E, r24	; 0x800d7e <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    6bb4:	10 92 12 0d 	sts	0x0D12, r1	; 0x800d12 <twi_rxBufferIndex>
    6bb8:	cf cf       	rjmp	.-98     	; 0x6b58 <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6bba:	80 91 12 0d 	lds	r24, 0x0D12	; 0x800d12 <twi_rxBufferIndex>
    6bbe:	80 32       	cpi	r24, 0x20	; 32
    6bc0:	08 f0       	brcs	.+2      	; 0x6bc4 <__vector_26+0x182>
    6bc2:	4d c0       	rjmp	.+154    	; 0x6c5e <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    6bc4:	e0 91 12 0d 	lds	r30, 0x0D12	; 0x800d12 <twi_rxBufferIndex>
    6bc8:	81 e0       	ldi	r24, 0x01	; 1
    6bca:	8e 0f       	add	r24, r30
    6bcc:	80 93 12 0d 	sts	0x0D12, r24	; 0x800d12 <twi_rxBufferIndex>
    6bd0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6bd4:	f0 e0       	ldi	r31, 0x00	; 0
    6bd6:	ed 5e       	subi	r30, 0xED	; 237
    6bd8:	f2 4f       	sbci	r31, 0xF2	; 242
    6bda:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    6bdc:	bd cf       	rjmp	.-134    	; 0x6b58 <__vector_26+0x116>
    6bde:	2b df       	rcall	.-426    	; 0x6a36 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6be0:	80 91 12 0d 	lds	r24, 0x0D12	; 0x800d12 <twi_rxBufferIndex>
    6be4:	80 32       	cpi	r24, 0x20	; 32
    6be6:	30 f4       	brcc	.+12     	; 0x6bf4 <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6be8:	e0 91 12 0d 	lds	r30, 0x0D12	; 0x800d12 <twi_rxBufferIndex>
    6bec:	f0 e0       	ldi	r31, 0x00	; 0
    6bee:	ed 5e       	subi	r30, 0xED	; 237
    6bf0:	f2 4f       	sbci	r31, 0xF2	; 242
    6bf2:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    6bf4:	60 91 12 0d 	lds	r22, 0x0D12	; 0x800d12 <twi_rxBufferIndex>
    6bf8:	70 e0       	ldi	r23, 0x00	; 0
    6bfa:	e0 91 77 0d 	lds	r30, 0x0D77	; 0x800d77 <twi_onSlaveReceive>
    6bfe:	f0 91 78 0d 	lds	r31, 0x0D78	; 0x800d78 <twi_onSlaveReceive+0x1>
    6c02:	83 e1       	ldi	r24, 0x13	; 19
    6c04:	9d e0       	ldi	r25, 0x0D	; 13
    6c06:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6c08:	10 92 12 0d 	sts	0x0D12, r1	; 0x800d12 <twi_rxBufferIndex>
      break;
    6c0c:	35 c0       	rjmp	.+106    	; 0x6c78 <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    6c0e:	84 e0       	ldi	r24, 0x04	; 4
    6c10:	80 93 7e 0d 	sts	0x0D7E, r24	; 0x800d7e <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6c14:	10 92 34 0d 	sts	0x0D34, r1	; 0x800d34 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6c18:	10 92 33 0d 	sts	0x0D33, r1	; 0x800d33 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6c1c:	e0 91 79 0d 	lds	r30, 0x0D79	; 0x800d79 <twi_onSlaveTransmit>
    6c20:	f0 91 7a 0d 	lds	r31, 0x0D7A	; 0x800d7a <twi_onSlaveTransmit+0x1>
    6c24:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6c26:	80 91 33 0d 	lds	r24, 0x0D33	; 0x800d33 <twi_txBufferLength>
    6c2a:	81 11       	cpse	r24, r1
    6c2c:	05 c0       	rjmp	.+10     	; 0x6c38 <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    6c2e:	81 e0       	ldi	r24, 0x01	; 1
    6c30:	80 93 33 0d 	sts	0x0D33, r24	; 0x800d33 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    6c34:	10 92 35 0d 	sts	0x0D35, r1	; 0x800d35 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    6c38:	e0 91 34 0d 	lds	r30, 0x0D34	; 0x800d34 <twi_txBufferIndex>
    6c3c:	81 e0       	ldi	r24, 0x01	; 1
    6c3e:	8e 0f       	add	r24, r30
    6c40:	80 93 34 0d 	sts	0x0D34, r24	; 0x800d34 <twi_txBufferIndex>
    6c44:	f0 e0       	ldi	r31, 0x00	; 0
    6c46:	eb 5c       	subi	r30, 0xCB	; 203
    6c48:	f2 4f       	sbci	r31, 0xF2	; 242
    6c4a:	80 81       	ld	r24, Z
    6c4c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6c50:	90 91 34 0d 	lds	r25, 0x0D34	; 0x800d34 <twi_txBufferIndex>
    6c54:	80 91 33 0d 	lds	r24, 0x0D33	; 0x800d33 <twi_txBufferLength>
    6c58:	98 17       	cp	r25, r24
    6c5a:	08 f4       	brcc	.+2      	; 0x6c5e <__vector_26+0x21c>
    6c5c:	7d cf       	rjmp	.-262    	; 0x6b58 <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6c5e:	85 e8       	ldi	r24, 0x85	; 133
    6c60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6c64:	09 c0       	rjmp	.+18     	; 0x6c78 <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6c66:	85 ec       	ldi	r24, 0xC5	; 197
    6c68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    6c6c:	10 92 7e 0d 	sts	0x0D7E, r1	; 0x800d7e <twi_state>
      break;
    6c70:	03 c0       	rjmp	.+6      	; 0x6c78 <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    6c72:	10 92 11 0d 	sts	0x0D11, r1	; 0x800d11 <twi_error>
      twi_stop();
    6c76:	d5 de       	rcall	.-598    	; 0x6a22 <twi_stop>
      break;
  }
}
    6c78:	ff 91       	pop	r31
    6c7a:	ef 91       	pop	r30
    6c7c:	bf 91       	pop	r27
    6c7e:	af 91       	pop	r26
    6c80:	9f 91       	pop	r25
    6c82:	8f 91       	pop	r24
    6c84:	7f 91       	pop	r23
    6c86:	6f 91       	pop	r22
    6c88:	5f 91       	pop	r21
    6c8a:	4f 91       	pop	r20
    6c8c:	3f 91       	pop	r19
    6c8e:	2f 91       	pop	r18
    6c90:	0f 90       	pop	r0
    6c92:	0b be       	out	0x3b, r0	; 59
    6c94:	0f 90       	pop	r0
    6c96:	0f be       	out	0x3f, r0	; 63
    6c98:	0f 90       	pop	r0
    6c9a:	1f 90       	pop	r1
    6c9c:	18 95       	reti

00006c9e <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    6c9e:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <_ZN7TwoWire14rxBufferLengthE>
    6ca2:	90 e0       	ldi	r25, 0x00	; 0
    6ca4:	20 91 b4 0d 	lds	r18, 0x0DB4	; 0x800db4 <_ZN7TwoWire13rxBufferIndexE>
    6ca8:	82 1b       	sub	r24, r18
    6caa:	91 09       	sbc	r25, r1
    6cac:	08 95       	ret

00006cae <_ZN7TwoWire4readEv>:
    6cae:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <_ZN7TwoWire13rxBufferIndexE>
    6cb2:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <_ZN7TwoWire14rxBufferLengthE>
    6cb6:	98 17       	cp	r25, r24
    6cb8:	50 f4       	brcc	.+20     	; 0x6cce <_ZN7TwoWire4readEv+0x20>
    6cba:	e9 2f       	mov	r30, r25
    6cbc:	f0 e0       	ldi	r31, 0x00	; 0
    6cbe:	eb 54       	subi	r30, 0x4B	; 75
    6cc0:	f2 4f       	sbci	r31, 0xF2	; 242
    6cc2:	20 81       	ld	r18, Z
    6cc4:	30 e0       	ldi	r19, 0x00	; 0
    6cc6:	9f 5f       	subi	r25, 0xFF	; 255
    6cc8:	90 93 b4 0d 	sts	0x0DB4, r25	; 0x800db4 <_ZN7TwoWire13rxBufferIndexE>
    6ccc:	02 c0       	rjmp	.+4      	; 0x6cd2 <_ZN7TwoWire4readEv+0x24>
    6cce:	2f ef       	ldi	r18, 0xFF	; 255
    6cd0:	3f ef       	ldi	r19, 0xFF	; 255
    6cd2:	c9 01       	movw	r24, r18
    6cd4:	08 95       	ret

00006cd6 <_ZN7TwoWire4peekEv>:
    6cd6:	e0 91 b4 0d 	lds	r30, 0x0DB4	; 0x800db4 <_ZN7TwoWire13rxBufferIndexE>
    6cda:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <_ZN7TwoWire14rxBufferLengthE>
    6cde:	e8 17       	cp	r30, r24
    6ce0:	30 f4       	brcc	.+12     	; 0x6cee <_ZN7TwoWire4peekEv+0x18>
    6ce2:	f0 e0       	ldi	r31, 0x00	; 0
    6ce4:	eb 54       	subi	r30, 0x4B	; 75
    6ce6:	f2 4f       	sbci	r31, 0xF2	; 242
    6ce8:	80 81       	ld	r24, Z
    6cea:	90 e0       	ldi	r25, 0x00	; 0
    6cec:	08 95       	ret
    6cee:	8f ef       	ldi	r24, 0xFF	; 255
    6cf0:	9f ef       	ldi	r25, 0xFF	; 255
    6cf2:	08 95       	ret

00006cf4 <_ZN7TwoWire5flushEv>:
    6cf4:	08 95       	ret

00006cf6 <_ZN7TwoWire16onReceiveServiceEPhi>:
    6cf6:	cf 93       	push	r28
    6cf8:	df 93       	push	r29
    6cfa:	ec 01       	movw	r28, r24
    6cfc:	e0 91 8b 0d 	lds	r30, 0x0D8B	; 0x800d8b <_ZN7TwoWire14user_onReceiveE>
    6d00:	f0 91 8c 0d 	lds	r31, 0x0D8C	; 0x800d8c <_ZN7TwoWire14user_onReceiveE+0x1>
    6d04:	30 97       	sbiw	r30, 0x00	; 0
    6d06:	f1 f0       	breq	.+60     	; 0x6d44 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6d08:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <_ZN7TwoWire13rxBufferIndexE>
    6d0c:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <_ZN7TwoWire14rxBufferLengthE>
    6d10:	98 17       	cp	r25, r24
    6d12:	c0 f0       	brcs	.+48     	; 0x6d44 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6d14:	90 e0       	ldi	r25, 0x00	; 0
    6d16:	29 2f       	mov	r18, r25
    6d18:	30 e0       	ldi	r19, 0x00	; 0
    6d1a:	26 17       	cp	r18, r22
    6d1c:	37 07       	cpc	r19, r23
    6d1e:	54 f4       	brge	.+20     	; 0x6d34 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    6d20:	de 01       	movw	r26, r28
    6d22:	a2 0f       	add	r26, r18
    6d24:	b3 1f       	adc	r27, r19
    6d26:	4c 91       	ld	r20, X
    6d28:	d9 01       	movw	r26, r18
    6d2a:	ab 54       	subi	r26, 0x4B	; 75
    6d2c:	b2 4f       	sbci	r27, 0xF2	; 242
    6d2e:	4c 93       	st	X, r20
    6d30:	9f 5f       	subi	r25, 0xFF	; 255
    6d32:	f1 cf       	rjmp	.-30     	; 0x6d16 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    6d34:	10 92 b4 0d 	sts	0x0DB4, r1	; 0x800db4 <_ZN7TwoWire13rxBufferIndexE>
    6d38:	60 93 b3 0d 	sts	0x0DB3, r22	; 0x800db3 <_ZN7TwoWire14rxBufferLengthE>
    6d3c:	cb 01       	movw	r24, r22
    6d3e:	df 91       	pop	r29
    6d40:	cf 91       	pop	r28
    6d42:	09 94       	ijmp
    6d44:	df 91       	pop	r29
    6d46:	cf 91       	pop	r28
    6d48:	08 95       	ret

00006d4a <_ZN7TwoWire16onRequestServiceEv>:
    6d4a:	e0 91 8d 0d 	lds	r30, 0x0D8D	; 0x800d8d <_ZN7TwoWire14user_onRequestE>
    6d4e:	f0 91 8e 0d 	lds	r31, 0x0D8E	; 0x800d8e <_ZN7TwoWire14user_onRequestE+0x1>
    6d52:	30 97       	sbiw	r30, 0x00	; 0
    6d54:	29 f0       	breq	.+10     	; 0x6d60 <_ZN7TwoWire16onRequestServiceEv+0x16>
    6d56:	10 92 91 0d 	sts	0x0D91, r1	; 0x800d91 <_ZN7TwoWire13txBufferIndexE>
    6d5a:	10 92 90 0d 	sts	0x0D90, r1	; 0x800d90 <_ZN7TwoWire14txBufferLengthE>
    6d5e:	09 94       	ijmp
    6d60:	08 95       	ret

00006d62 <_ZN7TwoWire5writeEPKhj>:
    6d62:	cf 92       	push	r12
    6d64:	df 92       	push	r13
    6d66:	ef 92       	push	r14
    6d68:	ff 92       	push	r15
    6d6a:	0f 93       	push	r16
    6d6c:	1f 93       	push	r17
    6d6e:	cf 93       	push	r28
    6d70:	df 93       	push	r29
    6d72:	7c 01       	movw	r14, r24
    6d74:	cb 01       	movw	r24, r22
    6d76:	8a 01       	movw	r16, r20
    6d78:	20 91 8f 0d 	lds	r18, 0x0D8F	; 0x800d8f <_ZN7TwoWire12transmittingE>
    6d7c:	22 23       	and	r18, r18
    6d7e:	89 f0       	breq	.+34     	; 0x6da2 <_ZN7TwoWire5writeEPKhj+0x40>
    6d80:	eb 01       	movw	r28, r22
    6d82:	6b 01       	movw	r12, r22
    6d84:	c4 0e       	add	r12, r20
    6d86:	d5 1e       	adc	r13, r21
    6d88:	cc 15       	cp	r28, r12
    6d8a:	dd 05       	cpc	r29, r13
    6d8c:	61 f0       	breq	.+24     	; 0x6da6 <_ZN7TwoWire5writeEPKhj+0x44>
    6d8e:	69 91       	ld	r22, Y+
    6d90:	d7 01       	movw	r26, r14
    6d92:	ed 91       	ld	r30, X+
    6d94:	fc 91       	ld	r31, X
    6d96:	01 90       	ld	r0, Z+
    6d98:	f0 81       	ld	r31, Z
    6d9a:	e0 2d       	mov	r30, r0
    6d9c:	c7 01       	movw	r24, r14
    6d9e:	09 95       	icall
    6da0:	f3 cf       	rjmp	.-26     	; 0x6d88 <_ZN7TwoWire5writeEPKhj+0x26>
    6da2:	64 2f       	mov	r22, r20
    6da4:	0c de       	rcall	.-1000   	; 0x69be <twi_transmit>
    6da6:	c8 01       	movw	r24, r16
    6da8:	df 91       	pop	r29
    6daa:	cf 91       	pop	r28
    6dac:	1f 91       	pop	r17
    6dae:	0f 91       	pop	r16
    6db0:	ff 90       	pop	r15
    6db2:	ef 90       	pop	r14
    6db4:	df 90       	pop	r13
    6db6:	cf 90       	pop	r12
    6db8:	08 95       	ret

00006dba <_ZN7TwoWire5writeEh>:
    6dba:	cf 93       	push	r28
    6dbc:	df 93       	push	r29
    6dbe:	1f 92       	push	r1
    6dc0:	cd b7       	in	r28, 0x3d	; 61
    6dc2:	de b7       	in	r29, 0x3e	; 62
    6dc4:	69 83       	std	Y+1, r22	; 0x01
    6dc6:	20 91 8f 0d 	lds	r18, 0x0D8F	; 0x800d8f <_ZN7TwoWire12transmittingE>
    6dca:	22 23       	and	r18, r18
    6dcc:	d1 f0       	breq	.+52     	; 0x6e02 <_ZN7TwoWire5writeEh+0x48>
    6dce:	20 91 90 0d 	lds	r18, 0x0D90	; 0x800d90 <_ZN7TwoWire14txBufferLengthE>
    6dd2:	20 32       	cpi	r18, 0x20	; 32
    6dd4:	40 f0       	brcs	.+16     	; 0x6de6 <_ZN7TwoWire5writeEh+0x2c>
    6dd6:	21 e0       	ldi	r18, 0x01	; 1
    6dd8:	30 e0       	ldi	r19, 0x00	; 0
    6dda:	fc 01       	movw	r30, r24
    6ddc:	33 83       	std	Z+3, r19	; 0x03
    6dde:	22 83       	std	Z+2, r18	; 0x02
    6de0:	80 e0       	ldi	r24, 0x00	; 0
    6de2:	90 e0       	ldi	r25, 0x00	; 0
    6de4:	14 c0       	rjmp	.+40     	; 0x6e0e <_ZN7TwoWire5writeEh+0x54>
    6de6:	80 91 91 0d 	lds	r24, 0x0D91	; 0x800d91 <_ZN7TwoWire13txBufferIndexE>
    6dea:	e8 2f       	mov	r30, r24
    6dec:	f0 e0       	ldi	r31, 0x00	; 0
    6dee:	ee 56       	subi	r30, 0x6E	; 110
    6df0:	f2 4f       	sbci	r31, 0xF2	; 242
    6df2:	99 81       	ldd	r25, Y+1	; 0x01
    6df4:	90 83       	st	Z, r25
    6df6:	8f 5f       	subi	r24, 0xFF	; 255
    6df8:	80 93 91 0d 	sts	0x0D91, r24	; 0x800d91 <_ZN7TwoWire13txBufferIndexE>
    6dfc:	80 93 90 0d 	sts	0x0D90, r24	; 0x800d90 <_ZN7TwoWire14txBufferLengthE>
    6e00:	04 c0       	rjmp	.+8      	; 0x6e0a <_ZN7TwoWire5writeEh+0x50>
    6e02:	61 e0       	ldi	r22, 0x01	; 1
    6e04:	ce 01       	movw	r24, r28
    6e06:	01 96       	adiw	r24, 0x01	; 1
    6e08:	da dd       	rcall	.-1100   	; 0x69be <twi_transmit>
    6e0a:	81 e0       	ldi	r24, 0x01	; 1
    6e0c:	90 e0       	ldi	r25, 0x00	; 0
    6e0e:	0f 90       	pop	r0
    6e10:	df 91       	pop	r29
    6e12:	cf 91       	pop	r28
    6e14:	08 95       	ret

00006e16 <_ZN7TwoWireC1Ev>:
    6e16:	fc 01       	movw	r30, r24
    6e18:	13 82       	std	Z+3, r1	; 0x03
    6e1a:	12 82       	std	Z+2, r1	; 0x02
    6e1c:	88 ee       	ldi	r24, 0xE8	; 232
    6e1e:	93 e0       	ldi	r25, 0x03	; 3
    6e20:	a0 e0       	ldi	r26, 0x00	; 0
    6e22:	b0 e0       	ldi	r27, 0x00	; 0
    6e24:	84 83       	std	Z+4, r24	; 0x04
    6e26:	95 83       	std	Z+5, r25	; 0x05
    6e28:	a6 83       	std	Z+6, r26	; 0x06
    6e2a:	b7 83       	std	Z+7, r27	; 0x07
    6e2c:	8d ec       	ldi	r24, 0xCD	; 205
    6e2e:	99 e0       	ldi	r25, 0x09	; 9
    6e30:	91 83       	std	Z+1, r25	; 0x01
    6e32:	80 83       	st	Z, r24
    6e34:	08 95       	ret

00006e36 <_ZN7TwoWire5beginEv>:
    6e36:	10 92 b4 0d 	sts	0x0DB4, r1	; 0x800db4 <_ZN7TwoWire13rxBufferIndexE>
    6e3a:	10 92 b3 0d 	sts	0x0DB3, r1	; 0x800db3 <_ZN7TwoWire14rxBufferLengthE>
    6e3e:	10 92 91 0d 	sts	0x0D91, r1	; 0x800d91 <_ZN7TwoWire13txBufferIndexE>
    6e42:	10 92 90 0d 	sts	0x0D90, r1	; 0x800d90 <_ZN7TwoWire14txBufferLengthE>
    6e46:	de dc       	rcall	.-1604   	; 0x6804 <twi_init>
    6e48:	85 ea       	ldi	r24, 0xA5	; 165
    6e4a:	96 e3       	ldi	r25, 0x36	; 54
    6e4c:	e5 dd       	rcall	.-1078   	; 0x6a18 <twi_attachSlaveTxEvent>
    6e4e:	8b e7       	ldi	r24, 0x7B	; 123
    6e50:	96 e3       	ldi	r25, 0x36	; 54
    6e52:	dd cd       	rjmp	.-1094   	; 0x6a0e <twi_attachSlaveRxEvent>

00006e54 <_ZN7TwoWire3endEv>:
    6e54:	f5 cc       	rjmp	.-1558   	; 0x6840 <twi_disable>

00006e56 <_ZN7TwoWire8setClockEm>:
    6e56:	cb 01       	movw	r24, r22
    6e58:	ba 01       	movw	r22, r20
    6e5a:	ff cc       	rjmp	.-1538   	; 0x685a <twi_setFrequency>

00006e5c <_ZN7TwoWire17beginTransmissionEh>:
    6e5c:	81 e0       	ldi	r24, 0x01	; 1
    6e5e:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <_ZN7TwoWire12transmittingE>
    6e62:	60 93 b2 0d 	sts	0x0DB2, r22	; 0x800db2 <_ZN7TwoWire9txAddressE>
    6e66:	10 92 91 0d 	sts	0x0D91, r1	; 0x800d91 <_ZN7TwoWire13txBufferIndexE>
    6e6a:	10 92 90 0d 	sts	0x0D90, r1	; 0x800d90 <_ZN7TwoWire14txBufferLengthE>
    6e6e:	08 95       	ret

00006e70 <_ZN7TwoWire17beginTransmissionEi>:
    6e70:	f5 cf       	rjmp	.-22     	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>

00006e72 <_ZN7TwoWire15endTransmissionEh>:
    6e72:	0f 93       	push	r16
    6e74:	06 2f       	mov	r16, r22
    6e76:	21 e0       	ldi	r18, 0x01	; 1
    6e78:	40 91 90 0d 	lds	r20, 0x0D90	; 0x800d90 <_ZN7TwoWire14txBufferLengthE>
    6e7c:	62 e9       	ldi	r22, 0x92	; 146
    6e7e:	7d e0       	ldi	r23, 0x0D	; 13
    6e80:	80 91 b2 0d 	lds	r24, 0x0DB2	; 0x800db2 <_ZN7TwoWire9txAddressE>
    6e84:	46 dd       	rcall	.-1396   	; 0x6912 <twi_writeTo>
    6e86:	10 92 91 0d 	sts	0x0D91, r1	; 0x800d91 <_ZN7TwoWire13txBufferIndexE>
    6e8a:	10 92 90 0d 	sts	0x0D90, r1	; 0x800d90 <_ZN7TwoWire14txBufferLengthE>
    6e8e:	10 92 8f 0d 	sts	0x0D8F, r1	; 0x800d8f <_ZN7TwoWire12transmittingE>
    6e92:	0f 91       	pop	r16
    6e94:	08 95       	ret

00006e96 <_ZN7TwoWire11requestFromEhhmhh>:
    6e96:	4f 92       	push	r4
    6e98:	5f 92       	push	r5
    6e9a:	6f 92       	push	r6
    6e9c:	7f 92       	push	r7
    6e9e:	af 92       	push	r10
    6ea0:	bf 92       	push	r11
    6ea2:	cf 92       	push	r12
    6ea4:	ef 92       	push	r14
    6ea6:	ff 92       	push	r15
    6ea8:	0f 93       	push	r16
    6eaa:	1f 93       	push	r17
    6eac:	cf 93       	push	r28
    6eae:	df 93       	push	r29
    6eb0:	5c 01       	movw	r10, r24
    6eb2:	f6 2e       	mov	r15, r22
    6eb4:	d4 2f       	mov	r29, r20
    6eb6:	28 01       	movw	r4, r16
    6eb8:	39 01       	movw	r6, r18
    6eba:	ee 20       	and	r14, r14
    6ebc:	11 f1       	breq	.+68     	; 0x6f02 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    6ebe:	ce df       	rcall	.-100    	; 0x6e5c <_ZN7TwoWire17beginTransmissionEh>
    6ec0:	ce 2d       	mov	r28, r14
    6ec2:	c4 30       	cpi	r28, 0x04	; 4
    6ec4:	08 f0       	brcs	.+2      	; 0x6ec8 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6ec6:	c3 e0       	ldi	r28, 0x03	; 3
    6ec8:	c1 50       	subi	r28, 0x01	; 1
    6eca:	c0 f0       	brcs	.+48     	; 0x6efc <_ZN7TwoWire11requestFromEhhmhh+0x66>
    6ecc:	28 e0       	ldi	r18, 0x08	; 8
    6ece:	c2 9f       	mul	r28, r18
    6ed0:	c0 01       	movw	r24, r0
    6ed2:	11 24       	eor	r1, r1
    6ed4:	a3 01       	movw	r20, r6
    6ed6:	92 01       	movw	r18, r4
    6ed8:	04 c0       	rjmp	.+8      	; 0x6ee2 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    6eda:	56 95       	lsr	r21
    6edc:	47 95       	ror	r20
    6ede:	37 95       	ror	r19
    6ee0:	27 95       	ror	r18
    6ee2:	8a 95       	dec	r24
    6ee4:	d2 f7       	brpl	.-12     	; 0x6eda <_ZN7TwoWire11requestFromEhhmhh+0x44>
    6ee6:	ca 01       	movw	r24, r20
    6ee8:	b9 01       	movw	r22, r18
    6eea:	d5 01       	movw	r26, r10
    6eec:	ed 91       	ld	r30, X+
    6eee:	fc 91       	ld	r31, X
    6ef0:	01 90       	ld	r0, Z+
    6ef2:	f0 81       	ld	r31, Z
    6ef4:	e0 2d       	mov	r30, r0
    6ef6:	c5 01       	movw	r24, r10
    6ef8:	09 95       	icall
    6efa:	e6 cf       	rjmp	.-52     	; 0x6ec8 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6efc:	60 e0       	ldi	r22, 0x00	; 0
    6efe:	c5 01       	movw	r24, r10
    6f00:	b8 df       	rcall	.-144    	; 0x6e72 <_ZN7TwoWire15endTransmissionEh>
    6f02:	4d 2f       	mov	r20, r29
    6f04:	d1 32       	cpi	r29, 0x21	; 33
    6f06:	08 f0       	brcs	.+2      	; 0x6f0a <_ZN7TwoWire11requestFromEhhmhh+0x74>
    6f08:	40 e2       	ldi	r20, 0x20	; 32
    6f0a:	2c 2d       	mov	r18, r12
    6f0c:	65 eb       	ldi	r22, 0xB5	; 181
    6f0e:	7d e0       	ldi	r23, 0x0D	; 13
    6f10:	8f 2d       	mov	r24, r15
    6f12:	b7 dc       	rcall	.-1682   	; 0x6882 <twi_readFrom>
    6f14:	10 92 b4 0d 	sts	0x0DB4, r1	; 0x800db4 <_ZN7TwoWire13rxBufferIndexE>
    6f18:	80 93 b3 0d 	sts	0x0DB3, r24	; 0x800db3 <_ZN7TwoWire14rxBufferLengthE>
    6f1c:	df 91       	pop	r29
    6f1e:	cf 91       	pop	r28
    6f20:	1f 91       	pop	r17
    6f22:	0f 91       	pop	r16
    6f24:	ff 90       	pop	r15
    6f26:	ef 90       	pop	r14
    6f28:	cf 90       	pop	r12
    6f2a:	bf 90       	pop	r11
    6f2c:	af 90       	pop	r10
    6f2e:	7f 90       	pop	r7
    6f30:	6f 90       	pop	r6
    6f32:	5f 90       	pop	r5
    6f34:	4f 90       	pop	r4
    6f36:	08 95       	ret

00006f38 <_ZN7TwoWire11requestFromEhhh>:
    6f38:	cf 92       	push	r12
    6f3a:	ef 92       	push	r14
    6f3c:	0f 93       	push	r16
    6f3e:	1f 93       	push	r17
    6f40:	c2 2e       	mov	r12, r18
    6f42:	e1 2c       	mov	r14, r1
    6f44:	00 e0       	ldi	r16, 0x00	; 0
    6f46:	10 e0       	ldi	r17, 0x00	; 0
    6f48:	98 01       	movw	r18, r16
    6f4a:	a5 df       	rcall	.-182    	; 0x6e96 <_ZN7TwoWire11requestFromEhhmhh>
    6f4c:	1f 91       	pop	r17
    6f4e:	0f 91       	pop	r16
    6f50:	ef 90       	pop	r14
    6f52:	cf 90       	pop	r12
    6f54:	08 95       	ret

00006f56 <_ZN7TwoWire11requestFromEhh>:
    6f56:	21 e0       	ldi	r18, 0x01	; 1
    6f58:	ef cf       	rjmp	.-34     	; 0x6f38 <_ZN7TwoWire11requestFromEhhh>

00006f5a <_ZN7TwoWire11requestFromEii>:
    6f5a:	21 e0       	ldi	r18, 0x01	; 1
    6f5c:	ed cf       	rjmp	.-38     	; 0x6f38 <_ZN7TwoWire11requestFromEhhh>

00006f5e <_ZN7TwoWire15endTransmissionEv>:
    6f5e:	61 e0       	ldi	r22, 0x01	; 1
    6f60:	88 cf       	rjmp	.-240    	; 0x6e72 <_ZN7TwoWire15endTransmissionEh>

00006f62 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    6f62:	8f e7       	ldi	r24, 0x7F	; 127
    6f64:	9d e0       	ldi	r25, 0x0D	; 13
    6f66:	57 cf       	rjmp	.-338    	; 0x6e16 <_ZN7TwoWireC1Ev>

00006f68 <__cmpsf2>:
    6f68:	a8 d0       	rcall	.+336    	; 0x70ba <__fp_cmp>
    6f6a:	08 f4       	brcc	.+2      	; 0x6f6e <__cmpsf2+0x6>
    6f6c:	81 e0       	ldi	r24, 0x01	; 1
    6f6e:	08 95       	ret

00006f70 <__divsf3>:
    6f70:	0c d0       	rcall	.+24     	; 0x6f8a <__divsf3x>
    6f72:	de c0       	rjmp	.+444    	; 0x7130 <__fp_round>
    6f74:	d6 d0       	rcall	.+428    	; 0x7122 <__fp_pscB>
    6f76:	40 f0       	brcs	.+16     	; 0x6f88 <__divsf3+0x18>
    6f78:	cd d0       	rcall	.+410    	; 0x7114 <__fp_pscA>
    6f7a:	30 f0       	brcs	.+12     	; 0x6f88 <__divsf3+0x18>
    6f7c:	21 f4       	brne	.+8      	; 0x6f86 <__divsf3+0x16>
    6f7e:	5f 3f       	cpi	r21, 0xFF	; 255
    6f80:	19 f0       	breq	.+6      	; 0x6f88 <__divsf3+0x18>
    6f82:	bf c0       	rjmp	.+382    	; 0x7102 <__fp_inf>
    6f84:	51 11       	cpse	r21, r1
    6f86:	08 c1       	rjmp	.+528    	; 0x7198 <__fp_szero>
    6f88:	c2 c0       	rjmp	.+388    	; 0x710e <__fp_nan>

00006f8a <__divsf3x>:
    6f8a:	e3 d0       	rcall	.+454    	; 0x7152 <__fp_split3>
    6f8c:	98 f3       	brcs	.-26     	; 0x6f74 <__divsf3+0x4>

00006f8e <__divsf3_pse>:
    6f8e:	99 23       	and	r25, r25
    6f90:	c9 f3       	breq	.-14     	; 0x6f84 <__divsf3+0x14>
    6f92:	55 23       	and	r21, r21
    6f94:	b1 f3       	breq	.-20     	; 0x6f82 <__divsf3+0x12>
    6f96:	95 1b       	sub	r25, r21
    6f98:	55 0b       	sbc	r21, r21
    6f9a:	bb 27       	eor	r27, r27
    6f9c:	aa 27       	eor	r26, r26
    6f9e:	62 17       	cp	r22, r18
    6fa0:	73 07       	cpc	r23, r19
    6fa2:	84 07       	cpc	r24, r20
    6fa4:	38 f0       	brcs	.+14     	; 0x6fb4 <__divsf3_pse+0x26>
    6fa6:	9f 5f       	subi	r25, 0xFF	; 255
    6fa8:	5f 4f       	sbci	r21, 0xFF	; 255
    6faa:	22 0f       	add	r18, r18
    6fac:	33 1f       	adc	r19, r19
    6fae:	44 1f       	adc	r20, r20
    6fb0:	aa 1f       	adc	r26, r26
    6fb2:	a9 f3       	breq	.-22     	; 0x6f9e <__divsf3_pse+0x10>
    6fb4:	33 d0       	rcall	.+102    	; 0x701c <__divsf3_pse+0x8e>
    6fb6:	0e 2e       	mov	r0, r30
    6fb8:	3a f0       	brmi	.+14     	; 0x6fc8 <__divsf3_pse+0x3a>
    6fba:	e0 e8       	ldi	r30, 0x80	; 128
    6fbc:	30 d0       	rcall	.+96     	; 0x701e <__divsf3_pse+0x90>
    6fbe:	91 50       	subi	r25, 0x01	; 1
    6fc0:	50 40       	sbci	r21, 0x00	; 0
    6fc2:	e6 95       	lsr	r30
    6fc4:	00 1c       	adc	r0, r0
    6fc6:	ca f7       	brpl	.-14     	; 0x6fba <__divsf3_pse+0x2c>
    6fc8:	29 d0       	rcall	.+82     	; 0x701c <__divsf3_pse+0x8e>
    6fca:	fe 2f       	mov	r31, r30
    6fcc:	27 d0       	rcall	.+78     	; 0x701c <__divsf3_pse+0x8e>
    6fce:	66 0f       	add	r22, r22
    6fd0:	77 1f       	adc	r23, r23
    6fd2:	88 1f       	adc	r24, r24
    6fd4:	bb 1f       	adc	r27, r27
    6fd6:	26 17       	cp	r18, r22
    6fd8:	37 07       	cpc	r19, r23
    6fda:	48 07       	cpc	r20, r24
    6fdc:	ab 07       	cpc	r26, r27
    6fde:	b0 e8       	ldi	r27, 0x80	; 128
    6fe0:	09 f0       	breq	.+2      	; 0x6fe4 <__divsf3_pse+0x56>
    6fe2:	bb 0b       	sbc	r27, r27
    6fe4:	80 2d       	mov	r24, r0
    6fe6:	bf 01       	movw	r22, r30
    6fe8:	ff 27       	eor	r31, r31
    6fea:	93 58       	subi	r25, 0x83	; 131
    6fec:	5f 4f       	sbci	r21, 0xFF	; 255
    6fee:	2a f0       	brmi	.+10     	; 0x6ffa <__divsf3_pse+0x6c>
    6ff0:	9e 3f       	cpi	r25, 0xFE	; 254
    6ff2:	51 05       	cpc	r21, r1
    6ff4:	68 f0       	brcs	.+26     	; 0x7010 <__divsf3_pse+0x82>
    6ff6:	85 c0       	rjmp	.+266    	; 0x7102 <__fp_inf>
    6ff8:	cf c0       	rjmp	.+414    	; 0x7198 <__fp_szero>
    6ffa:	5f 3f       	cpi	r21, 0xFF	; 255
    6ffc:	ec f3       	brlt	.-6      	; 0x6ff8 <__divsf3_pse+0x6a>
    6ffe:	98 3e       	cpi	r25, 0xE8	; 232
    7000:	dc f3       	brlt	.-10     	; 0x6ff8 <__divsf3_pse+0x6a>
    7002:	86 95       	lsr	r24
    7004:	77 95       	ror	r23
    7006:	67 95       	ror	r22
    7008:	b7 95       	ror	r27
    700a:	f7 95       	ror	r31
    700c:	9f 5f       	subi	r25, 0xFF	; 255
    700e:	c9 f7       	brne	.-14     	; 0x7002 <__divsf3_pse+0x74>
    7010:	88 0f       	add	r24, r24
    7012:	91 1d       	adc	r25, r1
    7014:	96 95       	lsr	r25
    7016:	87 95       	ror	r24
    7018:	97 f9       	bld	r25, 7
    701a:	08 95       	ret
    701c:	e1 e0       	ldi	r30, 0x01	; 1
    701e:	66 0f       	add	r22, r22
    7020:	77 1f       	adc	r23, r23
    7022:	88 1f       	adc	r24, r24
    7024:	bb 1f       	adc	r27, r27
    7026:	62 17       	cp	r22, r18
    7028:	73 07       	cpc	r23, r19
    702a:	84 07       	cpc	r24, r20
    702c:	ba 07       	cpc	r27, r26
    702e:	20 f0       	brcs	.+8      	; 0x7038 <__divsf3_pse+0xaa>
    7030:	62 1b       	sub	r22, r18
    7032:	73 0b       	sbc	r23, r19
    7034:	84 0b       	sbc	r24, r20
    7036:	ba 0b       	sbc	r27, r26
    7038:	ee 1f       	adc	r30, r30
    703a:	88 f7       	brcc	.-30     	; 0x701e <__divsf3_pse+0x90>
    703c:	e0 95       	com	r30
    703e:	08 95       	ret

00007040 <__floatunsisf>:
    7040:	e8 94       	clt
    7042:	09 c0       	rjmp	.+18     	; 0x7056 <__floatsisf+0x12>

00007044 <__floatsisf>:
    7044:	97 fb       	bst	r25, 7
    7046:	3e f4       	brtc	.+14     	; 0x7056 <__floatsisf+0x12>
    7048:	90 95       	com	r25
    704a:	80 95       	com	r24
    704c:	70 95       	com	r23
    704e:	61 95       	neg	r22
    7050:	7f 4f       	sbci	r23, 0xFF	; 255
    7052:	8f 4f       	sbci	r24, 0xFF	; 255
    7054:	9f 4f       	sbci	r25, 0xFF	; 255
    7056:	99 23       	and	r25, r25
    7058:	a9 f0       	breq	.+42     	; 0x7084 <__floatsisf+0x40>
    705a:	f9 2f       	mov	r31, r25
    705c:	96 e9       	ldi	r25, 0x96	; 150
    705e:	bb 27       	eor	r27, r27
    7060:	93 95       	inc	r25
    7062:	f6 95       	lsr	r31
    7064:	87 95       	ror	r24
    7066:	77 95       	ror	r23
    7068:	67 95       	ror	r22
    706a:	b7 95       	ror	r27
    706c:	f1 11       	cpse	r31, r1
    706e:	f8 cf       	rjmp	.-16     	; 0x7060 <__floatsisf+0x1c>
    7070:	fa f4       	brpl	.+62     	; 0x70b0 <__floatsisf+0x6c>
    7072:	bb 0f       	add	r27, r27
    7074:	11 f4       	brne	.+4      	; 0x707a <__floatsisf+0x36>
    7076:	60 ff       	sbrs	r22, 0
    7078:	1b c0       	rjmp	.+54     	; 0x70b0 <__floatsisf+0x6c>
    707a:	6f 5f       	subi	r22, 0xFF	; 255
    707c:	7f 4f       	sbci	r23, 0xFF	; 255
    707e:	8f 4f       	sbci	r24, 0xFF	; 255
    7080:	9f 4f       	sbci	r25, 0xFF	; 255
    7082:	16 c0       	rjmp	.+44     	; 0x70b0 <__floatsisf+0x6c>
    7084:	88 23       	and	r24, r24
    7086:	11 f0       	breq	.+4      	; 0x708c <__floatsisf+0x48>
    7088:	96 e9       	ldi	r25, 0x96	; 150
    708a:	11 c0       	rjmp	.+34     	; 0x70ae <__floatsisf+0x6a>
    708c:	77 23       	and	r23, r23
    708e:	21 f0       	breq	.+8      	; 0x7098 <__floatsisf+0x54>
    7090:	9e e8       	ldi	r25, 0x8E	; 142
    7092:	87 2f       	mov	r24, r23
    7094:	76 2f       	mov	r23, r22
    7096:	05 c0       	rjmp	.+10     	; 0x70a2 <__floatsisf+0x5e>
    7098:	66 23       	and	r22, r22
    709a:	71 f0       	breq	.+28     	; 0x70b8 <__floatsisf+0x74>
    709c:	96 e8       	ldi	r25, 0x86	; 134
    709e:	86 2f       	mov	r24, r22
    70a0:	70 e0       	ldi	r23, 0x00	; 0
    70a2:	60 e0       	ldi	r22, 0x00	; 0
    70a4:	2a f0       	brmi	.+10     	; 0x70b0 <__floatsisf+0x6c>
    70a6:	9a 95       	dec	r25
    70a8:	66 0f       	add	r22, r22
    70aa:	77 1f       	adc	r23, r23
    70ac:	88 1f       	adc	r24, r24
    70ae:	da f7       	brpl	.-10     	; 0x70a6 <__floatsisf+0x62>
    70b0:	88 0f       	add	r24, r24
    70b2:	96 95       	lsr	r25
    70b4:	87 95       	ror	r24
    70b6:	97 f9       	bld	r25, 7
    70b8:	08 95       	ret

000070ba <__fp_cmp>:
    70ba:	99 0f       	add	r25, r25
    70bc:	00 08       	sbc	r0, r0
    70be:	55 0f       	add	r21, r21
    70c0:	aa 0b       	sbc	r26, r26
    70c2:	e0 e8       	ldi	r30, 0x80	; 128
    70c4:	fe ef       	ldi	r31, 0xFE	; 254
    70c6:	16 16       	cp	r1, r22
    70c8:	17 06       	cpc	r1, r23
    70ca:	e8 07       	cpc	r30, r24
    70cc:	f9 07       	cpc	r31, r25
    70ce:	c0 f0       	brcs	.+48     	; 0x7100 <__fp_cmp+0x46>
    70d0:	12 16       	cp	r1, r18
    70d2:	13 06       	cpc	r1, r19
    70d4:	e4 07       	cpc	r30, r20
    70d6:	f5 07       	cpc	r31, r21
    70d8:	98 f0       	brcs	.+38     	; 0x7100 <__fp_cmp+0x46>
    70da:	62 1b       	sub	r22, r18
    70dc:	73 0b       	sbc	r23, r19
    70de:	84 0b       	sbc	r24, r20
    70e0:	95 0b       	sbc	r25, r21
    70e2:	39 f4       	brne	.+14     	; 0x70f2 <__fp_cmp+0x38>
    70e4:	0a 26       	eor	r0, r26
    70e6:	61 f0       	breq	.+24     	; 0x7100 <__fp_cmp+0x46>
    70e8:	23 2b       	or	r18, r19
    70ea:	24 2b       	or	r18, r20
    70ec:	25 2b       	or	r18, r21
    70ee:	21 f4       	brne	.+8      	; 0x70f8 <__fp_cmp+0x3e>
    70f0:	08 95       	ret
    70f2:	0a 26       	eor	r0, r26
    70f4:	09 f4       	brne	.+2      	; 0x70f8 <__fp_cmp+0x3e>
    70f6:	a1 40       	sbci	r26, 0x01	; 1
    70f8:	a6 95       	lsr	r26
    70fa:	8f ef       	ldi	r24, 0xFF	; 255
    70fc:	81 1d       	adc	r24, r1
    70fe:	81 1d       	adc	r24, r1
    7100:	08 95       	ret

00007102 <__fp_inf>:
    7102:	97 f9       	bld	r25, 7
    7104:	9f 67       	ori	r25, 0x7F	; 127
    7106:	80 e8       	ldi	r24, 0x80	; 128
    7108:	70 e0       	ldi	r23, 0x00	; 0
    710a:	60 e0       	ldi	r22, 0x00	; 0
    710c:	08 95       	ret

0000710e <__fp_nan>:
    710e:	9f ef       	ldi	r25, 0xFF	; 255
    7110:	80 ec       	ldi	r24, 0xC0	; 192
    7112:	08 95       	ret

00007114 <__fp_pscA>:
    7114:	00 24       	eor	r0, r0
    7116:	0a 94       	dec	r0
    7118:	16 16       	cp	r1, r22
    711a:	17 06       	cpc	r1, r23
    711c:	18 06       	cpc	r1, r24
    711e:	09 06       	cpc	r0, r25
    7120:	08 95       	ret

00007122 <__fp_pscB>:
    7122:	00 24       	eor	r0, r0
    7124:	0a 94       	dec	r0
    7126:	12 16       	cp	r1, r18
    7128:	13 06       	cpc	r1, r19
    712a:	14 06       	cpc	r1, r20
    712c:	05 06       	cpc	r0, r21
    712e:	08 95       	ret

00007130 <__fp_round>:
    7130:	09 2e       	mov	r0, r25
    7132:	03 94       	inc	r0
    7134:	00 0c       	add	r0, r0
    7136:	11 f4       	brne	.+4      	; 0x713c <__fp_round+0xc>
    7138:	88 23       	and	r24, r24
    713a:	52 f0       	brmi	.+20     	; 0x7150 <__fp_round+0x20>
    713c:	bb 0f       	add	r27, r27
    713e:	40 f4       	brcc	.+16     	; 0x7150 <__fp_round+0x20>
    7140:	bf 2b       	or	r27, r31
    7142:	11 f4       	brne	.+4      	; 0x7148 <__fp_round+0x18>
    7144:	60 ff       	sbrs	r22, 0
    7146:	04 c0       	rjmp	.+8      	; 0x7150 <__fp_round+0x20>
    7148:	6f 5f       	subi	r22, 0xFF	; 255
    714a:	7f 4f       	sbci	r23, 0xFF	; 255
    714c:	8f 4f       	sbci	r24, 0xFF	; 255
    714e:	9f 4f       	sbci	r25, 0xFF	; 255
    7150:	08 95       	ret

00007152 <__fp_split3>:
    7152:	57 fd       	sbrc	r21, 7
    7154:	90 58       	subi	r25, 0x80	; 128
    7156:	44 0f       	add	r20, r20
    7158:	55 1f       	adc	r21, r21
    715a:	59 f0       	breq	.+22     	; 0x7172 <__fp_splitA+0x10>
    715c:	5f 3f       	cpi	r21, 0xFF	; 255
    715e:	71 f0       	breq	.+28     	; 0x717c <__fp_splitA+0x1a>
    7160:	47 95       	ror	r20

00007162 <__fp_splitA>:
    7162:	88 0f       	add	r24, r24
    7164:	97 fb       	bst	r25, 7
    7166:	99 1f       	adc	r25, r25
    7168:	61 f0       	breq	.+24     	; 0x7182 <__fp_splitA+0x20>
    716a:	9f 3f       	cpi	r25, 0xFF	; 255
    716c:	79 f0       	breq	.+30     	; 0x718c <__fp_splitA+0x2a>
    716e:	87 95       	ror	r24
    7170:	08 95       	ret
    7172:	12 16       	cp	r1, r18
    7174:	13 06       	cpc	r1, r19
    7176:	14 06       	cpc	r1, r20
    7178:	55 1f       	adc	r21, r21
    717a:	f2 cf       	rjmp	.-28     	; 0x7160 <__fp_split3+0xe>
    717c:	46 95       	lsr	r20
    717e:	f1 df       	rcall	.-30     	; 0x7162 <__fp_splitA>
    7180:	08 c0       	rjmp	.+16     	; 0x7192 <__fp_splitA+0x30>
    7182:	16 16       	cp	r1, r22
    7184:	17 06       	cpc	r1, r23
    7186:	18 06       	cpc	r1, r24
    7188:	99 1f       	adc	r25, r25
    718a:	f1 cf       	rjmp	.-30     	; 0x716e <__fp_splitA+0xc>
    718c:	86 95       	lsr	r24
    718e:	71 05       	cpc	r23, r1
    7190:	61 05       	cpc	r22, r1
    7192:	08 94       	sec
    7194:	08 95       	ret

00007196 <__fp_zero>:
    7196:	e8 94       	clt

00007198 <__fp_szero>:
    7198:	bb 27       	eor	r27, r27
    719a:	66 27       	eor	r22, r22
    719c:	77 27       	eor	r23, r23
    719e:	cb 01       	movw	r24, r22
    71a0:	97 f9       	bld	r25, 7
    71a2:	08 95       	ret

000071a4 <__cxa_pure_virtual>:
    71a4:	0e 94 fc 43 	call	0x87f8	; 0x87f8 <abort>

000071a8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    71a8:	1f 92       	push	r1
    71aa:	0f 92       	push	r0
    71ac:	0f b6       	in	r0, 0x3f	; 63
    71ae:	0f 92       	push	r0
    71b0:	11 24       	eor	r1, r1
    71b2:	2f 93       	push	r18
    71b4:	8f 93       	push	r24
    71b6:	9f 93       	push	r25
    71b8:	ef 93       	push	r30
    71ba:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    71bc:	e0 91 e5 0d 	lds	r30, 0x0DE5	; 0x800de5 <Serial+0x10>
    71c0:	f0 91 e6 0d 	lds	r31, 0x0DE6	; 0x800de6 <Serial+0x11>
    71c4:	80 81       	ld	r24, Z
    71c6:	e0 91 eb 0d 	lds	r30, 0x0DEB	; 0x800deb <Serial+0x16>
    71ca:	f0 91 ec 0d 	lds	r31, 0x0DEC	; 0x800dec <Serial+0x17>
    71ce:	82 fd       	sbrc	r24, 2
    71d0:	12 c0       	rjmp	.+36     	; 0x71f6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    71d2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    71d4:	80 91 ee 0d 	lds	r24, 0x0DEE	; 0x800dee <Serial+0x19>
    71d8:	8f 5f       	subi	r24, 0xFF	; 255
    71da:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    71dc:	20 91 ef 0d 	lds	r18, 0x0DEF	; 0x800def <Serial+0x1a>
    71e0:	82 17       	cp	r24, r18
    71e2:	51 f0       	breq	.+20     	; 0x71f8 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    71e4:	e0 91 ee 0d 	lds	r30, 0x0DEE	; 0x800dee <Serial+0x19>
    71e8:	f0 e0       	ldi	r31, 0x00	; 0
    71ea:	eb 52       	subi	r30, 0x2B	; 43
    71ec:	f2 4f       	sbci	r31, 0xF2	; 242
    71ee:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    71f0:	80 93 ee 0d 	sts	0x0DEE, r24	; 0x800dee <Serial+0x19>
    71f4:	01 c0       	rjmp	.+2      	; 0x71f8 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    71f6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    71f8:	ff 91       	pop	r31
    71fa:	ef 91       	pop	r30
    71fc:	9f 91       	pop	r25
    71fe:	8f 91       	pop	r24
    7200:	2f 91       	pop	r18
    7202:	0f 90       	pop	r0
    7204:	0f be       	out	0x3f, r0	; 63
    7206:	0f 90       	pop	r0
    7208:	1f 90       	pop	r1
    720a:	18 95       	reti

0000720c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    720c:	1f 92       	push	r1
    720e:	0f 92       	push	r0
    7210:	0f b6       	in	r0, 0x3f	; 63
    7212:	0f 92       	push	r0
    7214:	11 24       	eor	r1, r1
    7216:	2f 93       	push	r18
    7218:	3f 93       	push	r19
    721a:	4f 93       	push	r20
    721c:	5f 93       	push	r21
    721e:	6f 93       	push	r22
    7220:	7f 93       	push	r23
    7222:	8f 93       	push	r24
    7224:	9f 93       	push	r25
    7226:	af 93       	push	r26
    7228:	bf 93       	push	r27
    722a:	ef 93       	push	r30
    722c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    722e:	85 ed       	ldi	r24, 0xD5	; 213
    7230:	9d e0       	ldi	r25, 0x0D	; 13
    7232:	b2 d6       	rcall	.+3428   	; 0x7f98 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    7234:	ff 91       	pop	r31
    7236:	ef 91       	pop	r30
    7238:	bf 91       	pop	r27
    723a:	af 91       	pop	r26
    723c:	9f 91       	pop	r25
    723e:	8f 91       	pop	r24
    7240:	7f 91       	pop	r23
    7242:	6f 91       	pop	r22
    7244:	5f 91       	pop	r21
    7246:	4f 91       	pop	r20
    7248:	3f 91       	pop	r19
    724a:	2f 91       	pop	r18
    724c:	0f 90       	pop	r0
    724e:	0f be       	out	0x3f, r0	; 63
    7250:	0f 90       	pop	r0
    7252:	1f 90       	pop	r1
    7254:	18 95       	reti

00007256 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    7256:	85 ed       	ldi	r24, 0xD5	; 213
    7258:	9d e0       	ldi	r25, 0x0D	; 13
    725a:	54 d6       	rcall	.+3240   	; 0x7f04 <_ZN14HardwareSerial9availableEv>
    725c:	21 e0       	ldi	r18, 0x01	; 1
    725e:	89 2b       	or	r24, r25
    7260:	09 f4       	brne	.+2      	; 0x7264 <_Z17Serial0_availablev+0xe>
    7262:	20 e0       	ldi	r18, 0x00	; 0
}
    7264:	82 2f       	mov	r24, r18
    7266:	08 95       	ret

00007268 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    7268:	e5 ed       	ldi	r30, 0xD5	; 213
    726a:	fd e0       	ldi	r31, 0x0D	; 13
    726c:	13 82       	std	Z+3, r1	; 0x03
    726e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    7270:	88 ee       	ldi	r24, 0xE8	; 232
    7272:	93 e0       	ldi	r25, 0x03	; 3
    7274:	a0 e0       	ldi	r26, 0x00	; 0
    7276:	b0 e0       	ldi	r27, 0x00	; 0
    7278:	84 83       	std	Z+4, r24	; 0x04
    727a:	95 83       	std	Z+5, r25	; 0x05
    727c:	a6 83       	std	Z+6, r26	; 0x06
    727e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    7280:	81 ef       	ldi	r24, 0xF1	; 241
    7282:	99 e0       	ldi	r25, 0x09	; 9
    7284:	91 83       	std	Z+1, r25	; 0x01
    7286:	80 83       	st	Z, r24
    7288:	85 ec       	ldi	r24, 0xC5	; 197
    728a:	90 e0       	ldi	r25, 0x00	; 0
    728c:	95 87       	std	Z+13, r25	; 0x0d
    728e:	84 87       	std	Z+12, r24	; 0x0c
    7290:	84 ec       	ldi	r24, 0xC4	; 196
    7292:	90 e0       	ldi	r25, 0x00	; 0
    7294:	97 87       	std	Z+15, r25	; 0x0f
    7296:	86 87       	std	Z+14, r24	; 0x0e
    7298:	80 ec       	ldi	r24, 0xC0	; 192
    729a:	90 e0       	ldi	r25, 0x00	; 0
    729c:	91 8b       	std	Z+17, r25	; 0x11
    729e:	80 8b       	std	Z+16, r24	; 0x10
    72a0:	81 ec       	ldi	r24, 0xC1	; 193
    72a2:	90 e0       	ldi	r25, 0x00	; 0
    72a4:	93 8b       	std	Z+19, r25	; 0x13
    72a6:	82 8b       	std	Z+18, r24	; 0x12
    72a8:	82 ec       	ldi	r24, 0xC2	; 194
    72aa:	90 e0       	ldi	r25, 0x00	; 0
    72ac:	95 8b       	std	Z+21, r25	; 0x15
    72ae:	84 8b       	std	Z+20, r24	; 0x14
    72b0:	86 ec       	ldi	r24, 0xC6	; 198
    72b2:	90 e0       	ldi	r25, 0x00	; 0
    72b4:	97 8b       	std	Z+23, r25	; 0x17
    72b6:	86 8b       	std	Z+22, r24	; 0x16
    72b8:	11 8e       	std	Z+25, r1	; 0x19
    72ba:	12 8e       	std	Z+26, r1	; 0x1a
    72bc:	13 8e       	std	Z+27, r1	; 0x1b
    72be:	14 8e       	std	Z+28, r1	; 0x1c
    72c0:	08 95       	ret

000072c2 <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    72c2:	8f 92       	push	r8
    72c4:	9f 92       	push	r9
    72c6:	af 92       	push	r10
    72c8:	bf 92       	push	r11
    72ca:	cf 92       	push	r12
    72cc:	df 92       	push	r13
    72ce:	ef 92       	push	r14
    72d0:	ff 92       	push	r15
    72d2:	0f 93       	push	r16
    72d4:	1f 93       	push	r17
    72d6:	cf 93       	push	r28
    72d8:	df 93       	push	r29
    72da:	7c 01       	movw	r14, r24
    72dc:	8b 01       	movw	r16, r22
    72de:	4c 01       	movw	r8, r24
    72e0:	82 e0       	ldi	r24, 0x02	; 2
    72e2:	88 0e       	add	r8, r24
    72e4:	91 1c       	adc	r9, r1
    72e6:	57 01       	movw	r10, r14
    72e8:	e5 e0       	ldi	r30, 0x05	; 5
    72ea:	ae 0e       	add	r10, r30
    72ec:	b1 1c       	adc	r11, r1
    72ee:	c0 e0       	ldi	r28, 0x00	; 0
    72f0:	d0 e0       	ldi	r29, 0x00	; 0
    72f2:	f4 01       	movw	r30, r8
    72f4:	61 91       	ld	r22, Z+
    72f6:	4f 01       	movw	r8, r30
    72f8:	4a e0       	ldi	r20, 0x0A	; 10
    72fa:	50 e0       	ldi	r21, 0x00	; 0
    72fc:	c8 01       	movw	r24, r16
    72fe:	57 d1       	rcall	.+686    	; 0x75ae <_ZN5Print5printEhi>
    7300:	6c 01       	movw	r12, r24
    7302:	6e e2       	ldi	r22, 0x2E	; 46
    7304:	c8 01       	movw	r24, r16
    7306:	c6 d0       	rcall	.+396    	; 0x7494 <_ZN5Print5printEc>
    7308:	8c 0d       	add	r24, r12
    730a:	9d 1d       	adc	r25, r13
    730c:	c8 0f       	add	r28, r24
    730e:	d9 1f       	adc	r29, r25
    7310:	8a 14       	cp	r8, r10
    7312:	9b 04       	cpc	r9, r11
    7314:	71 f7       	brne	.-36     	; 0x72f2 <_ZNK9IPAddress7printToER5Print+0x30>
    7316:	4a e0       	ldi	r20, 0x0A	; 10
    7318:	50 e0       	ldi	r21, 0x00	; 0
    731a:	f7 01       	movw	r30, r14
    731c:	65 81       	ldd	r22, Z+5	; 0x05
    731e:	c8 01       	movw	r24, r16
    7320:	46 d1       	rcall	.+652    	; 0x75ae <_ZN5Print5printEhi>
    7322:	8c 0f       	add	r24, r28
    7324:	9d 1f       	adc	r25, r29
    7326:	df 91       	pop	r29
    7328:	cf 91       	pop	r28
    732a:	1f 91       	pop	r17
    732c:	0f 91       	pop	r16
    732e:	ff 90       	pop	r15
    7330:	ef 90       	pop	r14
    7332:	df 90       	pop	r13
    7334:	cf 90       	pop	r12
    7336:	bf 90       	pop	r11
    7338:	af 90       	pop	r10
    733a:	9f 90       	pop	r9
    733c:	8f 90       	pop	r8
    733e:	08 95       	ret

00007340 <_ZN9IPAddressC1Ev>:
    7340:	2f ed       	ldi	r18, 0xDF	; 223
    7342:	39 e0       	ldi	r19, 0x09	; 9
    7344:	fc 01       	movw	r30, r24
    7346:	31 83       	std	Z+1, r19	; 0x01
    7348:	20 83       	st	Z, r18
    734a:	12 82       	std	Z+2, r1	; 0x02
    734c:	13 82       	std	Z+3, r1	; 0x03
    734e:	14 82       	std	Z+4, r1	; 0x04
    7350:	15 82       	std	Z+5, r1	; 0x05
    7352:	08 95       	ret

00007354 <_ZN9IPAddressC1Ehhhh>:
    7354:	0f 93       	push	r16
    7356:	fc 01       	movw	r30, r24
    7358:	8f ed       	ldi	r24, 0xDF	; 223
    735a:	99 e0       	ldi	r25, 0x09	; 9
    735c:	91 83       	std	Z+1, r25	; 0x01
    735e:	80 83       	st	Z, r24
    7360:	62 83       	std	Z+2, r22	; 0x02
    7362:	43 83       	std	Z+3, r20	; 0x03
    7364:	24 83       	std	Z+4, r18	; 0x04
    7366:	05 83       	std	Z+5, r16	; 0x05
    7368:	0f 91       	pop	r16
    736a:	08 95       	ret

0000736c <_ZN9IPAddressC1EPKh>:
    736c:	dc 01       	movw	r26, r24
    736e:	8f ed       	ldi	r24, 0xDF	; 223
    7370:	99 e0       	ldi	r25, 0x09	; 9
    7372:	8d 93       	st	X+, r24
    7374:	9d 93       	st	X+, r25
    7376:	84 e0       	ldi	r24, 0x04	; 4
    7378:	fb 01       	movw	r30, r22
    737a:	01 90       	ld	r0, Z+
    737c:	0d 92       	st	X+, r0
    737e:	8a 95       	dec	r24
    7380:	e1 f7       	brne	.-8      	; 0x737a <_ZN9IPAddressC1EPKh+0xe>
    7382:	08 95       	ret

00007384 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    7384:	dc 01       	movw	r26, r24
    7386:	12 96       	adiw	r26, 0x02	; 2
    7388:	24 e0       	ldi	r18, 0x04	; 4
    738a:	fb 01       	movw	r30, r22
    738c:	01 90       	ld	r0, Z+
    738e:	0d 92       	st	X+, r0
    7390:	2a 95       	dec	r18
    7392:	e1 f7       	brne	.-8      	; 0x738c <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    7394:	08 95       	ret

00007396 <initVariant>:
    7396:	08 95       	ret

00007398 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    7398:	ef d1       	rcall	.+990    	; 0x7778 <init>

	initVariant();
    739a:	fd df       	rcall	.-6      	; 0x7396 <initVariant>
    739c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    73a0:	cf eb       	ldi	r28, 0xBF	; 191
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    73a2:	df e3       	ldi	r29, 0x3F	; 63
    73a4:	0e 94 98 12 	call	0x2530	; 0x2530 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    73a8:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    73aa:	e1 f3       	breq	.-8      	; 0x73a4 <main+0xc>
    73ac:	e8 d5       	rcall	.+3024   	; 0x7f7e <_Z14serialEventRunv>
    73ae:	fa cf       	rjmp	.-12     	; 0x73a4 <main+0xc>

000073b0 <_ZN5Print5writeEPKhj>:
    73b0:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    73b2:	df 92       	push	r13
    73b4:	ef 92       	push	r14
    73b6:	ff 92       	push	r15
    73b8:	0f 93       	push	r16
    73ba:	1f 93       	push	r17
    73bc:	cf 93       	push	r28
    73be:	df 93       	push	r29
    73c0:	6c 01       	movw	r12, r24
    73c2:	7a 01       	movw	r14, r20
    73c4:	8b 01       	movw	r16, r22
    73c6:	c0 e0       	ldi	r28, 0x00	; 0
    73c8:	d0 e0       	ldi	r29, 0x00	; 0
    73ca:	ce 15       	cp	r28, r14
    73cc:	df 05       	cpc	r29, r15
    73ce:	81 f0       	breq	.+32     	; 0x73f0 <_ZN5Print5writeEPKhj+0x40>
    73d0:	d8 01       	movw	r26, r16
    73d2:	6d 91       	ld	r22, X+
    73d4:	8d 01       	movw	r16, r26
    73d6:	d6 01       	movw	r26, r12
    73d8:	ed 91       	ld	r30, X+
    73da:	fc 91       	ld	r31, X
    73dc:	01 90       	ld	r0, Z+
    73de:	f0 81       	ld	r31, Z
    73e0:	e0 2d       	mov	r30, r0
    73e2:	c6 01       	movw	r24, r12
    73e4:	09 95       	icall
    73e6:	89 2b       	or	r24, r25
    73e8:	11 f0       	breq	.+4      	; 0x73ee <_ZN5Print5writeEPKhj+0x3e>
    73ea:	21 96       	adiw	r28, 0x01	; 1
    73ec:	ee cf       	rjmp	.-36     	; 0x73ca <_ZN5Print5writeEPKhj+0x1a>
    73ee:	7e 01       	movw	r14, r28
    73f0:	c7 01       	movw	r24, r14
    73f2:	df 91       	pop	r29
    73f4:	cf 91       	pop	r28
    73f6:	1f 91       	pop	r17
    73f8:	0f 91       	pop	r16
    73fa:	ff 90       	pop	r15
    73fc:	ef 90       	pop	r14
    73fe:	df 90       	pop	r13
    7400:	cf 90       	pop	r12
    7402:	08 95       	ret

00007404 <_ZN5Print5writeEPKc>:
    7404:	61 15       	cp	r22, r1
    7406:	71 05       	cpc	r23, r1
    7408:	79 f0       	breq	.+30     	; 0x7428 <_ZN5Print5writeEPKc+0x24>
    740a:	fb 01       	movw	r30, r22
    740c:	01 90       	ld	r0, Z+
    740e:	00 20       	and	r0, r0
    7410:	e9 f7       	brne	.-6      	; 0x740c <_ZN5Print5writeEPKc+0x8>
    7412:	31 97       	sbiw	r30, 0x01	; 1
    7414:	af 01       	movw	r20, r30
    7416:	46 1b       	sub	r20, r22
    7418:	57 0b       	sbc	r21, r23
    741a:	dc 01       	movw	r26, r24
    741c:	ed 91       	ld	r30, X+
    741e:	fc 91       	ld	r31, X
    7420:	02 80       	ldd	r0, Z+2	; 0x02
    7422:	f3 81       	ldd	r31, Z+3	; 0x03
    7424:	e0 2d       	mov	r30, r0
    7426:	09 94       	ijmp
    7428:	80 e0       	ldi	r24, 0x00	; 0
    742a:	90 e0       	ldi	r25, 0x00	; 0
    742c:	08 95       	ret

0000742e <_ZN5Print5printEPK19__FlashStringHelper>:
    742e:	ef 92       	push	r14
    7430:	ff 92       	push	r15
    7432:	0f 93       	push	r16
    7434:	1f 93       	push	r17
    7436:	cf 93       	push	r28
    7438:	df 93       	push	r29
    743a:	8c 01       	movw	r16, r24
    743c:	7b 01       	movw	r14, r22
    743e:	c0 e0       	ldi	r28, 0x00	; 0
    7440:	d0 e0       	ldi	r29, 0x00	; 0
    7442:	f7 01       	movw	r30, r14
    7444:	ec 0f       	add	r30, r28
    7446:	fd 1f       	adc	r31, r29
    7448:	64 91       	lpm	r22, Z
    744a:	66 23       	and	r22, r22
    744c:	61 f0       	breq	.+24     	; 0x7466 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    744e:	d8 01       	movw	r26, r16
    7450:	ed 91       	ld	r30, X+
    7452:	fc 91       	ld	r31, X
    7454:	01 90       	ld	r0, Z+
    7456:	f0 81       	ld	r31, Z
    7458:	e0 2d       	mov	r30, r0
    745a:	c8 01       	movw	r24, r16
    745c:	09 95       	icall
    745e:	89 2b       	or	r24, r25
    7460:	11 f0       	breq	.+4      	; 0x7466 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    7462:	21 96       	adiw	r28, 0x01	; 1
    7464:	ee cf       	rjmp	.-36     	; 0x7442 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    7466:	ce 01       	movw	r24, r28
    7468:	df 91       	pop	r29
    746a:	cf 91       	pop	r28
    746c:	1f 91       	pop	r17
    746e:	0f 91       	pop	r16
    7470:	ff 90       	pop	r15
    7472:	ef 90       	pop	r14
    7474:	08 95       	ret

00007476 <_ZN5Print5printERK6String>:
    7476:	db 01       	movw	r26, r22
    7478:	14 96       	adiw	r26, 0x04	; 4
    747a:	4d 91       	ld	r20, X+
    747c:	5c 91       	ld	r21, X
    747e:	15 97       	sbiw	r26, 0x05	; 5
    7480:	6d 91       	ld	r22, X+
    7482:	7c 91       	ld	r23, X
    7484:	dc 01       	movw	r26, r24
    7486:	ed 91       	ld	r30, X+
    7488:	fc 91       	ld	r31, X
    748a:	02 80       	ldd	r0, Z+2	; 0x02
    748c:	f3 81       	ldd	r31, Z+3	; 0x03
    748e:	e0 2d       	mov	r30, r0
    7490:	09 94       	ijmp

00007492 <_ZN5Print5printEPKc>:
    7492:	b8 cf       	rjmp	.-144    	; 0x7404 <_ZN5Print5writeEPKc>

00007494 <_ZN5Print5printEc>:
    7494:	dc 01       	movw	r26, r24
    7496:	ed 91       	ld	r30, X+
    7498:	fc 91       	ld	r31, X
    749a:	01 90       	ld	r0, Z+
    749c:	f0 81       	ld	r31, Z
    749e:	e0 2d       	mov	r30, r0
    74a0:	09 94       	ijmp

000074a2 <_ZN5Print7printlnEv>:
    74a2:	61 e1       	ldi	r22, 0x11	; 17
    74a4:	77 e0       	ldi	r23, 0x07	; 7
    74a6:	ae cf       	rjmp	.-164    	; 0x7404 <_ZN5Print5writeEPKc>

000074a8 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    74a8:	0f 93       	push	r16
    74aa:	1f 93       	push	r17
    74ac:	cf 93       	push	r28
    74ae:	df 93       	push	r29
    74b0:	ec 01       	movw	r28, r24
    74b2:	bd df       	rcall	.-134    	; 0x742e <_ZN5Print5printEPK19__FlashStringHelper>
    74b4:	8c 01       	movw	r16, r24
    74b6:	ce 01       	movw	r24, r28
    74b8:	f4 df       	rcall	.-24     	; 0x74a2 <_ZN5Print7printlnEv>
    74ba:	80 0f       	add	r24, r16
    74bc:	91 1f       	adc	r25, r17
    74be:	df 91       	pop	r29
    74c0:	cf 91       	pop	r28
    74c2:	1f 91       	pop	r17
    74c4:	0f 91       	pop	r16
    74c6:	08 95       	ret

000074c8 <_ZN5Print7printlnERK6String>:
    74c8:	0f 93       	push	r16
    74ca:	1f 93       	push	r17
    74cc:	cf 93       	push	r28
    74ce:	df 93       	push	r29
    74d0:	ec 01       	movw	r28, r24
    74d2:	d1 df       	rcall	.-94     	; 0x7476 <_ZN5Print5printERK6String>
    74d4:	8c 01       	movw	r16, r24
    74d6:	ce 01       	movw	r24, r28
    74d8:	e4 df       	rcall	.-56     	; 0x74a2 <_ZN5Print7printlnEv>
    74da:	80 0f       	add	r24, r16
    74dc:	91 1f       	adc	r25, r17
    74de:	df 91       	pop	r29
    74e0:	cf 91       	pop	r28
    74e2:	1f 91       	pop	r17
    74e4:	0f 91       	pop	r16
    74e6:	08 95       	ret

000074e8 <_ZN5Print7printlnEPKc>:
    74e8:	0f 93       	push	r16
    74ea:	1f 93       	push	r17
    74ec:	cf 93       	push	r28
    74ee:	df 93       	push	r29
    74f0:	ec 01       	movw	r28, r24
    74f2:	88 df       	rcall	.-240    	; 0x7404 <_ZN5Print5writeEPKc>
    74f4:	8c 01       	movw	r16, r24
    74f6:	ce 01       	movw	r24, r28
    74f8:	d4 df       	rcall	.-88     	; 0x74a2 <_ZN5Print7printlnEv>
    74fa:	80 0f       	add	r24, r16
    74fc:	91 1f       	adc	r25, r17
    74fe:	df 91       	pop	r29
    7500:	cf 91       	pop	r28
    7502:	1f 91       	pop	r17
    7504:	0f 91       	pop	r16
    7506:	08 95       	ret

00007508 <_ZN5Print11printNumberEmh>:
    7508:	8f 92       	push	r8
    750a:	9f 92       	push	r9
    750c:	af 92       	push	r10
    750e:	bf 92       	push	r11
    7510:	ef 92       	push	r14
    7512:	ff 92       	push	r15
    7514:	0f 93       	push	r16
    7516:	1f 93       	push	r17
    7518:	cf 93       	push	r28
    751a:	df 93       	push	r29
    751c:	cd b7       	in	r28, 0x3d	; 61
    751e:	de b7       	in	r29, 0x3e	; 62
    7520:	a1 97       	sbiw	r28, 0x21	; 33
    7522:	0f b6       	in	r0, 0x3f	; 63
    7524:	f8 94       	cli
    7526:	de bf       	out	0x3e, r29	; 62
    7528:	0f be       	out	0x3f, r0	; 63
    752a:	cd bf       	out	0x3d, r28	; 61
    752c:	7c 01       	movw	r14, r24
    752e:	fa 01       	movw	r30, r20
    7530:	cb 01       	movw	r24, r22
    7532:	19 a2       	std	Y+33, r1	; 0x21
    7534:	22 30       	cpi	r18, 0x02	; 2
    7536:	08 f4       	brcc	.+2      	; 0x753a <_ZN5Print11printNumberEmh+0x32>
    7538:	2a e0       	ldi	r18, 0x0A	; 10
    753a:	8e 01       	movw	r16, r28
    753c:	0f 5d       	subi	r16, 0xDF	; 223
    753e:	1f 4f       	sbci	r17, 0xFF	; 255
    7540:	82 2e       	mov	r8, r18
    7542:	91 2c       	mov	r9, r1
    7544:	a1 2c       	mov	r10, r1
    7546:	b1 2c       	mov	r11, r1
    7548:	bf 01       	movw	r22, r30
    754a:	a5 01       	movw	r20, r10
    754c:	94 01       	movw	r18, r8
    754e:	d4 d5       	rcall	.+2984   	; 0x80f8 <__udivmodsi4>
    7550:	f9 01       	movw	r30, r18
    7552:	ca 01       	movw	r24, r20
    7554:	01 50       	subi	r16, 0x01	; 1
    7556:	11 09       	sbc	r17, r1
    7558:	6a 30       	cpi	r22, 0x0A	; 10
    755a:	10 f4       	brcc	.+4      	; 0x7560 <_ZN5Print11printNumberEmh+0x58>
    755c:	60 5d       	subi	r22, 0xD0	; 208
    755e:	01 c0       	rjmp	.+2      	; 0x7562 <_ZN5Print11printNumberEmh+0x5a>
    7560:	69 5c       	subi	r22, 0xC9	; 201
    7562:	d8 01       	movw	r26, r16
    7564:	6c 93       	st	X, r22
    7566:	23 2b       	or	r18, r19
    7568:	24 2b       	or	r18, r20
    756a:	25 2b       	or	r18, r21
    756c:	69 f7       	brne	.-38     	; 0x7548 <_ZN5Print11printNumberEmh+0x40>
    756e:	b8 01       	movw	r22, r16
    7570:	c7 01       	movw	r24, r14
    7572:	48 df       	rcall	.-368    	; 0x7404 <_ZN5Print5writeEPKc>
    7574:	a1 96       	adiw	r28, 0x21	; 33
    7576:	0f b6       	in	r0, 0x3f	; 63
    7578:	f8 94       	cli
    757a:	de bf       	out	0x3e, r29	; 62
    757c:	0f be       	out	0x3f, r0	; 63
    757e:	cd bf       	out	0x3d, r28	; 61
    7580:	df 91       	pop	r29
    7582:	cf 91       	pop	r28
    7584:	1f 91       	pop	r17
    7586:	0f 91       	pop	r16
    7588:	ff 90       	pop	r15
    758a:	ef 90       	pop	r14
    758c:	bf 90       	pop	r11
    758e:	af 90       	pop	r10
    7590:	9f 90       	pop	r9
    7592:	8f 90       	pop	r8
    7594:	08 95       	ret

00007596 <_ZN5Print5printEmi>:
    7596:	21 15       	cp	r18, r1
    7598:	31 05       	cpc	r19, r1
    759a:	41 f4       	brne	.+16     	; 0x75ac <_ZN5Print5printEmi+0x16>
    759c:	dc 01       	movw	r26, r24
    759e:	ed 91       	ld	r30, X+
    75a0:	fc 91       	ld	r31, X
    75a2:	01 90       	ld	r0, Z+
    75a4:	f0 81       	ld	r31, Z
    75a6:	e0 2d       	mov	r30, r0
    75a8:	64 2f       	mov	r22, r20
    75aa:	09 94       	ijmp
    75ac:	ad cf       	rjmp	.-166    	; 0x7508 <_ZN5Print11printNumberEmh>

000075ae <_ZN5Print5printEhi>:
    75ae:	9a 01       	movw	r18, r20
    75b0:	46 2f       	mov	r20, r22
    75b2:	50 e0       	ldi	r21, 0x00	; 0
    75b4:	60 e0       	ldi	r22, 0x00	; 0
    75b6:	70 e0       	ldi	r23, 0x00	; 0
    75b8:	ee cf       	rjmp	.-36     	; 0x7596 <_ZN5Print5printEmi>

000075ba <_ZN5Print7printlnEhi>:
    75ba:	0f 93       	push	r16
    75bc:	1f 93       	push	r17
    75be:	cf 93       	push	r28
    75c0:	df 93       	push	r29
    75c2:	ec 01       	movw	r28, r24
    75c4:	f4 df       	rcall	.-24     	; 0x75ae <_ZN5Print5printEhi>
    75c6:	8c 01       	movw	r16, r24
    75c8:	ce 01       	movw	r24, r28
    75ca:	6b df       	rcall	.-298    	; 0x74a2 <_ZN5Print7printlnEv>
    75cc:	80 0f       	add	r24, r16
    75ce:	91 1f       	adc	r25, r17
    75d0:	df 91       	pop	r29
    75d2:	cf 91       	pop	r28
    75d4:	1f 91       	pop	r17
    75d6:	0f 91       	pop	r16
    75d8:	08 95       	ret

000075da <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    75da:	0f 93       	push	r16
    75dc:	1f 93       	push	r17
    75de:	cf 93       	push	r28
    75e0:	df 93       	push	r29
    75e2:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    75e4:	d8 df       	rcall	.-80     	; 0x7596 <_ZN5Print5printEmi>
    75e6:	8c 01       	movw	r16, r24
  n += println();
    75e8:	ce 01       	movw	r24, r28
    75ea:	5b df       	rcall	.-330    	; 0x74a2 <_ZN5Print7printlnEv>
  return n;
}
    75ec:	80 0f       	add	r24, r16
    75ee:	91 1f       	adc	r25, r17
    75f0:	df 91       	pop	r29
    75f2:	cf 91       	pop	r28
    75f4:	1f 91       	pop	r17
    75f6:	0f 91       	pop	r16
    75f8:	08 95       	ret

000075fa <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    75fa:	1f 92       	push	r1
    75fc:	0f 92       	push	r0
    75fe:	0f b6       	in	r0, 0x3f	; 63
    7600:	0f 92       	push	r0
    7602:	11 24       	eor	r1, r1
    7604:	2f 93       	push	r18
    7606:	3f 93       	push	r19
    7608:	8f 93       	push	r24
    760a:	9f 93       	push	r25
    760c:	af 93       	push	r26
    760e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    7610:	80 91 73 0e 	lds	r24, 0x0E73	; 0x800e73 <timer0_millis>
    7614:	90 91 74 0e 	lds	r25, 0x0E74	; 0x800e74 <timer0_millis+0x1>
    7618:	a0 91 75 0e 	lds	r26, 0x0E75	; 0x800e75 <timer0_millis+0x2>
    761c:	b0 91 76 0e 	lds	r27, 0x0E76	; 0x800e76 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    7620:	30 91 72 0e 	lds	r19, 0x0E72	; 0x800e72 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    7624:	23 e0       	ldi	r18, 0x03	; 3
    7626:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    7628:	2d 37       	cpi	r18, 0x7D	; 125
    762a:	20 f4       	brcc	.+8      	; 0x7634 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    762c:	01 96       	adiw	r24, 0x01	; 1
    762e:	a1 1d       	adc	r26, r1
    7630:	b1 1d       	adc	r27, r1
    7632:	05 c0       	rjmp	.+10     	; 0x763e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    7634:	26 e8       	ldi	r18, 0x86	; 134
    7636:	23 0f       	add	r18, r19
		m += 1;
    7638:	02 96       	adiw	r24, 0x02	; 2
    763a:	a1 1d       	adc	r26, r1
    763c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    763e:	20 93 72 0e 	sts	0x0E72, r18	; 0x800e72 <timer0_fract>
	timer0_millis = m;
    7642:	80 93 73 0e 	sts	0x0E73, r24	; 0x800e73 <timer0_millis>
    7646:	90 93 74 0e 	sts	0x0E74, r25	; 0x800e74 <timer0_millis+0x1>
    764a:	a0 93 75 0e 	sts	0x0E75, r26	; 0x800e75 <timer0_millis+0x2>
    764e:	b0 93 76 0e 	sts	0x0E76, r27	; 0x800e76 <timer0_millis+0x3>
	timer0_overflow_count++;
    7652:	80 91 77 0e 	lds	r24, 0x0E77	; 0x800e77 <timer0_overflow_count>
    7656:	90 91 78 0e 	lds	r25, 0x0E78	; 0x800e78 <timer0_overflow_count+0x1>
    765a:	a0 91 79 0e 	lds	r26, 0x0E79	; 0x800e79 <timer0_overflow_count+0x2>
    765e:	b0 91 7a 0e 	lds	r27, 0x0E7A	; 0x800e7a <timer0_overflow_count+0x3>
    7662:	01 96       	adiw	r24, 0x01	; 1
    7664:	a1 1d       	adc	r26, r1
    7666:	b1 1d       	adc	r27, r1
    7668:	80 93 77 0e 	sts	0x0E77, r24	; 0x800e77 <timer0_overflow_count>
    766c:	90 93 78 0e 	sts	0x0E78, r25	; 0x800e78 <timer0_overflow_count+0x1>
    7670:	a0 93 79 0e 	sts	0x0E79, r26	; 0x800e79 <timer0_overflow_count+0x2>
    7674:	b0 93 7a 0e 	sts	0x0E7A, r27	; 0x800e7a <timer0_overflow_count+0x3>
}
    7678:	bf 91       	pop	r27
    767a:	af 91       	pop	r26
    767c:	9f 91       	pop	r25
    767e:	8f 91       	pop	r24
    7680:	3f 91       	pop	r19
    7682:	2f 91       	pop	r18
    7684:	0f 90       	pop	r0
    7686:	0f be       	out	0x3f, r0	; 63
    7688:	0f 90       	pop	r0
    768a:	1f 90       	pop	r1
    768c:	18 95       	reti

0000768e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    768e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    7690:	f8 94       	cli
	m = timer0_millis;
    7692:	60 91 73 0e 	lds	r22, 0x0E73	; 0x800e73 <timer0_millis>
    7696:	70 91 74 0e 	lds	r23, 0x0E74	; 0x800e74 <timer0_millis+0x1>
    769a:	80 91 75 0e 	lds	r24, 0x0E75	; 0x800e75 <timer0_millis+0x2>
    769e:	90 91 76 0e 	lds	r25, 0x0E76	; 0x800e76 <timer0_millis+0x3>
	SREG = oldSREG;
    76a2:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    76a4:	08 95       	ret

000076a6 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    76a6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    76a8:	f8 94       	cli
	m = timer0_overflow_count;
    76aa:	80 91 77 0e 	lds	r24, 0x0E77	; 0x800e77 <timer0_overflow_count>
    76ae:	90 91 78 0e 	lds	r25, 0x0E78	; 0x800e78 <timer0_overflow_count+0x1>
    76b2:	a0 91 79 0e 	lds	r26, 0x0E79	; 0x800e79 <timer0_overflow_count+0x2>
    76b6:	b0 91 7a 0e 	lds	r27, 0x0E7A	; 0x800e7a <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    76ba:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    76bc:	a8 9b       	sbis	0x15, 0	; 21
    76be:	05 c0       	rjmp	.+10     	; 0x76ca <micros+0x24>
    76c0:	2f 3f       	cpi	r18, 0xFF	; 255
    76c2:	19 f0       	breq	.+6      	; 0x76ca <micros+0x24>
		m++;
    76c4:	01 96       	adiw	r24, 0x01	; 1
    76c6:	a1 1d       	adc	r26, r1
    76c8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    76ca:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    76cc:	ba 2f       	mov	r27, r26
    76ce:	a9 2f       	mov	r26, r25
    76d0:	98 2f       	mov	r25, r24
    76d2:	88 27       	eor	r24, r24
    76d4:	82 0f       	add	r24, r18
    76d6:	91 1d       	adc	r25, r1
    76d8:	a1 1d       	adc	r26, r1
    76da:	b1 1d       	adc	r27, r1
    76dc:	bc 01       	movw	r22, r24
    76de:	cd 01       	movw	r24, r26
    76e0:	42 e0       	ldi	r20, 0x02	; 2
    76e2:	66 0f       	add	r22, r22
    76e4:	77 1f       	adc	r23, r23
    76e6:	88 1f       	adc	r24, r24
    76e8:	99 1f       	adc	r25, r25
    76ea:	4a 95       	dec	r20
    76ec:	d1 f7       	brne	.-12     	; 0x76e2 <micros+0x3c>
}
    76ee:	08 95       	ret

000076f0 <delay>:

void delay(unsigned long ms)
{
    76f0:	8f 92       	push	r8
    76f2:	9f 92       	push	r9
    76f4:	af 92       	push	r10
    76f6:	bf 92       	push	r11
    76f8:	cf 92       	push	r12
    76fa:	df 92       	push	r13
    76fc:	ef 92       	push	r14
    76fe:	ff 92       	push	r15
    7700:	6b 01       	movw	r12, r22
    7702:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    7704:	d0 df       	rcall	.-96     	; 0x76a6 <micros>
    7706:	4b 01       	movw	r8, r22
    7708:	5c 01       	movw	r10, r24

	while (ms > 0) {
    770a:	c1 14       	cp	r12, r1
    770c:	d1 04       	cpc	r13, r1
    770e:	e1 04       	cpc	r14, r1
    7710:	f1 04       	cpc	r15, r1
		yield();
    7712:	f1 f0       	breq	.+60     	; 0x7750 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    7714:	d0 d4       	rcall	.+2464   	; 0x80b6 <yield>
    7716:	c7 df       	rcall	.-114    	; 0x76a6 <micros>
    7718:	dc 01       	movw	r26, r24
    771a:	cb 01       	movw	r24, r22
    771c:	88 19       	sub	r24, r8
    771e:	99 09       	sbc	r25, r9
    7720:	aa 09       	sbc	r26, r10
    7722:	bb 09       	sbc	r27, r11
    7724:	88 3e       	cpi	r24, 0xE8	; 232
    7726:	93 40       	sbci	r25, 0x03	; 3
    7728:	a1 05       	cpc	r26, r1
    772a:	b1 05       	cpc	r27, r1
    772c:	70 f3       	brcs	.-36     	; 0x770a <delay+0x1a>
			ms--;
    772e:	21 e0       	ldi	r18, 0x01	; 1
    7730:	c2 1a       	sub	r12, r18
    7732:	d1 08       	sbc	r13, r1
    7734:	e1 08       	sbc	r14, r1
    7736:	f1 08       	sbc	r15, r1
			start += 1000;
    7738:	88 ee       	ldi	r24, 0xE8	; 232
    773a:	88 0e       	add	r8, r24
    773c:	83 e0       	ldi	r24, 0x03	; 3
    773e:	98 1e       	adc	r9, r24
    7740:	a1 1c       	adc	r10, r1
    7742:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    7744:	c1 14       	cp	r12, r1
    7746:	d1 04       	cpc	r13, r1
    7748:	e1 04       	cpc	r14, r1
    774a:	f1 04       	cpc	r15, r1
    774c:	21 f7       	brne	.-56     	; 0x7716 <delay+0x26>
    774e:	dd cf       	rjmp	.-70     	; 0x770a <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    7750:	ff 90       	pop	r15
    7752:	ef 90       	pop	r14
    7754:	df 90       	pop	r13
    7756:	cf 90       	pop	r12
    7758:	bf 90       	pop	r11
    775a:	af 90       	pop	r10
    775c:	9f 90       	pop	r9
    775e:	8f 90       	pop	r8
    7760:	08 95       	ret

00007762 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    7762:	82 30       	cpi	r24, 0x02	; 2
    7764:	91 05       	cpc	r25, r1
    7766:	38 f0       	brcs	.+14     	; 0x7776 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    7768:	88 0f       	add	r24, r24
    776a:	99 1f       	adc	r25, r25
    776c:	88 0f       	add	r24, r24
    776e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    7770:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    7772:	01 97       	sbiw	r24, 0x01	; 1
    7774:	f1 f7       	brne	.-4      	; 0x7772 <delayMicroseconds+0x10>
    7776:	08 95       	ret

00007778 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    7778:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    777a:	84 b5       	in	r24, 0x24	; 36
    777c:	82 60       	ori	r24, 0x02	; 2
    777e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    7780:	84 b5       	in	r24, 0x24	; 36
    7782:	81 60       	ori	r24, 0x01	; 1
    7784:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    7786:	85 b5       	in	r24, 0x25	; 37
    7788:	82 60       	ori	r24, 0x02	; 2
    778a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    778c:	85 b5       	in	r24, 0x25	; 37
    778e:	81 60       	ori	r24, 0x01	; 1
    7790:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    7792:	ee e6       	ldi	r30, 0x6E	; 110
    7794:	f0 e0       	ldi	r31, 0x00	; 0
    7796:	80 81       	ld	r24, Z
    7798:	81 60       	ori	r24, 0x01	; 1
    779a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    779c:	e1 e8       	ldi	r30, 0x81	; 129
    779e:	f0 e0       	ldi	r31, 0x00	; 0
    77a0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    77a2:	80 81       	ld	r24, Z
    77a4:	82 60       	ori	r24, 0x02	; 2
    77a6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    77a8:	80 81       	ld	r24, Z
    77aa:	81 60       	ori	r24, 0x01	; 1
    77ac:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    77ae:	e0 e8       	ldi	r30, 0x80	; 128
    77b0:	f0 e0       	ldi	r31, 0x00	; 0
    77b2:	80 81       	ld	r24, Z
    77b4:	81 60       	ori	r24, 0x01	; 1
    77b6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    77b8:	e1 eb       	ldi	r30, 0xB1	; 177
    77ba:	f0 e0       	ldi	r31, 0x00	; 0
    77bc:	80 81       	ld	r24, Z
    77be:	84 60       	ori	r24, 0x04	; 4
    77c0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    77c2:	e0 eb       	ldi	r30, 0xB0	; 176
    77c4:	f0 e0       	ldi	r31, 0x00	; 0
    77c6:	80 81       	ld	r24, Z
    77c8:	81 60       	ori	r24, 0x01	; 1
    77ca:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    77cc:	ea e7       	ldi	r30, 0x7A	; 122
    77ce:	f0 e0       	ldi	r31, 0x00	; 0
    77d0:	80 81       	ld	r24, Z
    77d2:	84 60       	ori	r24, 0x04	; 4
    77d4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    77d6:	80 81       	ld	r24, Z
    77d8:	82 60       	ori	r24, 0x02	; 2
    77da:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    77dc:	80 81       	ld	r24, Z
    77de:	81 60       	ori	r24, 0x01	; 1
    77e0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    77e2:	80 81       	ld	r24, Z
    77e4:	80 68       	ori	r24, 0x80	; 128
    77e6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    77e8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    77ec:	08 95       	ret

000077ee <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    77ee:	83 30       	cpi	r24, 0x03	; 3
    77f0:	81 f0       	breq	.+32     	; 0x7812 <turnOffPWM+0x24>
    77f2:	28 f4       	brcc	.+10     	; 0x77fe <turnOffPWM+0x10>
    77f4:	81 30       	cpi	r24, 0x01	; 1
    77f6:	99 f0       	breq	.+38     	; 0x781e <turnOffPWM+0x30>
    77f8:	82 30       	cpi	r24, 0x02	; 2
    77fa:	a1 f0       	breq	.+40     	; 0x7824 <turnOffPWM+0x36>
    77fc:	08 95       	ret
    77fe:	87 30       	cpi	r24, 0x07	; 7
    7800:	a9 f0       	breq	.+42     	; 0x782c <turnOffPWM+0x3e>
    7802:	88 30       	cpi	r24, 0x08	; 8
    7804:	b9 f0       	breq	.+46     	; 0x7834 <turnOffPWM+0x46>
    7806:	84 30       	cpi	r24, 0x04	; 4
    7808:	d1 f4       	brne	.+52     	; 0x783e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    780a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    780e:	8f 7d       	andi	r24, 0xDF	; 223
    7810:	03 c0       	rjmp	.+6      	; 0x7818 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    7812:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    7816:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    7818:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    781c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    781e:	84 b5       	in	r24, 0x24	; 36
    7820:	8f 77       	andi	r24, 0x7F	; 127
    7822:	02 c0       	rjmp	.+4      	; 0x7828 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    7824:	84 b5       	in	r24, 0x24	; 36
    7826:	8f 7d       	andi	r24, 0xDF	; 223
    7828:	84 bd       	out	0x24, r24	; 36
    782a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    782c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7830:	8f 77       	andi	r24, 0x7F	; 127
    7832:	03 c0       	rjmp	.+6      	; 0x783a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    7834:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7838:	8f 7d       	andi	r24, 0xDF	; 223
    783a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    783e:	08 95       	ret

00007840 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    7840:	cf 93       	push	r28
    7842:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    7844:	90 e0       	ldi	r25, 0x00	; 0
    7846:	fc 01       	movw	r30, r24
    7848:	e8 5a       	subi	r30, 0xA8	; 168
    784a:	fd 4f       	sbci	r31, 0xFD	; 253
    784c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    784e:	fc 01       	movw	r30, r24
    7850:	e8 58       	subi	r30, 0x88	; 136
    7852:	fd 4f       	sbci	r31, 0xFD	; 253
    7854:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    7856:	88 23       	and	r24, r24
    7858:	61 f1       	breq	.+88     	; 0x78b2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    785a:	90 e0       	ldi	r25, 0x00	; 0
    785c:	88 0f       	add	r24, r24
    785e:	99 1f       	adc	r25, r25
    7860:	fc 01       	movw	r30, r24
    7862:	e4 55       	subi	r30, 0x54	; 84
    7864:	fd 4f       	sbci	r31, 0xFD	; 253
    7866:	c5 91       	lpm	r28, Z+
    7868:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    786a:	fc 01       	movw	r30, r24
    786c:	ee 55       	subi	r30, 0x5E	; 94
    786e:	fd 4f       	sbci	r31, 0xFD	; 253
    7870:	a5 91       	lpm	r26, Z+
    7872:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    7874:	61 11       	cpse	r22, r1
    7876:	09 c0       	rjmp	.+18     	; 0x788a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    7878:	9f b7       	in	r25, 0x3f	; 63
                cli();
    787a:	f8 94       	cli
		*reg &= ~bit;
    787c:	88 81       	ld	r24, Y
    787e:	20 95       	com	r18
    7880:	82 23       	and	r24, r18
    7882:	88 83       	st	Y, r24
		*out &= ~bit;
    7884:	ec 91       	ld	r30, X
    7886:	2e 23       	and	r18, r30
    7888:	0b c0       	rjmp	.+22     	; 0x78a0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    788a:	62 30       	cpi	r22, 0x02	; 2
    788c:	61 f4       	brne	.+24     	; 0x78a6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    788e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    7890:	f8 94       	cli
		*reg &= ~bit;
    7892:	88 81       	ld	r24, Y
    7894:	32 2f       	mov	r19, r18
    7896:	30 95       	com	r19
    7898:	83 23       	and	r24, r19
    789a:	88 83       	st	Y, r24
		*out |= bit;
    789c:	ec 91       	ld	r30, X
    789e:	2e 2b       	or	r18, r30
    78a0:	2c 93       	st	X, r18
		SREG = oldSREG;
    78a2:	9f bf       	out	0x3f, r25	; 63
    78a4:	06 c0       	rjmp	.+12     	; 0x78b2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    78a6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    78a8:	f8 94       	cli
		*reg |= bit;
    78aa:	e8 81       	ld	r30, Y
    78ac:	2e 2b       	or	r18, r30
    78ae:	28 83       	st	Y, r18
		SREG = oldSREG;
    78b0:	8f bf       	out	0x3f, r24	; 63
	}
}
    78b2:	df 91       	pop	r29
    78b4:	cf 91       	pop	r28
    78b6:	08 95       	ret

000078b8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    78b8:	1f 93       	push	r17
    78ba:	cf 93       	push	r28
    78bc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    78be:	28 2f       	mov	r18, r24
    78c0:	30 e0       	ldi	r19, 0x00	; 0
    78c2:	f9 01       	movw	r30, r18
    78c4:	e8 5c       	subi	r30, 0xC8	; 200
    78c6:	fd 4f       	sbci	r31, 0xFD	; 253
    78c8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    78ca:	f9 01       	movw	r30, r18
    78cc:	e8 5a       	subi	r30, 0xA8	; 168
    78ce:	fd 4f       	sbci	r31, 0xFD	; 253
    78d0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    78d2:	f9 01       	movw	r30, r18
    78d4:	e8 58       	subi	r30, 0x88	; 136
    78d6:	fd 4f       	sbci	r31, 0xFD	; 253
    78d8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    78da:	cc 23       	and	r28, r28
    78dc:	b9 f0       	breq	.+46     	; 0x790c <digitalWrite+0x54>
    78de:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    78e0:	81 11       	cpse	r24, r1
    78e2:	85 df       	rcall	.-246    	; 0x77ee <turnOffPWM>

	out = portOutputRegister(port);
    78e4:	ec 2f       	mov	r30, r28
    78e6:	f0 e0       	ldi	r31, 0x00	; 0
    78e8:	ee 0f       	add	r30, r30
    78ea:	ff 1f       	adc	r31, r31
    78ec:	ee 55       	subi	r30, 0x5E	; 94
    78ee:	fd 4f       	sbci	r31, 0xFD	; 253
    78f0:	a5 91       	lpm	r26, Z+
    78f2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    78f4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    78f6:	f8 94       	cli

	if (val == LOW) {
    78f8:	11 11       	cpse	r17, r1
    78fa:	04 c0       	rjmp	.+8      	; 0x7904 <digitalWrite+0x4c>
		*out &= ~bit;
    78fc:	8c 91       	ld	r24, X
    78fe:	d0 95       	com	r29
    7900:	d8 23       	and	r29, r24
    7902:	02 c0       	rjmp	.+4      	; 0x7908 <digitalWrite+0x50>
	} else {
		*out |= bit;
    7904:	ec 91       	ld	r30, X
    7906:	de 2b       	or	r29, r30
    7908:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    790a:	9f bf       	out	0x3f, r25	; 63
}
    790c:	df 91       	pop	r29
    790e:	cf 91       	pop	r28
    7910:	1f 91       	pop	r17
    7912:	08 95       	ret

00007914 <digitalRead>:

int digitalRead(uint8_t pin)
{
    7914:	cf 93       	push	r28
    7916:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    7918:	28 2f       	mov	r18, r24
    791a:	30 e0       	ldi	r19, 0x00	; 0
    791c:	f9 01       	movw	r30, r18
    791e:	e8 5c       	subi	r30, 0xC8	; 200
    7920:	fd 4f       	sbci	r31, 0xFD	; 253
    7922:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    7924:	f9 01       	movw	r30, r18
    7926:	e8 5a       	subi	r30, 0xA8	; 168
    7928:	fd 4f       	sbci	r31, 0xFD	; 253
    792a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    792c:	f9 01       	movw	r30, r18
    792e:	e8 58       	subi	r30, 0x88	; 136
    7930:	fd 4f       	sbci	r31, 0xFD	; 253
    7932:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    7934:	cc 23       	and	r28, r28
    7936:	89 f0       	breq	.+34     	; 0x795a <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7938:	81 11       	cpse	r24, r1
    793a:	59 df       	rcall	.-334    	; 0x77ee <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    793c:	ec 2f       	mov	r30, r28
    793e:	f0 e0       	ldi	r31, 0x00	; 0
    7940:	ee 0f       	add	r30, r30
    7942:	ff 1f       	adc	r31, r31
    7944:	e8 56       	subi	r30, 0x68	; 104
    7946:	fd 4f       	sbci	r31, 0xFD	; 253
    7948:	a5 91       	lpm	r26, Z+
    794a:	b4 91       	lpm	r27, Z
    794c:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    794e:	ed 23       	and	r30, r29
    7950:	81 e0       	ldi	r24, 0x01	; 1
    7952:	90 e0       	ldi	r25, 0x00	; 0
    7954:	21 f4       	brne	.+8      	; 0x795e <digitalRead+0x4a>
    7956:	80 e0       	ldi	r24, 0x00	; 0
    7958:	02 c0       	rjmp	.+4      	; 0x795e <digitalRead+0x4a>
    795a:	80 e0       	ldi	r24, 0x00	; 0
    795c:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    795e:	df 91       	pop	r29
    7960:	cf 91       	pop	r28
    7962:	08 95       	ret

00007964 <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    7964:	08 95       	ret

00007966 <_ZN6StringD1Ev>:
    7966:	fc 01       	movw	r30, r24
    7968:	80 81       	ld	r24, Z
    796a:	91 81       	ldd	r25, Z+1	; 0x01
    796c:	dc c5       	rjmp	.+3000   	; 0x8526 <free>

0000796e <_ZN6String10invalidateEv>:
    796e:	cf 93       	push	r28
    7970:	df 93       	push	r29
    7972:	ec 01       	movw	r28, r24
    7974:	88 81       	ld	r24, Y
    7976:	99 81       	ldd	r25, Y+1	; 0x01
    7978:	00 97       	sbiw	r24, 0x00	; 0
    797a:	09 f0       	breq	.+2      	; 0x797e <_ZN6String10invalidateEv+0x10>
    797c:	d4 d5       	rcall	.+2984   	; 0x8526 <free>
    797e:	19 82       	std	Y+1, r1	; 0x01
    7980:	18 82       	st	Y, r1
    7982:	1d 82       	std	Y+5, r1	; 0x05
    7984:	1c 82       	std	Y+4, r1	; 0x04
    7986:	1b 82       	std	Y+3, r1	; 0x03
    7988:	1a 82       	std	Y+2, r1	; 0x02
    798a:	df 91       	pop	r29
    798c:	cf 91       	pop	r28
    798e:	08 95       	ret

00007990 <_ZN6String12changeBufferEj>:
    7990:	0f 93       	push	r16
    7992:	1f 93       	push	r17
    7994:	cf 93       	push	r28
    7996:	df 93       	push	r29
    7998:	ec 01       	movw	r28, r24
    799a:	8b 01       	movw	r16, r22
    799c:	6f 5f       	subi	r22, 0xFF	; 255
    799e:	7f 4f       	sbci	r23, 0xFF	; 255
    79a0:	88 81       	ld	r24, Y
    79a2:	99 81       	ldd	r25, Y+1	; 0x01
    79a4:	49 d6       	rcall	.+3218   	; 0x8638 <realloc>
    79a6:	00 97       	sbiw	r24, 0x00	; 0
    79a8:	31 f0       	breq	.+12     	; 0x79b6 <_ZN6String12changeBufferEj+0x26>
    79aa:	99 83       	std	Y+1, r25	; 0x01
    79ac:	88 83       	st	Y, r24
    79ae:	1b 83       	std	Y+3, r17	; 0x03
    79b0:	0a 83       	std	Y+2, r16	; 0x02
    79b2:	81 e0       	ldi	r24, 0x01	; 1
    79b4:	01 c0       	rjmp	.+2      	; 0x79b8 <_ZN6String12changeBufferEj+0x28>
    79b6:	80 e0       	ldi	r24, 0x00	; 0
    79b8:	df 91       	pop	r29
    79ba:	cf 91       	pop	r28
    79bc:	1f 91       	pop	r17
    79be:	0f 91       	pop	r16
    79c0:	08 95       	ret

000079c2 <_ZN6String7reserveEj>:
    79c2:	cf 93       	push	r28
    79c4:	df 93       	push	r29
    79c6:	ec 01       	movw	r28, r24
    79c8:	88 81       	ld	r24, Y
    79ca:	99 81       	ldd	r25, Y+1	; 0x01
    79cc:	89 2b       	or	r24, r25
    79ce:	29 f0       	breq	.+10     	; 0x79da <_ZN6String7reserveEj+0x18>
    79d0:	8a 81       	ldd	r24, Y+2	; 0x02
    79d2:	9b 81       	ldd	r25, Y+3	; 0x03
    79d4:	86 17       	cp	r24, r22
    79d6:	97 07       	cpc	r25, r23
    79d8:	58 f4       	brcc	.+22     	; 0x79f0 <_ZN6String7reserveEj+0x2e>
    79da:	ce 01       	movw	r24, r28
    79dc:	d9 df       	rcall	.-78     	; 0x7990 <_ZN6String12changeBufferEj>
    79de:	88 23       	and	r24, r24
    79e0:	41 f0       	breq	.+16     	; 0x79f2 <_ZN6String7reserveEj+0x30>
    79e2:	8c 81       	ldd	r24, Y+4	; 0x04
    79e4:	9d 81       	ldd	r25, Y+5	; 0x05
    79e6:	89 2b       	or	r24, r25
    79e8:	19 f4       	brne	.+6      	; 0x79f0 <_ZN6String7reserveEj+0x2e>
    79ea:	e8 81       	ld	r30, Y
    79ec:	f9 81       	ldd	r31, Y+1	; 0x01
    79ee:	10 82       	st	Z, r1
    79f0:	81 e0       	ldi	r24, 0x01	; 1
    79f2:	df 91       	pop	r29
    79f4:	cf 91       	pop	r28
    79f6:	08 95       	ret

000079f8 <_ZN6String4copyEPKcj>:
    79f8:	ef 92       	push	r14
    79fa:	ff 92       	push	r15
    79fc:	0f 93       	push	r16
    79fe:	1f 93       	push	r17
    7a00:	cf 93       	push	r28
    7a02:	df 93       	push	r29
    7a04:	ec 01       	movw	r28, r24
    7a06:	7b 01       	movw	r14, r22
    7a08:	8a 01       	movw	r16, r20
    7a0a:	ba 01       	movw	r22, r20
    7a0c:	da df       	rcall	.-76     	; 0x79c2 <_ZN6String7reserveEj>
    7a0e:	81 11       	cpse	r24, r1
    7a10:	03 c0       	rjmp	.+6      	; 0x7a18 <_ZN6String4copyEPKcj+0x20>
    7a12:	ce 01       	movw	r24, r28
    7a14:	ac df       	rcall	.-168    	; 0x796e <_ZN6String10invalidateEv>
    7a16:	06 c0       	rjmp	.+12     	; 0x7a24 <_ZN6String4copyEPKcj+0x2c>
    7a18:	1d 83       	std	Y+5, r17	; 0x05
    7a1a:	0c 83       	std	Y+4, r16	; 0x04
    7a1c:	b7 01       	movw	r22, r14
    7a1e:	88 81       	ld	r24, Y
    7a20:	99 81       	ldd	r25, Y+1	; 0x01
    7a22:	11 d7       	rcall	.+3618   	; 0x8846 <strcpy>
    7a24:	ce 01       	movw	r24, r28
    7a26:	df 91       	pop	r29
    7a28:	cf 91       	pop	r28
    7a2a:	1f 91       	pop	r17
    7a2c:	0f 91       	pop	r16
    7a2e:	ff 90       	pop	r15
    7a30:	ef 90       	pop	r14
    7a32:	08 95       	ret

00007a34 <_ZN6StringC1EPKc>:
    7a34:	fc 01       	movw	r30, r24
    7a36:	11 82       	std	Z+1, r1	; 0x01
    7a38:	10 82       	st	Z, r1
    7a3a:	13 82       	std	Z+3, r1	; 0x03
    7a3c:	12 82       	std	Z+2, r1	; 0x02
    7a3e:	15 82       	std	Z+5, r1	; 0x05
    7a40:	14 82       	std	Z+4, r1	; 0x04
    7a42:	61 15       	cp	r22, r1
    7a44:	71 05       	cpc	r23, r1
    7a46:	49 f0       	breq	.+18     	; 0x7a5a <_ZN6StringC1EPKc+0x26>
    7a48:	fb 01       	movw	r30, r22
    7a4a:	01 90       	ld	r0, Z+
    7a4c:	00 20       	and	r0, r0
    7a4e:	e9 f7       	brne	.-6      	; 0x7a4a <_ZN6StringC1EPKc+0x16>
    7a50:	31 97       	sbiw	r30, 0x01	; 1
    7a52:	af 01       	movw	r20, r30
    7a54:	46 1b       	sub	r20, r22
    7a56:	57 0b       	sbc	r21, r23
    7a58:	cf cf       	rjmp	.-98     	; 0x79f8 <_ZN6String4copyEPKcj>
    7a5a:	08 95       	ret

00007a5c <_ZN6String4moveERS_>:
    7a5c:	0f 93       	push	r16
    7a5e:	1f 93       	push	r17
    7a60:	cf 93       	push	r28
    7a62:	df 93       	push	r29
    7a64:	8c 01       	movw	r16, r24
    7a66:	eb 01       	movw	r28, r22
    7a68:	fc 01       	movw	r30, r24
    7a6a:	80 81       	ld	r24, Z
    7a6c:	91 81       	ldd	r25, Z+1	; 0x01
    7a6e:	00 97       	sbiw	r24, 0x00	; 0
    7a70:	c1 f0       	breq	.+48     	; 0x7aa2 <_ZN6String4moveERS_+0x46>
    7a72:	68 81       	ld	r22, Y
    7a74:	79 81       	ldd	r23, Y+1	; 0x01
    7a76:	61 15       	cp	r22, r1
    7a78:	71 05       	cpc	r23, r1
    7a7a:	91 f0       	breq	.+36     	; 0x7aa0 <_ZN6String4moveERS_+0x44>
    7a7c:	22 eb       	ldi	r18, 0xB2	; 178
    7a7e:	3c e3       	ldi	r19, 0x3C	; 60
    7a80:	23 2b       	or	r18, r19
    7a82:	71 f0       	breq	.+28     	; 0x7aa0 <_ZN6String4moveERS_+0x44>
    7a84:	42 81       	ldd	r20, Z+2	; 0x02
    7a86:	53 81       	ldd	r21, Z+3	; 0x03
    7a88:	2c 81       	ldd	r18, Y+4	; 0x04
    7a8a:	3d 81       	ldd	r19, Y+5	; 0x05
    7a8c:	42 17       	cp	r20, r18
    7a8e:	53 07       	cpc	r21, r19
    7a90:	38 f0       	brcs	.+14     	; 0x7aa0 <_ZN6String4moveERS_+0x44>
    7a92:	d9 d6       	rcall	.+3506   	; 0x8846 <strcpy>
    7a94:	8c 81       	ldd	r24, Y+4	; 0x04
    7a96:	9d 81       	ldd	r25, Y+5	; 0x05
    7a98:	f8 01       	movw	r30, r16
    7a9a:	95 83       	std	Z+5, r25	; 0x05
    7a9c:	84 83       	std	Z+4, r24	; 0x04
    7a9e:	12 c0       	rjmp	.+36     	; 0x7ac4 <_ZN6String4moveERS_+0x68>
    7aa0:	42 d5       	rcall	.+2692   	; 0x8526 <free>
    7aa2:	88 81       	ld	r24, Y
    7aa4:	99 81       	ldd	r25, Y+1	; 0x01
    7aa6:	f8 01       	movw	r30, r16
    7aa8:	91 83       	std	Z+1, r25	; 0x01
    7aaa:	80 83       	st	Z, r24
    7aac:	8a 81       	ldd	r24, Y+2	; 0x02
    7aae:	9b 81       	ldd	r25, Y+3	; 0x03
    7ab0:	93 83       	std	Z+3, r25	; 0x03
    7ab2:	82 83       	std	Z+2, r24	; 0x02
    7ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    7ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    7ab8:	95 83       	std	Z+5, r25	; 0x05
    7aba:	84 83       	std	Z+4, r24	; 0x04
    7abc:	19 82       	std	Y+1, r1	; 0x01
    7abe:	18 82       	st	Y, r1
    7ac0:	1b 82       	std	Y+3, r1	; 0x03
    7ac2:	1a 82       	std	Y+2, r1	; 0x02
    7ac4:	1d 82       	std	Y+5, r1	; 0x05
    7ac6:	1c 82       	std	Y+4, r1	; 0x04
    7ac8:	df 91       	pop	r29
    7aca:	cf 91       	pop	r28
    7acc:	1f 91       	pop	r17
    7ace:	0f 91       	pop	r16
    7ad0:	08 95       	ret

00007ad2 <_ZN6StringC1EOS_>:
    7ad2:	fc 01       	movw	r30, r24
    7ad4:	11 82       	std	Z+1, r1	; 0x01
    7ad6:	10 82       	st	Z, r1
    7ad8:	13 82       	std	Z+3, r1	; 0x03
    7ada:	12 82       	std	Z+2, r1	; 0x02
    7adc:	15 82       	std	Z+5, r1	; 0x05
    7ade:	14 82       	std	Z+4, r1	; 0x04
    7ae0:	bd cf       	rjmp	.-134    	; 0x7a5c <_ZN6String4moveERS_>

00007ae2 <_ZN6StringaSERKS_>:
    7ae2:	cf 93       	push	r28
    7ae4:	df 93       	push	r29
    7ae6:	ec 01       	movw	r28, r24
    7ae8:	fb 01       	movw	r30, r22
    7aea:	86 17       	cp	r24, r22
    7aec:	97 07       	cpc	r25, r23
    7aee:	51 f0       	breq	.+20     	; 0x7b04 <_ZN6StringaSERKS_+0x22>
    7af0:	60 81       	ld	r22, Z
    7af2:	71 81       	ldd	r23, Z+1	; 0x01
    7af4:	61 15       	cp	r22, r1
    7af6:	71 05       	cpc	r23, r1
    7af8:	21 f0       	breq	.+8      	; 0x7b02 <_ZN6StringaSERKS_+0x20>
    7afa:	44 81       	ldd	r20, Z+4	; 0x04
    7afc:	55 81       	ldd	r21, Z+5	; 0x05
    7afe:	7c df       	rcall	.-264    	; 0x79f8 <_ZN6String4copyEPKcj>
    7b00:	01 c0       	rjmp	.+2      	; 0x7b04 <_ZN6StringaSERKS_+0x22>
    7b02:	35 df       	rcall	.-406    	; 0x796e <_ZN6String10invalidateEv>
    7b04:	ce 01       	movw	r24, r28
    7b06:	df 91       	pop	r29
    7b08:	cf 91       	pop	r28
    7b0a:	08 95       	ret

00007b0c <_ZN6StringC1ERKS_>:
    7b0c:	fc 01       	movw	r30, r24
    7b0e:	11 82       	std	Z+1, r1	; 0x01
    7b10:	10 82       	st	Z, r1
    7b12:	13 82       	std	Z+3, r1	; 0x03
    7b14:	12 82       	std	Z+2, r1	; 0x02
    7b16:	15 82       	std	Z+5, r1	; 0x05
    7b18:	14 82       	std	Z+4, r1	; 0x04
    7b1a:	e3 cf       	rjmp	.-58     	; 0x7ae2 <_ZN6StringaSERKS_>

00007b1c <_ZN6StringaSEOS_>:
    7b1c:	cf 93       	push	r28
    7b1e:	df 93       	push	r29
    7b20:	ec 01       	movw	r28, r24
    7b22:	86 17       	cp	r24, r22
    7b24:	97 07       	cpc	r25, r23
    7b26:	09 f0       	breq	.+2      	; 0x7b2a <_ZN6StringaSEOS_+0xe>
    7b28:	99 df       	rcall	.-206    	; 0x7a5c <_ZN6String4moveERS_>
    7b2a:	ce 01       	movw	r24, r28
    7b2c:	df 91       	pop	r29
    7b2e:	cf 91       	pop	r28
    7b30:	08 95       	ret

00007b32 <_ZN6StringaSEPKc>:
    7b32:	cf 93       	push	r28
    7b34:	df 93       	push	r29
    7b36:	ec 01       	movw	r28, r24
    7b38:	61 15       	cp	r22, r1
    7b3a:	71 05       	cpc	r23, r1
    7b3c:	51 f0       	breq	.+20     	; 0x7b52 <_ZN6StringaSEPKc+0x20>
    7b3e:	fb 01       	movw	r30, r22
    7b40:	01 90       	ld	r0, Z+
    7b42:	00 20       	and	r0, r0
    7b44:	e9 f7       	brne	.-6      	; 0x7b40 <_ZN6StringaSEPKc+0xe>
    7b46:	31 97       	sbiw	r30, 0x01	; 1
    7b48:	af 01       	movw	r20, r30
    7b4a:	46 1b       	sub	r20, r22
    7b4c:	57 0b       	sbc	r21, r23
    7b4e:	54 df       	rcall	.-344    	; 0x79f8 <_ZN6String4copyEPKcj>
    7b50:	01 c0       	rjmp	.+2      	; 0x7b54 <_ZN6StringaSEPKc+0x22>
    7b52:	0d df       	rcall	.-486    	; 0x796e <_ZN6String10invalidateEv>
    7b54:	ce 01       	movw	r24, r28
    7b56:	df 91       	pop	r29
    7b58:	cf 91       	pop	r28
    7b5a:	08 95       	ret

00007b5c <_ZN6StringC1Ehh>:
    7b5c:	0f 93       	push	r16
    7b5e:	1f 93       	push	r17
    7b60:	cf 93       	push	r28
    7b62:	df 93       	push	r29
    7b64:	cd b7       	in	r28, 0x3d	; 61
    7b66:	de b7       	in	r29, 0x3e	; 62
    7b68:	29 97       	sbiw	r28, 0x09	; 9
    7b6a:	0f b6       	in	r0, 0x3f	; 63
    7b6c:	f8 94       	cli
    7b6e:	de bf       	out	0x3e, r29	; 62
    7b70:	0f be       	out	0x3f, r0	; 63
    7b72:	cd bf       	out	0x3d, r28	; 61
    7b74:	8c 01       	movw	r16, r24
    7b76:	86 2f       	mov	r24, r22
    7b78:	f8 01       	movw	r30, r16
    7b7a:	11 82       	std	Z+1, r1	; 0x01
    7b7c:	10 82       	st	Z, r1
    7b7e:	13 82       	std	Z+3, r1	; 0x03
    7b80:	12 82       	std	Z+2, r1	; 0x02
    7b82:	15 82       	std	Z+5, r1	; 0x05
    7b84:	14 82       	std	Z+4, r1	; 0x04
    7b86:	50 e0       	ldi	r21, 0x00	; 0
    7b88:	be 01       	movw	r22, r28
    7b8a:	6f 5f       	subi	r22, 0xFF	; 255
    7b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    7b8e:	90 e0       	ldi	r25, 0x00	; 0
    7b90:	a9 d6       	rcall	.+3410   	; 0x88e4 <utoa>
    7b92:	be 01       	movw	r22, r28
    7b94:	6f 5f       	subi	r22, 0xFF	; 255
    7b96:	7f 4f       	sbci	r23, 0xFF	; 255
    7b98:	c8 01       	movw	r24, r16
    7b9a:	cb df       	rcall	.-106    	; 0x7b32 <_ZN6StringaSEPKc>
    7b9c:	29 96       	adiw	r28, 0x09	; 9
    7b9e:	0f b6       	in	r0, 0x3f	; 63
    7ba0:	f8 94       	cli
    7ba2:	de bf       	out	0x3e, r29	; 62
    7ba4:	0f be       	out	0x3f, r0	; 63
    7ba6:	cd bf       	out	0x3d, r28	; 61
    7ba8:	df 91       	pop	r29
    7baa:	cf 91       	pop	r28
    7bac:	1f 91       	pop	r17
    7bae:	0f 91       	pop	r16
    7bb0:	08 95       	ret

00007bb2 <_ZN6StringC1Emh>:
    7bb2:	0f 93       	push	r16
    7bb4:	1f 93       	push	r17
    7bb6:	cf 93       	push	r28
    7bb8:	df 93       	push	r29
    7bba:	cd b7       	in	r28, 0x3d	; 61
    7bbc:	de b7       	in	r29, 0x3e	; 62
    7bbe:	a1 97       	sbiw	r28, 0x21	; 33
    7bc0:	0f b6       	in	r0, 0x3f	; 63
    7bc2:	f8 94       	cli
    7bc4:	de bf       	out	0x3e, r29	; 62
    7bc6:	0f be       	out	0x3f, r0	; 63
    7bc8:	cd bf       	out	0x3d, r28	; 61
    7bca:	8c 01       	movw	r16, r24
    7bcc:	cb 01       	movw	r24, r22
    7bce:	ba 01       	movw	r22, r20
    7bd0:	f8 01       	movw	r30, r16
    7bd2:	11 82       	std	Z+1, r1	; 0x01
    7bd4:	10 82       	st	Z, r1
    7bd6:	13 82       	std	Z+3, r1	; 0x03
    7bd8:	12 82       	std	Z+2, r1	; 0x02
    7bda:	15 82       	std	Z+5, r1	; 0x05
    7bdc:	14 82       	std	Z+4, r1	; 0x04
    7bde:	30 e0       	ldi	r19, 0x00	; 0
    7be0:	ae 01       	movw	r20, r28
    7be2:	4f 5f       	subi	r20, 0xFF	; 255
    7be4:	5f 4f       	sbci	r21, 0xFF	; 255
    7be6:	53 d6       	rcall	.+3238   	; 0x888e <ultoa>
    7be8:	be 01       	movw	r22, r28
    7bea:	6f 5f       	subi	r22, 0xFF	; 255
    7bec:	7f 4f       	sbci	r23, 0xFF	; 255
    7bee:	c8 01       	movw	r24, r16
    7bf0:	a0 df       	rcall	.-192    	; 0x7b32 <_ZN6StringaSEPKc>
    7bf2:	a1 96       	adiw	r28, 0x21	; 33
    7bf4:	0f b6       	in	r0, 0x3f	; 63
    7bf6:	f8 94       	cli
    7bf8:	de bf       	out	0x3e, r29	; 62
    7bfa:	0f be       	out	0x3f, r0	; 63
    7bfc:	cd bf       	out	0x3d, r28	; 61
    7bfe:	df 91       	pop	r29
    7c00:	cf 91       	pop	r28
    7c02:	1f 91       	pop	r17
    7c04:	0f 91       	pop	r16
    7c06:	08 95       	ret

00007c08 <_ZN6StringC1Edh>:
    7c08:	ef 92       	push	r14
    7c0a:	ff 92       	push	r15
    7c0c:	0f 93       	push	r16
    7c0e:	1f 93       	push	r17
    7c10:	cf 93       	push	r28
    7c12:	df 93       	push	r29
    7c14:	cd b7       	in	r28, 0x3d	; 61
    7c16:	de b7       	in	r29, 0x3e	; 62
    7c18:	a1 97       	sbiw	r28, 0x21	; 33
    7c1a:	0f b6       	in	r0, 0x3f	; 63
    7c1c:	f8 94       	cli
    7c1e:	de bf       	out	0x3e, r29	; 62
    7c20:	0f be       	out	0x3f, r0	; 63
    7c22:	cd bf       	out	0x3d, r28	; 61
    7c24:	7c 01       	movw	r14, r24
    7c26:	cb 01       	movw	r24, r22
    7c28:	ba 01       	movw	r22, r20
    7c2a:	f7 01       	movw	r30, r14
    7c2c:	11 82       	std	Z+1, r1	; 0x01
    7c2e:	10 82       	st	Z, r1
    7c30:	13 82       	std	Z+3, r1	; 0x03
    7c32:	12 82       	std	Z+2, r1	; 0x02
    7c34:	15 82       	std	Z+5, r1	; 0x05
    7c36:	14 82       	std	Z+4, r1	; 0x04
    7c38:	42 e0       	ldi	r20, 0x02	; 2
    7c3a:	42 0f       	add	r20, r18
    7c3c:	8e 01       	movw	r16, r28
    7c3e:	0f 5f       	subi	r16, 0xFF	; 255
    7c40:	1f 4f       	sbci	r17, 0xFF	; 255
    7c42:	ba d3       	rcall	.+1908   	; 0x83b8 <dtostrf>
    7c44:	bc 01       	movw	r22, r24
    7c46:	c7 01       	movw	r24, r14
    7c48:	74 df       	rcall	.-280    	; 0x7b32 <_ZN6StringaSEPKc>
    7c4a:	a1 96       	adiw	r28, 0x21	; 33
    7c4c:	0f b6       	in	r0, 0x3f	; 63
    7c4e:	f8 94       	cli
    7c50:	de bf       	out	0x3e, r29	; 62
    7c52:	0f be       	out	0x3f, r0	; 63
    7c54:	cd bf       	out	0x3d, r28	; 61
    7c56:	df 91       	pop	r29
    7c58:	cf 91       	pop	r28
    7c5a:	1f 91       	pop	r17
    7c5c:	0f 91       	pop	r16
    7c5e:	ff 90       	pop	r15
    7c60:	ef 90       	pop	r14
    7c62:	08 95       	ret

00007c64 <_ZN6String6concatEPKcj>:
    7c64:	ef 92       	push	r14
    7c66:	ff 92       	push	r15
    7c68:	0f 93       	push	r16
    7c6a:	1f 93       	push	r17
    7c6c:	cf 93       	push	r28
    7c6e:	df 93       	push	r29
    7c70:	61 15       	cp	r22, r1
    7c72:	71 05       	cpc	r23, r1
    7c74:	11 f4       	brne	.+4      	; 0x7c7a <_ZN6String6concatEPKcj+0x16>
    7c76:	80 e0       	ldi	r24, 0x00	; 0
    7c78:	1a c0       	rjmp	.+52     	; 0x7cae <_ZN6String6concatEPKcj+0x4a>
    7c7a:	41 15       	cp	r20, r1
    7c7c:	51 05       	cpc	r21, r1
    7c7e:	b1 f0       	breq	.+44     	; 0x7cac <_ZN6String6concatEPKcj+0x48>
    7c80:	7b 01       	movw	r14, r22
    7c82:	ec 01       	movw	r28, r24
    7c84:	8c 81       	ldd	r24, Y+4	; 0x04
    7c86:	9d 81       	ldd	r25, Y+5	; 0x05
    7c88:	8a 01       	movw	r16, r20
    7c8a:	08 0f       	add	r16, r24
    7c8c:	19 1f       	adc	r17, r25
    7c8e:	b8 01       	movw	r22, r16
    7c90:	ce 01       	movw	r24, r28
    7c92:	97 de       	rcall	.-722    	; 0x79c2 <_ZN6String7reserveEj>
    7c94:	88 23       	and	r24, r24
    7c96:	79 f3       	breq	.-34     	; 0x7c76 <_ZN6String6concatEPKcj+0x12>
    7c98:	28 81       	ld	r18, Y
    7c9a:	39 81       	ldd	r19, Y+1	; 0x01
    7c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    7c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    7ca0:	b7 01       	movw	r22, r14
    7ca2:	82 0f       	add	r24, r18
    7ca4:	93 1f       	adc	r25, r19
    7ca6:	cf d5       	rcall	.+2974   	; 0x8846 <strcpy>
    7ca8:	1d 83       	std	Y+5, r17	; 0x05
    7caa:	0c 83       	std	Y+4, r16	; 0x04
    7cac:	81 e0       	ldi	r24, 0x01	; 1
    7cae:	df 91       	pop	r29
    7cb0:	cf 91       	pop	r28
    7cb2:	1f 91       	pop	r17
    7cb4:	0f 91       	pop	r16
    7cb6:	ff 90       	pop	r15
    7cb8:	ef 90       	pop	r14
    7cba:	08 95       	ret

00007cbc <_ZN6String6concatERKS_>:
    7cbc:	fb 01       	movw	r30, r22
    7cbe:	44 81       	ldd	r20, Z+4	; 0x04
    7cc0:	55 81       	ldd	r21, Z+5	; 0x05
    7cc2:	60 81       	ld	r22, Z
    7cc4:	71 81       	ldd	r23, Z+1	; 0x01
    7cc6:	ce cf       	rjmp	.-100    	; 0x7c64 <_ZN6String6concatEPKcj>

00007cc8 <_ZN6String6concatEPKc>:
    7cc8:	61 15       	cp	r22, r1
    7cca:	71 05       	cpc	r23, r1
    7ccc:	49 f0       	breq	.+18     	; 0x7ce0 <_ZN6String6concatEPKc+0x18>
    7cce:	fb 01       	movw	r30, r22
    7cd0:	01 90       	ld	r0, Z+
    7cd2:	00 20       	and	r0, r0
    7cd4:	e9 f7       	brne	.-6      	; 0x7cd0 <_ZN6String6concatEPKc+0x8>
    7cd6:	31 97       	sbiw	r30, 0x01	; 1
    7cd8:	af 01       	movw	r20, r30
    7cda:	46 1b       	sub	r20, r22
    7cdc:	57 0b       	sbc	r21, r23
    7cde:	c2 cf       	rjmp	.-124    	; 0x7c64 <_ZN6String6concatEPKcj>
    7ce0:	80 e0       	ldi	r24, 0x00	; 0
    7ce2:	08 95       	ret

00007ce4 <_ZplRK15StringSumHelperRK6String>:
    7ce4:	cf 93       	push	r28
    7ce6:	df 93       	push	r29
    7ce8:	ec 01       	movw	r28, r24
    7cea:	fb 01       	movw	r30, r22
    7cec:	44 81       	ldd	r20, Z+4	; 0x04
    7cee:	55 81       	ldd	r21, Z+5	; 0x05
    7cf0:	60 81       	ld	r22, Z
    7cf2:	71 81       	ldd	r23, Z+1	; 0x01
    7cf4:	b7 df       	rcall	.-146    	; 0x7c64 <_ZN6String6concatEPKcj>
    7cf6:	81 11       	cpse	r24, r1
    7cf8:	02 c0       	rjmp	.+4      	; 0x7cfe <_ZplRK15StringSumHelperRK6String+0x1a>
    7cfa:	ce 01       	movw	r24, r28
    7cfc:	38 de       	rcall	.-912    	; 0x796e <_ZN6String10invalidateEv>
    7cfe:	ce 01       	movw	r24, r28
    7d00:	df 91       	pop	r29
    7d02:	cf 91       	pop	r28
    7d04:	08 95       	ret

00007d06 <_ZplRK15StringSumHelperPKc>:
    7d06:	cf 93       	push	r28
    7d08:	df 93       	push	r29
    7d0a:	ec 01       	movw	r28, r24
    7d0c:	61 15       	cp	r22, r1
    7d0e:	71 05       	cpc	r23, r1
    7d10:	59 f0       	breq	.+22     	; 0x7d28 <_ZplRK15StringSumHelperPKc+0x22>
    7d12:	fb 01       	movw	r30, r22
    7d14:	01 90       	ld	r0, Z+
    7d16:	00 20       	and	r0, r0
    7d18:	e9 f7       	brne	.-6      	; 0x7d14 <_ZplRK15StringSumHelperPKc+0xe>
    7d1a:	31 97       	sbiw	r30, 0x01	; 1
    7d1c:	af 01       	movw	r20, r30
    7d1e:	46 1b       	sub	r20, r22
    7d20:	57 0b       	sbc	r21, r23
    7d22:	a0 df       	rcall	.-192    	; 0x7c64 <_ZN6String6concatEPKcj>
    7d24:	81 11       	cpse	r24, r1
    7d26:	02 c0       	rjmp	.+4      	; 0x7d2c <_ZplRK15StringSumHelperPKc+0x26>
    7d28:	ce 01       	movw	r24, r28
    7d2a:	21 de       	rcall	.-958    	; 0x796e <_ZN6String10invalidateEv>
    7d2c:	ce 01       	movw	r24, r28
    7d2e:	df 91       	pop	r29
    7d30:	cf 91       	pop	r28
    7d32:	08 95       	ret

00007d34 <_ZNK6String6equalsEPKc>:
    7d34:	fc 01       	movw	r30, r24
    7d36:	24 81       	ldd	r18, Z+4	; 0x04
    7d38:	35 81       	ldd	r19, Z+5	; 0x05
    7d3a:	23 2b       	or	r18, r19
    7d3c:	31 f4       	brne	.+12     	; 0x7d4a <_ZNK6String6equalsEPKc+0x16>
    7d3e:	21 e0       	ldi	r18, 0x01	; 1
    7d40:	61 15       	cp	r22, r1
    7d42:	71 05       	cpc	r23, r1
    7d44:	99 f0       	breq	.+38     	; 0x7d6c <_ZNK6String6equalsEPKc+0x38>
    7d46:	fb 01       	movw	r30, r22
    7d48:	08 c0       	rjmp	.+16     	; 0x7d5a <_ZNK6String6equalsEPKc+0x26>
    7d4a:	fc 01       	movw	r30, r24
    7d4c:	80 81       	ld	r24, Z
    7d4e:	91 81       	ldd	r25, Z+1	; 0x01
    7d50:	61 15       	cp	r22, r1
    7d52:	71 05       	cpc	r23, r1
    7d54:	31 f4       	brne	.+12     	; 0x7d62 <_ZNK6String6equalsEPKc+0x2e>
    7d56:	21 e0       	ldi	r18, 0x01	; 1
    7d58:	fc 01       	movw	r30, r24
    7d5a:	80 81       	ld	r24, Z
    7d5c:	88 23       	and	r24, r24
    7d5e:	31 f0       	breq	.+12     	; 0x7d6c <_ZNK6String6equalsEPKc+0x38>
    7d60:	04 c0       	rjmp	.+8      	; 0x7d6a <_ZNK6String6equalsEPKc+0x36>
    7d62:	68 d5       	rcall	.+2768   	; 0x8834 <strcmp>
    7d64:	21 e0       	ldi	r18, 0x01	; 1
    7d66:	89 2b       	or	r24, r25
    7d68:	09 f0       	breq	.+2      	; 0x7d6c <_ZNK6String6equalsEPKc+0x38>
    7d6a:	20 e0       	ldi	r18, 0x00	; 0
    7d6c:	82 2f       	mov	r24, r18
    7d6e:	08 95       	ret

00007d70 <_ZNK6String8getBytesEPhjj>:
    7d70:	0f 93       	push	r16
    7d72:	1f 93       	push	r17
    7d74:	cf 93       	push	r28
    7d76:	df 93       	push	r29
    7d78:	41 15       	cp	r20, r1
    7d7a:	51 05       	cpc	r21, r1
    7d7c:	11 f1       	breq	.+68     	; 0x7dc2 <_ZNK6String8getBytesEPhjj+0x52>
    7d7e:	61 15       	cp	r22, r1
    7d80:	71 05       	cpc	r23, r1
    7d82:	f9 f0       	breq	.+62     	; 0x7dc2 <_ZNK6String8getBytesEPhjj+0x52>
    7d84:	dc 01       	movw	r26, r24
    7d86:	14 96       	adiw	r26, 0x04	; 4
    7d88:	ed 91       	ld	r30, X+
    7d8a:	fc 91       	ld	r31, X
    7d8c:	15 97       	sbiw	r26, 0x05	; 5
    7d8e:	2e 17       	cp	r18, r30
    7d90:	3f 07       	cpc	r19, r31
    7d92:	18 f0       	brcs	.+6      	; 0x7d9a <_ZNK6String8getBytesEPhjj+0x2a>
    7d94:	fb 01       	movw	r30, r22
    7d96:	10 82       	st	Z, r1
    7d98:	14 c0       	rjmp	.+40     	; 0x7dc2 <_ZNK6String8getBytesEPhjj+0x52>
    7d9a:	e2 1b       	sub	r30, r18
    7d9c:	f3 0b       	sbc	r31, r19
    7d9e:	ea 01       	movw	r28, r20
    7da0:	21 97       	sbiw	r28, 0x01	; 1
    7da2:	ec 17       	cp	r30, r28
    7da4:	fd 07       	cpc	r31, r29
    7da6:	08 f4       	brcc	.+2      	; 0x7daa <_ZNK6String8getBytesEPhjj+0x3a>
    7da8:	ef 01       	movw	r28, r30
    7daa:	8b 01       	movw	r16, r22
    7dac:	fc 01       	movw	r30, r24
    7dae:	60 81       	ld	r22, Z
    7db0:	71 81       	ldd	r23, Z+1	; 0x01
    7db2:	62 0f       	add	r22, r18
    7db4:	73 1f       	adc	r23, r19
    7db6:	ae 01       	movw	r20, r28
    7db8:	c8 01       	movw	r24, r16
    7dba:	5a d5       	rcall	.+2740   	; 0x8870 <strncpy>
    7dbc:	c0 0f       	add	r28, r16
    7dbe:	d1 1f       	adc	r29, r17
    7dc0:	18 82       	st	Y, r1
    7dc2:	df 91       	pop	r29
    7dc4:	cf 91       	pop	r28
    7dc6:	1f 91       	pop	r17
    7dc8:	0f 91       	pop	r16
    7dca:	08 95       	ret

00007dcc <_ZNK6String9substringEjj>:
    7dcc:	bf 92       	push	r11
    7dce:	cf 92       	push	r12
    7dd0:	df 92       	push	r13
    7dd2:	ef 92       	push	r14
    7dd4:	ff 92       	push	r15
    7dd6:	0f 93       	push	r16
    7dd8:	1f 93       	push	r17
    7dda:	cf 93       	push	r28
    7ddc:	df 93       	push	r29
    7dde:	7c 01       	movw	r14, r24
    7de0:	6b 01       	movw	r12, r22
    7de2:	8a 01       	movw	r16, r20
    7de4:	e9 01       	movw	r28, r18
    7de6:	24 17       	cp	r18, r20
    7de8:	35 07       	cpc	r19, r21
    7dea:	20 f4       	brcc	.+8      	; 0x7df4 <_ZNK6String9substringEjj+0x28>
    7dec:	81 2f       	mov	r24, r17
    7dee:	89 01       	movw	r16, r18
    7df0:	c4 2f       	mov	r28, r20
    7df2:	d8 2f       	mov	r29, r24
    7df4:	6f eb       	ldi	r22, 0xBF	; 191
    7df6:	71 e0       	ldi	r23, 0x01	; 1
    7df8:	c7 01       	movw	r24, r14
    7dfa:	1c de       	rcall	.-968    	; 0x7a34 <_ZN6StringC1EPKc>
    7dfc:	d6 01       	movw	r26, r12
    7dfe:	14 96       	adiw	r26, 0x04	; 4
    7e00:	8d 91       	ld	r24, X+
    7e02:	9c 91       	ld	r25, X
    7e04:	15 97       	sbiw	r26, 0x05	; 5
    7e06:	08 17       	cp	r16, r24
    7e08:	19 07       	cpc	r17, r25
    7e0a:	c0 f4       	brcc	.+48     	; 0x7e3c <_ZNK6String9substringEjj+0x70>
    7e0c:	8c 17       	cp	r24, r28
    7e0e:	9d 07       	cpc	r25, r29
    7e10:	08 f4       	brcc	.+2      	; 0x7e14 <_ZNK6String9substringEjj+0x48>
    7e12:	ec 01       	movw	r28, r24
    7e14:	d6 01       	movw	r26, r12
    7e16:	ed 91       	ld	r30, X+
    7e18:	fc 91       	ld	r31, X
    7e1a:	11 97       	sbiw	r26, 0x01	; 1
    7e1c:	ec 0f       	add	r30, r28
    7e1e:	fd 1f       	adc	r31, r29
    7e20:	b0 80       	ld	r11, Z
    7e22:	10 82       	st	Z, r1
    7e24:	6d 91       	ld	r22, X+
    7e26:	7c 91       	ld	r23, X
    7e28:	60 0f       	add	r22, r16
    7e2a:	71 1f       	adc	r23, r17
    7e2c:	c7 01       	movw	r24, r14
    7e2e:	81 de       	rcall	.-766    	; 0x7b32 <_ZN6StringaSEPKc>
    7e30:	d6 01       	movw	r26, r12
    7e32:	ed 91       	ld	r30, X+
    7e34:	fc 91       	ld	r31, X
    7e36:	ec 0f       	add	r30, r28
    7e38:	fd 1f       	adc	r31, r29
    7e3a:	b0 82       	st	Z, r11
    7e3c:	c7 01       	movw	r24, r14
    7e3e:	df 91       	pop	r29
    7e40:	cf 91       	pop	r28
    7e42:	1f 91       	pop	r17
    7e44:	0f 91       	pop	r16
    7e46:	ff 90       	pop	r15
    7e48:	ef 90       	pop	r14
    7e4a:	df 90       	pop	r13
    7e4c:	cf 90       	pop	r12
    7e4e:	bf 90       	pop	r11
    7e50:	08 95       	ret

00007e52 <_ZN6String4trimEv>:

void String::trim(void)
{
    7e52:	af 92       	push	r10
    7e54:	bf 92       	push	r11
    7e56:	cf 92       	push	r12
    7e58:	df 92       	push	r13
    7e5a:	ef 92       	push	r14
    7e5c:	ff 92       	push	r15
    7e5e:	0f 93       	push	r16
    7e60:	1f 93       	push	r17
    7e62:	cf 93       	push	r28
    7e64:	df 93       	push	r29
	if (!buffer || len == 0) return;
    7e66:	dc 01       	movw	r26, r24
    7e68:	cd 90       	ld	r12, X+
    7e6a:	dc 90       	ld	r13, X
    7e6c:	11 97       	sbiw	r26, 0x01	; 1
    7e6e:	c1 14       	cp	r12, r1
    7e70:	d1 04       	cpc	r13, r1
    7e72:	09 f4       	brne	.+2      	; 0x7e76 <_ZN6String4trimEv+0x24>
    7e74:	3c c0       	rjmp	.+120    	; 0x7eee <_ZN6String4trimEv+0x9c>
    7e76:	14 96       	adiw	r26, 0x04	; 4
    7e78:	cd 91       	ld	r28, X+
    7e7a:	dc 91       	ld	r29, X
    7e7c:	15 97       	sbiw	r26, 0x05	; 5
    7e7e:	20 97       	sbiw	r28, 0x00	; 0
    7e80:	b1 f1       	breq	.+108    	; 0x7eee <_ZN6String4trimEv+0x9c>
    7e82:	8c 01       	movw	r16, r24
    7e84:	76 01       	movw	r14, r12
    7e86:	57 01       	movw	r10, r14
    7e88:	bf ef       	ldi	r27, 0xFF	; 255
    7e8a:	ab 1a       	sub	r10, r27
    7e8c:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    7e8e:	f7 01       	movw	r30, r14
    7e90:	80 81       	ld	r24, Z
    7e92:	90 e0       	ldi	r25, 0x00	; 0
    7e94:	b5 d4       	rcall	.+2410   	; 0x8800 <isspace>
    7e96:	89 2b       	or	r24, r25
    7e98:	11 f0       	breq	.+4      	; 0x7e9e <_ZN6String4trimEv+0x4c>
    7e9a:	75 01       	movw	r14, r10
    7e9c:	f4 cf       	rjmp	.-24     	; 0x7e86 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    7e9e:	21 97       	sbiw	r28, 0x01	; 1
    7ea0:	cc 0d       	add	r28, r12
    7ea2:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    7ea4:	88 81       	ld	r24, Y
    7ea6:	90 e0       	ldi	r25, 0x00	; 0
    7ea8:	ab d4       	rcall	.+2390   	; 0x8800 <isspace>
    7eaa:	89 2b       	or	r24, r25
    7eac:	29 f0       	breq	.+10     	; 0x7eb8 <_ZN6String4trimEv+0x66>
    7eae:	ce 15       	cp	r28, r14
    7eb0:	df 05       	cpc	r29, r15
    7eb2:	10 f0       	brcs	.+4      	; 0x7eb8 <_ZN6String4trimEv+0x66>
    7eb4:	21 97       	sbiw	r28, 0x01	; 1
    7eb6:	f6 cf       	rjmp	.-20     	; 0x7ea4 <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    7eb8:	ae 01       	movw	r20, r28
    7eba:	4f 5f       	subi	r20, 0xFF	; 255
    7ebc:	5f 4f       	sbci	r21, 0xFF	; 255
    7ebe:	4e 19       	sub	r20, r14
    7ec0:	5f 09       	sbc	r21, r15
    7ec2:	d8 01       	movw	r26, r16
    7ec4:	15 96       	adiw	r26, 0x05	; 5
    7ec6:	5c 93       	st	X, r21
    7ec8:	4e 93       	st	-X, r20
    7eca:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    7ecc:	ce 14       	cp	r12, r14
    7ece:	df 04       	cpc	r13, r15
    7ed0:	18 f4       	brcc	.+6      	; 0x7ed8 <_ZN6String4trimEv+0x86>
    7ed2:	b7 01       	movw	r22, r14
    7ed4:	c6 01       	movw	r24, r12
    7ed6:	a5 d4       	rcall	.+2378   	; 0x8822 <memcpy>
	buffer[len] = 0;
    7ed8:	d8 01       	movw	r26, r16
    7eda:	ed 91       	ld	r30, X+
    7edc:	fc 91       	ld	r31, X
    7ede:	11 97       	sbiw	r26, 0x01	; 1
    7ee0:	14 96       	adiw	r26, 0x04	; 4
    7ee2:	8d 91       	ld	r24, X+
    7ee4:	9c 91       	ld	r25, X
    7ee6:	15 97       	sbiw	r26, 0x05	; 5
    7ee8:	e8 0f       	add	r30, r24
    7eea:	f9 1f       	adc	r31, r25
    7eec:	10 82       	st	Z, r1
}
    7eee:	df 91       	pop	r29
    7ef0:	cf 91       	pop	r28
    7ef2:	1f 91       	pop	r17
    7ef4:	0f 91       	pop	r16
    7ef6:	ff 90       	pop	r15
    7ef8:	ef 90       	pop	r14
    7efa:	df 90       	pop	r13
    7efc:	cf 90       	pop	r12
    7efe:	bf 90       	pop	r11
    7f00:	af 90       	pop	r10
    7f02:	08 95       	ret

00007f04 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    7f04:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    7f06:	91 8d       	ldd	r25, Z+25	; 0x19
    7f08:	22 8d       	ldd	r18, Z+26	; 0x1a
    7f0a:	89 2f       	mov	r24, r25
    7f0c:	90 e0       	ldi	r25, 0x00	; 0
    7f0e:	80 5c       	subi	r24, 0xC0	; 192
    7f10:	9f 4f       	sbci	r25, 0xFF	; 255
    7f12:	82 1b       	sub	r24, r18
    7f14:	91 09       	sbc	r25, r1
}
    7f16:	8f 73       	andi	r24, 0x3F	; 63
    7f18:	99 27       	eor	r25, r25
    7f1a:	08 95       	ret

00007f1c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    7f1c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    7f1e:	91 8d       	ldd	r25, Z+25	; 0x19
    7f20:	82 8d       	ldd	r24, Z+26	; 0x1a
    7f22:	98 17       	cp	r25, r24
    7f24:	31 f0       	breq	.+12     	; 0x7f32 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    7f26:	82 8d       	ldd	r24, Z+26	; 0x1a
    7f28:	e8 0f       	add	r30, r24
    7f2a:	f1 1d       	adc	r31, r1
    7f2c:	85 8d       	ldd	r24, Z+29	; 0x1d
    7f2e:	90 e0       	ldi	r25, 0x00	; 0
    7f30:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7f32:	8f ef       	ldi	r24, 0xFF	; 255
    7f34:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    7f36:	08 95       	ret

00007f38 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    7f38:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    7f3a:	91 8d       	ldd	r25, Z+25	; 0x19
    7f3c:	82 8d       	ldd	r24, Z+26	; 0x1a
    7f3e:	98 17       	cp	r25, r24
    7f40:	61 f0       	breq	.+24     	; 0x7f5a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    7f42:	82 8d       	ldd	r24, Z+26	; 0x1a
    7f44:	df 01       	movw	r26, r30
    7f46:	a8 0f       	add	r26, r24
    7f48:	b1 1d       	adc	r27, r1
    7f4a:	5d 96       	adiw	r26, 0x1d	; 29
    7f4c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    7f4e:	92 8d       	ldd	r25, Z+26	; 0x1a
    7f50:	9f 5f       	subi	r25, 0xFF	; 255
    7f52:	9f 73       	andi	r25, 0x3F	; 63
    7f54:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    7f56:	90 e0       	ldi	r25, 0x00	; 0
    7f58:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7f5a:	8f ef       	ldi	r24, 0xFF	; 255
    7f5c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    7f5e:	08 95       	ret

00007f60 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    7f60:	fc 01       	movw	r30, r24
    7f62:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    7f64:	44 8d       	ldd	r20, Z+28	; 0x1c
    7f66:	25 2f       	mov	r18, r21
    7f68:	30 e0       	ldi	r19, 0x00	; 0
    7f6a:	84 2f       	mov	r24, r20
    7f6c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    7f6e:	82 1b       	sub	r24, r18
    7f70:	93 0b       	sbc	r25, r19
    7f72:	54 17       	cp	r21, r20
    7f74:	10 f0       	brcs	.+4      	; 0x7f7a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    7f76:	cf 96       	adiw	r24, 0x3f	; 63
    7f78:	08 95       	ret
  return tail - head - 1;
    7f7a:	01 97       	sbiw	r24, 0x01	; 1
}
    7f7c:	08 95       	ret

00007f7e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    7f7e:	8b e2       	ldi	r24, 0x2B	; 43
    7f80:	99 e3       	ldi	r25, 0x39	; 57
    7f82:	89 2b       	or	r24, r25
    7f84:	41 f0       	breq	.+16     	; 0x7f96 <_Z14serialEventRunv+0x18>
    7f86:	80 e0       	ldi	r24, 0x00	; 0
    7f88:	90 e0       	ldi	r25, 0x00	; 0
    7f8a:	89 2b       	or	r24, r25
    7f8c:	21 f0       	breq	.+8      	; 0x7f96 <_Z14serialEventRunv+0x18>
    7f8e:	63 d9       	rcall	.-3386   	; 0x7256 <_Z17Serial0_availablev>
    7f90:	81 11       	cpse	r24, r1
    7f92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    7f96:	08 95       	ret

00007f98 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    7f98:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    7f9a:	84 8d       	ldd	r24, Z+28	; 0x1c
    7f9c:	df 01       	movw	r26, r30
    7f9e:	a8 0f       	add	r26, r24
    7fa0:	b1 1d       	adc	r27, r1
    7fa2:	a3 5a       	subi	r26, 0xA3	; 163
    7fa4:	bf 4f       	sbci	r27, 0xFF	; 255
    7fa6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    7fa8:	84 8d       	ldd	r24, Z+28	; 0x1c
    7faa:	90 e0       	ldi	r25, 0x00	; 0
    7fac:	01 96       	adiw	r24, 0x01	; 1
    7fae:	8f 73       	andi	r24, 0x3F	; 63
    7fb0:	99 27       	eor	r25, r25
    7fb2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    7fb4:	a6 89       	ldd	r26, Z+22	; 0x16
    7fb6:	b7 89       	ldd	r27, Z+23	; 0x17
    7fb8:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    7fba:	a0 89       	ldd	r26, Z+16	; 0x10
    7fbc:	b1 89       	ldd	r27, Z+17	; 0x11
    7fbe:	8c 91       	ld	r24, X
    7fc0:	83 70       	andi	r24, 0x03	; 3
    7fc2:	80 64       	ori	r24, 0x40	; 64
    7fc4:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    7fc6:	93 8d       	ldd	r25, Z+27	; 0x1b
    7fc8:	84 8d       	ldd	r24, Z+28	; 0x1c
    7fca:	98 13       	cpse	r25, r24
    7fcc:	06 c0       	rjmp	.+12     	; 0x7fda <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    7fce:	02 88       	ldd	r0, Z+18	; 0x12
    7fd0:	f3 89       	ldd	r31, Z+19	; 0x13
    7fd2:	e0 2d       	mov	r30, r0
    7fd4:	80 81       	ld	r24, Z
    7fd6:	8f 7d       	andi	r24, 0xDF	; 223
    7fd8:	80 83       	st	Z, r24
    7fda:	08 95       	ret

00007fdc <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    7fdc:	ef 92       	push	r14
    7fde:	ff 92       	push	r15
    7fe0:	0f 93       	push	r16
    7fe2:	1f 93       	push	r17
    7fe4:	cf 93       	push	r28
    7fe6:	df 93       	push	r29
    7fe8:	ec 01       	movw	r28, r24
  _written = true;
    7fea:	81 e0       	ldi	r24, 0x01	; 1
    7fec:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    7fee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7ff0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7ff2:	98 13       	cpse	r25, r24
    7ff4:	05 c0       	rjmp	.+10     	; 0x8000 <_ZN14HardwareSerial5writeEh+0x24>
    7ff6:	e8 89       	ldd	r30, Y+16	; 0x10
    7ff8:	f9 89       	ldd	r31, Y+17	; 0x11
    7ffa:	80 81       	ld	r24, Z
    7ffc:	85 fd       	sbrc	r24, 5
    7ffe:	25 c0       	rjmp	.+74     	; 0x804a <_ZN14HardwareSerial5writeEh+0x6e>
    8000:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    8002:	0b 8d       	ldd	r16, Y+27	; 0x1b
    8004:	10 e0       	ldi	r17, 0x00	; 0
    8006:	0f 5f       	subi	r16, 0xFF	; 255
    8008:	1f 4f       	sbci	r17, 0xFF	; 255
    800a:	0f 73       	andi	r16, 0x3F	; 63
    800c:	11 27       	eor	r17, r17
    800e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    8010:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8012:	e8 12       	cpse	r14, r24
    8014:	0b c0       	rjmp	.+22     	; 0x802c <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    8016:	0f b6       	in	r0, 0x3f	; 63
    8018:	07 fc       	sbrc	r0, 7
    801a:	fa cf       	rjmp	.-12     	; 0x8010 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    801c:	e8 89       	ldd	r30, Y+16	; 0x10
    801e:	f9 89       	ldd	r31, Y+17	; 0x11
    8020:	80 81       	ld	r24, Z
    8022:	85 ff       	sbrs	r24, 5
    8024:	f5 cf       	rjmp	.-22     	; 0x8010 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    8026:	ce 01       	movw	r24, r28
    8028:	b7 df       	rcall	.-146    	; 0x7f98 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    802a:	f2 cf       	rjmp	.-28     	; 0x8010 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    802c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    802e:	fe 01       	movw	r30, r28
    8030:	e8 0f       	add	r30, r24
    8032:	f1 1d       	adc	r31, r1
    8034:	e3 5a       	subi	r30, 0xA3	; 163
    8036:	ff 4f       	sbci	r31, 0xFF	; 255
    8038:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    803a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    803c:	f8 94       	cli
    _tx_buffer_head = i;
    803e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    8040:	ea 89       	ldd	r30, Y+18	; 0x12
    8042:	fb 89       	ldd	r31, Y+19	; 0x13
    8044:	80 81       	ld	r24, Z
    8046:	80 62       	ori	r24, 0x20	; 32
    8048:	0a c0       	rjmp	.+20     	; 0x805e <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    804a:	9f b7       	in	r25, 0x3f	; 63
    804c:	f8 94       	cli
      *_udr = c;
    804e:	ee 89       	ldd	r30, Y+22	; 0x16
    8050:	ff 89       	ldd	r31, Y+23	; 0x17
    8052:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    8054:	e8 89       	ldd	r30, Y+16	; 0x10
    8056:	f9 89       	ldd	r31, Y+17	; 0x11
    8058:	80 81       	ld	r24, Z
    805a:	83 70       	andi	r24, 0x03	; 3
    805c:	80 64       	ori	r24, 0x40	; 64
    805e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    8060:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    8062:	81 e0       	ldi	r24, 0x01	; 1
    8064:	90 e0       	ldi	r25, 0x00	; 0
    8066:	df 91       	pop	r29
    8068:	cf 91       	pop	r28
    806a:	1f 91       	pop	r17
    806c:	0f 91       	pop	r16
    806e:	ff 90       	pop	r15
    8070:	ef 90       	pop	r14
    8072:	08 95       	ret

00008074 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    8074:	cf 93       	push	r28
    8076:	df 93       	push	r29
    8078:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    807a:	88 8d       	ldd	r24, Y+24	; 0x18
    807c:	88 23       	and	r24, r24
    807e:	c1 f0       	breq	.+48     	; 0x80b0 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    8080:	ea 89       	ldd	r30, Y+18	; 0x12
    8082:	fb 89       	ldd	r31, Y+19	; 0x13
    8084:	80 81       	ld	r24, Z
    8086:	85 fd       	sbrc	r24, 5
    8088:	05 c0       	rjmp	.+10     	; 0x8094 <_ZN14HardwareSerial5flushEv+0x20>
    808a:	a8 89       	ldd	r26, Y+16	; 0x10
    808c:	b9 89       	ldd	r27, Y+17	; 0x11
    808e:	8c 91       	ld	r24, X
    8090:	86 fd       	sbrc	r24, 6
    8092:	0e c0       	rjmp	.+28     	; 0x80b0 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    8094:	0f b6       	in	r0, 0x3f	; 63
    8096:	07 fc       	sbrc	r0, 7
    8098:	f5 cf       	rjmp	.-22     	; 0x8084 <_ZN14HardwareSerial5flushEv+0x10>
    809a:	80 81       	ld	r24, Z
    809c:	85 ff       	sbrs	r24, 5
    809e:	f2 cf       	rjmp	.-28     	; 0x8084 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    80a0:	a8 89       	ldd	r26, Y+16	; 0x10
    80a2:	b9 89       	ldd	r27, Y+17	; 0x11
    80a4:	8c 91       	ld	r24, X
    80a6:	85 ff       	sbrs	r24, 5
    80a8:	ed cf       	rjmp	.-38     	; 0x8084 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    80aa:	ce 01       	movw	r24, r28
    80ac:	75 df       	rcall	.-278    	; 0x7f98 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    80ae:	e8 cf       	rjmp	.-48     	; 0x8080 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    80b0:	df 91       	pop	r29
    80b2:	cf 91       	pop	r28
    80b4:	08 95       	ret

000080b6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    80b6:	08 95       	ret

000080b8 <__udivmodqi4>:
    80b8:	99 1b       	sub	r25, r25
    80ba:	79 e0       	ldi	r23, 0x09	; 9
    80bc:	04 c0       	rjmp	.+8      	; 0x80c6 <__udivmodqi4_ep>

000080be <__udivmodqi4_loop>:
    80be:	99 1f       	adc	r25, r25
    80c0:	96 17       	cp	r25, r22
    80c2:	08 f0       	brcs	.+2      	; 0x80c6 <__udivmodqi4_ep>
    80c4:	96 1b       	sub	r25, r22

000080c6 <__udivmodqi4_ep>:
    80c6:	88 1f       	adc	r24, r24
    80c8:	7a 95       	dec	r23
    80ca:	c9 f7       	brne	.-14     	; 0x80be <__udivmodqi4_loop>
    80cc:	80 95       	com	r24
    80ce:	08 95       	ret

000080d0 <__udivmodhi4>:
    80d0:	aa 1b       	sub	r26, r26
    80d2:	bb 1b       	sub	r27, r27
    80d4:	51 e1       	ldi	r21, 0x11	; 17
    80d6:	07 c0       	rjmp	.+14     	; 0x80e6 <__udivmodhi4_ep>

000080d8 <__udivmodhi4_loop>:
    80d8:	aa 1f       	adc	r26, r26
    80da:	bb 1f       	adc	r27, r27
    80dc:	a6 17       	cp	r26, r22
    80de:	b7 07       	cpc	r27, r23
    80e0:	10 f0       	brcs	.+4      	; 0x80e6 <__udivmodhi4_ep>
    80e2:	a6 1b       	sub	r26, r22
    80e4:	b7 0b       	sbc	r27, r23

000080e6 <__udivmodhi4_ep>:
    80e6:	88 1f       	adc	r24, r24
    80e8:	99 1f       	adc	r25, r25
    80ea:	5a 95       	dec	r21
    80ec:	a9 f7       	brne	.-22     	; 0x80d8 <__udivmodhi4_loop>
    80ee:	80 95       	com	r24
    80f0:	90 95       	com	r25
    80f2:	bc 01       	movw	r22, r24
    80f4:	cd 01       	movw	r24, r26
    80f6:	08 95       	ret

000080f8 <__udivmodsi4>:
    80f8:	a1 e2       	ldi	r26, 0x21	; 33
    80fa:	1a 2e       	mov	r1, r26
    80fc:	aa 1b       	sub	r26, r26
    80fe:	bb 1b       	sub	r27, r27
    8100:	fd 01       	movw	r30, r26
    8102:	0d c0       	rjmp	.+26     	; 0x811e <__udivmodsi4_ep>

00008104 <__udivmodsi4_loop>:
    8104:	aa 1f       	adc	r26, r26
    8106:	bb 1f       	adc	r27, r27
    8108:	ee 1f       	adc	r30, r30
    810a:	ff 1f       	adc	r31, r31
    810c:	a2 17       	cp	r26, r18
    810e:	b3 07       	cpc	r27, r19
    8110:	e4 07       	cpc	r30, r20
    8112:	f5 07       	cpc	r31, r21
    8114:	20 f0       	brcs	.+8      	; 0x811e <__udivmodsi4_ep>
    8116:	a2 1b       	sub	r26, r18
    8118:	b3 0b       	sbc	r27, r19
    811a:	e4 0b       	sbc	r30, r20
    811c:	f5 0b       	sbc	r31, r21

0000811e <__udivmodsi4_ep>:
    811e:	66 1f       	adc	r22, r22
    8120:	77 1f       	adc	r23, r23
    8122:	88 1f       	adc	r24, r24
    8124:	99 1f       	adc	r25, r25
    8126:	1a 94       	dec	r1
    8128:	69 f7       	brne	.-38     	; 0x8104 <__udivmodsi4_loop>
    812a:	60 95       	com	r22
    812c:	70 95       	com	r23
    812e:	80 95       	com	r24
    8130:	90 95       	com	r25
    8132:	9b 01       	movw	r18, r22
    8134:	ac 01       	movw	r20, r24
    8136:	bd 01       	movw	r22, r26
    8138:	cf 01       	movw	r24, r30
    813a:	08 95       	ret

0000813c <__tablejump2__>:
    813c:	ee 0f       	add	r30, r30
    813e:	ff 1f       	adc	r31, r31
    8140:	00 24       	eor	r0, r0
    8142:	00 1c       	adc	r0, r0
    8144:	0b be       	out	0x3b, r0	; 59
    8146:	07 90       	elpm	r0, Z+
    8148:	f6 91       	elpm	r31, Z
    814a:	e0 2d       	mov	r30, r0
    814c:	09 94       	ijmp

0000814e <__umulhisi3>:
    814e:	a2 9f       	mul	r26, r18
    8150:	b0 01       	movw	r22, r0
    8152:	b3 9f       	mul	r27, r19
    8154:	c0 01       	movw	r24, r0
    8156:	a3 9f       	mul	r26, r19
    8158:	70 0d       	add	r23, r0
    815a:	81 1d       	adc	r24, r1
    815c:	11 24       	eor	r1, r1
    815e:	91 1d       	adc	r25, r1
    8160:	b2 9f       	mul	r27, r18
    8162:	70 0d       	add	r23, r0
    8164:	81 1d       	adc	r24, r1
    8166:	11 24       	eor	r1, r1
    8168:	91 1d       	adc	r25, r1
    816a:	08 95       	ret

0000816c <__muluhisi3>:
    816c:	f0 df       	rcall	.-32     	; 0x814e <__umulhisi3>
    816e:	a5 9f       	mul	r26, r21
    8170:	90 0d       	add	r25, r0
    8172:	b4 9f       	mul	r27, r20
    8174:	90 0d       	add	r25, r0
    8176:	a4 9f       	mul	r26, r20
    8178:	80 0d       	add	r24, r0
    817a:	91 1d       	adc	r25, r1
    817c:	11 24       	eor	r1, r1
    817e:	08 95       	ret

00008180 <__moddi3>:
    8180:	68 94       	set
    8182:	01 c0       	rjmp	.+2      	; 0x8186 <__divdi3_moddi3>

00008184 <__divdi3>:
    8184:	e8 94       	clt

00008186 <__divdi3_moddi3>:
    8186:	f9 2f       	mov	r31, r25
    8188:	f1 2b       	or	r31, r17
    818a:	0a f0       	brmi	.+2      	; 0x818e <__divdi3_moddi3+0x8>
    818c:	27 c0       	rjmp	.+78     	; 0x81dc <__udivdi3_umoddi3>
    818e:	a0 e0       	ldi	r26, 0x00	; 0
    8190:	b0 e0       	ldi	r27, 0x00	; 0
    8192:	ec ec       	ldi	r30, 0xCC	; 204
    8194:	f0 e4       	ldi	r31, 0x40	; 64
    8196:	93 c0       	rjmp	.+294    	; 0x82be <__prologue_saves__+0xc>
    8198:	09 2e       	mov	r0, r25
    819a:	05 94       	asr	r0
    819c:	1a f4       	brpl	.+6      	; 0x81a4 <__divdi3_moddi3+0x1e>
    819e:	79 d0       	rcall	.+242    	; 0x8292 <__negdi2>
    81a0:	11 23       	and	r17, r17
    81a2:	92 f4       	brpl	.+36     	; 0x81c8 <__divdi3_moddi3+0x42>
    81a4:	f0 e8       	ldi	r31, 0x80	; 128
    81a6:	0f 26       	eor	r0, r31
    81a8:	ff ef       	ldi	r31, 0xFF	; 255
    81aa:	e0 94       	com	r14
    81ac:	f0 94       	com	r15
    81ae:	00 95       	com	r16
    81b0:	10 95       	com	r17
    81b2:	b0 94       	com	r11
    81b4:	c0 94       	com	r12
    81b6:	d0 94       	com	r13
    81b8:	a1 94       	neg	r10
    81ba:	bf 0a       	sbc	r11, r31
    81bc:	cf 0a       	sbc	r12, r31
    81be:	df 0a       	sbc	r13, r31
    81c0:	ef 0a       	sbc	r14, r31
    81c2:	ff 0a       	sbc	r15, r31
    81c4:	0f 0b       	sbc	r16, r31
    81c6:	1f 0b       	sbc	r17, r31
    81c8:	13 d0       	rcall	.+38     	; 0x81f0 <__udivmod64>
    81ca:	07 fc       	sbrc	r0, 7
    81cc:	62 d0       	rcall	.+196    	; 0x8292 <__negdi2>
    81ce:	cd b7       	in	r28, 0x3d	; 61
    81d0:	de b7       	in	r29, 0x3e	; 62
    81d2:	ec e0       	ldi	r30, 0x0C	; 12
    81d4:	90 c0       	rjmp	.+288    	; 0x82f6 <__epilogue_restores__+0xc>

000081d6 <__umoddi3>:
    81d6:	68 94       	set
    81d8:	01 c0       	rjmp	.+2      	; 0x81dc <__udivdi3_umoddi3>

000081da <__udivdi3>:
    81da:	e8 94       	clt

000081dc <__udivdi3_umoddi3>:
    81dc:	8f 92       	push	r8
    81de:	9f 92       	push	r9
    81e0:	cf 93       	push	r28
    81e2:	df 93       	push	r29
    81e4:	05 d0       	rcall	.+10     	; 0x81f0 <__udivmod64>
    81e6:	df 91       	pop	r29
    81e8:	cf 91       	pop	r28
    81ea:	9f 90       	pop	r9
    81ec:	8f 90       	pop	r8
    81ee:	08 95       	ret

000081f0 <__udivmod64>:
    81f0:	88 24       	eor	r8, r8
    81f2:	99 24       	eor	r9, r9
    81f4:	f4 01       	movw	r30, r8
    81f6:	e4 01       	movw	r28, r8
    81f8:	b0 e4       	ldi	r27, 0x40	; 64
    81fa:	9f 93       	push	r25
    81fc:	aa 27       	eor	r26, r26
    81fe:	9a 15       	cp	r25, r10
    8200:	8b 04       	cpc	r8, r11
    8202:	9c 04       	cpc	r9, r12
    8204:	ed 05       	cpc	r30, r13
    8206:	fe 05       	cpc	r31, r14
    8208:	cf 05       	cpc	r28, r15
    820a:	d0 07       	cpc	r29, r16
    820c:	a1 07       	cpc	r26, r17
    820e:	98 f4       	brcc	.+38     	; 0x8236 <__udivmod64+0x46>
    8210:	ad 2f       	mov	r26, r29
    8212:	dc 2f       	mov	r29, r28
    8214:	cf 2f       	mov	r28, r31
    8216:	fe 2f       	mov	r31, r30
    8218:	e9 2d       	mov	r30, r9
    821a:	98 2c       	mov	r9, r8
    821c:	89 2e       	mov	r8, r25
    821e:	98 2f       	mov	r25, r24
    8220:	87 2f       	mov	r24, r23
    8222:	76 2f       	mov	r23, r22
    8224:	65 2f       	mov	r22, r21
    8226:	54 2f       	mov	r21, r20
    8228:	43 2f       	mov	r20, r19
    822a:	32 2f       	mov	r19, r18
    822c:	22 27       	eor	r18, r18
    822e:	b8 50       	subi	r27, 0x08	; 8
    8230:	31 f7       	brne	.-52     	; 0x81fe <__udivmod64+0xe>
    8232:	bf 91       	pop	r27
    8234:	27 c0       	rjmp	.+78     	; 0x8284 <__udivmod64+0x94>
    8236:	1b 2e       	mov	r1, r27
    8238:	bf 91       	pop	r27
    823a:	bb 27       	eor	r27, r27
    823c:	22 0f       	add	r18, r18
    823e:	33 1f       	adc	r19, r19
    8240:	44 1f       	adc	r20, r20
    8242:	55 1f       	adc	r21, r21
    8244:	66 1f       	adc	r22, r22
    8246:	77 1f       	adc	r23, r23
    8248:	88 1f       	adc	r24, r24
    824a:	99 1f       	adc	r25, r25
    824c:	88 1c       	adc	r8, r8
    824e:	99 1c       	adc	r9, r9
    8250:	ee 1f       	adc	r30, r30
    8252:	ff 1f       	adc	r31, r31
    8254:	cc 1f       	adc	r28, r28
    8256:	dd 1f       	adc	r29, r29
    8258:	aa 1f       	adc	r26, r26
    825a:	bb 1f       	adc	r27, r27
    825c:	8a 14       	cp	r8, r10
    825e:	9b 04       	cpc	r9, r11
    8260:	ec 05       	cpc	r30, r12
    8262:	fd 05       	cpc	r31, r13
    8264:	ce 05       	cpc	r28, r14
    8266:	df 05       	cpc	r29, r15
    8268:	a0 07       	cpc	r26, r16
    826a:	b1 07       	cpc	r27, r17
    826c:	48 f0       	brcs	.+18     	; 0x8280 <__udivmod64+0x90>
    826e:	8a 18       	sub	r8, r10
    8270:	9b 08       	sbc	r9, r11
    8272:	ec 09       	sbc	r30, r12
    8274:	fd 09       	sbc	r31, r13
    8276:	ce 09       	sbc	r28, r14
    8278:	df 09       	sbc	r29, r15
    827a:	a0 0b       	sbc	r26, r16
    827c:	b1 0b       	sbc	r27, r17
    827e:	21 60       	ori	r18, 0x01	; 1
    8280:	1a 94       	dec	r1
    8282:	e1 f6       	brne	.-72     	; 0x823c <__udivmod64+0x4c>
    8284:	2e f4       	brtc	.+10     	; 0x8290 <__udivmod64+0xa0>
    8286:	94 01       	movw	r18, r8
    8288:	af 01       	movw	r20, r30
    828a:	be 01       	movw	r22, r28
    828c:	cd 01       	movw	r24, r26
    828e:	00 0c       	add	r0, r0
    8290:	08 95       	ret

00008292 <__negdi2>:
    8292:	60 95       	com	r22
    8294:	70 95       	com	r23
    8296:	80 95       	com	r24
    8298:	90 95       	com	r25
    829a:	30 95       	com	r19
    829c:	40 95       	com	r20
    829e:	50 95       	com	r21
    82a0:	21 95       	neg	r18
    82a2:	3f 4f       	sbci	r19, 0xFF	; 255
    82a4:	4f 4f       	sbci	r20, 0xFF	; 255
    82a6:	5f 4f       	sbci	r21, 0xFF	; 255
    82a8:	6f 4f       	sbci	r22, 0xFF	; 255
    82aa:	7f 4f       	sbci	r23, 0xFF	; 255
    82ac:	8f 4f       	sbci	r24, 0xFF	; 255
    82ae:	9f 4f       	sbci	r25, 0xFF	; 255
    82b0:	08 95       	ret

000082b2 <__prologue_saves__>:
    82b2:	2f 92       	push	r2
    82b4:	3f 92       	push	r3
    82b6:	4f 92       	push	r4
    82b8:	5f 92       	push	r5
    82ba:	6f 92       	push	r6
    82bc:	7f 92       	push	r7
    82be:	8f 92       	push	r8
    82c0:	9f 92       	push	r9
    82c2:	af 92       	push	r10
    82c4:	bf 92       	push	r11
    82c6:	cf 92       	push	r12
    82c8:	df 92       	push	r13
    82ca:	ef 92       	push	r14
    82cc:	ff 92       	push	r15
    82ce:	0f 93       	push	r16
    82d0:	1f 93       	push	r17
    82d2:	cf 93       	push	r28
    82d4:	df 93       	push	r29
    82d6:	cd b7       	in	r28, 0x3d	; 61
    82d8:	de b7       	in	r29, 0x3e	; 62
    82da:	ca 1b       	sub	r28, r26
    82dc:	db 0b       	sbc	r29, r27
    82de:	0f b6       	in	r0, 0x3f	; 63
    82e0:	f8 94       	cli
    82e2:	de bf       	out	0x3e, r29	; 62
    82e4:	0f be       	out	0x3f, r0	; 63
    82e6:	cd bf       	out	0x3d, r28	; 61
    82e8:	09 94       	ijmp

000082ea <__epilogue_restores__>:
    82ea:	2a 88       	ldd	r2, Y+18	; 0x12
    82ec:	39 88       	ldd	r3, Y+17	; 0x11
    82ee:	48 88       	ldd	r4, Y+16	; 0x10
    82f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    82f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    82f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    82f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    82f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    82fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    82fc:	b9 84       	ldd	r11, Y+9	; 0x09
    82fe:	c8 84       	ldd	r12, Y+8	; 0x08
    8300:	df 80       	ldd	r13, Y+7	; 0x07
    8302:	ee 80       	ldd	r14, Y+6	; 0x06
    8304:	fd 80       	ldd	r15, Y+5	; 0x05
    8306:	0c 81       	ldd	r16, Y+4	; 0x04
    8308:	1b 81       	ldd	r17, Y+3	; 0x03
    830a:	aa 81       	ldd	r26, Y+2	; 0x02
    830c:	b9 81       	ldd	r27, Y+1	; 0x01
    830e:	ce 0f       	add	r28, r30
    8310:	d1 1d       	adc	r29, r1
    8312:	0f b6       	in	r0, 0x3f	; 63
    8314:	f8 94       	cli
    8316:	de bf       	out	0x3e, r29	; 62
    8318:	0f be       	out	0x3f, r0	; 63
    831a:	cd bf       	out	0x3d, r28	; 61
    831c:	ed 01       	movw	r28, r26
    831e:	08 95       	ret

00008320 <__ashldi3>:
    8320:	0f 93       	push	r16
    8322:	08 30       	cpi	r16, 0x08	; 8
    8324:	90 f0       	brcs	.+36     	; 0x834a <__ashldi3+0x2a>
    8326:	98 2f       	mov	r25, r24
    8328:	87 2f       	mov	r24, r23
    832a:	76 2f       	mov	r23, r22
    832c:	65 2f       	mov	r22, r21
    832e:	54 2f       	mov	r21, r20
    8330:	43 2f       	mov	r20, r19
    8332:	32 2f       	mov	r19, r18
    8334:	22 27       	eor	r18, r18
    8336:	08 50       	subi	r16, 0x08	; 8
    8338:	f4 cf       	rjmp	.-24     	; 0x8322 <__ashldi3+0x2>
    833a:	22 0f       	add	r18, r18
    833c:	33 1f       	adc	r19, r19
    833e:	44 1f       	adc	r20, r20
    8340:	55 1f       	adc	r21, r21
    8342:	66 1f       	adc	r22, r22
    8344:	77 1f       	adc	r23, r23
    8346:	88 1f       	adc	r24, r24
    8348:	99 1f       	adc	r25, r25
    834a:	0a 95       	dec	r16
    834c:	b2 f7       	brpl	.-20     	; 0x833a <__ashldi3+0x1a>
    834e:	0f 91       	pop	r16
    8350:	08 95       	ret

00008352 <__ashrdi3>:
    8352:	97 fb       	bst	r25, 7
    8354:	10 f8       	bld	r1, 0

00008356 <__lshrdi3>:
    8356:	16 94       	lsr	r1
    8358:	00 08       	sbc	r0, r0
    835a:	0f 93       	push	r16
    835c:	08 30       	cpi	r16, 0x08	; 8
    835e:	98 f0       	brcs	.+38     	; 0x8386 <__lshrdi3+0x30>
    8360:	08 50       	subi	r16, 0x08	; 8
    8362:	23 2f       	mov	r18, r19
    8364:	34 2f       	mov	r19, r20
    8366:	45 2f       	mov	r20, r21
    8368:	56 2f       	mov	r21, r22
    836a:	67 2f       	mov	r22, r23
    836c:	78 2f       	mov	r23, r24
    836e:	89 2f       	mov	r24, r25
    8370:	90 2d       	mov	r25, r0
    8372:	f4 cf       	rjmp	.-24     	; 0x835c <__lshrdi3+0x6>
    8374:	05 94       	asr	r0
    8376:	97 95       	ror	r25
    8378:	87 95       	ror	r24
    837a:	77 95       	ror	r23
    837c:	67 95       	ror	r22
    837e:	57 95       	ror	r21
    8380:	47 95       	ror	r20
    8382:	37 95       	ror	r19
    8384:	27 95       	ror	r18
    8386:	0a 95       	dec	r16
    8388:	aa f7       	brpl	.-22     	; 0x8374 <__lshrdi3+0x1e>
    838a:	0f 91       	pop	r16
    838c:	08 95       	ret

0000838e <__adddi3>:
    838e:	2a 0d       	add	r18, r10
    8390:	3b 1d       	adc	r19, r11
    8392:	4c 1d       	adc	r20, r12
    8394:	5d 1d       	adc	r21, r13
    8396:	6e 1d       	adc	r22, r14
    8398:	7f 1d       	adc	r23, r15
    839a:	80 1f       	adc	r24, r16
    839c:	91 1f       	adc	r25, r17
    839e:	08 95       	ret

000083a0 <__cmpdi2_s8>:
    83a0:	00 24       	eor	r0, r0
    83a2:	a7 fd       	sbrc	r26, 7
    83a4:	00 94       	com	r0
    83a6:	2a 17       	cp	r18, r26
    83a8:	30 05       	cpc	r19, r0
    83aa:	40 05       	cpc	r20, r0
    83ac:	50 05       	cpc	r21, r0
    83ae:	60 05       	cpc	r22, r0
    83b0:	70 05       	cpc	r23, r0
    83b2:	80 05       	cpc	r24, r0
    83b4:	90 05       	cpc	r25, r0
    83b6:	08 95       	ret

000083b8 <dtostrf>:
    83b8:	ef 92       	push	r14
    83ba:	0f 93       	push	r16
    83bc:	1f 93       	push	r17
    83be:	cf 93       	push	r28
    83c0:	df 93       	push	r29
    83c2:	e8 01       	movw	r28, r16
    83c4:	47 fd       	sbrc	r20, 7
    83c6:	02 c0       	rjmp	.+4      	; 0x83cc <dtostrf+0x14>
    83c8:	34 e0       	ldi	r19, 0x04	; 4
    83ca:	01 c0       	rjmp	.+2      	; 0x83ce <dtostrf+0x16>
    83cc:	34 e1       	ldi	r19, 0x14	; 20
    83ce:	04 2e       	mov	r0, r20
    83d0:	00 0c       	add	r0, r0
    83d2:	55 0b       	sbc	r21, r21
    83d4:	57 ff       	sbrs	r21, 7
    83d6:	03 c0       	rjmp	.+6      	; 0x83de <dtostrf+0x26>
    83d8:	51 95       	neg	r21
    83da:	41 95       	neg	r20
    83dc:	51 09       	sbc	r21, r1
    83de:	e3 2e       	mov	r14, r19
    83e0:	02 2f       	mov	r16, r18
    83e2:	24 2f       	mov	r18, r20
    83e4:	ae 01       	movw	r20, r28
    83e6:	a1 d2       	rcall	.+1346   	; 0x892a <dtoa_prf>
    83e8:	ce 01       	movw	r24, r28
    83ea:	df 91       	pop	r29
    83ec:	cf 91       	pop	r28
    83ee:	1f 91       	pop	r17
    83f0:	0f 91       	pop	r16
    83f2:	ef 90       	pop	r14
    83f4:	08 95       	ret

000083f6 <malloc>:
    83f6:	0f 93       	push	r16
    83f8:	1f 93       	push	r17
    83fa:	cf 93       	push	r28
    83fc:	df 93       	push	r29
    83fe:	82 30       	cpi	r24, 0x02	; 2
    8400:	91 05       	cpc	r25, r1
    8402:	10 f4       	brcc	.+4      	; 0x8408 <malloc+0x12>
    8404:	82 e0       	ldi	r24, 0x02	; 2
    8406:	90 e0       	ldi	r25, 0x00	; 0
    8408:	e0 91 7d 0e 	lds	r30, 0x0E7D	; 0x800e7d <__flp>
    840c:	f0 91 7e 0e 	lds	r31, 0x0E7E	; 0x800e7e <__flp+0x1>
    8410:	20 e0       	ldi	r18, 0x00	; 0
    8412:	30 e0       	ldi	r19, 0x00	; 0
    8414:	a0 e0       	ldi	r26, 0x00	; 0
    8416:	b0 e0       	ldi	r27, 0x00	; 0
    8418:	30 97       	sbiw	r30, 0x00	; 0
    841a:	19 f1       	breq	.+70     	; 0x8462 <malloc+0x6c>
    841c:	40 81       	ld	r20, Z
    841e:	51 81       	ldd	r21, Z+1	; 0x01
    8420:	02 81       	ldd	r16, Z+2	; 0x02
    8422:	13 81       	ldd	r17, Z+3	; 0x03
    8424:	48 17       	cp	r20, r24
    8426:	59 07       	cpc	r21, r25
    8428:	c8 f0       	brcs	.+50     	; 0x845c <malloc+0x66>
    842a:	84 17       	cp	r24, r20
    842c:	95 07       	cpc	r25, r21
    842e:	69 f4       	brne	.+26     	; 0x844a <malloc+0x54>
    8430:	10 97       	sbiw	r26, 0x00	; 0
    8432:	31 f0       	breq	.+12     	; 0x8440 <malloc+0x4a>
    8434:	12 96       	adiw	r26, 0x02	; 2
    8436:	0c 93       	st	X, r16
    8438:	12 97       	sbiw	r26, 0x02	; 2
    843a:	13 96       	adiw	r26, 0x03	; 3
    843c:	1c 93       	st	X, r17
    843e:	27 c0       	rjmp	.+78     	; 0x848e <malloc+0x98>
    8440:	00 93 7d 0e 	sts	0x0E7D, r16	; 0x800e7d <__flp>
    8444:	10 93 7e 0e 	sts	0x0E7E, r17	; 0x800e7e <__flp+0x1>
    8448:	22 c0       	rjmp	.+68     	; 0x848e <malloc+0x98>
    844a:	21 15       	cp	r18, r1
    844c:	31 05       	cpc	r19, r1
    844e:	19 f0       	breq	.+6      	; 0x8456 <malloc+0x60>
    8450:	42 17       	cp	r20, r18
    8452:	53 07       	cpc	r21, r19
    8454:	18 f4       	brcc	.+6      	; 0x845c <malloc+0x66>
    8456:	9a 01       	movw	r18, r20
    8458:	bd 01       	movw	r22, r26
    845a:	ef 01       	movw	r28, r30
    845c:	df 01       	movw	r26, r30
    845e:	f8 01       	movw	r30, r16
    8460:	db cf       	rjmp	.-74     	; 0x8418 <malloc+0x22>
    8462:	21 15       	cp	r18, r1
    8464:	31 05       	cpc	r19, r1
    8466:	f9 f0       	breq	.+62     	; 0x84a6 <malloc+0xb0>
    8468:	28 1b       	sub	r18, r24
    846a:	39 0b       	sbc	r19, r25
    846c:	24 30       	cpi	r18, 0x04	; 4
    846e:	31 05       	cpc	r19, r1
    8470:	80 f4       	brcc	.+32     	; 0x8492 <malloc+0x9c>
    8472:	8a 81       	ldd	r24, Y+2	; 0x02
    8474:	9b 81       	ldd	r25, Y+3	; 0x03
    8476:	61 15       	cp	r22, r1
    8478:	71 05       	cpc	r23, r1
    847a:	21 f0       	breq	.+8      	; 0x8484 <malloc+0x8e>
    847c:	fb 01       	movw	r30, r22
    847e:	93 83       	std	Z+3, r25	; 0x03
    8480:	82 83       	std	Z+2, r24	; 0x02
    8482:	04 c0       	rjmp	.+8      	; 0x848c <malloc+0x96>
    8484:	90 93 7e 0e 	sts	0x0E7E, r25	; 0x800e7e <__flp+0x1>
    8488:	80 93 7d 0e 	sts	0x0E7D, r24	; 0x800e7d <__flp>
    848c:	fe 01       	movw	r30, r28
    848e:	32 96       	adiw	r30, 0x02	; 2
    8490:	44 c0       	rjmp	.+136    	; 0x851a <malloc+0x124>
    8492:	fe 01       	movw	r30, r28
    8494:	e2 0f       	add	r30, r18
    8496:	f3 1f       	adc	r31, r19
    8498:	81 93       	st	Z+, r24
    849a:	91 93       	st	Z+, r25
    849c:	22 50       	subi	r18, 0x02	; 2
    849e:	31 09       	sbc	r19, r1
    84a0:	39 83       	std	Y+1, r19	; 0x01
    84a2:	28 83       	st	Y, r18
    84a4:	3a c0       	rjmp	.+116    	; 0x851a <malloc+0x124>
    84a6:	20 91 7b 0e 	lds	r18, 0x0E7B	; 0x800e7b <__brkval>
    84aa:	30 91 7c 0e 	lds	r19, 0x0E7C	; 0x800e7c <__brkval+0x1>
    84ae:	23 2b       	or	r18, r19
    84b0:	41 f4       	brne	.+16     	; 0x84c2 <malloc+0xcc>
    84b2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    84b6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    84ba:	30 93 7c 0e 	sts	0x0E7C, r19	; 0x800e7c <__brkval+0x1>
    84be:	20 93 7b 0e 	sts	0x0E7B, r18	; 0x800e7b <__brkval>
    84c2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    84c6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    84ca:	21 15       	cp	r18, r1
    84cc:	31 05       	cpc	r19, r1
    84ce:	41 f4       	brne	.+16     	; 0x84e0 <malloc+0xea>
    84d0:	2d b7       	in	r18, 0x3d	; 61
    84d2:	3e b7       	in	r19, 0x3e	; 62
    84d4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    84d8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    84dc:	24 1b       	sub	r18, r20
    84de:	35 0b       	sbc	r19, r21
    84e0:	e0 91 7b 0e 	lds	r30, 0x0E7B	; 0x800e7b <__brkval>
    84e4:	f0 91 7c 0e 	lds	r31, 0x0E7C	; 0x800e7c <__brkval+0x1>
    84e8:	e2 17       	cp	r30, r18
    84ea:	f3 07       	cpc	r31, r19
    84ec:	a0 f4       	brcc	.+40     	; 0x8516 <malloc+0x120>
    84ee:	2e 1b       	sub	r18, r30
    84f0:	3f 0b       	sbc	r19, r31
    84f2:	28 17       	cp	r18, r24
    84f4:	39 07       	cpc	r19, r25
    84f6:	78 f0       	brcs	.+30     	; 0x8516 <malloc+0x120>
    84f8:	ac 01       	movw	r20, r24
    84fa:	4e 5f       	subi	r20, 0xFE	; 254
    84fc:	5f 4f       	sbci	r21, 0xFF	; 255
    84fe:	24 17       	cp	r18, r20
    8500:	35 07       	cpc	r19, r21
    8502:	48 f0       	brcs	.+18     	; 0x8516 <malloc+0x120>
    8504:	4e 0f       	add	r20, r30
    8506:	5f 1f       	adc	r21, r31
    8508:	50 93 7c 0e 	sts	0x0E7C, r21	; 0x800e7c <__brkval+0x1>
    850c:	40 93 7b 0e 	sts	0x0E7B, r20	; 0x800e7b <__brkval>
    8510:	81 93       	st	Z+, r24
    8512:	91 93       	st	Z+, r25
    8514:	02 c0       	rjmp	.+4      	; 0x851a <malloc+0x124>
    8516:	e0 e0       	ldi	r30, 0x00	; 0
    8518:	f0 e0       	ldi	r31, 0x00	; 0
    851a:	cf 01       	movw	r24, r30
    851c:	df 91       	pop	r29
    851e:	cf 91       	pop	r28
    8520:	1f 91       	pop	r17
    8522:	0f 91       	pop	r16
    8524:	08 95       	ret

00008526 <free>:
    8526:	cf 93       	push	r28
    8528:	df 93       	push	r29
    852a:	00 97       	sbiw	r24, 0x00	; 0
    852c:	09 f4       	brne	.+2      	; 0x8530 <free+0xa>
    852e:	81 c0       	rjmp	.+258    	; 0x8632 <free+0x10c>
    8530:	fc 01       	movw	r30, r24
    8532:	32 97       	sbiw	r30, 0x02	; 2
    8534:	13 82       	std	Z+3, r1	; 0x03
    8536:	12 82       	std	Z+2, r1	; 0x02
    8538:	a0 91 7d 0e 	lds	r26, 0x0E7D	; 0x800e7d <__flp>
    853c:	b0 91 7e 0e 	lds	r27, 0x0E7E	; 0x800e7e <__flp+0x1>
    8540:	10 97       	sbiw	r26, 0x00	; 0
    8542:	81 f4       	brne	.+32     	; 0x8564 <free+0x3e>
    8544:	20 81       	ld	r18, Z
    8546:	31 81       	ldd	r19, Z+1	; 0x01
    8548:	82 0f       	add	r24, r18
    854a:	93 1f       	adc	r25, r19
    854c:	20 91 7b 0e 	lds	r18, 0x0E7B	; 0x800e7b <__brkval>
    8550:	30 91 7c 0e 	lds	r19, 0x0E7C	; 0x800e7c <__brkval+0x1>
    8554:	28 17       	cp	r18, r24
    8556:	39 07       	cpc	r19, r25
    8558:	51 f5       	brne	.+84     	; 0x85ae <free+0x88>
    855a:	f0 93 7c 0e 	sts	0x0E7C, r31	; 0x800e7c <__brkval+0x1>
    855e:	e0 93 7b 0e 	sts	0x0E7B, r30	; 0x800e7b <__brkval>
    8562:	67 c0       	rjmp	.+206    	; 0x8632 <free+0x10c>
    8564:	ed 01       	movw	r28, r26
    8566:	20 e0       	ldi	r18, 0x00	; 0
    8568:	30 e0       	ldi	r19, 0x00	; 0
    856a:	ce 17       	cp	r28, r30
    856c:	df 07       	cpc	r29, r31
    856e:	40 f4       	brcc	.+16     	; 0x8580 <free+0x5a>
    8570:	4a 81       	ldd	r20, Y+2	; 0x02
    8572:	5b 81       	ldd	r21, Y+3	; 0x03
    8574:	9e 01       	movw	r18, r28
    8576:	41 15       	cp	r20, r1
    8578:	51 05       	cpc	r21, r1
    857a:	f1 f0       	breq	.+60     	; 0x85b8 <free+0x92>
    857c:	ea 01       	movw	r28, r20
    857e:	f5 cf       	rjmp	.-22     	; 0x856a <free+0x44>
    8580:	d3 83       	std	Z+3, r29	; 0x03
    8582:	c2 83       	std	Z+2, r28	; 0x02
    8584:	40 81       	ld	r20, Z
    8586:	51 81       	ldd	r21, Z+1	; 0x01
    8588:	84 0f       	add	r24, r20
    858a:	95 1f       	adc	r25, r21
    858c:	c8 17       	cp	r28, r24
    858e:	d9 07       	cpc	r29, r25
    8590:	59 f4       	brne	.+22     	; 0x85a8 <free+0x82>
    8592:	88 81       	ld	r24, Y
    8594:	99 81       	ldd	r25, Y+1	; 0x01
    8596:	84 0f       	add	r24, r20
    8598:	95 1f       	adc	r25, r21
    859a:	02 96       	adiw	r24, 0x02	; 2
    859c:	91 83       	std	Z+1, r25	; 0x01
    859e:	80 83       	st	Z, r24
    85a0:	8a 81       	ldd	r24, Y+2	; 0x02
    85a2:	9b 81       	ldd	r25, Y+3	; 0x03
    85a4:	93 83       	std	Z+3, r25	; 0x03
    85a6:	82 83       	std	Z+2, r24	; 0x02
    85a8:	21 15       	cp	r18, r1
    85aa:	31 05       	cpc	r19, r1
    85ac:	29 f4       	brne	.+10     	; 0x85b8 <free+0x92>
    85ae:	f0 93 7e 0e 	sts	0x0E7E, r31	; 0x800e7e <__flp+0x1>
    85b2:	e0 93 7d 0e 	sts	0x0E7D, r30	; 0x800e7d <__flp>
    85b6:	3d c0       	rjmp	.+122    	; 0x8632 <free+0x10c>
    85b8:	e9 01       	movw	r28, r18
    85ba:	fb 83       	std	Y+3, r31	; 0x03
    85bc:	ea 83       	std	Y+2, r30	; 0x02
    85be:	49 91       	ld	r20, Y+
    85c0:	59 91       	ld	r21, Y+
    85c2:	c4 0f       	add	r28, r20
    85c4:	d5 1f       	adc	r29, r21
    85c6:	ec 17       	cp	r30, r28
    85c8:	fd 07       	cpc	r31, r29
    85ca:	61 f4       	brne	.+24     	; 0x85e4 <free+0xbe>
    85cc:	80 81       	ld	r24, Z
    85ce:	91 81       	ldd	r25, Z+1	; 0x01
    85d0:	84 0f       	add	r24, r20
    85d2:	95 1f       	adc	r25, r21
    85d4:	02 96       	adiw	r24, 0x02	; 2
    85d6:	e9 01       	movw	r28, r18
    85d8:	99 83       	std	Y+1, r25	; 0x01
    85da:	88 83       	st	Y, r24
    85dc:	82 81       	ldd	r24, Z+2	; 0x02
    85de:	93 81       	ldd	r25, Z+3	; 0x03
    85e0:	9b 83       	std	Y+3, r25	; 0x03
    85e2:	8a 83       	std	Y+2, r24	; 0x02
    85e4:	e0 e0       	ldi	r30, 0x00	; 0
    85e6:	f0 e0       	ldi	r31, 0x00	; 0
    85e8:	12 96       	adiw	r26, 0x02	; 2
    85ea:	8d 91       	ld	r24, X+
    85ec:	9c 91       	ld	r25, X
    85ee:	13 97       	sbiw	r26, 0x03	; 3
    85f0:	00 97       	sbiw	r24, 0x00	; 0
    85f2:	19 f0       	breq	.+6      	; 0x85fa <free+0xd4>
    85f4:	fd 01       	movw	r30, r26
    85f6:	dc 01       	movw	r26, r24
    85f8:	f7 cf       	rjmp	.-18     	; 0x85e8 <free+0xc2>
    85fa:	8d 91       	ld	r24, X+
    85fc:	9c 91       	ld	r25, X
    85fe:	11 97       	sbiw	r26, 0x01	; 1
    8600:	9d 01       	movw	r18, r26
    8602:	2e 5f       	subi	r18, 0xFE	; 254
    8604:	3f 4f       	sbci	r19, 0xFF	; 255
    8606:	82 0f       	add	r24, r18
    8608:	93 1f       	adc	r25, r19
    860a:	20 91 7b 0e 	lds	r18, 0x0E7B	; 0x800e7b <__brkval>
    860e:	30 91 7c 0e 	lds	r19, 0x0E7C	; 0x800e7c <__brkval+0x1>
    8612:	28 17       	cp	r18, r24
    8614:	39 07       	cpc	r19, r25
    8616:	69 f4       	brne	.+26     	; 0x8632 <free+0x10c>
    8618:	30 97       	sbiw	r30, 0x00	; 0
    861a:	29 f4       	brne	.+10     	; 0x8626 <free+0x100>
    861c:	10 92 7e 0e 	sts	0x0E7E, r1	; 0x800e7e <__flp+0x1>
    8620:	10 92 7d 0e 	sts	0x0E7D, r1	; 0x800e7d <__flp>
    8624:	02 c0       	rjmp	.+4      	; 0x862a <free+0x104>
    8626:	13 82       	std	Z+3, r1	; 0x03
    8628:	12 82       	std	Z+2, r1	; 0x02
    862a:	b0 93 7c 0e 	sts	0x0E7C, r27	; 0x800e7c <__brkval+0x1>
    862e:	a0 93 7b 0e 	sts	0x0E7B, r26	; 0x800e7b <__brkval>
    8632:	df 91       	pop	r29
    8634:	cf 91       	pop	r28
    8636:	08 95       	ret

00008638 <realloc>:
    8638:	6f 92       	push	r6
    863a:	7f 92       	push	r7
    863c:	8f 92       	push	r8
    863e:	9f 92       	push	r9
    8640:	af 92       	push	r10
    8642:	bf 92       	push	r11
    8644:	cf 92       	push	r12
    8646:	df 92       	push	r13
    8648:	ef 92       	push	r14
    864a:	ff 92       	push	r15
    864c:	0f 93       	push	r16
    864e:	1f 93       	push	r17
    8650:	cf 93       	push	r28
    8652:	df 93       	push	r29
    8654:	00 97       	sbiw	r24, 0x00	; 0
    8656:	81 f4       	brne	.+32     	; 0x8678 <realloc+0x40>
    8658:	cb 01       	movw	r24, r22
    865a:	df 91       	pop	r29
    865c:	cf 91       	pop	r28
    865e:	1f 91       	pop	r17
    8660:	0f 91       	pop	r16
    8662:	ff 90       	pop	r15
    8664:	ef 90       	pop	r14
    8666:	df 90       	pop	r13
    8668:	cf 90       	pop	r12
    866a:	bf 90       	pop	r11
    866c:	af 90       	pop	r10
    866e:	9f 90       	pop	r9
    8670:	8f 90       	pop	r8
    8672:	7f 90       	pop	r7
    8674:	6f 90       	pop	r6
    8676:	bf ce       	rjmp	.-642    	; 0x83f6 <malloc>
    8678:	fc 01       	movw	r30, r24
    867a:	e6 0f       	add	r30, r22
    867c:	f7 1f       	adc	r31, r23
    867e:	9c 01       	movw	r18, r24
    8680:	22 50       	subi	r18, 0x02	; 2
    8682:	31 09       	sbc	r19, r1
    8684:	e2 17       	cp	r30, r18
    8686:	f3 07       	cpc	r31, r19
    8688:	08 f4       	brcc	.+2      	; 0x868c <realloc+0x54>
    868a:	a5 c0       	rjmp	.+330    	; 0x87d6 <realloc+0x19e>
    868c:	ec 01       	movw	r28, r24
    868e:	d9 01       	movw	r26, r18
    8690:	0d 91       	ld	r16, X+
    8692:	1c 91       	ld	r17, X
    8694:	11 97       	sbiw	r26, 0x01	; 1
    8696:	06 17       	cp	r16, r22
    8698:	17 07       	cpc	r17, r23
    869a:	a8 f0       	brcs	.+42     	; 0x86c6 <realloc+0x8e>
    869c:	05 30       	cpi	r16, 0x05	; 5
    869e:	11 05       	cpc	r17, r1
    86a0:	08 f4       	brcc	.+2      	; 0x86a4 <realloc+0x6c>
    86a2:	97 c0       	rjmp	.+302    	; 0x87d2 <realloc+0x19a>
    86a4:	c8 01       	movw	r24, r16
    86a6:	04 97       	sbiw	r24, 0x04	; 4
    86a8:	86 17       	cp	r24, r22
    86aa:	97 07       	cpc	r25, r23
    86ac:	08 f4       	brcc	.+2      	; 0x86b0 <realloc+0x78>
    86ae:	91 c0       	rjmp	.+290    	; 0x87d2 <realloc+0x19a>
    86b0:	02 50       	subi	r16, 0x02	; 2
    86b2:	11 09       	sbc	r17, r1
    86b4:	06 1b       	sub	r16, r22
    86b6:	17 0b       	sbc	r17, r23
    86b8:	01 93       	st	Z+, r16
    86ba:	11 93       	st	Z+, r17
    86bc:	6d 93       	st	X+, r22
    86be:	7c 93       	st	X, r23
    86c0:	cf 01       	movw	r24, r30
    86c2:	31 df       	rcall	.-414    	; 0x8526 <free>
    86c4:	86 c0       	rjmp	.+268    	; 0x87d2 <realloc+0x19a>
    86c6:	5b 01       	movw	r10, r22
    86c8:	a0 1a       	sub	r10, r16
    86ca:	b1 0a       	sbc	r11, r17
    86cc:	4c 01       	movw	r8, r24
    86ce:	80 0e       	add	r8, r16
    86d0:	91 1e       	adc	r9, r17
    86d2:	a0 91 7d 0e 	lds	r26, 0x0E7D	; 0x800e7d <__flp>
    86d6:	b0 91 7e 0e 	lds	r27, 0x0E7E	; 0x800e7e <__flp+0x1>
    86da:	61 2c       	mov	r6, r1
    86dc:	71 2c       	mov	r7, r1
    86de:	e1 2c       	mov	r14, r1
    86e0:	f1 2c       	mov	r15, r1
    86e2:	10 97       	sbiw	r26, 0x00	; 0
    86e4:	09 f4       	brne	.+2      	; 0x86e8 <realloc+0xb0>
    86e6:	46 c0       	rjmp	.+140    	; 0x8774 <realloc+0x13c>
    86e8:	8d 91       	ld	r24, X+
    86ea:	9c 91       	ld	r25, X
    86ec:	11 97       	sbiw	r26, 0x01	; 1
    86ee:	a8 15       	cp	r26, r8
    86f0:	b9 05       	cpc	r27, r9
    86f2:	b1 f5       	brne	.+108    	; 0x8760 <realloc+0x128>
    86f4:	6c 01       	movw	r12, r24
    86f6:	42 e0       	ldi	r20, 0x02	; 2
    86f8:	c4 0e       	add	r12, r20
    86fa:	d1 1c       	adc	r13, r1
    86fc:	ca 14       	cp	r12, r10
    86fe:	db 04       	cpc	r13, r11
    8700:	78 f1       	brcs	.+94     	; 0x8760 <realloc+0x128>
    8702:	4c 01       	movw	r8, r24
    8704:	8a 18       	sub	r8, r10
    8706:	9b 08       	sbc	r9, r11
    8708:	64 01       	movw	r12, r8
    870a:	42 e0       	ldi	r20, 0x02	; 2
    870c:	c4 0e       	add	r12, r20
    870e:	d1 1c       	adc	r13, r1
    8710:	12 96       	adiw	r26, 0x02	; 2
    8712:	bc 90       	ld	r11, X
    8714:	12 97       	sbiw	r26, 0x02	; 2
    8716:	13 96       	adiw	r26, 0x03	; 3
    8718:	ac 91       	ld	r26, X
    871a:	b5 e0       	ldi	r27, 0x05	; 5
    871c:	cb 16       	cp	r12, r27
    871e:	d1 04       	cpc	r13, r1
    8720:	40 f0       	brcs	.+16     	; 0x8732 <realloc+0xfa>
    8722:	b2 82       	std	Z+2, r11	; 0x02
    8724:	a3 83       	std	Z+3, r26	; 0x03
    8726:	91 82       	std	Z+1, r9	; 0x01
    8728:	80 82       	st	Z, r8
    872a:	d9 01       	movw	r26, r18
    872c:	6d 93       	st	X+, r22
    872e:	7c 93       	st	X, r23
    8730:	09 c0       	rjmp	.+18     	; 0x8744 <realloc+0x10c>
    8732:	0e 5f       	subi	r16, 0xFE	; 254
    8734:	1f 4f       	sbci	r17, 0xFF	; 255
    8736:	80 0f       	add	r24, r16
    8738:	91 1f       	adc	r25, r17
    873a:	f9 01       	movw	r30, r18
    873c:	91 83       	std	Z+1, r25	; 0x01
    873e:	80 83       	st	Z, r24
    8740:	eb 2d       	mov	r30, r11
    8742:	fa 2f       	mov	r31, r26
    8744:	e1 14       	cp	r14, r1
    8746:	f1 04       	cpc	r15, r1
    8748:	31 f0       	breq	.+12     	; 0x8756 <realloc+0x11e>
    874a:	d7 01       	movw	r26, r14
    874c:	13 96       	adiw	r26, 0x03	; 3
    874e:	fc 93       	st	X, r31
    8750:	ee 93       	st	-X, r30
    8752:	12 97       	sbiw	r26, 0x02	; 2
    8754:	3e c0       	rjmp	.+124    	; 0x87d2 <realloc+0x19a>
    8756:	f0 93 7e 0e 	sts	0x0E7E, r31	; 0x800e7e <__flp+0x1>
    875a:	e0 93 7d 0e 	sts	0x0E7D, r30	; 0x800e7d <__flp>
    875e:	39 c0       	rjmp	.+114    	; 0x87d2 <realloc+0x19a>
    8760:	68 16       	cp	r6, r24
    8762:	79 06       	cpc	r7, r25
    8764:	08 f4       	brcc	.+2      	; 0x8768 <realloc+0x130>
    8766:	3c 01       	movw	r6, r24
    8768:	7d 01       	movw	r14, r26
    876a:	12 96       	adiw	r26, 0x02	; 2
    876c:	0d 90       	ld	r0, X+
    876e:	bc 91       	ld	r27, X
    8770:	a0 2d       	mov	r26, r0
    8772:	b7 cf       	rjmp	.-146    	; 0x86e2 <realloc+0xaa>
    8774:	80 91 7b 0e 	lds	r24, 0x0E7B	; 0x800e7b <__brkval>
    8778:	90 91 7c 0e 	lds	r25, 0x0E7C	; 0x800e7c <__brkval+0x1>
    877c:	88 16       	cp	r8, r24
    877e:	99 06       	cpc	r9, r25
    8780:	e1 f4       	brne	.+56     	; 0x87ba <realloc+0x182>
    8782:	66 16       	cp	r6, r22
    8784:	77 06       	cpc	r7, r23
    8786:	c8 f4       	brcc	.+50     	; 0x87ba <realloc+0x182>
    8788:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    878c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    8790:	00 97       	sbiw	r24, 0x00	; 0
    8792:	41 f4       	brne	.+16     	; 0x87a4 <realloc+0x16c>
    8794:	8d b7       	in	r24, 0x3d	; 61
    8796:	9e b7       	in	r25, 0x3e	; 62
    8798:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    879c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    87a0:	84 1b       	sub	r24, r20
    87a2:	95 0b       	sbc	r25, r21
    87a4:	e8 17       	cp	r30, r24
    87a6:	f9 07       	cpc	r31, r25
    87a8:	b0 f4       	brcc	.+44     	; 0x87d6 <realloc+0x19e>
    87aa:	f0 93 7c 0e 	sts	0x0E7C, r31	; 0x800e7c <__brkval+0x1>
    87ae:	e0 93 7b 0e 	sts	0x0E7B, r30	; 0x800e7b <__brkval>
    87b2:	f9 01       	movw	r30, r18
    87b4:	71 83       	std	Z+1, r23	; 0x01
    87b6:	60 83       	st	Z, r22
    87b8:	0c c0       	rjmp	.+24     	; 0x87d2 <realloc+0x19a>
    87ba:	cb 01       	movw	r24, r22
    87bc:	1c de       	rcall	.-968    	; 0x83f6 <malloc>
    87be:	7c 01       	movw	r14, r24
    87c0:	00 97       	sbiw	r24, 0x00	; 0
    87c2:	49 f0       	breq	.+18     	; 0x87d6 <realloc+0x19e>
    87c4:	a8 01       	movw	r20, r16
    87c6:	be 01       	movw	r22, r28
    87c8:	2c d0       	rcall	.+88     	; 0x8822 <memcpy>
    87ca:	ce 01       	movw	r24, r28
    87cc:	ac de       	rcall	.-680    	; 0x8526 <free>
    87ce:	c7 01       	movw	r24, r14
    87d0:	04 c0       	rjmp	.+8      	; 0x87da <realloc+0x1a2>
    87d2:	ce 01       	movw	r24, r28
    87d4:	02 c0       	rjmp	.+4      	; 0x87da <realloc+0x1a2>
    87d6:	80 e0       	ldi	r24, 0x00	; 0
    87d8:	90 e0       	ldi	r25, 0x00	; 0
    87da:	df 91       	pop	r29
    87dc:	cf 91       	pop	r28
    87de:	1f 91       	pop	r17
    87e0:	0f 91       	pop	r16
    87e2:	ff 90       	pop	r15
    87e4:	ef 90       	pop	r14
    87e6:	df 90       	pop	r13
    87e8:	cf 90       	pop	r12
    87ea:	bf 90       	pop	r11
    87ec:	af 90       	pop	r10
    87ee:	9f 90       	pop	r9
    87f0:	8f 90       	pop	r8
    87f2:	7f 90       	pop	r7
    87f4:	6f 90       	pop	r6
    87f6:	08 95       	ret

000087f8 <abort>:
    87f8:	81 e0       	ldi	r24, 0x01	; 1
    87fa:	90 e0       	ldi	r25, 0x00	; 0
    87fc:	f8 94       	cli
    87fe:	f6 c2       	rjmp	.+1516   	; 0x8dec <__do_global_dtors>

00008800 <isspace>:
    8800:	91 11       	cpse	r25, r1
    8802:	e1 c2       	rjmp	.+1474   	; 0x8dc6 <__ctype_isfalse>
    8804:	80 32       	cpi	r24, 0x20	; 32
    8806:	19 f0       	breq	.+6      	; 0x880e <isspace+0xe>
    8808:	89 50       	subi	r24, 0x09	; 9
    880a:	85 50       	subi	r24, 0x05	; 5
    880c:	d0 f7       	brcc	.-12     	; 0x8802 <isspace+0x2>
    880e:	08 95       	ret

00008810 <memcpy_P>:
    8810:	fb 01       	movw	r30, r22
    8812:	dc 01       	movw	r26, r24
    8814:	02 c0       	rjmp	.+4      	; 0x881a <memcpy_P+0xa>
    8816:	05 90       	lpm	r0, Z+
    8818:	0d 92       	st	X+, r0
    881a:	41 50       	subi	r20, 0x01	; 1
    881c:	50 40       	sbci	r21, 0x00	; 0
    881e:	d8 f7       	brcc	.-10     	; 0x8816 <memcpy_P+0x6>
    8820:	08 95       	ret

00008822 <memcpy>:
    8822:	fb 01       	movw	r30, r22
    8824:	dc 01       	movw	r26, r24
    8826:	02 c0       	rjmp	.+4      	; 0x882c <memcpy+0xa>
    8828:	01 90       	ld	r0, Z+
    882a:	0d 92       	st	X+, r0
    882c:	41 50       	subi	r20, 0x01	; 1
    882e:	50 40       	sbci	r21, 0x00	; 0
    8830:	d8 f7       	brcc	.-10     	; 0x8828 <memcpy+0x6>
    8832:	08 95       	ret

00008834 <strcmp>:
    8834:	fb 01       	movw	r30, r22
    8836:	dc 01       	movw	r26, r24
    8838:	8d 91       	ld	r24, X+
    883a:	01 90       	ld	r0, Z+
    883c:	80 19       	sub	r24, r0
    883e:	01 10       	cpse	r0, r1
    8840:	d9 f3       	breq	.-10     	; 0x8838 <strcmp+0x4>
    8842:	99 0b       	sbc	r25, r25
    8844:	08 95       	ret

00008846 <strcpy>:
    8846:	fb 01       	movw	r30, r22
    8848:	dc 01       	movw	r26, r24
    884a:	01 90       	ld	r0, Z+
    884c:	0d 92       	st	X+, r0
    884e:	00 20       	and	r0, r0
    8850:	e1 f7       	brne	.-8      	; 0x884a <strcpy+0x4>
    8852:	08 95       	ret

00008854 <strncmp>:
    8854:	fb 01       	movw	r30, r22
    8856:	dc 01       	movw	r26, r24
    8858:	41 50       	subi	r20, 0x01	; 1
    885a:	50 40       	sbci	r21, 0x00	; 0
    885c:	30 f0       	brcs	.+12     	; 0x886a <strncmp+0x16>
    885e:	8d 91       	ld	r24, X+
    8860:	01 90       	ld	r0, Z+
    8862:	80 19       	sub	r24, r0
    8864:	19 f4       	brne	.+6      	; 0x886c <strncmp+0x18>
    8866:	00 20       	and	r0, r0
    8868:	b9 f7       	brne	.-18     	; 0x8858 <strncmp+0x4>
    886a:	88 1b       	sub	r24, r24
    886c:	99 0b       	sbc	r25, r25
    886e:	08 95       	ret

00008870 <strncpy>:
    8870:	fb 01       	movw	r30, r22
    8872:	dc 01       	movw	r26, r24
    8874:	41 50       	subi	r20, 0x01	; 1
    8876:	50 40       	sbci	r21, 0x00	; 0
    8878:	48 f0       	brcs	.+18     	; 0x888c <strncpy+0x1c>
    887a:	01 90       	ld	r0, Z+
    887c:	0d 92       	st	X+, r0
    887e:	00 20       	and	r0, r0
    8880:	c9 f7       	brne	.-14     	; 0x8874 <strncpy+0x4>
    8882:	01 c0       	rjmp	.+2      	; 0x8886 <strncpy+0x16>
    8884:	1d 92       	st	X+, r1
    8886:	41 50       	subi	r20, 0x01	; 1
    8888:	50 40       	sbci	r21, 0x00	; 0
    888a:	e0 f7       	brcc	.-8      	; 0x8884 <strncpy+0x14>
    888c:	08 95       	ret

0000888e <ultoa>:
    888e:	25 32       	cpi	r18, 0x25	; 37
    8890:	31 05       	cpc	r19, r1
    8892:	18 f4       	brcc	.+6      	; 0x889a <ultoa+0xc>
    8894:	22 30       	cpi	r18, 0x02	; 2
    8896:	08 f0       	brcs	.+2      	; 0x889a <ultoa+0xc>
    8898:	04 c0       	rjmp	.+8      	; 0x88a2 <__ultoa_ncheck>
    889a:	fa 01       	movw	r30, r20
    889c:	10 82       	st	Z, r1
    889e:	ca 01       	movw	r24, r20
    88a0:	08 95       	ret

000088a2 <__ultoa_ncheck>:
    88a2:	bb 27       	eor	r27, r27

000088a4 <__ultoa_common>:
    88a4:	fa 01       	movw	r30, r20
    88a6:	a6 2f       	mov	r26, r22
    88a8:	62 17       	cp	r22, r18
    88aa:	71 05       	cpc	r23, r1
    88ac:	81 05       	cpc	r24, r1
    88ae:	91 05       	cpc	r25, r1
    88b0:	33 0b       	sbc	r19, r19
    88b2:	30 fb       	bst	r19, 0
    88b4:	66 f0       	brts	.+24     	; 0x88ce <__ultoa_common+0x2a>
    88b6:	aa 27       	eor	r26, r26
    88b8:	66 0f       	add	r22, r22
    88ba:	77 1f       	adc	r23, r23
    88bc:	88 1f       	adc	r24, r24
    88be:	99 1f       	adc	r25, r25
    88c0:	aa 1f       	adc	r26, r26
    88c2:	a2 17       	cp	r26, r18
    88c4:	10 f0       	brcs	.+4      	; 0x88ca <__ultoa_common+0x26>
    88c6:	a2 1b       	sub	r26, r18
    88c8:	63 95       	inc	r22
    88ca:	38 50       	subi	r19, 0x08	; 8
    88cc:	a9 f7       	brne	.-22     	; 0x88b8 <__ultoa_common+0x14>
    88ce:	a0 5d       	subi	r26, 0xD0	; 208
    88d0:	aa 33       	cpi	r26, 0x3A	; 58
    88d2:	08 f0       	brcs	.+2      	; 0x88d6 <__ultoa_common+0x32>
    88d4:	a9 5d       	subi	r26, 0xD9	; 217
    88d6:	a1 93       	st	Z+, r26
    88d8:	36 f7       	brtc	.-52     	; 0x88a6 <__ultoa_common+0x2>
    88da:	b1 11       	cpse	r27, r1
    88dc:	b1 93       	st	Z+, r27
    88de:	10 82       	st	Z, r1
    88e0:	ca 01       	movw	r24, r20
    88e2:	74 c2       	rjmp	.+1256   	; 0x8dcc <strrev>

000088e4 <utoa>:
    88e4:	45 32       	cpi	r20, 0x25	; 37
    88e6:	51 05       	cpc	r21, r1
    88e8:	18 f4       	brcc	.+6      	; 0x88f0 <utoa+0xc>
    88ea:	42 30       	cpi	r20, 0x02	; 2
    88ec:	08 f0       	brcs	.+2      	; 0x88f0 <utoa+0xc>
    88ee:	04 c0       	rjmp	.+8      	; 0x88f8 <__utoa_ncheck>
    88f0:	fb 01       	movw	r30, r22
    88f2:	10 82       	st	Z, r1
    88f4:	cb 01       	movw	r24, r22
    88f6:	08 95       	ret

000088f8 <__utoa_ncheck>:
    88f8:	bb 27       	eor	r27, r27

000088fa <__utoa_common>:
    88fa:	fb 01       	movw	r30, r22
    88fc:	55 27       	eor	r21, r21
    88fe:	aa 27       	eor	r26, r26
    8900:	88 0f       	add	r24, r24
    8902:	99 1f       	adc	r25, r25
    8904:	aa 1f       	adc	r26, r26
    8906:	a4 17       	cp	r26, r20
    8908:	10 f0       	brcs	.+4      	; 0x890e <__utoa_common+0x14>
    890a:	a4 1b       	sub	r26, r20
    890c:	83 95       	inc	r24
    890e:	50 51       	subi	r21, 0x10	; 16
    8910:	b9 f7       	brne	.-18     	; 0x8900 <__utoa_common+0x6>
    8912:	a0 5d       	subi	r26, 0xD0	; 208
    8914:	aa 33       	cpi	r26, 0x3A	; 58
    8916:	08 f0       	brcs	.+2      	; 0x891a <__utoa_common+0x20>
    8918:	a9 5d       	subi	r26, 0xD9	; 217
    891a:	a1 93       	st	Z+, r26
    891c:	00 97       	sbiw	r24, 0x00	; 0
    891e:	79 f7       	brne	.-34     	; 0x88fe <__utoa_common+0x4>
    8920:	b1 11       	cpse	r27, r1
    8922:	b1 93       	st	Z+, r27
    8924:	11 92       	st	Z+, r1
    8926:	cb 01       	movw	r24, r22
    8928:	51 c2       	rjmp	.+1186   	; 0x8dcc <strrev>

0000892a <dtoa_prf>:
    892a:	8f 92       	push	r8
    892c:	9f 92       	push	r9
    892e:	af 92       	push	r10
    8930:	bf 92       	push	r11
    8932:	cf 92       	push	r12
    8934:	df 92       	push	r13
    8936:	ef 92       	push	r14
    8938:	ff 92       	push	r15
    893a:	0f 93       	push	r16
    893c:	1f 93       	push	r17
    893e:	cf 93       	push	r28
    8940:	df 93       	push	r29
    8942:	cd b7       	in	r28, 0x3d	; 61
    8944:	de b7       	in	r29, 0x3e	; 62
    8946:	29 97       	sbiw	r28, 0x09	; 9
    8948:	0f b6       	in	r0, 0x3f	; 63
    894a:	f8 94       	cli
    894c:	de bf       	out	0x3e, r29	; 62
    894e:	0f be       	out	0x3f, r0	; 63
    8950:	cd bf       	out	0x3d, r28	; 61
    8952:	6a 01       	movw	r12, r20
    8954:	12 2f       	mov	r17, r18
    8956:	b0 2e       	mov	r11, r16
    8958:	2b e3       	ldi	r18, 0x3B	; 59
    895a:	20 17       	cp	r18, r16
    895c:	20 f0       	brcs	.+8      	; 0x8966 <dtoa_prf+0x3c>
    895e:	ff 24       	eor	r15, r15
    8960:	f3 94       	inc	r15
    8962:	f0 0e       	add	r15, r16
    8964:	02 c0       	rjmp	.+4      	; 0x896a <dtoa_prf+0x40>
    8966:	2c e3       	ldi	r18, 0x3C	; 60
    8968:	f2 2e       	mov	r15, r18
    896a:	0f 2d       	mov	r16, r15
    896c:	27 e0       	ldi	r18, 0x07	; 7
    896e:	ae 01       	movw	r20, r28
    8970:	4f 5f       	subi	r20, 0xFF	; 255
    8972:	5f 4f       	sbci	r21, 0xFF	; 255
    8974:	50 d1       	rcall	.+672    	; 0x8c16 <__ftoa_engine>
    8976:	bc 01       	movw	r22, r24
    8978:	49 81       	ldd	r20, Y+1	; 0x01
    897a:	84 2f       	mov	r24, r20
    897c:	89 70       	andi	r24, 0x09	; 9
    897e:	81 30       	cpi	r24, 0x01	; 1
    8980:	31 f0       	breq	.+12     	; 0x898e <dtoa_prf+0x64>
    8982:	e1 fc       	sbrc	r14, 1
    8984:	06 c0       	rjmp	.+12     	; 0x8992 <dtoa_prf+0x68>
    8986:	e0 fe       	sbrs	r14, 0
    8988:	06 c0       	rjmp	.+12     	; 0x8996 <dtoa_prf+0x6c>
    898a:	90 e2       	ldi	r25, 0x20	; 32
    898c:	05 c0       	rjmp	.+10     	; 0x8998 <dtoa_prf+0x6e>
    898e:	9d e2       	ldi	r25, 0x2D	; 45
    8990:	03 c0       	rjmp	.+6      	; 0x8998 <dtoa_prf+0x6e>
    8992:	9b e2       	ldi	r25, 0x2B	; 43
    8994:	01 c0       	rjmp	.+2      	; 0x8998 <dtoa_prf+0x6e>
    8996:	90 e0       	ldi	r25, 0x00	; 0
    8998:	5e 2d       	mov	r21, r14
    899a:	50 71       	andi	r21, 0x10	; 16
    899c:	43 ff       	sbrs	r20, 3
    899e:	3c c0       	rjmp	.+120    	; 0x8a18 <dtoa_prf+0xee>
    89a0:	91 11       	cpse	r25, r1
    89a2:	02 c0       	rjmp	.+4      	; 0x89a8 <dtoa_prf+0x7e>
    89a4:	83 e0       	ldi	r24, 0x03	; 3
    89a6:	01 c0       	rjmp	.+2      	; 0x89aa <dtoa_prf+0x80>
    89a8:	84 e0       	ldi	r24, 0x04	; 4
    89aa:	81 17       	cp	r24, r17
    89ac:	18 f4       	brcc	.+6      	; 0x89b4 <dtoa_prf+0x8a>
    89ae:	21 2f       	mov	r18, r17
    89b0:	28 1b       	sub	r18, r24
    89b2:	01 c0       	rjmp	.+2      	; 0x89b6 <dtoa_prf+0x8c>
    89b4:	20 e0       	ldi	r18, 0x00	; 0
    89b6:	51 11       	cpse	r21, r1
    89b8:	0b c0       	rjmp	.+22     	; 0x89d0 <dtoa_prf+0xa6>
    89ba:	f6 01       	movw	r30, r12
    89bc:	82 2f       	mov	r24, r18
    89be:	30 e2       	ldi	r19, 0x20	; 32
    89c0:	88 23       	and	r24, r24
    89c2:	19 f0       	breq	.+6      	; 0x89ca <dtoa_prf+0xa0>
    89c4:	31 93       	st	Z+, r19
    89c6:	81 50       	subi	r24, 0x01	; 1
    89c8:	fb cf       	rjmp	.-10     	; 0x89c0 <dtoa_prf+0x96>
    89ca:	c2 0e       	add	r12, r18
    89cc:	d1 1c       	adc	r13, r1
    89ce:	20 e0       	ldi	r18, 0x00	; 0
    89d0:	99 23       	and	r25, r25
    89d2:	29 f0       	breq	.+10     	; 0x89de <dtoa_prf+0xb4>
    89d4:	d6 01       	movw	r26, r12
    89d6:	9c 93       	st	X, r25
    89d8:	f6 01       	movw	r30, r12
    89da:	31 96       	adiw	r30, 0x01	; 1
    89dc:	6f 01       	movw	r12, r30
    89de:	c6 01       	movw	r24, r12
    89e0:	03 96       	adiw	r24, 0x03	; 3
    89e2:	e2 fe       	sbrs	r14, 2
    89e4:	0a c0       	rjmp	.+20     	; 0x89fa <dtoa_prf+0xd0>
    89e6:	3e e4       	ldi	r19, 0x4E	; 78
    89e8:	d6 01       	movw	r26, r12
    89ea:	3c 93       	st	X, r19
    89ec:	41 e4       	ldi	r20, 0x41	; 65
    89ee:	11 96       	adiw	r26, 0x01	; 1
    89f0:	4c 93       	st	X, r20
    89f2:	11 97       	sbiw	r26, 0x01	; 1
    89f4:	12 96       	adiw	r26, 0x02	; 2
    89f6:	3c 93       	st	X, r19
    89f8:	06 c0       	rjmp	.+12     	; 0x8a06 <dtoa_prf+0xdc>
    89fa:	3e e6       	ldi	r19, 0x6E	; 110
    89fc:	f6 01       	movw	r30, r12
    89fe:	30 83       	st	Z, r19
    8a00:	41 e6       	ldi	r20, 0x61	; 97
    8a02:	41 83       	std	Z+1, r20	; 0x01
    8a04:	32 83       	std	Z+2, r19	; 0x02
    8a06:	fc 01       	movw	r30, r24
    8a08:	32 2f       	mov	r19, r18
    8a0a:	40 e2       	ldi	r20, 0x20	; 32
    8a0c:	33 23       	and	r19, r19
    8a0e:	09 f4       	brne	.+2      	; 0x8a12 <dtoa_prf+0xe8>
    8a10:	42 c0       	rjmp	.+132    	; 0x8a96 <dtoa_prf+0x16c>
    8a12:	41 93       	st	Z+, r20
    8a14:	31 50       	subi	r19, 0x01	; 1
    8a16:	fa cf       	rjmp	.-12     	; 0x8a0c <dtoa_prf+0xe2>
    8a18:	42 ff       	sbrs	r20, 2
    8a1a:	44 c0       	rjmp	.+136    	; 0x8aa4 <dtoa_prf+0x17a>
    8a1c:	91 11       	cpse	r25, r1
    8a1e:	02 c0       	rjmp	.+4      	; 0x8a24 <dtoa_prf+0xfa>
    8a20:	83 e0       	ldi	r24, 0x03	; 3
    8a22:	01 c0       	rjmp	.+2      	; 0x8a26 <dtoa_prf+0xfc>
    8a24:	84 e0       	ldi	r24, 0x04	; 4
    8a26:	81 17       	cp	r24, r17
    8a28:	18 f4       	brcc	.+6      	; 0x8a30 <dtoa_prf+0x106>
    8a2a:	21 2f       	mov	r18, r17
    8a2c:	28 1b       	sub	r18, r24
    8a2e:	01 c0       	rjmp	.+2      	; 0x8a32 <dtoa_prf+0x108>
    8a30:	20 e0       	ldi	r18, 0x00	; 0
    8a32:	51 11       	cpse	r21, r1
    8a34:	0b c0       	rjmp	.+22     	; 0x8a4c <dtoa_prf+0x122>
    8a36:	f6 01       	movw	r30, r12
    8a38:	82 2f       	mov	r24, r18
    8a3a:	30 e2       	ldi	r19, 0x20	; 32
    8a3c:	88 23       	and	r24, r24
    8a3e:	19 f0       	breq	.+6      	; 0x8a46 <dtoa_prf+0x11c>
    8a40:	31 93       	st	Z+, r19
    8a42:	81 50       	subi	r24, 0x01	; 1
    8a44:	fb cf       	rjmp	.-10     	; 0x8a3c <dtoa_prf+0x112>
    8a46:	c2 0e       	add	r12, r18
    8a48:	d1 1c       	adc	r13, r1
    8a4a:	20 e0       	ldi	r18, 0x00	; 0
    8a4c:	99 23       	and	r25, r25
    8a4e:	29 f0       	breq	.+10     	; 0x8a5a <dtoa_prf+0x130>
    8a50:	d6 01       	movw	r26, r12
    8a52:	9c 93       	st	X, r25
    8a54:	f6 01       	movw	r30, r12
    8a56:	31 96       	adiw	r30, 0x01	; 1
    8a58:	6f 01       	movw	r12, r30
    8a5a:	c6 01       	movw	r24, r12
    8a5c:	03 96       	adiw	r24, 0x03	; 3
    8a5e:	e2 fe       	sbrs	r14, 2
    8a60:	0b c0       	rjmp	.+22     	; 0x8a78 <dtoa_prf+0x14e>
    8a62:	39 e4       	ldi	r19, 0x49	; 73
    8a64:	d6 01       	movw	r26, r12
    8a66:	3c 93       	st	X, r19
    8a68:	3e e4       	ldi	r19, 0x4E	; 78
    8a6a:	11 96       	adiw	r26, 0x01	; 1
    8a6c:	3c 93       	st	X, r19
    8a6e:	11 97       	sbiw	r26, 0x01	; 1
    8a70:	36 e4       	ldi	r19, 0x46	; 70
    8a72:	12 96       	adiw	r26, 0x02	; 2
    8a74:	3c 93       	st	X, r19
    8a76:	07 c0       	rjmp	.+14     	; 0x8a86 <dtoa_prf+0x15c>
    8a78:	39 e6       	ldi	r19, 0x69	; 105
    8a7a:	f6 01       	movw	r30, r12
    8a7c:	30 83       	st	Z, r19
    8a7e:	3e e6       	ldi	r19, 0x6E	; 110
    8a80:	31 83       	std	Z+1, r19	; 0x01
    8a82:	36 e6       	ldi	r19, 0x66	; 102
    8a84:	32 83       	std	Z+2, r19	; 0x02
    8a86:	fc 01       	movw	r30, r24
    8a88:	32 2f       	mov	r19, r18
    8a8a:	40 e2       	ldi	r20, 0x20	; 32
    8a8c:	33 23       	and	r19, r19
    8a8e:	19 f0       	breq	.+6      	; 0x8a96 <dtoa_prf+0x16c>
    8a90:	41 93       	st	Z+, r20
    8a92:	31 50       	subi	r19, 0x01	; 1
    8a94:	fb cf       	rjmp	.-10     	; 0x8a8c <dtoa_prf+0x162>
    8a96:	fc 01       	movw	r30, r24
    8a98:	e2 0f       	add	r30, r18
    8a9a:	f1 1d       	adc	r31, r1
    8a9c:	10 82       	st	Z, r1
    8a9e:	8e ef       	ldi	r24, 0xFE	; 254
    8aa0:	9f ef       	ldi	r25, 0xFF	; 255
    8aa2:	a6 c0       	rjmp	.+332    	; 0x8bf0 <dtoa_prf+0x2c6>
    8aa4:	21 e0       	ldi	r18, 0x01	; 1
    8aa6:	30 e0       	ldi	r19, 0x00	; 0
    8aa8:	91 11       	cpse	r25, r1
    8aaa:	02 c0       	rjmp	.+4      	; 0x8ab0 <dtoa_prf+0x186>
    8aac:	20 e0       	ldi	r18, 0x00	; 0
    8aae:	30 e0       	ldi	r19, 0x00	; 0
    8ab0:	16 16       	cp	r1, r22
    8ab2:	17 06       	cpc	r1, r23
    8ab4:	1c f4       	brge	.+6      	; 0x8abc <dtoa_prf+0x192>
    8ab6:	fb 01       	movw	r30, r22
    8ab8:	31 96       	adiw	r30, 0x01	; 1
    8aba:	02 c0       	rjmp	.+4      	; 0x8ac0 <dtoa_prf+0x196>
    8abc:	e1 e0       	ldi	r30, 0x01	; 1
    8abe:	f0 e0       	ldi	r31, 0x00	; 0
    8ac0:	2e 0f       	add	r18, r30
    8ac2:	3f 1f       	adc	r19, r31
    8ac4:	bb 20       	and	r11, r11
    8ac6:	21 f0       	breq	.+8      	; 0x8ad0 <dtoa_prf+0x1a6>
    8ac8:	eb 2d       	mov	r30, r11
    8aca:	f0 e0       	ldi	r31, 0x00	; 0
    8acc:	31 96       	adiw	r30, 0x01	; 1
    8ace:	02 c0       	rjmp	.+4      	; 0x8ad4 <dtoa_prf+0x1aa>
    8ad0:	e0 e0       	ldi	r30, 0x00	; 0
    8ad2:	f0 e0       	ldi	r31, 0x00	; 0
    8ad4:	2e 0f       	add	r18, r30
    8ad6:	3f 1f       	adc	r19, r31
    8ad8:	e1 2f       	mov	r30, r17
    8ada:	f0 e0       	ldi	r31, 0x00	; 0
    8adc:	2e 17       	cp	r18, r30
    8ade:	3f 07       	cpc	r19, r31
    8ae0:	1c f4       	brge	.+6      	; 0x8ae8 <dtoa_prf+0x1be>
    8ae2:	12 1b       	sub	r17, r18
    8ae4:	21 2f       	mov	r18, r17
    8ae6:	01 c0       	rjmp	.+2      	; 0x8aea <dtoa_prf+0x1c0>
    8ae8:	20 e0       	ldi	r18, 0x00	; 0
    8aea:	8e 2d       	mov	r24, r14
    8aec:	88 71       	andi	r24, 0x18	; 24
    8aee:	59 f4       	brne	.+22     	; 0x8b06 <dtoa_prf+0x1dc>
    8af0:	f6 01       	movw	r30, r12
    8af2:	82 2f       	mov	r24, r18
    8af4:	30 e2       	ldi	r19, 0x20	; 32
    8af6:	88 23       	and	r24, r24
    8af8:	19 f0       	breq	.+6      	; 0x8b00 <dtoa_prf+0x1d6>
    8afa:	31 93       	st	Z+, r19
    8afc:	81 50       	subi	r24, 0x01	; 1
    8afe:	fb cf       	rjmp	.-10     	; 0x8af6 <dtoa_prf+0x1cc>
    8b00:	c2 0e       	add	r12, r18
    8b02:	d1 1c       	adc	r13, r1
    8b04:	20 e0       	ldi	r18, 0x00	; 0
    8b06:	99 23       	and	r25, r25
    8b08:	29 f0       	breq	.+10     	; 0x8b14 <dtoa_prf+0x1ea>
    8b0a:	d6 01       	movw	r26, r12
    8b0c:	9c 93       	st	X, r25
    8b0e:	f6 01       	movw	r30, r12
    8b10:	31 96       	adiw	r30, 0x01	; 1
    8b12:	6f 01       	movw	r12, r30
    8b14:	51 11       	cpse	r21, r1
    8b16:	0b c0       	rjmp	.+22     	; 0x8b2e <dtoa_prf+0x204>
    8b18:	f6 01       	movw	r30, r12
    8b1a:	82 2f       	mov	r24, r18
    8b1c:	90 e3       	ldi	r25, 0x30	; 48
    8b1e:	88 23       	and	r24, r24
    8b20:	19 f0       	breq	.+6      	; 0x8b28 <dtoa_prf+0x1fe>
    8b22:	91 93       	st	Z+, r25
    8b24:	81 50       	subi	r24, 0x01	; 1
    8b26:	fb cf       	rjmp	.-10     	; 0x8b1e <dtoa_prf+0x1f4>
    8b28:	c2 0e       	add	r12, r18
    8b2a:	d1 1c       	adc	r13, r1
    8b2c:	20 e0       	ldi	r18, 0x00	; 0
    8b2e:	0f 2d       	mov	r16, r15
    8b30:	06 0f       	add	r16, r22
    8b32:	9a 81       	ldd	r25, Y+2	; 0x02
    8b34:	34 2f       	mov	r19, r20
    8b36:	30 71       	andi	r19, 0x10	; 16
    8b38:	44 ff       	sbrs	r20, 4
    8b3a:	03 c0       	rjmp	.+6      	; 0x8b42 <dtoa_prf+0x218>
    8b3c:	91 33       	cpi	r25, 0x31	; 49
    8b3e:	09 f4       	brne	.+2      	; 0x8b42 <dtoa_prf+0x218>
    8b40:	01 50       	subi	r16, 0x01	; 1
    8b42:	10 16       	cp	r1, r16
    8b44:	24 f4       	brge	.+8      	; 0x8b4e <dtoa_prf+0x224>
    8b46:	09 30       	cpi	r16, 0x09	; 9
    8b48:	18 f0       	brcs	.+6      	; 0x8b50 <dtoa_prf+0x226>
    8b4a:	08 e0       	ldi	r16, 0x08	; 8
    8b4c:	01 c0       	rjmp	.+2      	; 0x8b50 <dtoa_prf+0x226>
    8b4e:	01 e0       	ldi	r16, 0x01	; 1
    8b50:	ab 01       	movw	r20, r22
    8b52:	77 ff       	sbrs	r23, 7
    8b54:	02 c0       	rjmp	.+4      	; 0x8b5a <dtoa_prf+0x230>
    8b56:	40 e0       	ldi	r20, 0x00	; 0
    8b58:	50 e0       	ldi	r21, 0x00	; 0
    8b5a:	fb 01       	movw	r30, r22
    8b5c:	e4 1b       	sub	r30, r20
    8b5e:	f5 0b       	sbc	r31, r21
    8b60:	a1 e0       	ldi	r26, 0x01	; 1
    8b62:	b0 e0       	ldi	r27, 0x00	; 0
    8b64:	ac 0f       	add	r26, r28
    8b66:	bd 1f       	adc	r27, r29
    8b68:	ea 0f       	add	r30, r26
    8b6a:	fb 1f       	adc	r31, r27
    8b6c:	8e e2       	ldi	r24, 0x2E	; 46
    8b6e:	a8 2e       	mov	r10, r24
    8b70:	4b 01       	movw	r8, r22
    8b72:	80 1a       	sub	r8, r16
    8b74:	91 08       	sbc	r9, r1
    8b76:	0b 2d       	mov	r16, r11
    8b78:	10 e0       	ldi	r17, 0x00	; 0
    8b7a:	11 95       	neg	r17
    8b7c:	01 95       	neg	r16
    8b7e:	11 09       	sbc	r17, r1
    8b80:	4f 3f       	cpi	r20, 0xFF	; 255
    8b82:	bf ef       	ldi	r27, 0xFF	; 255
    8b84:	5b 07       	cpc	r21, r27
    8b86:	21 f4       	brne	.+8      	; 0x8b90 <dtoa_prf+0x266>
    8b88:	d6 01       	movw	r26, r12
    8b8a:	ac 92       	st	X, r10
    8b8c:	11 96       	adiw	r26, 0x01	; 1
    8b8e:	6d 01       	movw	r12, r26
    8b90:	64 17       	cp	r22, r20
    8b92:	75 07       	cpc	r23, r21
    8b94:	2c f0       	brlt	.+10     	; 0x8ba0 <dtoa_prf+0x276>
    8b96:	84 16       	cp	r8, r20
    8b98:	95 06       	cpc	r9, r21
    8b9a:	14 f4       	brge	.+4      	; 0x8ba0 <dtoa_prf+0x276>
    8b9c:	81 81       	ldd	r24, Z+1	; 0x01
    8b9e:	01 c0       	rjmp	.+2      	; 0x8ba2 <dtoa_prf+0x278>
    8ba0:	80 e3       	ldi	r24, 0x30	; 48
    8ba2:	41 50       	subi	r20, 0x01	; 1
    8ba4:	51 09       	sbc	r21, r1
    8ba6:	31 96       	adiw	r30, 0x01	; 1
    8ba8:	d6 01       	movw	r26, r12
    8baa:	11 96       	adiw	r26, 0x01	; 1
    8bac:	7d 01       	movw	r14, r26
    8bae:	40 17       	cp	r20, r16
    8bb0:	51 07       	cpc	r21, r17
    8bb2:	24 f0       	brlt	.+8      	; 0x8bbc <dtoa_prf+0x292>
    8bb4:	d6 01       	movw	r26, r12
    8bb6:	8c 93       	st	X, r24
    8bb8:	67 01       	movw	r12, r14
    8bba:	e2 cf       	rjmp	.-60     	; 0x8b80 <dtoa_prf+0x256>
    8bbc:	64 17       	cp	r22, r20
    8bbe:	75 07       	cpc	r23, r21
    8bc0:	39 f4       	brne	.+14     	; 0x8bd0 <dtoa_prf+0x2a6>
    8bc2:	96 33       	cpi	r25, 0x36	; 54
    8bc4:	20 f4       	brcc	.+8      	; 0x8bce <dtoa_prf+0x2a4>
    8bc6:	95 33       	cpi	r25, 0x35	; 53
    8bc8:	19 f4       	brne	.+6      	; 0x8bd0 <dtoa_prf+0x2a6>
    8bca:	31 11       	cpse	r19, r1
    8bcc:	01 c0       	rjmp	.+2      	; 0x8bd0 <dtoa_prf+0x2a6>
    8bce:	81 e3       	ldi	r24, 0x31	; 49
    8bd0:	f6 01       	movw	r30, r12
    8bd2:	80 83       	st	Z, r24
    8bd4:	f7 01       	movw	r30, r14
    8bd6:	82 2f       	mov	r24, r18
    8bd8:	90 e2       	ldi	r25, 0x20	; 32
    8bda:	88 23       	and	r24, r24
    8bdc:	19 f0       	breq	.+6      	; 0x8be4 <dtoa_prf+0x2ba>
    8bde:	91 93       	st	Z+, r25
    8be0:	81 50       	subi	r24, 0x01	; 1
    8be2:	fb cf       	rjmp	.-10     	; 0x8bda <dtoa_prf+0x2b0>
    8be4:	f7 01       	movw	r30, r14
    8be6:	e2 0f       	add	r30, r18
    8be8:	f1 1d       	adc	r31, r1
    8bea:	10 82       	st	Z, r1
    8bec:	80 e0       	ldi	r24, 0x00	; 0
    8bee:	90 e0       	ldi	r25, 0x00	; 0
    8bf0:	29 96       	adiw	r28, 0x09	; 9
    8bf2:	0f b6       	in	r0, 0x3f	; 63
    8bf4:	f8 94       	cli
    8bf6:	de bf       	out	0x3e, r29	; 62
    8bf8:	0f be       	out	0x3f, r0	; 63
    8bfa:	cd bf       	out	0x3d, r28	; 61
    8bfc:	df 91       	pop	r29
    8bfe:	cf 91       	pop	r28
    8c00:	1f 91       	pop	r17
    8c02:	0f 91       	pop	r16
    8c04:	ff 90       	pop	r15
    8c06:	ef 90       	pop	r14
    8c08:	df 90       	pop	r13
    8c0a:	cf 90       	pop	r12
    8c0c:	bf 90       	pop	r11
    8c0e:	af 90       	pop	r10
    8c10:	9f 90       	pop	r9
    8c12:	8f 90       	pop	r8
    8c14:	08 95       	ret

00008c16 <__ftoa_engine>:
    8c16:	28 30       	cpi	r18, 0x08	; 8
    8c18:	08 f0       	brcs	.+2      	; 0x8c1c <__ftoa_engine+0x6>
    8c1a:	27 e0       	ldi	r18, 0x07	; 7
    8c1c:	33 27       	eor	r19, r19
    8c1e:	da 01       	movw	r26, r20
    8c20:	99 0f       	add	r25, r25
    8c22:	31 1d       	adc	r19, r1
    8c24:	87 fd       	sbrc	r24, 7
    8c26:	91 60       	ori	r25, 0x01	; 1
    8c28:	00 96       	adiw	r24, 0x00	; 0
    8c2a:	61 05       	cpc	r22, r1
    8c2c:	71 05       	cpc	r23, r1
    8c2e:	39 f4       	brne	.+14     	; 0x8c3e <__ftoa_engine+0x28>
    8c30:	32 60       	ori	r19, 0x02	; 2
    8c32:	2e 5f       	subi	r18, 0xFE	; 254
    8c34:	3d 93       	st	X+, r19
    8c36:	30 e3       	ldi	r19, 0x30	; 48
    8c38:	2a 95       	dec	r18
    8c3a:	e1 f7       	brne	.-8      	; 0x8c34 <__ftoa_engine+0x1e>
    8c3c:	08 95       	ret
    8c3e:	9f 3f       	cpi	r25, 0xFF	; 255
    8c40:	30 f0       	brcs	.+12     	; 0x8c4e <__ftoa_engine+0x38>
    8c42:	80 38       	cpi	r24, 0x80	; 128
    8c44:	71 05       	cpc	r23, r1
    8c46:	61 05       	cpc	r22, r1
    8c48:	09 f0       	breq	.+2      	; 0x8c4c <__ftoa_engine+0x36>
    8c4a:	3c 5f       	subi	r19, 0xFC	; 252
    8c4c:	3c 5f       	subi	r19, 0xFC	; 252
    8c4e:	3d 93       	st	X+, r19
    8c50:	91 30       	cpi	r25, 0x01	; 1
    8c52:	08 f0       	brcs	.+2      	; 0x8c56 <__ftoa_engine+0x40>
    8c54:	80 68       	ori	r24, 0x80	; 128
    8c56:	91 1d       	adc	r25, r1
    8c58:	df 93       	push	r29
    8c5a:	cf 93       	push	r28
    8c5c:	1f 93       	push	r17
    8c5e:	0f 93       	push	r16
    8c60:	ff 92       	push	r15
    8c62:	ef 92       	push	r14
    8c64:	19 2f       	mov	r17, r25
    8c66:	98 7f       	andi	r25, 0xF8	; 248
    8c68:	96 95       	lsr	r25
    8c6a:	e9 2f       	mov	r30, r25
    8c6c:	96 95       	lsr	r25
    8c6e:	96 95       	lsr	r25
    8c70:	e9 0f       	add	r30, r25
    8c72:	ff 27       	eor	r31, r31
    8c74:	ee 5d       	subi	r30, 0xDE	; 222
    8c76:	fe 4f       	sbci	r31, 0xFE	; 254
    8c78:	99 27       	eor	r25, r25
    8c7a:	33 27       	eor	r19, r19
    8c7c:	ee 24       	eor	r14, r14
    8c7e:	ff 24       	eor	r15, r15
    8c80:	a7 01       	movw	r20, r14
    8c82:	e7 01       	movw	r28, r14
    8c84:	05 90       	lpm	r0, Z+
    8c86:	08 94       	sec
    8c88:	07 94       	ror	r0
    8c8a:	28 f4       	brcc	.+10     	; 0x8c96 <__ftoa_engine+0x80>
    8c8c:	36 0f       	add	r19, r22
    8c8e:	e7 1e       	adc	r14, r23
    8c90:	f8 1e       	adc	r15, r24
    8c92:	49 1f       	adc	r20, r25
    8c94:	51 1d       	adc	r21, r1
    8c96:	66 0f       	add	r22, r22
    8c98:	77 1f       	adc	r23, r23
    8c9a:	88 1f       	adc	r24, r24
    8c9c:	99 1f       	adc	r25, r25
    8c9e:	06 94       	lsr	r0
    8ca0:	a1 f7       	brne	.-24     	; 0x8c8a <__ftoa_engine+0x74>
    8ca2:	05 90       	lpm	r0, Z+
    8ca4:	07 94       	ror	r0
    8ca6:	28 f4       	brcc	.+10     	; 0x8cb2 <__ftoa_engine+0x9c>
    8ca8:	e7 0e       	add	r14, r23
    8caa:	f8 1e       	adc	r15, r24
    8cac:	49 1f       	adc	r20, r25
    8cae:	56 1f       	adc	r21, r22
    8cb0:	c1 1d       	adc	r28, r1
    8cb2:	77 0f       	add	r23, r23
    8cb4:	88 1f       	adc	r24, r24
    8cb6:	99 1f       	adc	r25, r25
    8cb8:	66 1f       	adc	r22, r22
    8cba:	06 94       	lsr	r0
    8cbc:	a1 f7       	brne	.-24     	; 0x8ca6 <__ftoa_engine+0x90>
    8cbe:	05 90       	lpm	r0, Z+
    8cc0:	07 94       	ror	r0
    8cc2:	28 f4       	brcc	.+10     	; 0x8cce <__ftoa_engine+0xb8>
    8cc4:	f8 0e       	add	r15, r24
    8cc6:	49 1f       	adc	r20, r25
    8cc8:	56 1f       	adc	r21, r22
    8cca:	c7 1f       	adc	r28, r23
    8ccc:	d1 1d       	adc	r29, r1
    8cce:	88 0f       	add	r24, r24
    8cd0:	99 1f       	adc	r25, r25
    8cd2:	66 1f       	adc	r22, r22
    8cd4:	77 1f       	adc	r23, r23
    8cd6:	06 94       	lsr	r0
    8cd8:	a1 f7       	brne	.-24     	; 0x8cc2 <__ftoa_engine+0xac>
    8cda:	05 90       	lpm	r0, Z+
    8cdc:	07 94       	ror	r0
    8cde:	20 f4       	brcc	.+8      	; 0x8ce8 <__ftoa_engine+0xd2>
    8ce0:	49 0f       	add	r20, r25
    8ce2:	56 1f       	adc	r21, r22
    8ce4:	c7 1f       	adc	r28, r23
    8ce6:	d8 1f       	adc	r29, r24
    8ce8:	99 0f       	add	r25, r25
    8cea:	66 1f       	adc	r22, r22
    8cec:	77 1f       	adc	r23, r23
    8cee:	88 1f       	adc	r24, r24
    8cf0:	06 94       	lsr	r0
    8cf2:	a9 f7       	brne	.-22     	; 0x8cde <__ftoa_engine+0xc8>
    8cf4:	84 91       	lpm	r24, Z
    8cf6:	10 95       	com	r17
    8cf8:	17 70       	andi	r17, 0x07	; 7
    8cfa:	41 f0       	breq	.+16     	; 0x8d0c <__ftoa_engine+0xf6>
    8cfc:	d6 95       	lsr	r29
    8cfe:	c7 95       	ror	r28
    8d00:	57 95       	ror	r21
    8d02:	47 95       	ror	r20
    8d04:	f7 94       	ror	r15
    8d06:	e7 94       	ror	r14
    8d08:	1a 95       	dec	r17
    8d0a:	c1 f7       	brne	.-16     	; 0x8cfc <__ftoa_engine+0xe6>
    8d0c:	e8 ec       	ldi	r30, 0xC8	; 200
    8d0e:	f0 e0       	ldi	r31, 0x00	; 0
    8d10:	68 94       	set
    8d12:	15 90       	lpm	r1, Z+
    8d14:	15 91       	lpm	r17, Z+
    8d16:	35 91       	lpm	r19, Z+
    8d18:	65 91       	lpm	r22, Z+
    8d1a:	95 91       	lpm	r25, Z+
    8d1c:	05 90       	lpm	r0, Z+
    8d1e:	7f e2       	ldi	r23, 0x2F	; 47
    8d20:	73 95       	inc	r23
    8d22:	e1 18       	sub	r14, r1
    8d24:	f1 0a       	sbc	r15, r17
    8d26:	43 0b       	sbc	r20, r19
    8d28:	56 0b       	sbc	r21, r22
    8d2a:	c9 0b       	sbc	r28, r25
    8d2c:	d0 09       	sbc	r29, r0
    8d2e:	c0 f7       	brcc	.-16     	; 0x8d20 <__ftoa_engine+0x10a>
    8d30:	e1 0c       	add	r14, r1
    8d32:	f1 1e       	adc	r15, r17
    8d34:	43 1f       	adc	r20, r19
    8d36:	56 1f       	adc	r21, r22
    8d38:	c9 1f       	adc	r28, r25
    8d3a:	d0 1d       	adc	r29, r0
    8d3c:	7e f4       	brtc	.+30     	; 0x8d5c <__ftoa_engine+0x146>
    8d3e:	70 33       	cpi	r23, 0x30	; 48
    8d40:	11 f4       	brne	.+4      	; 0x8d46 <__ftoa_engine+0x130>
    8d42:	8a 95       	dec	r24
    8d44:	e6 cf       	rjmp	.-52     	; 0x8d12 <__ftoa_engine+0xfc>
    8d46:	e8 94       	clt
    8d48:	01 50       	subi	r16, 0x01	; 1
    8d4a:	30 f0       	brcs	.+12     	; 0x8d58 <__ftoa_engine+0x142>
    8d4c:	08 0f       	add	r16, r24
    8d4e:	0a f4       	brpl	.+2      	; 0x8d52 <__ftoa_engine+0x13c>
    8d50:	00 27       	eor	r16, r16
    8d52:	02 17       	cp	r16, r18
    8d54:	08 f4       	brcc	.+2      	; 0x8d58 <__ftoa_engine+0x142>
    8d56:	20 2f       	mov	r18, r16
    8d58:	23 95       	inc	r18
    8d5a:	02 2f       	mov	r16, r18
    8d5c:	7a 33       	cpi	r23, 0x3A	; 58
    8d5e:	28 f0       	brcs	.+10     	; 0x8d6a <__ftoa_engine+0x154>
    8d60:	79 e3       	ldi	r23, 0x39	; 57
    8d62:	7d 93       	st	X+, r23
    8d64:	2a 95       	dec	r18
    8d66:	e9 f7       	brne	.-6      	; 0x8d62 <__ftoa_engine+0x14c>
    8d68:	10 c0       	rjmp	.+32     	; 0x8d8a <__ftoa_engine+0x174>
    8d6a:	7d 93       	st	X+, r23
    8d6c:	2a 95       	dec	r18
    8d6e:	89 f6       	brne	.-94     	; 0x8d12 <__ftoa_engine+0xfc>
    8d70:	06 94       	lsr	r0
    8d72:	97 95       	ror	r25
    8d74:	67 95       	ror	r22
    8d76:	37 95       	ror	r19
    8d78:	17 95       	ror	r17
    8d7a:	17 94       	ror	r1
    8d7c:	e1 18       	sub	r14, r1
    8d7e:	f1 0a       	sbc	r15, r17
    8d80:	43 0b       	sbc	r20, r19
    8d82:	56 0b       	sbc	r21, r22
    8d84:	c9 0b       	sbc	r28, r25
    8d86:	d0 09       	sbc	r29, r0
    8d88:	98 f0       	brcs	.+38     	; 0x8db0 <__ftoa_engine+0x19a>
    8d8a:	23 95       	inc	r18
    8d8c:	7e 91       	ld	r23, -X
    8d8e:	73 95       	inc	r23
    8d90:	7a 33       	cpi	r23, 0x3A	; 58
    8d92:	08 f0       	brcs	.+2      	; 0x8d96 <__ftoa_engine+0x180>
    8d94:	70 e3       	ldi	r23, 0x30	; 48
    8d96:	7c 93       	st	X, r23
    8d98:	20 13       	cpse	r18, r16
    8d9a:	b8 f7       	brcc	.-18     	; 0x8d8a <__ftoa_engine+0x174>
    8d9c:	7e 91       	ld	r23, -X
    8d9e:	70 61       	ori	r23, 0x10	; 16
    8da0:	7d 93       	st	X+, r23
    8da2:	30 f0       	brcs	.+12     	; 0x8db0 <__ftoa_engine+0x19a>
    8da4:	83 95       	inc	r24
    8da6:	71 e3       	ldi	r23, 0x31	; 49
    8da8:	7d 93       	st	X+, r23
    8daa:	70 e3       	ldi	r23, 0x30	; 48
    8dac:	2a 95       	dec	r18
    8dae:	e1 f7       	brne	.-8      	; 0x8da8 <__ftoa_engine+0x192>
    8db0:	11 24       	eor	r1, r1
    8db2:	ef 90       	pop	r14
    8db4:	ff 90       	pop	r15
    8db6:	0f 91       	pop	r16
    8db8:	1f 91       	pop	r17
    8dba:	cf 91       	pop	r28
    8dbc:	df 91       	pop	r29
    8dbe:	99 27       	eor	r25, r25
    8dc0:	87 fd       	sbrc	r24, 7
    8dc2:	90 95       	com	r25
    8dc4:	08 95       	ret

00008dc6 <__ctype_isfalse>:
    8dc6:	99 27       	eor	r25, r25
    8dc8:	88 27       	eor	r24, r24

00008dca <__ctype_istrue>:
    8dca:	08 95       	ret

00008dcc <strrev>:
    8dcc:	dc 01       	movw	r26, r24
    8dce:	fc 01       	movw	r30, r24
    8dd0:	67 2f       	mov	r22, r23
    8dd2:	71 91       	ld	r23, Z+
    8dd4:	77 23       	and	r23, r23
    8dd6:	e1 f7       	brne	.-8      	; 0x8dd0 <strrev+0x4>
    8dd8:	32 97       	sbiw	r30, 0x02	; 2
    8dda:	04 c0       	rjmp	.+8      	; 0x8de4 <strrev+0x18>
    8ddc:	7c 91       	ld	r23, X
    8dde:	6d 93       	st	X+, r22
    8de0:	70 83       	st	Z, r23
    8de2:	62 91       	ld	r22, -Z
    8de4:	ae 17       	cp	r26, r30
    8de6:	bf 07       	cpc	r27, r31
    8de8:	c8 f3       	brcs	.-14     	; 0x8ddc <strrev+0x10>
    8dea:	08 95       	ret

00008dec <__do_global_dtors>:
    8dec:	11 e0       	ldi	r17, 0x01	; 1
    8dee:	c6 e6       	ldi	r28, 0x66	; 102
    8df0:	d1 e0       	ldi	r29, 0x01	; 1
    8df2:	03 c0       	rjmp	.+6      	; 0x8dfa <__do_global_dtors+0xe>
    8df4:	fe 01       	movw	r30, r28
    8df6:	a2 d9       	rcall	.-3260   	; 0x813c <__tablejump2__>
    8df8:	21 96       	adiw	r28, 0x01	; 1
    8dfa:	c7 36       	cpi	r28, 0x67	; 103
    8dfc:	d1 07       	cpc	r29, r17
    8dfe:	d1 f7       	brne	.-12     	; 0x8df4 <__do_global_dtors+0x8>
    8e00:	f8 94       	cli

00008e02 <__stop_program>:
    8e02:	ff cf       	rjmp	.-2      	; 0x8e02 <__stop_program>
